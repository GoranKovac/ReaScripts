{
 [1] = {
  fname = "BatchConvertFiles",
  label = "US_BatchConvertFiles",
  run = "in/out",
  desc = "Converts files using Reaper's own BatchConverter.\
\
This function will open another instance of Reaper that runs the batchconverter, so it will still open the batch-converter-list for the time of conversion.\
Though as it is another instance, you can safely go back to the old instance of Reaper.\
\
This function will probably NOT finish before the batch-converter is finished with conversion, keep this in mind.\
\
Will take away the focus from the currently focused window, as Reaper puts keyboard-focus to the newly started Reaper-instance that does the batch-conversion.    \
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table of filenames+path, that shall be converted",
    name = "INPUTFILELIST",
   },
   [2] = {
    type = "TABLE",
    desc = "a table of the target filenames+path, where the first filename is the target for the first inputfilename, etc",
    name = "OUTPUTFILELIST",
   },
   [3] = {
    type = "TABLE",
    desc = "the settings for the conversion; just use the render-table-functions to create one",
    name = "RENDERTABLE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, include BWF-start; false or nil, don't include BWF-start",
    opt = {
     use = false,
    },
    name = "BWFSTART",
   },
   [5] = {
    type = "INTEGER",
    desc = "the start of the padding in seconds; nil, to omit it",
    opt = {
     use = false,
    },
    name = "PADSTART",
   },
   [6] = {
    type = "INTEGER",
    desc = "the end of the padding in seconds; nil, to omit it",
    opt = {
     use = false,
    },
    name = "PADEND",
   },
   [7] = {
    type = "STRING",
    desc = "an FXChain as FXStateChunk; with that you can add fx on top of the to-convert-files.",
    opt = {
     use = false,
    },
    name = "FXSTATECHUNK",
   },
   [8] = {
    type = "BOOLEAN",
    desc = "true, tries to retain the metadata from the sourcefile; false, doesn't try to retain metadata",
    opt = {
     use = false,
    },
    name = "USERCMETADATA",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, conversion was successfully started; false, conversion didn't start",
    name = "RETVAL",
   },
  },
  sp_api = "ultraschall",
 },
 [2] = {
  fname = "GetBatchConverter_NotifyWhenFinished",
  label = "US_GetBatchConverter_NotifyWhenFinished",
  run = "in/out",
  desc = "Returns, the state of the \"notify when finished\"-checkbox in the BatchConverter.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, notify when finished; false, don't notify when finished",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [3] = {
  fname = "SetBatchConverter_NotifyWhenFinished",
  label = "US_SetBatchConverter_NotifyWhenFinished",
  run = "in/out",
  desc = "Sets, the state of the \"notify when finished\"-checkbox in the BatchConverter.\
\
Works also, with BatchConverter opened.\
\
return false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [4] = {
  fname = "GetProjectState_NumbersOnly",
  label = "US_GetProjectState_NumbersOnly",
  run = "in/out",
  desc = "returns a state of the project or a ProjectStateChunk.\
\
It only supports single-entry-states with numbers/integers, separated by spaces!\
All other values will be set to nil and strings with spaces will produce weird results!\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "all values found as numerical indexed array",
    name = "VALUES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the states; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the state, whose attributes you want to retrieve",
    name = "STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
   [4] = {
    type = "STRING",
    desc = "if this function is used within specific getprojectstate-functions, pass here the \"host\"-functionname, so error-messages will reflect that",
    opt = {
     use = false,
    },
    name = "FUNCTIONNAME",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true or nil; converts all values to numbers; false, keep them as string versions",
    opt = {
     use = false,
    },
    name = "NUMBERTOGGLE",
   },
  },
  sp_api = "ultraschall",
 },
 [5] = {
  fname = "GetProject_ReaperVersion",
  label = "US_GetProject_ReaperVersion",
  run = "in/out",
  desc = "Returns the reaperversion and the timestamp from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry \"<REAPER_PROJECT\"\
\
Returns nil in case of error or if no such entry exists.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the version of Reaper, with which this project had been saved",
    name = "REAPERVERSION",
   },
   [2] = {
    type = "STRING",
    desc = "a timestamp for this project",
    name = "TIMESTAMP",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [6] = {
  fname = "GetProject_RenderCFG",
  label = "US_GetProject_RenderCFG",
  run = "in/out",
  desc = "Returns the render-cfg-string2, that contains all render-settings for primary and secondary render-settings of a project from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry <RENDER_CFG\
\
Returns nil in case of error or if no such entry exists.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the renderstring, which contains all render-settings for a project/projectstatechunk",
    name = "RENDER_CFG",
   },
   [2] = {
    type = "STRING",
    desc = "the renderstring, which contains all secondary-render-settings for a project/projectstatechunk",
    name = "RENDER_CFG2",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [7] = {
  fname = "GetProject_RippleState",
  label = "US_GetProject_RippleState",
  run = "in/out",
  desc = "Returns the ripple-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry RIPPLE\
\
Returns nil in case of error or if no such entry exists.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, no Ripple; 1, Ripple One Track; 2, Ripple All",
    name = "RIPPLESTATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [8] = {
  fname = "GetProject_GroupOverride",
  label = "US_GetProject_GroupOverride",
  run = "in/out",
  desc = "Returns the group-override-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry GROUPOVERRIDE\
\
Returns nil in case of error or if no such entry exists.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the group-override state",
    name = "GROUP_OVERRIDE1",
   },
   [2] = {
    type = "INTEGER",
    desc = "the track_group_enabled-setting, as set in the context-menu of the Master-Track; 1, checked; 0, unchecked",
    name = "TRACK_GROUP_ENABLED",
   },
   [3] = {
    type = "INTEGER",
    desc = "the group-override state",
    name = "GROUP_OVERRIDE3",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [9] = {
  fname = "GetProject_AutoCrossFade",
  label = "US_GetProject_AutoCrossFade",
  run = "in/out",
  desc = "Returns the autocrossfade-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry AUTOXFADE\
\
Returns nil in case of error or if no such entry exists.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the autocrossfade-state",
    name = "AUTOCROSSFADE_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename",
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [10] = {
  fname = "GetProject_EnvAttach",
  label = "US_GetProject_EnvAttach",
  run = "in/out",
  desc = "Returns the EnvAttach-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry ENVATTACH\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the env-attach state",
    name = "ENV_ATTACH",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path of the rpp-project-file; nil, use parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a projectstatechunk to read the value from; only used, projectfilename_with_path is nil",
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [11] = {
  fname = "GetProject_PooledEnvAttach",
  label = "US_GetProject_PooledEnvAttach",
  run = "in/out",
  desc = "Returns the PooledEnvAttach-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry POOLEDENVATTACH\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the pooled-env-attach state",
    name = "POOLED_ENV_ATTACH",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path of the rpp-project-file; nil, use parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a projectstatechunk to read the value from; only used, projectfilename_with_path is nil",
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [12] = {
  fname = "GetProject_MixerUIFlags",
  label = "US_GetProject_MixerUIFlags",
  run = "in/out",
  desc = "Returns the MixerUI-state-flags from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry MIXERUIFLAGS\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "folders, receives, etc \
0 - Show tracks in folders, Auto arrange tracks in mixer\
1 - Show normal top level tracks\
2 - Show Folders\
4 - Group folders to left\
8 - Show tracks that have receives\
16 - Group tracks that have receives to left\
32 - don't show tracks that are in folder\
64 - No Autoarrange tracks in mixer\
128 - ?\
256 - ?",
    name = "STATE1",
   },
   [2] = {
    type = "INTEGER",
    desc = "master-track, FX, Mixer\
0 - Master track in mixer\
1 - Don't show multiple rows of tracks, when size permits\
2 - Show maximum rows even when tracks would fit in less rows\
4 - Master Show on right side of mixer\
8 - ?\
16 - Show FX inserts when size permits\
32 - Show sends when size permits\
64 - Show tracks in mixer\
128 - Show FX parameters, when size permits\
256 - Don't show Master track in mixer",
    name = "STATE2",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [13] = {
  fname = "GetProject_PeakGain",
  label = "US_GetProject_PeakGain",
  run = "in/out",
  desc = "Returns the GetProject_PeakGain-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry PEAKGAIN\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "peakgain-state",
    name = "PEAKGAIN_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path of the rpp-project-file",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [14] = {
  fname = "GetProject_Feedback",
  label = "US_GetProject_Feedback",
  run = "in/out",
  desc = "Returns the GetProject_Feedback-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry FEEDBACK\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "feedback-state",
    name = "FEEDBACK_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [15] = {
  fname = "GetProject_PanLaw",
  label = "US_GetProject_PanLaw",
  run = "in/out",
  desc = "Returns the GetProject_PanLaw-state from an RPP-Projectfile or a ProjectStateChunk, as set in the project-settings->Advanced->Pan law/mode->Pan:law(db).\
\
It's the entry PANLAW\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "state of the panlaw, as set in the project-settings->Advanced->Pan law/mode->Pan:law(db). 0.5(-6.02 db) to 1(default +0.0 db)",
    name = "PANLAW_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [16] = {
  fname = "GetProject_ProjOffsets",
  label = "US_GetProject_ProjOffsets",
  run = "in/out",
  desc = "Returns the Project Offset-state from an RPP-Projectfile or a ProjectStateChunk, start time as well as start measure.\
as set in ProjectSettings->ProjectSettings->Project Start Time/Measure and the checkbox Base Ruler Marking Off This Measure-checkbox\
\
It's the entry PROJOFFS\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the project-start-time in seconds",
    name = "START_TIME",
   },
   [2] = {
    type = "INTEGER",
    desc = "starting with 0, unlike the Settingswindow, where the 0 becomes 1 as measure",
    name = "START_MEASURE",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, checkbox unchecked; 1, checkbox checked",
    name = "BASE_RULER_MARKING_OFF_THIS_MEASURE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [17] = {
  fname = "GetProject_MaxProjectLength",
  label = "US_GetProject_MaxProjectLength",
  run = "in/out",
  desc = "Returns the maximum-project-length from an RPP-Projectfile or a ProjectStateChunk, as set in ProjectSettings->Advanced->\
as set in ProjectSettings->ProjectSettings->Project Start Time/Measure.\
\
It's the entry MAXPROJLEN\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "checkbox \"Limit project length, stop playback/recording at:\" - 0 off, 1 on",
    name = "LIMIT_PROJECT_LENGTH",
   },
   [2] = {
    type = "NUMBER",
    desc = "projectlength-limit in seconds",
    name = "PROJECTLENGTH_LIMIT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [18] = {
  fname = "GetProject_Grid",
  label = "US_GetProject_Grid",
  run = "in/out",
  desc = "Returns the grid-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry GRID\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "gridstate1",
    name = "GRIDSTATE1",
   },
   [2] = {
    type = "INTEGER",
    desc = "gridstate2",
    name = "GRIDSTATE2",
   },
   [3] = {
    type = "NUMBER",
    desc = "gridstate3",
    name = "GRIDSTATE3",
   },
   [4] = {
    type = "INTEGER",
    desc = "gridstate4",
    name = "GRIDSTATE4",
   },
   [5] = {
    type = "NUMBER",
    desc = "gridstate5",
    name = "GRIDSTATE5",
   },
   [6] = {
    type = "INTEGER",
    desc = "gridstate6",
    name = "GRIDSTATE6",
   },
   [7] = {
    type = "INTEGER",
    desc = "gridstate7",
    name = "GRIDSTATE7",
   },
   [8] = {
    type = "NUMBER",
    desc = "gridstate8",
    name = "GRIDSTATE8",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path of the rpp-project-file",
    name = "PROJECTFILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [19] = {
  fname = "GetProject_Timemode",
  label = "US_GetProject_Timemode",
  run = "in/out",
  desc = "Returns the timemode-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry TIMEMODE\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "ruler-timemode-state\
-1, Use ruler time unit\
 0, Minutes:Seconds\
 1, Measures.Beats / Minutes:Seconds\
 2, Measures.Beats\
 3, Seconds\
 4, Samples\
 5, Hours:Minutes:Seconds:Frames\
 8, Absolute Frames",
    name = "RULER_TIMEMODE",
   },
   [2] = {
    type = "INTEGER",
    desc = "timemode-state",
    name = "TIMEMODE2",
   },
   [3] = {
    type = "INTEGER",
    desc = "Transport shown time\
     -1 - use ruler time unit\
      0 - minutes:seconds\
      1 - measures:beats/minutes:seconds\
      2 - measures:beats\
      3 - seconds\
      4 - samples\
      5 - hours:minutes:seconds:frames\
      8 - absolute frames",
    name = "SHOWNTIME",
   },
   [4] = {
    type = "INTEGER",
    desc = "timemode-state",
    name = "TIMEMODE4",
   },
   [5] = {
    type = "INTEGER",
    desc = "timemode-state",
    name = "TIMEMODE5",
   },
   [6] = {
    type = "INTEGER",
    desc = "timemode-state",
    name = "TIMEMODE6",
   },
   [7] = {
    type = "INTEGER",
    desc = "timemode-state",
    name = "TIMEMODE7",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [20] = {
  fname = "GetProject_VideoConfig",
  label = "US_GetProject_VideoConfig",
  run = "in/out",
  desc = "Returns the videoconfig-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry VIDEO_CONFIG\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "preferred video size, x pixels",
    name = "PREFERREDVIDSIZEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "preferred video size, y pixels",
    name = "PREFERREDVIDSIZEY",
   },
   [3] = {
    type = "INTEGER",
    desc = "settings\
            0 - turned on/selected: use high quality filtering, preserve aspect ratio(letterbox) when resizing,\
                                    Video colorspace set to Auto,\
                                    Items in higher numbered tracks replace lower, as well as Video colorspace set to Auto\
            1 - Video colorspace: I420/YV12\
            2 - Video colorspace: YUV2\
            3 - RGB\
            256 - Items in lower numbered tracks replace higher\
            512 - Always resize video sources to preferred video size\
            1024 - Always resize output to preferred video size\
            2048 - turn off \"Use high quality filtering when resizing\"\
            4096 - turn off \"preserve aspect ratio (letterbox) when resizing\"",
    name = "SETTINGSFLAGS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [21] = {
  fname = "GetProject_PanMode",
  label = "US_GetProject_PanMode",
  run = "in/out",
  desc = "Returns the panmode-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry PANMODE\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "panmode-state\
0 reaper 3.x balance (deprecated)\
3 Stereo balance / mono pan (default)\
5 Stereo pan\
6 Dual Pan",
    name = "PANMODE_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [22] = {
  fname = "GetProject_CursorPos",
  label = "US_GetProject_CursorPos",
  run = "in/out",
  desc = "Returns the cursorposition-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry CURSOR\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "editcursorposition in seconds",
    name = "CURSORPOS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [23] = {
  fname = "GetProject_HorizontalZoom",
  label = "US_GetProject_HorizontalZoom",
  run = "in/out",
  desc = "Returns the horizontal-zoom-state from an RPP-Projectfile or a ProjectStateChunk.\
Keep in mind, that hzoomscrollpos and scrollbarfactor depend on each other. hzoomscrollpos is a smaller positioning-unit, while scrollbarfactor is the bigger positioning-unit.\
Experiment with it to get an idea.\
\
It's the entry ZOOM\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "HorizontalZoomfactor, 0.007 to 1000000",
    name = "HZOOM",
   },
   [2] = {
    type = "INTEGER",
    desc = "horizontalscrollbarposition - 0 - 4294967296",
    name = "HZOOMSCROLLPOS",
   },
   [3] = {
    type = "INTEGER",
    desc = "0 to 500837, counts up, when maximum hzoomscrollpos overflows",
    name = "SCROLLBARFACTOR",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [24] = {
  fname = "GetProject_VerticalZoom",
  label = "US_GetProject_VerticalZoom",
  run = "in/out",
  desc = "Returns the verticalzoom from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry VZOOMEX\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "vertical zoomfactor(0-40)",
    name = "VZOOM",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [25] = {
  fname = "GetProject_UseRecConfig",
  label = "US_GetProject_UseRecConfig",
  run = "in/out",
  desc = "Returns the rec-cfg-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry USE_REC_CFG\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "recording-cfg-state\
0 - Automatic .wav (recommended)\
1 - Custom (use ultraschall.GetProject_ApplyFXCFG to get recording_cfg_string)\
2 - Recording Format",
    name = "REC_CFG",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [26] = {
  fname = "GetProject_RecMode",
  label = "US_GetProject_RecMode",
  run = "in/out",
  desc = "Returns the rec-mode-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry RECMODE\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "recording-mode-state\
0 - Autopunch/Selected Items\
1 - normal\
2 - Time Selection/Auto Punch",
    name = "REC_MODE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [27] = {
  fname = "GetProject_SMPTESync",
  label = "US_GetProject_SMPTESync",
  run = "in/out",
  desc = "Returns the smpte-sync-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry SMPTESYNC\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "flag \
0 - external timecode synchronization disabled\
1 - external timecode synchronization enabled\
4 - Start playback on valid timecode when stopped\
8 - turned off: display flashing notification window when waiting for sync for recording\
16 - playback off\
32 - recording off\
256 - MTC - 24/30fps MTC is 23.976/29.97ND works only with smptesync_userinput set to 4159\
512 - MTC - 24/30fps MTC is 24/30ND",
    name = "SMPTESYNC_STATE1",
   },
   [2] = {
    type = "NUMBER",
    desc = "framerate in fps",
    name = "SMPTESYNC_FPS",
   },
   [3] = {
    type = "INTEGER",
    desc = "\"Re-synchronize if drift exceeds\" in ms (0 = never)",
    name = "SMPTESYNC_RESYNCDRIFT",
   },
   [4] = {
    type = "INTEGER",
    desc = "\"skip/drop frames if drift exceeds\" in ms(0 - never)",
    name = "SMPTESYNC_SKIPDROPFRAMES",
   },
   [5] = {
    type = "INTEGER",
    desc = "\"Synchronize by seeking ahead\" in ms (default = 1000)",
    name = "SMPTESYNC_SYNCSEEK",
   },
   [6] = {
    type = "INTEGER",
    desc = "\"Freewheel on missing time code for up to\" in ms(0 = forever)",
    name = "SMPTESYNC_FREEWHEEL",
   },
   [7] = {
    type = "INTEGER",
    desc = "User Input-flag\
0 - LTC: Input 1\
1 - LTC: Input 2\
4159 - MTC - All inputs - 24/30 fps MTC 23.976ND/29.97ND if project is ND\
4223 - SPP: All Inputs\
8192 - ASIO Positioning Protocol",
    name = "SMPTESYNC_USERINPUT",
   },
   [8] = {
    type = "NUMBER",
    desc = "Offset incoming timecode by in seconds",
    name = "SMPTESYNC_OFFSETTIMECODE",
   },
   [9] = {
    type = "INTEGER",
    desc = "\"Stop recording if drift exceeds\" in ms(0 = never)",
    name = "SMPTESYNC_STOP_REC_DRIFT",
   },
   [10] = {
    type = "INTEGER",
    desc = "smptesync-state",
    name = "SMPTESYNC_STATE10",
   },
   [11] = {
    type = "INTEGER",
    desc = "\"stop recording on lack of timecode after\" in ms(0 = never)",
    name = "SMPTESYNC_STOP_REC_LACKTIME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [28] = {
  fname = "GetProject_Loop",
  label = "US_GetProject_Loop",
  run = "in/out",
  desc = "Returns the loop-button-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry LOOP\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "loopbutton-state, 0 - off, 1 - on",
    name = "LOOP_MODE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [29] = {
  fname = "GetProject_LoopGran",
  label = "US_GetProject_LoopGran",
  run = "in/out",
  desc = "Returns the loop_gran-state from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry LOOPGRAN\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "loopgran_state1",
    name = "LOOPGRAN_STATE1",
   },
   [2] = {
    type = "NUMBER",
    desc = "loopgran_state2",
    name = "LOOPGRAN_STATE2",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [30] = {
  fname = "GetProject_RecPath",
  label = "US_GetProject_RecPath",
  run = "in/out",
  desc = "Returns the primary and secondary recording-path from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry RECORD_PATH\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the primary recording path",
    name = "PRIM_RECPATH",
   },
   [2] = {
    type = "STRING",
    desc = "the secondary recording path",
    name = "SEC_RECPATH",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [31] = {
  fname = "GetProject_RecordCFG",
  label = "US_GetProject_RecordCFG",
  run = "in/out",
  desc = "Returns the recording-configuration as encoded BASE64-string from an RPP-Projectfile or a ProjectStateChunk, as set in ProjectSettings->Media->Recording.\
\
It's the entry <RECORD_CFG\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the record-configuration as encoded string",
    name = "RECORDING_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [32] = {
  fname = "GetProject_ApplyFXCFG",
  label = "US_GetProject_ApplyFXCFG",
  run = "in/out",
  desc = "Returns the audioformat-configuration, for fx-appliance-operation, as an encoded BASE64-string from an RPP-Projectfile or a ProjectStateChunk, as set in ProjectSettings->Media->Format for Apply FX, Glue, Freeze, etc\
\
It's the entry <APPLY_CFG\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the file-format-configuration for fx-appliance as encoded string",
    name = "APPLYFX_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [33] = {
  fname = "GetProject_RenderPattern",
  label = "US_GetProject_RenderPattern",
  run = "in/out",
  desc = "Returns the render-pattern, that tells Reaper, how to automatically name the render-file, from an RPP-Projectfile or a ProjectStateChunk. If it contains nothing, you should check the Render_Pattern using <a href=\"#GetProject_RenderFilename\">GetProject_RenderFilename</a>, as a render-pattern influences the rendering-filename as well.\
\
It's the entry RENDER_PATTERN\
    \
    Capitalizing the first character of the wildcard will capitalize the first letter of the substitution. \
    Capitalizing the first two characters of the wildcard will capitalize all letters.\
    \
    Directories will be created if necessary. For example if the render target \
    is \"$project/track\", the directory \"$project\" will be created.\
    \
    Immediately following a wildcard, character replacement statements may be specified:\
      <X>  -- single character which is to be removed from the substitution. \
                  For example: $track< > removes all spaces from the track name, \
                               $track</><\\> removes all slashes.\
                               \
      <abcdeX> -- multiple characters, abcde are all replaced with X. \
                  \
                  For example: <_.> replaces all underscores with periods, \
                               </\\_> replaces all slashes with underscores. \
                  \
                  If > is specified as a source character, it must be listed first in the list.\
    \
    $item    media item take name, if the input is a media item\
    $itemnumber  1 for the first media item on a track, 2 for the second...\
    $track    track name\
    $tracknumber  1 for the first track, 2 for the second...\
    $parenttrack  parent track name\
    $region    region name\
    $regionnumber  1 for the first region, 2 for the second...\
    $project    project name\
    $tempo    project tempo at the start of the render region\
    $timesignature  project time signature at the start of the render region, formatted as 4-4\
    $filenumber  blank (optionally 1) for the first file rendered, 1 (optionally 2) for the second...\
    $filenumber[N]  N for the first file rendered, N+1 for the second...\
    $note    C0 for the first file rendered,C#0 for the second...\
    $note[X]    X (example: B2) for the first file rendered, X+1 (example: C3) for the second...\
    $natural    C0 for the first file rendered, D0 for the second...\
    $natural[X]  X (example: F2) for the first file rendered, X+1 (example: G2) for the second...\
    $namecount  1 for the first item or region of the same name, 2 for the second...\
    $timelineorder  1 for the first item or region on the timeline, 2 for the second...\
    \
    Position/Length:\
    $start    start time of the media item, render region, or time selection, in M-SS.TTT\
    $end    end time of the media item, render region, or time selection, in M-SS.TTT\
    $length    length of the media item, render region, or time selection, in M-SS.TTT\
    $startbeats  start time in measures.beats of the media item, render region, or time selection\
    $endbeats  end time in measures.beats of the media item, render region, or time selection\
    $lengthbeats    length in measures.beats of the media item, render region, or time selection\
    $starttimecode  start time in H-MM-SS-FF format of the media item, render region, or time selection\
    $endtimecode  end time in H-MM-SS-FF format of the media item, render region, or time selection\
    $startframes  start time in absolute frames of the media item, render region, or time selection\
    $endframes  end time in absolute frames of the media item, render region, or time selection\
    $lengthframes  length in absolute frames of the media item, render region, or time selection\
    $startseconds  start time in whole seconds of the media item, render region, or time selection\
    $endseconds  end time in whole seconds of the media item, render region, or time selection\
    $lengthseconds  length in whole seconds of the media item, render region, or time selection\
    \
    Output Format:\
    $format    render format (example: wav)\
    $samplerate  sample rate (example: 44100)\
    $sampleratek  sample rate (example: 44.1)\
    $bitdepth  bit depth, if available (example: 24 or 32FP)\
    \
    Current Date/Time:\
    $year    year, currently 2019\
    $year2    last 2 digits of the year,currently 19\
    $month    month number,currently 04\
    $monthname  month name,currently apr\
    $day    day of the month, currently 28\
    $hour    hour of the day in 24-hour format,currently 23\
    $hour12    hour of the day in 12-hour format,currently 11\
    $ampm    am if before noon,pm if after noon,currently pm\
    $minute    minute of the hour,currently 30\
    $second    second of the minute,currently 27\
    \
    Computer Information:\
    $user    user name\
    $computer  computer name\
    \
    (this description has been taken from the Render Wildcard Help within the Render-Dialog of Reaper)\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the pattern, with which the rendering-filename will be automatically created. Check also <a href=\"#GetProject_RenderFilename\">GetProject_RenderFilename</a>  ",
    name = "RENDER_PATTERN",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [34] = {
  fname = "GetProject_RenderFreqNChans",
  label = "US_GetProject_RenderFreqNChans",
  run = "in/out",
  desc = "Returns an unknown number, the render-frequency and rendernumber of channels from an RPP-Projectfile or a ProjectStateChunk.\
It's the entry RENDER_FMT\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "unknown number",
    name = "UNKNOWN",
   },
   [2] = {
    type = "INTEGER",
    desc = "Number_Channels 0-seems default-project-settings(?), 1-Mono, 2-Stereo, ... up to 64 channels",
    name = "RENDERNUM_CHANS",
   },
   [3] = {
    type = "INTEGER",
    desc = "RenderFrequency -2147483647 to 2147483647, except 0, which seems to be default-project-settings-frequency",
    name = "RENDER_FREQUENCY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [35] = {
  fname = "GetProject_RenderSpeed",
  label = "US_GetProject_RenderSpeed",
  run = "in/out",
  desc = "Returns the rendering-speed from an RPP-Projectfile or a ProjectStateChunk.\
It's the entry RENDER_1X\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "render_speed \
0-Fullspeed Offline\
1-1x Offline\
2-Online Render\
3-Offline Render (Idle)\
4-1x Offline Render (Idle)",
    name = "RENDER_SPEED",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [36] = {
  fname = "GetProject_RenderRange",
  label = "US_GetProject_RenderRange",
  run = "in/out",
  desc = "Returns the render-range, render-timestart, render-timeend, render-tail and render-taillength from an RPP-Projectfile or a ProjectStateChunk. To get RENDER_STEMS, refer <a href=\"#GetProject_RenderStems\">GetProject_RenderStems</a>\
\
It's the entry RENDER_RANGE\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the bounds of the project to be rendered\
0, Custom Time Range\
1, Entire Project\
2, Time Selection, \
3, Project Regions\
4, Selected Media Items(in combination with RENDER_STEMS 32); to get RENDER_STEMS, refer <a href=\"#GetProject_RenderStems\">GetProject_RenderStems</a>\
5, Selected regions",
    name = "BOUNDS",
   },
   [2] = {
    type = "NUMBER",
    desc = "TimeStart in milliseconds -2147483647 to 2147483647",
    name = "TIME_START",
   },
   [3] = {
    type = "NUMBER",
    desc = "TimeEnd in milliseconds 2147483647 to 2147483647",
    name = "TIME_END",
   },
   [4] = {
    type = "INTEGER",
    desc = "Tail on/off-flags for individual bounds\
0, tail off for all bounds\
1, custom time range -> tail on\
2, entire project -> tail on\
4, time selection -> tail on\
8, project regions -> tail on    ",
    name = "TAIL",
   },
   [5] = {
    type = "INTEGER",
    desc = "TailLength in milliseconds, valuerange 0 - 2147483647",
    name = "TAIL_LENGTH",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [37] = {
  fname = "GetProject_RenderResample",
  label = "US_GetProject_RenderResample",
  run = "in/out",
  desc = "Returns Resamplemode for a)Rendering and b)Playback as well as c)if both are combined from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry RENDER_RESAMPLE\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "Resample_Mode \
0-medium (64pt Sinc), \
1-Low (Linear Interpolation), \
2-Lowest (Point Sampling), \
3-Good(192pt Sinc), \
4-Better(384pt Sinc), \
5-Fast (IIR + Linear Interpolation), \
6-Fast (IIRx2 + Linear Interpolation), \
7-Fast (16pt sinc) - Default, \
8-HQ (512pt Sinc), \
9-Extreme HQ (768pt HQ Sinc)",
    name = "RESAMPLE_MODE",
   },
   [2] = {
    type = "INTEGER",
    desc = "Playback Resample Mode (as set in the Project-Settings)\
0-medium (64pt Sinc), \
1-Low (Linear Interpolation), \
2-Lowest (Point Sampling), \
3-Good(192pt Sinc), \
4-Better(384pt Sinc), \
5-Fast (IIR + Linear Interpolation), \
6-Fast (IIRx2 + Linear Interpolation), \
7-Fast (16pt sinc) - Default, \
8-HQ (512pt Sinc), \
9-Extreme HQ (768pt HQ Sinc)",
    name = "PLAYBACK_RESAMPLE_MODE",
   },
   [3] = {
    type = "INTEGER",
    desc = "Use project sample rate for mixing and FX/synth processing-checkbox; 1, checked; 0, unchecked",
    name = "PROJECT_SMPLRATE4MIX_AND_FX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [38] = {
  fname = "GetProject_AddMediaToProjectAfterRender",
  label = "US_GetProject_AddMediaToProjectAfterRender",
  run = "in/out",
  desc = "Returns, if rendered media shall be added to the project afterwards as well as if likely silent files shall be rendered-state, from an RPP-Projectfile or a ProjectStateChunk.\
   \
It's the state of the \"Add rendered items to new tracks in project\"- checkbox and \"Do not render files that are likely silent\"-checkbox, as set in the Render to file-dialog.\
   \
It's the entry RENDER_ADDTOPROJ\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the state of the \"Add rendered items to new tracks in project\"- checkbox and \"Do not render files that are likely silent\"-checkbox \
&1, rendered media shall be added to the project afterwards; 0, don't add\
&2, don't render likely silent files; 0, render anyway",
    name = "STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [39] = {
  fname = "GetProject_RenderStems",
  label = "US_GetProject_RenderStems",
  run = "in/out",
  desc = "Returns the render-stems-state from an rpp-project-file or a ProjectStateChunk.\
\
It's the entry RENDER_STEMS\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the state of Render Stems\
0, Source Master Mix, \
1, Source Master mix + stems, \
3, Source Stems, selected tracks, \
&4, Multichannel Tracks to Multichannel Files, \
8, Source Region Render Matrix, \
&16, Tracks with only Mono-Media to Mono Files,  \
32, Selected Media Items(in combination with RENDER_RANGE->Bounds->4, refer to <a href=\"#GetProject_RenderRange\">GetProject_RenderRange</a> to get RENDER_RANGE)\
64,  Selected media items via master\
128, Selected tracks via master    \
&256, Embed stretch markers/transient guides-checkbox\
&512, Embed metadata-checkbox\
&1024, Embed Take markers\
&2048, 2nd pass rendering\
&8192, Render stems pre-fader\
&16384, Only render channels that are sent to parent\
4096, Razor edit areas\
4224, Razor edit areas via master",
    name = "RENDER_STEMS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [40] = {
  fname = "GetProject_RenderDitherState",
  label = "US_GetProject_RenderDitherState",
  run = "in/out",
  desc = "Returns the render-dither-state from an rpp-project-file or a ProjectStateChunk.\
\
It's the entry RENDER_DITHER\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the state of render dithering\
&1,   Dither Master mix\
&2,   Noise shaping Master mix\
&4,   Dither Stems\
&8,   Noise shaping Stems",
    name = "RENDERDITHER_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [41] = {
  fname = "GetProject_TimeBase",
  label = "US_GetProject_TimeBase",
  run = "in/out",
  desc = "Returns the timebase-state from an rpp-project-file or a ProjectStateChunk.\
It's the entry TIMELOCKMODE x\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the timebase for items/envelopes/markers as set in the project settings\
0 - Time, \
1 - Beats (position, length, rate), \
2 - Beats (position only)",
    name = "TIMEBASE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [42] = {
  fname = "GetProject_TempoTimeSignature",
  label = "US_GetProject_TempoTimeSignature",
  run = "in/out",
  desc = "Returns the timebase for tempo/time-signature as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.\
It's the entry TEMPOENVLOCKMODE\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the timebase for tempo/time-signature as set in the project settings\
0 - Time \
1 - Beats",
    name = "TEMPOTIMESIGNATURE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [43] = {
  fname = "GetProject_ItemMixBehavior",
  label = "US_GetProject_ItemMixBehavior",
  run = "in/out",
  desc = "Returns the item mix behavior, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.\
It's the entry ITEMMIX\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "item mix behavior\
0 - Enclosed items replace enclosing items \
1 - Items always mix\
2 - Items always replace earlier items",
    name = "ITEM_MIX_BEHAV_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [44] = {
  fname = "GetProject_DefPitchMode",
  label = "US_GetProject_DefPitchMode",
  run = "in/out",
  desc = "Returns the default-pitch-mode, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.\
\
It's the entry DEFPITCHMODE\
\
def_pitch_mode_state can be \
    \
    SoundTouch:\
        0 - Default settings\
        1 - High Quality\
        2 - Fast\
\
    Simple windowed (fast):\
        131072 - 50ms window, 25ms fade\
        131073 - 50ms window, 16ms fade\
        131074 - 50ms window, 10ms fade\
        131075 - 50ms window, 7ms fade\
        131076 - 75ms window, 37ms fade\
        131077 - 75ms window, 25ms fade\
        131078 - 75ms window, 15ms fade\
        131079 - 75ms window, 10ms fade\
        131080 - 100ms window, 50ms fade\
        131081 - 100ms window, 33ms fade\
        131082 - 100ms window, 20ms fade\
        131083 - 100ms window, 14ms fade\
        131084 - 150ms window, 75ms fade\
        131085 - 150ms window, 50ms fade\
        131086 - 150ms window, 30ms fade\
        131087 - 150ms window, 21ms fade\
        131088 - 225ms window, 112ms fade\
        131089 - 225ms window, 75ms fade\
        131090 - 225ms window, 45ms fade\
        131091 - 225ms window, 32ms fade\
        131092 - 300ms window, 150ms fade\
        131093 - 300ms window, 100ms fade\
        131094 - 300ms window, 60ms fade\
        131095 - 300ms window, 42ms fade\
        131096 - 40ms window, 20ms fade\
        131097 - 40ms window, 13ms fade\
        131098 - 40ms window, 8ms fade\
        131099 - 40ms window, 5ms fade\
        131100 - 30ms window, 15ms fade\
        131101 - 30ms window, 10ms fade\
        131102 - 30ms window, 6ms fade\
        131103 - 30ms window, 4ms fade\
        131104 - 20ms window, 10ms fade\
        131105 - 20ms window, 6ms fade\
        131106 - 20ms window, 4ms fade\
        131107 - 20ms window, 2ms fade\
        131108 - 10ms window, 5ms fade\
        131109 - 10ms window, 3ms fade\
        131110 - 10ms window, 2ms fade\
        131111 - 10ms window, 1ms fade\
        131112 - 5ms window, 2ms fade\
        131113 - 5ms window, 1ms fade\
        131114 - 5ms window, 1ms fade\
        131115 - 5ms window, 1ms fade\
        131116 - 3ms window, 1ms fade\
        131117 - 3ms window, 1ms fade\
        131118 - 3ms window, 1ms fade\
        131119 - 3ms window, 1ms fade\
\
    Ã©lastique 2.2.8 Pro:\
        393216 - Normal\
        393217 - Preserve Formants (Lowest Pitches)\
        393218 - Preserve Formants (Lower Pitches)\
        393219 - Preserve Formants (Low Pitches)\
        393220 - Preserve Formants (Most Pitches)\
        393221 - Preserve Formants (High Pitches)\
        393222 - Preserve Formants (Higher Pitches)\
        393223 - Preserve Formants (Highest Pitches)\
        393224 - Mid/Side\
        393225 - Mid/Side, Preserve Formants (Lowest Pitches)\
        393226 - Mid/Side, Preserve Formants (Lower Pitches)\
        393227 - Mid/Side, Preserve Formants (Low Pitches)\
        393228 - Mid/Side, Preserve Formants (Most Pitches)\
        393229 - Mid/Side, Preserve Formants (High Pitches)\
        393230 - Mid/Side, Preserve Formants (Higher Pitches)\
        393231 - Mid/Side, Preserve Formants (Highest Pitches)\
        393232 - Synchronized: Normal\
        393233 - Synchronized: Preserve Formants (Lowest Pitches)\
        393234 - Synchronized: Preserve Formants (Lower Pitches)\
        393235 - Synchronized: Preserve Formants (Low Pitches)\
        393236 - Synchronized: Preserve Formants (Most Pitches)\
        393237 - Synchronized: Preserve Formants (High Pitches)\
        393238 - Synchronized: Preserve Formants (Higher Pitches)\
        393239 - Synchronized: Preserve Formants (Highest Pitches)\
        393240 - Synchronized:  Mid/Side\
        393241 - Synchronized:  Mid/Side, Preserve Formants (Lowest Pitches)\
        393242 - Synchronized:  Mid/Side, Preserve Formants (Lower Pitches)\
        393243 - Synchronized:  Mid/Side, Preserve Formants (Low Pitches)\
        393244 - Synchronized:  Mid/Side, Preserve Formants (Most Pitches)\
        393245 - Synchronized:  Mid/Side, Preserve Formants (High Pitches)\
        393246 - Synchronized:  Mid/Side, Preserve Formants (Higher Pitches)\
        393247 - Synchronized:  Mid/Side, Preserve Formants (Highest Pitches)\
\
    Ã©lastique 2.2.8 Efficient:\
        458752 - Normal\
        458753 - Mid/Side\
        458754 - Synchronized: Normal\
        458755 - Synchronized: Mid/Side\
\
    Ã©lastique 2.2.8 Soloist:\
        524288 - Monophonic\
        524289 - Monophonic [Mid/Side]\
        524290 - Speech\
        524291 - Speech [Mid/Side]\
\
    Ã©lastique 3.3.0 Pro:\
        589824 - Normal\
        589825 - Preserve Formants (Lowest Pitches)\
        589826 - Preserve Formants (Lower Pitches)\
        589827 - Preserve Formants (Low Pitches)\
        589828 - Preserve Formants (Most Pitches)\
        589829 - Preserve Formants (High Pitches)\
        589830 - Preserve Formants (Higher Pitches)\
        589831 - Preserve Formants (Highest Pitches)\
        589832 - Mid/Side\
        589833 - Mid/Side, Preserve Formants (Lowest Pitches)\
        589834 - Mid/Side, Preserve Formants (Lower Pitches)\
        589835 - Mid/Side, Preserve Formants (Low Pitches)\
        589836 - Mid/Side, Preserve Formants (Most Pitches)\
        589837 - Mid/Side, Preserve Formants (High Pitches)\
        589838 - Mid/Side, Preserve Formants (Higher Pitches)\
        589839 - Mid/Side, Preserve Formants (Highest Pitches)\
        589840 - Synchronized: Normal\
        589841 - Synchronized: Preserve Formants (Lowest Pitches)\
        589842 - Synchronized: Preserve Formants (Lower Pitches)\
        589843 - Synchronized: Preserve Formants (Low Pitches)\
        589844 - Synchronized: Preserve Formants (Most Pitches)\
        589845 - Synchronized: Preserve Formants (High Pitches)\
        589846 - Synchronized: Preserve Formants (Higher Pitches)\
        589847 - Synchronized: Preserve Formants (Highest Pitches)\
        589848 - Synchronized:  Mid/Side\
        589849 - Synchronized:  Mid/Side, Preserve Formants (Lowest Pitches)\
        589850 - Synchronized:  Mid/Side, Preserve Formants (Lower Pitches)\
        589851 - Synchronized:  Mid/Side, Preserve Formants (Low Pitches)\
        589852 - Synchronized:  Mid/Side, Preserve Formants (Most Pitches)\
        589853 - Synchronized:  Mid/Side, Preserve Formants (High Pitches)\
        589854 - Synchronized:  Mid/Side, Preserve Formants (Higher Pitches)\
        589855 - Synchronized:  Mid/Side, Preserve Formants (Highest Pitches)\
\
    Ã©lastique 3.3.0 Efficient:\
        655360 - Normal\
        655361 - Mid/Side\
        655362 - Synchronized: Normal\
        655363 - Synchronized: Mid/Side\
\
    Ã©lastique 3.3.0 Soloist:\
        720896 - Monophonic\
        720897 - Monophonic [Mid/Side]\
        720898 - Speech\
        720899 - Speech [Mid/Side]\
\
\
    Rubber Band Library - Default\
        851968 - nothing\
\
    Rubber Band Library - Preserve Formants\
        851969 - Preserve Formants\
\
    Rubber Band Library - Mid/Side\
        851970 - Mid/Side\
\
    Rubber Band Library - Preserve Formants, Mid/Side\
        851971 - Preserve Formants, Mid/Side\
\
    Rubber Band Library - Independent Phase\
        851972 - Independent Phase\
\
    Rubber Band Library - Preserve Formants, Independent Phase\
        851973 - Preserve Formants, Independent Phase\
\
    Rubber Band Library - Mid/Side, Independent Phase\
        851974 - Mid/Side, Independent Phase\
\
    Rubber Band Library - Preserve Formants, Mid/Side, Independent Phase\
        851975 - Preserve Formants, Mid/Side, Independent Phase\
\
    Rubber Band Library - Time Domain Smoothing\
        851976 - Time Domain Smoothing\
\
    Rubber Band Library - Preserve Formants, Time Domain Smoothing\
        851977 - Preserve Formants, Time Domain Smoothing\
\
    Rubber Band Library - Mid/Side, Time Domain Smoothing\
        851978 - Mid/Side, Time Domain Smoothing\
\
    Rubber Band Library - Preserve Formants, Mid/Side, Time Domain Smoothing\
        851979 - Preserve Formants, Mid/Side, Time Domain Smoothing\
\
    Rubber Band Library - Independent Phase, Time Domain Smoothing\
        851980 - Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Preserve Formants, Independent Phase, Time Domain Smoothing\
        851981 - Preserve Formants, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Mid/Side, Independent Phase, Time Domain Smoothing\
        851982 - Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
        851983 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed\
        851984 - nothing\
        851985 - Preserve Formants\
        851986 - Mid/Side\
        851987 - Preserve Formants, Mid/Side\
        851988 - Independent Phase\
        851989 - Preserve Formants, Independent Phase\
        851990 - Mid/Side, Independent Phase\
        851991 - Preserve Formants, Mid/Side, Independent Phase\
        851992 - Time Domain Smoothing\
        851993 - Preserve Formants, Time Domain Smoothing\
        851994 - Mid/Side, Time Domain Smoothing\
        851995 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        851996 - Independent Phase, Time Domain Smoothing\
        851997 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        851998 - Mid/Side, Independent Phase, Time Domain Smoothing\
        851999 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth\
        852000 - nothing\
        852001 - Preserve Formants\
        852002 - Mid/Side\
        852003 - Preserve Formants, Mid/Side\
        852004 - Independent Phase\
        852005 - Preserve Formants, Independent Phase\
        852006 - Mid/Side, Independent Phase\
        852007 - Preserve Formants, Mid/Side, Independent Phase\
        852008 - Time Domain Smoothing\
        852009 - Preserve Formants, Time Domain Smoothing\
        852010 - Mid/Side, Time Domain Smoothing\
        852011 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852012 - Independent Phase, Time Domain Smoothing\
        852013 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852014 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852015 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive\
        852016 - nothing\
        852017 - Preserve Formants\
        852018 - Mid/Side\
        852019 - Preserve Formants, Mid/Side\
        852020 - Independent Phase\
        852021 - Preserve Formants, Independent Phase\
        852022 - Mid/Side, Independent Phase\
        852023 - Preserve Formants, Mid/Side, Independent Phase\
        852024 - Time Domain Smoothing\
        852025 - Preserve Formants, Time Domain Smoothing\
        852026 - Mid/Side, Time Domain Smoothing\
        852027 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852028 - Independent Phase, Time Domain Smoothing\
        852029 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852030 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852031 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive\
        852032 - nothing\
        852033 - Preserve Formants\
        852034 - Mid/Side\
        852035 - Preserve Formants, Mid/Side\
        852036 - Independent Phase\
        852037 - Preserve Formants, Independent Phase\
        852038 - Mid/Side, Independent Phase\
        852039 - Preserve Formants, Mid/Side, Independent Phase\
        852040 - Time Domain Smoothing\
        852041 - Preserve Formants, Time Domain Smoothing\
        852042 - Mid/Side, Time Domain Smoothing\
        852043 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852044 - Independent Phase, Time Domain Smoothing\
        852045 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852046 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852047 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive\
        852048 - nothing\
        852049 - Preserve Formants\
        852050 - Mid/Side\
        852051 - Preserve Formants, Mid/Side\
        852052 - Independent Phase\
        852053 - Preserve Formants, Independent Phase\
        852054 - Mid/Side, Independent Phase\
        852055 - Preserve Formants, Mid/Side, Independent Phase\
        852056 - Time Domain Smoothing\
        852057 - Preserve Formants, Time Domain Smoothing\
        852058 - Mid/Side, Time Domain Smoothing\
        852059 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852060 - Independent Phase, Time Domain Smoothing\
        852061 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852062 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852063 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft\
        852064 - nothing\
        852065 - Preserve Formants\
        852066 - Mid/Side\
        852067 - Preserve Formants, Mid/Side\
        852068 - Independent Phase\
        852069 - Preserve Formants, Independent Phase\
        852070 - Mid/Side, Independent Phase\
        852071 - Preserve Formants, Mid/Side, Independent Phase\
        852072 - Time Domain Smoothing\
        852073 - Preserve Formants, Time Domain Smoothing\
        852074 - Mid/Side, Time Domain Smoothing\
        852075 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852076 - Independent Phase, Time Domain Smoothing\
        852077 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852078 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852079 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft\
        852080 - nothing\
        852081 - Preserve Formants\
        852082 - Mid/Side\
        852083 - Preserve Formants, Mid/Side\
        852084 - Independent Phase\
        852085 - Preserve Formants, Independent Phase\
        852086 - Mid/Side, Independent Phase\
        852087 - Preserve Formants, Mid/Side, Independent Phase\
        852088 - Time Domain Smoothing\
        852089 - Preserve Formants, Time Domain Smoothing\
        852090 - Mid/Side, Time Domain Smoothing\
        852091 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852092 - Independent Phase, Time Domain Smoothing\
        852093 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852094 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852095 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft\
        852096 - nothing\
        852097 - Preserve Formants\
        852098 - Mid/Side\
        852099 - Preserve Formants, Mid/Side\
        852100 - Independent Phase\
        852101 - Preserve Formants, Independent Phase\
        852102 - Mid/Side, Independent Phase\
        852103 - Preserve Formants, Mid/Side, Independent Phase\
        852104 - Time Domain Smoothing\
        852105 - Preserve Formants, Time Domain Smoothing\
        852106 - Mid/Side, Time Domain Smoothing\
        852107 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852108 - Independent Phase, Time Domain Smoothing\
        852109 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852110 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852111 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: HighQ\
        852112 - nothing\
        852113 - Preserve Formants\
        852114 - Mid/Side\
        852115 - Preserve Formants, Mid/Side\
        852116 - Independent Phase\
        852117 - Preserve Formants, Independent Phase\
        852118 - Mid/Side, Independent Phase\
        852119 - Preserve Formants, Mid/Side, Independent Phase\
        852120 - Time Domain Smoothing\
        852121 - Preserve Formants, Time Domain Smoothing\
        852122 - Mid/Side, Time Domain Smoothing\
        852123 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852124 - Independent Phase, Time Domain Smoothing\
        852125 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852126 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852127 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: HighQ\
        852128 - nothing\
        852129 - Preserve Formants\
        852130 - Mid/Side\
        852131 - Preserve Formants, Mid/Side\
        852132 - Independent Phase\
        852133 - Preserve Formants, Independent Phase\
        852134 - Mid/Side, Independent Phase\
        852135 - Preserve Formants, Mid/Side, Independent Phase\
        852136 - Time Domain Smoothing\
        852137 - Preserve Formants, Time Domain Smoothing\
        852138 - Mid/Side, Time Domain Smoothing\
        852139 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852140 - Independent Phase, Time Domain Smoothing\
        852141 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852142 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852143 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: HighQ\
        852144 - nothing\
        852145 - Preserve Formants\
        852146 - Mid/Side\
        852147 - Preserve Formants, Mid/Side\
        852148 - Independent Phase\
        852149 - Preserve Formants, Independent Phase\
        852150 - Mid/Side, Independent Phase\
        852151 - Preserve Formants, Mid/Side, Independent Phase\
        852152 - Time Domain Smoothing\
        852153 - Preserve Formants, Time Domain Smoothing\
        852154 - Mid/Side, Time Domain Smoothing\
        852155 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852156 - Independent Phase, Time Domain Smoothing\
        852157 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852158 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852159 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: HighQ\
        852160 - nothing\
        852161 - Preserve Formants\
        852162 - Mid/Side\
        852163 - Preserve Formants, Mid/Side\
        852164 - Independent Phase\
        852165 - Preserve Formants, Independent Phase\
        852166 - Mid/Side, Independent Phase\
        852167 - Preserve Formants, Mid/Side, Independent Phase\
        852168 - Time Domain Smoothing\
        852169 - Preserve Formants, Time Domain Smoothing\
        852170 - Mid/Side, Time Domain Smoothing\
        852171 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852172 - Independent Phase, Time Domain Smoothing\
        852173 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852174 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852175 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: HighQ\
        852176 - nothing\
        852177 - Preserve Formants\
        852178 - Mid/Side\
        852179 - Preserve Formants, Mid/Side\
        852180 - Independent Phase\
        852181 - Preserve Formants, Independent Phase\
        852182 - Mid/Side, Independent Phase\
        852183 - Preserve Formants, Mid/Side, Independent Phase\
        852184 - Time Domain Smoothing\
        852185 - Preserve Formants, Time Domain Smoothing\
        852186 - Mid/Side, Time Domain Smoothing\
        852187 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852188 - Independent Phase, Time Domain Smoothing\
        852189 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852190 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852191 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: HighQ\
        852192 - nothing\
        852193 - Preserve Formants\
        852194 - Mid/Side\
        852195 - Preserve Formants, Mid/Side\
        852196 - Independent Phase\
        852197 - Preserve Formants, Independent Phase\
        852198 - Mid/Side, Independent Phase\
        852199 - Preserve Formants, Mid/Side, Independent Phase\
        852200 - Time Domain Smoothing\
        852201 - Preserve Formants, Time Domain Smoothing\
        852202 - Mid/Side, Time Domain Smoothing\
        852203 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852204 - Independent Phase, Time Domain Smoothing\
        852205 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852206 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852207 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: HighQ\
        852208 - nothing\
        852209 - Preserve Formants\
        852210 - Mid/Side\
        852211 - Preserve Formants, Mid/Side\
        852212 - Independent Phase\
        852213 - Preserve Formants, Independent Phase\
        852214 - Mid/Side, Independent Phase\
        852215 - Preserve Formants, Mid/Side, Independent Phase\
        852216 - Time Domain Smoothing\
        852217 - Preserve Formants, Time Domain Smoothing\
        852218 - Mid/Side, Time Domain Smoothing\
        852219 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852220 - Independent Phase, Time Domain Smoothing\
        852221 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852222 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852223 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: HighQ\
        852224 - nothing\
        852225 - Preserve Formants\
        852226 - Mid/Side\
        852227 - Preserve Formants, Mid/Side\
        852228 - Independent Phase\
        852229 - Preserve Formants, Independent Phase\
        852230 - Mid/Side, Independent Phase\
        852231 - Preserve Formants, Mid/Side, Independent Phase\
        852232 - Time Domain Smoothing\
        852233 - Preserve Formants, Time Domain Smoothing\
        852234 - Mid/Side, Time Domain Smoothing\
        852235 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852236 - Independent Phase, Time Domain Smoothing\
        852237 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852238 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852239 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: HighQ\
        852240 - nothing\
        852241 - Preserve Formants\
        852242 - Mid/Side\
        852243 - Preserve Formants, Mid/Side\
        852244 - Independent Phase\
        852245 - Preserve Formants, Independent Phase\
        852246 - Mid/Side, Independent Phase\
        852247 - Preserve Formants, Mid/Side, Independent Phase\
        852248 - Time Domain Smoothing\
        852249 - Preserve Formants, Time Domain Smoothing\
        852250 - Mid/Side, Time Domain Smoothing\
        852251 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852252 - Independent Phase, Time Domain Smoothing\
        852253 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852254 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852255 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: Consistent\
        852256 - nothing\
        852257 - Preserve Formants\
        852258 - Mid/Side\
        852259 - Preserve Formants, Mid/Side\
        852260 - Independent Phase\
        852261 - Preserve Formants, Independent Phase\
        852262 - Mid/Side, Independent Phase\
        852263 - Preserve Formants, Mid/Side, Independent Phase\
        852264 - Time Domain Smoothing\
        852265 - Preserve Formants, Time Domain Smoothing\
        852266 - Mid/Side, Time Domain Smoothing\
        852267 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852268 - Independent Phase, Time Domain Smoothing\
        852269 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852270 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852271 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: Consistent\
        852272 - nothing\
        852273 - Preserve Formants\
        852274 - Mid/Side\
        852275 - Preserve Formants, Mid/Side\
        852276 - Independent Phase\
        852277 - Preserve Formants, Independent Phase\
        852278 - Mid/Side, Independent Phase\
        852279 - Preserve Formants, Mid/Side, Independent Phase\
        852280 - Time Domain Smoothing\
        852281 - Preserve Formants, Time Domain Smoothing\
        852282 - Mid/Side, Time Domain Smoothing\
        852283 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852284 - Independent Phase, Time Domain Smoothing\
        852285 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852286 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852287 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: Consistent\
        852288 - nothing\
        852289 - Preserve Formants\
        852290 - Mid/Side\
        852291 - Preserve Formants, Mid/Side\
        852292 - Independent Phase\
        852293 - Preserve Formants, Independent Phase\
        852294 - Mid/Side, Independent Phase\
        852295 - Preserve Formants, Mid/Side, Independent Phase\
        852296 - Time Domain Smoothing\
        852297 - Preserve Formants, Time Domain Smoothing\
        852298 - Mid/Side, Time Domain Smoothing\
        852299 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852300 - Independent Phase, Time Domain Smoothing\
        852301 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852302 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852303 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: Consistent\
        852304 - nothing\
        852305 - Preserve Formants\
        852306 - Mid/Side\
        852307 - Preserve Formants, Mid/Side\
        852308 - Independent Phase\
        852309 - Preserve Formants, Independent Phase\
        852310 - Mid/Side, Independent Phase\
        852311 - Preserve Formants, Mid/Side, Independent Phase\
        852312 - Time Domain Smoothing\
        852313 - Preserve Formants, Time Domain Smoothing\
        852314 - Mid/Side, Time Domain Smoothing\
        852315 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852316 - Independent Phase, Time Domain Smoothing\
        852317 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852318 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852319 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: Consistent\
        852320 - nothing\
        852321 - Preserve Formants\
        852322 - Mid/Side\
        852323 - Preserve Formants, Mid/Side\
        852324 - Independent Phase\
        852325 - Preserve Formants, Independent Phase\
        852326 - Mid/Side, Independent Phase\
        852327 - Preserve Formants, Mid/Side, Independent Phase\
        852328 - Time Domain Smoothing\
        852329 - Preserve Formants, Time Domain Smoothing\
        852330 - Mid/Side, Time Domain Smoothing\
        852331 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852332 - Independent Phase, Time Domain Smoothing\
        852333 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852334 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852335 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: Consistent\
        852336 - nothing\
        852337 - Preserve Formants\
        852338 - Mid/Side\
        852339 - Preserve Formants, Mid/Side\
        852340 - Independent Phase\
        852341 - Preserve Formants, Independent Phase\
        852342 - Mid/Side, Independent Phase\
        852343 - Preserve Formants, Mid/Side, Independent Phase\
        852344 - Time Domain Smoothing\
        852345 - Preserve Formants, Time Domain Smoothing\
        852346 - Mid/Side, Time Domain Smoothing\
        852347 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852348 - Independent Phase, Time Domain Smoothing\
        852349 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852350 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852351 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: Consistent\
        852352 - nothing\
        852353 - Preserve Formants\
        852354 - Mid/Side\
        852355 - Preserve Formants, Mid/Side\
        852356 - Independent Phase\
        852357 - Preserve Formants, Independent Phase\
        852358 - Mid/Side, Independent Phase\
        852359 - Preserve Formants, Mid/Side, Independent Phase\
        852360 - Time Domain Smoothing\
        852361 - Preserve Formants, Time Domain Smoothing\
        852362 - Mid/Side, Time Domain Smoothing\
        852363 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852364 - Independent Phase, Time Domain Smoothing\
        852365 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852366 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852367 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: Consistent\
        852368 - nothing\
        852369 - Preserve Formants\
        852370 - Mid/Side\
        852371 - Preserve Formants, Mid/Side\
        852372 - Independent Phase\
        852373 - Preserve Formants, Independent Phase\
        852374 - Mid/Side, Independent Phase\
        852375 - Preserve Formants, Mid/Side, Independent Phase\
        852376 - Time Domain Smoothing\
        852377 - Preserve Formants, Time Domain Smoothing\
        852378 - Mid/Side, Time Domain Smoothing\
        852379 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852380 - Independent Phase, Time Domain Smoothing\
        852381 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852382 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852383 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: Consistent\
        852384 - nothing\
        852385 - Preserve Formants\
        852386 - Mid/Side\
        852387 - Preserve Formants, Mid/Side\
        852388 - Independent Phase\
        852389 - Preserve Formants, Independent Phase\
        852390 - Mid/Side, Independent Phase\
        852391 - Preserve Formants, Mid/Side, Independent Phase\
        852392 - Time Domain Smoothing\
        852393 - Preserve Formants, Time Domain Smoothing\
        852394 - Mid/Side, Time Domain Smoothing\
        852395 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852396 - Independent Phase, Time Domain Smoothing\
        852397 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852398 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852399 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Window: Short\
        852400 - nothing\
        852401 - Preserve Formants\
        852402 - Mid/Side\
        852403 - Preserve Formants, Mid/Side\
        852404 - Independent Phase\
        852405 - Preserve Formants, Independent Phase\
        852406 - Mid/Side, Independent Phase\
        852407 - Preserve Formants, Mid/Side, Independent Phase\
        852408 - Time Domain Smoothing\
        852409 - Preserve Formants, Time Domain Smoothing\
        852410 - Mid/Side, Time Domain Smoothing\
        852411 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852412 - Independent Phase, Time Domain Smoothing\
        852413 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852414 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852415 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Window: Short\
        852416 - nothing\
        852417 - Preserve Formants\
        852418 - Mid/Side\
        852419 - Preserve Formants, Mid/Side\
        852420 - Independent Phase\
        852421 - Preserve Formants, Independent Phase\
        852422 - Mid/Side, Independent Phase\
        852423 - Preserve Formants, Mid/Side, Independent Phase\
        852424 - Time Domain Smoothing\
        852425 - Preserve Formants, Time Domain Smoothing\
        852426 - Mid/Side, Time Domain Smoothing\
        852427 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852428 - Independent Phase, Time Domain Smoothing\
        852429 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852430 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852431 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Window: Short\
        852432 - nothing\
        852433 - Preserve Formants\
        852434 - Mid/Side\
        852435 - Preserve Formants, Mid/Side\
        852436 - Independent Phase\
        852437 - Preserve Formants, Independent Phase\
        852438 - Mid/Side, Independent Phase\
        852439 - Preserve Formants, Mid/Side, Independent Phase\
        852440 - Time Domain Smoothing\
        852441 - Preserve Formants, Time Domain Smoothing\
        852442 - Mid/Side, Time Domain Smoothing\
        852443 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852444 - Independent Phase, Time Domain Smoothing\
        852445 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852446 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852447 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Window: Short\
        852448 - nothing\
        852449 - Preserve Formants\
        852450 - Mid/Side\
        852451 - Preserve Formants, Mid/Side\
        852452 - Independent Phase\
        852453 - Preserve Formants, Independent Phase\
        852454 - Mid/Side, Independent Phase\
        852455 - Preserve Formants, Mid/Side, Independent Phase\
        852456 - Time Domain Smoothing\
        852457 - Preserve Formants, Time Domain Smoothing\
        852458 - Mid/Side, Time Domain Smoothing\
        852459 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852460 - Independent Phase, Time Domain Smoothing\
        852461 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852462 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852463 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Window: Short\
        852464 - nothing\
        852465 - Preserve Formants\
        852466 - Mid/Side\
        852467 - Preserve Formants, Mid/Side\
        852468 - Independent Phase\
        852469 - Preserve Formants, Independent Phase\
        852470 - Mid/Side, Independent Phase\
        852471 - Preserve Formants, Mid/Side, Independent Phase\
        852472 - Time Domain Smoothing\
        852473 - Preserve Formants, Time Domain Smoothing\
        852474 - Mid/Side, Time Domain Smoothing\
        852475 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852476 - Independent Phase, Time Domain Smoothing\
        852477 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852478 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852479 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Window: Short\
        852480 - nothing\
        852481 - Preserve Formants\
        852482 - Mid/Side\
        852483 - Preserve Formants, Mid/Side\
        852484 - Independent Phase\
        852485 - Preserve Formants, Independent Phase\
        852486 - Mid/Side, Independent Phase\
        852487 - Preserve Formants, Mid/Side, Independent Phase\
        852488 - Time Domain Smoothing\
        852489 - Preserve Formants, Time Domain Smoothing\
        852490 - Mid/Side, Time Domain Smoothing\
        852491 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852492 - Independent Phase, Time Domain Smoothing\
        852493 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852494 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852495 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Window: Short\
        852496 - nothing\
        852497 - Preserve Formants\
        852498 - Mid/Side\
        852499 - Preserve Formants, Mid/Side\
        852500 - Independent Phase\
        852501 - Preserve Formants, Independent Phase\
        852502 - Mid/Side, Independent Phase\
        852503 - Preserve Formants, Mid/Side, Independent Phase\
        852504 - Time Domain Smoothing\
        852505 - Preserve Formants, Time Domain Smoothing\
        852506 - Mid/Side, Time Domain Smoothing\
        852507 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852508 - Independent Phase, Time Domain Smoothing\
        852509 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852510 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852511 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Window: Short\
        852512 - nothing\
        852513 - Preserve Formants\
        852514 - Mid/Side\
        852515 - Preserve Formants, Mid/Side\
        852516 - Independent Phase\
        852517 - Preserve Formants, Independent Phase\
        852518 - Mid/Side, Independent Phase\
        852519 - Preserve Formants, Mid/Side, Independent Phase\
        852520 - Time Domain Smoothing\
        852521 - Preserve Formants, Time Domain Smoothing\
        852522 - Mid/Side, Time Domain Smoothing\
        852523 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852524 - Independent Phase, Time Domain Smoothing\
        852525 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852526 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852527 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Window: Short\
        852528 - nothing\
        852529 - Preserve Formants\
        852530 - Mid/Side\
        852531 - Preserve Formants, Mid/Side\
        852532 - Independent Phase\
        852533 - Preserve Formants, Independent Phase\
        852534 - Mid/Side, Independent Phase\
        852535 - Preserve Formants, Mid/Side, Independent Phase\
        852536 - Time Domain Smoothing\
        852537 - Preserve Formants, Time Domain Smoothing\
        852538 - Mid/Side, Time Domain Smoothing\
        852539 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852540 - Independent Phase, Time Domain Smoothing\
        852541 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852542 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852543 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: HighQ, Window: Short\
        852544 - nothing\
        852545 - Preserve Formants\
        852546 - Mid/Side\
        852547 - Preserve Formants, Mid/Side\
        852548 - Independent Phase\
        852549 - Preserve Formants, Independent Phase\
        852550 - Mid/Side, Independent Phase\
        852551 - Preserve Formants, Mid/Side, Independent Phase\
        852552 - Time Domain Smoothing\
        852553 - Preserve Formants, Time Domain Smoothing\
        852554 - Mid/Side, Time Domain Smoothing\
        852555 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852556 - Independent Phase, Time Domain Smoothing\
        852557 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852558 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852559 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: HighQ, Window: Short\
        852560 - nothing\
        852561 - Preserve Formants\
        852562 - Mid/Side\
        852563 - Preserve Formants, Mid/Side\
        852564 - Independent Phase\
        852565 - Preserve Formants, Independent Phase\
        852566 - Mid/Side, Independent Phase\
        852567 - Preserve Formants, Mid/Side, Independent Phase\
        852568 - Time Domain Smoothing\
        852569 - Preserve Formants, Time Domain Smoothing\
        852570 - Mid/Side, Time Domain Smoothing\
        852571 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852572 - Independent Phase, Time Domain Smoothing\
        852573 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852574 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852575 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: HighQ, Window: Short\
        852576 - nothing\
        852577 - Preserve Formants\
        852578 - Mid/Side\
        852579 - Preserve Formants, Mid/Side\
        852580 - Independent Phase\
        852581 - Preserve Formants, Independent Phase\
        852582 - Mid/Side, Independent Phase\
        852583 - Preserve Formants, Mid/Side, Independent Phase\
        852584 - Time Domain Smoothing\
        852585 - Preserve Formants, Time Domain Smoothing\
        852586 - Mid/Side, Time Domain Smoothing\
        852587 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852588 - Independent Phase, Time Domain Smoothing\
        852589 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852590 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852591 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: HighQ, Window: Short\
        852592 - nothing\
        852593 - Preserve Formants\
        852594 - Mid/Side\
        852595 - Preserve Formants, Mid/Side\
        852596 - Independent Phase\
        852597 - Preserve Formants, Independent Phase\
        852598 - Mid/Side, Independent Phase\
        852599 - Preserve Formants, Mid/Side, Independent Phase\
        852600 - Time Domain Smoothing\
        852601 - Preserve Formants, Time Domain Smoothing\
        852602 - Mid/Side, Time Domain Smoothing\
        852603 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852604 - Independent Phase, Time Domain Smoothing\
        852605 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852606 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852607 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: HighQ, Window: Short\
        852608 - nothing\
        852609 - Preserve Formants\
        852610 - Mid/Side\
        852611 - Preserve Formants, Mid/Side\
        852612 - Independent Phase\
        852613 - Preserve Formants, Independent Phase\
        852614 - Mid/Side, Independent Phase\
        852615 - Preserve Formants, Mid/Side, Independent Phase\
        852616 - Time Domain Smoothing\
        852617 - Preserve Formants, Time Domain Smoothing\
        852618 - Mid/Side, Time Domain Smoothing\
        852619 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852620 - Independent Phase, Time Domain Smoothing\
        852621 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852622 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852623 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: HighQ, Window: Short\
        852624 - nothing\
        852625 - Preserve Formants\
        852626 - Mid/Side\
        852627 - Preserve Formants, Mid/Side\
        852628 - Independent Phase\
        852629 - Preserve Formants, Independent Phase\
        852630 - Mid/Side, Independent Phase\
        852631 - Preserve Formants, Mid/Side, Independent Phase\
        852632 - Time Domain Smoothing\
        852633 - Preserve Formants, Time Domain Smoothing\
        852634 - Mid/Side, Time Domain Smoothing\
        852635 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852636 - Independent Phase, Time Domain Smoothing\
        852637 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852638 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852639 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: HighQ, Window: Short\
        852640 - nothing\
        852641 - Preserve Formants\
        852642 - Mid/Side\
        852643 - Preserve Formants, Mid/Side\
        852644 - Independent Phase\
        852645 - Preserve Formants, Independent Phase\
        852646 - Mid/Side, Independent Phase\
        852647 - Preserve Formants, Mid/Side, Independent Phase\
        852648 - Time Domain Smoothing\
        852649 - Preserve Formants, Time Domain Smoothing\
        852650 - Mid/Side, Time Domain Smoothing\
        852651 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852652 - Independent Phase, Time Domain Smoothing\
        852653 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852654 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852655 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: HighQ, Window: Short\
        852656 - nothing\
        852657 - Preserve Formants\
        852658 - Mid/Side\
        852659 - Preserve Formants, Mid/Side\
        852660 - Independent Phase\
        852661 - Preserve Formants, Independent Phase\
        852662 - Mid/Side, Independent Phase\
        852663 - Preserve Formants, Mid/Side, Independent Phase\
        852664 - Time Domain Smoothing\
        852665 - Preserve Formants, Time Domain Smoothing\
        852666 - Mid/Side, Time Domain Smoothing\
        852667 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852668 - Independent Phase, Time Domain Smoothing\
        852669 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852670 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852671 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: HighQ, Window: Short\
        852672 - nothing\
        852673 - Preserve Formants\
        852674 - Mid/Side\
        852675 - Preserve Formants, Mid/Side\
        852676 - Independent Phase\
        852677 - Preserve Formants, Independent Phase\
        852678 - Mid/Side, Independent Phase\
        852679 - Preserve Formants, Mid/Side, Independent Phase\
        852680 - Time Domain Smoothing\
        852681 - Preserve Formants, Time Domain Smoothing\
        852682 - Mid/Side, Time Domain Smoothing\
        852683 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852684 - Independent Phase, Time Domain Smoothing\
        852685 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852686 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852687 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: Consistent, Window: Short\
        852688 - nothing\
        852689 - Preserve Formants\
        852690 - Mid/Side\
        852691 - Preserve Formants, Mid/Side\
        852692 - Independent Phase\
        852693 - Preserve Formants, Independent Phase\
        852694 - Mid/Side, Independent Phase\
        852695 - Preserve Formants, Mid/Side, Independent Phase\
        852696 - Time Domain Smoothing\
        852697 - Preserve Formants, Time Domain Smoothing\
        852698 - Mid/Side, Time Domain Smoothing\
        852699 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852700 - Independent Phase, Time Domain Smoothing\
        852701 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852702 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852703 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: Consistent, Window: Short\
        852704 - nothing\
        852705 - Preserve Formants\
        852706 - Mid/Side\
        852707 - Preserve Formants, Mid/Side\
        852708 - Independent Phase\
        852709 - Preserve Formants, Independent Phase\
        852710 - Mid/Side, Independent Phase\
        852711 - Preserve Formants, Mid/Side, Independent Phase\
        852712 - Time Domain Smoothing\
        852713 - Preserve Formants, Time Domain Smoothing\
        852714 - Mid/Side, Time Domain Smoothing\
        852715 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852716 - Independent Phase, Time Domain Smoothing\
        852717 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852718 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852719 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: Consistent, Window: Short\
        852720 - nothing\
        852721 - Preserve Formants\
        852722 - Mid/Side\
        852723 - Preserve Formants, Mid/Side\
        852724 - Independent Phase\
        852725 - Preserve Formants, Independent Phase\
        852726 - Mid/Side, Independent Phase\
        852727 - Preserve Formants, Mid/Side, Independent Phase\
        852728 - Time Domain Smoothing\
        852729 - Preserve Formants, Time Domain Smoothing\
        852730 - Mid/Side, Time Domain Smoothing\
        852731 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852732 - Independent Phase, Time Domain Smoothing\
        852733 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852734 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852735 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: Consistent, Window: Short\
        852736 - nothing\
        852737 - Preserve Formants\
        852738 - Mid/Side\
        852739 - Preserve Formants, Mid/Side\
        852740 - Independent Phase\
        852741 - Preserve Formants, Independent Phase\
        852742 - Mid/Side, Independent Phase\
        852743 - Preserve Formants, Mid/Side, Independent Phase\
        852744 - Time Domain Smoothing\
        852745 - Preserve Formants, Time Domain Smoothing\
        852746 - Mid/Side, Time Domain Smoothing\
        852747 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852748 - Independent Phase, Time Domain Smoothing\
        852749 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852750 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852751 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: Consistent, Window: Short\
        852752 - nothing\
        852753 - Preserve Formants\
        852754 - Mid/Side\
        852755 - Preserve Formants, Mid/Side\
        852756 - Independent Phase\
        852757 - Preserve Formants, Independent Phase\
        852758 - Mid/Side, Independent Phase\
        852759 - Preserve Formants, Mid/Side, Independent Phase\
        852760 - Time Domain Smoothing\
        852761 - Preserve Formants, Time Domain Smoothing\
        852762 - Mid/Side, Time Domain Smoothing\
        852763 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852764 - Independent Phase, Time Domain Smoothing\
        852765 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852766 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852767 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: Consistent, Window: Short\
        852768 - nothing\
        852769 - Preserve Formants\
        852770 - Mid/Side\
        852771 - Preserve Formants, Mid/Side\
        852772 - Independent Phase\
        852773 - Preserve Formants, Independent Phase\
        852774 - Mid/Side, Independent Phase\
        852775 - Preserve Formants, Mid/Side, Independent Phase\
        852776 - Time Domain Smoothing\
        852777 - Preserve Formants, Time Domain Smoothing\
        852778 - Mid/Side, Time Domain Smoothing\
        852779 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852780 - Independent Phase, Time Domain Smoothing\
        852781 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852782 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852783 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: Consistent, Window: Short\
        852784 - nothing\
        852785 - Preserve Formants\
        852786 - Mid/Side\
        852787 - Preserve Formants, Mid/Side\
        852788 - Independent Phase\
        852789 - Preserve Formants, Independent Phase\
        852790 - Mid/Side, Independent Phase\
        852791 - Preserve Formants, Mid/Side, Independent Phase\
        852792 - Time Domain Smoothing\
        852793 - Preserve Formants, Time Domain Smoothing\
        852794 - Mid/Side, Time Domain Smoothing\
        852795 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852796 - Independent Phase, Time Domain Smoothing\
        852797 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852798 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852799 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: Consistent, Window: Short\
        852800 - nothing\
        852801 - Preserve Formants\
        852802 - Mid/Side\
        852803 - Preserve Formants, Mid/Side\
        852804 - Independent Phase\
        852805 - Preserve Formants, Independent Phase\
        852806 - Mid/Side, Independent Phase\
        852807 - Preserve Formants, Mid/Side, Independent Phase\
        852808 - Time Domain Smoothing\
        852809 - Preserve Formants, Time Domain Smoothing\
        852810 - Mid/Side, Time Domain Smoothing\
        852811 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852812 - Independent Phase, Time Domain Smoothing\
        852813 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852814 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852815 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: Consistent, Window: Short\
        852816 - nothing\
        852817 - Preserve Formants\
        852818 - Mid/Side\
        852819 - Preserve Formants, Mid/Side\
        852820 - Independent Phase\
        852821 - Preserve Formants, Independent Phase\
        852822 - Mid/Side, Independent Phase\
        852823 - Preserve Formants, Mid/Side, Independent Phase\
        852824 - Time Domain Smoothing\
        852825 - Preserve Formants, Time Domain Smoothing\
        852826 - Mid/Side, Time Domain Smoothing\
        852827 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852828 - Independent Phase, Time Domain Smoothing\
        852829 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852830 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852831 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Window: Long\
        852832 - nothing\
        852833 - Preserve Formants\
        852834 - Mid/Side\
        852835 - Preserve Formants, Mid/Side\
        852836 - Independent Phase\
        852837 - Preserve Formants, Independent Phase\
        852838 - Mid/Side, Independent Phase\
        852839 - Preserve Formants, Mid/Side, Independent Phase\
        852840 - Time Domain Smoothing\
        852841 - Preserve Formants, Time Domain Smoothing\
        852842 - Mid/Side, Time Domain Smoothing\
        852843 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852844 - Independent Phase, Time Domain Smoothing\
        852845 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852846 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852847 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Window: Long\
        852848 - nothing\
        852849 - Preserve Formants\
        852850 - Mid/Side\
        852851 - Preserve Formants, Mid/Side\
        852852 - Independent Phase\
        852853 - Preserve Formants, Independent Phase\
        852854 - Mid/Side, Independent Phase\
        852855 - Preserve Formants, Mid/Side, Independent Phase\
        852856 - Time Domain Smoothing\
        852857 - Preserve Formants, Time Domain Smoothing\
        852858 - Mid/Side, Time Domain Smoothing\
        852859 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852860 - Independent Phase, Time Domain Smoothing\
        852861 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852862 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852863 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Window: Long\
        852864 - nothing\
        852865 - Preserve Formants\
        852866 - Mid/Side\
        852867 - Preserve Formants, Mid/Side\
        852868 - Independent Phase\
        852869 - Preserve Formants, Independent Phase\
        852870 - Mid/Side, Independent Phase\
        852871 - Preserve Formants, Mid/Side, Independent Phase\
        852872 - Time Domain Smoothing\
        852873 - Preserve Formants, Time Domain Smoothing\
        852874 - Mid/Side, Time Domain Smoothing\
        852875 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852876 - Independent Phase, Time Domain Smoothing\
        852877 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852878 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852879 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Window: Long\
        852880 - nothing\
        852881 - Preserve Formants\
        852882 - Mid/Side\
        852883 - Preserve Formants, Mid/Side\
        852884 - Independent Phase\
        852885 - Preserve Formants, Independent Phase\
        852886 - Mid/Side, Independent Phase\
        852887 - Preserve Formants, Mid/Side, Independent Phase\
        852888 - Time Domain Smoothing\
        852889 - Preserve Formants, Time Domain Smoothing\
        852890 - Mid/Side, Time Domain Smoothing\
        852891 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852892 - Independent Phase, Time Domain Smoothing\
        852893 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852894 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852895 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Window: Long\
        852896 - nothing\
        852897 - Preserve Formants\
        852898 - Mid/Side\
        852899 - Preserve Formants, Mid/Side\
        852900 - Independent Phase\
        852901 - Preserve Formants, Independent Phase\
        852902 - Mid/Side, Independent Phase\
        852903 - Preserve Formants, Mid/Side, Independent Phase\
        852904 - Time Domain Smoothing\
        852905 - Preserve Formants, Time Domain Smoothing\
        852906 - Mid/Side, Time Domain Smoothing\
        852907 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852908 - Independent Phase, Time Domain Smoothing\
        852909 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852910 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852911 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Window: Long\
        852912 - nothing\
        852913 - Preserve Formants\
        852914 - Mid/Side\
        852915 - Preserve Formants, Mid/Side\
        852916 - Independent Phase\
        852917 - Preserve Formants, Independent Phase\
        852918 - Mid/Side, Independent Phase\
        852919 - Preserve Formants, Mid/Side, Independent Phase\
        852920 - Time Domain Smoothing\
        852921 - Preserve Formants, Time Domain Smoothing\
        852922 - Mid/Side, Time Domain Smoothing\
        852923 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852924 - Independent Phase, Time Domain Smoothing\
        852925 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852926 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852927 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Window: Long\
        852928 - nothing\
        852929 - Preserve Formants\
        852930 - Mid/Side\
        852931 - Preserve Formants, Mid/Side\
        852932 - Independent Phase\
        852933 - Preserve Formants, Independent Phase\
        852934 - Mid/Side, Independent Phase\
        852935 - Preserve Formants, Mid/Side, Independent Phase\
        852936 - Time Domain Smoothing\
        852937 - Preserve Formants, Time Domain Smoothing\
        852938 - Mid/Side, Time Domain Smoothing\
        852939 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852940 - Independent Phase, Time Domain Smoothing\
        852941 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852942 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852943 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Window: Long\
        852944 - nothing\
        852945 - Preserve Formants\
        852946 - Mid/Side\
        852947 - Preserve Formants, Mid/Side\
        852948 - Independent Phase\
        852949 - Preserve Formants, Independent Phase\
        852950 - Mid/Side, Independent Phase\
        852951 - Preserve Formants, Mid/Side, Independent Phase\
        852952 - Time Domain Smoothing\
        852953 - Preserve Formants, Time Domain Smoothing\
        852954 - Mid/Side, Time Domain Smoothing\
        852955 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852956 - Independent Phase, Time Domain Smoothing\
        852957 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852958 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852959 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Window: Long\
        852960 - nothing\
        852961 - Preserve Formants\
        852962 - Mid/Side\
        852963 - Preserve Formants, Mid/Side\
        852964 - Independent Phase\
        852965 - Preserve Formants, Independent Phase\
        852966 - Mid/Side, Independent Phase\
        852967 - Preserve Formants, Mid/Side, Independent Phase\
        852968 - Time Domain Smoothing\
        852969 - Preserve Formants, Time Domain Smoothing\
        852970 - Mid/Side, Time Domain Smoothing\
        852971 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852972 - Independent Phase, Time Domain Smoothing\
        852973 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852974 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852975 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: HighQ, Window: Long\
        852976 - nothing\
        852977 - Preserve Formants\
        852978 - Mid/Side\
        852979 - Preserve Formants, Mid/Side\
        852980 - Independent Phase\
        852981 - Preserve Formants, Independent Phase\
        852982 - Mid/Side, Independent Phase\
        852983 - Preserve Formants, Mid/Side, Independent Phase\
        852984 - Time Domain Smoothing\
        852985 - Preserve Formants, Time Domain Smoothing\
        852986 - Mid/Side, Time Domain Smoothing\
        852987 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852988 - Independent Phase, Time Domain Smoothing\
        852989 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852990 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852991 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: HighQ, Window: Long\
        852992 - nothing\
        852993 - Preserve Formants\
        852994 - Mid/Side\
        852995 - Preserve Formants, Mid/Side\
        852996 - Independent Phase\
        852997 - Preserve Formants, Independent Phase\
        852998 - Mid/Side, Independent Phase\
        852999 - Preserve Formants, Mid/Side, Independent Phase\
        853000 - Time Domain Smoothing\
        853001 - Preserve Formants, Time Domain Smoothing\
        853002 - Mid/Side, Time Domain Smoothing\
        853003 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853004 - Independent Phase, Time Domain Smoothing\
        853005 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853006 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853007 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: HighQ, Window: Long\
        853008 - nothing\
        853009 - Preserve Formants\
        853010 - Mid/Side\
        853011 - Preserve Formants, Mid/Side\
        853012 - Independent Phase\
        853013 - Preserve Formants, Independent Phase\
        853014 - Mid/Side, Independent Phase\
        853015 - Preserve Formants, Mid/Side, Independent Phase\
        853016 - Time Domain Smoothing\
        853017 - Preserve Formants, Time Domain Smoothing\
        853018 - Mid/Side, Time Domain Smoothing\
        853019 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853020 - Independent Phase, Time Domain Smoothing\
        853021 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853022 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853023 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: HighQ, Window: Long\
        853024 - nothing\
        853025 - Preserve Formants\
        853026 - Mid/Side\
        853027 - Preserve Formants, Mid/Side\
        853028 - Independent Phase\
        853029 - Preserve Formants, Independent Phase\
        853030 - Mid/Side, Independent Phase\
        853031 - Preserve Formants, Mid/Side, Independent Phase\
        853032 - Time Domain Smoothing\
        853033 - Preserve Formants, Time Domain Smoothing\
        853034 - Mid/Side, Time Domain Smoothing\
        853035 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853036 - Independent Phase, Time Domain Smoothing\
        853037 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853038 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853039 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: HighQ, Window: Long\
        853040 - nothing\
        853041 - Preserve Formants\
        853042 - Mid/Side\
        853043 - Preserve Formants, Mid/Side\
        853044 - Independent Phase\
        853045 - Preserve Formants, Independent Phase\
        853046 - Mid/Side, Independent Phase\
        853047 - Preserve Formants, Mid/Side, Independent Phase\
        853048 - Time Domain Smoothing\
        853049 - Preserve Formants, Time Domain Smoothing\
        853050 - Mid/Side, Time Domain Smoothing\
        853051 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853052 - Independent Phase, Time Domain Smoothing\
        853053 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853054 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853055 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: HighQ, Window: Long\
        853056 - nothing\
        853057 - Preserve Formants\
        853058 - Mid/Side\
        853059 - Preserve Formants, Mid/Side\
        853060 - Independent Phase\
        853061 - Preserve Formants, Independent Phase\
        853062 - Mid/Side, Independent Phase\
        853063 - Preserve Formants, Mid/Side, Independent Phase\
        853064 - Time Domain Smoothing\
        853065 - Preserve Formants, Time Domain Smoothing\
        853066 - Mid/Side, Time Domain Smoothing\
        853067 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853068 - Independent Phase, Time Domain Smoothing\
        853069 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853070 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853071 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: HighQ, Window: Long\
        853072 - nothing\
        853073 - Preserve Formants\
        853074 - Mid/Side\
        853075 - Preserve Formants, Mid/Side\
        853076 - Independent Phase\
        853077 - Preserve Formants, Independent Phase\
        853078 - Mid/Side, Independent Phase\
        853079 - Preserve Formants, Mid/Side, Independent Phase\
        853080 - Time Domain Smoothing\
        853081 - Preserve Formants, Time Domain Smoothing\
        853082 - Mid/Side, Time Domain Smoothing\
        853083 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853084 - Independent Phase, Time Domain Smoothing\
        853085 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853086 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853087 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: HighQ, Window: Long\
        853088 - nothing\
        853089 - Preserve Formants\
        853090 - Mid/Side\
        853091 - Preserve Formants, Mid/Side\
        853092 - Independent Phase\
        853093 - Preserve Formants, Independent Phase\
        853094 - Mid/Side, Independent Phase\
        853095 - Preserve Formants, Mid/Side, Independent Phase\
        853096 - Time Domain Smoothing\
        853097 - Preserve Formants, Time Domain Smoothing\
        853098 - Mid/Side, Time Domain Smoothing\
        853099 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853100 - Independent Phase, Time Domain Smoothing\
        853101 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853102 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853103 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: HighQ, Window: Long\
        853104 - nothing\
        853105 - Preserve Formants\
        853106 - Mid/Side\
        853107 - Preserve Formants, Mid/Side\
        853108 - Independent Phase\
        853109 - Preserve Formants, Independent Phase\
        853110 - Mid/Side, Independent Phase\
        853111 - Preserve Formants, Mid/Side, Independent Phase\
        853112 - Time Domain Smoothing\
        853113 - Preserve Formants, Time Domain Smoothing\
        853114 - Mid/Side, Time Domain Smoothing\
        853115 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853116 - Independent Phase, Time Domain Smoothing\
        853117 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853118 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853119 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: Consistent, Window: Long\
        853120 - nothing\
        853121 - Preserve Formants\
        853122 - Mid/Side\
        853123 - Preserve Formants, Mid/Side\
        853124 - Independent Phase\
        853125 - Preserve Formants, Independent Phase\
        853126 - Mid/Side, Independent Phase\
        853127 - Preserve Formants, Mid/Side, Independent Phase\
        853128 - Time Domain Smoothing\
        853129 - Preserve Formants, Time Domain Smoothing\
        853130 - Mid/Side, Time Domain Smoothing\
        853131 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853132 - Independent Phase, Time Domain Smoothing\
        853133 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853134 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853135 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: Consistent, Window: Long\
        853136 - nothing\
        853137 - Preserve Formants\
        853138 - Mid/Side\
        853139 - Preserve Formants, Mid/Side\
        853140 - Independent Phase\
        853141 - Preserve Formants, Independent Phase\
        853142 - Mid/Side, Independent Phase\
        853143 - Preserve Formants, Mid/Side, Independent Phase\
        853144 - Time Domain Smoothing\
        853145 - Preserve Formants, Time Domain Smoothing\
        853146 - Mid/Side, Time Domain Smoothing\
        853147 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853148 - Independent Phase, Time Domain Smoothing\
        853149 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853150 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853151 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: Consistent, Window: Long\
        853152 - nothing\
        853153 - Preserve Formants\
        853154 - Mid/Side\
        853155 - Preserve Formants, Mid/Side\
        853156 - Independent Phase\
        853157 - Preserve Formants, Independent Phase\
        853158 - Mid/Side, Independent Phase\
        853159 - Preserve Formants, Mid/Side, Independent Phase\
        853160 - Time Domain Smoothing\
        853161 - Preserve Formants, Time Domain Smoothing\
        853162 - Mid/Side, Time Domain Smoothing\
        853163 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853164 - Independent Phase, Time Domain Smoothing\
        853165 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853166 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853167 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: Consistent, Window: Long\
        853168 - nothing\
        853169 - Preserve Formants\
        853170 - Mid/Side\
        853171 - Preserve Formants, Mid/Side\
        853172 - Independent Phase\
        853173 - Preserve Formants, Independent Phase\
        853174 - Mid/Side, Independent Phase\
        853175 - Preserve Formants, Mid/Side, Independent Phase\
        853176 - Time Domain Smoothing\
        853177 - Preserve Formants, Time Domain Smoothing\
        853178 - Mid/Side, Time Domain Smoothing\
        853179 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853180 - Independent Phase, Time Domain Smoothing\
        853181 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853182 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853183 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: Consistent, Window: Long\
        853184 - nothing\
        853185 - Preserve Formants\
        853186 - Mid/Side\
        853187 - Preserve Formants, Mid/Side\
        853188 - Independent Phase\
        853189 - Preserve Formants, Independent Phase\
        853190 - Mid/Side, Independent Phase\
        853191 - Preserve Formants, Mid/Side, Independent Phase\
        853192 - Time Domain Smoothing\
        853193 - Preserve Formants, Time Domain Smoothing\
        853194 - Mid/Side, Time Domain Smoothing\
        853195 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853196 - Independent Phase, Time Domain Smoothing\
        853197 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853198 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853199 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: Consistent, Window: Long\
        853200 - nothing\
        853201 - Preserve Formants\
        853202 - Mid/Side\
        853203 - Preserve Formants, Mid/Side\
        853204 - Independent Phase\
        853205 - Preserve Formants, Independent Phase\
        853206 - Mid/Side, Independent Phase\
        853207 - Preserve Formants, Mid/Side, Independent Phase\
        853208 - Time Domain Smoothing\
        853209 - Preserve Formants, Time Domain Smoothing\
        853210 - Mid/Side, Time Domain Smoothing\
        853211 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853212 - Independent Phase, Time Domain Smoothing\
        853213 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853214 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853215 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: Consistent, Window: Long\
        853216 - nothing\
        853217 - Preserve Formants\
        853218 - Mid/Side\
        853219 - Preserve Formants, Mid/Side\
        853220 - Independent Phase\
        853221 - Preserve Formants, Independent Phase\
        853222 - Mid/Side, Independent Phase\
        853223 - Preserve Formants, Mid/Side, Independent Phase\
        853224 - Time Domain Smoothing\
        853225 - Preserve Formants, Time Domain Smoothing\
        853226 - Mid/Side, Time Domain Smoothing\
        853227 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853228 - Independent Phase, Time Domain Smoothing\
        853229 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853230 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853231 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: Consistent, Window: Long\
        853232 - nothing\
        853233 - Preserve Formants\
        853234 - Mid/Side\
        853235 - Preserve Formants, Mid/Side\
        853236 - Independent Phase\
        853237 - Preserve Formants, Independent Phase\
        853238 - Mid/Side, Independent Phase\
        853239 - Preserve Formants, Mid/Side, Independent Phase\
        853240 - Time Domain Smoothing\
        853241 - Preserve Formants, Time Domain Smoothing\
        853242 - Mid/Side, Time Domain Smoothing\
        853243 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853244 - Independent Phase, Time Domain Smoothing\
        853245 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853246 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853247 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: Consistent, Window: Long\
        853248 - nothing\
        853249 - Preserve Formants\
        853250 - Mid/Side\
        853251 - Preserve Formants, Mid/Side\
        853252 - Independent Phase\
        853253 - Preserve Formants, Independent Phase\
        853254 - Mid/Side, Independent Phase\
        853255 - Preserve Formants, Mid/Side, Independent Phase\
        853256 - Time Domain Smoothing\
        853257 - Preserve Formants, Time Domain Smoothing\
        853258 - Mid/Side, Time Domain Smoothing\
        853259 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853260 - Independent Phase, Time Domain Smoothing\
        853261 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853262 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853263 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the default pitch mode    ",
    name = "DEF_PITCH_MODE_STATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the stretch marker mode\
0, Balanced\
1, Tonal-optimized\
2, Transient-optimized\
3, No pre-echo reduction",
    name = "STRETCH_MARKER_MODE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [45] = {
  fname = "GetProject_TakeLane",
  label = "US_GetProject_TakeLane",
  run = "in/out",
  desc = "Returns the take-lane-state from an rpp-project-file or a ProjectStateChunk.\
\
It's the entry TAKELANE\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "take-lane-state",
    name = "TAKE_LANE_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [46] = {
  fname = "GetProject_SampleRate",
  label = "US_GetProject_SampleRate",
  run = "in/out",
  desc = "Returns the take-lane-state, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.\
\
It's the entry SAMPLERATE\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "Project Sample Rate in Hz",
    name = "SAMPLE_RATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "Checkbox: Project Sample Rate",
    name = "PROJECT_SAMPLE_RATE",
   },
   [3] = {
    type = "INTEGER",
    desc = "Checkbox: Force Project Tempo/Time Signature changes to occur on whole samples ",
    name = "FORCE_TEMPO_TIME_SIG",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [47] = {
  fname = "GetProject_TrackMixingDepth",
  label = "US_GetProject_TrackMixingDepth",
  run = "in/out",
  desc = "Returns the track-mixing-state, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.\
It's the entry INTMIXMODE\
\
Returns -1 in case of error, nil if it's set to 64bit(default)!",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "track mixing depth\
nil - 64bit float (default)\
1 - 32 bit float\
2 - 39 bit integer\
3 - 24 bit integer\
4 - 16 bit integer\
5 - 12 bit integer\
6 - 8 bit integer",
    name = "TRACK_MIXING_DEPTH",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [48] = {
  fname = "GetProject_TrackStateChunk",
  label = "US_GetProject_TrackStateChunk",
  run = "in/out",
  desc = "Returns an RPPXML-trackstatechunk from an rpp-project-file or a ProjectStateChunk, with tracknumber idx. IDX is 1 for the first track in the project-file, 2 for the second, etc\
Returns -1 in case of error.\
\
Use <a href=\"#GetProject_NumberOfTracks\">GetProject_NumberOfTracks</a> to get the number of tracks within an rpp-file.\
\
The returned trackstatechunk can be inserted into the current project with <a href=\"#InsertTrack_TrackStateChunk\">InsertTrack_TrackStateChunk</a>.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an RPP-XML-Trackstate-chunk, that can be used by functions like reaper.SetTrackStateChunk()",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber you want to have",
    name = "IDX",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "deletes the trackID in the trackstate-chunk, to avoid possible conflicts within a project, where it shall be imported to",
    name = "DELETETRACKID",
   },
   [4] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [49] = {
  fname = "GetProject_NumberOfTracks",
  label = "US_GetProject_NumberOfTracks",
  run = "in/out",
  desc = "Returns the number of tracks within an rpp-project-file or a GetProject_NumberOfTracks.\
Returns -1 in case of error.\
\
Note: Huge projectfiles with thousands of items may take some seconds to load.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of tracks within an projectfile",
    name = "NUMBER_OF_TRACKS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [50] = {
  fname = "GetProject_Selection",
  label = "US_GetProject_Selection",
  run = "in/out",
  desc = "Returns the selection-range from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry SELECTION\
\
Returns nil in case of error or if no such entry exists.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "start of the time-selection",
    name = "START_SELECTION",
   },
   [2] = {
    type = "NUMBER",
    desc = "end of the time-selection",
    name = "END_SELECTION",
   },
   [3] = {
    type = "NUMBER",
    desc = "start of the time-selection",
    name = "START_SELECTION2",
   },
   [4] = {
    type = "NUMBER",
    desc = "end of the time-selection",
    name = "END_SELECTION2",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [51] = {
  fname = "GetProject_RenderQueueDelay",
  label = "US_GetProject_RenderQueueDelay",
  run = "in/out",
  desc = "Returns the state of the checkbox Delay queued render to allow samples to load-checkbox and the length of the delay.\
\
It's the entry RENDER_QDELAY\
\
Returns nil in case of error or if no such entry exists.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, the checkbox is checked; false, it is unchecked",
    name = "QDELAY_CHECKSTATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the length of the queued-render-delay in seconds",
    name = "QDELAY_SECONDS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [52] = {
  fname = "GetProject_QRenderOriginalProject",
  label = "US_GetProject_QRenderOriginalProject",
  run = "in/out",
  desc = "Returns the original-filename of a queue-render-projectfile. Will return empty string, if the queued-render-project hadn't been saved before it was added to the render-queue.\
\
It's the entry QUEUED_RENDER_ORIGINAL_FILENAME\
\
Returns nil in case of error or if no such entry exists.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the original-projectfilename of the queue-render-project",
    name = "QRENDER_ORIGINALPROJECT_FILE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [53] = {
  fname = "GetProject_QRenderOutFiles",
  label = "US_GetProject_QRenderOutFiles",
  run = "in/out",
  desc = "Returns the outfiles of the rendered files, stored in a queue-render-projectfile. This includes the path and files of the files, that will be rendered.\
\
It's the entry QUEUED_RENDER_OUTFILE\
\
Returns nil in case of error or if no such entry exists.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of render-outfiles",
    name = "COUNT_OUTFILES",
   },
   [2] = {
    type = "TABLE",
    desc = "an array with all filenames-with-paths that the rendered files will have; \
if the filename contains \"-001\" or higher, this represents a file for a rendered stem, otherwise it is the one for the master.",
    name = "QRENDEROUTFILESLIST",
   },
   [3] = {
    type = "TABLE",
    desc = "the guids of the rendered outfiles",
    name = "QRENDEROUTFILESLISTGUID",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, the render-dialog will be closed after render is finished; false, the render-dialog keeps open",
    name = "AUTOCLOSEWHENFINISHED",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, autoincrement filename if the file already exists; false, don't autoincrement filename",
    name = "AUTOINCREMENTFILENAME",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, save a copy of the project as e.g. \"outfile.wav.RPP\"; false, don't save a copy of the project",
    name = "SAVECOPYTOOUTFILE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [54] = {
  fname = "GetProject_MetaDataStateChunk",
  label = "US_GetProject_MetaDataStateChunk",
  run = "in/out",
  desc = "returns the Metadata-StateChunk, that holds all Metadata-entries.\
\
It's the entry <RENDER_METADATA ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the metadata",
    name = "METADATASTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the projectbay-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [55] = {
  fname = "SetProject_RippleState",
  label = "US_SetProject_RippleState",
  run = "in/out",
  desc = "Sets the ripple-state in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, no Ripple; 1, Ripple One Track; 2, Ripple All",
    name = "RIPPLE_STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [56] = {
  fname = "SetProject_RenderQueueDelay",
  label = "US_SetProject_RenderQueueDelay",
  run = "in/out",
  desc = "Sets the render-queue-delay-time in an rpp-project-file or a ProjectStateChunk.\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "0 and higher, sets the checkbox \"Delay queued render to allow samples to load and the amount of time to wait in seconds\
nil, if you want to turn off render-queue-delay in the project/ProjectStateChunk",
    name = "RENDERQDELAY",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [57] = {
  fname = "SetProject_Selection",
  label = "US_SetProject_Selection",
  run = "in/out",
  desc = "Sets the ripple-state in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "NUMBER",
    desc = "start of the selection in seconds",
    name = "STARTTIME",
   },
   [3] = {
    type = "NUMBER",
    desc = "end of the selection in seconds",
    name = "ENDTIME",
   },
   [4] = {
    type = "NUMBER",
    desc = "start of the second selection in seconds",
    name = "STARTTIME2",
   },
   [5] = {
    type = "NUMBER",
    desc = "end of the second selection in seconds",
    name = "ENDTIME2",
   },
   [6] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [58] = {
  fname = "SetProject_GroupOverride",
  label = "US_SetProject_GroupOverride",
  run = "in/out",
  desc = "Sets the group-override-state in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the group-override state",
    name = "GROUP_OVERRIDE1",
   },
   [3] = {
    type = "INTEGER",
    desc = "the group-override state",
    name = "GROUP_OVERRIDE2",
   },
   [4] = {
    type = "INTEGER",
    desc = "the group-override state",
    name = "GROUP_OVERRIDE3",
   },
   [5] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [59] = {
  fname = "SetProject_AutoCrossFade",
  label = "US_SetProject_AutoCrossFade",
  run = "in/out",
  desc = "Sets the autocrossfade-state in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "autocrossfade-state",
    name = "AUTOCROSSFADE_STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [60] = {
  fname = "SetProject_EnvAttach",
  label = "US_SetProject_EnvAttach",
  run = "in/out",
  desc = "Sets the env_attach-state in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "env_attach-state",
    name = "ENV_ATTACH",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [61] = {
  fname = "SetProject_MixerUIFlags",
  label = "US_SetProject_MixerUIFlags",
  run = "in/out",
  desc = "Sets the Mixer-UI-state-flags in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "folders, receives, etc \
            0 - Show tracks in folders, Auto arrange tracks in mixer\
            1 - Show normal top level tracks\
            2 - Show Folders\
            4 - Group folders to left\
            8 - Show tracks that have receives\
            16 - Group tracks that have receives to left\
            32 - don't show tracks that are in folder\
            64 - No Autoarrange tracks in mixer\
            128 - ?\
            256 - ?",
    name = "STATE_BITFIELD1",
   },
   [3] = {
    type = "INTEGER",
    desc = "master-track, FX, Mixer\
            0 - Master track in mixer\
            1 - Don't show multiple rows of tracks, when size permits\
            2 - Show maximum rows even when tracks would fit in less rows\
            4 - Master Show on right side of mixer\
            8 - ?\
            16 - Show FX inserts when size permits\
            32 - Show sends when size permits\
            64 - Show tracks in mixer\
            128 - Show FX parameters, when size permits\
            256 - Don't show Master track in mixer",
    name = "STATE_BITFIELD2",
   },
   [4] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [62] = {
  fname = "SetProject_PeakGain",
  label = "US_SetProject_PeakGain",
  run = "in/out",
  desc = "Sets the peak-gain-state in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "NUMBER",
    desc = "peak-gain-state",
    name = "PEAKGAIN_STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [63] = {
  fname = "SetProject_Feedback",
  label = "US_SetProject_Feedback",
  run = "in/out",
  desc = "Sets the feedback-state in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "feedback-state",
    name = "FEEDBACK_STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [64] = {
  fname = "SetProject_PanLaw",
  label = "US_SetProject_PanLaw",
  run = "in/out",
  desc = "Sets the panlaw-state, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "NUMBER",
    desc = "state of the panlaw, as set in the project-settings->Advanced->Pan law/mode->Pan:law(db). 0.5(-6.02 db) to 1(default +0.0 db)",
    name = "PANLAW_STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [65] = {
  fname = "SetProject_ProjOffsets",
  label = "US_SetProject_ProjOffsets",
  run = "in/out",
  desc = "Sets the project-offset-state, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.\
\
The project-offset, as set in the ProjectSettings -> Project Time Start, Project start measure and Base Ruler Marking Off This Measure-checkbox\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "NUMBER",
    desc = "the project-start-time in seconds",
    name = "START_TIME",
   },
   [3] = {
    type = "INTEGER",
    desc = "the start-measure; starting with 0, unlike in the Project-Settings-window, where the 0 becomes 1 as startmeasure",
    name = "START_MEASURE",
   },
   [4] = {
    type = "INTEGER",
    desc = "0, checkbox unchecked; 1, checkbox checked",
    name = "BASE_RULER_MARKING_OFF_THIS_MEASURE",
   },
   [5] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [66] = {
  fname = "SetProject_MaxProjectLength",
  label = "US_SetProject_MaxProjectLength",
  run = "in/out",
  desc = "Sets the max-project-length-state, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "checkbox \"Limit project length, stop playback/recording at:\" - 0 off, 1 on",
    name = "LIMIT_PROJECT_LENGTH",
   },
   [3] = {
    type = "NUMBER",
    desc = "projectlength-limit in seconds",
    name = "PROJECTLENGTH_LIMIT",
   },
   [4] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [67] = {
  fname = "SetProject_Grid",
  label = "US_SetProject_Grid",
  run = "in/out",
  desc = "Sets the setproject-grid-state in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "gridstate1",
    name = "GRIDSTATE1",
   },
   [3] = {
    type = "INTEGER",
    desc = "gridstate2",
    name = "GRIDSTATE2",
   },
   [4] = {
    type = "NUMBER",
    desc = "gridstate3",
    name = "GRIDSTATE3",
   },
   [5] = {
    type = "INTEGER",
    desc = "gridstate4",
    name = "GRIDSTATE4",
   },
   [6] = {
    type = "NUMBER",
    desc = "gridstate5",
    name = "GRIDSTATE5",
   },
   [7] = {
    type = "INTEGER",
    desc = "gridstate6",
    name = "GRIDSTATE6",
   },
   [8] = {
    type = "INTEGER",
    desc = "gridstate7",
    name = "GRIDSTATE7",
   },
   [9] = {
    type = "NUMBER",
    desc = "gridstate8",
    name = "GRIDSTATE8",
   },
   [10] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [68] = {
  fname = "SetProject_Timemode",
  label = "US_SetProject_Timemode",
  run = "in/out",
  desc = "Sets the timemode-state in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "ruler-timemode-state\
-1, Use ruler time unit\
 0, Minutes:Seconds\
 1, Measures.Beats / Minutes:Seconds\
 2, Measures.Beats\
 3, Seconds\
 4, Samples\
 5, Hours:Minutes:Seconds:Frames\
 8, Absolute Frames",
    name = "RULER_TIMEMODE",
   },
   [3] = {
    type = "INTEGER",
    desc = "timemode-state",
    name = "TIMEMODE2",
   },
   [4] = {
    type = "INTEGER",
    desc = "Transport shown time\
             -1 - use ruler time unit\
             0 - minutes:seconds\
             1 - measures:beats/minutes:seconds\
             2 - measures:beats\
             3 - seconds\
             4 - samples\
             5 - hours:minutes:seconds:frames\
             8 - absolute frames",
    name = "SHOWNTIME",
   },
   [5] = {
    type = "INTEGER",
    desc = "timemode-state",
    name = "TIMEMODE4",
   },
   [6] = {
    type = "INTEGER",
    desc = "timemode-state",
    name = "TIMEMODE5",
   },
   [7] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [69] = {
  fname = "SetProject_VideoConfig",
  label = "US_SetProject_VideoConfig",
  run = "in/out",
  desc = "Sets the video-config-settings, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "preferred video size, x pixels",
    name = "PREFERREDVIDSIZEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "preferred video size, y pixels",
    name = "PREFERREDVIDSIZEY",
   },
   [4] = {
    type = "INTEGER",
    desc = "settings\
            0 - turned on/selected: use high quality filtering, preserve aspect ratio(letterbox) when resizing,\
                                    Video colorspace set to Auto,\
                                    Items in higher numbered tracks replace lower, as well as Video colorspace set to Auto\
            1 - Video colorspace: I420/YV12\
            2 - Video colorspace: YUV2\
            3 - RGB\
            256 - Items in lower numbered tracks replace higher\
            512 - Always resize video sources to preferred video size\
            1024 - Always resize output to preferred video size\
            2048 - turn off \"Use high quality filtering when resizing\"\
            4096 - turn off \"preserve aspect ratio (letterbox) when resizing\"",
    name = "SETTINGSBITFIELD",
   },
   [5] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [70] = {
  fname = "SetProject_PanMode",
  label = "US_SetProject_PanMode",
  run = "in/out",
  desc = "Sets the panmode-settings, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "panmode-state - ProjectSettings->Advanced->Pan law/mode->Pan mode\
            0 reaper 3.x balance (deprecated)\
            3 Stereo balance / mono pan (default)\
            5 Stereo pan\
            6 Dual Pan",
    name = "PANMODE_STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [71] = {
  fname = "SetProject_CursorPos",
  label = "US_SetProject_CursorPos",
  run = "in/out",
  desc = "Sets the cursor-position in an rpp-project-file or a ProjectStateChunk\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "NUMBER",
    desc = "editcursorposition in seconds",
    name = "CURSORPOS",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [72] = {
  fname = "SetProject_HorizontalZoom",
  label = "US_SetProject_HorizontalZoom",
  run = "in/out",
  desc = "Sets the horizontal-zoom in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "NUMBER",
    desc = "HorizontalZoomfactor, 0.007 to 1000000",
    name = "HZOOM",
   },
   [3] = {
    type = "INTEGER",
    desc = "horizontalscrollbarposition - 0 - 4294967296",
    name = "HZOOMSCROLLPOS",
   },
   [4] = {
    type = "INTEGER",
    desc = "0 to 500837, counts up, when maximum hzoomscrollpos overflows",
    name = "SCROLLBARFACTOR",
   },
   [5] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [73] = {
  fname = "SetProject_VerticalZoom",
  label = "US_SetProject_VerticalZoom",
  run = "in/out",
  desc = "Sets the vertical-zoom from an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "vertical zoomfactor(0-40)",
    name = "VZOOM",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [74] = {
  fname = "SetProject_UseRecConfig",
  label = "US_SetProject_UseRecConfig",
  run = "in/out",
  desc = "Sets the UseRec-Config in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "recording-cfg-state\
             0 - Automatic .wav (recommended)\
             1 - Custom (use ultraschall.GetProject_ApplyFXCFG to get recording_cfg_string)\
             2 - Recording Format",
    name = "REC_CFG",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [75] = {
  fname = "SetProject_RecMode",
  label = "US_SetProject_RecMode",
  run = "in/out",
  desc = "Sets the recording-mode-state in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "recording mode\
0, Autopunch/Selected Items\
1, normal\
2, Time Selection/Auto Punch",
    name = "REC_MODE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [76] = {
  fname = "SetProject_SMPTESync",
  label = "US_SetProject_SMPTESync",
  run = "in/out",
  desc = "Sets the TimeCodeSyncronization-SMPTE-Config in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "flag \
            0 - external timecode synchronization disabled\
            1 - external timecode synchronization enabled\
            4 - Start playback on valid timecode when stopped\
            8 - turned off: display flashing notification window when waiting for sync for recording\
            16 - playback off\
            32 - recording off\
            256 - MTC - 24/30fps MTC is 23.976/29.97ND works only with smptesync_userinput set to 4159\
            512 - MTC - 24/30fps MTC is 24/30ND",
    name = "SMPTESYNC_STATE1",
   },
   [3] = {
    type = "NUMBER",
    desc = "framerate in fps",
    name = "SMPTESYNC_FPS",
   },
   [4] = {
    type = "INTEGER",
    desc = "\"Re-synchronize if drift exceeds\" in ms (0 = never)",
    name = "SMPTESYNC_RESYNCDRIFT",
   },
   [5] = {
    type = "INTEGER",
    desc = "\"skip/drop frames if drift exceeds\" in ms(0 - never)",
    name = "SMPTESYNC_SKIPDROPFRAMES",
   },
   [6] = {
    type = "INTEGER",
    desc = "\"Synchronize by seeking ahead\" in ms (default = 1000)",
    name = "SMPTESYNC_SYNCSEEK",
   },
   [7] = {
    type = "INTEGER",
    desc = "\"Freewheel on missing time code for up to\" in ms(0 = forever)",
    name = "SMPTESYNC_FREEWHEEL",
   },
   [8] = {
    type = "INTEGER",
    desc = "User Input-flag\
            0 - LTC: Input 1\
            1 - LTC: Input 2\
            4159 - MTC - All inputs - 24/30 fps MTC 23.976ND/29.97ND if project is ND\
            4223 - SPP: All Inputs\
            8192 - ASIO Positioning Protocol",
    name = "SMPTESYNC_USERINPUT",
   },
   [9] = {
    type = "NUMBER",
    desc = "Offset incoming timecode by in seconds",
    name = "SMPTESYNC_OFFSETTIMECODE",
   },
   [10] = {
    type = "INTEGER",
    desc = "\"Stop recording if drift exceeds\" in ms(0 = never)",
    name = "SMPTESYNC_STOP_REC_DRIFT",
   },
   [11] = {
    type = "INTEGER",
    desc = "smptesync-state",
    name = "SMPTESYNC_STATE10",
   },
   [12] = {
    type = "INTEGER",
    desc = "\"stop recording on lack of timecode after\" in ms(0 = never)",
    name = "SMPTESYNC_STOP_REC_LACKTIME",
   },
   [13] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [77] = {
  fname = "SetProject_Loop",
  label = "US_SetProject_Loop",
  run = "in/out",
  desc = "Sets the UseRec-Config in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "loopbutton-state, 0, off; 1, on",
    name = "LOOP_MODE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [78] = {
  fname = "SetProject_LoopGran",
  label = "US_SetProject_LoopGran",
  run = "in/out",
  desc = "Sets the Loop-Gran-state in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "loopgran_state1",
    name = "LOOPGRAN_STATE1",
   },
   [3] = {
    type = "NUMBER",
    desc = "loopgran_state2",
    name = "LOOPGRAN_STATE2",
   },
   [4] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [79] = {
  fname = "SetProject_RecPath",
  label = "US_SetProject_RecPath",
  run = "in/out",
  desc = "Sets the primary and secondary recording-paths in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "primary recording path",
    name = "PRIM_RECPATH",
   },
   [3] = {
    type = "STRING",
    desc = "secondary recording path",
    name = "SEC_RECPATH",
   },
   [4] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [80] = {
  fname = "SetProject_RecordCFG",
  label = "US_SetProject_RecordCFG",
  run = "in/out",
  desc = "Sets the recording-configuration as encoded string in an RPP-Projectfile or a ProjectStateChunk, as set in ProjectSettings->Media->Recording.\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "RECORDING_CFG_STRING",
    desc = "the record-configuration as encoded string",
    name = "RETVAL",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [81] = {
  fname = "SetProject_RenderCFG",
  label = "US_SetProject_RenderCFG",
  run = "in/out",
  desc = "Sets the primary and secondary render-configuration as encoded string in an RPP-Projectfile or a ProjectStateChunk, as set in Render-Settings\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "RENDERCFG_STRING",
    desc = "the render-configuration as encoded string",
    name = "RETVAL",
   },
   [3] = {
    type = "RENDERCFG_STRING2",
    desc = "the secondary render-configuration as encoded string; use \"\" or nil to not set it",
    name = "RETVAL",
   },
   [4] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [82] = {
  fname = "SetProject_ApplyFXCFG",
  label = "US_SetProject_ApplyFXCFG",
  run = "in/out",
  desc = "Sets the audioformat-configuration, for fx-appliance-operation, as an encoded string in an RPP-Projectfile or a ProjectStateChunk, as set in ProjectSettings->Media->Format for Apply FX, Glue, Freeze, etc\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the file-format-configuration for fx-appliance as encoded string",
    name = "APPLYFX_CFG_STRING",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [83] = {
  fname = "SetProject_RenderFilename",
  label = "US_SetProject_RenderFilename",
  run = "in/out",
  desc = "Sets the render-filename in an rpp-projectfile or a ProjectStateChunk. Set to \"\", if you want to set a render-pattern with <a href=\"#SetProject_RenderPattern\">SetProject_RenderPattern</a>.\
\
The rendername is influenced by the settings in the RENDER_PATTERN-entry in the RPP-file, see <a href=\"#SetProject_RenderPattern\">SetProject_RenderPattern</a> to influence or remove the RENDER_PATTERN-entry(Removing RENDER_PATTERN may help when Reaper rendering it to the name given in parameter render_filename.\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk insteadO",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the filename for rendering, check also <a href=\"#GetProject_RenderPattern\">GetProject_RenderPattern</a>",
    name = "RENDER_FILENAME",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [84] = {
  fname = "SetProject_RenderFreqNChans",
  label = "US_SetProject_RenderFreqNChans",
  run = "in/out",
  desc = "Returns an unknown number, the render-frequency and rendernumber of channels from an RPP-Projectfile or a ProjectStateChunk. \
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "unknown number",
    name = "UNKNOWN",
   },
   [3] = {
    type = "INTEGER",
    desc = "Number_Channels 0-seems default-project-settings(?), 1-Mono, 2-Stereo, ... up to 64 channels",
    name = "RENDERNUM_CHANS",
   },
   [4] = {
    type = "INTEGER",
    desc = "RenderFrequency -2147483647 to 2147483647, except 0, which seems to be default-project-settings-frequency",
    name = "RENDER_FREQUENCY",
   },
   [5] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [85] = {
  fname = "SetProject_RenderSpeed",
  label = "US_SetProject_RenderSpeed",
  run = "in/out",
  desc = "Sets a rendering-speed in an RPP-Projectfile or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "render_speed \
            0-Fullspeed Offline\
            1-1x Offline\
            2-Online Render\
            3-Offline Render (Idle)\
           4-1x Offline Render (Idle)",
    name = "RENDER_SPEED",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [86] = {
  fname = "SetProject_RenderRange",
  label = "US_SetProject_RenderRange",
  run = "in/out",
  desc = "Sets the render-range, render-timestart, render-timeend, render-tail and render-taillength in an RPP-Projectfile or a ProjectStateChunk. \
To get RENDER_STEMS, refer <a href=\"#GetProject_RenderStems\">GetProject_RenderStems</a>\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the bounds of the project to be rendered\
            0, Custom Time Range\
            1, Entire Project\
            2, Time Selection, \
            3, Project Regions\
            4, Selected Media Items(in combination with RENDER_STEMS 32); to get RENDER_STEMS, refer GetProject_RenderStems\
            5, Selected regions",
    name = "BOUNDS",
   },
   [3] = {
    type = "NUMBER",
    desc = "TimeStart in milliseconds -2147483647 to 2147483647",
    name = "TIME_START",
   },
   [4] = {
    type = "NUMBER",
    desc = "TimeEnd in milliseconds 2147483647 to 2147483647",
    name = "TIME_END",
   },
   [5] = {
    type = "INTEGER",
    desc = "Tail on/off-flags for individual bounds\
            0, tail off for all bounds\
            1, custom time range -> tail on\
            2, entire project -> tail on\
            4, time selection -> tail on\
            8, project regions -> tail on",
    name = "TAIL",
   },
   [6] = {
    type = "INTEGER",
    desc = "TailLength in milliseconds, valuerange 0 - 2147483647",
    name = "TAIL_LENGTH",
   },
   [7] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [87] = {
  fname = "SetProject_RenderResample",
  label = "US_SetProject_RenderResample",
  run = "in/out",
  desc = "Resamplemode for a)Rendering and b)Playback as well as c)if both are combined from an RPP-Projectfile or a ProjectStateChunk. \
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "Resample_Mode \
            0-medium (64pt Sinc), \
            1-Low (Linear Interpolation), \
            2-Lowest (Point Sampling), \
            3-Good(192pt Sinc), \
            4-Better(384pt Sinc), \
            5-Fast (IIR + Linear Interpolation), \
            6-Fast (IIRx2 + Linear Interpolation), \
            7-Fast (16pt sinc) - Default, \
            8-HQ (512pt Sinc), \
            9-Extreme HQ (768pt HQ Sinc)",
    name = "RESAMPLE_MODE",
   },
   [3] = {
    type = "INTEGER",
    desc = "Playback Resample Mode (as set in the Project-Settings)\
          0-medium (64pt Sinc), \
          1-Low (Linear Interpolation), \
          2-Lowest (Point Sampling), \
          3-Good(192pt Sinc), \
          4-Better(384pt Sinc), \
          5-Fast (IIR + Linear Interpolation), \
          6-Fast (IIRx2 + Linear Interpolation), \
          7-Fast (16pt sinc) - Default, \
          8-HQ (512pt Sinc), \
          9-Extreme HQ (768pt HQ Sinc)    ",
    name = "PLAYBACK_RESAMPLE_MODE",
   },
   [4] = {
    type = "INTEGER",
    desc = "Use project sample rate for mixing and FX/synth processing-checkbox; 1, checked; 0, unchecked",
    name = "PROJECT_SMPLRATE4MIX_AND_FX",
   },
   [5] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [88] = {
  fname = "SetProject_AddMediaToProjectAfterRender",
  label = "US_SetProject_AddMediaToProjectAfterRender",
  run = "in/out",
  desc = "Sets, if rendered media shall be added to the project afterwards as well as if likely silent files shall be rendered-state, from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the state of the \"Add rendered items to new tracks in project\"- checkbox and \"Do not render files that are likely silent\"-checkbox, as set in the Render to file-dialog.\
\
It's the entry RENDER_ADDTOPROJ\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the state of the \"Add rendered items to new tracks in project\"- checkbox and \"Do not render files that are likely silent\"-checkbox \
&1, rendered media shall be added to the project afterwards; 0, don't add\
&2, don't render likely silent files; 0, render anyway",
    name = "STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [89] = {
  fname = "SetProject_RenderStems",
  label = "US_SetProject_RenderStems",
  run = "in/out",
  desc = "Sets the render-stems-state from an RPP-Projectfile or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the state of Render Stems\
0, Source Master Mix, \
1, Source Master mix + stems, \
3, Source Stems, selected tracks, \
&4, Multichannel Tracks to Multichannel Files, \
8, Source Region Render Matrix, \
&16, Tracks with only Mono-Media to Mono Files,  \
32, Selected Media Items(in combination with RENDER_RANGE->Bounds->4, refer to <a href=\"#GetProject_RenderRange\">GetProject_RenderRange</a> to get RENDER_RANGE)\
64, Selected media items via master\
128, Selected tracks via master\
&256, Embed stretch markers/transient guides-checkbox \
&512, Embed metadata-checkbox\
&1024, Embed Take markers\
&2048, 2nd pass rendering\
&8192, Render stems pre-fader\
&16384, Only render channels that are sent to parent\
4096, Razor edit areas\
4224, Razor edit areas via master",
    name = "RENDER_STEMS",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [90] = {
  fname = "SetProject_RenderDitherState",
  label = "US_SetProject_RenderDitherState",
  run = "in/out",
  desc = "Sets the render-dither-state from an RPP-Projectfile or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the state of render dithering\
&1,   Dither Master mix\
&2,   Noise shaping Master mix\
&4,   Dither Stems\
&8,   Noise shaping Stems",
    name = "RENDERDITHER_STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [91] = {
  fname = "SetProject_TimeBase",
  label = "US_SetProject_TimeBase",
  run = "in/out",
  desc = "Sets the timebase, as set in the project-settings, in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the timebase for items/envelopes/markers as set in the project settings\
            0 - Time, \
            1 - Beats (position, length, rate), \
            2 - Beats (position only)",
    name = "TIMEBASE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [92] = {
  fname = "SetProject_TempoTimeSignature",
  label = "US_SetProject_TempoTimeSignature",
  run = "in/out",
  desc = "Sets the timebase, as set in the project-settings, in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the timebase for tempo/time-signature as set in the project settings\
            0 - Time \
            1 - Beats",
    name = "TEMPOTIMESIGNATURE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [93] = {
  fname = "SetProject_ItemMixBehavior",
  label = "US_SetProject_ItemMixBehavior",
  run = "in/out",
  desc = "Sets the item mix behavior, as set in the project-settings, from an rpp-project-file.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path of the rpp-project-file",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "item mix behavior\
             0 - Enclosed items replace enclosing items \
             1 - Items always mix\
             2 - Items always replace earlier items",
    name = "ITEM_MIX_BEHAV_STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [94] = {
  fname = "SetProject_DefPitchMode",
  label = "US_SetProject_DefPitchMode",
  run = "in/out",
  desc = "Sets the default-pitch-mode, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.\
\
def_pitch_mode_state can be \
\
    SoundTouch:\
        0 - Default settings\
        1 - High Quality\
        2 - Fast\
\
    Simple windowed (fast):\
        131072 - 50ms window, 25ms fade\
        131073 - 50ms window, 16ms fade\
        131074 - 50ms window, 10ms fade\
        131075 - 50ms window, 7ms fade\
        131076 - 75ms window, 37ms fade\
        131077 - 75ms window, 25ms fade\
        131078 - 75ms window, 15ms fade\
        131079 - 75ms window, 10ms fade\
        131080 - 100ms window, 50ms fade\
        131081 - 100ms window, 33ms fade\
        131082 - 100ms window, 20ms fade\
        131083 - 100ms window, 14ms fade\
        131084 - 150ms window, 75ms fade\
        131085 - 150ms window, 50ms fade\
        131086 - 150ms window, 30ms fade\
        131087 - 150ms window, 21ms fade\
        131088 - 225ms window, 112ms fade\
        131089 - 225ms window, 75ms fade\
        131090 - 225ms window, 45ms fade\
        131091 - 225ms window, 32ms fade\
        131092 - 300ms window, 150ms fade\
        131093 - 300ms window, 100ms fade\
        131094 - 300ms window, 60ms fade\
        131095 - 300ms window, 42ms fade\
        131096 - 40ms window, 20ms fade\
        131097 - 40ms window, 13ms fade\
        131098 - 40ms window, 8ms fade\
        131099 - 40ms window, 5ms fade\
        131100 - 30ms window, 15ms fade\
        131101 - 30ms window, 10ms fade\
        131102 - 30ms window, 6ms fade\
        131103 - 30ms window, 4ms fade\
        131104 - 20ms window, 10ms fade\
        131105 - 20ms window, 6ms fade\
        131106 - 20ms window, 4ms fade\
        131107 - 20ms window, 2ms fade\
        131108 - 10ms window, 5ms fade\
        131109 - 10ms window, 3ms fade\
        131110 - 10ms window, 2ms fade\
        131111 - 10ms window, 1ms fade\
        131112 - 5ms window, 2ms fade\
        131113 - 5ms window, 1ms fade\
        131114 - 5ms window, 1ms fade\
        131115 - 5ms window, 1ms fade\
        131116 - 3ms window, 1ms fade\
        131117 - 3ms window, 1ms fade\
        131118 - 3ms window, 1ms fade\
        131119 - 3ms window, 1ms fade\
\
    Ã©lastique 2.2.8 Pro:\
        393216 - Normal\
        393217 - Preserve Formants (Lowest Pitches)\
        393218 - Preserve Formants (Lower Pitches)\
        393219 - Preserve Formants (Low Pitches)\
        393220 - Preserve Formants (Most Pitches)\
        393221 - Preserve Formants (High Pitches)\
        393222 - Preserve Formants (Higher Pitches)\
        393223 - Preserve Formants (Highest Pitches)\
        393224 - Mid/Side\
        393225 - Mid/Side, Preserve Formants (Lowest Pitches)\
        393226 - Mid/Side, Preserve Formants (Lower Pitches)\
        393227 - Mid/Side, Preserve Formants (Low Pitches)\
        393228 - Mid/Side, Preserve Formants (Most Pitches)\
        393229 - Mid/Side, Preserve Formants (High Pitches)\
        393230 - Mid/Side, Preserve Formants (Higher Pitches)\
        393231 - Mid/Side, Preserve Formants (Highest Pitches)\
        393232 - Synchronized: Normal\
        393233 - Synchronized: Preserve Formants (Lowest Pitches)\
        393234 - Synchronized: Preserve Formants (Lower Pitches)\
        393235 - Synchronized: Preserve Formants (Low Pitches)\
        393236 - Synchronized: Preserve Formants (Most Pitches)\
        393237 - Synchronized: Preserve Formants (High Pitches)\
        393238 - Synchronized: Preserve Formants (Higher Pitches)\
        393239 - Synchronized: Preserve Formants (Highest Pitches)\
        393240 - Synchronized:  Mid/Side\
        393241 - Synchronized:  Mid/Side, Preserve Formants (Lowest Pitches)\
        393242 - Synchronized:  Mid/Side, Preserve Formants (Lower Pitches)\
        393243 - Synchronized:  Mid/Side, Preserve Formants (Low Pitches)\
        393244 - Synchronized:  Mid/Side, Preserve Formants (Most Pitches)\
        393245 - Synchronized:  Mid/Side, Preserve Formants (High Pitches)\
        393246 - Synchronized:  Mid/Side, Preserve Formants (Higher Pitches)\
        393247 - Synchronized:  Mid/Side, Preserve Formants (Highest Pitches)\
\
    Ã©lastique 2.2.8 Efficient:\
        458752 - Normal\
        458753 - Mid/Side\
        458754 - Synchronized: Normal\
        458755 - Synchronized: Mid/Side\
\
    Ã©lastique 2.2.8 Soloist:\
        524288 - Monophonic\
        524289 - Monophonic [Mid/Side]\
        524290 - Speech\
        524291 - Speech [Mid/Side]\
\
    Ã©lastique 3.3.0 Pro:\
        589824 - Normal\
        589825 - Preserve Formants (Lowest Pitches)\
        589826 - Preserve Formants (Lower Pitches)\
        589827 - Preserve Formants (Low Pitches)\
        589828 - Preserve Formants (Most Pitches)\
        589829 - Preserve Formants (High Pitches)\
        589830 - Preserve Formants (Higher Pitches)\
        589831 - Preserve Formants (Highest Pitches)\
        589832 - Mid/Side\
        589833 - Mid/Side, Preserve Formants (Lowest Pitches)\
        589834 - Mid/Side, Preserve Formants (Lower Pitches)\
        589835 - Mid/Side, Preserve Formants (Low Pitches)\
        589836 - Mid/Side, Preserve Formants (Most Pitches)\
        589837 - Mid/Side, Preserve Formants (High Pitches)\
        589838 - Mid/Side, Preserve Formants (Higher Pitches)\
        589839 - Mid/Side, Preserve Formants (Highest Pitches)\
        589840 - Synchronized: Normal\
        589841 - Synchronized: Preserve Formants (Lowest Pitches)\
        589842 - Synchronized: Preserve Formants (Lower Pitches)\
        589843 - Synchronized: Preserve Formants (Low Pitches)\
        589844 - Synchronized: Preserve Formants (Most Pitches)\
        589845 - Synchronized: Preserve Formants (High Pitches)\
        589846 - Synchronized: Preserve Formants (Higher Pitches)\
        589847 - Synchronized: Preserve Formants (Highest Pitches)\
        589848 - Synchronized:  Mid/Side\
        589849 - Synchronized:  Mid/Side, Preserve Formants (Lowest Pitches)\
        589850 - Synchronized:  Mid/Side, Preserve Formants (Lower Pitches)\
        589851 - Synchronized:  Mid/Side, Preserve Formants (Low Pitches)\
        589852 - Synchronized:  Mid/Side, Preserve Formants (Most Pitches)\
        589853 - Synchronized:  Mid/Side, Preserve Formants (High Pitches)\
        589854 - Synchronized:  Mid/Side, Preserve Formants (Higher Pitches)\
        589855 - Synchronized:  Mid/Side, Preserve Formants (Highest Pitches)\
\
    Ã©lastique 3.3.0 Efficient:\
        655360 - Normal\
        655361 - Mid/Side\
        655362 - Synchronized: Normal\
        655363 - Synchronized: Mid/Side\
\
    Ã©lastique 3.3.0 Soloist:\
        720896 - Monophonic\
        720897 - Monophonic [Mid/Side]\
        720898 - Speech\
        720899 - Speech [Mid/Side]\
\
\
    Rubber Band Library - Default\
        851968 - nothing\
\
    Rubber Band Library - Preserve Formants\
        851969 - Preserve Formants\
\
    Rubber Band Library - Mid/Side\
        851970 - Mid/Side\
\
    Rubber Band Library - Preserve Formants, Mid/Side\
        851971 - Preserve Formants, Mid/Side\
\
    Rubber Band Library - Independent Phase\
        851972 - Independent Phase\
\
    Rubber Band Library - Preserve Formants, Independent Phase\
        851973 - Preserve Formants, Independent Phase\
\
    Rubber Band Library - Mid/Side, Independent Phase\
        851974 - Mid/Side, Independent Phase\
\
    Rubber Band Library - Preserve Formants, Mid/Side, Independent Phase\
        851975 - Preserve Formants, Mid/Side, Independent Phase\
\
    Rubber Band Library - Time Domain Smoothing\
        851976 - Time Domain Smoothing\
\
    Rubber Band Library - Preserve Formants, Time Domain Smoothing\
        851977 - Preserve Formants, Time Domain Smoothing\
\
    Rubber Band Library - Mid/Side, Time Domain Smoothing\
        851978 - Mid/Side, Time Domain Smoothing\
\
    Rubber Band Library - Preserve Formants, Mid/Side, Time Domain Smoothing\
        851979 - Preserve Formants, Mid/Side, Time Domain Smoothing\
\
    Rubber Band Library - Independent Phase, Time Domain Smoothing\
        851980 - Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Preserve Formants, Independent Phase, Time Domain Smoothing\
        851981 - Preserve Formants, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Mid/Side, Independent Phase, Time Domain Smoothing\
        851982 - Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
        851983 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed\
        851984 - nothing\
        851985 - Preserve Formants\
        851986 - Mid/Side\
        851987 - Preserve Formants, Mid/Side\
        851988 - Independent Phase\
        851989 - Preserve Formants, Independent Phase\
        851990 - Mid/Side, Independent Phase\
        851991 - Preserve Formants, Mid/Side, Independent Phase\
        851992 - Time Domain Smoothing\
        851993 - Preserve Formants, Time Domain Smoothing\
        851994 - Mid/Side, Time Domain Smoothing\
        851995 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        851996 - Independent Phase, Time Domain Smoothing\
        851997 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        851998 - Mid/Side, Independent Phase, Time Domain Smoothing\
        851999 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth\
        852000 - nothing\
        852001 - Preserve Formants\
        852002 - Mid/Side\
        852003 - Preserve Formants, Mid/Side\
        852004 - Independent Phase\
        852005 - Preserve Formants, Independent Phase\
        852006 - Mid/Side, Independent Phase\
        852007 - Preserve Formants, Mid/Side, Independent Phase\
        852008 - Time Domain Smoothing\
        852009 - Preserve Formants, Time Domain Smoothing\
        852010 - Mid/Side, Time Domain Smoothing\
        852011 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852012 - Independent Phase, Time Domain Smoothing\
        852013 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852014 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852015 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive\
        852016 - nothing\
        852017 - Preserve Formants\
        852018 - Mid/Side\
        852019 - Preserve Formants, Mid/Side\
        852020 - Independent Phase\
        852021 - Preserve Formants, Independent Phase\
        852022 - Mid/Side, Independent Phase\
        852023 - Preserve Formants, Mid/Side, Independent Phase\
        852024 - Time Domain Smoothing\
        852025 - Preserve Formants, Time Domain Smoothing\
        852026 - Mid/Side, Time Domain Smoothing\
        852027 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852028 - Independent Phase, Time Domain Smoothing\
        852029 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852030 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852031 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive\
        852032 - nothing\
        852033 - Preserve Formants\
        852034 - Mid/Side\
        852035 - Preserve Formants, Mid/Side\
        852036 - Independent Phase\
        852037 - Preserve Formants, Independent Phase\
        852038 - Mid/Side, Independent Phase\
        852039 - Preserve Formants, Mid/Side, Independent Phase\
        852040 - Time Domain Smoothing\
        852041 - Preserve Formants, Time Domain Smoothing\
        852042 - Mid/Side, Time Domain Smoothing\
        852043 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852044 - Independent Phase, Time Domain Smoothing\
        852045 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852046 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852047 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive\
        852048 - nothing\
        852049 - Preserve Formants\
        852050 - Mid/Side\
        852051 - Preserve Formants, Mid/Side\
        852052 - Independent Phase\
        852053 - Preserve Formants, Independent Phase\
        852054 - Mid/Side, Independent Phase\
        852055 - Preserve Formants, Mid/Side, Independent Phase\
        852056 - Time Domain Smoothing\
        852057 - Preserve Formants, Time Domain Smoothing\
        852058 - Mid/Side, Time Domain Smoothing\
        852059 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852060 - Independent Phase, Time Domain Smoothing\
        852061 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852062 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852063 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft\
        852064 - nothing\
        852065 - Preserve Formants\
        852066 - Mid/Side\
        852067 - Preserve Formants, Mid/Side\
        852068 - Independent Phase\
        852069 - Preserve Formants, Independent Phase\
        852070 - Mid/Side, Independent Phase\
        852071 - Preserve Formants, Mid/Side, Independent Phase\
        852072 - Time Domain Smoothing\
        852073 - Preserve Formants, Time Domain Smoothing\
        852074 - Mid/Side, Time Domain Smoothing\
        852075 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852076 - Independent Phase, Time Domain Smoothing\
        852077 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852078 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852079 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft\
        852080 - nothing\
        852081 - Preserve Formants\
        852082 - Mid/Side\
        852083 - Preserve Formants, Mid/Side\
        852084 - Independent Phase\
        852085 - Preserve Formants, Independent Phase\
        852086 - Mid/Side, Independent Phase\
        852087 - Preserve Formants, Mid/Side, Independent Phase\
        852088 - Time Domain Smoothing\
        852089 - Preserve Formants, Time Domain Smoothing\
        852090 - Mid/Side, Time Domain Smoothing\
        852091 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852092 - Independent Phase, Time Domain Smoothing\
        852093 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852094 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852095 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft\
        852096 - nothing\
        852097 - Preserve Formants\
        852098 - Mid/Side\
        852099 - Preserve Formants, Mid/Side\
        852100 - Independent Phase\
        852101 - Preserve Formants, Independent Phase\
        852102 - Mid/Side, Independent Phase\
        852103 - Preserve Formants, Mid/Side, Independent Phase\
        852104 - Time Domain Smoothing\
        852105 - Preserve Formants, Time Domain Smoothing\
        852106 - Mid/Side, Time Domain Smoothing\
        852107 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852108 - Independent Phase, Time Domain Smoothing\
        852109 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852110 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852111 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: HighQ\
        852112 - nothing\
        852113 - Preserve Formants\
        852114 - Mid/Side\
        852115 - Preserve Formants, Mid/Side\
        852116 - Independent Phase\
        852117 - Preserve Formants, Independent Phase\
        852118 - Mid/Side, Independent Phase\
        852119 - Preserve Formants, Mid/Side, Independent Phase\
        852120 - Time Domain Smoothing\
        852121 - Preserve Formants, Time Domain Smoothing\
        852122 - Mid/Side, Time Domain Smoothing\
        852123 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852124 - Independent Phase, Time Domain Smoothing\
        852125 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852126 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852127 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: HighQ\
        852128 - nothing\
        852129 - Preserve Formants\
        852130 - Mid/Side\
        852131 - Preserve Formants, Mid/Side\
        852132 - Independent Phase\
        852133 - Preserve Formants, Independent Phase\
        852134 - Mid/Side, Independent Phase\
        852135 - Preserve Formants, Mid/Side, Independent Phase\
        852136 - Time Domain Smoothing\
        852137 - Preserve Formants, Time Domain Smoothing\
        852138 - Mid/Side, Time Domain Smoothing\
        852139 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852140 - Independent Phase, Time Domain Smoothing\
        852141 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852142 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852143 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: HighQ\
        852144 - nothing\
        852145 - Preserve Formants\
        852146 - Mid/Side\
        852147 - Preserve Formants, Mid/Side\
        852148 - Independent Phase\
        852149 - Preserve Formants, Independent Phase\
        852150 - Mid/Side, Independent Phase\
        852151 - Preserve Formants, Mid/Side, Independent Phase\
        852152 - Time Domain Smoothing\
        852153 - Preserve Formants, Time Domain Smoothing\
        852154 - Mid/Side, Time Domain Smoothing\
        852155 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852156 - Independent Phase, Time Domain Smoothing\
        852157 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852158 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852159 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: HighQ\
        852160 - nothing\
        852161 - Preserve Formants\
        852162 - Mid/Side\
        852163 - Preserve Formants, Mid/Side\
        852164 - Independent Phase\
        852165 - Preserve Formants, Independent Phase\
        852166 - Mid/Side, Independent Phase\
        852167 - Preserve Formants, Mid/Side, Independent Phase\
        852168 - Time Domain Smoothing\
        852169 - Preserve Formants, Time Domain Smoothing\
        852170 - Mid/Side, Time Domain Smoothing\
        852171 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852172 - Independent Phase, Time Domain Smoothing\
        852173 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852174 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852175 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: HighQ\
        852176 - nothing\
        852177 - Preserve Formants\
        852178 - Mid/Side\
        852179 - Preserve Formants, Mid/Side\
        852180 - Independent Phase\
        852181 - Preserve Formants, Independent Phase\
        852182 - Mid/Side, Independent Phase\
        852183 - Preserve Formants, Mid/Side, Independent Phase\
        852184 - Time Domain Smoothing\
        852185 - Preserve Formants, Time Domain Smoothing\
        852186 - Mid/Side, Time Domain Smoothing\
        852187 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852188 - Independent Phase, Time Domain Smoothing\
        852189 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852190 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852191 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: HighQ\
        852192 - nothing\
        852193 - Preserve Formants\
        852194 - Mid/Side\
        852195 - Preserve Formants, Mid/Side\
        852196 - Independent Phase\
        852197 - Preserve Formants, Independent Phase\
        852198 - Mid/Side, Independent Phase\
        852199 - Preserve Formants, Mid/Side, Independent Phase\
        852200 - Time Domain Smoothing\
        852201 - Preserve Formants, Time Domain Smoothing\
        852202 - Mid/Side, Time Domain Smoothing\
        852203 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852204 - Independent Phase, Time Domain Smoothing\
        852205 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852206 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852207 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: HighQ\
        852208 - nothing\
        852209 - Preserve Formants\
        852210 - Mid/Side\
        852211 - Preserve Formants, Mid/Side\
        852212 - Independent Phase\
        852213 - Preserve Formants, Independent Phase\
        852214 - Mid/Side, Independent Phase\
        852215 - Preserve Formants, Mid/Side, Independent Phase\
        852216 - Time Domain Smoothing\
        852217 - Preserve Formants, Time Domain Smoothing\
        852218 - Mid/Side, Time Domain Smoothing\
        852219 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852220 - Independent Phase, Time Domain Smoothing\
        852221 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852222 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852223 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: HighQ\
        852224 - nothing\
        852225 - Preserve Formants\
        852226 - Mid/Side\
        852227 - Preserve Formants, Mid/Side\
        852228 - Independent Phase\
        852229 - Preserve Formants, Independent Phase\
        852230 - Mid/Side, Independent Phase\
        852231 - Preserve Formants, Mid/Side, Independent Phase\
        852232 - Time Domain Smoothing\
        852233 - Preserve Formants, Time Domain Smoothing\
        852234 - Mid/Side, Time Domain Smoothing\
        852235 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852236 - Independent Phase, Time Domain Smoothing\
        852237 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852238 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852239 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: HighQ\
        852240 - nothing\
        852241 - Preserve Formants\
        852242 - Mid/Side\
        852243 - Preserve Formants, Mid/Side\
        852244 - Independent Phase\
        852245 - Preserve Formants, Independent Phase\
        852246 - Mid/Side, Independent Phase\
        852247 - Preserve Formants, Mid/Side, Independent Phase\
        852248 - Time Domain Smoothing\
        852249 - Preserve Formants, Time Domain Smoothing\
        852250 - Mid/Side, Time Domain Smoothing\
        852251 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852252 - Independent Phase, Time Domain Smoothing\
        852253 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852254 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852255 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: Consistent\
        852256 - nothing\
        852257 - Preserve Formants\
        852258 - Mid/Side\
        852259 - Preserve Formants, Mid/Side\
        852260 - Independent Phase\
        852261 - Preserve Formants, Independent Phase\
        852262 - Mid/Side, Independent Phase\
        852263 - Preserve Formants, Mid/Side, Independent Phase\
        852264 - Time Domain Smoothing\
        852265 - Preserve Formants, Time Domain Smoothing\
        852266 - Mid/Side, Time Domain Smoothing\
        852267 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852268 - Independent Phase, Time Domain Smoothing\
        852269 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852270 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852271 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: Consistent\
        852272 - nothing\
        852273 - Preserve Formants\
        852274 - Mid/Side\
        852275 - Preserve Formants, Mid/Side\
        852276 - Independent Phase\
        852277 - Preserve Formants, Independent Phase\
        852278 - Mid/Side, Independent Phase\
        852279 - Preserve Formants, Mid/Side, Independent Phase\
        852280 - Time Domain Smoothing\
        852281 - Preserve Formants, Time Domain Smoothing\
        852282 - Mid/Side, Time Domain Smoothing\
        852283 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852284 - Independent Phase, Time Domain Smoothing\
        852285 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852286 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852287 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: Consistent\
        852288 - nothing\
        852289 - Preserve Formants\
        852290 - Mid/Side\
        852291 - Preserve Formants, Mid/Side\
        852292 - Independent Phase\
        852293 - Preserve Formants, Independent Phase\
        852294 - Mid/Side, Independent Phase\
        852295 - Preserve Formants, Mid/Side, Independent Phase\
        852296 - Time Domain Smoothing\
        852297 - Preserve Formants, Time Domain Smoothing\
        852298 - Mid/Side, Time Domain Smoothing\
        852299 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852300 - Independent Phase, Time Domain Smoothing\
        852301 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852302 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852303 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: Consistent\
        852304 - nothing\
        852305 - Preserve Formants\
        852306 - Mid/Side\
        852307 - Preserve Formants, Mid/Side\
        852308 - Independent Phase\
        852309 - Preserve Formants, Independent Phase\
        852310 - Mid/Side, Independent Phase\
        852311 - Preserve Formants, Mid/Side, Independent Phase\
        852312 - Time Domain Smoothing\
        852313 - Preserve Formants, Time Domain Smoothing\
        852314 - Mid/Side, Time Domain Smoothing\
        852315 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852316 - Independent Phase, Time Domain Smoothing\
        852317 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852318 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852319 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: Consistent\
        852320 - nothing\
        852321 - Preserve Formants\
        852322 - Mid/Side\
        852323 - Preserve Formants, Mid/Side\
        852324 - Independent Phase\
        852325 - Preserve Formants, Independent Phase\
        852326 - Mid/Side, Independent Phase\
        852327 - Preserve Formants, Mid/Side, Independent Phase\
        852328 - Time Domain Smoothing\
        852329 - Preserve Formants, Time Domain Smoothing\
        852330 - Mid/Side, Time Domain Smoothing\
        852331 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852332 - Independent Phase, Time Domain Smoothing\
        852333 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852334 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852335 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: Consistent\
        852336 - nothing\
        852337 - Preserve Formants\
        852338 - Mid/Side\
        852339 - Preserve Formants, Mid/Side\
        852340 - Independent Phase\
        852341 - Preserve Formants, Independent Phase\
        852342 - Mid/Side, Independent Phase\
        852343 - Preserve Formants, Mid/Side, Independent Phase\
        852344 - Time Domain Smoothing\
        852345 - Preserve Formants, Time Domain Smoothing\
        852346 - Mid/Side, Time Domain Smoothing\
        852347 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852348 - Independent Phase, Time Domain Smoothing\
        852349 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852350 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852351 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: Consistent\
        852352 - nothing\
        852353 - Preserve Formants\
        852354 - Mid/Side\
        852355 - Preserve Formants, Mid/Side\
        852356 - Independent Phase\
        852357 - Preserve Formants, Independent Phase\
        852358 - Mid/Side, Independent Phase\
        852359 - Preserve Formants, Mid/Side, Independent Phase\
        852360 - Time Domain Smoothing\
        852361 - Preserve Formants, Time Domain Smoothing\
        852362 - Mid/Side, Time Domain Smoothing\
        852363 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852364 - Independent Phase, Time Domain Smoothing\
        852365 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852366 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852367 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: Consistent\
        852368 - nothing\
        852369 - Preserve Formants\
        852370 - Mid/Side\
        852371 - Preserve Formants, Mid/Side\
        852372 - Independent Phase\
        852373 - Preserve Formants, Independent Phase\
        852374 - Mid/Side, Independent Phase\
        852375 - Preserve Formants, Mid/Side, Independent Phase\
        852376 - Time Domain Smoothing\
        852377 - Preserve Formants, Time Domain Smoothing\
        852378 - Mid/Side, Time Domain Smoothing\
        852379 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852380 - Independent Phase, Time Domain Smoothing\
        852381 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852382 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852383 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: Consistent\
        852384 - nothing\
        852385 - Preserve Formants\
        852386 - Mid/Side\
        852387 - Preserve Formants, Mid/Side\
        852388 - Independent Phase\
        852389 - Preserve Formants, Independent Phase\
        852390 - Mid/Side, Independent Phase\
        852391 - Preserve Formants, Mid/Side, Independent Phase\
        852392 - Time Domain Smoothing\
        852393 - Preserve Formants, Time Domain Smoothing\
        852394 - Mid/Side, Time Domain Smoothing\
        852395 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852396 - Independent Phase, Time Domain Smoothing\
        852397 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852398 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852399 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Window: Short\
        852400 - nothing\
        852401 - Preserve Formants\
        852402 - Mid/Side\
        852403 - Preserve Formants, Mid/Side\
        852404 - Independent Phase\
        852405 - Preserve Formants, Independent Phase\
        852406 - Mid/Side, Independent Phase\
        852407 - Preserve Formants, Mid/Side, Independent Phase\
        852408 - Time Domain Smoothing\
        852409 - Preserve Formants, Time Domain Smoothing\
        852410 - Mid/Side, Time Domain Smoothing\
        852411 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852412 - Independent Phase, Time Domain Smoothing\
        852413 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852414 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852415 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Window: Short\
        852416 - nothing\
        852417 - Preserve Formants\
        852418 - Mid/Side\
        852419 - Preserve Formants, Mid/Side\
        852420 - Independent Phase\
        852421 - Preserve Formants, Independent Phase\
        852422 - Mid/Side, Independent Phase\
        852423 - Preserve Formants, Mid/Side, Independent Phase\
        852424 - Time Domain Smoothing\
        852425 - Preserve Formants, Time Domain Smoothing\
        852426 - Mid/Side, Time Domain Smoothing\
        852427 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852428 - Independent Phase, Time Domain Smoothing\
        852429 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852430 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852431 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Window: Short\
        852432 - nothing\
        852433 - Preserve Formants\
        852434 - Mid/Side\
        852435 - Preserve Formants, Mid/Side\
        852436 - Independent Phase\
        852437 - Preserve Formants, Independent Phase\
        852438 - Mid/Side, Independent Phase\
        852439 - Preserve Formants, Mid/Side, Independent Phase\
        852440 - Time Domain Smoothing\
        852441 - Preserve Formants, Time Domain Smoothing\
        852442 - Mid/Side, Time Domain Smoothing\
        852443 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852444 - Independent Phase, Time Domain Smoothing\
        852445 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852446 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852447 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Window: Short\
        852448 - nothing\
        852449 - Preserve Formants\
        852450 - Mid/Side\
        852451 - Preserve Formants, Mid/Side\
        852452 - Independent Phase\
        852453 - Preserve Formants, Independent Phase\
        852454 - Mid/Side, Independent Phase\
        852455 - Preserve Formants, Mid/Side, Independent Phase\
        852456 - Time Domain Smoothing\
        852457 - Preserve Formants, Time Domain Smoothing\
        852458 - Mid/Side, Time Domain Smoothing\
        852459 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852460 - Independent Phase, Time Domain Smoothing\
        852461 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852462 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852463 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Window: Short\
        852464 - nothing\
        852465 - Preserve Formants\
        852466 - Mid/Side\
        852467 - Preserve Formants, Mid/Side\
        852468 - Independent Phase\
        852469 - Preserve Formants, Independent Phase\
        852470 - Mid/Side, Independent Phase\
        852471 - Preserve Formants, Mid/Side, Independent Phase\
        852472 - Time Domain Smoothing\
        852473 - Preserve Formants, Time Domain Smoothing\
        852474 - Mid/Side, Time Domain Smoothing\
        852475 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852476 - Independent Phase, Time Domain Smoothing\
        852477 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852478 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852479 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Window: Short\
        852480 - nothing\
        852481 - Preserve Formants\
        852482 - Mid/Side\
        852483 - Preserve Formants, Mid/Side\
        852484 - Independent Phase\
        852485 - Preserve Formants, Independent Phase\
        852486 - Mid/Side, Independent Phase\
        852487 - Preserve Formants, Mid/Side, Independent Phase\
        852488 - Time Domain Smoothing\
        852489 - Preserve Formants, Time Domain Smoothing\
        852490 - Mid/Side, Time Domain Smoothing\
        852491 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852492 - Independent Phase, Time Domain Smoothing\
        852493 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852494 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852495 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Window: Short\
        852496 - nothing\
        852497 - Preserve Formants\
        852498 - Mid/Side\
        852499 - Preserve Formants, Mid/Side\
        852500 - Independent Phase\
        852501 - Preserve Formants, Independent Phase\
        852502 - Mid/Side, Independent Phase\
        852503 - Preserve Formants, Mid/Side, Independent Phase\
        852504 - Time Domain Smoothing\
        852505 - Preserve Formants, Time Domain Smoothing\
        852506 - Mid/Side, Time Domain Smoothing\
        852507 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852508 - Independent Phase, Time Domain Smoothing\
        852509 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852510 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852511 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Window: Short\
        852512 - nothing\
        852513 - Preserve Formants\
        852514 - Mid/Side\
        852515 - Preserve Formants, Mid/Side\
        852516 - Independent Phase\
        852517 - Preserve Formants, Independent Phase\
        852518 - Mid/Side, Independent Phase\
        852519 - Preserve Formants, Mid/Side, Independent Phase\
        852520 - Time Domain Smoothing\
        852521 - Preserve Formants, Time Domain Smoothing\
        852522 - Mid/Side, Time Domain Smoothing\
        852523 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852524 - Independent Phase, Time Domain Smoothing\
        852525 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852526 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852527 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Window: Short\
        852528 - nothing\
        852529 - Preserve Formants\
        852530 - Mid/Side\
        852531 - Preserve Formants, Mid/Side\
        852532 - Independent Phase\
        852533 - Preserve Formants, Independent Phase\
        852534 - Mid/Side, Independent Phase\
        852535 - Preserve Formants, Mid/Side, Independent Phase\
        852536 - Time Domain Smoothing\
        852537 - Preserve Formants, Time Domain Smoothing\
        852538 - Mid/Side, Time Domain Smoothing\
        852539 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852540 - Independent Phase, Time Domain Smoothing\
        852541 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852542 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852543 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: HighQ, Window: Short\
        852544 - nothing\
        852545 - Preserve Formants\
        852546 - Mid/Side\
        852547 - Preserve Formants, Mid/Side\
        852548 - Independent Phase\
        852549 - Preserve Formants, Independent Phase\
        852550 - Mid/Side, Independent Phase\
        852551 - Preserve Formants, Mid/Side, Independent Phase\
        852552 - Time Domain Smoothing\
        852553 - Preserve Formants, Time Domain Smoothing\
        852554 - Mid/Side, Time Domain Smoothing\
        852555 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852556 - Independent Phase, Time Domain Smoothing\
        852557 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852558 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852559 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: HighQ, Window: Short\
        852560 - nothing\
        852561 - Preserve Formants\
        852562 - Mid/Side\
        852563 - Preserve Formants, Mid/Side\
        852564 - Independent Phase\
        852565 - Preserve Formants, Independent Phase\
        852566 - Mid/Side, Independent Phase\
        852567 - Preserve Formants, Mid/Side, Independent Phase\
        852568 - Time Domain Smoothing\
        852569 - Preserve Formants, Time Domain Smoothing\
        852570 - Mid/Side, Time Domain Smoothing\
        852571 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852572 - Independent Phase, Time Domain Smoothing\
        852573 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852574 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852575 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: HighQ, Window: Short\
        852576 - nothing\
        852577 - Preserve Formants\
        852578 - Mid/Side\
        852579 - Preserve Formants, Mid/Side\
        852580 - Independent Phase\
        852581 - Preserve Formants, Independent Phase\
        852582 - Mid/Side, Independent Phase\
        852583 - Preserve Formants, Mid/Side, Independent Phase\
        852584 - Time Domain Smoothing\
        852585 - Preserve Formants, Time Domain Smoothing\
        852586 - Mid/Side, Time Domain Smoothing\
        852587 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852588 - Independent Phase, Time Domain Smoothing\
        852589 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852590 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852591 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: HighQ, Window: Short\
        852592 - nothing\
        852593 - Preserve Formants\
        852594 - Mid/Side\
        852595 - Preserve Formants, Mid/Side\
        852596 - Independent Phase\
        852597 - Preserve Formants, Independent Phase\
        852598 - Mid/Side, Independent Phase\
        852599 - Preserve Formants, Mid/Side, Independent Phase\
        852600 - Time Domain Smoothing\
        852601 - Preserve Formants, Time Domain Smoothing\
        852602 - Mid/Side, Time Domain Smoothing\
        852603 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852604 - Independent Phase, Time Domain Smoothing\
        852605 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852606 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852607 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: HighQ, Window: Short\
        852608 - nothing\
        852609 - Preserve Formants\
        852610 - Mid/Side\
        852611 - Preserve Formants, Mid/Side\
        852612 - Independent Phase\
        852613 - Preserve Formants, Independent Phase\
        852614 - Mid/Side, Independent Phase\
        852615 - Preserve Formants, Mid/Side, Independent Phase\
        852616 - Time Domain Smoothing\
        852617 - Preserve Formants, Time Domain Smoothing\
        852618 - Mid/Side, Time Domain Smoothing\
        852619 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852620 - Independent Phase, Time Domain Smoothing\
        852621 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852622 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852623 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: HighQ, Window: Short\
        852624 - nothing\
        852625 - Preserve Formants\
        852626 - Mid/Side\
        852627 - Preserve Formants, Mid/Side\
        852628 - Independent Phase\
        852629 - Preserve Formants, Independent Phase\
        852630 - Mid/Side, Independent Phase\
        852631 - Preserve Formants, Mid/Side, Independent Phase\
        852632 - Time Domain Smoothing\
        852633 - Preserve Formants, Time Domain Smoothing\
        852634 - Mid/Side, Time Domain Smoothing\
        852635 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852636 - Independent Phase, Time Domain Smoothing\
        852637 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852638 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852639 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: HighQ, Window: Short\
        852640 - nothing\
        852641 - Preserve Formants\
        852642 - Mid/Side\
        852643 - Preserve Formants, Mid/Side\
        852644 - Independent Phase\
        852645 - Preserve Formants, Independent Phase\
        852646 - Mid/Side, Independent Phase\
        852647 - Preserve Formants, Mid/Side, Independent Phase\
        852648 - Time Domain Smoothing\
        852649 - Preserve Formants, Time Domain Smoothing\
        852650 - Mid/Side, Time Domain Smoothing\
        852651 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852652 - Independent Phase, Time Domain Smoothing\
        852653 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852654 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852655 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: HighQ, Window: Short\
        852656 - nothing\
        852657 - Preserve Formants\
        852658 - Mid/Side\
        852659 - Preserve Formants, Mid/Side\
        852660 - Independent Phase\
        852661 - Preserve Formants, Independent Phase\
        852662 - Mid/Side, Independent Phase\
        852663 - Preserve Formants, Mid/Side, Independent Phase\
        852664 - Time Domain Smoothing\
        852665 - Preserve Formants, Time Domain Smoothing\
        852666 - Mid/Side, Time Domain Smoothing\
        852667 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852668 - Independent Phase, Time Domain Smoothing\
        852669 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852670 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852671 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: HighQ, Window: Short\
        852672 - nothing\
        852673 - Preserve Formants\
        852674 - Mid/Side\
        852675 - Preserve Formants, Mid/Side\
        852676 - Independent Phase\
        852677 - Preserve Formants, Independent Phase\
        852678 - Mid/Side, Independent Phase\
        852679 - Preserve Formants, Mid/Side, Independent Phase\
        852680 - Time Domain Smoothing\
        852681 - Preserve Formants, Time Domain Smoothing\
        852682 - Mid/Side, Time Domain Smoothing\
        852683 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852684 - Independent Phase, Time Domain Smoothing\
        852685 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852686 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852687 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: Consistent, Window: Short\
        852688 - nothing\
        852689 - Preserve Formants\
        852690 - Mid/Side\
        852691 - Preserve Formants, Mid/Side\
        852692 - Independent Phase\
        852693 - Preserve Formants, Independent Phase\
        852694 - Mid/Side, Independent Phase\
        852695 - Preserve Formants, Mid/Side, Independent Phase\
        852696 - Time Domain Smoothing\
        852697 - Preserve Formants, Time Domain Smoothing\
        852698 - Mid/Side, Time Domain Smoothing\
        852699 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852700 - Independent Phase, Time Domain Smoothing\
        852701 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852702 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852703 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: Consistent, Window: Short\
        852704 - nothing\
        852705 - Preserve Formants\
        852706 - Mid/Side\
        852707 - Preserve Formants, Mid/Side\
        852708 - Independent Phase\
        852709 - Preserve Formants, Independent Phase\
        852710 - Mid/Side, Independent Phase\
        852711 - Preserve Formants, Mid/Side, Independent Phase\
        852712 - Time Domain Smoothing\
        852713 - Preserve Formants, Time Domain Smoothing\
        852714 - Mid/Side, Time Domain Smoothing\
        852715 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852716 - Independent Phase, Time Domain Smoothing\
        852717 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852718 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852719 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: Consistent, Window: Short\
        852720 - nothing\
        852721 - Preserve Formants\
        852722 - Mid/Side\
        852723 - Preserve Formants, Mid/Side\
        852724 - Independent Phase\
        852725 - Preserve Formants, Independent Phase\
        852726 - Mid/Side, Independent Phase\
        852727 - Preserve Formants, Mid/Side, Independent Phase\
        852728 - Time Domain Smoothing\
        852729 - Preserve Formants, Time Domain Smoothing\
        852730 - Mid/Side, Time Domain Smoothing\
        852731 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852732 - Independent Phase, Time Domain Smoothing\
        852733 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852734 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852735 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: Consistent, Window: Short\
        852736 - nothing\
        852737 - Preserve Formants\
        852738 - Mid/Side\
        852739 - Preserve Formants, Mid/Side\
        852740 - Independent Phase\
        852741 - Preserve Formants, Independent Phase\
        852742 - Mid/Side, Independent Phase\
        852743 - Preserve Formants, Mid/Side, Independent Phase\
        852744 - Time Domain Smoothing\
        852745 - Preserve Formants, Time Domain Smoothing\
        852746 - Mid/Side, Time Domain Smoothing\
        852747 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852748 - Independent Phase, Time Domain Smoothing\
        852749 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852750 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852751 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: Consistent, Window: Short\
        852752 - nothing\
        852753 - Preserve Formants\
        852754 - Mid/Side\
        852755 - Preserve Formants, Mid/Side\
        852756 - Independent Phase\
        852757 - Preserve Formants, Independent Phase\
        852758 - Mid/Side, Independent Phase\
        852759 - Preserve Formants, Mid/Side, Independent Phase\
        852760 - Time Domain Smoothing\
        852761 - Preserve Formants, Time Domain Smoothing\
        852762 - Mid/Side, Time Domain Smoothing\
        852763 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852764 - Independent Phase, Time Domain Smoothing\
        852765 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852766 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852767 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: Consistent, Window: Short\
        852768 - nothing\
        852769 - Preserve Formants\
        852770 - Mid/Side\
        852771 - Preserve Formants, Mid/Side\
        852772 - Independent Phase\
        852773 - Preserve Formants, Independent Phase\
        852774 - Mid/Side, Independent Phase\
        852775 - Preserve Formants, Mid/Side, Independent Phase\
        852776 - Time Domain Smoothing\
        852777 - Preserve Formants, Time Domain Smoothing\
        852778 - Mid/Side, Time Domain Smoothing\
        852779 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852780 - Independent Phase, Time Domain Smoothing\
        852781 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852782 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852783 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: Consistent, Window: Short\
        852784 - nothing\
        852785 - Preserve Formants\
        852786 - Mid/Side\
        852787 - Preserve Formants, Mid/Side\
        852788 - Independent Phase\
        852789 - Preserve Formants, Independent Phase\
        852790 - Mid/Side, Independent Phase\
        852791 - Preserve Formants, Mid/Side, Independent Phase\
        852792 - Time Domain Smoothing\
        852793 - Preserve Formants, Time Domain Smoothing\
        852794 - Mid/Side, Time Domain Smoothing\
        852795 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852796 - Independent Phase, Time Domain Smoothing\
        852797 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852798 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852799 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: Consistent, Window: Short\
        852800 - nothing\
        852801 - Preserve Formants\
        852802 - Mid/Side\
        852803 - Preserve Formants, Mid/Side\
        852804 - Independent Phase\
        852805 - Preserve Formants, Independent Phase\
        852806 - Mid/Side, Independent Phase\
        852807 - Preserve Formants, Mid/Side, Independent Phase\
        852808 - Time Domain Smoothing\
        852809 - Preserve Formants, Time Domain Smoothing\
        852810 - Mid/Side, Time Domain Smoothing\
        852811 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852812 - Independent Phase, Time Domain Smoothing\
        852813 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852814 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852815 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: Consistent, Window: Short\
        852816 - nothing\
        852817 - Preserve Formants\
        852818 - Mid/Side\
        852819 - Preserve Formants, Mid/Side\
        852820 - Independent Phase\
        852821 - Preserve Formants, Independent Phase\
        852822 - Mid/Side, Independent Phase\
        852823 - Preserve Formants, Mid/Side, Independent Phase\
        852824 - Time Domain Smoothing\
        852825 - Preserve Formants, Time Domain Smoothing\
        852826 - Mid/Side, Time Domain Smoothing\
        852827 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852828 - Independent Phase, Time Domain Smoothing\
        852829 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852830 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852831 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Window: Long\
        852832 - nothing\
        852833 - Preserve Formants\
        852834 - Mid/Side\
        852835 - Preserve Formants, Mid/Side\
        852836 - Independent Phase\
        852837 - Preserve Formants, Independent Phase\
        852838 - Mid/Side, Independent Phase\
        852839 - Preserve Formants, Mid/Side, Independent Phase\
        852840 - Time Domain Smoothing\
        852841 - Preserve Formants, Time Domain Smoothing\
        852842 - Mid/Side, Time Domain Smoothing\
        852843 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852844 - Independent Phase, Time Domain Smoothing\
        852845 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852846 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852847 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Window: Long\
        852848 - nothing\
        852849 - Preserve Formants\
        852850 - Mid/Side\
        852851 - Preserve Formants, Mid/Side\
        852852 - Independent Phase\
        852853 - Preserve Formants, Independent Phase\
        852854 - Mid/Side, Independent Phase\
        852855 - Preserve Formants, Mid/Side, Independent Phase\
        852856 - Time Domain Smoothing\
        852857 - Preserve Formants, Time Domain Smoothing\
        852858 - Mid/Side, Time Domain Smoothing\
        852859 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852860 - Independent Phase, Time Domain Smoothing\
        852861 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852862 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852863 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Window: Long\
        852864 - nothing\
        852865 - Preserve Formants\
        852866 - Mid/Side\
        852867 - Preserve Formants, Mid/Side\
        852868 - Independent Phase\
        852869 - Preserve Formants, Independent Phase\
        852870 - Mid/Side, Independent Phase\
        852871 - Preserve Formants, Mid/Side, Independent Phase\
        852872 - Time Domain Smoothing\
        852873 - Preserve Formants, Time Domain Smoothing\
        852874 - Mid/Side, Time Domain Smoothing\
        852875 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852876 - Independent Phase, Time Domain Smoothing\
        852877 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852878 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852879 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Window: Long\
        852880 - nothing\
        852881 - Preserve Formants\
        852882 - Mid/Side\
        852883 - Preserve Formants, Mid/Side\
        852884 - Independent Phase\
        852885 - Preserve Formants, Independent Phase\
        852886 - Mid/Side, Independent Phase\
        852887 - Preserve Formants, Mid/Side, Independent Phase\
        852888 - Time Domain Smoothing\
        852889 - Preserve Formants, Time Domain Smoothing\
        852890 - Mid/Side, Time Domain Smoothing\
        852891 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852892 - Independent Phase, Time Domain Smoothing\
        852893 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852894 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852895 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Window: Long\
        852896 - nothing\
        852897 - Preserve Formants\
        852898 - Mid/Side\
        852899 - Preserve Formants, Mid/Side\
        852900 - Independent Phase\
        852901 - Preserve Formants, Independent Phase\
        852902 - Mid/Side, Independent Phase\
        852903 - Preserve Formants, Mid/Side, Independent Phase\
        852904 - Time Domain Smoothing\
        852905 - Preserve Formants, Time Domain Smoothing\
        852906 - Mid/Side, Time Domain Smoothing\
        852907 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852908 - Independent Phase, Time Domain Smoothing\
        852909 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852910 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852911 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Window: Long\
        852912 - nothing\
        852913 - Preserve Formants\
        852914 - Mid/Side\
        852915 - Preserve Formants, Mid/Side\
        852916 - Independent Phase\
        852917 - Preserve Formants, Independent Phase\
        852918 - Mid/Side, Independent Phase\
        852919 - Preserve Formants, Mid/Side, Independent Phase\
        852920 - Time Domain Smoothing\
        852921 - Preserve Formants, Time Domain Smoothing\
        852922 - Mid/Side, Time Domain Smoothing\
        852923 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852924 - Independent Phase, Time Domain Smoothing\
        852925 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852926 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852927 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Window: Long\
        852928 - nothing\
        852929 - Preserve Formants\
        852930 - Mid/Side\
        852931 - Preserve Formants, Mid/Side\
        852932 - Independent Phase\
        852933 - Preserve Formants, Independent Phase\
        852934 - Mid/Side, Independent Phase\
        852935 - Preserve Formants, Mid/Side, Independent Phase\
        852936 - Time Domain Smoothing\
        852937 - Preserve Formants, Time Domain Smoothing\
        852938 - Mid/Side, Time Domain Smoothing\
        852939 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852940 - Independent Phase, Time Domain Smoothing\
        852941 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852942 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852943 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Window: Long\
        852944 - nothing\
        852945 - Preserve Formants\
        852946 - Mid/Side\
        852947 - Preserve Formants, Mid/Side\
        852948 - Independent Phase\
        852949 - Preserve Formants, Independent Phase\
        852950 - Mid/Side, Independent Phase\
        852951 - Preserve Formants, Mid/Side, Independent Phase\
        852952 - Time Domain Smoothing\
        852953 - Preserve Formants, Time Domain Smoothing\
        852954 - Mid/Side, Time Domain Smoothing\
        852955 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852956 - Independent Phase, Time Domain Smoothing\
        852957 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852958 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852959 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Window: Long\
        852960 - nothing\
        852961 - Preserve Formants\
        852962 - Mid/Side\
        852963 - Preserve Formants, Mid/Side\
        852964 - Independent Phase\
        852965 - Preserve Formants, Independent Phase\
        852966 - Mid/Side, Independent Phase\
        852967 - Preserve Formants, Mid/Side, Independent Phase\
        852968 - Time Domain Smoothing\
        852969 - Preserve Formants, Time Domain Smoothing\
        852970 - Mid/Side, Time Domain Smoothing\
        852971 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852972 - Independent Phase, Time Domain Smoothing\
        852973 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852974 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852975 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: HighQ, Window: Long\
        852976 - nothing\
        852977 - Preserve Formants\
        852978 - Mid/Side\
        852979 - Preserve Formants, Mid/Side\
        852980 - Independent Phase\
        852981 - Preserve Formants, Independent Phase\
        852982 - Mid/Side, Independent Phase\
        852983 - Preserve Formants, Mid/Side, Independent Phase\
        852984 - Time Domain Smoothing\
        852985 - Preserve Formants, Time Domain Smoothing\
        852986 - Mid/Side, Time Domain Smoothing\
        852987 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852988 - Independent Phase, Time Domain Smoothing\
        852989 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852990 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852991 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: HighQ, Window: Long\
        852992 - nothing\
        852993 - Preserve Formants\
        852994 - Mid/Side\
        852995 - Preserve Formants, Mid/Side\
        852996 - Independent Phase\
        852997 - Preserve Formants, Independent Phase\
        852998 - Mid/Side, Independent Phase\
        852999 - Preserve Formants, Mid/Side, Independent Phase\
        853000 - Time Domain Smoothing\
        853001 - Preserve Formants, Time Domain Smoothing\
        853002 - Mid/Side, Time Domain Smoothing\
        853003 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853004 - Independent Phase, Time Domain Smoothing\
        853005 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853006 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853007 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: HighQ, Window: Long\
        853008 - nothing\
        853009 - Preserve Formants\
        853010 - Mid/Side\
        853011 - Preserve Formants, Mid/Side\
        853012 - Independent Phase\
        853013 - Preserve Formants, Independent Phase\
        853014 - Mid/Side, Independent Phase\
        853015 - Preserve Formants, Mid/Side, Independent Phase\
        853016 - Time Domain Smoothing\
        853017 - Preserve Formants, Time Domain Smoothing\
        853018 - Mid/Side, Time Domain Smoothing\
        853019 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853020 - Independent Phase, Time Domain Smoothing\
        853021 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853022 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853023 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: HighQ, Window: Long\
        853024 - nothing\
        853025 - Preserve Formants\
        853026 - Mid/Side\
        853027 - Preserve Formants, Mid/Side\
        853028 - Independent Phase\
        853029 - Preserve Formants, Independent Phase\
        853030 - Mid/Side, Independent Phase\
        853031 - Preserve Formants, Mid/Side, Independent Phase\
        853032 - Time Domain Smoothing\
        853033 - Preserve Formants, Time Domain Smoothing\
        853034 - Mid/Side, Time Domain Smoothing\
        853035 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853036 - Independent Phase, Time Domain Smoothing\
        853037 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853038 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853039 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: HighQ, Window: Long\
        853040 - nothing\
        853041 - Preserve Formants\
        853042 - Mid/Side\
        853043 - Preserve Formants, Mid/Side\
        853044 - Independent Phase\
        853045 - Preserve Formants, Independent Phase\
        853046 - Mid/Side, Independent Phase\
        853047 - Preserve Formants, Mid/Side, Independent Phase\
        853048 - Time Domain Smoothing\
        853049 - Preserve Formants, Time Domain Smoothing\
        853050 - Mid/Side, Time Domain Smoothing\
        853051 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853052 - Independent Phase, Time Domain Smoothing\
        853053 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853054 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853055 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: HighQ, Window: Long\
        853056 - nothing\
        853057 - Preserve Formants\
        853058 - Mid/Side\
        853059 - Preserve Formants, Mid/Side\
        853060 - Independent Phase\
        853061 - Preserve Formants, Independent Phase\
        853062 - Mid/Side, Independent Phase\
        853063 - Preserve Formants, Mid/Side, Independent Phase\
        853064 - Time Domain Smoothing\
        853065 - Preserve Formants, Time Domain Smoothing\
        853066 - Mid/Side, Time Domain Smoothing\
        853067 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853068 - Independent Phase, Time Domain Smoothing\
        853069 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853070 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853071 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: HighQ, Window: Long\
        853072 - nothing\
        853073 - Preserve Formants\
        853074 - Mid/Side\
        853075 - Preserve Formants, Mid/Side\
        853076 - Independent Phase\
        853077 - Preserve Formants, Independent Phase\
        853078 - Mid/Side, Independent Phase\
        853079 - Preserve Formants, Mid/Side, Independent Phase\
        853080 - Time Domain Smoothing\
        853081 - Preserve Formants, Time Domain Smoothing\
        853082 - Mid/Side, Time Domain Smoothing\
        853083 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853084 - Independent Phase, Time Domain Smoothing\
        853085 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853086 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853087 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: HighQ, Window: Long\
        853088 - nothing\
        853089 - Preserve Formants\
        853090 - Mid/Side\
        853091 - Preserve Formants, Mid/Side\
        853092 - Independent Phase\
        853093 - Preserve Formants, Independent Phase\
        853094 - Mid/Side, Independent Phase\
        853095 - Preserve Formants, Mid/Side, Independent Phase\
        853096 - Time Domain Smoothing\
        853097 - Preserve Formants, Time Domain Smoothing\
        853098 - Mid/Side, Time Domain Smoothing\
        853099 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853100 - Independent Phase, Time Domain Smoothing\
        853101 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853102 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853103 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: HighQ, Window: Long\
        853104 - nothing\
        853105 - Preserve Formants\
        853106 - Mid/Side\
        853107 - Preserve Formants, Mid/Side\
        853108 - Independent Phase\
        853109 - Preserve Formants, Independent Phase\
        853110 - Mid/Side, Independent Phase\
        853111 - Preserve Formants, Mid/Side, Independent Phase\
        853112 - Time Domain Smoothing\
        853113 - Preserve Formants, Time Domain Smoothing\
        853114 - Mid/Side, Time Domain Smoothing\
        853115 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853116 - Independent Phase, Time Domain Smoothing\
        853117 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853118 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853119 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: Consistent, Window: Long\
        853120 - nothing\
        853121 - Preserve Formants\
        853122 - Mid/Side\
        853123 - Preserve Formants, Mid/Side\
        853124 - Independent Phase\
        853125 - Preserve Formants, Independent Phase\
        853126 - Mid/Side, Independent Phase\
        853127 - Preserve Formants, Mid/Side, Independent Phase\
        853128 - Time Domain Smoothing\
        853129 - Preserve Formants, Time Domain Smoothing\
        853130 - Mid/Side, Time Domain Smoothing\
        853131 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853132 - Independent Phase, Time Domain Smoothing\
        853133 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853134 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853135 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: Consistent, Window: Long\
        853136 - nothing\
        853137 - Preserve Formants\
        853138 - Mid/Side\
        853139 - Preserve Formants, Mid/Side\
        853140 - Independent Phase\
        853141 - Preserve Formants, Independent Phase\
        853142 - Mid/Side, Independent Phase\
        853143 - Preserve Formants, Mid/Side, Independent Phase\
        853144 - Time Domain Smoothing\
        853145 - Preserve Formants, Time Domain Smoothing\
        853146 - Mid/Side, Time Domain Smoothing\
        853147 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853148 - Independent Phase, Time Domain Smoothing\
        853149 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853150 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853151 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: Consistent, Window: Long\
        853152 - nothing\
        853153 - Preserve Formants\
        853154 - Mid/Side\
        853155 - Preserve Formants, Mid/Side\
        853156 - Independent Phase\
        853157 - Preserve Formants, Independent Phase\
        853158 - Mid/Side, Independent Phase\
        853159 - Preserve Formants, Mid/Side, Independent Phase\
        853160 - Time Domain Smoothing\
        853161 - Preserve Formants, Time Domain Smoothing\
        853162 - Mid/Side, Time Domain Smoothing\
        853163 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853164 - Independent Phase, Time Domain Smoothing\
        853165 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853166 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853167 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: Consistent, Window: Long\
        853168 - nothing\
        853169 - Preserve Formants\
        853170 - Mid/Side\
        853171 - Preserve Formants, Mid/Side\
        853172 - Independent Phase\
        853173 - Preserve Formants, Independent Phase\
        853174 - Mid/Side, Independent Phase\
        853175 - Preserve Formants, Mid/Side, Independent Phase\
        853176 - Time Domain Smoothing\
        853177 - Preserve Formants, Time Domain Smoothing\
        853178 - Mid/Side, Time Domain Smoothing\
        853179 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853180 - Independent Phase, Time Domain Smoothing\
        853181 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853182 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853183 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: Consistent, Window: Long\
        853184 - nothing\
        853185 - Preserve Formants\
        853186 - Mid/Side\
        853187 - Preserve Formants, Mid/Side\
        853188 - Independent Phase\
        853189 - Preserve Formants, Independent Phase\
        853190 - Mid/Side, Independent Phase\
        853191 - Preserve Formants, Mid/Side, Independent Phase\
        853192 - Time Domain Smoothing\
        853193 - Preserve Formants, Time Domain Smoothing\
        853194 - Mid/Side, Time Domain Smoothing\
        853195 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853196 - Independent Phase, Time Domain Smoothing\
        853197 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853198 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853199 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: Consistent, Window: Long\
        853200 - nothing\
        853201 - Preserve Formants\
        853202 - Mid/Side\
        853203 - Preserve Formants, Mid/Side\
        853204 - Independent Phase\
        853205 - Preserve Formants, Independent Phase\
        853206 - Mid/Side, Independent Phase\
        853207 - Preserve Formants, Mid/Side, Independent Phase\
        853208 - Time Domain Smoothing\
        853209 - Preserve Formants, Time Domain Smoothing\
        853210 - Mid/Side, Time Domain Smoothing\
        853211 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853212 - Independent Phase, Time Domain Smoothing\
        853213 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853214 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853215 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: Consistent, Window: Long\
        853216 - nothing\
        853217 - Preserve Formants\
        853218 - Mid/Side\
        853219 - Preserve Formants, Mid/Side\
        853220 - Independent Phase\
        853221 - Preserve Formants, Independent Phase\
        853222 - Mid/Side, Independent Phase\
        853223 - Preserve Formants, Mid/Side, Independent Phase\
        853224 - Time Domain Smoothing\
        853225 - Preserve Formants, Time Domain Smoothing\
        853226 - Mid/Side, Time Domain Smoothing\
        853227 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853228 - Independent Phase, Time Domain Smoothing\
        853229 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853230 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853231 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: Consistent, Window: Long\
        853232 - nothing\
        853233 - Preserve Formants\
        853234 - Mid/Side\
        853235 - Preserve Formants, Mid/Side\
        853236 - Independent Phase\
        853237 - Preserve Formants, Independent Phase\
        853238 - Mid/Side, Independent Phase\
        853239 - Preserve Formants, Mid/Side, Independent Phase\
        853240 - Time Domain Smoothing\
        853241 - Preserve Formants, Time Domain Smoothing\
        853242 - Mid/Side, Time Domain Smoothing\
        853243 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853244 - Independent Phase, Time Domain Smoothing\
        853245 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853246 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853247 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: Consistent, Window: Long\
        853248 - nothing\
        853249 - Preserve Formants\
        853250 - Mid/Side\
        853251 - Preserve Formants, Mid/Side\
        853252 - Independent Phase\
        853253 - Preserve Formants, Independent Phase\
        853254 - Mid/Side, Independent Phase\
        853255 - Preserve Formants, Mid/Side, Independent Phase\
        853256 - Time Domain Smoothing\
        853257 - Preserve Formants, Time Domain Smoothing\
        853258 - Mid/Side, Time Domain Smoothing\
        853259 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853260 - Independent Phase, Time Domain Smoothing\
        853261 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853262 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853263 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the default pitch mode",
    name = "DEF_PITCH_MODE_STATE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the stretch marker mode\
0, Balanced\
1, Tonal-optimized\
2, Transient-optimized\
3, No pre-echo reduction",
    name = "STRETCH_MARKER_MODE",
   },
   [4] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [95] = {
  fname = "SetProject_TakeLane",
  label = "US_SetProject_TakeLane",
  run = "in/out",
  desc = "Sets the take-lane-state in an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "take-lane-state",
    name = "TAKE_LANE_STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [96] = {
  fname = "SetProject_SampleRate",
  label = "US_SetProject_SampleRate",
  run = "in/out",
  desc = "Sets the project-samplerate-state, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "Project Sample Rate in Hz",
    name = "SAMPLE_RATE",
   },
   [3] = {
    type = "INTEGER",
    desc = "Checkbox: Project Sample Rate",
    name = "PROJECT_SAMPLE_RATE",
   },
   [4] = {
    type = "INTEGER",
    desc = "Checkbox: Force Project Tempo/Time Signature changes to occur on whole samples ",
    name = "FORCE_TEMPO_TIME_SIG",
   },
   [5] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [97] = {
  fname = "SetProject_TrackMixingDepth",
  label = "US_SetProject_TrackMixingDepth",
  run = "in/out",
  desc = "Sets the project-samplerate-state, as set in the project-settings, from an rpp-project-file or a ProjectStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the track mixing depth\
  1 - 32 bit float\
  2 - 39 bit integer\
  3 - 24 bit integer\
  4 - 16 bit integer\
  5 - 12 bit integer\
  6 - 8 bit integer",
    name = "MIXINGDEPTH",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [98] = {
  fname = "GetProject_CountMarkersAndRegions",
  label = "US_GetProject_CountMarkersAndRegions",
  run = "in/out",
  desc = "returns the number of all markers, the number of regions and the number of markers(that are not regions) in the project.\
\
It's the entry MARKER\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of all markers and regions",
    name = "NUMBER_OF_MARKERS_AND_REGIONS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of regions",
    name = "NUMBER_OF_REGIONS_ONLY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of markers only",
    name = "NUMBER_OF_MARKERS_ONLY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfilename in which to count the markers",
    name = "PROJECTFILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [99] = {
  fname = "GetProject_GetMarker",
  label = "US_GetProject_GetMarker",
  run = "in/out",
  desc = "returns the information of the marker idx in a projectfile.\
\
It's the entry MARKER\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, in case of success; false in case of failure",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number that is shown with the marker in the arrange-view",
    name = "SHOWNNUMBER",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the marker in seconds",
    name = "MARKERPOSITION",
   },
   [4] = {
    type = "STRING",
    desc = "the name of the marker. \"\" if no name is given.",
    name = "MARKERTITLE",
   },
   [5] = {
    type = "INTEGER",
    desc = "the colorvalue of the marker",
    name = "MARKERCOLOR",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfilename from where to get the marker",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the marker, you want to have the information of",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [100] = {
  fname = "GetProject_GetRegion",
  label = "US_GetProject_GetRegion",
  run = "in/out",
  desc = "returns the information of the region idx in a projectfile.\
\
It's the entry MARKER\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, in case of success; false in case of failure",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number that is shown with the region in the arrange-view",
    name = "SHOWNNUMBER",
   },
   [3] = {
    type = "NUMBER",
    desc = "the startposition of the region in seconds",
    name = "START_OF_REGION",
   },
   [4] = {
    type = "NUMBER",
    desc = "the endposition of the region in seconds",
    name = "END_OF_REGION",
   },
   [5] = {
    type = "STRING",
    desc = "the name of the region. \"\" if no name is given.",
    name = "REGIONNAME",
   },
   [6] = {
    type = "INTEGER",
    desc = "the colorvalue of the region",
    name = "REGIONCOLOR",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfilename from where to get the region",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the marker, you want to have the information of",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [101] = {
  fname = "GetProject_MarkersAndRegions",
  label = "US_GetProject_MarkersAndRegions",
  run = "in/out",
  desc = "Returns the markers and regions from an RPP-Projectfile or a ProjectStateChunk.\
Doe not return TimeSignature-markers(!)\
Returns nil in case of error or if no such entry exists.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of markers and regions in the projectfile/ProjectStateChunk",
    name = "MARKERREGIONCOUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all elements of markers/regions\
markertable has the following entries:\
markertable[id][1] = boolean isrgn - true, marker is a region; false, marker is a normal marker\
markertable[id][2] = number pos    - the startposition of the marker/region\
markertable[id][3] = number rgnend - the endposition of a region; 0, if it's a marker\
markertable[id][4] = string name   - the name of the marker/region\
markertable[id][5] = integer markrgnindexnumber - the shown number of the region/marker\
markertable[id][6] = integer color - the color-value of the marker\
markertable[id][7] = string guid - the guid of the marker\
markertable[id][8] = if a region: true, region is selected; false, region is not selected\
markertable[id][9] = if a region: true, region-render-matrix Master mix is selected; false, region-render-matrix Master mix is unselected\
markertable[id][10]= if a region: true, region-render-matrix All tracks is selected; false, region-render-matrix All tracks is unselected",
    name = "MARKERTABLE",
   },
   [3] = {
    type = "MARKERARRAY[MARKERCOUNT][8]=TONUMBER(ISRGN)&8==8",
    desc = "- is region selected?",
    name = "RETVAL",
   },
   [4] = {
    type = "MARKERARRAY[MARKERCOUNT][9]=TONUMBER(ISRGN)&4==4",
    desc = "- is region-matrix-mastermix selected?",
    name = "RETVAL",
   },
   [5] = {
    type = "MARKERARRAY[MARKERCOUNT][10]=TONUMBER(ISRGN)&2==2",
    desc = "- is region-matrix-All tracks selected?",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [102] = {
  fname = "NewProjectTab",
  label = "US_NewProjectTab",
  run = "in/out",
  desc = "Opens a new projecttab and optionally switches to it. Returns the newly created ReaProject.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "REAPROJECT",
    desc = "the newly created project-object of the projecttab",
    name = "NEWPROJECT",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, switch to the newly created project-tab; false, stay in the \"old\" project-tab",
    name = "SWITCH_TO_NEW_TAB",
   },
  },
  sp_api = "ultraschall",
 },
 [103] = {
  fname = "GetCurrentTimeLengthOfFrame",
  label = "US_GetCurrentTimeLengthOfFrame",
  run = "in/out",
  desc = "Returns a project's length of a frame in seconds. Depends on the fps set in the Project's settings of ReaProject.\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the current length of a frame of ReaProject in seconds",
    name = "LENGTH",
   },
  },
  ins = {
   [1] = {
    type = "REAPROJECT",
    desc = "the project to check for; use nil or 0 for the current project",
    name = "REAPROJECT",
   },
  },
  sp_api = "ultraschall",
 },
 [104] = {
  fname = "GetLengthOfFrames",
  label = "US_GetLengthOfFrames",
  run = "in/out",
  desc = "Returns the length of a number of frames of a ReaProject. Depends on the fps set in the Project's settings of ReaProject.\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the current length of frames of ReaProject in seconds",
    name = "LENGTH",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of frames, whose length you would love to know",
    name = "FRAMES",
   },
   [2] = {
    type = "REAPROJECT",
    desc = "the project to check for; use nil or 0 for the current project",
    name = "REAPROJECT",
   },
  },
  sp_api = "ultraschall",
 },
 [105] = {
  fname = "ConvertOldProjectToCurrentReaperVersion",
  label = "US_ConvertOldProjectToCurrentReaperVersion",
  run = "in/out",
  desc = "Convert an old Reaper-project to the current Reaper-version.\
It creates a backup-copy of the old version of the project.rpp to project.rpp~0\
After that, it will open the project and save it again, so it is saved with the newest version of Reaper.\
\
Maybe helpful, when you want to use the Ultraschall-API Get/SetProject-State-functions on older projects, where some states were saved differently.\
Just create a \"new\" version of it and use the aforementioned functions on the new project-version.\
\
Returns false in case of an error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, conversion was successfull; false, conversion wasn't successful(file doesn't exist or a copy can't be created)",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename with path of the rpp-projectfile to be converted.",
    name = "FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [106] = {
  fname = "GetProject_ProjectBay",
  label = "US_GetProject_ProjectBay",
  run = "in/out",
  desc = "returns the ProjectBay-StateChunk, that holds MediaItems, that shall be retained in the \"background\" of the project, even if they are deleted from the project.\
These MediaItems can be seen and set to retain from within the ProjectBay-window.\
\
It's the entry <PROJBAY ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the ProjectBay",
    name = "PROJECTBAYSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the projectbay-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [107] = {
  fname = "GetProject_Metronome",
  label = "US_GetProject_Metronome",
  run = "in/out",
  desc = "returns the Metronome-StateChunk, that holds metronome-settings.\
\
It's the entry <METRONOME ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Metronome",
    name = "METRONOMESTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the metronome-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [108] = {
  fname = "GetProject_MasterPlayspeed",
  label = "US_GetProject_MasterPlayspeed",
  run = "in/out",
  desc = "returns the Master-Playspeed-StateChunk, that holds Playspeed-settings of the master.\
\
It's the entry <MASTERPLAYSPEEDENV ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the MasterPlaySpeed",
    name = "MASTERPLAYSPEEDSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-playspeed-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [109] = {
  fname = "GetProject_TempoEnvEx",
  label = "US_GetProject_TempoEnvEx",
  run = "in/out",
  desc = "returns the Tempo-StateChunk, that holds tempo-settings of the master.\
\
It's the entry <TEMPOENVEX ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Tempo",
    name = "TEMPOSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the tempo-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [110] = {
  fname = "GetProject_Extensions",
  label = "US_GetProject_Extensions",
  run = "in/out",
  desc = "returns the Extensions-settings-StateChunk, that holds tempo-settings of the master.\
\
It's the entry <EXTENSIONS ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Extensions-settings",
    name = "EXTENSIONSSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the extension-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [111] = {
  fname = "GetProject_Lock",
  label = "US_GetProject_Lock",
  run = "in/out",
  desc = "returns the individual lock-settings of the project, as set in menu Options -> Locking -> Locking Settings\
\
It's the entry LOCK \
It is the one before(!) any <TRACK-tags !\
\
It is a bitfield, containing numerous settings.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the lock-state, which is a bitfield\
&1     - Time selection\
&2     - Items (full)\
&4     - Track envelopes\
&8     - Markers\
&16    - Regions\
&32    - Time signature markers\
&64    - Items (prevent left/right movement)\
&128   - Items (prevent up/down movement)\
&256   - Item edges\
&512   - Item fade/volume handles\
&1024  - Loop points locked\
&2048  - Item envelopes\
&4096  - Item stretch markers\
&16384 - Enable locking",
    name = "LOCK_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the lock-state; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [112] = {
  fname = "GetProject_GlobalAuto",
  label = "US_GetProject_GlobalAuto",
  run = "in/out",
  desc = "returns the global-automation-settings of the project.\
\
It's the entry GLOBAL_AUTO\
\
returns nil in case of an error or if the setting isn't existing",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the global automation override state, this sets the same automation mode to all tracks!\
-1, No global automation override, automation-mode will be set by track\
0, trim/read mode\
1, read mode\
2, touch mode\
3, write mode\
4, latch mode\
5, latch preview mode\
6, bypass all automation",
    name = "GLOBALAUTO_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the global-automation-state; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [113] = {
  fname = "GetProject_Tempo",
  label = "US_GetProject_Tempo",
  run = "in/out",
  desc = "returns the tempo-settings of the project, as set in the Project Settings -> Project Settings-tab\
\
It's the entry TEMPO\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the tempo of the project in bpm",
    name = "BPM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the beat of the project",
    name = "BEAT",
   },
   [3] = {
    type = "INTEGER",
    desc = "the denominator for the beat",
    name = "DENOMINATOR",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the tempo-state; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [114] = {
  fname = "GetProject_Playrate",
  label = "US_GetProject_Playrate",
  run = "in/out",
  desc = "returns the tempo-settings of the project, as set in the Project Settings -> Project Settings-tab\
\
It's the entry PLAYRATE\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the currently set playrate; 0.01 to 10",
    name = "PLAYRATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, don't preserve pitch, when changing playrate; 1, preserve pitch, when changing playrate",
    name = "PRESERVE_PITCH",
   },
   [3] = {
    type = "NUMBER",
    desc = "the minimum playrate possible in the project; 0.01 to 10",
    name = "MIN_PLAYRATE",
   },
   [4] = {
    type = "NUMBER",
    desc = "the maximum playrate possible in the project; 0.01 to 10",
    name = "MAX_PLAYRATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the playrate-state; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [115] = {
  fname = "GetProject_MasterAutomode",
  label = "US_GetProject_MasterAutomode",
  run = "in/out",
  desc = "returns the automation-mode of the master-track of the project, as set in the \"Envelopes for Master Track\"-dialog or the context-menu for the Master Track -> Set track automation mode -> ...\
\
It's the entry MASTERAUTOMODE\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the automation-mode, as set in the Envelopes for Master Track\
0, Trim/Read\
1, Read\
2, Touch\
3, Write\
4, Latch\
5, Latch Preview",
    name = "AUTOMODE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-automation-mode; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [116] = {
  fname = "GetProject_MasterSel",
  label = "US_GetProject_MasterSel",
  run = "in/out",
  desc = "returns the master-track-selection-state of the master-track of the project.\
\
It's the entry MASTER_SEL\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the selection-state; 0, master-track unselected; 1, master-track selected",
    name = "SELECTION",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-selection; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [117] = {
  fname = "GetProject_MasterFXByp",
  label = "US_GetProject_MasterFXByp",
  run = "in/out",
  desc = "returns the fx-bypass-state of the master-track of the project.\
\
It's the entry MASTER_FX\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the fx-bypass-state; 0, master-track-fx bypassed; 1, master-track-fx normal",
    name = "FX_BYP_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-fx-bypass-state; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [118] = {
  fname = "GetProject_MasterMuteSolo",
  label = "US_GetProject_MasterMuteSolo",
  run = "in/out",
  desc = "returns the mute-solo-state of the master-track of the project.\
Has no exclusive-solo/mute-settings!\
\
It's the entry MASTERMUTESOLO\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the mute-solo-state; it is a bitfield\
0, no mute, no solo, Mono mode L+R\
&1, master-track muted\
&2, master-track soloed\
&4, master-track mono-button\
&8, Mono mode:L\
&16, Mono mode:R\
add 24 for Mono mode L-R",
    name = "MUTE_SOLO_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-mute-solo-state; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [119] = {
  fname = "GetProject_MasterNChans",
  label = "US_GetProject_MasterNChans",
  run = "in/out",
  desc = "returns the number of output channels-settings and the vu-peak-metering-settings of the master-track of the project.\
\
It's the entry MASTER_NCH\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of output-channels, as set in the \"Outputs for the Master Channel -> Track Channels\"-dialog",
    name = "NUMBER_OF_CHANNELS",
   },
   [2] = {
    type = "INTEGER",
    desc = "2, Multichannel peak metering-setting, as set in the \"Master VU settings\"-dialog",
    name = "PEAK_METERING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-nchans; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [120] = {
  fname = "GetProject_MasterTrackHeight",
  label = "US_GetProject_MasterTrackHeight",
  run = "in/out",
  desc = "returns the master-trackheight-states of the master-track of the project.\
\
It's the entry MASTERTRACKHEIGHT\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current-height of the master-track, from 24 to 260",
    name = "HEIGHT_STATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, height-lock is off; 1, height-lock is on",
    name = "HEIGHT_LOCK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the mastertrackheight-state; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [121] = {
  fname = "GetProject_MasterTrackColor",
  label = "US_GetProject_MasterTrackColor",
  run = "in/out",
  desc = "returns the master-color of the master-track of the project.\
\
It's the entry MASTERPEAKCOL\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the color for the master-track",
    name = "COLOR",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the mastertrack-color; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [122] = {
  fname = "GetProject_MasterTrackView",
  label = "US_GetProject_MasterTrackView",
  run = "in/out",
  desc = "returns the master-view-state of the master-track of the project or a ProjectStateChunk.\
\
It's the entry MASTERTRACKVIEW\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, Master-track is invisible in MCP; 1, Master-track is visible in MCP",
    name = "TCP_VISIBILITY",
   },
   [2] = {
    type = "NUMBER",
    desc = "unknown",
    name = "STATE2",
   },
   [3] = {
    type = "NUMBER",
    desc = "unknown",
    name = "STATE3",
   },
   [4] = {
    type = "NUMBER",
    desc = "unknown",
    name = "STATE4",
   },
   [5] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE5",
   },
   [6] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE6",
   },
   [7] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE7",
   },
   [8] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE8",
   },
   [9] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE9",
   },
   [10] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE10",
   },
   [11] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE11",
   },
   [12] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE12",
   },
   [13] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE13",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the trackview-states; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [123] = {
  fname = "GetProject_CountMasterHWOuts",
  label = "US_GetProject_CountMasterHWOuts",
  run = "in/out",
  desc = "returns the number of available hwouts in an rpp-project or ProjectStateChunk\
\
It's the entry MASTERHWOUT\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of available hwouts in an rpp-project or ProjectStateChunk",
    name = "COUNT_OF_HWOUTS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to count the master-hwouts; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [124] = {
  fname = "GetProject_MasterHWOut",
  label = "US_GetProject_MasterHWOut",
  run = "in/out",
  desc = "returns the HWOut of the master-track of the project, as set in the \"Outputs for Master Track\"-dialog\
There can be multiple HWOuts for the Master-Track.\
\
It's the entry MASTERHWOUT\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE1",
   },
   [2] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE2",
   },
   [3] = {
    type = "NUMBER",
    desc = "volume of the HWOut; ",
    name = "VOLUME",
   },
   [4] = {
    type = "NUMBER",
    desc = "the panning; -1(left), 1(right), 0(center)",
    name = "PAN",
   },
   [5] = {
    type = "INTEGER",
    desc = "mute-state; 0, unmuted; 1, muted",
    name = "MUTE",
   },
   [6] = {
    type = "INTEGER",
    desc = "phase-inversion; 0, normal phase; 1, inversed phase",
    name = "PHASE",
   },
   [7] = {
    type = "INTEGER",
    desc = "-1 - None",
    name = "OUTPUT_CHANNELS",
   },
   [8] = {
    type = "0",
    desc = "Stereo Source 1/2",
    name = "RETVAL",
   },
   [9] = {
    type = "4",
    desc = "Stereo Source 5/6",
    name = "RETVAL",
   },
   [10] = {
    type = "12",
    desc = "New Channels On Sending Track Stereo Source Channel 13/14",
    name = "RETVAL",
   },
   [11] = {
    type = "1024",
    desc = "Mono Source 1",
    name = "RETVAL",
   },
   [12] = {
    type = "1029",
    desc = "Mono Source 6",
    name = "RETVAL",
   },
   [13] = {
    type = "1030",
    desc = "New Channels On Sending Track Mono Source Channel 7",
    name = "RETVAL",
   },
   [14] = {
    type = "1032",
    desc = "New Channels On Sending Track Mono Source Channel 9",
    name = "RETVAL",
   },
   [15] = {
    type = "2048",
    desc = "MultiChannel 4 Channels 1-4",
    name = "RETVAL",
   },
   [16] = {
    type = "2050",
    desc = "Multichannel 4 Channels 3-6",
    name = "RETVAL",
   },
   [17] = {
    type = "3072",
    desc = "Multichannel 6 Channels 1-6 ",
    name = "RETVAL",
   },
   [18] = {
    type = "NUMBER",
    desc = "unknown",
    name = "STATE8",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-hwout-states; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the requested HWOut-setting; 1 for the first, etc.",
    name = "IDX",
   },
   [3] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [125] = {
  fname = "GetProject_MasterVolume",
  label = "US_GetProject_MasterVolume",
  run = "in/out",
  desc = "returns the Master-volume-state of the master-track of the project.\
\
It's the entry MASTER_VOLUME\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "Volume; 0(-inf dB) to 3.981071705535(+12dB);1 for 0dB",
    name = "VOLUME",
   },
   [2] = {
    type = "NUMBER",
    desc = "Panning; -1(left), 1(right), 0(center)",
    name = "PAN",
   },
   [3] = {
    type = "NUMBER",
    desc = "Pan_Law, as set in the \"Pan Law: Master Track\"-dialog; 1(0dB); 0.5(-6.02dB)",
    name = "PAN_LAW",
   },
   [4] = {
    type = "NUMBER",
    desc = "unknown",
    name = "STATE4",
   },
   [5] = {
    type = "NUMBER",
    desc = "the second pan_knob for pan-mode \"Dual Pan\" ",
    name = "PAN_KNOB3",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-volume-states; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [126] = {
  fname = "GetProject_MasterPanMode",
  label = "US_GetProject_MasterPanMode",
  run = "in/out",
  desc = "returns the master-panmode of the master-track of the project.\
\
It's the entry MASTER_PANMODE\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the panmode for the master-track; \
 -1, Project default (Stereo balance)\
  3, Stereo balance  / mono pan(default)\
  5, Stereo Pan\
  6, Dual Pan\
  nil, REAPER 3.x balance(deprecated)",
    name = "PANMODE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-panmode; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [127] = {
  fname = "GetProject_MasterWidth",
  label = "US_GetProject_MasterWidth",
  run = "in/out",
  desc = "returns the master-width for the second pan-knob in stereo pan-modes, of the master-track of the project.\
\
It's the entry MASTER_WIDTH\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "-1(left), 1(right), 0(center)",
    name = "PAN_KNOB_TWO",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the masterwidth-state; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [128] = {
  fname = "GetProject_MasterGroupFlagsState",
  label = "US_GetProject_MasterGroupFlagsState",
  run = "in/out",
  desc = "returns the state of the group-flags for the Master-Track, as set in the menu Track Grouping Parameters; from an rpp-projectfile or a ProjectStateChunk. \
\
Returns a 23bit flagvalue as well as an array with 32 individual 23bit-flagvalues. You must use bitoperations to get the individual values.\
\
You can reach the Group-Flag-Settings in the context-menu of a track.\
\
The groups_bitfield_table contains up to 23 entries. Every entry represents one of the checkboxes in the Track grouping parameters-dialog\
\
Each entry is a bitfield, that represents the groups, in which this flag is set to checked or unchecked.\
\
So if you want to get Volume Master(table entry 1) to check if it's set in Group 1(2^0=1) and 3(2^2=4):\
  group1=groups_bitfield_table[1]&1\
  group2=groups_bitfield_table[1]&4\
\
The following flags(and their accompanying array-entry-index) are available:\
                       1 - Volume Master\
                       2 - Volume Slave\
                       3 - Pan Master\
                       4 - Pan Slave\
                       5 - Mute Master\
                       6 - Mute Slave\
                       7 - Solo Master\
                       8 - Solo Slave\
                       9 - Record Arm Master\
                       10 - Record Arm Slave\
                       11 - Polarity/Phase Master\
                       12 - Polarity/Phase Slave\
                       13 - Automation Mode Master\
                       14 - Automation Mode Slave\
                       15 - Reverse Volume\
                       16 - Reverse Pan\
                       17 - Do not master when slaving\
                       18 - Reverse Width\
                       19 - Width Master\
                       20 - Width Slave\
                       21 - VCA Master\
                       22 - VCA Slave\
                       23 - VCA pre-FX slave\
\
The GroupState_as_Flags-bitfield is a hint, if a certain flag is set in any of the groups. So, if you want to know, if VCA Master is set in any group, check if flag &1048576 (2^20) is set to 1048576.\
\
This function will work only for Groups 1 to 32. To get Groups 33 to 64, use <a href=\"#GetTrackGroupFlags_HighState\">GetTrackGroupFlags_HighState</a> instead!\
\
It's the entry MASTER_GROUP_FLAGS\
\
returns -1 in case of failure",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "returns a flagvalue with 23 bits, that tells you, which grouping-flag is set in at least one of the 32 groups available.\
returns -1 in case of failure\
\
the following flags are available:\
2^0 - Volume Master\
2^1 - Volume Slave\
2^2 - Pan Master\
2^3 - Pan Slave\
2^4 - Mute Master\
2^5 - Mute Slave\
2^6 - Solo Master\
2^7 - Solo Slave\
2^8 - Record Arm Master\
2^9 - Record Arm Slave\
2^10 - Polarity/Phase Master\
2^11 - Polarity/Phase Slave\
2^12 - Automation Mode Master\
2^13 - Automation Mode Slave\
2^14 - Reverse Volume\
2^15 - Reverse Pan\
2^16 - Do not master when slaving\
2^17 - Reverse Width\
2^18 - Width Master\
2^19 - Width Slave\
2^20 - VCA Master\
2^21 - VCA Slave\
2^22 - VCA pre-FX slave",
    name = "GROUPSTATE_AS_FLAGS",
   },
   [2] = {
    type = "ARRAY",
    desc = "returns an array with 23 entries. Every entry represents one of the GroupState_as_Flags, but it's value is a flag, that describes, in which of the 32 Groups a certain flag is set.\
e.g. If Volume Master is set only in Group 1, entry 1 in the array will be set to 1. If Volume Master is set on Group 2 and Group 4, the first entry in the array will be set to 10.\
refer to the upper GroupState_as_Flags list to see, which entry in the array is for which set flag, e.g. array[22] is VCA pre-F slave, array[16] is Do not master when slaving, etc\
As said before, the values in each entry is a flag, that tells you, which of the groups is set with a certain flag. The following flags determine, in which group a certain flag is set:\
2^0 - Group 1\
2^1 - Group 2\
2^2 - Group 3\
2^3 - Group 4\
...\
2^30 - Group 31\
2^31 - Group 32",
    name = "INDIVIDUALGROUPSTATE_FLAGS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the groups-state-state; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [129] = {
  fname = "GetProject_MasterGroupFlagsHighState",
  label = "US_GetProject_MasterGroupFlagsHighState",
  run = "in/out",
  desc = "returns the state of the group-high-flags for the Master-Track, as set in the menu Track Grouping Parameters; from an rpp-projectfile or a ProjectStateChunk. \
\
Returns a 23bit flagvalue as well as an array with 32 individual 23bit-flagvalues. You must use bitoperations to get the individual values.\
\
You can reach the Group-Flag-Settings in the context-menu of a track.\
\
The groups_bitfield_table contains up to 23 entries. Every entry represents one of the checkboxes in the Track grouping parameters-dialog\
\
Each entry is a bitfield, that represents the groups, in which this flag is set to checked or unchecked.\
\
So if you want to get Volume Master(table entry 1) to check if it's set in Group 1(2^0=1) and 3(2^2=4):\
  group1=groups_bitfield_table[1]&1\
  group2=groups_bitfield_table[1]&4\
\
The following flags(and their accompanying array-entry-index) are available:\
                       1 - Volume Master\
                       2 - Volume Slave\
                       3 - Pan Master\
                       4 - Pan Slave\
                       5 - Mute Master\
                       6 - Mute Slave\
                       7 - Solo Master\
                       8 - Solo Slave\
                       9 - Record Arm Master\
                       10 - Record Arm Slave\
                       11 - Polarity/Phase Master\
                       12 - Polarity/Phase Slave\
                       13 - Automation Mode Master\
                       14 - Automation Mode Slave\
                       15 - Reverse Volume\
                       16 - Reverse Pan\
                       17 - Do not master when slaving\
                       18 - Reverse Width\
                       19 - Width Master\
                       20 - Width Slave\
                       21 - VCA Master\
                       22 - VCA Slave\
                       23 - VCA pre-FX slave\
\
The GroupState_as_Flags-bitfield is a hint, if a certain flag is set in any of the groups. So, if you want to know, if VCA Master is set in any group, check if flag &1048576 (2^20) is set to 1048576.\
\
This function will work only for Groups 1 to 32. To get Groups 33 to 64, use <a href=\"#GetTrackGroupFlags_HighState\">GetTrackGroupFlags_HighState</a> instead!\
\
It's the entry MASTER_GROUP_FLAGS_HIGH\
\
returns -1 in case of failure",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "returns a flagvalue with 23 bits, that tells you, which grouping-flag is set in at least one of the 32 groups available.\
returns -1 in case of failure\
\
the following flags are available:\
2^0 - Volume Master\
2^1 - Volume Slave\
2^2 - Pan Master\
2^3 - Pan Slave\
2^4 - Mute Master\
2^5 - Mute Slave\
2^6 - Solo Master\
2^7 - Solo Slave\
2^8 - Record Arm Master\
2^9 - Record Arm Slave\
2^10 - Polarity/Phase Master\
2^11 - Polarity/Phase Slave\
2^12 - Automation Mode Master\
2^13 - Automation Mode Slave\
2^14 - Reverse Volume\
2^15 - Reverse Pan\
2^16 - Do not master when slaving\
2^17 - Reverse Width\
2^18 - Width Master\
2^19 - Width Slave\
2^20 - VCA Master\
2^21 - VCA Slave\
2^22 - VCA pre-FX slave",
    name = "GROUPSTATE_AS_FLAGS",
   },
   [2] = {
    type = "ARRAY",
    desc = "returns an array with 23 entries. Every entry represents one of the GroupState_as_Flags, but it's value is a flag, that describes, in which of the 32 Groups a certain flag is set.\
e.g. If Volume Master is set only in Group 1, entry 1 in the array will be set to 1. If Volume Master is set on Group 2 and Group 4, the first entry in the array will be set to 10.\
refer to the upper GroupState_as_Flags list to see, which entry in the array is for which set flag, e.g. array[22] is VCA pre-F slave, array[16] is Do not master when slaving, etc\
As said before, the values in each entry is a flag, that tells you, which of the groups is set with a certain flag. The following flags determine, in which group a certain flag is set:\
2^0 - Group 1\
2^1 - Group 2\
2^2 - Group 3\
2^3 - Group 4\
...\
2^30 - Group 31\
2^31 - Group 32",
    name = "INDIVIDUALGROUPSTATE_FLAGS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the groupshigh-state-state; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [130] = {
  fname = "GetProject_GroupDisabled",
  label = "US_GetProject_GroupDisabled",
  run = "in/out",
  desc = "returns the group-disabled-stated, of the master-track of the project.\
\
It's the entry GROUPS_DISABLED\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the disabled groups; it is a bitfield, with &1 for group 1; &32 for group 32; if it's set, the accompanying group is disabled",
    name = "DISABLED1",
   },
   [2] = {
    type = "INTEGER",
    desc = "the disabled groups_high; it is a bitfield, with &1 for group 33; &32 for group 64; if it's set, the accompanying group is disabled",
    name = "DISABLED2",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the groups-disabled-state; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [131] = {
  fname = "GetProject_MasterHWVolEnvStateChunk",
  label = "US_GetProject_MasterHWVolEnvStateChunk",
  run = "in/out",
  desc = "returns the Master-HWVolEnv-StateChunk, that holds MasterHWVolEnv-settings of the master.\
\
It's the entry <MASTERHWVOLENV ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the HWVolEnv",
    name = "MASTERHWVOLENVSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-hwvolenv-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [132] = {
  fname = "GetProject_MasterFXListStateChunk",
  label = "US_GetProject_MasterFXListStateChunk",
  run = "in/out",
  desc = "returns the Master-FX_List-StateChunk, that holds Master-FX-settings for the window as well as the FX themselves, of the master.\
\
It's the entry <MASTERFXLIST ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Master-FX-list",
    name = "MASTERFXLISTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-fxlist-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [133] = {
  fname = "GetProject_MasterDualPanEnvStateChunk",
  label = "US_GetProject_MasterDualPanEnvStateChunk",
  run = "in/out",
  desc = "returns the Master-DualPanEnv-StateChunk, that holds MasterDualPanEnv-settings of the master.\
\
It's the entry <MASTERDUALPANENV ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Master-DualPan-Env-state",
    name = "MASTERDUALPANENVSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-dualpan-env-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [134] = {
  fname = "GetProject_MasterDualPanEnv2StateChunk",
  label = "US_GetProject_MasterDualPanEnv2StateChunk",
  run = "in/out",
  desc = "returns the Master-DualPanEnv2-StateChunk, that holds master-DualPanEnv2-settings of the master.\
\
It's the entry <MASTERDUALPANENV2 ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Master-DualPan-Env-state",
    name = "MASTERDUALPANENVSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-dualpan-env2-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [135] = {
  fname = "GetProject_MasterDualPanEnvLStateChunk",
  label = "US_GetProject_MasterDualPanEnvLStateChunk",
  run = "in/out",
  desc = "returns the Master-DualPan-EnvL-StateChunk, that holds Master-DualPan-EnvL-settings of the master.\
\
It's the entry <MASTERDUALPANENVL ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Master-DualPan-EnvL-state",
    name = "MASTERDUALPANENVLSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-dualpan-envL-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [136] = {
  fname = "GetProject_MasterDualPanEnvL2StateChunk",
  label = "US_GetProject_MasterDualPanEnvL2StateChunk",
  run = "in/out",
  desc = "returns the Master-Dual-Pan-EnvL2-StateChunk, that holds Master-FX-Dual-Pan-EnvL2-settings of the master.\
\
It's the entry <MASTERDUALPANENVL2 ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Master-DualPan-EnvL2-state",
    name = "MASTERDUALPANENVL2STATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-dualpan-envL2-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [137] = {
  fname = "GetProject_MasterVolEnvStateChunk",
  label = "US_GetProject_MasterVolEnvStateChunk",
  run = "in/out",
  desc = "returns the Master-Vol-Env-StateChunk, that holds Master-Vol-Env-settings of the master.\
\
It's the entry <MASTERVOLENV ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Master-volenv-state",
    name = "MASTERVOLENVSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-volenv-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [138] = {
  fname = "GetProject_MasterVolEnv2StateChunk",
  label = "US_GetProject_MasterVolEnv2StateChunk",
  run = "in/out",
  desc = "returns the Master-Vol-Env2-StateChunk, that holds Master-Vol-Env2-settings of the master.\
\
It's the entry <MASTERVOLENV2 ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Master-volenv2-state",
    name = "MASTERVOLENV2STATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-volenv2-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [139] = {
  fname = "GetProject_MasterVolEnv3StateChunk",
  label = "US_GetProject_MasterVolEnv3StateChunk",
  run = "in/out",
  desc = "returns the Master-Vol-Env3-StateChunk, that holds Master-Vol-Env3-settings of the master.\
\
It's the entry <MASTERVOLENV3 ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Master-volenv3-state",
    name = "MASTERVOLENV3STATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-volenv3-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [140] = {
  fname = "GetProject_MasterHWPanEnvStateChunk",
  label = "US_GetProject_MasterHWPanEnvStateChunk",
  run = "in/out",
  desc = "returns the Master-HW-pan-env-StateChunk, that holds Master-pan-env-settings of the master.\
\
It's the entry <MASTERHWPANENV ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Master-volenv3-state",
    name = "MASTERHWPANENVSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-HW-pan-env-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [141] = {
  fname = "GetProject_MasterPanMode_Ex",
  label = "US_GetProject_MasterPanMode_Ex",
  run = "in/out",
  desc = "returns the Master-HW-pan-mode-ex-StateChunk, that holds Master-pan-mode-ex-settings of the master.\
\
It's the entry <MASTER_PANMODE_EX ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Master-pan-mode-ex",
    name = "MASTERHWPANMODEEX_STATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the master-HW-pan-env-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [142] = {
  fname = "GetProject_TempoEnv_ExStateChunk",
  label = "US_GetProject_TempoEnv_ExStateChunk",
  run = "in/out",
  desc = "returns the TempoEnv_ExStateChunk, that holds TempoEnv_Ex-settings of an rpp-project or ProjectStateChunk.\
\
It's the entry <TEMPOENVEX ... >\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the Tempo-Env-Ex",
    name = "TEMPOENV_EXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the tempo-env-ex-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [143] = {
  fname = "GetProject_Length",
  label = "US_GetProject_Length",
  run = "in/out",
  desc = "Returns the projectlength of an rpp-project-file.\
\
It's eturning the position of the overall length, as well as the position of the last itemedge/regionedge/marker/time-signature-marker of the project.\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the length of the project",
    name = "LENGTH",
   },
   [2] = {
    type = "NUMBER",
    desc = "the postion of the last itemedge in the project",
    name = "LAST_ITEMEDGE",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the last marker/regionedge in the project",
    name = "LAST_MARKER_REG_EDGE",
   },
   [4] = {
    type = "NUMBER",
    desc = "the position of the last time-signature-marker in the project",
    name = "LAST_TIMESIG_MARKER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the project, that you want to know it's length of; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to count the length of; only available when projectfilename_with_path=nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [144] = {
  fname = "CreateTemporaryFileOfProjectfile",
  label = "US_CreateTemporaryFileOfProjectfile",
  run = "in/out",
  desc = "Creates a temporary copy of an rpp-projectfile, which can be altered and rendered again.\
\
Must be deleted by hand using os.remove(tempfile) after you're finished.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the temporary-file, that is a valid copy of the projectfilename_with_path",
    name = "TEMPFILE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the project to render; nil, for the currently opened project(needs to be saved first)",
    name = "PROJECTFILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [145] = {
  fname = "GetProject_Length",
  label = "US_GetProject_Length",
  run = "in/out",
  desc = "Returns the projectlength of an rpp-project-file.\
\
It's eturning the position of the overall length, as well as the position of the last itemedge/regionedge/marker/time-signature-marker of the project.\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the length of the project",
    name = "LENGTH",
   },
   [2] = {
    type = "NUMBER",
    desc = "the postion of the last itemedge in the project",
    name = "LAST_ITEMEDGE",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the last marker/regionedge in the project",
    name = "LAST_MARKER_REG_EDGE",
   },
   [4] = {
    type = "NUMBER",
    desc = "the position of the last time-signature-marker in the project",
    name = "LAST_TIMESIG_MARKER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the project, that you want to know it's length of; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to count the length of; only available when projectfilename_with_path=nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [146] = {
  fname = "SetProject_RenderPattern",
  label = "US_SetProject_RenderPattern",
  run = "in/out",
  desc = "Sets the render-filename in an rpp-projectfile or a ProjectStateChunk. Set it to \"\", if you want to set the render-filename with <a href=\"#SetProject_RenderFilename\">SetProject_RenderFilename</a>.\
\
Capitalizing the first character of the wildcard will capitalize the first letter of the substitution. \
    Capitalizing the first two characters of the wildcard will capitalize all letters.\
    \
    Directories will be created if necessary. For example if the render target \
    is \"$project/track\", the directory \"$project\" will be created.\
    \
    Immediately following a wildcard, character replacement statements may be specified:\
      <X>  -- single character which is to be removed from the substitution. \
                  For example: $track< > removes all spaces from the track name, \
                               $track</><\\> removes all slashes.\
                               \
      <abcdeX> -- multiple characters, abcde are all replaced with X. \
                  \
                  For example: <_.> replaces all underscores with periods, \
                               </\\_> replaces all slashes with underscores. \
                  \
                  If > is specified as a source character, it must be listed first in the list.\
    \
    $item    media item take name, if the input is a media item\
    $itemnumber  1 for the first media item on a track, 2 for the second...\
    $track    track name\
    $tracknumber  1 for the first track, 2 for the second...\
    $parenttrack  parent track name\
    $region    region name\
    $regionnumber  1 for the first region, 2 for the second...\
    $project    project name\
    $tempo    project tempo at the start of the render region\
    $timesignature  project time signature at the start of the render region, formatted as 4-4\
    $filenumber  blank (optionally 1) for the first file rendered, 1 (optionally 2) for the second...\
    $filenumber[N]  N for the first file rendered, N+1 for the second...\
    $note    C0 for the first file rendered,C#0 for the second...\
    $note[X]    X (example: B2) for the first file rendered, X+1 (example: C3) for the second...\
    $natural    C0 for the first file rendered, D0 for the second...\
    $natural[X]  X (example: F2) for the first file rendered, X+1 (example: G2) for the second...\
    $namecount  1 for the first item or region of the same name, 2 for the second...\
    $timelineorder  1 for the first item or region on the timeline, 2 for the second...\
    \
    Position/Length:\
    $start    start time of the media item, render region, or time selection, in M-SS.TTT\
    $end    end time of the media item, render region, or time selection, in M-SS.TTT\
    $length    length of the media item, render region, or time selection, in M-SS.TTT\
    $startbeats  start time in measures.beats of the media item, render region, or time selection\
    $endbeats  end time in measures.beats of the media item, render region, or time selection\
    $lengthbeats    length in measures.beats of the media item, render region, or time selection\
    $starttimecode  start time in H-MM-SS-FF format of the media item, render region, or time selection\
    $endtimecode  end time in H-MM-SS-FF format of the media item, render region, or time selection\
    $startframes  start time in absolute frames of the media item, render region, or time selection\
    $endframes  end time in absolute frames of the media item, render region, or time selection\
    $lengthframes  length in absolute frames of the media item, render region, or time selection\
    $startseconds  start time in whole seconds of the media item, render region, or time selection\
    $endseconds  end time in whole seconds of the media item, render region, or time selection\
    $lengthseconds  length in whole seconds of the media item, render region, or time selection\
    \
    Output Format:\
    $format    render format (example: wav)\
    $samplerate  sample rate (example: 44100)\
    $sampleratek  sample rate (example: 44.1)\
    $bitdepth  bit depth, if available (example: 24 or 32FP)\
    \
    Current Date/Time:\
    $year    year, currently 2019\
    $year2    last 2 digits of the year,currently 19\
    $month    month number,currently 04\
    $monthname  month name,currently apr\
    $day    day of the month, currently 28\
    $hour    hour of the day in 24-hour format,currently 23\
    $hour12    hour of the day in 12-hour format,currently 11\
    $ampm    am if before noon,pm if after noon,currently pm\
    $minute    minute of the hour,currently 30\
    $second    second of the minute,currently 27\
    \
    Computer Information:\
    $user    user name\
    $computer  computer name\
    \
    (this description has been taken from the Render Wildcard Help within the Render-Dialog of Reaper)\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the pattern, with which the rendering-filename will be automatically created. Check also <a href=\"#GetProject_RenderFilename\">GetProject_RenderFilename</a>",
    name = "RENDER_PATTERN",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [147] = {
  fname = "GetProject_RenderFilename",
  label = "US_GetProject_RenderFilename",
  run = "in/out",
  desc = "Returns the render-filename from an RPP-Projectfile or a ProjectStateChunk. If it contains only a path or nothing, you should check the Render_Pattern using <a href=\"#GetProject_RenderPattern\">GetProject_RenderPattern</a>, as a render-pattern influences the rendering-filename as well.\
\
It's the entry RENDER_FILE\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the filename for rendering, check also <a href=\"#GetProject_RenderPattern\">GetProject_RenderPattern</a>",
    name = "RENDER_FILENAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [148] = {
  fname = "GetProject_GroupName",
  label = "US_GetProject_GroupName",
  run = "in/out",
  desc = "Returns the name associated to a specific group of items. There can be more than one!\
\
It is the GROUP-entry in the root of the ProjectStateChunk.\
\
Returns nil in case of error or if no such entry exists.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the associated groupname of the itemgroup; nil, no such group or no name is given(default Group idx)",
    name = "GROUPNAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the item-group, whose name you want to know",
    name = "IDX",
   },
   [3] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [149] = {
  fname = "SetProject_Lock",
  label = "US_SetProject_Lock",
  run = "in/out",
  desc = "Sets the Locked-state of an rpp-projectfile or a ProjectStateChunk.\
\
It's the entry LOCK \
It is the one before(!) any <TRACK-tags !\
\
It is a bitfield, containing numerous settings.\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the lock-state, which is a bitfield\
&1     - Time selection\
&2     - Items (full)\
&4     - Track envelopes\
&8     - Markers\
&16    - Regions\
&32    - Time signature markers\
&64    - Items (prevent left/right movement)\
&128   - Items (prevent up/down movement)\
&256   - Item edges\
&512   - Item fade/volume handles\
&1024  - Loop points locked\
&2048  - Item envelopes\
&4096  - Item stretch markers\
&16384 - Enable locking",
    name = "LOCK_STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [150] = {
  fname = "SetProject_GlobalAuto",
  label = "US_SetProject_GlobalAuto",
  run = "in/out",
  desc = "Sets the global-auto-override-state of an rpp-projectfile or a ProjectStateChunk.\
\
It's the entry GLOBAL_AUTO \
\
This sets the same automation mode to all tracks!\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the global automation override state, this sets the same automation mode to all tracks!\
-1, No global automation override, automation-mode will be set by track\
0, trim/read mode\
1, read mode\
2, touch mode\
3, write mode\
4, latch mode\
5, latch preview mode\
6, bypass all automation",
    name = "GLOBAL_AUTO_STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [151] = {
  fname = "SetProject_Tempo",
  label = "US_SetProject_Tempo",
  run = "in/out",
  desc = "Sets the tempo, bpm, beat, denominator-state of an rpp-projectfile or a ProjectStateChunk.\
\
It's the entry TEMPO \
\
They are set in the Project Settings -> \"Project BPM\" and \"Time signature\"\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tempo of the project in bpm",
    name = "BPM",
   },
   [3] = {
    type = "INTEGER",
    desc = "the beat of the project ",
    name = "BEAT",
   },
   [4] = {
    type = "INTEGER",
    desc = "the denominator for the beat ",
    name = "DENOMINATOR",
   },
   [5] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [152] = {
  fname = "SetProject_Playrate",
  label = "US_SetProject_Playrate",
  run = "in/out",
  desc = "Sets the playrate of an rpp-projectfile or a ProjectStateChunk.\
\
It's the entry PLAYRATE \
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "NUMBER",
    desc = "the currently set playrate; 0.01 to 10",
    name = "PLAYRATE",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, don't preserve pitch, when changing playrate; 1, preserve pitch, when chaning playrate ",
    name = "PRESERVE_PITCH",
   },
   [4] = {
    type = "NUMBER",
    desc = "the minimum playrate possible in the project; 0.01 to 10",
    name = "MIN_PLAYRATE",
   },
   [5] = {
    type = "NUMBER",
    desc = "the maximum playrate possible in the project; 0.01 to 10",
    name = "MAX_PLAYRATE",
   },
   [6] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [153] = {
  fname = "SetProject_MasterAutomode",
  label = "US_SetProject_MasterAutomode",
  run = "in/out",
  desc = "Sets the automation-mode for the master-track of an rpp-projectfile or a ProjectStateChunk.\
\
It's the entry MASTERAUTOMODE \
\
This sets the same automation mode to all tracks!\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the automation mode for the master-track\
0, trim/read mode\
1, read mode\
2, touch mode\
3, write mode\
4, latch mode\
5, latch preview mode",
    name = "AUTOMODE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [154] = {
  fname = "SetProject_MasterSel",
  label = "US_SetProject_MasterSel",
  run = "in/out",
  desc = "Sets the selection-state for the master-track of an rpp-projectfile or a ProjectStateChunk.\
\
It's the entry MASTER_SEL \
\
This sets the same automation mode to all tracks!\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the selection-state of the MasterTrack; 0, unselected; 1, selected",
    name = "SELECTION_STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [155] = {
  fname = "SetProject_MasterMuteSolo",
  label = "US_SetProject_MasterMuteSolo",
  run = "in/out",
  desc = "Sets the mute/solo-state for the master-track of an rpp-projectfile or a ProjectStateChunk.\
Has no exclusive-solo/mute-settings!\
\
It's the entry MASTERMUTESOLO \
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the mute-solo-state; it is a bitfield\
  0, no mute, no solo, Mono mode L+R\
  &1, master-track muted\
  &2, master-track soloed\
  &4, master-track mono-button\
  &8, Mono mode:L\
  &16, Mono mode:R\
  add 24 for Mono mode L-R ",
    name = "MUTE_SOLO_STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [156] = {
  fname = "SetProject_MasterFXByp",
  label = "US_SetProject_MasterFXByp",
  run = "in/out",
  desc = "Sets the fx-bypass-state for the master-track of an rpp-projectfile or a ProjectStateChunk.\
\
It's the entry MASTER_FX \
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx-bypass-state; 0, master-track-fx bypassed; 1, master-track-fx normal ",
    name = "FX_BYP_STATE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [157] = {
  fname = "SetProject_MasterNChans",
  label = "US_SetProject_MasterNChans",
  run = "in/out",
  desc = "Sets the number of channels and vu-meter-settings for the master-track of an rpp-projectfile or a ProjectStateChunk.\
\
It's the entry MASTER_NCH \
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of output-channels, as set in the \"Outputs for the Master Channel -> Track Channels\"-dialog ",
    name = "NUMBER_OF_CHANNELS",
   },
   [3] = {
    type = "INTEGER",
    desc = "2, Multichannel peak metering-setting, as set in the \"Master VU settings\"-dialog ",
    name = "PEAK_METERING",
   },
   [4] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [158] = {
  fname = "SetProject_MasterTrackHeight",
  label = "US_SetProject_MasterTrackHeight",
  run = "in/out",
  desc = "Sets the trackheight for the master-track of an rpp-projectfile or a ProjectStateChunk.\
\
It's the entry MASTERTRACKHEIGHT \
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current-height of the master-track, from 24 to 260 ",
    name = "HEIGHT_STATE",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, height-lock is off; 1, height-lock is on ",
    name = "HEIGHT_LOCK",
   },
   [4] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [159] = {
  fname = "SetProject_MasterTrackColor",
  label = "US_SetProject_MasterTrackColor",
  run = "in/out",
  desc = "Sets the color for the master-track of an rpp-projectfile or a ProjectStateChunk.\
\
To generate the correct color-value, use [ConvertColor](#ConvertColor).\
Note: This color reverses red and blue component on Mac, so it looks different on Mac compared to Windows and Linux!\
\
It's the entry MASTERPEAKCOL \
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the color-value of the MasterTrack",
    name = "COLOR",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [160] = {
  fname = "SetProject_MasterPanMode",
  label = "US_SetProject_MasterPanMode",
  run = "in/out",
  desc = "Sets the panmode for the master-track of an rpp-projectfile or a ProjectStateChunk.\
\
It's the entry MASTER_PANMODE \
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the panmode for the master-track;\
 -1, Project default (Stereo balance)\
  3, Stereo balance  / mono pan(default)\
  5, Stereo Pan\
  6, Dual Pan\
  nil, REAPER 3.x balance(deprecated)",
    name = "PANMODE",
   },
   [3] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [161] = {
  fname = "SetProject_MasterTrackView",
  label = "US_SetProject_MasterTrackView",
  run = "in/out",
  desc = "Sets the master-view-state of the master-track of the project or a ProjectStateChunk.\
\
It is the entry: MASTERTRACKVIEW\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered ProjectStateChunk",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, Master-track is invisible in MCP; 1, Master-track is visible in MCP",
    name = "TCP_VISIBILITY",
   },
   [3] = {
    type = "NUMBER",
    desc = "unknown",
    name = "STATE2",
   },
   [4] = {
    type = "NUMBER",
    desc = "unknown",
    name = "STATE3",
   },
   [5] = {
    type = "NUMBER",
    desc = "unknown",
    name = "STATE4",
   },
   [6] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE5",
   },
   [7] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE6",
   },
   [8] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE7",
   },
   [9] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE8",
   },
   [10] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE9",
   },
   [11] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE10",
   },
   [12] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE11",
   },
   [13] = {
    type = "INTEGER",
    desc = "unknown",
    name = "STATE12",
   },
   [14] = {
    type = "NUMBER",
    desc = "unknown    ",
    name = "STATE13",
   },
   [15] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [162] = {
  fname = "GetProject_Render_Normalize",
  label = "US_GetProject_Render_Normalize",
  run = "in/out",
  desc = "returns the master-view-state of the master-track of the project or a ProjectStateChunk.\
\
It's the entry RENDER_NORMALIZE\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the normalize-method\
&1, Enable normalizing\
    0, unchecked(off)\
    1, checked(on)\
0, LUFS-I\
2 , RMS-I\
4, Peak\
6, True Peak\
8, LUFS-M max\
10, LUFS-S max\
&32, Normalize stems to master target-checkbox\
    0, unchecked(off)\
    1, checked(on)\
&64, Brickwall-enabled-checkbox\
    0, unchecked(off)\
    1, checked(on)\
&128, Brickwall-mode\
    0, Peak\
    1, True Peak\
&256, only normalize files that are too loud\
    0, disabled\
    1, enabled",
    name = "RENDER_NORMALIZE_METHOD",
   },
   [2] = {
    type = "NUMBER",
    desc = "the normalize-target as amp-volume. Use ultraschall.MKVOL2DB to convert it to dB.",
    name = "NORMALIZE_TARGET",
   },
   [3] = {
    type = "NUMBER",
    desc = "the brickwall-target as amp-volume. Use ultraschall.MKVOL2DB to convert it to dB.    ",
    opt = {
     use = false,
    },
    name = "BRICKWALL_TARGET",
   },
   [4] = {
    type = "NUMBER",
    desc = "the length of the fade-in in seconds(use fractions for milliseconds)",
    opt = {
     use = false,
    },
    name = "FADEIN_LENGTH",
   },
   [5] = {
    type = "NUMBER",
    desc = "the length of the fade-out in seconds(use fractions for milliseconds)",
    opt = {
     use = false,
    },
    name = "FADEOUT_LENGTH",
   },
   [6] = {
    type = "INTEGER",
    desc = "the shape of the fade-in-curve\
0, linear fade-in\
1, inverted quadratic fade-in\
2, quadratic fade-in\
3, inverted quartic fade-in\
4, quartic fade-in\
5, Cosine S-curve fade-in\
6, Quartic S-curve fade-in",
    opt = {
     use = false,
    },
    name = "FADEIN_SHAPE",
   },
   [7] = {
    type = "INTEGER",
    desc = "the shape of the fade-out-curve\
0, linear fade-out\
1, inverted quadratic fade-out\
2, quadratic fade-out\
3, inverted quartic fade-out\
4, quartic fade-out\
5, Cosine S-curve fade-out\
6, Quartic S-curve fade-out",
    opt = {
     use = false,
    },
    name = "FADEOUT_SHAPE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the trackview-states; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [163] = {
  fname = "SetProject_Render_Normalize",
  label = "US_SetProject_Render_Normalize",
  run = "in/out",
  desc = "Sets the panmode for the master-track of an rpp-projectfile or a ProjectStateChunk.\
\
It's the entry RENDER_NORMALIZE\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the projectfile; nil, to use Parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the normalize-method\
&1, Enable normalizing\
    0, unchecked(off)\
    1, checked(on)\
0, LUFS-I\
2 , RMS-I\
4, Peak\
6, True Peak\
8, LUFS-M max\
10, LUFS-S max\
&32, Normalize stems to master target-checkbox\
    0, unchecked(off)\
    1, checked(on)\
&64, Brickwall-enabled-checkbox\
    0, unchecked(off)\
    1, checked(on)\
&128, Brickwall-mode\
    0, Peak\
    1, True Peak\
&256, only normalize files that are too loud\
    0, disabled\
    1, enabled",
    name = "RENDER_NORMALIZE_METHOD",
   },
   [3] = {
    type = "NUMBER",
    desc = "the normalize-target as amp-volume. Use ultraschall.DB2MKVOL to convert it from dB.",
    name = "NORMALIZE_TARGET",
   },
   [4] = {
    type = "STRING",
    desc = "a projectstatechunk, that you want to be changed",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
   [5] = {
    type = "NUMBER",
    desc = "the brickwall-normalizatin-target as amp-volume. Use ultraschall.DB2MKVOL to convert it from dB.",
    opt = {
     use = false,
    },
    name = "BRICKWALL_TARGET",
   },
   [6] = {
    type = "NUMBER",
    desc = "the length of the fade-in in seconds(use fractions for milliseconds)",
    opt = {
     use = false,
    },
    name = "FADEIN_LENGTH",
   },
   [7] = {
    type = "NUMBER",
    desc = "the length of the fade-out in seconds(use fractions for milliseconds)",
    opt = {
     use = false,
    },
    name = "FADEOUT_LENGTH",
   },
   [8] = {
    type = "INTEGER",
    desc = "the shape of the fade-in-curve\
0, linear fade-in\
1, inverted quadratic fade-in\
2, quadratic fade-in\
3, inverted quartic fade-in\
4, quartic fade-in\
5, Cosine S-curve fade-in\
6, Quartic S-curve fade-in",
    opt = {
     use = false,
    },
    name = "FADEIN_SHAPE",
   },
   [9] = {
    type = "INTEGER",
    desc = "the shape of the fade-out-curve\
0, linear fade-out\
1, inverted quadratic fade-out\
2, quadratic fade-out\
3, inverted quartic fade-out\
4, quartic fade-out\
5, Cosine S-curve fade-out\
6, Quartic S-curve fade-out",
    opt = {
     use = false,
    },
    name = "FADEOUT_SHAPE",
   },
  },
  sp_api = "ultraschall",
 },
 [164] = {
  fname = "IsValidFXStateChunk",
  label = "US_IsValidFXStateChunk",
  run = "in/out",
  desc = "Returns, if a StateChunk is a valid FXStateChunk.\
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem or inputFX.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, it is a valid FXStateChunk; false, it is not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the StateChunk, which you want to check, whether it's a valid FXStateChunk",
    name = "STATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [165] = {
  fname = "GetFXFromFXStateChunk",
  label = "US_GetFXFromFXStateChunk",
  run = "in/out",
  desc = "returns the statechunk-lines of fx with fxindex from an FXStateChunk\
\
It also returns the start and endoffset of these lines, so you can manipulate these lines and replace them in the\
original FXStateChunk, by replacing the part between start and endoffset with your altered lines.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk-lines associated with this fx",
    name = "FX_LINES",
   },
   [2] = {
    type = "INTEGER",
    desc = "the startoffset in bytes of these lines within the FXStateChunk",
    name = "STARTOFFSET",
   },
   [3] = {
    type = "INTEGER",
    desc = "the endoffset in bytes of these lines within the FXStateChunk",
    name = "ENDOFFSET",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk from which you want to retrieve the fx's-lines",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the fx, whose statechunk lines you want to retrieve; with 1 for the first",
    name = "FXINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [166] = {
  fname = "GetParmLearn_FXStateChunk",
  label = "US_GetParmLearn_FXStateChunk",
  run = "in/out",
  desc = "Returns a parameter-learn-setting from an FXStateChunk\
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.\
\
It is the PARMLEARN-entry\
\
See [GetParmLearnID\\_by\\_FXParam\\_FXStateChunk](#GetParmLearnID_by_FXParam_FXStateChunk) to get the parmlearn_id by fx-parameter-index instead of parm_id.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn",
    name = "PARM_IDX",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the parameter, though usually only \"wet\" or \"byp\" or \"\"\
to get the actual displayed parametername, you need to \
use the reaper.TrackFX_GetParamName-function",
    name = "PARMNAME",
   },
   [3] = {
    type = "INTEGER",
    desc = "the midinote, that is assigned to this; this is a multibyte value, with the first byte\
  being the MIDI-mode, and the second byte the MIDI/CC-note\
      0,   OSC is used\
      176, MIDI Chan 1 CC 0     (Byte1=176, Byte2=0)\
      ...\
      432, MIDI Chan 1 CC 1     (Byte1=176, Byte2=1)\
      ...\
      144,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=0)\
      400,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=1)\
      ...\
      9360, MIDI Chan 1 Note 36 (Byte1=144, Byte2=36)\
      9616, MIDI Chan 1 Note 37 (Byte1=144, Byte2=37)\
      9872, MIDI Chan 1 Note 38 (Byte1=144, Byte2=38)\
        ...\
        \
  CC Mode-dropdownlist:\
     set the following flags to their specific values (0=0, 1=the value beginning &, like &65536 or &131072 or &262144)\
      &65536 &131072 &262144 \
         0       0       0,      Absolute\
         1       0       0,      Relative 1(127=-1, 1=+1)\
         0       1       0,      Relative 2(63=-1, 65=+1)\
         1       1       0,      Relative 3(65=-1, 1=+1)\
         0       0       1,      Toggle (>0=toggle)",
    name = "MIDI_NOTE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the checkboxes checked in the MIDI/OSC-learn dialog\
0, no checkboxes\
1, enable only when track or item is selected\
2, Soft takeover (absolute mode only)\
3, Soft takeover (absolute mode only)+enable only when track or item is selected\
4, enable only when effect configuration is focused\
20, enable only when effect configuration is visible",
    name = "CHECKBOXFLAGS",
   },
   [5] = {
    type = "STRING",
    desc = "the osc-message, that triggers the ParmLearn",
    opt = {
     use = false,
    },
    name = "OSC_MESSAGE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from which you want to retrieve the ParmLearn-settings",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parameter-learn-settings",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the ParmLearn-settings you want to have, starting with 1 for the first",
    name = "PARMLEARN_ID",
   },
  },
  sp_api = "ultraschall",
 },
 [167] = {
  fname = "GetParmLearn_MediaItem",
  label = "US_GetParmLearn_MediaItem",
  run = "in/out",
  desc = "Returns a parameter-learn-setting from a MediaItem\
\
It is the PARMLEARN-entry\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn",
    name = "PARM_IDX",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the parameter, though usually only wet or bypass",
    name = "PARMNAME",
   },
   [3] = {
    type = "INTEGER",
    desc = "the midinote, that is assigned to this; this is a multibyte value, with the first byte\
  being the MIDI-mode, and the second byte the MIDI/CC-note\
      0,   OSC is used\
      176, MIDI Chan 1 CC 0     (Byte1=176, Byte2=0)\
      ...\
      432, MIDI Chan 1 CC 1     (Byte1=176, Byte2=1)\
      ...\
      144,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=0)\
      400,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=1)\
      ...\
      9360, MIDI Chan 1 Note 36 (Byte1=144, Byte2=36)\
      9616, MIDI Chan 1 Note 37 (Byte1=144, Byte2=37)\
      9872, MIDI Chan 1 Note 38 (Byte1=144, Byte2=38)\
        ...\
        \
  CC Mode-dropdownlist:\
     set the following flags to their specific values (0=0, 1=the value beginning &, like &65536 or &131072 or &262144)\
      &65536 &131072 &262144 \
         0       0       0,      Absolute\
         1       0       0,      Relative 1(127=-1, 1=+1)\
         0       1       0,      Relative 2(63=-1, 65=+1)\
         1       1       0,      Relative 3(65=-1, 1=+1)\
         0       0       1,      Toggle (>0=toggle)",
    name = "MIDI_NOTE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the checkboxes checked in the MIDI/OSC-learn dialog\
0, no checkboxes\
1, enable only when track or item is selected\
2, Soft takeover (absolute mode only)\
3, Soft takeover (absolute mode only)+enable only when track or item is selected\
4, enable only when effect configuration is focused\
20, enable only when effect configuration is visible",
    name = "CHECKBOXFLAGS",
   },
   [5] = {
    type = "STRING",
    desc = "the osc-message, that triggers the ParmLearn",
    opt = {
     use = false,
    },
    name = "OSC_MESSAGE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose ParmLearn-setting you want to get",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parameter-learn-settings",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the ParmLearn-settings you want to have, starting with 1 for the first",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [168] = {
  fname = "GetParmLearn_MediaTrack",
  label = "US_GetParmLearn_MediaTrack",
  run = "in/out",
  desc = "Returns a parameter-learn-setting from a MediaTrack\
\
It is the PARMLEARN-entry\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn",
    name = "PARM_IDX",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the parameter, though usually only wet or bypass",
    name = "PARMNAME",
   },
   [3] = {
    type = "INTEGER",
    desc = "the midinote, that is assigned to this; this is a multibyte value, with the first byte\
  being the MIDI-mode, and the second byte the MIDI/CC-note\
      0,   OSC is used\
      176, MIDI Chan 1 CC 0     (Byte1=176, Byte2=0)\
      ...\
      432, MIDI Chan 1 CC 1     (Byte1=176, Byte2=1)\
      ...\
      144,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=0)\
      400,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=1)\
      ...\
      9360, MIDI Chan 1 Note 36 (Byte1=144, Byte2=36)\
      9616, MIDI Chan 1 Note 37 (Byte1=144, Byte2=37)\
      9872, MIDI Chan 1 Note 38 (Byte1=144, Byte2=38)\
        ...\
        \
  CC Mode-dropdownlist:\
     set the following flags to their specific values (0=0, 1=the value beginning &, like &65536 or &131072 or &262144)\
      &65536 &131072 &262144 \
         0       0       0,      Absolute\
         1       0       0,      Relative 1(127=-1, 1=+1)\
         0       1       0,      Relative 2(63=-1, 65=+1)\
         1       1       0,      Relative 3(65=-1, 1=+1)\
         0       0       1,      Toggle (>0=toggle)",
    name = "MIDI_NOTE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the checkboxes checked in the MIDI/OSC-learn dialog\
0, no checkboxes\
1, enable only when track or item is selected\
2, Soft takeover (absolute mode only)\
3, Soft takeover (absolute mode only)+enable only when track or item is selected\
4, enable only when effect configuration is focused\
20, enable only when effect configuration is visible",
    name = "CHECKBOXFLAGS",
   },
   [5] = {
    type = "STRING",
    desc = "the osc-message, that triggers the ParmLearn",
    opt = {
     use = false,
    },
    name = "OSC_MESSAGE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack, whose ParmLearn-setting you want to get",
    name = "MEDIATRACK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parameter-learn-settings",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the ParmLearn-settings you want to have, starting with 1 for the first",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [169] = {
  fname = "GetParmAlias_FXStateChunk",
  label = "US_GetParmAlias_FXStateChunk",
  run = "in/out",
  desc = "Returns a parameter-alias-setting from an FXStateChunk\
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.\
\
Parameter-aliases are only stored for MediaTracks.\
\
It is the PARMALIAS-entry\
\
See [GetParmAliasID\\_by\\_FXParam\\_FXStateChunk](#GetParmAliasID_by_FXParam_FXStateChunk) to get the parameter id by fx-parameter-index instead.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn",
    name = "PARM_IDX",
   },
   [2] = {
    type = "STRING",
    desc = "the alias-name of the parameter",
    name = "PARM_ALIASNAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from which you want to retrieve the ParmAlias-settings",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parameter-alias-settings",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the ParmAlias-settings you want to have, starting with 1 for the first",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [170] = {
  fname = "GetParmAlias_MediaTrack",
  label = "US_GetParmAlias_MediaTrack",
  run = "in/out",
  desc = "Returns a parameter-aliasname-setting from a MediaTrack\
\
It is the PARMALIAS-entry\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn",
    name = "PARM_IDX",
   },
   [2] = {
    type = "STRING",
    desc = "the alias-name of the parameter",
    name = "PARM_ALIASNAME",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack, whose ParmAlias-setting you want to get",
    name = "MEDIATRACK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parameter-alias-settings",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the ParmAlias-settings you want to have, starting with 1 for the first",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [171] = {
  fname = "GetParmModulationChunk_FXStateChunk",
  label = "US_GetParmModulationChunk_FXStateChunk",
  run = "in/out",
  desc = "Returns a parameter-modulation-chunk from an FXStateChunk\
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.\
\
It's the <PROGRAMENV entry\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "a chunk of the parameter-modulation settings",
    name = "PARM_MODULATION_CHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from which you want to retrieve the Parameter-modulation-settings",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parameter-modulation-chunk-settings",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the Parameter-modulation you want to have, starting with 1 for the first",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [172] = {
  fname = "GetParmLFOLearn_FXStateChunk",
  label = "US_GetParmLFOLearn_FXStateChunk",
  run = "in/out",
  desc = "Returns a parameter-lfo-learn-setting from an FXStateChunk\
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.\
\
It is the LFOLEARN-entry\
\
See [GetParmLFOLearnID\\_by\\_FXParam\\_FXStateChunk](#GetParmLFOLearnID_by_FXParam_FXStateChunk) to get the parameter id by fx-parameter-index instead.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn",
    name = "PARM_IDX",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the parameter, though usually only wet or bypass",
    name = "PARMNAME",
   },
   [3] = {
    type = "INTEGER",
    desc = "the midinote, that is assigned to this; this is a multibyte value, with the first byte\
being the MIDI-mode, and the second byte the MIDI/CC-note\
      0,   OSC is used\
      176, MIDI Chan 1 CC 0     (Byte1=176, Byte2=0)\
      ...\
      432, MIDI Chan 1 CC 1     (Byte1=176, Byte2=1)\
      ...\
      144,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=0)\
      400,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=1)\
      ...\
      9360, MIDI Chan 1 Note 36 (Byte1=144, Byte2=36)\
      9616, MIDI Chan 1 Note 37 (Byte1=144, Byte2=37)\
      9872, MIDI Chan 1 Note 38 (Byte1=144, Byte2=38)\
        ...        \
             \
       CC Mode-dropdownlist:\
          set the following flags to their specific values (0=0, 1=the value beginning &, like &65536 or &131072 or &262144)\
           &65536 &131072 &262144 \
              0       0       0,      Absolute\
              1       0       0,      Relative 1(127=-1, 1=+1)\
              0       1       0,      Relative 2(63=-1, 65=+1)\
              1       1       0,      Relative 3(65=-1, 1=+1)\
              0       0       1,      Toggle (>0=toggle) ",
    name = "MIDI_NOTE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the checkboxes checked in the MIDI/OSC-learn dialog\
0, no checkboxes\
1, enable only when track or item is selected\
2, Soft takeover (absolute mode only)\
3, Soft takeover (absolute mode only)+enable only when track or item is selected\
4, enable only when effect configuration is focused\
20, enable only when effect configuration is visible",
    name = "CHECKBOXFLAGS",
   },
   [5] = {
    type = "STRING",
    desc = "the osc-message, that triggers the ParmLFOLearn",
    opt = {
     use = false,
    },
    name = "OSC_MESSAGE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from which you want to retrieve the ParmLFOLearn-settings",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parameter-lfo-learn-settings",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the ParmLFOLearn-settings you want to have, starting with 1 for the first",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [173] = {
  fname = "GetParmLFOLearn_MediaItem",
  label = "US_GetParmLFOLearn_MediaItem",
  run = "in/out",
  desc = "Returns a parameter-lfo-learn-setting from a MediaItem\
\
It is the LFOLEARN-entry\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn",
    name = "PARM_IDX",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the parameter, though usually only wet or bypass",
    name = "PARMNAME",
   },
   [3] = {
    type = "INTEGER",
    desc = "the midinote, that is assigned to this; this is a multibyte value, with the first byte\
being the MIDI-mode, and the second byte the MIDI/CC-note\
      0,   OSC is used\
      176, MIDI Chan 1 CC 0     (Byte1=176, Byte2=0)\
      ...\
      432, MIDI Chan 1 CC 1     (Byte1=176, Byte2=1)\
      ...\
      144,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=0)\
      400,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=1)\
      ...\
      9360, MIDI Chan 1 Note 36 (Byte1=144, Byte2=36)\
      9616, MIDI Chan 1 Note 37 (Byte1=144, Byte2=37)\
      9872, MIDI Chan 1 Note 38 (Byte1=144, Byte2=38)\
        ...        \
             \
       CC Mode-dropdownlist:\
          set the following flags to their specific values (0=0, 1=the value beginning &, like &65536 or &131072 or &262144)\
           &65536 &131072 &262144 \
              0       0       0,      Absolute\
              1       0       0,      Relative 1(127=-1, 1=+1)\
              0       1       0,      Relative 2(63=-1, 65=+1)\
              1       1       0,      Relative 3(65=-1, 1=+1)\
              0       0       1,      Toggle (>0=toggle) ",
    name = "MIDI_NOTE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the checkboxes checked in the MIDI/OSC-learn dialog\
0, no checkboxes\
1, enable only when track or item is selected\
2, Soft takeover (absolute mode only)\
3, Soft takeover (absolute mode only)+enable only when track or item is selected\
4, enable only when effect configuration is focused\
20, enable only when effect configuration is visible",
    name = "CHECKBOXFLAGS",
   },
   [5] = {
    type = "STRING",
    desc = "the osc-message, that triggers the ParmLFOLearn",
    opt = {
     use = false,
    },
    name = "OSC_MESSAGE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose ParmLFOLearn-setting you want to get",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parameter-lfo-learn-settings",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the ParmLFOLearn-settings you want to have, starting with 1 for the first",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [174] = {
  fname = "GetParmLFOLearn_MediaTrack",
  label = "US_GetParmLFOLearn_MediaTrack",
  run = "in/out",
  desc = "Returns a parameter-lfo-learn-setting from a MediaTrack\
\
It is the LFOLEARN-entry\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn",
    name = "PARM_IDX",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the parameter, though usually only wet or bypass",
    name = "PARMNAME",
   },
   [3] = {
    type = "INTEGER",
    desc = "the midinote, that is assigned to this; this is a multibyte value, with the first byte\
being the MIDI-mode, and the second byte the MIDI/CC-note\
      0,   OSC is used\
      176, MIDI Chan 1 CC 0     (Byte1=176, Byte2=0)\
      ...\
      432, MIDI Chan 1 CC 1     (Byte1=176, Byte2=1)\
      ...\
      144,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=0)\
      400,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=1)\
      ...\
      9360, MIDI Chan 1 Note 36 (Byte1=144, Byte2=36)\
      9616, MIDI Chan 1 Note 37 (Byte1=144, Byte2=37)\
      9872, MIDI Chan 1 Note 38 (Byte1=144, Byte2=38)\
        ...        \
             \
       CC Mode-dropdownlist:\
          set the following flags to their specific values (0=0, 1=the value beginning &, like &65536 or &131072 or &262144)\
           &65536 &131072 &262144 \
              0       0       0,      Absolute\
              1       0       0,      Relative 1(127=-1, 1=+1)\
              0       1       0,      Relative 2(63=-1, 65=+1)\
              1       1       0,      Relative 3(65=-1, 1=+1)\
              0       0       1,      Toggle (>0=toggle) ",
    name = "MIDI_NOTE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the checkboxes checked in the MIDI/OSC-learn dialog\
0, no checkboxes\
1, enable only when track or item is selected\
2, Soft takeover (absolute mode only)\
3, Soft takeover (absolute mode only)+enable only when track or item is selected\
4, enable only when effect configuration is focused\
20, enable only when effect configuration is visible",
    name = "CHECKBOXFLAGS",
   },
   [5] = {
    type = "STRING",
    desc = "the osc-message, that triggers the ParmLFOLearn",
    opt = {
     use = false,
    },
    name = "OSC_MESSAGE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack, whose ParmLFOLearn-setting you want to get",
    name = "MEDIATRACK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parameter-lfo-learn-settings",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the ParmLFOLearn-settings you want to have, starting with 1 for the first",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [175] = {
  fname = "ScanDXPlugins",
  label = "US_ScanDXPlugins",
  run = "in/out",
  desc = "(Re-)scans all DX-Plugins.",
  out = {
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, re-scan all DX-plugins; false or nil, only scan new DX-plugins",
    opt = {
     use = false,
    },
    name = "CLEAR_CACHE",
   },
  },
  sp_api = "ultraschall",
 },
 [176] = {
  fname = "DeleteParmLearn_FXStateChunk",
  label = "US_DeleteParmLearn_FXStateChunk",
  run = "in/out",
  desc = "Deletes a ParmLearn-entry from an FXStateChunk.\
  \
Unlike [DeleteParmLearn2\\_FXStateChunk](#DeleteParmLearn2_FXStateChunk), this indexes by the already existing parmlearns and not by parameters.\
\
See [GetParmLearnID\\_by\\_FXParam\\_FXStateChunk](#GetParmLearnID_by_FXParam_FXStateChunk) to get the parmlearn_id by fx-parameter-index instead of parm_id.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if deletion was successful; false, if the function couldn't delete anything",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered FXStateChunk",
    name = "ALTEREDFXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, which you want to delete a ParmLearn from",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-delete-ParmLearn-entry; beginning with 1",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the ParmLearn-entry to delete; beginning with 1",
    name = "PARMLEARN_ID",
   },
  },
  sp_api = "ultraschall",
 },
 [177] = {
  fname = "DeleteParmAlias_FXStateChunk",
  label = "US_DeleteParmAlias_FXStateChunk",
  run = "in/out",
  desc = "Deletes a ParmAlias-entry from an FXStateChunk.\
\
It's the PARMALIAS-entry\
\
See [GetParmAliasID\\_by\\_FXParam\\_FXStateChunk](#GetParmAliasID_by_FXParam_FXStateChunk) to get the parameter id by fx-parameter-index instead.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if deletion was successful; false, if the function couldn't delete anything",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered FXStateChunk",
    name = "ALTEREDFXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, which you want to delete a ParmAlias from",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-delete-ParmAlias-entry; beginning with 1",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the ParmAlias-entry to delete; beginning with 1",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [178] = {
  fname = "DeleteParmLFOLearn_FXStateChunk",
  label = "US_DeleteParmLFOLearn_FXStateChunk",
  run = "in/out",
  desc = "Deletes a ParmLFO-Learn-entry from an FXStateChunk.\
\
It's the LFOLEARN-entry\
\
See [GetParmLFOLearnID\\_by\\_FXParam\\_FXStateChunk](#GetParmLFOLearnID_by_FXParam_FXStateChunk) to get the parameter id by fx-parameter-index instead.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if deletion was successful; false, if the function couldn't delete anything",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered FXStateChunk",
    name = "ALTEREDFXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, which you want to delete a ParmLFO-Learn-entry from",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-delete-ParmLFO-Learn-entry; beginning with 1",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the ParmLFO-Learn-entry to delete; beginning with 1",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [179] = {
  fname = "SetParmLFOLearn_FXStateChunk",
  label = "US_SetParmLFOLearn_FXStateChunk",
  run = "in/out",
  desc = "Sets an already existing ParmLFO-Learn-entry of an FX-plugin from an FXStateChunk.\
\
It's the LFOLEARN-entry\
\
See [GetParmLFOLearnID\\_by\\_FXParam\\_FXStateChunk](#GetParmLFOLearnID_by_FXParam_FXStateChunk) to get the parameter id by fx-parameter-index instead.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLFO)",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered FXStateChunk",
    opt = {
     use = false,
    },
    name = "ALTEREDFXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, in which you want to set a ParmLFO-Learn-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-set-ParmLFO-Learn-entry; beginning with 1",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the ParmLFO-Learn-entry to set; beginning with 1",
    name = "ID",
   },
   [4] = {
    type = "INTEGER",
    desc = "the midinote, that is assigned to this; this is a multibyte value, with the first byte\
being the MIDI-mode, and the second byte the MIDI/CC-note\
      0,   OSC is used\
      176, MIDI Chan 1 CC 0     (Byte1=176, Byte2=0)\
      ...\
      432, MIDI Chan 1 CC 1     (Byte1=176, Byte2=1)\
      ...\
      144,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=0)\
      400,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=1)\
      ...\
      9360, MIDI Chan 1 Note 36 (Byte1=144, Byte2=36)\
      9616, MIDI Chan 1 Note 37 (Byte1=144, Byte2=37)\
      9872, MIDI Chan 1 Note 38 (Byte1=144, Byte2=38)\
        ...        \
             \
       CC Mode-dropdownlist:\
          set the following flags to their specific values (0=0, 1=the value beginning &, like &65536 or &131072 or &262144)\
           &65536 &131072 &262144 \
              0       0       0,      Absolute\
              1       0       0,      Relative 1(127=-1, 1=+1)\
              0       1       0,      Relative 2(63=-1, 65=+1)\
              1       1       0,      Relative 3(65=-1, 1=+1)\
              0       0       1,      Toggle (>0=toggle) ",
    name = "MIDI_NOTE",
   },
   [5] = {
    type = "INTEGER",
    desc = "the checkboxes checked in the MIDI/OSC-learn dialog\
   0, no checkboxes\
   1, enable only when track or item is selected\
   2, Soft takeover (absolute mode only)\
   3, Soft takeover (absolute mode only)+enable only when track or item is selected\
   4, enable only when effect configuration is focused\
   20, enable only when effect configuration is visible ",
    name = "CHECKBOXFLAGS",
   },
   [6] = {
    type = "STRING",
    desc = "the osc-message, that triggers the ParmLFOLearn, only when midi_note is set to 0!",
    opt = {
     use = false,
    },
    name = "OSC_MESSAGE",
   },
  },
  sp_api = "ultraschall",
 },
 [180] = {
  fname = "SetParmLearn_FXStateChunk",
  label = "US_SetParmLearn_FXStateChunk",
  run = "in/out",
  desc = "Sets an already existing Parm-Learn-entry of an FX-plugin from an FXStateChunk.\
\
It's the PARMLEARN-entry\
\
See [GetParmLearnID\\_by\\_FXParam\\_FXStateChunk](#GetParmLearnID_by_FXParam_FXStateChunk) to get the parmlearn_id by fx-parameter-index instead of parm_id.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLearn)",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered FXStateChunk",
    opt = {
     use = false,
    },
    name = "ALTEREDFXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, in which you want to set a Parm-Learn-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-set-Parm-Learn-entry; beginning with 1",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the Parm-Learn-entry to set; beginning with 1",
    name = "PARMLEARN_ID",
   },
   [4] = {
    type = "INTEGER",
    desc = "the midinote, that is assigned to this; this is a multibyte value, with the first byte\
  being the MIDI-mode, and the second byte the MIDI/CC-note\
      0,   OSC is used\
      176, MIDI Chan 1 CC 0     (Byte1=176, Byte2=0)\
      ...\
      432, MIDI Chan 1 CC 1     (Byte1=176, Byte2=1)\
      ...\
      144,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=0)\
      400,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=1)\
      ...\
      9360, MIDI Chan 1 Note 36 (Byte1=144, Byte2=36)\
      9616, MIDI Chan 1 Note 37 (Byte1=144, Byte2=37)\
      9872, MIDI Chan 1 Note 38 (Byte1=144, Byte2=38)\
        ...\
        \
  CC Mode-dropdownlist:\
     set the following flags to their specific values (0=0, 1=the value beginning &, like &65536 or &131072 or &262144)\
      &65536 &131072 &262144 \
         0       0       0,      Absolute\
         1       0       0,      Relative 1(127=-1, 1=+1)\
         0       1       0,      Relative 2(63=-1, 65=+1)\
         1       1       0,      Relative 3(65=-1, 1=+1)\
         0       0       1,      Toggle (>0=toggle)",
    name = "MIDI_NOTE",
   },
   [5] = {
    type = "INTEGER",
    desc = "the checkboxes checked in the MIDI/OSC-learn dialog\
   0, no checkboxes\
   1, enable only when track or item is selected\
   2, Soft takeover (absolute mode only)\
   3, Soft takeover (absolute mode only)+enable only when track or item is selected\
   4, enable only when effect configuration is focused\
   20, enable only when effect configuration is visible ",
    name = "CHECKBOXFLAGS",
   },
   [6] = {
    type = "STRING",
    desc = "the osc-message, that triggers the ParmLearn, only when midi_note is set to 0!",
    opt = {
     use = false,
    },
    name = "OSC_MESSAGE",
   },
  },
  sp_api = "ultraschall",
 },
 [181] = {
  fname = "SetParmAlias_FXStateChunk",
  label = "US_SetParmAlias_FXStateChunk",
  run = "in/out",
  desc = "Sets an already existing Parm-Learn-entry of an FX-plugin from an FXStateChunk.\
\
It's the PARMALIAS-entry\
\
The parameter id counts with the first aliasname found in the FXStateChunk for this fx, regardless, if the first found aliasname is for parameter 1 or 23, etc. \
If you want to adress it by parameter-index, use [SetParmAlias2_FXStateChunk](#SetParmAlias2_FXStateChunk) instead.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLearn)",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered FXStateChunk",
    opt = {
     use = false,
    },
    name = "ALTEREDFXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, in which you want to set a Parm-Alias-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-set-Parm-Alias-entry; beginning with 1",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the Parm-Alias-entry to set; beginning with 1",
    name = "ID",
   },
   [4] = {
    type = "STRING",
    desc = "the new aliasname of the parameter",
    name = "PARMALIAS",
   },
  },
  sp_api = "ultraschall",
 },
 [182] = {
  fname = "SetParmAlias2_FXStateChunk",
  label = "US_SetParmAlias2_FXStateChunk",
  run = "in/out",
  desc = "Sets an already existing Parm-Learn-entry of an FX-plugin from an FXStateChunk.\
\
Unlike SetParmAlias_FXStateChunk, the parameter id counts by parameter-order, not existing aliasnames. If a parameter has no aliasname yet, it will return false.\
\
It's the PARMALIAS-entry\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLearn)",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered FXStateChunk",
    opt = {
     use = false,
    },
    name = "ALTEREDFXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, in which you want to set a Parm-Alias-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-set-Parm-Alias-entry; beginning with 1",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index of the parameter, whose Parm-Alias-entry you want to to set; beginning with 1",
    name = "ID",
   },
   [4] = {
    type = "STRING",
    desc = "the new aliasname of the parameter",
    name = "PARMALIAS",
   },
  },
  sp_api = "ultraschall",
 },
 [183] = {
  fname = "SetFXStateChunk",
  label = "US_SetFXStateChunk",
  run = "in/out",
  desc = "Adds/replaces FXStateChunk to/in a TrackStateChunk or a MediaItemStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting fxstatechunk was successful; false, if setting was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered StateChunk",
    opt = {
     use = false,
    },
    name = "ALTEREDSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the TrackStateChunk, into which you want to set the FXChain",
    name = "STATECHUNK",
   },
   [2] = {
    type = "STRING",
    desc = "the FXStateChunk, which you want to set into the TrackStateChunk",
    name = "FXSTATECHUNK",
   },
   [3] = {
    type = "INTEGER",
    desc = "when using MediaItemStateChunks, this allows you to choose the take of which you want the FXChain; default is 1",
    opt = {
     use = false,
    },
    name = "TAKEFXCHAIN_ID",
   },
  },
  sp_api = "ultraschall",
 },
 [184] = {
  fname = "GetFXStateChunk",
  label = "US_GetFXStateChunk",
  run = "in/out",
  desc = "Returns an FXStateChunk from a TrackStateChunk or a MediaItemStateChunk.\
\
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.\
\
Returns nil in case of an error or if no FXStateChunk has been found.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, stored in the StateChunk",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "returns the first linenumber, at which the found FXStateChunk starts in the StateChunk",
    name = "LINENUMBER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the StateChunk, from which you want to retrieve the FXStateChunk",
    name = "STATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "when using MediaItemStateChunks, this allows you to choose the take of which you want the FXChain; default is 1",
    opt = {
     use = false,
    },
    name = "TAKEFXCHAIN_ID",
   },
  },
  sp_api = "ultraschall",
 },
 [185] = {
  fname = "AddParmLFOLearn_FXStateChunk",
  label = "US_AddParmLFOLearn_FXStateChunk",
  run = "in/out",
  desc = "Adds a new Parm-LFOLearn-entry to an FX-plugin from an FXStateChunk.\
\
It's the LFOLEARN-entry\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLearn)",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered FXStateChunk",
    opt = {
     use = false,
    },
    name = "ALTEREDFXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, in which you want to set a Parm-Learn-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-set-Parm-Learn-entry; beginning with 1",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the parameter, whose alias you want to add",
    name = "PARMIDX",
   },
   [4] = {
    type = "STRING",
    desc = "the name of the parameter, usually \\\"\\\" or \\\"byp\\\" for bypass or \\\"wet\\\" for wet; when using wet or bypass, these are essential to give!",
    name = "PARMNAME",
   },
   [5] = {
    type = "INTEGER",
    desc = "the midinote, that is assigned to this; this is a multibyte value, with the first byte\
being the MIDI-mode, and the second byte the MIDI/CC-note\
      0,   OSC is used\
      176, MIDI Chan 1 CC 0     (Byte1=176, Byte2=0)\
      ...\
      432, MIDI Chan 1 CC 1     (Byte1=176, Byte2=1)\
      ...\
      144,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=0)\
      400,  MIDI Chan 1 Note 1  (Byte1=144, Byte2=1)\
      ...\
      9360, MIDI Chan 1 Note 36 (Byte1=144, Byte2=36)\
      9616, MIDI Chan 1 Note 37 (Byte1=144, Byte2=37)\
      9872, MIDI Chan 1 Note 38 (Byte1=144, Byte2=38)\
        ...        \
             \
       CC Mode-dropdownlist:\
          set the following flags to their specific values (0=0, 1=the value beginning &, like &65536 or &131072 or &262144)\
           &65536 &131072 &262144 \
              0       0       0,      Absolute\
              1       0       0,      Relative 1(127=-1, 1=+1)\
              0       1       0,      Relative 2(63=-1, 65=+1)\
              1       1       0,      Relative 3(65=-1, 1=+1)\
              0       0       1,      Toggle (>0=toggle) ",
    name = "MIDI_NOTE",
   },
   [6] = {
    type = "INTEGER",
    desc = "the checkboxes checked in the MIDI/OSC-learn dialog\
   0, no checkboxes\
   1, enable only when track or item is selected\
   2, Soft takeover (absolute mode only)\
   3, Soft takeover (absolute mode only)+enable only when track or item is selected\
   4, enable only when effect configuration is focused\
   20, enable only when effect configuration is visible ",
    name = "CHECKBOXFLAGS",
   },
   [7] = {
    type = "STRING",
    desc = "the osc-message, that triggers the ParmLFOLearn, only when midi_note is set to 0!",
    opt = {
     use = false,
    },
    name = "OSC_MESSAGE",
   },
  },
  sp_api = "ultraschall",
 },
 [186] = {
  fname = "AddParmLearn_FXStateChunk",
  label = "US_AddParmLearn_FXStateChunk",
  run = "in/out",
  desc = "Adds a new Parm-Learn-entry to an FX-plugin from an FXStateChunk.\
\
It's the PARMLEARN-entry\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLearn)",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered FXStateChunk",
    opt = {
     use = false,
    },
    name = "ALTEREDFXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, in which you want to set a Parm-Learn-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-set-Parm-Learn-entry; beginning with 1",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the parameter, whose Parameter Learn you want to add",
    name = "PARMIDX",
   },
   [4] = {
    type = "STRING",
    desc = "the name of the parameter, usually \\\"\\\" or \\\"byp\\\" for bypass or \\\"wet\\\" for wet; when using wet or bypass, these are essential to give, otherwise just pass \"\"",
    name = "PARMNAME",
   },
   [5] = {
    type = "INTEGER",
    desc = "an integer representation of the MIDI-note, which is set as command; 0, in case of an OSC-message\
 examples:\
         0,   OSC is used\
         176, MIDI Chan 1 CC 0\
         ...\
         432, MIDI Chan 1 CC 1\
         ...\
         9360, MIDI Chan 1 Note 36\
         9616, MIDI Chan 1 Note 37\
         9872, MIDI Chan 1 Note 38\
           ...\
           \
     CC Mode-dropdownlist:\
        set the following flags to their specific values (0=0, 1=the value beginning &, like &65536 or &131072 or &262144)\
         &65536 &131072 &262144 \
            0       0       0,      Absolute\
            1       0       0,      Relative 1(127=-1, 1=+1)\
            0       1       0,      Relative 2(63=-1, 65=+1)\
            1       1       0,      Relative 3(65=-1, 1=+1)\
            0       0       1,      Toggle (>0=toggle) ",
    name = "MIDI_NOTE",
   },
   [6] = {
    type = "INTEGER",
    desc = "the checkboxes checked in the MIDI/OSC-learn dialog\
   0, no checkboxes\
   1, enable only when track or item is selected\
   2, Soft takeover (absolute mode only)\
   3, Soft takeover (absolute mode only)+enable only when track or item is selected\
   4, enable only when effect configuration is focused\
   20, enable only when effect configuration is visible ",
    name = "CHECKBOXFLAGS",
   },
   [7] = {
    type = "STRING",
    desc = "the osc-message, that triggers the ParmLearn, only when midi_note is set to 0!",
    opt = {
     use = false,
    },
    name = "OSC_MESSAGE",
   },
  },
  sp_api = "ultraschall",
 },
 [187] = {
  fname = "AddParmAlias_FXStateChunk",
  label = "US_AddParmAlias_FXStateChunk",
  run = "in/out",
  desc = "Adds a new Parm-Alias-entry to an FX-plugin from an FXStateChunk.\
\
It's the PARMALIAS-entry\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLearn)",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered FXStateChunk",
    opt = {
     use = false,
    },
    name = "ALTEREDFXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, in which you want to set a Parm-Alias-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-set-Parm-Alias-entry; beginning with 1",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the parameter, whose alias you want to add",
    name = "PARMIDX",
   },
   [4] = {
    type = "STRING",
    desc = "the new aliasname of the parameter",
    name = "PARMALIAS",
   },
  },
  sp_api = "ultraschall",
 },
 [188] = {
  fname = "CountParmAlias_FXStateChunk",
  label = "US_CountParmAlias_FXStateChunk",
  run = "in/out",
  desc = "Counts already existing Parm-Alias-entries of an FX-plugin from an FXStateChunk.\
\
It's the PARMALIAS-entry\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of ParmAliases found",
    name = "COUNT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, in which you want to count a Parm-Learn-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-count-Parm-Learn-entry; beginning with 1",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [189] = {
  fname = "CountParmLearn_FXStateChunk",
  label = "US_CountParmLearn_FXStateChunk",
  run = "in/out",
  desc = "Counts already existing Parm-Learn-entries of an FX-plugin from an FXStateChunk.\
\
It's the PARMLEARN-entry\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of ParmLearn-entries found",
    name = "COUNT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, in which you want to count a Parm-Learn-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-count-Parm-Learn-entry; beginning with 1",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [190] = {
  fname = "CountParmLFOLearn_FXStateChunk",
  label = "US_CountParmLFOLearn_FXStateChunk",
  run = "in/out",
  desc = "Counts already existing Parm-LFOLearn-entries of an FX-plugin from an FXStateChunk.\
\
It's the LFOLEARN-entry\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of LFOLearn-entries found",
    name = "COUNT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, in which you want to count a Parm-LFOLearn-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-count-Parm-LFOLearn-entry; beginning with 1",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [191] = {
  fname = "ScanVSTPlugins",
  label = "US_ScanVSTPlugins",
  run = "in/out",
  desc = "Re-scans all VST-Plugins.",
  out = {
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, clear cache before re-scanning; false or nil, just scan vts-plugins",
    opt = {
     use = false,
    },
    name = "CLEAR_CACHE",
   },
  },
  sp_api = "ultraschall",
 },
 [192] = {
  fname = "AutoDetectVSTPluginsFolder",
  label = "US_AutoDetectVSTPluginsFolder",
  run = "in/out",
  desc = "Auto-detects the vst-plugins-folder.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [193] = {
  fname = "CountFXStateChunksInStateChunk",
  label = "US_CountFXStateChunksInStateChunk",
  run = "in/out",
  desc = "Counts all FXStateChunks within a StateChunk.\
You can pass ItemStateChunks, TrackStateChunks and ProjectStateChunks.\
\
returns -1 in case of an error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of take-fx-StateChunks within the StateChunk. When passing Track/ProjectStateChunks, it returns number of all FXStateChunks from all Takes within the StateChunk",
    name = "COUNT_OF_TAKEFX_STATECHUNKS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of TrackFX-StateChunks; each track alawys has a single one, so it should match the number of tracks within the StateChunk; 0, if you pass a ItemStateChunk",
    name = "COUNT_OF_TRACKFX_STATECHUNKS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the StateChunk, whose count of FXStateChunks you want to retrieve",
    name = "STATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [194] = {
  fname = "RemoveFXStateChunkFromTrackStateChunk",
  label = "US_RemoveFXStateChunkFromTrackStateChunk",
  run = "in/out",
  desc = "Clears the FXChain from a TrackStateChunk\
\
returns nil in case of an error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the TrackStateChunk, cleared of the Track-FXStateChunk",
    name = "ALTERED_TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the TrackStateChunk, whose FXStateChunk you want to remove",
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [195] = {
  fname = "RemoveFXStateChunkFromItemStateChunk",
  label = "US_RemoveFXStateChunkFromItemStateChunk",
  run = "in/out",
  desc = "Removes a certain Take-FXStateChunk from an ItemStateChunk.\
\
Returns nil in case of failure.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the StateChunk, from which the FXStateChunk was removed",
    name = "ALTEREDITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the ItemStateChunk, from which you want to remove an FXStateChunk",
    name = "ITEMSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the take, whose FXStateChunk you want to remove",
    name = "TAKE_ID",
   },
  },
  sp_api = "ultraschall",
 },
 [196] = {
  fname = "LoadFXStateChunkFromRFXChainFile",
  label = "US_LoadFXStateChunkFromRFXChainFile",
  run = "in/out",
  desc = "Loads an FXStateChunk from an RFXChain-file.\
\
If you don't give a path, it will try to load the file from the folder ResourcePath/FXChains.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the loaded FXStateChunk; nil, in case of an error",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the RFXChain-file(must include \".RfxChain\"); omit the path to load it from the folder ResourcePath/FXChains",
    name = "FILENAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, return the FXStateChunk as Track-FXStateChunk; 1, return the FXStateChunk as Take-FXStateChunk",
    name = "TRACKFX_OR_TAKEFX",
   },
  },
  sp_api = "ultraschall",
 },
 [197] = {
  fname = "SaveFXStateChunkAsRFXChainfile",
  label = "US_SaveFXStateChunkAsRFXChainfile",
  run = "in/out",
  desc = "Loads an FXStateChunk from an RFXChain-file.\
\
If you don't give a path, it will try to load the file from the folder ResourcePath/FXChains.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of failure, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the output-RFXChain-file(must include \".RfxChain\"); omit the path to save it into the folder ResourcePath/FXChains",
    name = "FILENAME",
   },
   [2] = {
    type = "STRING",
    desc = "the FXStateChunk, which you want to set into the TrackStateChunk",
    name = "FXSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [198] = {
  fname = "GetAllRFXChainfilenames",
  label = "US_GetAllRFXChainfilenames",
  run = "in/out",
  desc = "Returns all available RFXChainfiles in the folder ResourcePath/FXChains",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of available RFXChainFiles",
    name = "COUNT_OF_RFXCHAINFILES",
   },
   [2] = {
    type = "ARRAY",
    desc = "the filenames of the RFXChainfiles",
    name = "RFXCHAINFILES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [199] = {
  fname = "GetRecentFX",
  label = "US_GetRecentFX",
  run = "in/out",
  desc = "Returns the recent fx-list",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of available recent fx",
    name = "COUNT_OF_RECENTFX",
   },
   [2] = {
    type = "ARRAY",
    desc = "the names of the recent fx",
    name = "RECENTFX",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [200] = {
  fname = "GetTrackFX_AlternativeName",
  label = "US_GetTrackFX_AlternativeName",
  run = "in/out",
  desc = "Returns the alternative name of a specific trackfx.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the alternative fx-name set for this fx",
    name = "ALTERNATIVE_FX_NAME",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [201] = {
  fname = "GetTakeFX_AlternativeName",
  label = "US_GetTakeFX_AlternativeName",
  run = "in/out",
  desc = "Returns the alternative name of a specific takefx.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the alternative fx-name set for this fx",
    name = "ALTERNATIVE_FX_NAME",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [202] = {
  fname = "SetTrackFX_AlternativeName",
  label = "US_SetTrackFX_AlternativeName",
  run = "in/out",
  desc = "sets the alternative name of a specific trackfx.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [203] = {
  fname = "SetTakeFX_AlternativeName",
  label = "US_SetTakeFX_AlternativeName",
  run = "in/out",
  desc = "sets the alternative name of a specific takefx.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [204] = {
  fname = "GetFXSettingsString_FXLines",
  label = "US_GetFXSettingsString_FXLines",
  run = "in/out",
  desc = "Returns the fx-states-string of a fx, as stored as an base64-string.byte\
It returns its decoded and encoded version of it.\
\
Use [GetFXFromFXStateChunk](#GetFXFromFXStateChunk) to get the requested parameter \"fx_lines\"\
  \
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the base64-version of the state-string, which holds all fx-settings of the fx",
    name = "FX_STATESTRING_BASE64",
   },
   [2] = {
    type = "STRING",
    desc = "the decoded binary-version of the state-string, which holds all fx-settings of the fx",
    name = "FX_STATESTRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the statechunk-lines of an fx, as returned by the function GetFXFromFXStateChunk()",
    name = "FX_LINES",
   },
  },
  sp_api = "ultraschall",
 },
 [205] = {
  fname = "GetParmModTable_FXStateChunk",
  label = "US_GetParmModTable_FXStateChunk",
  run = "in/out",
  desc = "Returns a table with all values of a specific Parameter-Modulation from an FXStateChunk.\
  \
The table's format is as follows: \
\
    ParmModTable[\"PARAM_NR\"]                - the parameter that you want to modulate; 1 for the first, 2 for the second, etc\
    ParmModTable[\"PARAM_TYPE\"]              - the type of the parameter, usually \"\", \"wet\" or \"bypass\"\
\
    ParmModTable[\"PARAMOD_ENABLE_PARAMETER_MODULATION\"] \
                                            - Enable parameter modulation, baseline value(envelope overrides)-checkbox; \
                                              true, checked; false, unchecked\
    ParmModTable[\"PARAMOD_BASELINE\"]        - Enable parameter modulation, baseline value(envelope overrides)-slider; \
                                                0.000 to 1.000\
\
    ParmModTable[\"AUDIOCONTROL\"]            - is the Audio control signal(sidechain)-checkbox checked; true, checked; false, unchecked\
                                                Note: if true, this needs all AUDIOCONTROL_-entries to be set\
    ParmModTable[\"AUDIOCONTROL_CHAN\"]       - the Track audio channel-dropdownlist; When stereo, the first stereo-channel;\
                                              nil, if not available\
    ParmModTable[\"AUDIOCONTROL_STEREO\"]     - 0, just use mono-channels; 1, use the channel AUDIOCONTROL_CHAN plus \
                                                AUDIOCONTROL_CHAN+1; nil, if not available\
    ParmModTable[\"AUDIOCONTROL_ATTACK\"]     - the Attack-slider of Audio Control Signal; 0-1000 ms; nil, if not available\
    ParmModTable[\"AUDIOCONTROL_RELEASE\"]    - the Release-slider; 0-1000ms; nil, if not available\
    ParmModTable[\"AUDIOCONTROL_MINVOLUME\"]  - the Min volume-slider; -60dB to 11.9dB; must be smaller than AUDIOCONTROL_MAXVOLUME; \
                                              nil, if not available\
    ParmModTable[\"AUDIOCONTROL_MAXVOLUME\"]  - the Max volume-slider; -59.9dB to 12dB; must be bigger than AUDIOCONTROL_MINVOLUME; \
                                              nil, if not available\
    ParmModTable[\"AUDIOCONTROL_STRENGTH\"]   - the Strength-slider; 0(0%) to 1000(100%)\
    ParmModTable[\"AUDIOCONTROL_DIRECTION\"]  - the direction-radiobuttons; -1, negative; 0, centered; 1, positive\
    ParmModTable[\"X2\"]=0.5                  - the audiocontrol signal shaping-x-coordinate\
    ParmModTable[\"Y2\"]=0.5                  - the audiocontrol signal shaping-y-coordinate    \
    \
    ParmModTable[\"LFO\"]                     - if the LFO-checkbox checked; true, checked; false, unchecked\
                                                Note: if true, this needs all LFO_-entries to be set\
    ParmModTable[\"LFO_SHAPE\"]               - the LFO Shape-dropdownlist; \
                                                0, sine; 1, square; 2, saw L; 3, saw R; 4, triangle; 5, random\
                                                nil, if not available\
    ParmModTable[\"LFO_SHAPEOLD\"]            - use the old-style of the LFO_SHAPE; \
                                                0, use current style of LFO_SHAPE; \
                                                1, use old style of LFO_SHAPE; \
                                                nil, if not available\
    ParmModTable[\"LFO_TEMPOSYNC\"]           - the Tempo sync-checkbox; true, checked; false, unchecked\
    ParmModTable[\"LFO_SPEED\"]               - the LFO Speed-slider; 0(0.0039Hz) to 1(8.0000Hz); nil, if not available\
    ParmModTable[\"LFO_STRENGTH\"]            - the LFO Strength-slider; 0.000(0.0%) to 1.000(100.0%)\
    ParmModTable[\"LFO_PHASE\"]               - the LFO Phase-slider; 0.000 to 1.000; nil, if not available\
    ParmModTable[\"LFO_DIRECTION\"]           - the LFO Direction-radiobuttons; -1, Negative; 0, Centered; 1, Positive\
    ParmModTable[\"LFO_PHASERESET\"]          - the LFO Phase reset-dropdownlist; \
                                                0, On seek/loop(deterministic output)\
                                                1, Free-running(non-deterministic output)\
                                                nil, if not available\
    \
    ParmModTable[\"MIDIPLINK\"]               - true, if any parameter-linking with MIDI-stuff; false, if not\
                                                Note: if true, this needs all MIDIPLINK_-entries and PARMLINK_LINKEDPLUGIN=-100 to be set\
    ParmModTable[\"PARMLINK\"]                - the Link from MIDI or FX parameter-checkbox\
                                              true, checked; false, unchecked\
    ParmModTable[\"PARMLINK_LINKEDPLUGIN\"]   - the selected plugin; nil, if not available\
                                            - will be ignored, when PARMLINK_LINKEDPLUGIN_RELATIVE is set\
                                                -1, nothing selected yet\
                                                -100, MIDI-parameter-settings\
                                                1 - the first fx-plugin\
                                                2 - the second fx-plugin\
                                                3 - the third fx-plugin, etc\
    ParmModTable[\"PARMLINK_LINKEDPLUGIN_RELATIVE\"] - the linked plugin relative to the current one in the FXChain\
                                                   - 0, use parameter of the current fx-plugin\
                                                   - negative, use parameter of a plugin above of the current plugin(-1, the one above; -2, two above, etc)\
                                                   - positive, use parameter of a plugin below the current plugin(1, the one below; 2, two below, etc)\
                                                   - nil, use only the plugin linked absolute(the one linked with PARMLINK_LINKEDPARMIDX)\
    ParmModTable[\"PARMLINK_LINKEDPARMIDX\"]  - the id of the linked parameter; -1, if none is linked yet; nil, if not available\
                                                When MIDI, this is irrelevant.\
                                                When FX-parameter:\
                                                  0 to n; 0 for the first; 1, for the second, etc\
\
    ParmModTable[\"PARMLINK_OFFSET\"]         - the Offset-slider; -1.00(-100%) to 1.00(+100%); nil, if not available\
    ParmModTable[\"PARMLINK_SCALE\"]          - the Scale-slider; -1.00(-100%) to 1.00(+100%); nil, if not available\
\
    ParmModTable[\"MIDIPLINK\"]               - true, if any parameter-linking with MIDI-stuff; false, if not\
                                                Note: if true, this needs all MIDIPLINK_-entries and PARMLINK_LINKEDPLUGIN=-100 to be set\
    ParmModTable[\"MIDIPLINK_BUS\"]           - the MIDI-bus selected in the button-menu; \
                                                0 to 15 for bus 1 to 16; \
                                                nil, if not available\
    ParmModTable[\"MIDIPLINK_CHANNEL\"]       - the MIDI-channel selected in the button-menu; \
                                                0, omni; 1 to 16 for channel 1 to 16; \
                                                nil, if not available\
    ParmModTable[\"MIDIPLINK_MIDICATEGORY\"]  - the MIDI_Category selected in the button-menu; nil, if not available\
                                                144, MIDI note\
                                                160, Aftertouch\
                                                176, CC 14Bit and CC\
                                                192, Program Change\
                                                208, Channel Pressure\
                                                224, Pitch\
    ParmModTable[\"MIDIPLINK_MIDINOTE\"]      - the MIDI-note selected in the button-menu; nil, if not available\
                                              When MIDI note:\
                                                   0(C-2) to 127(G8)\
                                              When Aftertouch:\
                                                   0(C-2) to 127(G8)\
                                              When CC14 Bit:\
                                                   128 to 159; see dropdownlist for the commands(the order of the list \
                                                   is the same as this numbering)\
                                              When CC:\
                                                   0 to 119; see dropdownlist for the commands(the order of the list \
                                                   is the same as this numbering)\
                                              When Program Change:\
                                                   0\
                                              When Channel Pressure:\
                                                   0\
                                              When Pitch:\
                                                   0\
    ParmModTable[\"WINDOW_ALTERED\"]          - false, if the windowposition hasn't been altered yet; true, if the window has been altered\
                                                Note: if true, this needs all WINDOW_-entries to be set\
    ParmModTable[\"WINDOW_ALTEREDOPEN\"]      - if the position of the ParmMod-window is altered and currently open; \
                                                nil, unchanged; 0, unopened; 1, open\
    ParmModTable[\"WINDOW_XPOS\"]             - the x-position of the altered ParmMod-window in pixels; nil, default position\
    ParmModTable[\"WINDOW_YPOS\"]             - the y-position of the altered ParmMod-window in pixels; nil, default position\
    ParmModTable[\"WINDOW_RIGHT\"]            - the right-position of the altered ParmMod-window in pixels; \
                                                nil, default position; only readable\
    ParmModTable[\"WINDOW_BOTTOM\"]           - the bottom-position of the altered ParmMod-window in pixels; \
                                                nil, default position; only readable\
\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table which holds all values of a specfic parameter-modulation",
    name = "PARMMODULATIONTABLE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "an FXStateChunk, of which you want to get the values of a specific parameter-modulation",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index if the fx, of which you want to get specific parameter-modulation-values",
    name = "FXINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the parameter-modulation, whose values you want to get; 1, for the first; 2, for the second, etc",
    name = "PARMODINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [206] = {
  fname = "CreateDefaultParmModTable",
  label = "US_CreateDefaultParmModTable",
  run = "in/out",
  desc = "returns a parameter-modulation-table with default settings set.\
You can alter these settings to your needs before committing it to an FXStateChunk.\
\
The checkboxes for \"Audio control signal (sidechain)\", \"LFO\", \"Link from MIDI or FX parameter\" are unchecked and the fx-parameter is set to 1(the first parameter of the plugin).\
To enable and change them, you need to alter the following entries accordingly, or applying the ParmModTable has no effect:\
  \
        ParmModTable[\"AUDIOCONTROL\"] - the checkbox for \"Audio control signal (sidechain)\"\
        ParmModTable[\"LFO\"]      - the checkbox for \"LFO\"\
        ParmModTable[\"PARMLINK\"] - the checkbox for \"Link from MIDI or FX parameter\"\
        ParmModTable[\"PARAM_NR\"] - the index of the fx-parameter for which the parameter-modulation-table is intended\
 \
The table's format and its default-values is as follows:\
\
          ParmModTable[\"PARAM_NR\"]                - the parameter that you want to modulate; 1 for the first, 2 for the second, etc\
          ParmModTable[\"PARAM_TYPE\"]              - the type of the parameter, usually \"\", \"wet\" or \"bypass\"\
\
          ParmModTable[\"PARAMOD_ENABLE_PARAMETER_MODULATION\"] \
                                                  - Enable parameter modulation, baseline value(envelope overrides)-checkbox; \
                                                    true, checked; false, unchecked\
          ParmModTable[\"PARAMOD_BASELINE\"]        - Enable parameter modulation, baseline value(envelope overrides)-slider; \
                                                      0.000 to 1.000\
\
          ParmModTable[\"AUDIOCONTROL\"]            - is the Audio control signal(sidechain)-checkbox checked; true, checked; false, unchecked\
                                                      Note: if true, this needs all AUDIOCONTROL_-entries to be set\
          ParmModTable[\"AUDIOCONTROL_CHAN\"]       - the Track audio channel-dropdownlist; When stereo, the first stereo-channel;\
                                                    nil, if not available\
          ParmModTable[\"AUDIOCONTROL_STEREO\"]     - 0, just use mono-channels; 1, use the channel AUDIOCONTROL_CHAN plus \
                                                      AUDIOCONTROL_CHAN+1; nil, if not available\
          ParmModTable[\"AUDIOCONTROL_ATTACK\"]     - the Attack-slider of Audio Control Signal; 0-1000 ms; nil, if not available\
          ParmModTable[\"AUDIOCONTROL_RELEASE\"]    - the Release-slider; 0-1000ms; nil, if not available\
          ParmModTable[\"AUDIOCONTROL_MINVOLUME\"]  - the Min volume-slider; -60dB to 11.9dB; must be smaller than AUDIOCONTROL_MAXVOLUME; \
                                                    nil, if not available\
          ParmModTable[\"AUDIOCONTROL_MAXVOLUME\"]  - the Max volume-slider; -59.9dB to 12dB; must be bigger than AUDIOCONTROL_MINVOLUME; \
                                                    nil, if not available\
          ParmModTable[\"AUDIOCONTROL_STRENGTH\"]   - the Strength-slider; 0(0%) to 1000(100%)\
          ParmModTable[\"AUDIOCONTROL_DIRECTION\"]  - the direction-radiobuttons; -1, negative; 0, centered; 1, positive\
          ParmModTable[\"X2\"]=0.5                  - the audiocontrol signal shaping-x-coordinate\
          ParmModTable[\"Y2\"]=0.5                  - the audiocontrol signal shaping-y-coordinate    \
          \
          ParmModTable[\"LFO\"]                     - if the LFO-checkbox checked; true, checked; false, unchecked\
                                                      Note: if true, this needs all LFO_-entries to be set\
          ParmModTable[\"LFO_SHAPE\"]               - the LFO Shape-dropdownlist; \
                                                      0, sine; 1, square; 2, saw L; 3, saw R; 4, triangle; 5, random\
                                                      nil, if not available\
          ParmModTable[\"LFO_SHAPEOLD\"]            - use the old-style of the LFO_SHAPE; \
                                                      0, use current style of LFO_SHAPE; \
                                                      1, use old style of LFO_SHAPE; \
                                                      nil, if not available\
          ParmModTable[\"LFO_TEMPOSYNC\"]           - the Tempo sync-checkbox; true, checked; false, unchecked\
          ParmModTable[\"LFO_SPEED\"]               - the LFO Speed-slider; 0(0.0039Hz) to 1(8.0000Hz); nil, if not available\
          ParmModTable[\"LFO_STRENGTH\"]            - the LFO Strength-slider; 0.000(0.0%) to 1.000(100.0%)\
          ParmModTable[\"LFO_PHASE\"]               - the LFO Phase-slider; 0.000 to 1.000; nil, if not available\
          ParmModTable[\"LFO_DIRECTION\"]           - the LFO Direction-radiobuttons; -1, Negative; 0, Centered; 1, Positive\
          ParmModTable[\"LFO_PHASERESET\"]          - the LFO Phase reset-dropdownlist; \
                                                      0, On seek/loop(deterministic output)\
                                                      1, Free-running(non-deterministic output)\
                                                      nil, if not available\
          \
          ParmModTable[\"MIDIPLINK\"]               - true, if any parameter-linking with MIDI-stuff; false, if not\
                                                      Note: if true, this needs all MIDIPLINK_-entries and PARMLINK_LINKEDPLUGIN=-100 to be set\
          ParmModTable[\"PARMLINK\"]                - the Link from MIDI or FX parameter-checkbox\
                                                    true, checked; false, unchecked\
          ParmModTable[\"PARMLINK_LINKEDPLUGIN\"]   - the selected plugin; nil, if not available\
                                                  - will be ignored, when PARMLINK_LINKEDPLUGIN_RELATIVE is set\
                                                      -1, nothing selected yet\
                                                      -100, MIDI-parameter-settings\
                                                      1 - the first fx-plugin\
                                                      2 - the second fx-plugin\
                                                      3 - the third fx-plugin, etc\
          ParmModTable[\"PARMLINK_LINKEDPLUGIN_RELATIVE\"] - the linked plugin relative to the current one in the FXChain\
                                                         - 0, use parameter of the current fx-plugin\
                                                         - negative, use parameter of a plugin above of the current plugin(-1, the one above; -2, two above, etc)\
                                                         - positive, use parameter of a plugin below the current plugin(1, the one below; 2, two below, etc)\
                                                         - nil, use only the plugin linked absolute(the one linked with PARMLINK_LINKEDPARMIDX)\
          ParmModTable[\"PARMLINK_LINKEDPARMIDX\"]  - the id of the linked parameter; -1, if none is linked yet; nil, if not available\
                                                      When MIDI, this is irrelevant.\
                                                      When FX-parameter:\
                                                        0 to n; 0 for the first; 1, for the second, etc\
\
          ParmModTable[\"PARMLINK_OFFSET\"]         - the Offset-slider; -1.00(-100%) to 1.00(+100%); nil, if not available\
          ParmModTable[\"PARMLINK_SCALE\"]          - the Scale-slider; -1.00(-100%) to 1.00(+100%); nil, if not available\
\
          ParmModTable[\"MIDIPLINK\"]               - true, if any parameter-linking with MIDI-stuff; false, if not\
                                                      Note: if true, this needs all MIDIPLINK_-entries and PARMLINK_LINKEDPLUGIN=-100 to be set\
          ParmModTable[\"MIDIPLINK_BUS\"]           - the MIDI-bus selected in the button-menu; \
                                                      0 to 15 for bus 1 to 16; \
                                                      nil, if not available\
          ParmModTable[\"MIDIPLINK_CHANNEL\"]       - the MIDI-channel selected in the button-menu; \
                                                      0, omni; 1 to 16 for channel 1 to 16; \
                                                      nil, if not available\
          ParmModTable[\"MIDIPLINK_MIDICATEGORY\"]  - the MIDI_Category selected in the button-menu; nil, if not available\
                                                      144, MIDI note\
                                                      160, Aftertouch\
                                                      176, CC 14Bit and CC\
                                                      192, Program Change\
                                                      208, Channel Pressure\
                                                      224, Pitch\
          ParmModTable[\"MIDIPLINK_MIDINOTE\"]      - the MIDI-note selected in the button-menu; nil, if not available\
                                                    When MIDI note:\
                                                         0(C-2) to 127(G8)\
                                                    When Aftertouch:\
                                                         0(C-2) to 127(G8)\
                                                    When CC14 Bit:\
                                                         128 to 159; see dropdownlist for the commands(the order of the list \
                                                         is the same as this numbering)\
                                                    When CC:\
                                                         0 to 119; see dropdownlist for the commands(the order of the list \
                                                         is the same as this numbering)\
                                                    When Program Change:\
                                                         0\
                                                    When Channel Pressure:\
                                                         0\
                                                    When Pitch:\
                                                         0\
          ParmModTable[\"WINDOW_ALTERED\"]          - false, if the windowposition hasn't been altered yet; true, if the window has been altered\
                                                      Note: if true, this needs all WINDOW_-entries to be set\
          ParmModTable[\"WINDOW_ALTEREDOPEN\"]      - if the position of the ParmMod-window is altered and currently open; \
                                                      nil, unchanged; 0, unopened; 1, open\
          ParmModTable[\"WINDOW_XPOS\"]             - the x-position of the altered ParmMod-window in pixels; nil, default position\
          ParmModTable[\"WINDOW_YPOS\"]             - the y-position of the altered ParmMod-window in pixels; nil, default position\
          ParmModTable[\"WINDOW_RIGHT\"]            - the right-position of the altered ParmMod-window in pixels; \
                                                      nil, default position; only readable\
          ParmModTable[\"WINDOW_BOTTOM\"]           - the bottom-position of the altered ParmMod-window in pixels; \
                                                      nil, default position; only readable\
                                                      ",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a ParmModTable with all settings set to Reaper's defaults ",
    name = "PARMMODTABLE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [207] = {
  fname = "IsValidParmModTable",
  label = "US_IsValidParmModTable",
  run = "in/out",
  desc = "checks, if a ParmModTable is a valid one\
\
Does not check, if the value-ranges are valid, only if the datatypes are correct and if certain combinations are valid!\
\
Use SLEM() to get error-messages who tell you, which entries are problematic.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, ParmModTable is a valid one; false, ParmModTable has errors(use SLEM() to get which one)",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "the table to check, if it's a valid ParmModTable",
    name = "PARMMODTABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [208] = {
  fname = "AddParmMod_ParmModTable",
  label = "US_AddParmMod_ParmModTable",
  run = "in/out",
  desc = "Takes a ParmModTable and adds with its values a new Parameter Modulation of a specific fx within an FXStateChunk.\
  \
The expected table's format is as follows:\
\
    ParmModTable[\"PARAM_NR\"]               - the parameter that you want to modulate; 1 for the first, 2 for the second, etc\
    ParmModTable[\"PARAM_TYPE\"]             - the type of the parameter, usually \"\", \"wet\" or \"bypass\"\
\
    ParmModTable[\"PARAMOD_ENABLE_PARAMETER_MODULATION\"] \
                                           - Enable parameter modulation, baseline value(envelope overrides)-checkbox; \
                                              true, checked; false, unchecked\
    ParmModTable[\"PARAMOD_BASELINE\"]       - Enable parameter modulation, baseline value(envelope overrides)-slider; \
                                                0.000 to 1.000\
\
    ParmModTable[\"AUDIOCONTROL\"]           - is the Audio control signal(sidechain)-checkbox checked; true, checked; false, unchecked\
                                                Note: if true, this needs all AUDIOCONTROL_-entries to be set\
    ParmModTable[\"AUDIOCONTROL_CHAN\"]      - the Track audio channel-dropdownlist; When stereo, the first stereo-channel;\
                                              nil, if not available\
    ParmModTable[\"AUDIOCONTROL_STEREO\"]    - 0, just use mono-channels; 1, use the channel AUDIOCONTROL_CHAN plus \
                                                AUDIOCONTROL_CHAN+1; nil, if not available\
    ParmModTable[\"AUDIOCONTROL_ATTACK\"]    - the Attack-slider of Audio Control Signal; 0-1000 ms; nil, if not available\
    ParmModTable[\"AUDIOCONTROL_RELEASE\"]   - the Release-slider; 0-1000ms; nil, if not available\
    ParmModTable[\"AUDIOCONTROL_MINVOLUME\"] - the Min volume-slider; -60dB to 11.9dB; must be smaller than AUDIOCONTROL_MAXVOLUME; \
                                              nil, if not available\
    ParmModTable[\"AUDIOCONTROL_MAXVOLUME\"] - the Max volume-slider; -59.9dB to 12dB; must be bigger than AUDIOCONTROL_MINVOLUME; \
                                              nil, if not available\
    ParmModTable[\"AUDIOCONTROL_STRENGTH\"]  - the Strength-slider; 0(0%) to 1000(100%)\
    ParmModTable[\"AUDIOCONTROL_DIRECTION\"] - the direction-radiobuttons; -1, negative; 0, centered; 1, positive\
    ParmModTable[\"X2\"]=0.5                 - the audiocontrol signal shaping-x-coordinate\
    ParmModTable[\"Y2\"]=0.5                 - the audiocontrol signal shaping-y-coordinate    \
    \
    ParmModTable[\"LFO\"]                    - if the LFO-checkbox checked; true, checked; false, unchecked\
                                                Note: if true, this needs all LFO_-entries to be set\
    ParmModTable[\"LFO_SHAPE\"]              - the LFO Shape-dropdownlist; \
                                                0, sine; 1, square; 2, saw L; 3, saw R; 4, triangle; 5, random\
                                                nil, if not available\
    ParmModTable[\"LFO_SHAPEOLD\"]           - use the old-style of the LFO_SHAPE; \
                                                0, use current style of LFO_SHAPE; \
                                                1, use old style of LFO_SHAPE; \
                                                nil, if not available\
    ParmModTable[\"LFO_TEMPOSYNC\"]          - the Tempo sync-checkbox; true, checked; false, unchecked\
    ParmModTable[\"LFO_SPEED\"]              - the LFO Speed-slider; 0(0.0039Hz) to 1(8.0000Hz); nil, if not available\
    ParmModTable[\"LFO_STRENGTH\"]           - the LFO Strength-slider; 0.000(0.0%) to 1.000(100.0%)\
    ParmModTable[\"LFO_PHASE\"]              - the LFO Phase-slider; 0.000 to 1.000; nil, if not available\
    ParmModTable[\"LFO_DIRECTION\"]          - the LFO Direction-radiobuttons; -1, Negative; 0, Centered; 1, Positive\
    ParmModTable[\"LFO_PHASERESET\"]         - the LFO Phase reset-dropdownlist; \
                                                0, On seek/loop(deterministic output)\
                                                1, Free-running(non-deterministic output)\
                                                nil, if not available\
    \
    ParmModTable[\"MIDIPLINK\"]              - true, if any parameter-linking with MIDI-stuff; false, if not\
                                                Note: if true, this needs all MIDIPLINK_-entries and PARMLINK_LINKEDPLUGIN=-100 to be set\
    ParmModTable[\"PARMLINK\"]               - the Link from MIDI or FX parameter-checkbox\
                                              true, checked; false, unchecked\
    ParmModTable[\"PARMLINK_LINKEDPLUGIN\"]  - the selected plugin; nil, if not available\
                                           - will be ignored, when PARMLINK_LINKEDPLUGIN_RELATIVE is set\
                                                -1, nothing selected yet\
                                                -100, MIDI-parameter-settings\
                                                1 - the first fx-plugin\
                                                2 - the second fx-plugin\
                                                3 - the third fx-plugin, etc\
    ParmModTable[\"PARMLINK_LINKEDPLUGIN_RELATIVE\"] - the linked plugin relative to the current one in the FXChain\
                                                   - 0, use parameter of the current fx-plugin\
                                                   - negative, use parameter of a plugin above of the current plugin(-1, the one above; -2, two above, etc)\
                                                   - positive, use parameter of a plugin below the current plugin(1, the one below; 2, two below, etc)\
                                                   - nil, use only the plugin linked absolute(the one linked with PARMLINK_LINKEDPARMIDX)\
    ParmModTable[\"PARMLINK_LINKEDPARMIDX\"] - the id of the linked parameter; -1, if none is linked yet; nil, if not available\
                                                When MIDI, this is irrelevant.\
                                                When FX-parameter:\
                                                  0 to n; 0 for the first; 1, for the second, etc\
\
    ParmModTable[\"PARMLINK_OFFSET\"]        - the Offset-slider; -1.00(-100%) to 1.00(+100%); nil, if not available\
    ParmModTable[\"PARMLINK_SCALE\"]         - the Scale-slider; -1.00(-100%) to 1.00(+100%); nil, if not available\
\
    ParmModTable[\"MIDIPLINK\"]              - true, if any parameter-linking with MIDI-stuff; false, if not\
                                                Note: if true, this needs all MIDIPLINK_-entries and PARMLINK_LINKEDPLUGIN=-100 to be set\
    ParmModTable[\"MIDIPLINK_BUS\"]          - the MIDI-bus selected in the button-menu; \
                                                0 to 15 for bus 1 to 16; \
                                                nil, if not available\
    ParmModTable[\"MIDIPLINK_CHANNEL\"]      - the MIDI-channel selected in the button-menu; \
                                                0, omni; 1 to 16 for channel 1 to 16; \
                                                nil, if not available\
    ParmModTable[\"MIDIPLINK_MIDICATEGORY\"] - the MIDI_Category selected in the button-menu; nil, if not available\
                                                144, MIDI note\
                                                160, Aftertouch\
                                                176, CC 14Bit and CC\
                                                192, Program Change\
                                                208, Channel Pressure\
                                                224, Pitch\
    ParmModTable[\"MIDIPLINK_MIDINOTE\"]     - the MIDI-note selected in the button-menu; nil, if not available\
                                              When MIDI note:\
                                                   0(C-2) to 127(G8)\
                                              When Aftertouch:\
                                                   0(C-2) to 127(G8)\
                                              When CC14 Bit:\
                                                   128 to 159; see dropdownlist for the commands(the order of the list \
                                                   is the same as this numbering)\
                                              When CC:\
                                                   0 to 119; see dropdownlist for the commands(the order of the list \
                                                   is the same as this numbering)\
                                              When Program Change:\
                                                   0\
                                              When Channel Pressure:\
                                                   0\
                                              When Pitch:\
                                                   0\
    ParmModTable[\"WINDOW_ALTERED\"]         - false, if the windowposition hasn't been altered yet; true, if the window has been altered\
                                                Note: if true, this needs all WINDOW_-entries to be set\
    ParmModTable[\"WINDOW_ALTEREDOPEN\"]     - if the position of the ParmMod-window is altered and currently open; \
                                                        nil, unchanged; 0, unopened; 1, open\
    ParmModTable[\"WINDOW_XPOS\"]            - the x-position of the altered ParmMod-window in pixels; nil, default position\
    ParmModTable[\"WINDOW_YPOS\"]            - the y-position of the altered ParmMod-window in pixels; nil, default position\
    ParmModTable[\"WINDOW_RIGHT\"]           - the right-position of the altered ParmMod-window in pixels; \
                                                nil, default position; only readable\
    ParmModTable[\"WINDOW_BOTTOM\"]          - the bottom-position of the altered ParmMod-window in pixels; \
                                                nil, default position; only readable\
\
This function does not check, if the values are within valid value-ranges, only if the datatypes are valid.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered FXStateChunk, where the ParameterModulation shall be added",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "an FXStateChunk, of which you want to add the values of a specific parameter-modulation",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the fx, of which you want to add specific parameter-modulation-values",
    name = "FXINDEX",
   },
   [3] = {
    type = "TABLE",
    desc = "the table which holds all parameter-modulation-values to be added",
    name = "PARMMODTABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [209] = {
  fname = "SetParmMod_ParmModTable",
  label = "US_SetParmMod_ParmModTable",
  run = "in/out",
  desc = "Takes a ParmModTable and sets its values into a Parameter Modulation of a specific fx within an FXStateChunk.\
  \
The expected table's format is as follows:\
\
    ParmModTable[\"PARAM_NR\"]                - the parameter that you want to modulate; 1 for the first, 2 for the second, etc\
    ParmModTable[\"PARAM_TYPE\"]              - the type of the parameter, usually \"\", \"wet\" or \"bypass\"\
\
    ParmModTable[\"PARAMOD_ENABLE_PARAMETER_MODULATION\"] \
                                            - Enable parameter modulation, baseline value(envelope overrides)-checkbox; \
                                              true, checked; false, unchecked\
    ParmModTable[\"PARAMOD_BASELINE\"]        - Enable parameter modulation, baseline value(envelope overrides)-slider; \
                                                0.000 to 1.000\
\
    ParmModTable[\"AUDIOCONTROL\"]            - is the Audio control signal(sidechain)-checkbox checked; true, checked; false, unchecked\
                                                Note: if true, this needs all AUDIOCONTROL_-entries to be set\
    ParmModTable[\"AUDIOCONTROL_CHAN\"]       - the Track audio channel-dropdownlist; When stereo, the first stereo-channel;\
                                              nil, if not available\
    ParmModTable[\"AUDIOCONTROL_STEREO\"]     - 0, just use mono-channels; 1, use the channel AUDIOCONTROL_CHAN plus \
                                                AUDIOCONTROL_CHAN+1; nil, if not available\
    ParmModTable[\"AUDIOCONTROL_ATTACK\"]     - the Attack-slider of Audio Control Signal; 0-1000 ms; nil, if not available\
    ParmModTable[\"AUDIOCONTROL_RELEASE\"]    - the Release-slider; 0-1000ms; nil, if not available\
    ParmModTable[\"AUDIOCONTROL_MINVOLUME\"]  - the Min volume-slider; -60dB to 11.9dB; must be smaller than AUDIOCONTROL_MAXVOLUME; \
                                              nil, if not available\
    ParmModTable[\"AUDIOCONTROL_MAXVOLUME\"]  - the Max volume-slider; -59.9dB to 12dB; must be bigger than AUDIOCONTROL_MINVOLUME; \
                                              nil, if not available\
    ParmModTable[\"AUDIOCONTROL_STRENGTH\"]   - the Strength-slider; 0(0%) to 1000(100%)\
    ParmModTable[\"AUDIOCONTROL_DIRECTION\"]  - the direction-radiobuttons; -1, negative; 0, centered; 1, positive\
    ParmModTable[\"X2\"]=0.5                  - the audiocontrol signal shaping-x-coordinate\
    ParmModTable[\"Y2\"]=0.5                  - the audiocontrol signal shaping-y-coordinate    \
    \
    ParmModTable[\"LFO\"]                     - if the LFO-checkbox checked; true, checked; false, unchecked\
                                                Note: if true, this needs all LFO_-entries to be set\
    ParmModTable[\"LFO_SHAPE\"]               - the LFO Shape-dropdownlist; \
                                                0, sine; 1, square; 2, saw L; 3, saw R; 4, triangle; 5, random\
                                                nil, if not available\
    ParmModTable[\"LFO_SHAPEOLD\"]            - use the old-style of the LFO_SHAPE; \
                                                0, use current style of LFO_SHAPE; \
                                                1, use old style of LFO_SHAPE; \
                                                nil, if not available\
    ParmModTable[\"LFO_TEMPOSYNC\"]           - the Tempo sync-checkbox; true, checked; false, unchecked\
    ParmModTable[\"LFO_SPEED\"]               - the LFO Speed-slider; 0(0.0039Hz) to 1(8.0000Hz); nil, if not available\
    ParmModTable[\"LFO_STRENGTH\"]            - the LFO Strength-slider; 0.000(0.0%) to 1.000(100.0%)\
    ParmModTable[\"LFO_PHASE\"]               - the LFO Phase-slider; 0.000 to 1.000; nil, if not available\
    ParmModTable[\"LFO_DIRECTION\"]           - the LFO Direction-radiobuttons; -1, Negative; 0, Centered; 1, Positive\
    ParmModTable[\"LFO_PHASERESET\"]          - the LFO Phase reset-dropdownlist; \
                                                0, On seek/loop(deterministic output)\
                                                1, Free-running(non-deterministic output)\
                                                nil, if not available\
    \
    ParmModTable[\"MIDIPLINK\"]               - true, if any parameter-linking with MIDI-stuff; false, if not\
                                                Note: if true, this needs all MIDIPLINK_-entries and PARMLINK_LINKEDPLUGIN=-100 to be set\
    ParmModTable[\"PARMLINK\"]                - the Link from MIDI or FX parameter-checkbox\
                                              true, checked; false, unchecked\
    ParmModTable[\"PARMLINK_LINKEDPLUGIN\"]   - the selected plugin; nil, if not available\
                                            - will be ignored, when PARMLINK_LINKEDPLUGIN_RELATIVE is set\
                                                -1, nothing selected yet\
                                                -100, MIDI-parameter-settings\
                                                1 - the first fx-plugin\
                                                2 - the second fx-plugin\
                                                3 - the third fx-plugin, etc\
    ParmModTable[\"PARMLINK_LINKEDPLUGIN_RELATIVE\"] - the linked plugin relative to the current one in the FXChain\
                                                   - 0, use parameter of the current fx-plugin\
                                                   - negative, use parameter of a plugin above of the current plugin(-1, the one above; -2, two above, etc)\
                                                   - positive, use parameter of a plugin below the current plugin(1, the one below; 2, two below, etc)\
                                                   - nil, use only the plugin linked absolute(the one linked with PARMLINK_LINKEDPARMIDX)\
    ParmModTable[\"PARMLINK_LINKEDPARMIDX\"]  - the id of the linked parameter; -1, if none is linked yet; nil, if not available\
                                                When MIDI, this is irrelevant.\
                                                When FX-parameter:\
                                                  0 to n; 0 for the first; 1, for the second, etc\
\
    ParmModTable[\"PARMLINK_OFFSET\"]         - the Offset-slider; -1.00(-100%) to 1.00(+100%); nil, if not available\
    ParmModTable[\"PARMLINK_SCALE\"]          - the Scale-slider; -1.00(-100%) to 1.00(+100%); nil, if not available\
\
    ParmModTable[\"MIDIPLINK\"]               - true, if any parameter-linking with MIDI-stuff; false, if not\
                                                Note: if true, this needs all MIDIPLINK_-entries and PARMLINK_LINKEDPLUGIN=-100 to be set\
    ParmModTable[\"MIDIPLINK_BUS\"]           - the MIDI-bus selected in the button-menu; \
                                                0 to 15 for bus 1 to 16; \
                                                nil, if not available\
    ParmModTable[\"MIDIPLINK_CHANNEL\"]       - the MIDI-channel selected in the button-menu; \
                                                0, omni; 1 to 16 for channel 1 to 16; \
                                                nil, if not available\
    ParmModTable[\"MIDIPLINK_MIDICATEGORY\"]  - the MIDI_Category selected in the button-menu; nil, if not available\
                                                144, MIDI note\
                                                160, Aftertouch\
                                                176, CC 14Bit and CC\
                                                192, Program Change\
                                                208, Channel Pressure\
                                                224, Pitch\
    ParmModTable[\"MIDIPLINK_MIDINOTE\"]      - the MIDI-note selected in the button-menu; nil, if not available\
                                              When MIDI note:\
                                                   0(C-2) to 127(G8)\
                                              When Aftertouch:\
                                                   0(C-2) to 127(G8)\
                                              When CC14 Bit:\
                                                   128 to 159; see dropdownlist for the commands(the order of the list \
                                                   is the same as this numbering)\
                                              When CC:\
                                                   0 to 119; see dropdownlist for the commands(the order of the list \
                                                   is the same as this numbering)\
                                              When Program Change:\
                                                   0\
                                              When Channel Pressure:\
                                                   0\
                                              When Pitch:\
                                                   0\
    ParmModTable[\"WINDOW_ALTERED\"]          - false, if the windowposition hasn't been altered yet; true, if the window has been altered\
                                                Note: if true, this needs all WINDOW_-entries to be set\
    ParmModTable[\"WINDOW_ALTEREDOPEN\"]      - if the position of the ParmMod-window is altered and currently open; \
                                                        nil, unchanged; 0, unopened; 1, open\
    ParmModTable[\"WINDOW_XPOS\"]             - the x-position of the altered ParmMod-window in pixels; nil, default position\
    ParmModTable[\"WINDOW_YPOS\"]             - the y-position of the altered ParmMod-window in pixels; nil, default position\
    ParmModTable[\"WINDOW_RIGHT\"]            - the right-position of the altered ParmMod-window in pixels; \
                                                nil, default position; only readable\
    ParmModTable[\"WINDOW_BOTTOM\"]           - the bottom-position of the altered ParmMod-window in pixels; \
                                                nil, default position; only readable\
\
This function does not check, if the values are within valid value-ranges, only if the datatypes are valid.\
\
Note: If you want to apply a ParmModulationTable from a bypass/wet-parameter to a non bypass/wet-parameter, you need to set ParmModTable[\"PARAM_TYPE\"]=\"\" or it will remove the parameter-modulation!\
Also note: set ParmModTable[\"PARAM_NR\"] to choose the parameter-index, whose ParameterModulation shall be set.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered FXStateChunk, where the ParameterModulation had been set",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "an FXStateChunk, of which you want to set the values of a specific parameter-modulation",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index if the fx, of which you want to set specific parameter-modulation-values",
    name = "FXINDEX",
   },
   [3] = {
    type = "TABLE",
    desc = "the table which holds all parameter-modulation-values to be set",
    name = "PARMMODTABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [210] = {
  fname = "DeleteParmModFromFXStateChunk",
  label = "US_DeleteParmModFromFXStateChunk",
  run = "in/out",
  desc = "deletes a parameter-modulation of a specific fx from an FXStateChunk\
\
retval altered returns false in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from which the ",
    name = "ALTERED_FXSTATECHUNK",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, deleting was successful; false, deleting was unsuccessful",
    name = "ALTERED",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk from which you want to delete a parameter-modulation of a specific fx",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the fx, whose parameter-modulations you want to delete",
    name = "FXINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the parameter-index, whose parameter-modulation you want to delete",
    name = "PARMMODIDX",
   },
  },
  sp_api = "ultraschall",
 },
 [211] = {
  fname = "CountParmModFromFXStateChunk",
  label = "US_CountParmModFromFXStateChunk",
  run = "in/out",
  desc = "returns the number of parameter-modulations available for a specific fx in an FXStateChunk\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of parameter-modulations available for this fx within this FXStateChunk",
    name = "NUMBER_OF_PARMMODULATIONS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk from which you want to count the parameter-modulations available for a specific fx",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the fx, whose number of parameter-modulations you want to know",
    name = "FXINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [212] = {
  fname = "GetAllParmAliasNames_FXStateChunk",
  label = "US_GetAllParmAliasNames_FXStateChunk",
  run = "in/out",
  desc = "Returns all aliasnames of a specific fx within an FXStateChunk\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of parameter-aliases found for this fx",
    name = "COUNT_ALIASNAMES",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array, which holds all parameter-index-numbers of all fx with parameter-aliasnames",
    name = "PARAMETERIDX",
   },
   [3] = {
    type = "ARRAY",
    desc = "an array with all parameter-aliasnames found",
    name = "PARAMETER_ALIASNAMES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from which you want to get all Parm-Aliases",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, whose Parm-Aliases you want to get",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [213] = {
  fname = "DeleteParmAlias2_FXStateChunk",
  label = "US_DeleteParmAlias2_FXStateChunk",
  run = "in/out",
  desc = "Deletes a ParmAlias-entry from an FXStateChunk.\
\
It's the PARMALIAS-entry\
\
Unlike DeleteParmAlias_FXStateChunk, this indexes aliasnames by parameter-index directly, not by number of already existing aliasnames.\
When in doubt, use this one.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if deletion was successful; false, if the function couldn't delete anything",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered FXStateChunk",
    name = "ALTEREDFXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, which you want to delete a ParmAlias from",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-delete-ParmAlias-entry; beginning with 1",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the parameter, whose parmalias you want to delete; beginning with 1",
    name = "PARMIDX",
   },
  },
  sp_api = "ultraschall",
 },
 [214] = {
  fname = "GetParmAlias2_FXStateChunk",
  label = "US_GetParmAlias2_FXStateChunk",
  run = "in/out",
  desc = "Returns a parameter-alias-setting of a specific parameter from an FXStateChunk\
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.\
\
Parameter-aliases are only stored for MediaTracks.\
\
It is the PARMALIAS-entry\
\
Returns nil in case of an error or if no such aliasname has been found",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn",
    name = "PARM_IDX",
   },
   [2] = {
    type = "STRING",
    desc = "the alias-name of the parameter",
    name = "PARM_ALIASNAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from which you want to retrieve the ParmAlias-settings",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parameter-alias-settings",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the parameter whose aliasname you want to have, starting with 1 for the first",
    name = "PARMIDX",
   },
  },
  sp_api = "ultraschall",
 },
 [215] = {
  fname = "InputFX_AddByName",
  label = "US_InputFX_AddByName",
  run = "in/out",
  desc = "Adds an FX as monitoring FX.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the newly inserted fx or the index of the already existing fx; -1, in case of an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the fx to be inserted",
    name = "FXNAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, always add a new instance of the fx; false, only add if there's none yet",
    name = "ALWAYS_NEW_INSTANCE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, to whose inputFX the fx shall be added; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [216] = {
  fname = "InputFX_QueryFirstFXIndex",
  label = "US_InputFX_QueryFirstFXIndex",
  run = "in/out",
  desc = "Queries the fx-index of the first inputfx with fxname\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the queried fx; 1-based; -1, in case of an error",
    name = "FXINDEX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the fx to be queried",
    name = "FXNAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, to whose inputFX the fx shall be added; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [217] = {
  fname = "InputFX_MoveFX",
  label = "US_InputFX_MoveFX",
  run = "in/out",
  desc = "Moves a monitoring-fx from an old to a new position\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, moving was successful; false, moving was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the input-fx to be moved; 1-based",
    name = "OLD_FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new position of the input-fx; 1-based",
    name = "NEW_FXINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber of the track, from whose inputFX you want to move the fx; 1-based; nil, master-track",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER_SOURCE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber of the track, to which you want to move the inputFX; 1-based; nil, master-track    ",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER_TARGET",
   },
  },
  sp_api = "ultraschall",
 },
 [218] = {
  fname = "InputFX_CopyFX",
  label = "US_InputFX_CopyFX",
  run = "in/out",
  desc = "Copies a monitoring-fx and inserts it at a new position\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the inserted fx(in case of being different from new_fxindex); -1, in case of an error; 1-based",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the input-fx to be copied; 1-based",
    name = "OLD_FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the position of the newly inserted input-fx; 1-based",
    name = "NEW_FXINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber of the track, from whose inputFX you want to move the fx; 1-based; nil, master-track",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER_SOURCE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber of the track, to which you want to move the inputFX; 1-based; nil, master-track    ",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER_TARGET",
   },
  },
  sp_api = "ultraschall",
 },
 [219] = {
  fname = "InputFX_CopyFXFromTrackFX",
  label = "US_InputFX_CopyFXFromTrackFX",
  run = "in/out",
  desc = "Copies a trackfx and inserts it as monitoring-fx at a certain position\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the inserted fx(in case of being different from new_fxindex); -1, in case of an error; 1-based",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track from which you want to copy a trackfx",
    name = "TRACK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the track-fx to be copied; 1-based",
    name = "OLD_FXINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the position of the newly inserted input-fx; 1-based",
    name = "NEW_FXINDEX",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber, to whose inputFX the fx shall be copied; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBERINPUTFX",
   },
  },
  sp_api = "ultraschall",
 },
 [220] = {
  fname = "InputFX_CopyFXToTrackFX",
  label = "US_InputFX_CopyFXToTrackFX",
  run = "in/out",
  desc = "Copies a monitoring-fx and inserts it as trackfx at a certain position\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the inserted fx(in case of being different from new_fxindex); -1, in case of an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx to be copied; 1-based",
    name = "OLD_FXINDEX",
   },
   [2] = {
    type = "MEDIATRACK",
    desc = "the track into which you want to insert the trackFX",
    name = "TRACK",
   },
   [3] = {
    type = "INTEGER",
    desc = "the position of the newly inserted track-fx; 1-based",
    name = "NEW_FXINDEX",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber, from whose inputFX the fx shall be copied from; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBERINPUTFX",
   },
  },
  sp_api = "ultraschall",
 },
 [221] = {
  fname = "InputFX_MoveFXFromTrackFX",
  label = "US_InputFX_MoveFXFromTrackFX",
  run = "in/out",
  desc = "Moves a trackfx to monitoring-fx at a certain position\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the inserted fx(in case of being different from new_fxindex); -1, in case of an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track from which you want to copy a trackfx to monitoring-fx",
    name = "TRACK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx to be moved; 1-based",
    name = "OLD_FXINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the position of the newly inserted input-fx; 1-based",
    name = "NEW_FXINDEX",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber, to whose inputFX the fx shall be moved to; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBERINPUTFX",
   },
  },
  sp_api = "ultraschall",
 },
 [222] = {
  fname = "InputFX_MoveFXToTrackFX",
  label = "US_InputFX_MoveFXToTrackFX",
  run = "in/out",
  desc = "moves a monitoring-fx and inserts it as trackfx at a certain position\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the inserted fx(in case of being different from new_fxindex); -1, in case of an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx to be moved; 1-based",
    name = "OLD_FXINDEX",
   },
   [2] = {
    type = "MEDIATRACK",
    desc = "the track into which you want to insert the trackFX",
    name = "TRACK",
   },
   [3] = {
    type = "INTEGER",
    desc = "the position of the newly inserted track-fx; 1-based",
    name = "NEW_FXINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [223] = {
  fname = "InputFX_Delete",
  label = "US_InputFX_Delete",
  run = "in/out",
  desc = "removes a certain monitoring-fx\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, removing was successful; false, removing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx to be deleted; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX shall be deleted; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [224] = {
  fname = "InputFX_EndParamEdit",
  label = "US_InputFX_EndParamEdit",
  run = "in/out",
  desc = "This ends the capture of a parameter(e.g when finished writing automation)\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, unknown; false, unknown",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the parameter of the monitoring-fx",
    name = "PARAMINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-parameter shall be ended in editing; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [225] = {
  fname = "InputFX_GetCount",
  label = "US_InputFX_GetCount",
  run = "in/out",
  desc = "counts the available monitoring-fx\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of available monitoring-fx    ",
    name = "MONITORING_FX_COUNT",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX you want to count; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [226] = {
  fname = "InputFX_GetChainVisible",
  label = "US_InputFX_GetChainVisible",
  run = "in/out",
  desc = "returns if the monitoring-fx-chain is visible and index of the currently visible monitoring-fx\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, fxchain is visible; false, fxchain is not visible",
    name = "INPUTFX_CHAIN_VISIBLE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the currently visible monitoring-fx; -1, if nothing is visible; 1-based    ",
    name = "VISIBLE_INPUTFX",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-chain-visibility you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [227] = {
  fname = "InputFX_GetEnabled",
  label = "US_InputFX_GetEnabled",
  run = "in/out",
  desc = "returns if a certain monitoring-fx is enabled\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, fx is enabled; false, fxchain is not enabled",
    name = "INPUTFX_ENABLED",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx, whose enabled state you want to query; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-enabledness you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [228] = {
  fname = "InputFX_GetFloatingWindow",
  label = "US_InputFX_GetFloatingWindow",
  run = "in/out",
  desc = "returns the hwnd of a floating monitoring-fx-window\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "HWND",
    desc = "the hwnd of the floating montitoring fx; nil, if not available",
    name = "INPUTFX_FLOATING_HWND",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx, whose floating-monitoring-fx-hwnd you want to get; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-floating-window-hwnd you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [229] = {
  fname = "InputFX_GetFXGUID",
  label = "US_InputFX_GetFXGUID",
  run = "in/out",
  desc = "returns the guid of a monitoring-fx\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the guid of the monitoring-fx",
    name = "FXGUID",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx, whose guid you want to query; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-fx-guid you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [230] = {
  fname = "InputFX_GetFXName",
  label = "US_InputFX_GetFXName",
  run = "in/out",
  desc = "returns the name of a monitoring-fx\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, monitoring fx exists; false, no such monitoring-fx exists",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the monitoring-fx",
    name = "FXNAME",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx, whose name you want to query; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-fxname you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [231] = {
  fname = "InputFX_GetNumParams",
  label = "US_InputFX_GetNumParams",
  run = "in/out",
  desc = "returns the number of parameters of a monitoring-fx\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of parameters of the monitoring-fx",
    name = "COUNT_PARAMS",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx, whose number of parameters you want to query; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-fxname you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [232] = {
  fname = "InputFX_GetOffline",
  label = "US_InputFX_GetOffline",
  run = "in/out",
  desc = "returns the offline-state of a monitoring-fx\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, fx is offline; false, fx is not offline",
    name = "IS_OFFLINE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx, whose offline-state you want to query; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-offline-state you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [233] = {
  fname = "InputFX_GetOpen",
  label = "US_InputFX_GetOpen",
  run = "in/out",
  desc = "returns if a monitoring-fx is open(currently visible)\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, fx is visible; false, fx is not visible",
    name = "IS_OPEN",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx, whose visibility-state you want to query; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-visibility-state you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [234] = {
  fname = "InputFX_GetPreset",
  label = "US_InputFX_GetPreset",
  run = "in/out",
  desc = "returns the currently selected preset of a monitoring-fx\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, fx exists; false, fx does not exist",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the currently selected preset; \"\", if no preset is selected",
    name = "PRESET",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx, whose currently selected presetname-state you want to query; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-preset you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [235] = {
  fname = "InputFX_GetPresetIndex",
  label = "US_InputFX_GetPresetIndex",
  run = "in/out",
  desc = "returns the index of the currently selected preset of a monitoring-fx as well as the number of available presets\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the currently selected preset; 0, if no preset is selected",
    name = "SELECTED_PRESET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of presets available    ",
    name = "NUMBER_OF_PRESETS",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx, whose currently selected preset-index you want to query; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-preset you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [236] = {
  fname = "InputFX_GetUserPresetFilename",
  label = "US_InputFX_GetUserPresetFilename",
  run = "in/out",
  desc = "returns the filename of the presetfile, into which the preset's-settings are stored\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the filename of the preset-file; nil, of not existing",
    name = "PRESET_FILENAME",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx, whose preset's-filename you want to query; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-preset-filename you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [237] = {
  fname = "InputFX_NavigatePresets",
  label = "US_InputFX_NavigatePresets",
  run = "in/out",
  desc = "switches the preset of a monitoring-fx through, relative from its current preset-index.\
You can move by multiple presets, so 1 moves one further, 2 moves 2 further, -3 moves 3 backwards.\
\
If you hit the first/last preset, it will go back to the last/first preset respectively.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, altering was successful; false, altering was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx, whose preset you want to switch through; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "positive, move forward by value of presetmove; negative, move backwards by value of presetmove",
    name = "PRESETMOVE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-preset you want to navigate; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [238] = {
  fname = "InputFX_SetEnabled",
  label = "US_InputFX_SetEnabled",
  run = "in/out",
  desc = "Sets a monitoring-fx to enabled.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx which you want to disable/enable; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, enable the monitoring-fx; false, disable the monitoring-fx",
    name = "ENABLED",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-enabled-state you want to set; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [239] = {
  fname = "InputFX_SetOffline",
  label = "US_InputFX_SetOffline",
  run = "in/out",
  desc = "Sets a monitoring-fx to online/offline.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx which you want to set offline/online; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, set the monitoring-fx offline; false, set the monitoring-fx online",
    name = "OFFLINE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-offline-state you want to set; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [240] = {
  fname = "InputFX_SetOpen",
  label = "US_InputFX_SetOpen",
  run = "in/out",
  desc = "Sets a monitoring-fx visible of invisible\
\
If you change the index while open=true, the visible fx will change to the new one.\
\
Setting open=false closes the monitoring-fx-chain, open=true will open the monitoring-fx-chain if not visible yet.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx which you want to visible/invisible; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, set the monitoring-fx visible; false, set the monitoring-fx invisible",
    name = "OPEN",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-visibility-state you want to set; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [241] = {
  fname = "InputFX_SetPreset",
  label = "US_InputFX_SetPreset",
  run = "in/out",
  desc = "Sets the preset of a monitoring-fx by presetname.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx of which you want to set the preset; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the preset, that you want to select",
    name = "PRESETNAME",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-preset you want to set; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [242] = {
  fname = "InputFX_SetPresetByIndex",
  label = "US_InputFX_SetPresetByIndex",
  run = "in/out",
  desc = "Sets the preset of a monitoring-fx by preset-index.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx which you want to set the preset; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the preset, that you want to select; 0, for default; -1, for no preset; 1-based",
    name = "PRESETINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-preset you want to set; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [243] = {
  fname = "InputFX_Show",
  label = "US_InputFX_Show",
  run = "in/out",
  desc = "Sets visibility and floating-state of a monitoring-fx\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx which you want to set the preset; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, for hidechain \
1, for show chain(index valid)\
2, for hide floating window (index valid)\
3, for show floating window (index valid)",
    name = "SHOWFLAG",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-shown-state you want to set; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [244] = {
  fname = "InputFX_CopyFXToTakeFX",
  label = "US_InputFX_CopyFXToTakeFX",
  run = "in/out",
  desc = "copies a monitoring-fx to a takeFX\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the inserted FX, just in case it differs; 1-based",
    name = "DEST_FX",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index inputFX that shall be copied; 1-based",
    name = "SRC_FX",
   },
   [2] = {
    type = "MEDIAITEM_TAKE",
    desc = "the take, into which you want to insert the fx as takeFX",
    name = "TAKE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index, at which you want to insert the fx; 1-based",
    name = "DEST_FX",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX you want to copy; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "SRC_TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [245] = {
  fname = "InputFX_CopyFXFromTakeFX",
  label = "US_InputFX_CopyFXFromTakeFX",
  run = "in/out",
  desc = "copies a takeFX to monitoringFX\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the inserted FX, just in case it differs; 1-based",
    name = "DEST_FX",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM_TAKE",
    desc = "the take, from which you want to copy the takeFX",
    name = "TAKE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index takeFX that shall be copied; 1-based",
    name = "SRC_FX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index, at which you want to insert the fx into the monitoring FXChain; 1-based",
    name = "DEST_FX",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber, to which you want to copy a new inputFX; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "DEST_TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [246] = {
  fname = "InputFX_MoveFXFromTakeFX",
  label = "US_InputFX_MoveFXFromTakeFX",
  run = "in/out",
  desc = "moves a takeFX to monitoringFX\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the inserted FX, just in case it differs; 1-based",
    name = "DEST_FX",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM_TAKE",
    desc = "the take, from which you want to move the takeFX",
    name = "TAKE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index takeFX that shall be movd; 1-based",
    name = "SRC_FX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index, at which you want to insert the fx into the monitoring FXChain; 1-based",
    name = "DEST_FX",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber, to which you want to move a new inputFX; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "DEST_TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [247] = {
  fname = "InputFX_MoveFXToTakeFX",
  label = "US_InputFX_MoveFXToTakeFX",
  run = "in/out",
  desc = "moves a monitoring-FX to a takeFX\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the inserted FX, just in case it differs; 1-based",
    name = "DEST_FX",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index inputFX that shall be moved; 1-based",
    name = "SRC_FX",
   },
   [2] = {
    type = "MEDIAITEM_TAKE",
    desc = "the take, into which you want to insert the fx as takeFX",
    name = "TAKE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index, at which you want to insert the fx; 1-based",
    name = "DEST_FX",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX you want to move; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "SRC_TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [248] = {
  fname = "InputFX_GetFXChain",
  label = "US_InputFX_GetFXChain",
  run = "in/out",
  desc = "Loads the FXStateChunk from the monitoring-fx-chain.\
\
Returns ",
  out = {
   [1] = {
    type = "STRING",
    desc = "the loaded FXStateChunk; nil, in case of an error",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "0, return the FXStateChunk as Track-FXStateChunk\
1, return the FXStateChunk as Take-FXStateChunk\
2, return the FXStateChunk as Track-InputFX-FXStateChunk",
    name = "FXSTATECHUNK_TYPE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber of the track, whose fxinput-chain you want to get\
nil or 0, global monitoring-fx; 1 and higher, the inputFX-chain from track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [249] = {
  fname = "InputFX_SetFXChain",
  label = "US_InputFX_SetFXChain",
  run = "in/out",
  desc = "Inserts an FXStateChunk into the monitoring-fx-chain. Allows replacing it as well.\
\
This could potentially create hiccups in the audio-engine of Reaper.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk that shall be set as monitoring fx-chain",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, replace the current monitoring-fx-chain with the new one; false, only insert the new fx at the end of the FXChain",
    name = "REPLACEFX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the track, whose inputFX-chain you want to set; 0 or nil, global monitoring fx",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [250] = {
  fname = "InputFX_FormatParamValue",
  label = "US_InputFX_FormatParamValue",
  run = "in/out",
  desc = "You can take a value and format it in the style of the used format of a specific parameter, like the frequency(to Hz), gain(to dB) with ReaEQ or bypass(normal, bypasses), wet with ReaTune, etc.\
\
Note: only works with FX that support Cockos VST extensions.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, formatting was successful; false, formatting was unsuccessful(no such fx, parameter, no support for Cockos VST extension",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the value in the format of the parameter; \"\", if not available",
    name = "FORMATTED_VALUE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the parameter, whose formatting-style you want to applied to value; 1-based",
    name = "PARAMINDEX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the value you want to have formatted in the style of the parameter",
    name = "VALUE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-parameter you want to format; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [251] = {
  fname = "InputFX_FormatParamValueNormalized",
  label = "US_InputFX_FormatParamValueNormalized",
  run = "in/out",
  desc = "You can take a value and format it in the style of the used format of a specific parameter, like the frequency(to Hz), gain(to dB) with ReaEQ or bypass(normal, bypasses), wet with ReaTune, etc.\
The value will be normalized.\
\
Note: only works with FX that support Cockos VST extensions.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, formatting was successful; false, formatting was unsuccessful(no such fx, parameter, no support for Cockos VST extension",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the value in the format of the parameter; \"\", if not available",
    name = "FORMATTED_VALUE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the parameter, whose formatting-style you want to applied to value; 1-based",
    name = "PARAMINDEX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the value you want to have formatted in the style of the parameter",
    name = "VALUE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-parameter you want to get formatted and normalized; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [252] = {
  fname = "InputFX_GetEQ",
  label = "US_InputFX_GetEQ",
  run = "in/out",
  desc = "Get the index of the first ReaEQ-instance in the monitoringFX, if available.\
\
Optionally add a new instance if ReaEQ isn't existing yet in the monitoring-fx-chain.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the first instance of ReaEQ in the monitoringFX; 0, if no ReaEQ is in the monitoringFX; -1, in case of an error",
    name = "INDEX_OF_REAEQ",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, add ReaEQ into monitoring-fx if not existing yet; false, don't add a ReaEQ-instance if not existing in monitoring-FXChain yet",
    name = "INSTANTIATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-eq-position you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [253] = {
  fname = "InputFX_GetFormattedParamValue",
  label = "US_InputFX_GetFormattedParamValue",
  run = "in/out",
  desc = "Returns the current value of the monitoring-fx's parameter in its formatted style.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, getting was successful; false, getting was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the value of the formatted parameter; \"\", if not available",
    name = "FORMATTED_VALUE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the parameter, whose formatted value you want to get; 1-based",
    name = "PARAMINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-parameter-value you want to get as formatted; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [254] = {
  fname = "InputFX_GetIOSize",
  label = "US_InputFX_GetIOSize",
  run = "in/out",
  desc = "Returns the plugin-type and the input/output-pins available for an inputFX\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the plugin-type\
-1, no such plugin\
0, VSTi\
2, JSFX\
3, VST\
5, Mac AU\
6, Video Processor",
    name = "RETVAL",
   },
   [2] = {
    type = "NUMBER",
    desc = "the number of input-pins available",
    opt = {
     use = false,
    },
    name = "INPUTPINS",
   },
   [3] = {
    type = "NUMBER",
    desc = "the number of output-pins available",
    opt = {
     use = false,
    },
    name = "OUTPUTPINS",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-plugintype/in-out-pins you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [255] = {
  fname = "InputFX_GetNamedConfigParm",
  label = "US_InputFX_GetNamedConfigParm",
  run = "in/out",
  desc = "gets plug-in specific named configuration value (returns true on success) of a monitoring-fx. \
\
Special values: \
'pdc' returns PDC latency. \
'in_pin_0' returns name of first input pin (if available), \
'out_pin_0' returns name of first output pin (if available), etc.\
'fx_ident' returns pluginname with path\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, name is available; false, name is not available",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the config parameter",
    name = "CONFIG_PARM_NAME",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "STRING",
    desc = "the value of the named config parm you want to get",
    name = "PARMNAME",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-named-config-parameter-state you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [256] = {
  fname = "InputFX_GetParam",
  label = "US_InputFX_GetParam",
  run = "in/out",
  desc = "returns the current, maximum and minimum value of a parameter of a monitoring-fx.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the current value of the parameter",
    name = "CURVAL",
   },
   [2] = {
    type = "NUMBER",
    desc = "the minimum value of this parameter",
    name = "MINVAL",
   },
   [3] = {
    type = "NUMBER",
    desc = "the maximum value of this parameter",
    name = "MAXVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the parameter, whose value you want to retrieve; 1-based",
    name = "PARAMINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-parameter-states you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [257] = {
  fname = "InputFX_GetParameterStepSizes",
  label = "US_InputFX_GetParameterStepSizes",
  run = "in/out",
  desc = "returns the stepsizes of a parameter of a monitoring-fx.\
\
Commonly used for JSFX and VideoProcessor.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, stepsize is available; false; stepsize is not available; nil, in case of an error",
    name = "RETVAL",
   },
   [2] = {
    type = "NUMBER",
    desc = "the stepsize of this parameter",
    name = "STEP",
   },
   [3] = {
    type = "NUMBER",
    desc = "the stepsize of a small step of this parameter",
    name = "SMALLSTEP",
   },
   [4] = {
    type = "NUMBER",
    desc = "the stepsize of a large step of this parameter",
    name = "LARGESTEP",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, this parameter is a toggle parameter; false, this parameter is not a togle parameter",
    name = "ISTOGGLE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the parameter, whose values you want to retrieve; 1-based",
    name = "PARAMINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-parameter-stepsizes you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [258] = {
  fname = "InputFX_GetParamEx",
  label = "US_InputFX_GetParamEx",
  run = "in/out",
  desc = "returns the current, maximum, minimum and mid-value of a parameter of a monitoring-fx.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the current value of the parameter",
    name = "CURVAL",
   },
   [2] = {
    type = "NUMBER",
    desc = "the minimum value of this parameter",
    name = "MINVAL",
   },
   [3] = {
    type = "NUMBER",
    desc = "the maximum value of this parameter",
    name = "MAXVAL",
   },
   [4] = {
    type = "NUMBER",
    desc = "the mid-value of this parameter",
    name = "MIDVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the parameter, whose value you want to retrieve; 1-based",
    name = "PARAMINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-param-states you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [259] = {
  fname = "InputFX_GetParamName",
  label = "US_InputFX_GetParamName",
  run = "in/out",
  desc = "returns the name of a parameter of a monitoring-fx.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, name can be returned; false, name cannot be returned",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the parameter",
    name = "PARAMNAME",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the parameter, whose name you want to retrieve; 1-based",
    name = "PARAMINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-parameter-name you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [260] = {
  fname = "InputFX_GetParamNormalized",
  label = "US_InputFX_GetParamNormalized",
  run = "in/out",
  desc = "returns the value of a parameter of a monitoring-fx in a normalized state.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the normalized version of the current value ",
    name = "NORMALIZED_VALUE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the parameter, whose normalized value you want to retrieve; 1-based",
    name = "PARAMINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-param-normalized-state you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [261] = {
  fname = "InputFX_GetPinMappings",
  label = "US_InputFX_GetPinMappings",
  run = "in/out",
  desc = "returns the pinmappings as bitfield of a parameter of a monitoring-fx.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "a bitmask for the first 32 connectors, where each bit represents, if this pin is connected(1) or not(0)",
    name = "PINMAPPINGS_LO32BIT",
   },
   [2] = {
    type = "INTEGER",
    desc = "a bitmask for the second 32 connectors, where each bit represents, if this pin is connected(1) or not(0)",
    name = "PINMAPPINGS_HI32BIT",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, for querying input pins; 1, for querying output pins",
    name = "ISOUTPUT",
   },
   [3] = {
    type = "INTEGER",
    desc = "the pin requested, like 0(left), 1(right), etc.",
    name = "PIN",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-pinmappings you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [262] = {
  fname = "InputFX_SetEQBandEnabled",
  label = "US_InputFX_SetEQBandEnabled",
  run = "in/out",
  desc = "Enable or disable a ReaEQ band of a monitoring-fx.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the bandtype of the band to change;\
-1, master gain\
0, hipass\
1, loshelf\
2, band\
3, notch\
4, hishelf\
5, lopass\
6, bandpass",
    name = "BANDTYPE",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, first band matching bandtype; 1, 2nd band matching bandtype, etc.",
    name = "BANDIDX",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, enable band; false, disable band",
    name = "ENABLE",
   },
   [5] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-eq-band-enabled-state you want to set; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [263] = {
  fname = "InputFX_SetEQParam",
  label = "US_InputFX_SetEQParam",
  run = "in/out",
  desc = "Sets an EQ-parameter of a ReaEQ-instance in monitoring-fx\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the bandtype of the band to change;\
-1, master gain\
0, hipass\
1, loshelf\
2, band\
3, notch\
4, hishelf\
5, lopass\
6, bandpass",
    name = "BANDTYPE",
   },
   [3] = {
    type = "INTEGER",
    desc = "(ignored for master gain): 0, target first band matching bandtype; 1, target 2nd band matching bandtype, etc.",
    name = "BANDIDX",
   },
   [4] = {
    type = "INTEGER",
    desc = "0, freq; 1, gain; 2, Q",
    name = "PARAMTYPE",
   },
   [5] = {
    type = "NUMBER",
    desc = "the new value for the paramtype of a bandidx",
    name = "VAL",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, value is normalized; false, value is not normalized",
    name = "ISNORM",
   },
   [7] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-eq-param-state you want to set; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [264] = {
  fname = "InputFX_SetParam",
  label = "US_InputFX_SetParam",
  run = "in/out",
  desc = "Sets a new value of a parameter of a monitoring-fx\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INDEX",
    desc = "the index of the parameter to be set; 1-based",
    name = "PARAMETERINDEX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the new value to set",
    name = "VAL",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-param-state you want to set; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [265] = {
  fname = "InputFX_SetParamNormalized",
  label = "US_InputFX_SetParamNormalized",
  run = "in/out",
  desc = "Sets a new value as normalized of a parameter of a monitoring-fx\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INDEX",
    desc = "the index of the parameter to be set; 1-based",
    name = "PARAMETERINDEX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the new value to set",
    name = "VAL",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-parameter you want to set normalized; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [266] = {
  fname = "InputFX_SetPinMappings",
  label = "US_InputFX_SetPinMappings",
  run = "in/out",
  desc = "sets the pinmappings as bitfield of a parameter of a monitoring-fx.\
\
returns false in case of an error or if unsupported (not all types of plug-ins support this capability)",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, for querying input pins; 1, for querying output pins",
    name = "ISOUTPUT",
   },
   [3] = {
    type = "INTEGER",
    desc = "the pin requested, like 0(left), 1(right), etc.",
    name = "PIN",
   },
   [4] = {
    type = "INTEGER",
    desc = "a bitmask for the first 32 connectors, where each bit represents, if this pin is connected(1) or not(0)",
    name = "PINMAPPINGS_LO32BIT",
   },
   [5] = {
    type = "INTEGER",
    desc = "a bitmask for the second 32 connectors, where each bit represents, if this pin is connected(1) or not(0)",
    name = "PINMAPPINGS_HI32BIT",
   },
   [6] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-pinmappings you want to set; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [267] = {
  fname = "InputFX_GetEQBandEnabled",
  label = "US_InputFX_GetEQBandEnabled",
  run = "in/out",
  desc = "Gets the enable or disable-state of a ReaEQ band of a monitoring-fx.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, band is enabled; false, band is disabled",
    name = "ENABLED",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the bandtype of the band to change;\
-1, master gain\
0, hipass\
1, loshelf\
2, band\
3, notch\
4, hishelf\
5, lopass\
6, bandpass",
    name = "BANDTYPE",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, first band matching bandtype; 1, 2nd band matching bandtype, etc.",
    name = "BANDIDX",
   },
   [4] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-EQ-Band-enabled-state you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [268] = {
  fname = "InputFX_GetEQParam",
  label = "US_InputFX_GetEQParam",
  run = "in/out",
  desc = "Gets the states and values of an EQ-parameter of a ReaEQ-instance in monitoring-fx\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's a ReaEQ-instance; false, is not a ReaEQ-instance or in case of an error",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the bandtype of the band to change;\
-1, master gain\
0, hipass\
1, loshelf\
2, band\
3, notch\
4, hishelf\
5, lopass\
6, bandpass",
    name = "BANDTYPE",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, first band matching bandtype; 1, 2nd band matching bandtype, etc.",
    name = "BANDIDX",
   },
   [4] = {
    type = "NUMBER",
    desc = "0, freq; 1, gain; 2, Q",
    name = "PARAMTYPE",
   },
   [5] = {
    type = "NUMBER",
    desc = "the normalized value",
    name = "NORMVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the monitoring-fx; 1-based",
    name = "FXINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the parameter whose eq-states you want to retrieve; 1-based",
    name = "PARAMIDX",
   },
   [3] = {
    type = "INTEGER",
    desc = "the tracknumber, whose inputFX-eq-param you want to get; 0 or nil, global monitoring fx; 1 and higher, track 1 and higher",
    opt = {
     use = false,
    },
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [269] = {
  fname = "GetFocusedFX",
  label = "US_GetFocusedFX",
  run = "in/out",
  desc = "Returns the focused FX",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, if no FX window has focus\
1, if a track FX window has focus or was the last focused and still open\
2, if an item FX window has focus or was the last focused and still open\
&4, if fx is not focused anymore but is still opened",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "tracknumber; 0, master track; 1, track 1; etc.",
    name = "TRACKNUMBER",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index of the FX; 1-based",
    name = "FXIDX",
   },
   [4] = {
    type = "INTEGER",
    desc = "-1, if it's a track-fx; 1 and higher, the mediaitem-number",
    name = "ITEMNUMBER",
   },
   [5] = {
    type = "INTEGER",
    desc = "-1, if it's a track-fx; 1 and higher, the take-number",
    name = "TAKEIDX",
   },
   [6] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack-object",
    name = "TRACK",
   },
   [7] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, if take-fx",
    opt = {
     use = false,
    },
    name = "ITEM",
   },
   [8] = {
    type = "MEDIAITEMTAKE",
    desc = "the MediaItem-Take, if take-fx",
    opt = {
     use = false,
    },
    name = "TAKE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [270] = {
  fname = "GetLastTouchedFX",
  label = "US_GetLastTouchedFX",
  run = "in/out",
  desc = "Returns the last touched FX\
\
Note: Does not return last touched monitoring-FX!",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, valid FX; false, no valid FX",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, takeFX; 1, trackFX",
    name = "SOURCETYPE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the track or takenumber(see sourcetype-retval); 1-based",
    name = "TRACK_TAKE_NUMBER",
   },
   [4] = {
    type = "INTEGER",
    desc = "the number of the fx; 1-based",
    name = "FXNUMBER",
   },
   [5] = {
    type = "INTEGER",
    desc = "the number of the parameter; 1-based",
    name = "PARAMNUMBER",
   },
   [6] = {
    type = "INTEGER",
    desc = "the number of the take; 1-based; -1, if takeFX",
    name = "TAKEID",
   },
   [7] = {
    type = "MEDIATRACK",
    desc = "the track of the TrackFX",
    opt = {
     use = false,
    },
    name = "TRACK",
   },
   [8] = {
    type = "MEDIAITEMTAKE",
    desc = "the take of the TakeFX",
    opt = {
     use = false,
    },
    name = "TAKE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [271] = {
  fname = "GetFXComment_FXStateChunk",
  label = "US_GetFXComment_FXStateChunk",
  run = "in/out",
  desc = "returns the fx-comment of a specific fx from an FXStateChunk\
\
will return \"\" if no comment exists\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the comment as stored for this specific fx; \"\", if no comment exists",
    name = "COMMENT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from whose fx you want to return a specific fx-comment",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose comment you want to return",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [272] = {
  fname = "SetFXComment_FXStateChunk",
  label = "US_SetFXComment_FXStateChunk",
  run = "in/out",
  desc = "sets an fx-comment of a specific fx within an FXStateChunk\
\
Set to \"\" to remove the comment\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered FXStateChunk with the new comment",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, into which you want to set the new comment",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose comment you want to set",
    name = "FXID",
   },
   [3] = {
    type = "STRING",
    desc = "the new comment; \"\", to remove the currently set comment; newlines are allowed",
    name = "NEWCOMMENT",
   },
  },
  sp_api = "ultraschall",
 },
 [273] = {
  fname = "CountFXFromFXStateChunk",
  label = "US_CountFXFromFXStateChunk",
  run = "in/out",
  desc = "count the number of fx available in an FXStateChunk\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of fx within the FXStateChunk",
    name = "COUNT_OF_FX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk in which you want to count the fx",
    name = "FXSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [274] = {
  fname = "GetTrackFXComment",
  label = "US_GetTrackFXComment",
  run = "in/out",
  desc = "returns the comment of a track-fx\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the comment of a track-fx",
    name = "COMMENT",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the mediatrack, of which you want to request a trackfx's comment",
    name = "TRACK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, whose comment you want to have",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [275] = {
  fname = "GetTakeFXComment",
  label = "US_GetTakeFXComment",
  run = "in/out",
  desc = "returns the comment of a take-fx\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the comment of a track-fx",
    name = "COMMENT",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the mediaitem, whose takefx-comment you want to request",
    name = "ITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the take, whose takefx-comment you want to request",
    name = "TAKE_ID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the fx, whose comment you want to have",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [276] = {
  fname = "InputFX_GetComment",
  label = "US_InputFX_GetComment",
  run = "in/out",
  desc = "returns the comment of an input-fx\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the comment of a track-fx",
    name = "COMMENT",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the id of the fx, whose comment you want to have",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [277] = {
  fname = "SetTrackFXComment",
  label = "US_SetTrackFXComment",
  run = "in/out",
  desc = "sets the comment of a track-fx\
\
Note: you need to switch fxchain off/on or change the shown fx for the new comment to be displayed in Reaper's UI\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the mediatrack, of which you want to set a trackfx's comment",
    name = "TRACK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, whose comment you want to set",
    name = "FXID",
   },
   [3] = {
    type = "STRING",
    desc = "the new comment",
    name = "COMMENT",
   },
  },
  sp_api = "ultraschall",
 },
 [278] = {
  fname = "SetTakeFXComment",
  label = "US_SetTakeFXComment",
  run = "in/out",
  desc = "sets the comment of a take-fx\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the comment of a track-fx",
    name = "COMMENT",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the mediaitem, whose takefx-comment you want to set",
    name = "ITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the take, whose takefx-comment you want to set",
    name = "TAKE_ID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the fx, whose comment you want to set",
    name = "FXID",
   },
   [4] = {
    type = "STRING",
    desc = "the new Comment for this takefx",
    name = "COMMENT",
   },
  },
  sp_api = "ultraschall",
 },
 [279] = {
  fname = "GetFXWak_FXStateChunk",
  label = "US_GetFXWak_FXStateChunk",
  run = "in/out",
  desc = "returns the WAK-entryvalues of a specific fx from an FXStateChunk, as set by the +-button->Send all keyboard input to plugin-menuentry in the FX-window of the visible plugin.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, don't send all the keyboard-input to plugin; 1, send all keyboard-input to plugin",
    name = "KEYBOARD_INPUT_2_PLUGIN",
   },
   [2] = {
    type = "INTEGER",
    desc = "set embedding of the fx; &amp;1=TCP, &amp;2=MCP",
    name = "FX_EMBED_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from whose fx you want to return the WAK-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose WAK-entryvalues you want to return",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [280] = {
  fname = "GetFXMidiPreset_FXStateChunk",
  label = "US_GetFXMidiPreset_FXStateChunk",
  run = "in/out",
  desc = "returns the MIDIPRESET-entryvalues of a specific fx from an FXStateChunk as set by the +-button->Link to MIDI program change-menuentry in the FX-window of the visible plugin.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, No Link; 17, Link all channels sequentially; 1-16, MIDI-channel 1-16",
    name = "MIDI_PRESET",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from whose fx you want to return the MIDIPRESET-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose MIDIPRESET-entryvalues you want to return",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [281] = {
  fname = "SetFXWak_FXStateChunk",
  label = "US_SetFXWak_FXStateChunk",
  run = "in/out",
  desc = "sets the fx-WAK-entry of a specific fx within an FXStateChunk, which allows setting \"sending all keyboard input to plugin\"-option and \"embed fx in tcp/mcp\"-option of an fx\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered FXStateChunk with the new wak-state",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, into which you want to set the new wak-state",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose wak-state you want to set",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "state of sen all keyboard input to plug-in; 0, turned off; 1, turned on",
    name = "SEND_ALL_KEYBOARD_INPUT_TO_FX",
   },
   [4] = {
    type = "INTEGER",
    desc = "set embedding of the fx; &amp;1=TCP, &amp;2=MCP",
    name = "FX_EMBED_STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [282] = {
  fname = "SetFXMidiPreset_FXStateChunk",
  label = "US_SetFXMidiPreset_FXStateChunk",
  run = "in/out",
  desc = "sets the MIDIPRESET-entryvalues of a specific fx from an FXStateChunk as set by the +-button->Link to MIDI program change-menuentry in the FX-window of the visible plugin.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered FXStateChunk with the new comment",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, into which you want to set the new comment",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose comment you want to set",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, No Link; 17, Link all channels sequentially; 1-16, MIDI-channel 1-16 ",
    name = "MIDI_PRESET",
   },
  },
  sp_api = "ultraschall",
 },
 [283] = {
  fname = "GetFXBypass_FXStateChunk",
  label = "US_GetFXBypass_FXStateChunk",
  run = "in/out",
  desc = "returns the BYPASS-entryvalues of a specific fx from an FXStateChunk, like bypass and online-state..\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, non-bypassed; 1, bypassed",
    name = "BYPASS",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, online; 1, offline",
    name = "OFFLINE",
   },
   [3] = {
    type = "INTEGER",
    desc = "unknown; default is 0",
    name = "UNKNOWN",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from whose fx you want to return the BYPASS-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose BYPASS-entryvalues you want to return",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [284] = {
  fname = "GetFXFloatPos_FXStateChunk",
  label = "US_GetFXFloatPos_FXStateChunk",
  run = "in/out",
  desc = "returns the FLOATPOS/FLOAT-entryvalues of a specific fx from an FXStateChunk, like float-state and float-coordinates.\
\
If all coordinates of the floating fx-window are 0, then the fx-window was never in float-state, yet.\
\
There is only one of the FLOATPOS/FLOAT-entries present at any time.\
FLOATPOS, when the fx-window is not floating\
FLOAT, when the fx-window is floating.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, fx-window is floating; false, fx-window isn't floating",
    name = "FLOATING",
   },
   [2] = {
    type = "INTEGER",
    desc = "the x-position of the floating window; 0, if it hasn't been floating yet",
    name = "X",
   },
   [3] = {
    type = "INTEGER",
    desc = "the y-position of the floating window; 0, if it hasn't been floating yet",
    name = "Y",
   },
   [4] = {
    type = "INTEGER",
    desc = "the width of the floating window; 0, if it hasn't been floating yet",
    name = "WIDTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the height of the floating window; 0, if it hasn't been floating yet",
    name = "HEIGHT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from whose fx you want to return the FLOAT/FLOATPOS-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose FLOAT/FLOATPOS-entryvalues you want to return",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [285] = {
  fname = "GetFXGuid_FXStateChunk",
  label = "US_GetFXGuid_FXStateChunk",
  run = "in/out",
  desc = "returns the FXID-entryvalues of a specific fx from an FXStateChunk, which is the guid of the fx.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the guid of the fx",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from whose fx you want to return the guid-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose guid you want to return",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [286] = {
  fname = "GetWndRect_FXStateChunk",
  label = "US_GetWndRect_FXStateChunk",
  run = "in/out",
  desc = "returns the WNDRECT-entryvalues from an FXStateChunk.\
\
These are the window-positions of the fx-chain, when the window is floating.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the x-position of the floating window; 0, if it hasn't been floating yet",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "the y-position of the floating window; 0, if it hasn't been floating yet",
    name = "Y",
   },
   [3] = {
    type = "INTEGER",
    desc = "the width of the floating window; 0, if it hasn't been floating yet",
    name = "WIDTH",
   },
   [4] = {
    type = "INTEGER",
    desc = "the height of the floating window; 0, if it hasn't been floating yet",
    name = "HEIGHT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, whose floating-window-position you want to get",
    name = "FXSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [287] = {
  fname = "GetShow_FXStateChunk",
  label = "US_GetShow_FXStateChunk",
  run = "in/out",
  desc = "returns the SHOW-entryvalues from an FXStateChunk.\
\
This shows, whether the fxchain is currently shown and which fx is visible in Reaper's UI.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, the fx-chain is not shown; 1, first fx is shown; 2, second fx is shown, etc",
    name = "SHOWNSTATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, whose show-state you want to get",
    name = "FXSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [288] = {
  fname = "GetLastSel_FXStateChunk",
  label = "US_GetLastSel_FXStateChunk",
  run = "in/out",
  desc = "returns the LASTSEL-entryvalues from an FXStateChunk.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the last selected fx; 1, the first fx; 2, the second fx; 3, the third fx",
    name = "LAST_SELECTED_FX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, whose last-selected-fx you want to get",
    name = "FXSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [289] = {
  fname = "GetDocked_FXStateChunk",
  label = "US_GetDocked_FXStateChunk",
  run = "in/out",
  desc = "returns the DOCKED-entryvalues from an FXStateChunk.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, undocked; 1, docked",
    name = "DOCKSTATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, whose dockstate you want to get",
    name = "FXSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [290] = {
  fname = "SetFXBypass_FXStateChunk",
  label = "US_SetFXBypass_FXStateChunk",
  run = "in/out",
  desc = "sets the fx-BYPASS-entry of a specific fx within an FXStateChunk, which allows setting online/offline and bypass-settings.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered FXStateChunk with the new BYPASS-state",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, into which you want to set the new bypass-state",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose bypass-state you want to set",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, non-bypassed; 1, bypassed",
    name = "BYPASS",
   },
   [4] = {
    type = "INTEGER",
    desc = "0, online; 1, offline",
    name = "OFFLINE",
   },
   [5] = {
    type = "INTEGER",
    desc = "unknown; default is 0",
    name = "UNKNOWN",
   },
  },
  sp_api = "ultraschall",
 },
 [291] = {
  fname = "SetShow_FXStateChunk",
  label = "US_SetShow_FXStateChunk",
  run = "in/out",
  desc = "sets the shown-plugin of an FXStateChunk.\
\
It is the SHOW-entry\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered FXStateChunk with the new SHOW-state",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, into which you want to set the new shown-fx-state",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx shown; 1, for the first fx; 2, for the second fx; etc",
    name = "SHOWSTATE",
   },
  },
  sp_api = "ultraschall",
 },
 [292] = {
  fname = "SetWndRect_FXStateChunk",
  label = "US_SetWndRect_FXStateChunk",
  run = "in/out",
  desc = "sets the docked-state of an FXStateChunk.\
\
It is the WNDRECT-entry\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered FXStateChunk with the new WNDRECT-state",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, into which you want to set the new undocked-windowposition-state",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the x-position of the undocked window",
    name = "X",
   },
   [3] = {
    type = "INTEGER",
    desc = "the y-position of the undocked window",
    name = "Y",
   },
   [4] = {
    type = "INTEGER",
    desc = "the width of the window-rectangle",
    name = "W",
   },
   [5] = {
    type = "INTEGER",
    desc = "the height of the window-rectangle",
    name = "H",
   },
  },
  sp_api = "ultraschall",
 },
 [293] = {
  fname = "SetDocked_FXStateChunk",
  label = "US_SetDocked_FXStateChunk",
  run = "in/out",
  desc = "sets the docked-state of an FXStateChunk.\
\
It is the DOCKED-entry\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered FXStateChunk with the new DOCKED-state",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, into which you want to set the new last-selected-fx-state",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the docked-state of the fx-chain-window; 0, undocked; 1, docked",
    name = "DOCKED",
   },
  },
  sp_api = "ultraschall",
 },
 [294] = {
  fname = "SetLastSel_FXStateChunk",
  label = "US_SetLastSel_FXStateChunk",
  run = "in/out",
  desc = "sets the last selected-plugin of an FXStateChunk.\
\
It is the LASTSEL-entry\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered FXStateChunk with the new LASTSEL-state",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, into which you want to set the new last-selected-fx-state",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the last fx selected; 1, for the first fx; 2, for the second fx; etc",
    name = "LASTSEL",
   },
  },
  sp_api = "ultraschall",
 },
 [295] = {
  fname = "SetFXGuid_FXStateChunk",
  label = "US_SetFXGuid_FXStateChunk",
  run = "in/out",
  desc = "sets the fx-FXID-entry of a specific fx within an FXStateChunk, which holds the guid for this fx.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered FXStateChunk with the new BYPASS-state",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, into which you want to set the new gui",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose guid you want to set",
    name = "FXID",
   },
   [3] = {
    type = "STRING",
    desc = "a guid for this fx; use reaper.genGuid to create one",
    name = "GUID",
   },
  },
  sp_api = "ultraschall",
 },
 [296] = {
  fname = "SetFXFloatPos_FXStateChunk",
  label = "US_SetFXFloatPos_FXStateChunk",
  run = "in/out",
  desc = "sets the fx-FXID-entry of a specific fx within an FXStateChunk, which manages floatstate and position of the floating-fx-window.\
\
Note: when committing it to a track/item of an opened project, keep in mind that setting floating=false will have no effect.\
You will also need to commit a TrackStateChunk/ItemStateChunk twice, as in the first commit, w and h will be ignored if the fx isn't already floating.\
This is probably due a Reaper bug and I can't fix it in here, sorry.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered FXStateChunk with the new BYPASS-state",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, into which you want to set the new bypass-state",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose bypass-state you want to set",
    name = "FXID",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, window is floating; false, window is not floating",
    name = "FLOATING",
   },
   [4] = {
    type = "INTEGER",
    desc = "the x-position of the floating-window",
    name = "X",
   },
   [5] = {
    type = "INTEGER",
    desc = "the y-position of the floating-window",
    name = "Y",
   },
   [6] = {
    type = "INTEGER",
    desc = "the width of the window(will be ignored, when committing changed statechunk only once to current project's track/item)",
    name = "W",
   },
   [7] = {
    type = "INTEGER",
    desc = "the height of the window(will be ignored, when committing changed statechunk only once to current project's track/item) ",
    name = "H",
   },
  },
  sp_api = "ultraschall",
 },
 [297] = {
  fname = "AddParmLearn_FXStateChunk2",
  label = "US_AddParmLearn_FXStateChunk2",
  run = "in/out",
  desc = "Adds a new Parm-Learn-entry to an FX-plugin from an FXStateChunk.\
Allows setting some values more detailed, unlike AddParmLearn_FXStateChunk.\
\
It's the PARMLEARN-entry\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLearn)",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered FXStateChunk",
    opt = {
     use = false,
    },
    name = "ALTEREDFXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, in which you want to set a Parm-Learn-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-set-Parm-Learn-entry; beginning with 1",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the parameter, whose Parameter Learn you want to add; 0-based",
    name = "PARMIDX",
   },
   [4] = {
    type = "STRING",
    desc = "the name of the parameter, usually \\\"\\\" or \\\"byp\\\" for bypass or \\\"wet\\\" for wet; when using wet or bypass, these are essential to give, otherwise just pass \"\"",
    name = "PARMNAME",
   },
   [5] = {
    type = "INTEGER",
    desc = "the input mode of this ParmLearn-entry\
0, OSC\
1, MIDI Note\
2, MIDI CC\
3, MIDI PC\
4, MIDI Pitch",
    name = "INPUT_MODE",
   },
   [6] = {
    type = "INTEGER",
    desc = "the midi-channel used; 1-16",
    name = "CHANNEL",
   },
   [7] = {
    type = "INTEGER",
    desc = "the midi/cc-note used; 0-127",
    name = "CC_NOTE",
   },
   [8] = {
    type = "INTEGER",
    desc = "the cc-mode-dropdownlist\
0, Absolute\
1, Relative 1(127=-1, 1=+1)\
2, Relative 2(63=-1, 65=+1)\
3, Relative 3(65=-1, 1=+1)\
4, Toggle (>0=toggle)",
    name = "CC_MODE",
   },
   [9] = {
    type = "INTEGER",
    desc = "the checkboxes checked in the MIDI/OSC-learn dialog\
   0, no checkboxes\
   1, enable only when track or item is selected\
   2, Soft takeover (absolute mode only)\
   3, Soft takeover (absolute mode only)+enable only when track or item is selected\
   4, enable only when effect configuration is focused\
   20, enable only when effect configuration is visible ",
    name = "CHECKBOXFLAGS",
   },
   [10] = {
    type = "STRING",
    desc = "the osc-message, that triggers the ParmLearn, only when midi_note is set to 0!",
    opt = {
     use = false,
    },
    name = "OSC_MESSAGE",
   },
  },
  sp_api = "ultraschall",
 },
 [298] = {
  fname = "SetParmLearn_FXStateChunk2",
  label = "US_SetParmLearn_FXStateChunk2",
  run = "in/out",
  desc = "Sets an already existing Parm-Learn-entry of an FX-plugin from an FXStateChunk.\
Allows setting some values more detailed, unlike SetParmLearn_FXStateChunk.\
\
It's the PARMLEARN-entry\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting new values was successful; false, if setting was unsuccessful(e.g. no such ParmLearn)",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered FXStateChunk",
    opt = {
     use = false,
    },
    name = "ALTEREDFXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, in which you want to set a Parm-Learn-entry",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the fx, which holds the to-set-Parm-Learn-entry; beginning with 1    ",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the parameter, whose Parameter Learn you want to add; 0-based",
    name = "PARMIDX",
   },
   [4] = {
    type = "STRING",
    desc = "the name of the parameter, usually \\\"\\\" or \\\"byp\\\" for bypass or \\\"wet\\\" for wet; when using wet or bypass, these are essential to give, otherwise just pass \"\"",
    name = "PARMNAME",
   },
   [5] = {
    type = "INTEGER",
    desc = "the input mode of this ParmLearn-entry\
0, OSC\
1, MIDI Note\
2, MIDI CC\
3, MIDI PC\
4, MIDI Pitch",
    name = "INPUT_MODE",
   },
   [6] = {
    type = "INTEGER",
    desc = "the midi-channel used; 1-16",
    name = "CHANNEL",
   },
   [7] = {
    type = "INTEGER",
    desc = "the midi/cc-note used; 0-127",
    name = "CC_NOTE",
   },
   [8] = {
    type = "INTEGER",
    desc = "the cc-mode-dropdownlist\
0, Absolute\
1, Relative 1(127=-1, 1=+1)\
2, Relative 2(63=-1, 65=+1)\
3, Relative 3(65=-1, 1=+1)\
4, Toggle (>0=toggle)",
    name = "CC_MODE",
   },
   [9] = {
    type = "INTEGER",
    desc = "the checkboxes checked in the MIDI/OSC-learn dialog\
   0, no checkboxes\
   1, enable only when track or item is selected\
   2, Soft takeover (absolute mode only)\
   3, Soft takeover (absolute mode only)+enable only when track or item is selected\
   4, enable only when effect configuration is focused\
   20, enable only when effect configuration is visible ",
    name = "CHECKBOXFLAGS",
   },
   [10] = {
    type = "STRING",
    desc = "the osc-message, that triggers the ParmLearn, only when midi_note is set to 0!",
    opt = {
     use = false,
    },
    name = "OSC_MESSAGE",
   },
  },
  sp_api = "ultraschall",
 },
 [299] = {
  fname = "GetParmLearn_FXStateChunk2",
  label = "US_GetParmLearn_FXStateChunk2",
  run = "in/out",
  desc = "Returns a parameter-learn-setting from an FXStateChunk\
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem.\
\
Returns some values more detailed, unlike GetParmLearn_FXStateChunk.\
\
It is the PARMLEARN-entry\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the parameter; order is exactly like the order in the contextmenu of Parameter List -> Learn",
    name = "PARM_IDX",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the parameter, though usually only \"wet\" or \"byp\" or \"\"\
to get the actual displayed parametername, you need to \
use the reaper.TrackFX_GetParamName-function",
    name = "PARMNAME",
   },
   [3] = {
    type = "INTEGER",
    desc = "the input mode of this ParmLearn-entry\
0, OSC\
1, MIDI Note\
2, MIDI CC\
3, MIDI PC\
4, MIDI Pitch",
    name = "INPUT_MODE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the midi-channel used; 1-16",
    name = "CHANNEL",
   },
   [5] = {
    type = "INTEGER",
    desc = "the midi/cc-note used; 0-127",
    name = "CC_NOTE",
   },
   [6] = {
    type = "INTEGER",
    desc = "the cc-mode-dropdownlist\
0, Absolute\
1, Relative 1(127=-1, 1=+1)\
2, Relative 2(63=-1, 65=+1)\
3, Relative 3(65=-1, 1=+1)\
4, Toggle (>0=toggle)",
    name = "CC_MODE",
   },
   [7] = {
    type = "INTEGER",
    desc = "the checkboxes checked in the MIDI/OSC-learn dialog\
0, no checkboxes\
1, enable only when track or item is selected\
2, Soft takeover (absolute mode only)\
3, Soft takeover (absolute mode only)+enable only when track or item is selected\
4, enable only when effect configuration is focused\
20, enable only when effect configuration is visible",
    name = "CHECKBOXFLAGS",
   },
   [8] = {
    type = "STRING",
    desc = "the osc-message, that triggers the ParmLearn",
    opt = {
     use = false,
    },
    name = "OSC_MESSAGE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from which you want to retrieve the ParmLearn-settings",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parameter-learn-settings",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the id of the ParmLearn-settings you want to have, starting with 1 for the first",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [300] = {
  fname = "GetParmLearnID_by_FXParam_FXStateChunk",
  label = "US_GetParmLearnID_by_FXParam_FXStateChunk",
  run = "in/out",
  desc = "Returns the parmlearn_id by parameter.\
\
This can be used as parameter parm_learn_id for Get/Set/DeleteParmLearn-functions\
\
Returns -1, if the parameter has no ParmLearn associated.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the parmlearn, that you can use for Add/Get/Set/DeleteParmLearn-functions; -1, if parameter has no ParmLearn associated",
    name = "PARMLEARN_ID",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from which you want to retrieve the parmlearn",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parmlearn_id",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the parameter, whose parmlearn_id you want to get",
    name = "PARAM_ID",
   },
  },
  sp_api = "ultraschall",
 },
 [301] = {
  fname = "GetParmAliasID_by_FXParam_FXStateChunk",
  label = "US_GetParmAliasID_by_FXParam_FXStateChunk",
  run = "in/out",
  desc = "Returns the parmalias_id by parameter.\
\
This can be used as parameter parm_alias_id for Get/Set/DeleteParmAlias-functions\
\
Returns -1, if the parameter has no ParmAlias associated.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the parmalias, that you can use for Add/Get/Set/DeleteParmAlias-functions; -1, if parameter has no ParmAlias associated",
    name = "PARMALIAS_ID",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from which you want to retrieve the parmalias_id",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parmalias_id",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the parameter, whose parmalias_id you want to get",
    name = "PARAM_ID",
   },
  },
  sp_api = "ultraschall",
 },
 [302] = {
  fname = "GetParmLFOLearnID_by_FXParam_FXStateChunk",
  label = "US_GetParmLFOLearnID_by_FXParam_FXStateChunk",
  run = "in/out",
  desc = "Returns the parmlfolearn_id by parameter.\
\
This can be used as parameter parm_lfolearn_id for Get/Set/DeleteLFOLearn-functions\
\
Returns -1, if the parameter has no ParmLFOLearn associated.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the parm_lfolearn, that you can use for Add/Get/Set/DeleteParmLFOLearn-functions; -1, if parameter has no ParmLFOLearn associated",
    name = "PARM_LFOLEARN_ID",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from which you want to retrieve the parm_lfolearn_id",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, of which you want to get the parameter-lfo_learn-settings",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the parameter, whose parm_lfolearn_id you want to get",
    name = "PARAM_ID",
   },
  },
  sp_api = "ultraschall",
 },
 [303] = {
  fname = "GetParmLearn_Default",
  label = "US_GetParmLearn_Default",
  run = "in/out",
  desc = "allows getting the current default-settings for the parmlearn-dialog",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the radiobuttons in the parmlearn-dialog\
0, no option selected \
1, enable only when track or item is selected\
2, enable only when effect configuration is focused\
3, enable only when effect configuration is visible",
    name = "ENABLE_STATE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, set softtakeover checkbox checked; false, set softtakeover checkbox unchecked",
    name = "SOFTTAKEOVER",
   },
   [3] = {
    type = "INTEGER",
    desc = "the ccmode-dropdownlist\
0, Absolute\
1, Relative 1 (127=-1, 1=+1)\
2, Relative 2 (63=-1, 65=+1)\
3, Relative 3 (65=-1, 1=+1)\
4, Toggle (>0=Toggle)",
    name = "CCMODE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [304] = {
  fname = "SetParmLearn_Default",
  label = "US_SetParmLearn_Default",
  run = "in/out",
  desc = "allows setting the current default-settings for the parmlearn-dialog\
\
set to 0, false, 0 for the factory defaults\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the radiobuttons in the parmlearn-dialog\
0, no option selected \
1, enable only when track or item is selected\
2, enable only when effect configuration is focused\
3, enable only when effect configuration is visible",
    name = "ENABLE_STATE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, set softtakeover checkbox checked; false, set softtakeover checkbox unchecked",
    name = "SOFTTAKEOVER",
   },
   [3] = {
    type = "INTEGER",
    desc = "the ccmode-dropdownlist\
0, Absolute\
1, Relative 1 (127=-1, 1=+1)\
2, Relative 2 (63=-1, 65=+1)\
3, Relative 3 (65=-1, 1=+1)\
4, Toggle (>0=Toggle)",
    name = "CCMODE",
   },
  },
  sp_api = "ultraschall",
 },
 [305] = {
  fname = "GetBatchConverter_FXStateChunk",
  label = "US_GetBatchConverter_FXStateChunk",
  run = "in/out",
  desc = "Sets the FXStateChunk used by the BatchConverter. Returns the previously used FXStateChunk.\
\
The BatchConverter uses this FXStateChunk when it's opened the next time.\
So if you want to use different FXStateChunks with the BatchConverter, set it first, then (re-)open the BatchConverter.\
\
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem or inputFX.\
\
Returns false in case of an error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the FXStateChunk of the BatchConverter",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the new FXStateChunk to us with the BatchConverter",
    name = "FXSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [306] = {
  fname = "GetBatchConverter_FXStateChunk",
  label = "US_GetBatchConverter_FXStateChunk",
  run = "in/out",
  desc = "Sets the FXStateChunk used by the BatchConverter. Returns the previously used FXStateChunk.\
\
The BatchConverter uses this FXStateChunk when it's opened the next time.\
So if you want to use different FXStateChunks with the BatchConverter, set it first, then (re-)open the BatchConverter.\
\
An FXStateChunk holds all FX-plugin-settings for a specific MediaTrack or MediaItem or inputFX.\
\
Returns false in case of an error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the FXStateChunk of the BatchConverter",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the new FXStateChunk to us with the BatchConverter",
    name = "FXSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [307] = {
  fname = "TrackFX_JSFX_Reload",
  label = "US_TrackFX_JSFX_Reload",
  run = "in/out",
  desc = "Updates a jsfx in a track.\
\
if the desc-line in the jsfx changes, it will not update the name of the jsfx in the fx-chain-list\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, fx has been updated; false, fx has not been updated",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose jsfx you want to update",
    name = "TRACK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the track-jsfx, that you want to refresh",
    name = "FXINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [308] = {
  fname = "TakeFX_JSFX_Reload",
  label = "US_TakeFX_JSFX_Reload",
  run = "in/out",
  desc = "Updates a jsfx in a take.\
\
if the desc-line in the jsfx changes, it will not update the name of the jsfx in the fx-chain-list\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, fx has been updated; false, fx has not been updated",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM_TAKE",
    desc = "the take, whose jsfx you want to update",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the take-jsfx, that you want to refresh",
    name = "FXINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [309] = {
  fname = "InputFX_JSFX_Reload",
  label = "US_InputFX_JSFX_Reload",
  run = "in/out",
  desc = "Updates a jsfx in monitoring-fx/rec-input-fx\
\
if the desc-line in the jsfx changes, it will not update the name of the jsfx in the fx-chain-list\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, fx has been updated; false, fx has not been updated",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose rec-inputfx-jsfx you want to update; use master track to update within input-monitoring-fx ",
    name = "TRACK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the track-jsfx, that you want to refresh",
    name = "FXINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [310] = {
  fname = "GetGuidFromCustomMarkerID",
  label = "US_GetGuidFromCustomMarkerID",
  run = "in/out",
  desc = "Gets the corresponding guid of a custom marker with a specific index \
\
The index is for _custom:-markers only\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the guid of the custom marker with a specific index",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-marker",
    name = "MARKERNAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the custom marker, whose guid you want to retrieve; 0-based",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [311] = {
  fname = "GetGuidFromCustomRegionID",
  label = "US_GetGuidFromCustomRegionID",
  run = "in/out",
  desc = "Gets the corresponding guid of a custom region with a specific index \
\
The index is for _custom:-regions only\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the guid of the custom region with a specific index",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-region",
    name = "REGIONNAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the custom region, whose guid you want to retrieve; 0-based",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [312] = {
  fname = "GetCustomMarkerIDFromGuid",
  label = "US_GetCustomMarkerIDFromGuid",
  run = "in/out",
  desc = "Gets the corresponding indexnumber of a custom-marker-guid\
\
The index is for all _custom:-markers only.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the custom-marker, whose guid you have passed to this function; 0-based",
    name = "INDEX",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the custom-marker",
    name = "CUSTOM_MARKER_NAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the guid of the custom-marker, whose index-number you want to retrieve",
    name = "GUID",
   },
  },
  sp_api = "ultraschall",
 },
 [313] = {
  fname = "GetCustomRegionIDFromGuid",
  label = "US_GetCustomRegionIDFromGuid",
  run = "in/out",
  desc = "Gets the corresponding indexnumber of a custom-region-guid\
\
The index is for all _custom:-regions only.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the custom-region, whose guid you have passed to this function; 0-based",
    name = "INDEX",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the region-marker",
    name = "CUSTOM_REGION_NAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the guid of the custom-region, whose index-number you want to retrieve",
    name = "GUID",
   },
  },
  sp_api = "ultraschall",
 },
 [314] = {
  fname = "TakeFX_GetAllGuidsFromAllTakes",
  label = "US_TakeFX_GetAllGuidsFromAllTakes",
  run = "in/out",
  desc = "Returns all Guids from all Take-FX of all takes in a project\
\
Returned table is of the following format:\
  Guids[guid_index][\"take\"] - the take, that contains the fx with the guid\
  Guids[guid_index][\"fx_index\"] - the index of the fx in the take-fx-chain\
  Guids[guid_index][\"guid\"] - the guid of the found take-fx",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the found guids of all take-fx in the project",
    name = "FOUND_GUIDS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [315] = {
  fname = "TrackFX_GetAllGuidsFromAllTracks",
  label = "US_TrackFX_GetAllGuidsFromAllTracks",
  run = "in/out",
  desc = "Returns all Guids from all Track-FX of all tracks in a project\
\
Returned table is of the following format:\
  Guids[guid_index][\"track\"] - the track, that contains the fx with the guid\
  Guids[guid_index][\"fx_index\"] - the index of the fx in the track-fx-chain\
  Guids[guid_index][\"guid\"] - the guid of the found track-fx",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the found guids of all track-fx in the project",
    name = "FOUND_GUIDS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [316] = {
  fname = "GetFXByGuid",
  label = "US_GetFXByGuid",
  run = "in/out",
  desc = "Returns the fx-index and track/take object of an FX by guid.\
\
Returned table is of the following format:\
  Guids[guid_index][\"track\"] - the track, that contains the fx with the guid, if the fx in question is trackfx, else nil\
  Guids[guid_index][\"take\"] - the take, that contains the fx with the guid, if the fx in question is takefx, else nil\
  Guids[guid_index][\"fx_index\"] - the index of the fx in the fx-chain of either the take or track-fx-chain",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the found fx with guid",
    name = "FOUND_FX",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [317] = {
  fname = "SetFXAutoBypassSettings",
  label = "US_SetFXAutoBypassSettings",
  run = "in/out",
  desc = "Sets states of various autobypass-settings.\
\
Returns false in case of an error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, reduce CPU use of silent tracks during playback; false, don't reduce cpu use of silent tracks during playback",
    name = "REDUCE_CPU",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, Auto-bypass FX (when set via project or manual setting) even when FX configuration is open; false, don't auto-bypass fx",
    name = "AUTOBYPASS_WHEN_FX_OPEN",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, Disable FX auto-bypass when using offline render/apply FX/render stems; false, don't disable FX auto-bypass when using offline render/apply FX/render stems",
    name = "DISABLE_AUTOBYPASS_WHEN_OFFLINE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, Auto-bypass FX that report tail length or have auto-tail set; false, don't auto-bypass FX that report tail length or have auto-tail set",
    name = "AUTO_BYPASS_REPORT_TAIL",
   },
   [5] = {
    type = "INTEGER",
    desc = "Auto-bypass FX that report tail length or have auto-tail set, threshold in dB; always negative",
    name = "AUTO_BYPASS_REPORT_TAIL_THRESH",
   },
  },
  sp_api = "ultraschall",
 },
 [318] = {
  fname = "GetFXAutoBypassSettings",
  label = "US_GetFXAutoBypassSettings",
  run = "in/out",
  desc = "Gets states of various autobypass-settings, as set in Preferences-> Audio and Preferences -> Rendering as well as in Project Settings -> Advanced Tab",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, reduce CPU use of silent tracks during playback; false, don't reduce cpu use of silent tracks during playback",
    name = "REDUCE_CPU",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, Auto-bypass FX (when set via project or manual setting) even when FX configuration is open; false, don't auto-bypass fx",
    name = "AUTOBYPASS_WHEN_FX_OPEN",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, Disable FX auto-bypass when using offline render/apply FX/render stems; false, don't disable FX auto-bypass when using offline render/apply FX/render stems",
    name = "DISABLE_AUTOBYPASS_WHEN_OFFLINE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, Auto-bypass FX that report tail length or have auto-tail set; false, don't auto-bypass FX that report tail length or have auto-tail set",
    name = "AUTO_BYPASS_REPORT_TAIL",
   },
   [5] = {
    type = "INTEGER",
    desc = "Auto-bypass FX that report tail length or have auto-tail set, threshold in dB; always negative",
    name = "AUTO_BYPASS_REPORT_TAIL_THRESH",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [319] = {
  fname = "GetFXAutoBypass_FXStateChunk",
  label = "US_GetFXAutoBypass_FXStateChunk",
  run = "in/out",
  desc = "Gets the state of autobypass of an FX within an FXStateChunk.\
\
It is the AUTOBYPASS-entry\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, autobypass is disabled; 1, autobypass is enabled",
    name = "STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, from whose fx you want to return the autobypass-state",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose autobypass-state you want to retrieve",
    name = "FXID",
   },
  },
  sp_api = "ultraschall",
 },
 [320] = {
  fname = "SetFXAutoBypass_FXStateChunk",
  label = "US_SetFXAutoBypass_FXStateChunk",
  run = "in/out",
  desc = "Sets the autobypass-state of an fx within an FXStateChunk\
\
It is the AUTOBYPASS-entry.\
\
Keep in mind, when passing 0, the AUTOBYPASS-entry disappears. This is normal.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered FXStateChunk with the new AUTOBYPASS-state",
    name = "FXSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the FXStateChunk, into which you want to set the new bypass-state",
    name = "FXSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fx, whose bypass-state you want to set",
    name = "FXID",
   },
   [3] = {
    type = "INTEGER",
    desc = "1, autobypass enabled; 0, autobypass disabled",
    name = "NEWSTATE",
   },
  },
  sp_api = "ultraschall",
 },
 [321] = {
  fname = "GetRenderCFG_Settings_FLAC",
  label = "US_GetRenderCFG_Settings_FLAC",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for flac.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the encoding-depth of the flac in bits(16 to 24)",
    name = "ENCODING_DEPTH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the data-compression speed from fastest and worst efficiency(0) to slowest but best efficiency(8); default is 5",
    name = "COMPRESSION",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the flac-settings; \
nil, get the current new-project-default render-settings for flac",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [322] = {
  fname = "GetRenderCFG_Settings_AIFF",
  label = "US_GetRenderCFG_Settings_AIFF",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for aiff.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the bitdepth of the AIFF-file(8, 16, 24, 32)",
    name = "BITDEPTH",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "Embed beat length if exact-checkbox; true, checked; false, unchecked",
    name = "EMBEDBEATLENGTH",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the aiff-settings\
nil, get the current new-project-default render-settings for aiff",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [323] = {
  fname = "GetRenderCFG_Settings_AudioCD",
  label = "US_GetRenderCFG_Settings_AudioCD",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for AudioCD.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the trackmode\
  0, Markers define new tracks\
  1, Regions define tracks (other areas ignored)\
  2, One track",
    name = "TRACKMODE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "Only use markers starting with #-checkbox; only available when trackmode=0, otherwise it will be ignored\
 true, checkbox is checked; false, checkbox is unchecked",
    name = "USE_MARKERS_HASHES",
   },
   [3] = {
    type = "INTEGER",
    desc = "the leadin-silence for tracks in milliseconds(0 to 2147483647)",
    name = "LEADIN_SILENCE_TRACKS",
   },
   [4] = {
    type = "INTEGER",
    desc = "the leadin-silence for discs in milliseconds(0 to 2147483647)",
    name = "LEADIN_SILENCE_DISC",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "burn cd image after render-checkbox\
   true, checkbox is checked; false, checkbox is unchecked",
    name = "BURN_CD_AFTER_RENDER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the audiocd-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [324] = {
  fname = "GetRenderCFG_Settings_MP3",
  label = "US_GetRenderCFG_Settings_MP3",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for MP3.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the encoding-mode\
32, Target quality(VBR)\
1056, Target bitrate (ABR)\
65344, Constant bitrate (CBR)\
65088, Maximum bitrate/quality",
    name = "MODE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the encoding-quality\
  0, Maximum(slow)\
  2, Better(recommended)\
  3, Normal\
  5, Fast encode\
  7, Faster encode\
  9, Fastest encode",
    name = "ENC_QUALITY",
   },
   [3] = {
    type = "INTEGER",
    desc = "target-quality for VBR; 0(best 100%) to 9(worst 10%); 4, when Mode is set to  ABR, CBR or Maximum bitrate/quality",
    name = "VBR_QUALITY",
   },
   [4] = {
    type = "INTEGER",
    desc = "the average bitrate for ABR in kbps\
8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320",
    name = "ABR_BITRATE",
   },
   [5] = {
    type = "INTEGER",
    desc = "the bitrate for CBR in kbps\
8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320",
    name = "CBR_BITRATE",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "the do not allow joint stereo-checkbox\
true, checkbox is checked; false, checkbox is unchecked",
    name = "NO_JOINT_STEREO",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "the write ReplayGain tag-checkbox\
true, checkbox is checked; false, checkbox is unchecked",
    name = "WRITE_REPLAY_GAIN",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the mp3-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [325] = {
  fname = "GetRenderCFG_Settings_MP3MaxQuality",
  label = "US_GetRenderCFG_Settings_MP3MaxQuality",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for MP3 with maximum quality-settings.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, the renderstring is a valid MP3-MaxQuality-setting; -1, it is not a valid renderstring for MP3-MaxQuality",
    name = "RETVAL",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "the write ReplayGain tag-checkbox\
true, checkbox is checked; false, checkbox is unchecked",
    name = "WRITE_REPLAY_GAIN",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the mp3-maxquality-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [326] = {
  fname = "GetRenderCFG_Settings_MP3CBR",
  label = "US_GetRenderCFG_Settings_MP3CBR",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for MP3 CBR.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the bitrate for CBR in kbps\
8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320",
    name = "CBR_BITRATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the encoding-quality\
  0, Maximum(slow)\
  2, Better(recommended)\
  3, Normal\
  5, Fast encode\
  7, Faster encode\
  9, Fastest encode",
    name = "ENC_QUALITY",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "the do not allow joint stereo-checkbox\
true, checkbox is checked; false, checkbox is unchecked",
    name = "NO_JOINT_STEREO",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "the write ReplayGain tag-checkbox\
true, checkbox is checked; false, checkbox is unchecked",
    name = "WRITE_REPLAY_GAIN",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the mp3-cbr-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [327] = {
  fname = "GetRenderCFG_Settings_MP3VBR",
  label = "US_GetRenderCFG_Settings_MP3VBR",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for MP3 VBR.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the variable-bitrate quality; 1(for 10%) to 10(for 100%) ",
    name = "VBR_QUALITY",
   },
   [2] = {
    type = "INTEGER",
    desc = "the encoding-quality\
  0, Maximum(slow)\
  2, Better(recommended)\
  3, Normal\
  5, Fast encode\
  7, Faster encode\
  9, Fastest encode",
    name = "ENC_QUALITY",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "the do not allow joint stereo-checkbox\
true, checkbox is checked; false, checkbox is unchecked",
    name = "NO_JOINT_STEREO",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "the write ReplayGain tag-checkbox\
true, checkbox is checked; false, checkbox is unchecked",
    name = "WRITE_REPLAY_GAIN",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the mp3-vbr-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [328] = {
  fname = "GetRenderCFG_Settings_MP3ABR",
  label = "US_GetRenderCFG_Settings_MP3ABR",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for MP3 ABR.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the encoding quality for the mp3\
   0, 8 kbps\
   1, 16 kbps\
   2, 24 kbps\
   3, 32 kbps\
   4, 40 kbps\
   5, 48 kbps\
   6, 56 kbps\
   7, 64 kbps\
   8, 80 kbps\
   9, 96 kbps\
   10, 112 kbps\
   11, 128 kbps\
   12, 160 kbps\
   13, 192 kbps\
   14, 224 kbps\
   15, 256 kbps\
   16, 320 kbps ",
    name = "BITRATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the encoding-quality\
  0, Maximum(slow)\
  2, Better(recommended)\
  3, Normal\
  5, Fast encode\
  7, Faster encode\
  9, Fastest encode",
    name = "ENC_QUALITY",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "the do not allow joint stereo-checkbox\
true, checkbox is checked; false, checkbox is unchecked",
    name = "NO_JOINT_STEREO",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "the write ReplayGain tag-checkbox\
true, checkbox is checked; false, checkbox is unchecked",
    name = "WRITE_REPLAY_GAIN",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the mp3-abr-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [329] = {
  fname = "GetRenderCFG_Settings_OGG",
  label = "US_GetRenderCFG_Settings_OGG",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for OGG.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the mode for the ogg-file; 0, VBR; 1, CBR; 2, ABR ",
    name = "MODE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the quality for VBR-mode; a floating-value between 0 and 1",
    name = "VBR_QUALITY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the bitrate for CBR-mode; 0 to 4294967295 ",
    name = "CBR_KBPS",
   },
   [4] = {
    type = "INTEGER",
    desc = "the bitrate for ABR-mode; 0 to 4294967295",
    name = "ABR_KBPS",
   },
   [5] = {
    type = "INTEGER",
    desc = "the minimum bitrate for ABR-mode; 0 to 4294967295",
    name = "ABR_KBPS_MIN",
   },
   [6] = {
    type = "INTEGER",
    desc = "the maximum bitrate for ABR-mode; 0 to 4294967295",
    name = "ABR_KBPS_MAX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the ogg-settings\
nil, get the current new-project-default render-settings for ogg",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [330] = {
  fname = "GetRenderCFG_Settings_OPUS",
  label = "US_GetRenderCFG_Settings_OPUS",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for Opus.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the Mode for the Opus-file; 0, VBR; 1, CVBR; 2, HARDCBR ",
    name = "MODE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the kbps of the opus-file; between 1 and 256 ",
    name = "BITRATE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the complexity-setting between 0(lowest quality) and 10(highest quality, slow encoding) ",
    name = "COMPLEXITY",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, Encode 3-8 channel audio as 2.1-7.1(LFE) -> checked; false, DON'T Encode 3-8 channel audio as 2.1-7.1(LFE) -> unchecked",
    name = "CHANNEL_AUDIO",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, kbps per channel (6-256); false, kbps combined for all channels ",
    name = "PER_CHANNEL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the opus-settings\
nil, get the current new-project-default render-settings for opus",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [331] = {
  fname = "GetRenderCFG_Settings_GIF",
  label = "US_GetRenderCFG_Settings_GIF",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for Gif.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the width of the gif in pixels; 1 to 2147483647 pixels",
    name = "WIDTH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the height of the gif in pixels; 1 to 2147483647 pixels",
    name = "HEIGHT",
   },
   [3] = {
    type = "NUMBER",
    desc = "the maximum framerate of the gif",
    name = "MAXFRAMERATE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "Preserve aspect ratio (black bars, if necessary)-checkbox; true, checked; false, unchecked",
    name = "PRESERVEASPECTRATIO",
   },
   [5] = {
    type = "INTEGER",
    desc = "Ignore changed in low bits of color (0-7, 0 = full quality)-inputbox",
    name = "IGNORELOWBITS",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "Encode transparency (bad for normal video, good for some things possibly)-checkbox; true, checked; false, unchecked",
    name = "TRANSPARENCY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the gif-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [332] = {
  fname = "GetRenderCFG_Settings_LCF",
  label = "US_GetRenderCFG_Settings_LCF",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for LCF.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the width of the gif in pixels; 1 to 2147483647 pixels",
    name = "WIDTH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the height of the gif in pixels; 1 to 2147483647 pixels",
    name = "HEIGHT",
   },
   [3] = {
    type = "NUMBER",
    desc = "the maximum framerate of the gif",
    name = "MAXFRAMERATE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "Preserve aspect ratio (black bars, if necessary)-checkbox; true, checked; false, unchecked",
    name = "PRESERVEASPECTRATIO",
   },
   [5] = {
    type = "STRING",
    desc = "the tweak-settings for LCF, default is \"t20 x128 y16\"",
    name = "TWEAKSETTINGS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the lcf-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [333] = {
  fname = "GetRenderCFG_Settings_WAV",
  label = "US_GetRenderCFG_Settings_WAV",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for WAV.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the bitdepth of the WAV-file\
0, 8 Bit PCM\
1, 16 Bit PCM\
2, 24 Bit PCM                     \
3, 32 Bit FP\
4, 64 Bit FP\
5, 4 Bit IMA ADPCM\
6, 2 Bit cADPCM                     \
7, 32 Bit PCM\
8, 8 Bit u-Law",
    name = "BITDEPTH",
   },
   [2] = {
    type = "INTEGER",
    desc = "how shall Reaper treat large WAV-files\
  0, Auto WAV/Wave64\
  1, Auto Wav/RF64\
  2, Force WAV\
  3, Force Wave64\
  4, Force RF64 ",
    name = "LARGEFILES",
   },
   [3] = {
    type = "INTEGER",
    desc = "The \"Write BWF ('bext') chunk\" and \"Include project filename in BWF data\" - checkboxes\
  &1, checked - write BWF-checkbox; 0, unchecked\
  &2, checked - Include project filename in BWF data-checkbox; 0, unchecked",
    name = "BWFCHUNK",
   },
   [4] = {
    type = "INTEGER",
    desc = "The include markerlist-dropdownlist\
 0, Do not include markers and regions\
 1, Markers + regions\
 2, Markers + regions starting with #\
 3, Markers only\
 4, Markers starting with # only\
 5, Regions only\
 6, Regions starting with # only ",
    name = "INCLUDEMARKERS",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "Embed tempo-checkbox; true, checked; false, unchecked ",
    name = "EMBEDPROJECTTEMPO",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the wav-settings\
nil, get the current new-project-default render-settings for wav",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [334] = {
  fname = "GetRenderCFG_Settings_WAVPACK",
  label = "US_GetRenderCFG_Settings_WAVPACK",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for WAVPACK.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, Normal; 1, Fast; 2, High; 3, Very High(slowest) ",
    name = "MODE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the bitdepth of the WAVPACK-file\
   0(16Bit)\
   1(24Bit)\
   2(32Bit integer)\
   3(32Bit floating point)\
   4(23/24 Bit)\
   5(22/24 Bit)\
   6(21/24 Bit)\
   7(20/24 Bit)\
   8(19/24 Bit)\
   9(18/24 Bit)\
   10(17/24 Bit)\
   11(32 bit floating point -144dB floor)\
   12(32 bit floating point -120dB floor)\
   13(32 bit floating point -96dB floor) ",
    name = "BITDEPTH",
   },
   [3] = {
    type = "INTEGER",
    desc = "Write markers as cues-checkboxes\
  0, nothing checked\
  1, Write markers as cues->checked\
  2, Write markers as cues and Only write markers starting with #->checked ",
    name = "WRITEMARKERS",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "the Write BWF chunk-checkbox; true, checked; false, unchecked ",
    name = "WRITEBWFCHUNK",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "the include project filename in BWF data-checkbox; true, checked; false, unchecked ",
    name = "INCLUDEFILENAMEBWF",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the wavpack-settings\
nil, get the current new-project-default render-settings for wavpack",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [335] = {
  fname = "GetRenderCFG_Settings_WebM_Video",
  label = "US_GetRenderCFG_Settings_WebM_Video",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for WEBM_Video.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the video-bitrate of the video in kbps",
    name = "VIDKBPS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the audio-bitrate of the video in kbps",
    name = "AUDKBPS",
   },
   [3] = {
    type = "INTEGER",
    desc = "the width of the video in pixels",
    name = "WIDTH",
   },
   [4] = {
    type = "INTEGER",
    desc = "the height of the video in pixels",
    name = "HEIGHT",
   },
   [5] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps",
    name = "FPS",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio ",
    name = "ASPECTRATIO",
   },
   [7] = {
    type = "INTEGER",
    desc = "the video-codec used\
0, VP8\
1, VP9 (needs FFMPEG 4.1.3 installed)\
2, NONE",
    name = "VIDEOCODEC",
   },
   [8] = {
    type = "INTEGER",
    desc = "the video-codec used\
0, VORBIS\
1, OPUS (needs FFMPEG 4.1.3 installed)\
2, NONE",
    name = "AUDIOCODEC",
   },
   [9] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the video; examples: \
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    name = "VIDEOEXPORTOPTIONS",
   },
   [10] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the audio; examples: \
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest",
    name = "AUDIOEXPORTOPTIONS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the webm-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [336] = {
  fname = "GetRenderCFG_Settings_MKV_Video",
  label = "US_GetRenderCFG_Settings_MKV_Video",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for MKV-Video.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the used VideoCodec for the MKV-video\
0, FFV1 (lossless)\
1, Hufyuv (lossless)\
2, MJPEG\
3, MPEG-2 (needs FFMPEG 4.1.3 installed)\
4, H.264 (needs FFMPEG 4.1.3 installed)\
5, XviD (needs FFMPEG 4.1.3 installed)\
6, NONE",
    name = "VIDEO_CODEC",
   },
   [2] = {
    type = "INTEGER",
    desc = "the MJPEG-quality of the MKV-video, if VIDEO_CODEC=2 or when VIDEO_CODEC=4",
    name = "MJPEG_QUALITY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the audio-codec of the MKV-video\
0, 16 bit PCM\
1, 24 bit PCM\
2, 32 bit FP\
3, MP3 (needs FFMPEG 4.1.3 installed)\
4, AAC (needs FFMPEG 4.1.3 installed)\
5, NONE",
    name = "AUDIO_CODEC",
   },
   [4] = {
    type = "INTEGER",
    desc = "the width of the video in pixels",
    name = "WIDTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the height of the video in pixels",
    name = "HEIGHT",
   },
   [6] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps",
    name = "FPS",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio ",
    name = "ASPECTRATIO",
   },
   [8] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the video; examples: \
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    name = "VIDEOEXPORTOPTIONS",
   },
   [9] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the audio; examples: \
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest",
    name = "AUDIOEXPORTOPTIONS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the mkv-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [337] = {
  fname = "GetRenderCFG_Settings_AVI_Video",
  label = "US_GetRenderCFG_Settings_AVI_Video",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for AVI_Video.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Some format-combinations only work with FFMPEG 4.1.3 installed!\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the used VideoCodec for the AVI-video\
0, DV\
1, MJPEG\
2, FFV1 (lossless)\
3, Hufyuv (lossless)\
4, MPEG-2 (only with FFMPEG 4.1.3 installed)\
5, XVid (only with FFMPEG 4.1.3 installed)\
6, H.264 (only with FFMPEG 4.1.3 installed)\
7, NONE",
    name = "VIDEO_CODEC",
   },
   [2] = {
    type = "INTEGER",
    desc = "the MJPEG-quality of the AVI-video, if VIDEO_CODEC=1 or VIDEO_CODEC=6",
    name = "MJPEG_QUALITY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the audio-codec of the avi-video\
0, 16 bit PCM\
1, 24 bit PCM\
2, 32 bit FP\
3, MP3 (only with FFMPEG 4.1.3 installed)\
4, AAC (only with FFMPEG 4.1.3 installed)\
5, AC3 (only with FFMPEG 4.1.3 installed)\
6, NONE",
    name = "AUDIO_CODEC",
   },
   [4] = {
    type = "INTEGER",
    desc = "the width of the video in pixels",
    name = "WIDTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the height of the video in pixels",
    name = "HEIGHT",
   },
   [6] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps",
    name = "FPS",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio ",
    name = "ASPECTRATIO",
   },
   [8] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the video; examples: \
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    name = "VIDEOEXPORTOPTIONS",
   },
   [9] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the audio; examples: \
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest",
    name = "AUDIOEXPORTOPTIONS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the avi-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [338] = {
  fname = "GetRenderCFG_Settings_QTMOVMP4_Video",
  label = "US_GetRenderCFG_Settings_QTMOVMP4_Video",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for QT/MOV/MP4-video.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Note: some settings work only with FFMPEG 4.1.3 installed\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the MJPEG-quality of the video, when VIDEO_CODEC=0 or VIDEO_CODEC=2",
    name = "MJPEG_QUALITY",
   },
   [2] = {
    type = "INTEGER",
    desc = "the audio-codec of the video\
0, 16 bit PCM\
1, 24 bit PCM\
2, 32 bit FP\
3, AAC(only with FFMPEG 4.1.3 installed)\
4, MP3(only with FFMPEG 4.1.3 installed)\
5, NONE",
    name = "AUDIO_CODEC",
   },
   [3] = {
    type = "INTEGER",
    desc = "the width of the video in pixels",
    name = "WIDTH",
   },
   [4] = {
    type = "INTEGER",
    desc = "the height of the video in pixels",
    name = "HEIGHT",
   },
   [5] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps",
    name = "FPS",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio ",
    name = "ASPECTRATIO",
   },
   [7] = {
    type = "INTEGER",
    desc = "the video-codec\
0, H.264(only with FFMPEG 4.1.3 installed)\
1, MPEG-2(only with FFMPEG 4.1.3 installed)\
2, MJPEG\
3, NONE",
    name = "VIDEOCODEC",
   },
   [8] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the video; examples: \
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    name = "VIDEOEXPORTOPTIONS",
   },
   [9] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the audio; examples: \
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest",
    name = "AUDIOEXPORTOPTIONS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the qt/mov/mp4-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [339] = {
  fname = "GetRenderCFG_Settings_DDP",
  label = "US_GetRenderCFG_Settings_DDP",
  run = "in/out",
  desc = "Returns, if a renderstring is a valid DDP-render-string\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if renderstring is of the format DDP; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the DDP-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [340] = {
  fname = "CreateRenderCFG_GIF",
  label = "US_CreateRenderCFG_GIF",
  run = "in/out",
  desc = "Creates the render-cfg-string for the GIF-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected GIF-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the width of the gif in pixels; 1 to 2147483647",
    name = "WIDTH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the height of the gif in pixels; 1 to 2147483647 ",
    name = "HEIGHT",
   },
   [3] = {
    type = "NUMBER",
    desc = "the maximum framerate of the gif in fps; 0.01 to 2000.01 supported by the Ultraschall API",
    name = "MAXFPS",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "Preserve aspect ratio-checkbox; true, checked; false, unchecked",
    name = "ASPECTRATIO",
   },
   [5] = {
    type = "INTEGER",
    desc = "Ignore changes in low bits of color-inputbox, 0-7",
    name = "IGNORELOWBITS",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "Encode transparency-checkbox; true, checked; false, unchecked",
    name = "ENCODETRANSPARENCY",
   },
  },
  sp_api = "ultraschall",
 },
 [341] = {
  fname = "CreateRenderCFG_LCF",
  label = "US_CreateRenderCFG_LCF",
  run = "in/out",
  desc = "Creates the render-cfg-string for the LCF-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected LCF-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the width of the lcf in pixels; 1 to 2147483647",
    name = "WIDTH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the height of the lcf in pixels; 1 to 2147483647 ",
    name = "HEIGHT",
   },
   [3] = {
    type = "NUMBER",
    desc = "the maximum framerate of the lcf in fps; 0.01 to 2000.01 supported by the Ultraschall API",
    name = "MAXFPS",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "Preserve aspect ratio-checkbox; true, checked; false, unchecked",
    name = "ASPECTRATIO",
   },
   [5] = {
    type = "STRING",
    desc = "a 64bytes string, which can hold tweak-settings for lcf; default is \"t20 x128 y16\"; this function does not check for these options to be valid!",
    opt = {
     use = false,
    },
    name = "LCFOPTIONSTWEAK",
   },
  },
  sp_api = "ultraschall",
 },
 [342] = {
  fname = "CreateRenderCFG_WebM_Video",
  label = "US_CreateRenderCFG_WebM_Video",
  run = "in/out",
  desc = "Returns the render-cfg-string for the WebM-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Note: some settings need FFMPEG 4.1.3 to be installed\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected WebM-Video-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the video-bitrate of the video in kbps; 1 to 2147483647",
    name = "VIDKBPS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the audio-bitrate of the video in kbps; 1 to 2147483647",
    name = "AUDKBPS",
   },
   [3] = {
    type = "INTEGER",
    desc = "the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "WIDTH",
   },
   [4] = {
    type = "INTEGER",
    desc = "the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "HEIGHT",
   },
   [5] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00",
    name = "FPS",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio",
    name = "ASPECTRATIO",
   },
   [7] = {
    type = "INTEGER",
    desc = "the videocodec used for the video;\
nil, VP8\
1, VP8\
2, VP9(needs FFMPEG 4.1.3 to be installed)\
3, NONE",
    opt = {
     use = false,
    },
    name = "VIDEOCODEC",
   },
   [8] = {
    type = "INTEGER",
    desc = "the audiocodec to use for the video\
nil, VORBIS\
1, VORBIS\
2, OPUS(needs FFMPEG 4.1.3 to be installed)\
3, NONE",
    opt = {
     use = false,
    },
    name = "AUDIOCODEC",
   },
   [9] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    opt = {
     use = false,
    },
    name = "VIDEOOPTIONS",
   },
   [10] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest    ",
    opt = {
     use = false,
    },
    name = "AUDIOOPTIONS",
   },
  },
  sp_api = "ultraschall",
 },
 [343] = {
  fname = "CreateRenderCFG_MKV_Video",
  label = "US_CreateRenderCFG_MKV_Video",
  run = "in/out",
  desc = "Returns the render-cfg-string for the MKV-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Note: some settings work only with FFMPEG 4.1.3 installed\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected MKV-Video-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the videocodec used for the video;\
  1, FFV1 (lossless)\
  2, Hufyuv (lossles)\
  3, MJPEG\
  4, MPEG-2\
  5, H.264\
  6, XviD\
  7, NONE",
    name = "VIDEOCODEC",
   },
   [2] = {
    type = "INTEGER",
    desc = "set here the MJPEG-quality in percent, when VideoCodec=3; otherwise just set it to 0",
    name = "MJPEG_QUALITY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the audiocodec to use for the video\
1, 16 bit PCM\
2, 24 bit PCM\
3, 32 bit FP\
4, MP3\
5, AAC\
6, NONE",
    name = "AUDIOCODEC",
   },
   [4] = {
    type = "INTEGER",
    desc = "the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "WIDTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "HEIGHT",
   },
   [6] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00",
    name = "FPS",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio",
    name = "ASPECTRATIO",
   },
   [8] = {
    type = "INTEGER",
    desc = "the video-bitrate of the video in kbps; 1 to 2147483647(default is 2048)",
    opt = {
     use = false,
    },
    name = "VIDKBPS",
   },
   [9] = {
    type = "INTEGER",
    desc = "the audio-bitrate of the video in kbps; 1 to 2147483647(default is 128)",
    opt = {
     use = false,
    },
    name = "AUDKBPS",
   },
   [10] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    opt = {
     use = false,
    },
    name = "VIDEOOPTIONS",
   },
   [11] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest    ",
    opt = {
     use = false,
    },
    name = "AUDIOOPTIONS",
   },
  },
  sp_api = "ultraschall",
 },
 [344] = {
  fname = "CreateRenderCFG_QTMOVMP4_Video",
  label = "US_CreateRenderCFG_QTMOVMP4_Video",
  run = "in/out",
  desc = "Returns the render-cfg-string for the QT/MOV/MP4-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Note: some settings work only with FFMPEG 4.1.3 installed\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected QT/MOV/MP4-Video-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the videocodec used for the video;\
1, MJPEG\
2, H.264(needs FFMPEG 4.1.3 installed)\
3, MPEG-2(needs FFMPEG 4.1.3 installed)\
4, NONE",
    name = "VIDEOCODEC",
   },
   [2] = {
    type = "INTEGER",
    desc = "set here the MJPEG-quality in percent",
    name = "MJPEG_QUALITY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the audiocodec to use for the video\
1, 16 bit PCM\
2, 24 bit PCM\
3, 32 bit FP\
4, AAC(needs FFMPEG 4.1.3 installed)\
5, MP3(needs FFMPEG 4.1.3 installed)\
6, NONE",
    name = "AUDIOCODEC",
   },
   [4] = {
    type = "INTEGER",
    desc = "the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "WIDTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "HEIGHT",
   },
   [6] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00",
    name = "FPS",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio",
    name = "ASPECTRATIO",
   },
   [8] = {
    type = "INTEGER",
    desc = "the video-bitrate of the video in kbps; 1 to 2147483647(default 2048)",
    opt = {
     use = false,
    },
    name = "VIDKBPS",
   },
   [9] = {
    type = "INTEGER",
    desc = "the video-bitrate of the video in kbps; 1 to 2147483647(default 128)",
    opt = {
     use = false,
    },
    name = "AUDKBPS",
   },
   [10] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    opt = {
     use = false,
    },
    name = "VIDEOOPTIONS",
   },
   [11] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest    ",
    opt = {
     use = false,
    },
    name = "AUDIOOPTIONS",
   },
  },
  sp_api = "ultraschall",
 },
 [345] = {
  fname = "CreateRenderCFG_AVI_Video",
  label = "US_CreateRenderCFG_AVI_Video",
  run = "in/out",
  desc = "Returns the render-cfg-string for the AVI-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Note: some settings work only with FFMPEG 4.1.3 installed\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected AVI-Video-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the videocodec used for the video;\
1, DV\
2, MJPEG\
3, FFV1 (lossless)\
4, Hufyuv (lossless)\
5, MPEG-2\
6, XviD (only with FFMPEG 4.1.3 installed)\
7, H.264 (only with FFMPEG 4.1.3 installed)\
8, NONE",
    name = "VIDEOCODEC",
   },
   [2] = {
    type = "INTEGER",
    desc = "set here the MJPEG-quality in percent when VideoCodec=2, otherwise just set it to 0",
    name = "MJPEG_QUALITY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the audiocodec to use for the video\
1, 16 bit PCM\
2, 24 bit PCM\
3, 32 bit FP\
4, MP3 (only with FFMPEG 4.1.3 installed)\
5, AAC (only with FFMPEG 4.1.3 installed)\
6, AC3 (only with FFMPEG 4.1.3 installed)\
7, NONE",
    name = "AUDIOCODEC",
   },
   [4] = {
    type = "INTEGER",
    desc = "the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "WIDTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "HEIGHT",
   },
   [6] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00",
    name = "FPS",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio",
    name = "ASPECTRATIO",
   },
   [8] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    opt = {
     use = false,
    },
    name = "VIDEOOPTIONS",
   },
   [9] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest    ",
    opt = {
     use = false,
    },
    name = "AUDIOOPTIONS",
   },
  },
  sp_api = "ultraschall",
 },
 [346] = {
  fname = "GetRenderCFG_Settings_MP4Mac_Video",
  label = "US_GetRenderCFG_Settings_MP4Mac_Video",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for MP4 for Mac_Video(stream optimised and non-stream optimised).\
This is Mac-OS only!\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, mp4-video would be stream-optimized; false, mp4-video would not be stream-optimized",
    name = "STREAM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the video-bitrate of the video in kbps",
    name = "VIDKBPS",
   },
   [3] = {
    type = "INTEGER",
    desc = "the audio-bitrate of the video in kbps",
    name = "AUDKBPS",
   },
   [4] = {
    type = "INTEGER",
    desc = "the width of the video in pixels",
    name = "WIDTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the height of the video in pixels",
    name = "HEIGHT",
   },
   [6] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps",
    name = "FPS",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio ",
    name = "ASPECTRATIO",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the webm-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [347] = {
  fname = "GetRenderCFG_Settings_MOVMac_Video",
  label = "US_GetRenderCFG_Settings_MOVMac_Video",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for MOV for Mac_Video.\
This is MacOS-only.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the videocodec used for this setting\
0, h264\
1, Apple ProRes 4444\
2, Apple ProRes 422\
3, MJPEG",
    name = "VIDEOCODEC",
   },
   [2] = {
    type = "INTEGER",
    desc = "the video-bitrate of the video in kbps",
    name = "VIDKBPS",
   },
   [3] = {
    type = "INTEGER",
    desc = "when VideoCodec==3, then MJPEG is used; given in percent",
    name = "MJPEG_QUALITY",
   },
   [4] = {
    type = "INTEGER",
    desc = "the audiocodec used \
0, AAC\
1, 16-bit PCM\
2, 24-bit PCM\
3, 32-bit FP PCM",
    name = "AUDIOCODEC",
   },
   [5] = {
    type = "INTEGER",
    desc = "the audio-bitrate of the video in kbps",
    name = "AUDKBPS",
   },
   [6] = {
    type = "INTEGER",
    desc = "the width of the video in pixels",
    name = "WIDTH",
   },
   [7] = {
    type = "INTEGER",
    desc = "the height of the video in pixels",
    name = "HEIGHT",
   },
   [8] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps",
    name = "FPS",
   },
   [9] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio ",
    name = "ASPECTRATIO",
   },
   [10] = {
    type = "INTEGER",
    desc = "the format-dropdownlist\
0, MPEG-4 Video (streaming optimized)\
1, MPEG-4 Video\
2, Quicktime MOV\
3, MPEG-4 Audio",
    name = "FORMAT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the webm-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [348] = {
  fname = "GetRenderCFG_Settings_M4AMac",
  label = "US_GetRenderCFG_Settings_M4AMac",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for M4A for Mac_Video(even though this stores only audio-files).\
This is MacOS-only.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the audio-bitrate of the audio in kbps",
    name = "AUDKBPS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the width of the audio in pixels",
    name = "WIDTH",
   },
   [3] = {
    type = "INTEGER",
    desc = "the height of the audio in pixels",
    name = "HEIGHT",
   },
   [4] = {
    type = "NUMBER",
    desc = "the fps of the audio; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps",
    name = "FPS",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio ",
    name = "ASPECTRATIO",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the webm-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [349] = {
  fname = "CreateRenderCFG_MP4MAC_Video",
  label = "US_CreateRenderCFG_MP4MAC_Video",
  run = "in/out",
  desc = "Returns the render-cfg-string for the MP4-Mac-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
Only available on MacOS!\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected MP4-Mac-Video-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, the mp4-video is stream-optimized; false, the video is not stream-optimized",
    name = "STREAM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the video-bitrate for the video; 0 to 2147483647kbps",
    name = "VIDKBPS",
   },
   [3] = {
    type = "INTEGER",
    desc = "the audio-bitrate for the video; 0 to 2147483647kbps",
    name = "AUDKBPS",
   },
   [4] = {
    type = "INTEGER",
    desc = "the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "WIDTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "HEIGHT",
   },
   [6] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00",
    name = "FPS",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio",
    name = "ASPECTRATIO",
   },
  },
  sp_api = "ultraschall",
 },
 [350] = {
  fname = "CreateRenderCFG_M4AMAC",
  label = "US_CreateRenderCFG_M4AMAC",
  run = "in/out",
  desc = "Returns the render-cfg-string for the M4A-Mac-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
Only available on MacOS!\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected M4A-Mac-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the audio-bitrate for the video; 0 to 2147483647 kbps",
    name = "AUDKBPS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "WIDTH",
   },
   [3] = {
    type = "INTEGER",
    desc = "the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "HEIGHT",
   },
   [4] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00",
    name = "FPS",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio",
    name = "ASPECTRATIO",
   },
  },
  sp_api = "ultraschall",
 },
 [351] = {
  fname = "CreateRenderCFG_MOVMAC_Video",
  label = "US_CreateRenderCFG_MOVMAC_Video",
  run = "in/out",
  desc = "Returns the render-cfg-string for the MOV-Mac-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
Only available on MacOS!\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected MP4-Mac-Video-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the videocodec used for this setting\
0, h264\
1, Apple ProRes 4444\
2, Apple ProRes 422\
3, MJPEG",
    name = "VIDEOCODEC",
   },
   [2] = {
    type = "INTEGER",
    desc = "the video-bitrate of the video in kbps",
    name = "VIDKBPS",
   },
   [3] = {
    type = "INTEGER",
    desc = "when VideoCodec==3, then MJPEG is used; given in percent",
    name = "MJPEG_QUALITY",
   },
   [4] = {
    type = "INTEGER",
    desc = "the audiocodec used \
0, AAC\
1, 16-bit PCM\
2, 24-bit PCM\
3, 32-bit FP PCM",
    name = "AUDIOCODEC",
   },
   [5] = {
    type = "INTEGER",
    desc = "the audio-bitrate of the video in kbps",
    name = "AUDKBPS",
   },
   [6] = {
    type = "INTEGER",
    desc = "the width of the video in pixels",
    name = "WIDTH",
   },
   [7] = {
    type = "INTEGER",
    desc = "the height of the video in pixels",
    name = "HEIGHT",
   },
   [8] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps",
    name = "FPS",
   },
   [9] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio ",
    name = "ASPECTRATIO",
   },
  },
  sp_api = "ultraschall",
 },
 [352] = {
  fname = "GetRenderTable_Project",
  label = "US_GetRenderTable_Project",
  run = "in/out",
  desc = "Returns all stored render-settings for the current project, as a handy table.\
        \
        RenderTable[\"AddToProj\"] - Add rendered items to new tracks in project-checkbox; true, checked; false, unchecked\
        RenderTable[\"Brickwall_Limiter_Enabled\"] - true, brickwall limiting is enabled; false, brickwall limiting is disabled            \
        RenderTable[\"Brickwall_Limiter_Method\"] - brickwall-limiting-mode; 1, peak; 2, true peak\
        RenderTable[\"Brickwall_Limiter_Target\"] - the volume of the brickwall-limit\
        RenderTable[\"Bounds\"] - 0, Custom time range; \
                                1, Entire project; \
                                2, Time selection; \
                                3, Project regions; \
                                4, Selected Media Items(in combination with Source 32); \
                                5, Selected regions\
                                6, Razor edit areas\
                                7, All project markers\
                                8, Selected markers\
        RenderTable[\"Channels\"] - the number of channels in the rendered file; \
                                  1, mono; \
                                  2, stereo; \
                                  higher, the number of channels\
        RenderTable[\"CloseAfterRender\"] - true, closes rendering to file-dialog after render; false, doesn't close it\
        RenderTable[\"Dither\"] - &1, dither master mix; \
                                &2, noise shaping master mix; \
                                &4, dither stems; \
                                &8, dither noise shaping stems\
        RenderTable[\"EmbedMetaData\"] - Embed metadata; true, checked; false, unchecked\
        RenderTable[\"EmbedStretchMarkers\"] - Embed stretch markers/transient guides; true, checked; false, unchecked\
        RenderTable[\"EmbedTakeMarkers\"] - Embed Take markers; true, checked; false, unchecked                        \
        RenderTable[\"Enable2ndPassRender\"] - true, 2nd pass render is enabled; false, 2nd pass render is disabled\
        RenderTable[\"Endposition\"] - the endposition of the rendering selection in seconds            \
        RenderTable[\"FadeIn_Enabled\"] - true, fade-in is enabled; false, fade-in is disabled\
        RenderTable[\"FadeIn\"] - the fade-in-time in seconds\
        RenderTable[\"FadeIn_Shape\"] - the fade-in-shape\
                               - 0, Linear fade in\
                               - 1, Inverted quadratic fade in\
                               - 2, Quadratic fade in\
                               - 3, Inverted quartic fade in\
                               - 4, Quartic fade in\
                               - 5, Cosine S-curve fade in\
                               - 6, Quartic S-curve fade in\
        RenderTable[\"FadeOut_Enabled\"] - true, fade-out is enabled; false, fade-out is disabled\
        RenderTable[\"FadeOut\"] - the fade-out time in seconds\
        RenderTable[\"FadeOut_Shape\"] - the fade-out-shape\
                               - 0, Linear fade in\
                               - 1, Inverted quadratic fade in\
                               - 2, Quadratic fade in\
                               - 3, Inverted quartic fade in\
                               - 4, Quartic fade in\
                               - 5, Cosine S-curve fade in\
                               - 6, Quartic S-curve fade in\
        RenderTable[\"MultiChannelFiles\"] - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked            \
        RenderTable[\"Normalize_Enabled\"] - true, normalization enabled; false, normalization not enabled\
        RenderTable[\"Normalize_Method\"] - the normalize-method-dropdownlist\
                       0, LUFS-I\
                       1, RMS-I\
                       2, Peak\
                       3, True Peak\
                       4, LUFS-M max\
                       5, LUFS-S max\
        RenderTable[\"Normalize_Only_Files_Too_Loud\"] - Only normalize files that are too loud,checkbox\
                                                     - true, checkbox checked\
                                                     - false, checkbox unchecked\
        RenderTable[\"Normalize_Stems_to_Master_Target\"] - true, normalize-stems to master target(common gain to stems)\
                                                          false, normalize each file individually\
        RenderTable[\"Normalize_Target\"] - the normalize-target as dB-value\
        RenderTable[\"NoSilentRender\"] - Do not render files that are likely silent-checkbox; true, checked; false, unchecked\
        RenderTable[\"OfflineOnlineRendering\"] - Offline/Online rendering-dropdownlist; \
                                                0, Full-speed Offline\
                                                1, 1x Offline\
                                                2, Online Render\
                                                3, Online Render(Idle)\
                                                4, Offline Render(Idle)\
        RenderTable[\"OnlyMonoMedia\"] - Tracks with only mono media to mono files-checkbox; true, checked; false, unchecked\
        RenderTable[\"OnlyChannelsSentToParent\"] - true, option is checked; false, option is unchecked\
        RenderTable[\"ProjectSampleRateFXProcessing\"] - Use project sample rate for mixing and FX/synth processing-checkbox; true, checked; false, unchecked\
        RenderTable[\"RenderFile\"] - the contents of the Directory-inputbox of the Render to File-dialog\
        RenderTable[\"RenderPattern\"] - the render pattern as input into the File name-inputbox of the Render to File-dialog\
        RenderTable[\"RenderQueueDelay\"] - Delay queued render to allow samples to load-checkbox; true, checked; false, unchecked\
        RenderTable[\"RenderQueueDelaySeconds\"] - the amount of seconds for the render-queue-delay\
        RenderTable[\"RenderResample\"] - Resample mode-dropdownlist; \
                                            0, Sinc Interpolation: 64pt (medium quality)\
                                            1, Linear Interpolation: (low quality)\
                                            2, Point Sampling (lowest quality, retro)\
                                            3, Sinc Interpolation: 192pt\
                                            4, Sinc Interpolation: 384pt\
                                            5, Linear Interpolation + IIR\
                                            6, Linear Interpolation + IIRx2\
                                            7, Sinc Interpolation: 16pt\
                                            8, Sinc Interpolation: 512pt(slow)\
                                            9, Sinc Interpolation: 768pt(very slow)\
                                            10, r8brain free (highest quality, fast)\
        RenderTable[\"RenderStems_Prefader\"] - true, option is checked; false, option is unchecked\
        RenderTable[\"RenderString\"] - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string\
        RenderTable[\"RenderString2\"] - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string\
        RenderTable[\"RenderTable\"]=true - signals, this is a valid render-table\
        RenderTable[\"SampleRate\"] - the samplerate of the rendered file(s)\
        RenderTable[\"SaveCopyOfProject\"] - the \"Save copy of project to outfile.wav.RPP\"-checkbox; true, checked; false, unchecked\
        RenderTable[\"SilentlyIncrementFilename\"] - Silently increment filenames to avoid overwriting-checkbox; true, checked; false, unchecked\
        RenderTable[\"Source\"] - 0, Master mix; \
                                1, Master mix + stems; \
                                3, Stems (selected tracks); \
                                8, Region render matrix; \
                                16, Tracks with only Mono-Media to Mono Files; \
                                32, Selected media items; \
                                64, selected media items via master; \
                                128, selected tracks via master\
                                4096, Razor edit areas\
                                4224, Razor edit areas via master\
        RenderTable[\"Startposition\"] - the startposition of the rendering selection in seconds\
        RenderTable[\"TailFlag\"] - in which bounds is the Tail-checkbox checked\
                                  &1, custom time bounds; \
                                  &2, entire project; \
                                  &4, time selection; \
                                  &8, all project regions; \
                                  &16, selected media items; \
                                  &32, selected project regions\
                                  &64, razor edit areas\
        RenderTable[\"TailMS\"] - the amount of milliseconds of the tail\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all of the current project's render-settings",
    name = "RENDERTABLE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [353] = {
  fname = "GetRenderTable_ProjectFile",
  label = "US_GetRenderTable_ProjectFile",
  run = "in/out",
  desc = "Returns all stored render-settings in a projectfile, as a handy table.\
        \
        RenderTable[\"AddToProj\"] - Add rendered items to new tracks in project-checkbox; true, checked; false, unchecked\
        RenderTable[\"Brickwall_Limiter_Enabled\"] - true, brickwall limiting is enabled; false, brickwall limiting is disabled            \
        RenderTable[\"Brickwall_Limiter_Method\"] - brickwall-limiting-mode; 1, peak; 2, true peak\
        RenderTable[\"Brickwall_Limiter_Target\"] - the volume of the brickwall-limit\
        RenderTable[\"Bounds\"] - 0, Custom time range; \
                                1, Entire project; \
                                2, Time selection; \
                                3, Project regions; \
                                4, Selected Media Items(in combination with Source 32); \
                                5, Selected regions\
                                6, Razor edit areas\
                                7, All project markers\
                                8, Selected markers\
        RenderTable[\"Channels\"] - the number of channels in the rendered file; \
                                  1, mono; \
                                  2, stereo; \
                                  higher, the number of channels\
        RenderTable[\"CloseAfterRender\"] - true, closes rendering to file-dialog after render; always true, as this isn't stored in projectfiles\
        RenderTable[\"Dither\"] - &1, dither master mix; \
                                &2, noise shaping master mix; \
                                &4, dither stems; \
                                &8, dither noise shaping stems\
        RenderTable[\"EmbedMetaData\"] - Embed metadata; true, checked; false, unchecked\
        RenderTable[\"EmbedStretchMarkers\"] - Embed stretch markers/transient guides; true, checked; false, unchecked\
        RenderTable[\"EmbedTakeMarkers\"] - Embed Take markers; true, checked; false, unchecked                        \
        RenderTable[\"Enable2ndPassRender\"] - true, 2nd pass render is enabled; false, 2nd pass render is disabled\
        RenderTable[\"Endposition\"] - the endposition of the rendering selection in seconds            \
        RenderTable[\"FadeIn_Enabled\"] - true, fade-in is enabled; false, fade-in is disabled\
        RenderTable[\"FadeIn\"] - the fade-in-time in seconds\
        RenderTable[\"FadeIn_Shape\"] - the fade-in-shape\
                               - 0, Linear fade in\
                               - 1, Inverted quadratic fade in\
                               - 2, Quadratic fade in\
                               - 3, Inverted quartic fade in\
                               - 4, Quartic fade in\
                               - 5, Cosine S-curve fade in\
                               - 6, Quartic S-curve fade in\
        RenderTable[\"FadeOut_Enabled\"] - true, fade-out is enabled; false, fade-out is disabled\
        RenderTable[\"FadeOut\"] - the fade-out time in seconds\
        RenderTable[\"FadeOut_Shape\"] - the fade-out-shape\
                               - 0, Linear fade in\
                               - 1, Inverted quadratic fade in\
                               - 2, Quadratic fade in\
                               - 3, Inverted quartic fade in\
                               - 4, Quartic fade in\
                               - 5, Cosine S-curve fade in\
                               - 6, Quartic S-curve fade in\
        RenderTable[\"MultiChannelFiles\"] - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked\
        RenderTable[\"Normalize_Enabled\"] - true, normalization enabled; false, normalization not enabled\
        RenderTable[\"Normalize_Method\"] - the normalize-method-dropdownlist\
                                   0, LUFS-I\
                                   1, RMS-I\
                                   2, Peak\
                                   3, True Peak\
                                   4, LUFS-M max\
                                   5, LUFS-S max\
        RenderTable[\"Normalize_Stems_to_Master_Target\"] - true, normalize-stems to master target(common gain to stems)\
                                                          false, normalize each file individually\
        RenderTable[\"Normalize_Target\"] - the normalize-target as dB-value\
        RenderTable[\"NoSilentRender\"] - Do not render files that are likely silent-checkbox; true, checked; false, unchecked\
        RenderTable[\"OfflineOnlineRendering\"] - Offline/Online rendering-dropdownlist; \
                                                0, Full-speed Offline; \
                                                1, 1x Offline; \
                                                2, Online Render; \
                                                3, Online Render(Idle); \
                                                4, Offline Render(Idle)\
        RenderTable[\"OnlyChannelsSentToParent\"] - true, option is checked; false, option is unchecked\
        RenderTable[\"OnlyMonoMedia\"] - Tracks with only mono media to mono files-checkbox; true, checked; false, unchecked\
        RenderTable[\"ProjectSampleRateFXProcessing\"] - Use project sample rate for mixing and FX/synth processing-checkbox; true, checked; false, unchecked\
        RenderTable[\"RenderFile\"] - the contents of the Directory-inputbox of the Render to File-dialog\
        RenderTable[\"RenderPattern\"] - the render pattern as input into the File name-inputbox of the Render to File-dialog\
        RenderTable[\"RenderQueueDelay\"] - Delay queued render to allow samples to load-checkbox; true, checked; false, unchecked\
        RenderTable[\"RenderQueueDelaySeconds\"] - the amount of seconds for the render-queue-delay\
        RenderTable[\"RenderResample\"] - Resample mode-dropdownlist; \
                                            0, Sinc Interpolation: 64pt (medium quality)\
                                            1, Linear Interpolation: (low quality)\
                                            2, Point Sampling (lowest quality, retro)\
                                            3, Sinc Interpolation: 192pt\
                                            4, Sinc Interpolation: 384pt\
                                            5, Linear Interpolation + IIR\
                                            6, Linear Interpolation + IIRx2\
                                            7, Sinc Interpolation: 16pt\
                                            8, Sinc Interpolation: 512pt(slow)\
                                            9, Sinc Interpolation: 768pt(very slow)\
                                            10, r8brain free (highest quality, fast)\
        RenderTable[\"RenderStems_Prefader\"] - true, option is checked; false, option is unchecked\
        RenderTable[\"RenderString\"] - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string\
        RenderTable[\"RenderString2\"] - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string\
        RenderTable[\"RenderTable\"]=true - signals, this is a valid render-table\
        RenderTable[\"SampleRate\"] - the samplerate of the rendered file(s)\
        RenderTable[\"SaveCopyOfProject\"] - the \"Save copy of project to outfile.wav.RPP\"-checkbox; always true(checked), as this isn't stored in projectfiles\
        RenderTable[\"SilentlyIncrementFilename\"] - Silently increment filenames to avoid overwriting-checkbox; always false, as this is not stored in projectfiles\
        RenderTable[\"Source\"] - 0, Master mix; \
                                1, Master mix + stems; \
                                3, Stems (selected tracks); \
                                8, Region render matrix; \
                                16, Tracks with only Mono-Media to Mono Files; \
                                32, Selected media items; \
                                64, selected media items via master; \
                                128, selected tracks via master\
                                4096, Razor edit areas\
                                4224, Razor edit areas via master\
        RenderTable[\"Startposition\"] - the startposition of the rendering selection in seconds\
        RenderTable[\"TailFlag\"] - in which bounds is the Tail-checkbox checked\
                                  &1, custom time bounds; \
                                  &2, entire project; \
                                  &4, time selection; \
                                  &8, all project regions; \
                                  &16, selected media items; \
                                  &32, selected project regions\
                                  &64, razor edit areas\
        RenderTable[\"TailMS\"] - the amount of milliseconds of the tail\
           \
Returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all of the current project's render-settings",
    name = "RENDERTABLE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile, whose render-settings you want to get",
    name = "PROJECTFILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [354] = {
  fname = "GetOutputFormat_RenderCfg",
  label = "US_GetOutputFormat_RenderCfg",
  run = "in/out",
  desc = "Returns the output-format set in a render-cfg-string, as stored in rpp-files and the render-presets file reaper-render.ini\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the outputformat, set in the render-cfg-string\
The following are valid: \
\"WAV\", \"AIFF\", \"CAF\", \"AUDIOCD-IMAGE\", \"DDP\", \"FLAC\", \"MP3\", \"OGG\", \"Opus\", \"Video\", \"Video (Mac)\", \"Video GIF\", \"Video LCF\", \"WAVPACK\", \"Unknown\"",
    name = "OUTPUTFORMAT",
   },
   [2] = {
    type = "STRING",
    desc = "the base64-decoded renderstring, which is either the renderstring you've passed or the one from the ReaProject you passed as second parameter",
    name = "RENDERSTRING_DECODED",
   },
   [3] = {
    type = "STRING",
    desc = "the base64-encoded renderstring, which is either the renderstring you've passed or the one from the ReaProject you passed as second parameter",
    name = "RENDERSTRING_ENCODED",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string from a rpp-projectfile or the reaper-render.ini\
nil, to get the settings of the currently opened project",
    name = "RENDERSTRING",
   },
   [2] = {
    type = "REAPROJECT",
    desc = "a ReaProject, whose renderformat you want to know; only available, when Renderstring=nil\
set to nil, to use the currently opened project\
pass as integer to get the renderformat of a specific projecttab, with 0 for the current, 1 for the first, 2 for the second, etc",
    opt = {
     use = false,
    },
    name = "REAPROJECT",
   },
  },
  sp_api = "ultraschall",
 },
 [355] = {
  fname = "CreateRenderCFG_Opus",
  label = "US_CreateRenderCFG_Opus",
  run = "in/out",
  desc = "Creates the render-cfg-string for the Opus-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected Opus-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the Mode for the Opus-file; 0, VBR; 1, CVBR; 2, HARDCBR",
    name = "MODE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the kbps of the opus-file; Ultraschall-Api supports between 1 and 10256 ",
    name = "KBPS",
   },
   [3] = {
    type = "INTEGER",
    desc = "the complexity-setting between 0(lowest quality) and 10(highest quality, slow encoding)",
    name = "COMPLEXITY",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, Encode 3-8 channel audio as 2.1-7.1(LFE); false, DON'T Encode 3-8 channel audio as 2.1-7.1(LFE) ",
    name = "CHANNEL_AUDIO",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, kbps per channel (6-256); false, kbps combined for all channels ",
    name = "PER_CHANNEL",
   },
  },
  sp_api = "ultraschall",
 },
 [356] = {
  fname = "CreateRenderCFG_OGG",
  label = "US_CreateRenderCFG_OGG",
  run = "in/out",
  desc = "Returns the render-cfg-string for the OGG-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
For all mode-settings that you don't need(kbps or quality), you can safely set them to 1.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected OGG-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the mode for the ogg-file; 0, VBR; 1, CBR; 2, ABR",
    name = "MODE",
   },
   [2] = {
    type = "NUMBER",
    desc = "the quality for VBR-mode; a floating-value between 0 and 1",
    name = "VBR_QUALITY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the bitrate for CBR-mode; 0 to 2048",
    name = "CBR_KBPS",
   },
   [4] = {
    type = "INTEGER",
    desc = "the bitrate for ABR-mode; 0 to 2048",
    name = "ABR_KBPS",
   },
   [5] = {
    type = "INTEGER",
    desc = "the minimum-bitrate for ABR-mode; 0 to 2048",
    name = "ABR_KBPS_MIN",
   },
   [6] = {
    type = "INTEGER",
    desc = "the maximum-bitrate for ABR-mode; 0 to 2048",
    name = "ABR_KBPS_MAX",
   },
  },
  sp_api = "ultraschall",
 },
 [357] = {
  fname = "CreateRenderCFG_DDP",
  label = "US_CreateRenderCFG_DDP",
  run = "in/out",
  desc = "Returns the render-cfg-string for the DDP-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected DDP-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [358] = {
  fname = "CreateRenderCFG_FLAC",
  label = "US_CreateRenderCFG_FLAC",
  run = "in/out",
  desc = "Returns the render-cfg-string for the FLAC-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected FLAC-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the bitrate of the flac-file; \
0, 24 bit\
1, 23/24 bit\
2, 22/24 bit\
3, 21/24 bit\
4, 20/24 bit\
5, 19/24 bit\
6, 18/24 bit\
7, 17/24 bit\
8, 16 bit",
    name = "BITRATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the encoding speed; 0(fastest) to 8(slowest); 5(default)",
    name = "ENCSPEED",
   },
  },
  sp_api = "ultraschall",
 },
 [359] = {
  fname = "CreateRenderCFG_WAVPACK",
  label = "US_CreateRenderCFG_WAVPACK",
  run = "in/out",
  desc = "Returns the render-cfg-string for the WAVPACK-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected WAVPACK-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "0, Normal; 1, Fast; 2, High; 3, Very High(slowest)",
    name = "MODE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the bitdepth of the WAVPACK-file\
  0(16Bit)\
  1(24Bit)\
  2(32Bit integer)\
  3(32Bit floating point)\
  4(23/24 Bit)\
  5(22/24 Bit)\
  6(21/24 Bit)\
  7(20/24 Bit)\
  8(19/24 Bit)\
  9(18/24 Bit)\
  10(17/24 Bit)\
  11(32 bit floating point -144dB floor)\
  12(32 bit floating point -120dB floor)\
  13(32 bit floating point -96dB floor)",
    name = "BITDEPTH",
   },
   [3] = {
    type = "INTEGER",
    desc = "Write markers as cues-checkboxes\
0, nothing checked\
1, Write markers as cues->checked\
2, Write markers as cues and Only write markers starting with #->checked",
    name = "WRITEMARKERS",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "the Write BWF chunk-checkbox; true, checked; false, unchecked",
    name = "WRITEBWFCHUNK",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "the include project filename in BWF data-checkbox; true, checked; false, unchecked",
    name = "INCLUDEFILENAMEBWF",
   },
  },
  sp_api = "ultraschall",
 },
 [360] = {
  fname = "IsValidRenderTable",
  label = "US_IsValidRenderTable",
  run = "in/out",
  desc = "returns, if the table RenderTable is a valid RenderTable.\
\
Returns false in case of an error; the error-message contains the faulty table-entry.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, RenderTable is a valid RenderTable; false, it is not a valid RenderTable",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "the table, that you want to check for validity",
    name = "RENDERTABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [361] = {
  fname = "ApplyRenderTable_Project",
  label = "US_ApplyRenderTable_Project",
  run = "in/out",
  desc = "Sets all stored render-settings from a RenderTable as the current project-settings.\
\
Note: On Reaper 6.10, you cannot set AddToProj and NoSilentRender simultaneously due a bug in Reaper; is fixed in higher versions.\
        \
Expected table is of the following structure:\
\
        RenderTable[\"AddToProj\"] - Add rendered items to new tracks in project-checkbox; \
                                    true, checked; \
                                    false, unchecked\
        RenderTable[\"Brickwall_Limiter_Enabled\"] - true, brickwall limiting is enabled; false, brickwall limiting is disabled            \
        RenderTable[\"Brickwall_Limiter_Method\"] - brickwall-limiting-mode; 1, peak; 2, true peak\
        RenderTable[\"Brickwall_Limiter_Target\"] - the volume of the brickwall-limit\
        RenderTable[\"Bounds\"]    - 0, Custom time range; \
                                   1, Entire project; \
                                   2, Time selection; \
                                   3, Project regions; \
                                   4, Selected Media Items(in combination with Source 32); \
                                   5, Selected regions\
                                   6, Razor edit areas\
                                   7, All project markers\
                                   8, Selected markers\
        RenderTable[\"Channels\"] - the number of channels in the rendered file; \
                                      1, mono; \
                                      2, stereo; \
                                      higher, the number of channels\
        RenderTable[\"CloseAfterRender\"] - true, close rendering to file-dialog after render; \
                                          false, don't close it\
        RenderTable[\"Dither\"] - &1, dither master mix; \
                                &2, noise shaping master mix; \
                                &4, dither stems; \
                                &8, dither noise shaping stems\
        RenderTable[\"EmbedMetaData\"]       - Embed metadata; true, checked; false, unchecked\
        RenderTable[\"EmbedStretchMarkers\"] - Embed stretch markers/transient guides; true, checked; false, unchecked\
        RenderTable[\"EmbedTakeMarkers\"]    - Embed Take markers; true, checked; false, unchecked\
        RenderTable[\"Enable2ndPassRender\"] - true, 2nd pass render is enabled; false, 2nd pass render is disabled\
        RenderTable[\"Endposition\"]         - the endposition of the rendering selection in seconds\
        RenderTable[\"FadeIn_Enabled\"] - true, fade-in is enabled; false, fade-in is disabled\
        RenderTable[\"FadeIn\"] - the fade-in-time in seconds\
        RenderTable[\"FadeIn_Shape\"] - the fade-in-shape\
                               - 0, Linear fade in\
                               - 1, Inverted quadratic fade in\
                               - 2, Quadratic fade in\
                               - 3, Inverted quartic fade in\
                               - 4, Quartic fade in\
                               - 5, Cosine S-curve fade in\
                               - 6, Quartic S-curve fade in\
        RenderTable[\"FadeOut_Enabled\"] - true, fade-out is enabled; false, fade-out is disabled\
        RenderTable[\"FadeOut\"] - the fade-out time in seconds\
        RenderTable[\"FadeOut_Shape\"] - the fade-out-shape\
                               - 0, Linear fade in\
                               - 1, Inverted quadratic fade in\
                               - 2, Quadratic fade in\
                               - 3, Inverted quartic fade in\
                               - 4, Quartic fade in\
                               - 5, Cosine S-curve fade in\
                               - 6, Quartic S-curve fade in\
        RenderTable[\"MultiChannelFiles\"]   - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked            \
        RenderTable[\"Normalize_Enabled\"]   - true, normalization enabled; \
                                             false, normalization not enabled\
        RenderTable[\"Normalize_Method\"]    - the normalize-method-dropdownlist\
                                                 0, LUFS-I\
                                                 1, RMS-I\
                                                 2, Peak\
                                                 3, True Peak\
                                                 4, LUFS-M max\
                                                 5, LUFS-S max\
        RenderTable[\"Normalize_Only_Files_Too_Loud\"] - Only normalize files that are too loud,checkbox\
                                                     - true, checkbox checked\
                                                     - false, checkbox unchecked\
        RenderTable[\"Normalize_Stems_to_Master_Target\"] - true, normalize-stems to master target(common gain to stems)\
                                                          false, normalize each file individually\
        RenderTable[\"Normalize_Target\"]       - the normalize-target as dB-value    \
        RenderTable[\"NoSilentRender\"]         - Do not render files that are likely silent-checkbox; true, checked; false, unchecked\
        RenderTable[\"OfflineOnlineRendering\"] - Offline/Online rendering-dropdownlist; \
                                                    0, Full-speed Offline; \
                                                    1, 1x Offline; \
                                                    2, Online Render; \
                                                    3, Online Render(Idle); \
                                                    4, Offline Render(Idle)\
        RenderTable[\"OnlyChannelsSentToParent\"] - true, option is checked; false, option is unchecked\
        RenderTable[\"OnlyMonoMedia\"] - Tracks with only mono media to mono files-checkbox; \
                                           true, checked; \
                                           false, unchecked\
        RenderTable[\"ProjectSampleRateFXProcessing\"] - Use project sample rate for mixing and FX/synth processing-checkbox; \
                                                       true, checked; false, unchecked\
        RenderTable[\"RenderFile\"]       - the contents of the Directory-inputbox of the Render to File-dialog\
        RenderTable[\"RenderPattern\"]    - the render pattern as input into the File name-inputbox of the Render to File-dialog\
        RenderTable[\"RenderQueueDelay\"] - Delay queued render to allow samples to load-checkbox; true, checked; false, unchecked\
        RenderTable[\"RenderQueueDelaySeconds\"] - the amount of seconds for the render-queue-delay\
        RenderTable[\"RenderResample\"] - Resample mode-dropdownlist; \
                                            0, Sinc Interpolation: 64pt (medium quality)\
                                            1, Linear Interpolation: (low quality)\
                                            2, Point Sampling (lowest quality, retro)\
                                            3, Sinc Interpolation: 192pt\
                                            4, Sinc Interpolation: 384pt\
                                            5, Linear Interpolation + IIR\
                                            6, Linear Interpolation + IIRx2\
                                            7, Sinc Interpolation: 16pt\
                                            8, Sinc Interpolation: 512pt(slow)\
                                            9, Sinc Interpolation: 768pt(very slow)\
                                            10, r8brain free (highest quality, fast)\
        RenderTable[\"RenderStems_Prefader\"] - true, option is checked; false, option is unchecked\
        RenderTable[\"RenderString\"]     - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string\
        RenderTable[\"RenderString2\"]    - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string\
        RenderTable[\"RenderTable\"]=true - signals, this is a valid render-table\
        RenderTable[\"SampleRate\"]       - the samplerate of the rendered file(s)\
        RenderTable[\"SaveCopyOfProject\"] - the \"Save copy of project to outfile.wav.RPP\"-checkbox; \
                                            true, checked; \
                                            false, unchecked\
        RenderTable[\"SilentlyIncrementFilename\"] - Silently increment filenames to avoid overwriting-checkbox; \
                                                    true, checked\
                                                    false, unchecked\
        RenderTable[\"Source\"] - 0, Master mix; \
                                1, Master mix + stems; \
                                3, Stems (selected tracks); \
                                8, Region render matrix; \
                                16, Tracks with only Mono-Media to Mono Files; \
                                32, Selected media items; 64, selected media items via master; \
                                128, selected tracks via master\
                                4096, Razor edit areas\
                                4224, Razor edit areas via master\
        RenderTable[\"Startposition\"] - the startposition of the rendering selection in seconds\
        RenderTable[\"TailFlag\"] - in which bounds is the Tail-checkbox checked? \
                                    &1, custom time bounds; \
                                    &2, entire project; \
                                    &4, time selection; \
                                    &8, all project regions; \
                                    &16, selected media items; \
                                    &32, selected project regions\
                                    &64, razor edit areas\
        RenderTable[\"TailMS\"] - the amount of milliseconds of the tail\
        \
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting the render-settings was successful; false, it wasn't successful",
    name = "RETVAL",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, settings have been altered(project is dirty); false, settings haven't been altered(undirty)",
    name = "DIRTY",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "a RenderTable, that contains all render-dialog-settings",
    name = "RENDERTABLE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true or nil, apply it as well; false, don't apply it",
    opt = {
     use = false,
    },
    name = "APPLY_RENDERCFG_STRING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, function set the project to dirty, if any project setting has been altered by RenderTable(only if dirty==true); false and nil, don't set to dirty, if anything changed",
    opt = {
     use = false,
    },
    name = "DIRTYNESS",
   },
  },
  sp_api = "ultraschall",
 },
 [362] = {
  fname = "ApplyRenderTable_ProjectFile",
  label = "US_ApplyRenderTable_ProjectFile",
  run = "in/out",
  desc = "Sets all stored render-settings from a RenderTable as the current project-settings.\
        \
Expected table is of the following structure:\
\
        RenderTable[\"AddToProj\"] - Add rendered items to new tracks in project-checkbox; \
                                    true, checked; \
                                    false, unchecked\
        RenderTable[\"Brickwall_Limiter_Enabled\"] - true, brickwall limiting is enabled; false, brickwall limiting is disabled            \
        RenderTable[\"Brickwall_Limiter_Method\"] - brickwall-limiting-mode; 1, peak; 2, true peak\
        RenderTable[\"Brickwall_Limiter_Target\"] - the volume of the brickwall-limit\
        RenderTable[\"Bounds\"]    - 0, Custom time range; \
                                   1, Entire project; \
                                   2, Time selection; \
                                   3, Project regions; \
                                   4, Selected Media Items(in combination with Source 32); \
                                   5, Selected regions\
                                   6, Razor edit areas\
                                   7, All project markers\
                                   8, Selected markers\
        RenderTable[\"Channels\"] - the number of channels in the rendered file; \
                                      1, mono; \
                                      2, stereo; \
                                      higher, the number of channels\
        RenderTable[\"CloseAfterRender\"] - true, close rendering to file-dialog after render; \
                                          false, don't close it\
        RenderTable[\"Dither\"] - &1, dither master mix; \
                                &2, noise shaping master mix; \
                                &4, dither stems; \
                                &8, dither noise shaping stems\
        RenderTable[\"EmbedMetaData\"]       - Embed metadata; true, checked; false, unchecked\
        RenderTable[\"EmbedStretchMarkers\"] - Embed stretch markers/transient guides; true, checked; false, unchecked\
        RenderTable[\"EmbedTakeMarkers\"]    - Embed Take markers; true, checked; false, unchecked\
        RenderTable[\"Enable2ndPassRender\"] - true, 2nd pass render is enabled; false, 2nd pass render is disabled\
        RenderTable[\"Endposition\"]         - the endposition of the rendering selection in seconds\
        RenderTable[\"FadeIn_Enabled\"] - true, fade-in is enabled; false, fade-in is disabled\
        RenderTable[\"FadeIn\"] - the fade-in-time in seconds\
        RenderTable[\"FadeIn_Shape\"] - the fade-in-shape\
                               - 0, Linear fade in\
                               - 1, Inverted quadratic fade in\
                               - 2, Quadratic fade in\
                               - 3, Inverted quartic fade in\
                               - 4, Quartic fade in\
                               - 5, Cosine S-curve fade in\
                               - 6, Quartic S-curve fade in\
        RenderTable[\"FadeOut_Enabled\"] - true, fade-out is enabled; false, fade-out is disabled\
        RenderTable[\"FadeOut\"] - the fade-out time in seconds\
        RenderTable[\"FadeOut_Shape\"] - the fade-out-shape\
                               - 0, Linear fade in\
                               - 1, Inverted quadratic fade in\
                               - 2, Quadratic fade in\
                               - 3, Inverted quartic fade in\
                               - 4, Quartic fade in\
                               - 5, Cosine S-curve fade in\
                               - 6, Quartic S-curve fade in\
        RenderTable[\"MultiChannelFiles\"]   - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked\
        RenderTable[\"Normalize_Enabled\"]   - true, normalization enabled; \
                                             false, normalization not enabled\
        RenderTable[\"Normalize_Only_Files_Too_Loud\"] - Only normalize files that are too loud,checkbox\
                                                     - true, checkbox checked\
                                                     - false, checkbox unchecked\
        RenderTable[\"Normalize_Method\"]    - the normalize-method-dropdownlist\
                                                 0, LUFS-I\
                                                 1, RMS-I\
                                                 2, Peak\
                                                 3, True Peak\
                                                 4, LUFS-M max\
                                                 5, LUFS-S max\
        RenderTable[\"Normalize_Stems_to_Master_Target\"] - true, normalize-stems to master target(common gain to stems)\
                                                          false, normalize each file individually\
        RenderTable[\"Normalize_Target\"]       - the normalize-target as dB-value    \
        RenderTable[\"NoSilentRender\"]         - Do not render files that are likely silent-checkbox; true, checked; false, unchecked\
        RenderTable[\"OfflineOnlineRendering\"] - Offline/Online rendering-dropdownlist; \
                                                    0, Full-speed Offline; \
                                                    1, 1x Offline; \
                                                    2, Online Render; \
                                                    3, Online Render(Idle); \
                                                    4, Offline Render(Idle)\
        RenderTable[\"OnlyChannelsSentToParent\"] - true, option is checked; false, option is unchecked\
        RenderTable[\"OnlyMonoMedia\"] - Tracks with only mono media to mono files-checkbox; \
                                           true, checked; \
                                           false, unchecked\
        RenderTable[\"ProjectSampleRateFXProcessing\"] - Use project sample rate for mixing and FX/synth processing-checkbox; \
                                                       true, checked; false, unchecked\
        RenderTable[\"RenderFile\"]       - the contents of the Directory-inputbox of the Render to File-dialog\
        RenderTable[\"RenderPattern\"]    - the render pattern as input into the File name-inputbox of the Render to File-dialog\
        RenderTable[\"RenderQueueDelay\"] - Delay queued render to allow samples to load-checkbox; true, checked; false, unchecked\
        RenderTable[\"RenderQueueDelaySeconds\"] - the amount of seconds for the render-queue-delay\
        RenderTable[\"RenderResample\"] - Resample mode-dropdownlist; \
                                            0, Sinc Interpolation: 64pt (medium quality)\
                                            1, Linear Interpolation: (low quality)\
                                            2, Point Sampling (lowest quality, retro)\
                                            3, Sinc Interpolation: 192pt\
                                            4, Sinc Interpolation: 384pt\
                                            5, Linear Interpolation + IIR\
                                            6, Linear Interpolation + IIRx2\
                                            7, Sinc Interpolation: 16pt\
                                            8, Sinc Interpolation: 512pt(slow)\
                                            9, Sinc Interpolation: 768pt(very slow)\
                                            10, r8brain free (highest quality, fast)\
        RenderTable[\"RenderStems_Prefader\"] - true, option is checked; false, option is unchecked\
        RenderTable[\"RenderString\"]     - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string\
        RenderTable[\"RenderString2\"]    - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string\
        RenderTable[\"RenderTable\"]=true - signals, this is a valid render-table\
        RenderTable[\"SampleRate\"]       - the samplerate of the rendered file(s)\
        RenderTable[\"SaveCopyOfProject\"] - the \"Save copy of project to outfile.wav.RPP\"-checkbox; \
                                            true, checked; \
                                            false, unchecked\
        RenderTable[\"SilentlyIncrementFilename\"] - Silently increment filenames to avoid overwriting-checkbox; \
                                                    true, checked\
                                                    false, unchecked\
        RenderTable[\"Source\"] - 0, Master mix; \
                                1, Master mix + stems; \
                                3, Stems (selected tracks); \
                                8, Region render matrix; \
                                16, Tracks with only Mono-Media to Mono Files; \
                                32, Selected media items; 64, selected media items via master; \
                                128, selected tracks via master\
                                4096, Razor edit areas\
                                4224, Razor edit areas via master\
        RenderTable[\"Startposition\"] - the startposition of the rendering selection in seconds\
        RenderTable[\"TailFlag\"] - in which bounds is the Tail-checkbox checked? \
                                    &1, custom time bounds; \
                                    &2, entire project; \
                                    &4, time selection; \
                                    &8, all project regions; \
                                    &16, selected media items; \
                                    &32, selected project regions\
                                    &64, razor edit areas\
        RenderTable[\"TailMS\"] - the amount of milliseconds of the tail\
        \
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting the render-settings was successful; false, it wasn't successful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered project/ProjectStateChunk as a string",
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "a RenderTable, that contains all render-dialog-settings",
    name = "RENDERTABLE",
   },
   [2] = {
    type = "STRING",
    desc = "the rpp-projectfile, to which you want to apply the RenderTable; nil, to use parameter ProjectStateChunk instead",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true or nil, apply it as well; false, don't apply it",
    opt = {
     use = false,
    },
    name = "APPLY_RENDERCFG_STRING",
   },
   [4] = {
    type = "PARAMETER",
    desc = "the ProjectStateChunkk, to which you want to apply the RenderTable",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [363] = {
  fname = "CreateNewRenderTable",
  label = "US_CreateNewRenderTable",
  run = "in/out",
  desc = "Creates a new RenderTable.\
\
Parameters set to nil will create a rendertable with all entries set to that of a vanilla factory-default Reaper installation:\
\
Factory-Default will be set to these settings:\
          \
          RenderTable[\"AddToProj\"]=false\
          RenderTable[\"Brickwall_Limiter_Enabled\"]=false\
          RenderTable[\"Brickwall_Limiter_Method\"]=1\
          RenderTable[\"Brickwall_Limiter_Target\"]=1\
          RenderTable[\"Bounds\"]=1\
          RenderTable[\"Channels\"]=2\
          RenderTable[\"CloseAfterRender\"]=true\
          RenderTable[\"Dither\"]=0\
          RenderTable[\"EmbedMetaData\"]=false\
          RenderTable[\"EmbedStretchMarkers\"]=false\
          RenderTable[\"EmbedTakeMarkers\"]=false\
          RenderTable[\"Enable2ndPassRender\"]=false\
          RenderTable[\"Endposition\"]=0\
          RenderTable[\"FadeIn_Enabled\"]=false\
          RenderTable[\"FadeIn\"]=0\
          RenderTable[\"FadeIn_Shape\"]=0\
          RenderTable[\"FadeOut_Enabled\"]=false\
          RenderTable[\"FadeOut\"]=0\
          RenderTable[\"FadeOut_Shape\"]=false\
          RenderTable[\"MultiChannelFiles\"]=false\
          RenderTable[\"Normalize_Enabled\"]=false\
          RenderTable[\"Normalize_Only_Files_Too_Loud\"]=false\
          RenderTable[\"Normalize_Method\"]=0\
          RenderTable[\"Normalize_Stems_to_Master_Target\"]=false\
          RenderTable[\"Normalize_Target\"]=-24\
          RenderTable[\"NoSilentRender\"]=false\
          RenderTable[\"OfflineOnlineRendering\"]=0\
          RenderTable[\"OnlyChannelsSentToParent\"]=false\
          RenderTable[\"OnlyMonoMedia\"]=false\
          RenderTable[\"ProjectSampleRateFXProcessing\"]=true\
          RenderTable[\"RenderFile\"]=\"\"\
          RenderTable[\"RenderPattern\"]=\"\"\
          RenderTable[\"RenderQueueDelay\"]=false\
          RenderTable[\"RenderQueueDelaySeconds\"]=0\
          RenderTable[\"RenderResample\"]=3\
          RenderTable[\"RenderStems_Prefader\"]=false\
          RenderTable[\"RenderString\"]=\"\"\
          RenderTable[\"RenderString2\"]=\"\"\
          RenderTable[\"RenderTable\"]=true\
          RenderTable[\"SampleRate\"]=44100\
          RenderTable[\"SaveCopyOfProject\"]=false\
          RenderTable[\"SilentlyIncrementFilename\"]=true\
          RenderTable[\"Source\"]=0\
          RenderTable[\"Startposition\"]=0\
          RenderTable[\"TailFlag\"]=18\
          RenderTable[\"TailMS\"]=0\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the created RenderTable",
    name = "RENDERTABLE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "The Source-dropdownlist; \
0, Master mix(default)\
1, Master mix + stems\
3, Stems (selected tracks)\
8, Region render matrix\
32, Selected media items\
256, Embed stretch markers/transient guides-checkbox=on; optional, as parameter EmbedStretchMarkers is meant for that",
    opt = {
     use = false,
    },
    name = "SOURCE",
   },
   [2] = {
    type = "INTEGER",
    desc = "The Bounds-dropdownlist\
0, Custom time range\
1, Entire project(default)\
2, Time selection\
3, Project regions\
4, Selected Media Items(in combination with Source 32)\
5, Selected regions\
6, Razor edit areas\
7, All project markers\
8, Selected markers",
    opt = {
     use = false,
    },
    name = "BOUNDS",
   },
   [3] = {
    type = "NUMBER",
    desc = "the startposition of the render-section in seconds; only used when Bounds=0(Custom time range); default=0",
    opt = {
     use = false,
    },
    name = "STARTPOSITION",
   },
   [4] = {
    type = "NUMBER",
    desc = "the endposition of the render-section in seconds; only used when Bounds=0(Custom time range); default=0",
    opt = {
     use = false,
    },
    name = "ENDPOSITION",
   },
   [5] = {
    type = "INTEGER",
    desc = "in which bounds is the Tail-checkbox checked? (default=18)\
&1, custom time bounds\
&2, entire project\
&4, time selection\
&8, all project regions\
&16, selected media items\
&32, selected project regions",
    opt = {
     use = false,
    },
    name = "TAILFLAG",
   },
   [6] = {
    type = "INTEGER",
    desc = "the amount of milliseconds of the tail(default=1000)",
    opt = {
     use = false,
    },
    name = "TAILMS",
   },
   [7] = {
    type = "STRING",
    desc = "the contents of the Directory-inputbox of the Render to File-dialog; default=\"\"",
    opt = {
     use = false,
    },
    name = "RENDERFILE",
   },
   [8] = {
    type = "STRING",
    desc = "the render pattern as input into the File name-inputbox of the Render to File-dialog; set to \"\" if you don't want to use it; default=\"\"",
    opt = {
     use = false,
    },
    name = "RENDERPATTERN",
   },
   [9] = {
    type = "INTEGER",
    desc = "the samplerate of the rendered file(s); default=44100",
    opt = {
     use = false,
    },
    name = "SAMPLERATE",
   },
   [10] = {
    type = "INTEGER",
    desc = "the number of channels in the rendered file; \
1, mono\
2, stereo(default)\
3 and higher, the number of channels",
    opt = {
     use = false,
    },
    name = "CHANNELS",
   },
   [11] = {
    type = "INTEGER",
    desc = "Offline/Online rendering-dropdownlist\
0, Full-speed Offline(default)\
1, 1x Offline\
2, Online Render\
3, Online Render(Idle)\
4, Offline Render(Idle)",
    opt = {
     use = false,
    },
    name = "OFFLINEONLINERENDERING",
   },
   [12] = {
    type = "BOOLEAN",
    desc = "Use project sample rate for mixing and FX/synth processing-checkbox; true(default), checked; false, unchecked",
    opt = {
     use = false,
    },
    name = "PROJECTSAMPLERATEFXPROCESSING",
   },
   [13] = {
    type = "INTEGER",
    desc = "Resample mode-dropdownlist\
0, Sinc Interpolation: 64pt (medium quality)\
1, Linear Interpolation: (low quality)\
2, Point Sampling (lowest quality, retro)\
3, Sinc Interpolation: 192pt\
4, Sinc Interpolation: 384pt\
5, Linear Interpolation + IIR\
6, Linear Interpolation + IIRx2\
7, Sinc Interpolation: 16pt\
8, Sinc Interpolation: 512pt(slow)\
9, Sinc Interpolation: 768pt(very slow)\
10, r8brain free (highest quality, fast)",
    opt = {
     use = false,
    },
    name = "RENDERRESAMPLE",
   },
   [14] = {
    type = "BOOLEAN",
    desc = "Tracks with only mono media to mono files-checkbox; true, checked; false, unchecked(default)",
    opt = {
     use = false,
    },
    name = "ONLYMONOMEDIA",
   },
   [15] = {
    type = "BOOLEAN",
    desc = "Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked(default)",
    opt = {
     use = false,
    },
    name = "MULTICHANNELFILES",
   },
   [16] = {
    type = "INTEGER",
    desc = "the Dither/Noise shaping-checkboxes; default=0\
&1, dither master mix\
&2, noise shaping master mix\
&4, dither stems\
&8, dither noise shaping stems",
    opt = {
     use = false,
    },
    name = "DITHER",
   },
   [17] = {
    type = "STRING",
    desc = "the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string\
default is \"ZXZhdw==\" = WAV, 24 bit PCM, Auto WAV/Wave 64, WriteBWFChunk checked, \
Include project filename in BWF unchecked, Do not include markers or regions, Embed tempo unchecked.",
    opt = {
     use = false,
    },
    name = "RENDERSTRING",
   },
   [18] = {
    type = "BOOLEAN",
    desc = "Silently increment filenames to avoid overwriting-checkbox; default=true",
    opt = {
     use = false,
    },
    name = "SILENTLYINCREMENTFILENAME",
   },
   [19] = {
    type = "BOOLEAN",
    desc = "Add rendered items to new tracks in project-checkbox; true, checked; false, unchecked(default)",
    opt = {
     use = false,
    },
    name = "ADDTOPROJ",
   },
   [20] = {
    type = "BOOLEAN",
    desc = "the \"Save copy of project to outfile.wav.RPP\"-checkbox; default=false",
    opt = {
     use = false,
    },
    name = "SAVECOPYOFPROJECT",
   },
   [21] = {
    type = "BOOLEAN",
    desc = "Delay queued render to allow samples to load-checkbox; default=false",
    opt = {
     use = false,
    },
    name = "RENDERQUEUEDELAY",
   },
   [22] = {
    type = "INTEGER",
    desc = "the amount of seconds for the render-queue-delay; default=0",
    opt = {
     use = false,
    },
    name = "RENDERQUEUEDELAYSECONDS",
   },
   [23] = {
    type = "BOOLEAN",
    desc = "true, closes rendering to file-dialog after render(default); false, doesn't close it",
    opt = {
     use = false,
    },
    name = "CLOSEAFTERRENDER",
   },
   [24] = {
    type = "BOOLEAN",
    desc = "true, Embed stretch markers/transient guides-checkbox=on; false or nil, Embed stretch markers/transient guides\"-checkbox=off(default)",
    opt = {
     use = false,
    },
    name = "EMBEDSTRETCHMARKERS",
   },
   [25] = {
    type = "STRING",
    desc = "the render-string for the secondary rendering; default=\"\"",
    opt = {
     use = false,
    },
    name = "RENDERSTRING2",
   },
   [26] = {
    type = "BOOLEAN",
    desc = "the \"Take markers\"-checkbox; true, checked; false, unchecked(default)",
    opt = {
     use = false,
    },
    name = "EMBEDTAKEMARKERS",
   },
   [27] = {
    type = "BOOLEAN",
    desc = "the \"Do not render files that are likely silent\"-checkbox; true, checked; false, unchecked(default)",
    opt = {
     use = false,
    },
    name = "DONOTSILENTRENDER",
   },
   [28] = {
    type = "BOOLEAN",
    desc = "the \"Embed metadata\"-checkbox; true, checked; false, unchecked(default)",
    opt = {
     use = false,
    },
    name = "EMBEDMETADATA",
   },
   [29] = {
    type = "BOOLEAN",
    desc = "true, 2nd pass render is enabled; false, 2nd pass render is disabled",
    opt = {
     use = false,
    },
    name = "ENABLE2NDPASSRENDER",
   },
   [30] = {
    type = "BOOLEAN",
    desc = "true, normalization enabled; false, normalization not enabled",
    opt = {
     use = false,
    },
    name = "NORMALIZE_ENABLED",
   },
   [31] = {
    type = "INTEGER",
    desc = "the normalize-method-dropdownlist\
0, LUFS-I\
1, RMS-I\
2, Peak\
3, True Peak\
4, LUFS-M max\
5, LUFS-S max",
    opt = {
     use = false,
    },
    name = "NORMALIZE_METHOD",
   },
   [32] = {
    type = "BOOLEAN",
    desc = "true, normalize-stems to master target(common gain to stems); false, normalize each file individually",
    opt = {
     use = false,
    },
    name = "NORMALIZE_STEMS_TO_MASTER_TARGET",
   },
   [33] = {
    type = "NUMBER",
    desc = "the normalize-target as dB-value",
    opt = {
     use = false,
    },
    name = "NORMALIZE_TARGET",
   },
   [34] = {
    type = "BOOLEAN",
    desc = "true, enable brickwall-limiter",
    opt = {
     use = false,
    },
    name = "BRICKWALL_LIMITER_ENABLED",
   },
   [35] = {
    type = "INTEGER",
    desc = "the brickwall-limiter-method; 1, peak; 2, True Peak",
    opt = {
     use = false,
    },
    name = "BRICKWALL_LIMITER_METHOD",
   },
   [36] = {
    type = "NUMBER",
    desc = "the target of brickwall-limiter in dB",
    opt = {
     use = false,
    },
    name = "BRICKWALL_LIMITER_TARGET",
   },
   [37] = {
    type = "BOOLEAN",
    desc = "only normalize files that are too loud; true, enabled; false, disabled",
    opt = {
     use = false,
    },
    name = "NORMALIZE_ONLY_FILES_TOO_LOUD",
   },
   [38] = {
    type = "BOOLEAN",
    desc = "true, fade in is enabled; false, fade-in is not enabled",
    opt = {
     use = false,
    },
    name = "FADEIN_ENABLED",
   },
   [39] = {
    type = "NUMBER",
    desc = "the fade-in in seconds",
    opt = {
     use = false,
    },
    name = "FADEIN",
   },
   [40] = {
    type = "INTEGER",
    desc = "the fade-in-shape\
0, Linear fade in\
1, Inverted quadratic fade in\
2, Quadratic fade in\
3, Inverted quartic fade in\
4, Quartic fade in\
5, Cosine S-curve fade in\
6, Quartic S-curve fade in",
    opt = {
     use = false,
    },
    name = "FADEIN_SHAPE",
   },
   [41] = {
    type = "BOOLEAN",
    desc = "true, fade-out is enabled; false, fade-out is disabled",
    opt = {
     use = false,
    },
    name = "FADEOUT_ENABLED",
   },
   [42] = {
    type = "NUMBER",
    desc = "the fade-out time in seconds",
    opt = {
     use = false,
    },
    name = "FADEOUT",
   },
   [43] = {
    type = "INTEGER",
    desc = "the fade-out-shape \
0, Linear fade in\
1, Inverted quadratic fade in\
2, Quadratic fade in\
3, Inverted quartic fade in\
4, Quartic fade in\
5, Cosine S-curve fade in\
6, Quartic S-curve fade in",
    opt = {
     use = false,
    },
    name = "FADEOUT_SHAPE",
   },
   [44] = {
    type = "BOOLEAN",
    desc = "true, will only render channels sent to parent; false, normal rendering",
    opt = {
     use = false,
    },
    name = "ONLYCHANNELSSENTTOPARENT",
   },
   [45] = {
    type = "BOOLEAN",
    desc = "true, stems will be rendered pre-fader; false, normal rendering of stems",
    opt = {
     use = false,
    },
    name = "RENDERSTEMS_PREFADER",
   },
  },
  sp_api = "ultraschall",
 },
 [364] = {
  fname = "GetRender_SaveCopyOfProject",
  label = "US_GetRender_SaveCopyOfProject",
  run = "in/out",
  desc = "Gets the current state of the \"Save copy of project to outfile.wav.RPP\"-checkbox from the Render to File-dialog.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, checkbox is checked; false, checkbox is unchecked",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [365] = {
  fname = "SetRender_QueueDelay",
  label = "US_SetRender_QueueDelay",
  run = "in/out",
  desc = "Sets the \"Delay queued render to allow samples to load\"-checkbox of the Render to File-dialog.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, check the checkbox; false, uncheck the checkbox",
    name = "STATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of seconds the delay shall be",
    name = "LENGTH",
   },
  },
  sp_api = "ultraschall",
 },
 [366] = {
  fname = "SetRender_SaveCopyOfProject",
  label = "US_SetRender_SaveCopyOfProject",
  run = "in/out",
  desc = "Sets the \"Save copy of project to outfile.wav.RPP\"-checkbox of the Render to File-dialog.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, check the checkbox; false, uncheck the checkbox",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [367] = {
  fname = "GetRender_QueueDelay",
  label = "US_GetRender_QueueDelay",
  run = "in/out",
  desc = "Sets the \"Save outfile.render_stats.html\"-checkboxstate of the Render to File-dialog.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, check the checkbox; false, uncheck the checkbox",
    name = "STATE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [368] = {
  fname = "SetRender_ProjectSampleRateForMix",
  label = "US_SetRender_ProjectSampleRateForMix",
  run = "in/out",
  desc = "Sets the \"Use project sample rate for mixing and FX/synth processing\"-checkbox of the Render to File-dialog.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, check the checkbox; false, uncheck the checkbox",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [369] = {
  fname = "GetRender_ProjectSampleRateForMix",
  label = "US_GetRender_ProjectSampleRateForMix",
  run = "in/out",
  desc = "Gets the current state of the \"Use project sample rate for mixing and FX/synth processing\"-checkbox from the Render to File-dialog.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, check the checkbox; false, uncheck the checkbox",
    name = "STATE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [370] = {
  fname = "SetRender_AutoIncrementFilename",
  label = "US_SetRender_AutoIncrementFilename",
  run = "in/out",
  desc = "Gets the current state of the \"Silently increment filenames to avoid overwriting\"-checkbox from the Render to File-dialog.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, check the checkbox; false, uncheck the checkbox",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [371] = {
  fname = "GetRender_AutoIncrementFilename",
  label = "US_GetRender_AutoIncrementFilename",
  run = "in/out",
  desc = "Gets the current state of the \"Silently increment filenames to avoid overwriting\"-checkbox from the Render to File-dialog.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, check the checkbox; false, uncheck the checkbox",
    name = "STATE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [372] = {
  fname = "GetRenderPreset_Names",
  label = "US_GetRenderPreset_Names",
  run = "in/out",
  desc = "Returns all render-preset-names for a) Bounds and output pattern/filename b) Options and format c) both presets, who share the same name",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found bounds and output-pattern-presets",
    name = "BOUNDS_PRESETS",
   },
   [2] = {
    type = "TABLE",
    desc = "the names of all found bounds and output-pattern-presets",
    name = "BOUNDS_NAMES",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of found options and format-presets",
    name = "OPTIONS_FORMAT_PRESETS",
   },
   [4] = {
    type = "TABLE",
    desc = "the names of all found options and format-presets",
    name = "OPTIONS_FORMAT_NAMES",
   },
   [5] = {
    type = "INTEGER",
    desc = "the number of found presets, who both share the same name",
    name = "BOTH_PRESETS",
   },
   [6] = {
    type = "TABLE",
    desc = "the names of all found presets, who both share the same name",
    name = "BOTH_NAMES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [373] = {
  fname = "GetRenderPreset_RenderTable",
  label = "US_GetRenderPreset_RenderTable",
  run = "in/out",
  desc = "returns a rendertable, that contains all settings of a specific render-preset.\
    \
use [GetRenderPreset_Names](#GetRenderPreset_Names) to get the available render-preset-names.\
\
Some settings aren't stored in Presets and will get default values:\
TailMS=0, SilentlyIncrementFilename=false, AddToProj=false, SaveCopyOfProject=false, RenderQueueDelay=false, RenderQueueDelaySeconds=false, NoSilentRender=false\
\
returned table if of the following format:\
\
       RenderTable[\"AddToProj\"] - Add rendered items to new tracks in project-checkbox; \
                                  always false, as this isn't stored in render-presets\
       RenderTable[\"Brickwall_Limiter_Enabled\"] - true, brickwall limiting is enabled; false, brickwall limiting is disabled            \
       RenderTable[\"Brickwall_Limiter_Method\"] - brickwall-limiting-mode; 1, peak; 2, true peak\
       RenderTable[\"Brickwall_Limiter_Target\"] - the volume of the brickwall-limit\
       RenderTable[\"Bounds\"]    - 0, Custom time range; \
                                  1, Entire project; \
                                  2, Time selection; \
                                  3, Project regions; \
                                  4, Selected Media Items(in combination with Source 32); \
                                  5, Selected regions\
                                  6, Razor edit areas\
                                  7, All project markers\
                                  8, Selected markers\
       RenderTable[\"Channels\"] - the number of channels in the rendered file; \
                                     1, mono; \
                                     2, stereo; \
                                     higher, the number of channels\
       RenderTable[\"CloseAfterRender\"] - close rendering to file-dialog after rendering; \
                                         always true, as this isn't stored in render-presets\
       RenderTable[\"Dither\"] - &1, dither master mix; \
                               &2, noise shaping master mix; \
                               &4, dither stems; \
                               &8, dither noise shaping stems\
       RenderTable[\"EmbedMetaData\"]       - Embed metadata; true, checked; false, unchecked\
       RenderTable[\"EmbedStretchMarkers\"] - Embed stretch markers/transient guides; true, checked; false, unchecked\
       RenderTable[\"EmbedTakeMarkers\"]    - Embed Take markers; true, checked; false, unchecked\
       RenderTable[\"Enable2ndPassRender\"] - true, 2nd pass render is enabled; false, 2nd pass render is disabled\
       RenderTable[\"Endposition\"]         - the endposition of the rendering selection in seconds\
       RenderTable[\"FadeIn_Enabled\"] - true, fade-in is enabled; false, fade-in is disabled\
       RenderTable[\"FadeIn\"] - the fade-in-time in seconds\
       RenderTable[\"FadeIn_Shape\"] - the fade-in-shape\
                              - 0, Linear fade in\
                              - 1, Inverted quadratic fade in\
                              - 2, Quadratic fade in\
                              - 3, Inverted quartic fade in\
                              - 4, Quartic fade in\
                              - 5, Cosine S-curve fade in\
                              - 6, Quartic S-curve fade in\
       RenderTable[\"FadeOut_Enabled\"] - true, fade-out is enabled; false, fade-out is disabled\
       RenderTable[\"FadeOut\"] - the fade-out time in seconds\
       RenderTable[\"FadeOut_Shape\"] - the fade-out-shape\
                              - 0, Linear fade in\
                              - 1, Inverted quadratic fade in\
                              - 2, Quadratic fade in\
                              - 3, Inverted quartic fade in\
                              - 4, Quartic fade in\
                              - 5, Cosine S-curve fade in\
                              - 6, Quartic S-curve fade in\
       RenderTable[\"MultiChannelFiles\"]   - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked\
       RenderTable[\"Normalize_Enabled\"]   - true, normalization enabled; \
                                            false, normalization not enabled\
       RenderTable[\"Normalize_Only_Files_Too_Loud\"] - Only normalize files that are too loud,checkbox\
                                                    - true, checkbox checked\
                                                    - false, checkbox unchecked\
       RenderTable[\"Normalize_Method\"]    - the normalize-method-dropdownlist\
                                                0, LUFS-I\
                                                1, RMS-I\
                                                2, Peak\
                                                3, True Peak\
                                                4, LUFS-M max\
                                                5, LUFS-S max\
       RenderTable[\"Normalize_Stems_to_Master_Target\"] - true, normalize-stems to master target(common gain to stems); \
                                                         false, normalize each file individually\
       RenderTable[\"Normalize_Target\"]       - the normalize-target as dB-value    \
       RenderTable[\"NoSilentRender\"]         - Do not render files that are likely silent-checkbox; true, checked; false, unchecked\
       RenderTable[\"OfflineOnlineRendering\"] - Offline/Online rendering-dropdownlist; \
                                                   0, Full-speed Offline; \
                                                   1, 1x Offline; \
                                                   2, Online Render; \
                                                   3, Online Render(Idle); \
                                                   4, Offline Render(Idle)\
       RenderTable[\"OnlyChannelsSentToParent\"] - true, option is checked; false, option is unchecked\
       RenderTable[\"OnlyMonoMedia\"] - Tracks with only mono media to mono files-checkbox; \
                                          true, checked; \
                                          false, unchecked\
       RenderTable[\"ProjectSampleRateFXProcessing\"] - Use project sample rate for mixing and FX/synth processing-checkbox; \
                                                      true, checked; false, unchecked\
       RenderTable[\"RenderFile\"]       - the contents of the Directory-inputbox of the Render to File-dialog\
       RenderTable[\"RenderPattern\"]    - the render pattern as input into the File name-inputbox of the Render to File-dialog\
       RenderTable[\"RenderQueueDelay\"] - Delay queued render to allow samples to load-checkbox; \
                                         always false, as this isn't stored in render-presets\
       RenderTable[\"RenderQueueDelaySeconds\"] - the amount of seconds for the render-queue-delay; \
                                                always 0, as this isn't stored in render-presets\
       RenderTable[\"RenderResample\"] - Resample mode-dropdownlist; \
                                           0, Sinc Interpolation: 64pt (medium quality)\
                                           1, Linear Interpolation: (low quality)\
                                           2, Point Sampling (lowest quality, retro)\
                                           3, Sinc Interpolation: 192pt\
                                           4, Sinc Interpolation: 384pt\
                                           5, Linear Interpolation + IIR\
                                           6, Linear Interpolation + IIRx2\
                                           7, Sinc Interpolation: 16pt\
                                           8, Sinc Interpolation: 512pt(slow)\
                                           9, Sinc Interpolation: 768pt(very slow)\
                                           10, r8brain free (highest quality, fast)\
       RenderTable[\"RenderStems_Prefader\"] - true, option is checked; false, option is unchecked\
       RenderTable[\"RenderString\"]     - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string\
       RenderTable[\"RenderString2\"]    - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string\
       RenderTable[\"RenderTable\"]=true - signals, this is a valid render-table\
       RenderTable[\"SampleRate\"]       - the samplerate of the rendered file(s)\
       RenderTable[\"SaveCopyOfProject\"] - the \"Save copy of project to outfile.wav.RPP\"-checkbox; always false, as this isn't stored in render-presets\
       RenderTable[\"SilentlyIncrementFilename\"] - Silently increment filenames to avoid overwriting-checkbox; \
                                                  always true, as this isn't stored in Presets\
       RenderTable[\"Source\"] - 0, Master mix; \
                               1, Master mix + stems; \
                               3, Stems (selected tracks); \
                               8, Region render matrix; \
                               16, Tracks with only Mono-Media to Mono Files; \
                               32, Selected media items; 64, selected media items via master; \
                               128, selected tracks via master\
                               4096, Razor edit areas\
                               4224, Razor edit areas via master\
       RenderTable[\"Startposition\"] - the startposition of the rendering selection in seconds\
       RenderTable[\"TailFlag\"] - in which bounds is the Tail-checkbox checked? \
                                   &1, custom time bounds; \
                                   &2, entire project; \
                                   &4, time selection; \
                                   &8, all project regions; \
                                   &16, selected media items; \
                                   &32, selected project regions\
                                   &64, razor edit areas\
       RenderTable[\"TailMS\"] - the amount of milliseconds of the tail; for presets stored in Reaper 6.61 and \
                             - earlier, it's always 0, as this wasn't stored in render-presets back then\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a render-table, which contains all settings from a render-preset",
    name = "RENDERTABLE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the Bounds-render-preset you want to get; case-insensitive",
    name = "BOUNDS_NAME",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the Renderformat-options-render-preset you want to get; case-insensitive",
    name = "OPTIONS_AND_FORMAT_NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [374] = {
  fname = "DeleteRenderPreset_Bounds",
  label = "US_DeleteRenderPreset_Bounds",
  run = "in/out",
  desc = "deletes a Bounds-render-preset from Reaper's render-presets.\
\
This deletes all(!) occurrences of the Bounds-render-preset with the same name. \
Though, you shouldn't store multiple Bounds-render-presets with the same name into reaper-render.ini in the first place.\
    \
use [GetRenderPreset_Names](#GetRenderPreset_Names) to get the available render-preset-names.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, deleting was successful; false, deleting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the Bounds-render-preset you want to get; case-insensitive",
    name = "BOUNDS_NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [375] = {
  fname = "DeleteRenderPreset_FormatOptions",
  label = "US_DeleteRenderPreset_FormatOptions",
  run = "in/out",
  desc = "deletes a Render-Format-Options-render-preset from Reaper's render-presets.\
\
This deletes all(!) occurrences of the Render-Format-Options-render-preset with the same name. \
Though, you shouldn't store multiple Render-Format-Options-render-preset with the same name into reaper-render.ini in the first place.\
    \
use [GetRenderPreset_Names](#GetRenderPreset_Names) to get the available render-preset-names.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, deleting was successful; false, deleting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the Renderformat-options-render-preset you want to get; case-insensitive",
    name = "OPTIONS_AND_FORMAT_NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [376] = {
  fname = "AddRenderPreset",
  label = "US_AddRenderPreset",
  run = "in/out",
  desc = "adds a new render-preset into reaper-render.ini. \
\
This function will check, whether the chosen names are already in use. \
\
Added render-presets are available after (re-)opening in the Render to File-dialog     \
\
Note: You can choose, whether to include only Bounds, only RenderFormatOptions of both. The Bounds and the RenderFormatOptions store different parts of the render-presets.\
\
Some settings aren't stored in Presets and will be ignored:\
TailMS=0(Reaper 6.61 and earlier), SilentlyIncrementFilename=false, AddToProj=false, SaveCopyOfProject=false, RenderQueueDelay=false, RenderQueueDelaySeconds=false, NoSilentRender=false\
\
Bounds_Name stores only:\
         RenderTable[\"Bounds\"] - the bounds-dropdownlist, \
                                 0, Custom time range\
                                 1, Entire project \
                                 2, Time selection \
                                 3, Project regions\
                                 4, Selected Media Items(in combination with Source 32)\
                                 5, Selected regions \
                                 6, Razor edit areas\
                                 7, All project markers\
                                 8, Selected markers\
         RenderTable[\"Startposition\"] - the startposition of the render\
         RenderTable[\"Endposition\"] - the endposition of the render\
         RenderTable[\"Source\"] - the source dropdownlist, includes \
                                 0, Master mix \
                                 1, Master mix + stems\
                                 3, Stems (selected tracks)\
                                 8, Region render matrix\
                                 32, Selected media items\
                                 64, selected media items via master\
                                 128, selected tracks via master\
                                 4096, Razor edit areas\
                                 4224, Razor edit areas via master\
         RenderTable[\"RenderPattern\"] - the renderpattern, which hold also the wildcards\
         RenderTable[\"RenderFile\"] - the output-path\
         RenderTable[\"TailFlag\"] - in which bounds is the Tail-checkbox checked? \
                                   &1, custom time bounds\
                                   &2, entire project\
                                   &4, time selection\
                                   &8, all project regions\
                                   &16, selected media items\
                                   &32, selected project regions\
         RenderTable[\"TailMS\"] - the length of the tail in milliseconds(Reaper 6.62+)\
\
Options_and_Format_Name stores only:\
         RenderTable[\"SampleRate\"] - the samplerate, with which to render; 0, use project-settings\
         RenderTable[\"Channels\"] - the number of channels for the output-file\
         RenderTable[\"OfflineOnlineRendering\"] - the offline/online-dropdownlist \
                                 0, Full-speed Offline\
                                 1, 1x Offline\
                                 2, Online Render\
                                 3, Online Render(Idle)\
                                 4, Offline Render(Idle); \
         RenderTable[\"ProjectSampleRateFXProcessing\"] - Use project sample rate for mixing and FX/synth processing-checkbox; 1, checked; 0, unchecked \
         RenderTable[\"RenderResample\"] - Resample mode-dropdownlist; \
                                           0, Sinc Interpolation: 64pt (medium quality)\
                                           1, Linear Interpolation: (low quality)\
                                           2, Point Sampling (lowest quality, retro)\
                                           3, Sinc Interpolation: 192pt\
                                           4, Sinc Interpolation: 384pt\
                                           5, Linear Interpolation + IIR\
                                           6, Linear Interpolation + IIRx2\
                                           7, Sinc Interpolation: 16pt\
                                           8, Sinc Interpolation: 512pt(slow)\
                                           9, Sinc Interpolation: 768pt(very slow)\
                                           10, r8brain free (highest quality, fast)\
         RenderTable[\"Dither\"] - the Dither/Noise shaping-checkboxes: \
                                 &1, dither master mix\
                                 &2, noise shaping master mix\
                                 &4, dither stems\
                                 &8, dither noise shaping stems\
         RenderTable[\"MultiChannelFiles\"] - multichannel-files-checkbox\
         RenderTable[\"Normalize_Enabled\"] - true, normalization enabled; false, normalization not enabled\
         RenderTable[\"Normalize_Only_Files_Too_Loud\"] - Only normalize files that are too loud,checkbox\
                                        - true, checkbox checked\
                                        - false, checkbox unchecked\
         RenderTable[\"Normalize_Method\"] - the normalize-method-dropdownlist\
                                           0, LUFS-I\
                                           1, RMS-I\
                                           2, Peak\
                                           3, True Peak\
                                           4, LUFS-M max\
                                           5, LUFS-S max\
         RenderTable[\"Normalize_Stems_to_Master_Target\"] - true, normalize-stems to master target(common gain to stems)\
                                                           false, normalize each file individually\
         RenderTable[\"Normalize_Target\"] - the normalize-target as dB-value\
         RenderTable[\"OnlyChannelsSentToParent\"] - true, option is checked; false, option is unchecked\
         RenderTable[\"RenderStems_Prefader\"] - true, option is checked; false, option is unchecked\
         RenderTable[\"OnlyMonoMedia\"] - only mono media-checkbox\
         RenderTable[\"EmbedMetaData\"] - Embed metadata; true, checked; false, unchecked\
         RenderTable[\"EmbedStretchMarkers\"] - Embed stretch markers/transient guides-checkbox\
         RenderTable[\"EmbedTakeMarkers\"] - Embed Take markers-checkbox\
         RenderTable[\"Enable2ndPassRender\"] - true, 2nd pass render is enabled; false, 2nd pass render is disabled\
         RenderTable[\"RenderString\"] - the render-cfg-string, which holds the render-outformat-settings\
         RenderTable[\"RenderString2\"] - the render-cfg-string, which holds the secondary render-outformat-settings\
         RenderTable[\"Brickwall_Limiter_Enabled\"] - true, brickwall limiting is enabled; false, brickwall limiting is disabled\
         RenderTable[\"Brickwall_Limiter_Method\"] - brickwall-limiting-mode; 1, peak; 2, true peak\
         RenderTable[\"Brickwall_Limiter_Target\"] - the volume of the brickwall-limit\
         RenderTable[\"FadeIn_Enabled\"] - true, fade-in is enabled; false, fade-in is disabled\
         RenderTable[\"FadeIn\"] - the fade-in-time in seconds\
         RenderTable[\"FadeIn_Shape\"] - the fade-in-shape\
                                - 0, Linear fade in\
                                - 1, Inverted quadratic fade in\
                                - 2, Quadratic fade in\
                                - 3, Inverted quartic fade in\
                                - 4, Quartic fade in\
                                - 5, Cosine S-curve fade in\
                                - 6, Quartic S-curve fade in\
         RenderTable[\"FadeOut_Enabled\"] - true, fade-out is enabled; false, fade-out is disabled\
         RenderTable[\"FadeOut\"] - the fade-out time in seconds\
         RenderTable[\"FadeOut_Shape\"] - the fade-out-shape\
                                - 0, Linear fade in\
                                - 1, Inverted quadratic fade in\
                                - 2, Quadratic fade in\
                                - 3, Inverted quartic fade in\
                                - 4, Quartic fade in\
                                - 5, Cosine S-curve fade in\
                                - 6, Quartic S-curve fade in\
  \
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, adding was successful; false, adding was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the Bounds-render-preset you want to add; nil, to not add a new Bounds-render-preset",
    name = "BOUNDS_NAME",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the Renderformat-options-render-preset you want to add; to not add a new Render-Format-Options-render-preset",
    name = "OPTIONS_AND_FORMAT_NAME",
   },
   [3] = {
    type = "TABLE",
    desc = "the RenderTable, which holds all information for inclusion into the Render-Preset",
    name = "RENDERTABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [377] = {
  fname = "SetRenderPreset",
  label = "US_SetRenderPreset",
  run = "in/out",
  desc = "sets an already existing render-preset in reaper-render.ini. \
\
This function will check, whether the chosen names aren't given yet in any preset. \
\
Changed render-presets are updated after (re-)opening in the Render to File-dialog     \
\
Note: You can choose, whether to include only Bounds, only RenderFormatOptions of both. The Bounds and the RenderFormatOptions store different parts of the render-presets.\
\
Some settings aren't stored in Presets and will be ignored:\
TailMS=0(Reaper 6.61 and earlier), SilentlyIncrementFilename=false, AddToProj=false, SaveCopyOfProject=false, RenderQueueDelay=false, RenderQueueDelaySeconds=false, NoSilentRender=false\
\
Bounds_Name stores only:\
         RenderTable[\"Bounds\"] - the bounds-dropdownlist, \
                                 0, Custom time range\
                                 1, Entire project \
                                 2, Time selection \
                                 3, Project regions\
                                 4, Selected Media Items(in combination with Source 32)\
                                 5, Selected regions\
                                 6, Razor edit areas\
                                 7, All project markers\
                                 8, Selected markers\
         RenderTable[\"Startposition\"] - the startposition of the render\
         RenderTable[\"Endposition\"] - the endposition of the render\
         RenderTable[\"Source\"]+RenderTable[\"MultiChannelFiles\"]+RenderTable[\"OnlyMonoMedia\"] - the source dropdownlist, includes \
                                 0, Master mix \
                                 1, Master mix + stems\
                                 3, Stems (selected tracks)\
                                 &4, Multichannel tracks to multichannel files\
                                 8, Region render matrix\
                                 &16, Tracks with only mono media to mono files\
                                 32, Selected media items\
                                 64, selected media items via master\
                                 128, selected tracks via master\
                                 4096, Razor edit areas\
                                 4224, Razor edit areas via master\
         RenderTable[\"RenderPattern\"] - the renderpattern, which hold also the wildcards\
         RenderTable[\"TailFlag\"] - in which bounds is the Tail-checkbox checked? \
                                 &1, custom time bounds\
                                 &2, entire project\
                                 &4, time selection\
                                 &8, all project regions\
                                 &16, selected media items\
                                 &32, selected project regions \
         RenderTable[\"TailMS\"] - the length of the tail in milliseconds(Reaper 6.62+)\
\
Options_and_Format_Name stores only:\
         RenderTable[\"SampleRate\"] - the samplerate, with which to render; 0, use project-settings\
         RenderTable[\"Channels\"] - the number of channels for the output-file\
         RenderTable[\"OfflineOnlineRendering\"] - the offline/online-dropdownlist \
                                 0, Full-speed Offline\
                                 1, 1x Offline\
                                 2, Online Render\
                                 3, Online Render(Idle)\
                                 4, Offline Render(Idle); \
         RenderTable[\"ProjectSampleRateFXProcessing\"] - Use project sample rate for mixing and FX/synth processing-checkbox; 1, checked; 0, unchecked \
         RenderTable[\"RenderResample\"] - Resample mode-dropdownlist; \
                                           0, Sinc Interpolation: 64pt (medium quality)\
                                           1, Linear Interpolation: (low quality)\
                                           2, Point Sampling (lowest quality, retro)\
                                           3, Sinc Interpolation: 192pt\
                                           4, Sinc Interpolation: 384pt\
                                           5, Linear Interpolation + IIR\
                                           6, Linear Interpolation + IIRx2\
                                           7, Sinc Interpolation: 16pt\
                                           8, Sinc Interpolation: 512pt(slow)\
                                           9, Sinc Interpolation: 768pt(very slow)\
                                           10, r8brain free (highest quality, fast)\
         RenderTable[\"Dither\"] - the Dither/Noise shaping-checkboxes: \
                                 &1, dither master mix\
                                 &2, noise shaping master mix\
                                 &4, dither stems\
                                 &8, dither noise shaping stems\
         RenderTable[\"EmbedMetaData\"] - Embed metadata; true, checked; false, unchecked  \
         RenderTable[\"EmbedStretchMarkers\"] - Embed stretch markers/transient guides-checkbox\
         RenderTable[\"EmbedTakeMarkers\"] - Embed Take markers-checkbox\
         RenderTable[\"Enable2ndPassRender\"] - true, 2nd pass render is enabled; false, 2nd pass render is disabled\
         RenderTable[\"RenderString\"] - the render-cfg-string, which holds the render-outformat-settings\
         RenderTable[\"RenderString2\"] - the render-cfg-string, which holds the secondary render-outformat-settings; \"\" to remove it from this preset\
         RenderTable[\"Normalize_Enabled\"] - true, normalization enabled; false, normalization not enabled\
         RenderTable[\"Normalize_Method\"] - the normalize-method-dropdownlist\
                                           0, LUFS-I\
                                           1, RMS-I\
                                           2, Peak\
                                           3, True Peak\
                                           4, LUFS-M max\
                                           5, LUFS-S max\
         RenderTable[\"Normalize_Only_Files_Too_Loud\"] - Only normalize files that are too loud,checkbox\
                                                      - true, checkbox checked\
                                                      - false, checkbox unchecked\
         RenderTable[\"Normalize_Stems_to_Master_Target\"] - true, normalize-stems to master target(common gain to stems)\
                                                           false, normalize each file individually\
         RenderTable[\"Normalize_Target\"] - the normalize-target as dB-value\
         RenderTable[\"OnlyChannelsSentToParent\"] - true, option is checked; false, option is unchecked\
         RenderTable[\"RenderStems_Prefader\"] - true, option is checked; false, option is unchecked\
         RenderTable[\"FadeIn_Enabled\"] - true, fade-in is enabled; false, fade-in is disabled\
         RenderTable[\"FadeIn\"] - the fade-in-time in seconds\
         RenderTable[\"FadeIn_Shape\"] - the fade-in-shape\
                                - 0, Linear fade in\
                                - 1, Inverted quadratic fade in\
                                - 2, Quadratic fade in\
                                - 3, Inverted quartic fade in\
                                - 4, Quartic fade in\
                                - 5, Cosine S-curve fade in\
                                - 6, Quartic S-curve fade in\
         RenderTable[\"FadeOut_Enabled\"] - true, fade-out is enabled; false, fade-out is disabled\
         RenderTable[\"FadeOut\"] - the fade-out time in seconds\
         RenderTable[\"FadeOut_Shape\"] - the fade-out-shape\
                                - 0, Linear fade in\
                                - 1, Inverted quadratic fade in\
                                - 2, Quadratic fade in\
                                - 3, Inverted quartic fade in\
                                - 4, Quartic fade in\
                                - 5, Cosine S-curve fade in\
                                - 6, Quartic S-curve fade in\
         RenderTable[\"Brickwall_Limiter_Enabled\"] - true, brickwall limiting is enabled; false, brickwall limiting is disabled            \
         RenderTable[\"Brickwall_Limiter_Method\"] - brickwall-limiting-mode; 1, peak; 2, true peak\
         RenderTable[\"Brickwall_Limiter_Target\"] - the volume of the brickwall-limit\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the Bounds-render-preset you want to add; nil, to not add a new Bounds-render-preset; case-insensitive",
    name = "BOUNDS_NAME",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the Renderformat-options-render-preset you want to add; to not add a new Render-Format-Options-render-preset; case-insensitive",
    name = "OPTIONS_AND_FORMAT_NAME",
   },
   [3] = {
    type = "TABLE",
    desc = "the RenderTable, which holds all information for inclusion into the Render-Preset",
    name = "RENDERTABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [378] = {
  fname = "RenderProject_RenderTable",
  label = "US_RenderProject_RenderTable",
  run = "in/out",
  desc = "Renders a projectfile or the current active project, using the settings from a RenderTable.\
        \
Expected RenderTable is of the following structure:\
\
        RenderTable[\"AddToProj\"] - Add rendered items to new tracks in project-checkbox; \
                                    true, checked; \
                                    false, unchecked\
        RenderTable[\"Bounds\"]    - 0, Custom time range; \
                                   1, Entire project; \
                                   2, Time selection; \
                                   3, Project regions; \
                                   4, Selected Media Items(in combination with Source 32); \
                                   5, Selected regions\
                                   6, Razor edit areas\
                                   7, All project markers\
                                   8, Selected markers\
        RenderTable[\"Channels\"] - the number of channels in the rendered file; \
                                      1, mono; \
                                      2, stereo; \
                                      higher, the number of channels\
        RenderTable[\"CloseAfterRender\"] - true, close rendering to file-dialog after render; \
                                          false, don't close it\
        RenderTable[\"Dither\"] - &1, dither master mix; \
                                &2, noise shaping master mix; \
                                &4, dither stems; \
                                &8, dither noise shaping stems\
        RenderTable[\"EmbedMetaData\"]       - Embed metadata; true, checked; false, unchecked\
        RenderTable[\"EmbedStretchMarkers\"] - Embed stretch markers/transient guides; true, checked; false, unchecked\
        RenderTable[\"EmbedTakeMarkers\"]    - Embed Take markers; true, checked; false, unchecked\
        RenderTable[\"Enable2ndPassRender\"] - true, 2nd pass render is enabled; false, 2nd pass render is disabled\
        RenderTable[\"Endposition\"]         - the endposition of the rendering selection in seconds\
        RenderTable[\"MultiChannelFiles\"]   - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked\
        RenderTable[\"Normalize_Enabled\"]   - true, normalization enabled; \
                                             false, normalization not enabled\
        RenderTable[\"Normalize_Method\"]    - the normalize-method-dropdownlist\
                                                 0, LUFS-I\
                                                 1, RMS-I\
                                                 2, Peak\
                                                 3, True Peak\
                                                 4, LUFS-M max\
                                                 5, LUFS-S max\
        RenderTable[\"Normalize_Only_Files_Too_Loud\"] - Only normalize files that are too loud,checkbox\
                                                     - true, checkbox checked\
                                                     - false, checkbox unchecked\
        RenderTable[\"Normalize_Stems_to_Master_Target\"] - true, normalize-stems to master target(common gain to stems)\
                                                          false, normalize each file individually\
        RenderTable[\"Normalize_Target\"]       - the normalize-target as dB-value    \
        RenderTable[\"NoSilentRender\"]         - Do not render files that are likely silent-checkbox; true, checked; false, unchecked\
        RenderTable[\"OfflineOnlineRendering\"] - Offline/Online rendering-dropdownlist; \
                                                    0, Full-speed Offline; \
                                                    1, 1x Offline; \
                                                    2, Online Render; \
                                                    3, Online Render(Idle); \
                                                    4, Offline Render(Idle)\
        RenderTable[\"OnlyMonoMedia\"] - Tracks with only mono media to mono files-checkbox; \
                                           true, checked; \
                                           false, unchecked\
        RenderTable[\"ProjectSampleRateFXProcessing\"] - Use project sample rate for mixing and FX/synth processing-checkbox; \
                                                       true, checked; false, unchecked\
        RenderTable[\"RenderFile\"]       - the contents of the Directory-inputbox of the Render to File-dialog\
        RenderTable[\"RenderPattern\"]    - the render pattern as input into the File name-inputbox of the Render to File-dialog\
        RenderTable[\"RenderQueueDelay\"] - Delay queued render to allow samples to load-checkbox; true, checked; false, unchecked\
        RenderTable[\"RenderQueueDelaySeconds\"] - the amount of seconds for the render-queue-delay\
        RenderTable[\"RenderResample\"] - Resample mode-dropdownlist; \
                                            0, Sinc Interpolation: 64pt (medium quality)\
                                            1, Linear Interpolation: (low quality)\
                                            2, Point Sampling (lowest quality, retro)\
                                            3, Sinc Interpolation: 192pt\
                                            4, Sinc Interpolation: 384pt\
                                            5, Linear Interpolation + IIR\
                                            6, Linear Interpolation + IIRx2\
                                            7, Sinc Interpolation: 16pt\
                                            8, Sinc Interpolation: 512pt(slow)\
                                            9, Sinc Interpolation: 768pt(very slow)\
                                            10, r8brain free (highest quality, fast)\
        RenderTable[\"RenderString\"]     - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string\
        RenderTable[\"RenderString2\"]    - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string\
        RenderTable[\"RenderTable\"]=true - signals, this is a valid render-table\
        RenderTable[\"SampleRate\"]       - the samplerate of the rendered file(s)\
        RenderTable[\"SaveCopyOfProject\"] - the \"Save copy of project to outfile.wav.RPP\"-checkbox; \
                                            true, checked; \
                                            false, unchecked\
        RenderTable[\"SilentlyIncrementFilename\"] - Silently increment filenames to avoid overwriting-checkbox; \
                                                    true, checked\
                                                    false, unchecked\
        RenderTable[\"Source\"] - 0, Master mix; \
                                1, Master mix + stems; \
                                3, Stems (selected tracks); \
                                8, Region render matrix; \
                                16, Tracks with only Mono-Media to Mono Files; \
                                32, Selected media items; 64, selected media items via master; \
                                128, selected tracks via master\
                                4096, Razor edit areas\
                                4224, Razor edit areas via master\
        RenderTable[\"Startposition\"] - the startposition of the rendering selection in seconds\
        RenderTable[\"TailFlag\"] - in which bounds is the Tail-checkbox checked? \
                                    &1, custom time bounds; \
                                    &2, entire project; \
                                    &4, time selection; \
                                    &8, all project regions; \
                                    &16, selected media items; \
                                    &32, selected project regions\
                                    &64, razor edit areas\
        RenderTable[\"TailMS\"] - the amount of milliseconds of the tail\
        \
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of files that have been rendered",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the MediaItemStateChunks of all the rendered files",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
   [3] = {
    type = "ARRAY",
    desc = "filenames with path of all rendered files",
    name = "FILEARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfilename with path of the rpp-file that you want to render; nil, to render the current active project",
    opt = {
     use = false,
    },
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "TABLE",
    desc = "the RenderTable with all render-settings, that you want to apply; nil, use the project's existing settings",
    opt = {
     use = false,
    },
    name = "RENDERTABLE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, add the rendered files to the project; nil or false, don't add them; \
will overwrite the settings in the RenderTable; will default to true, if no RenderTable is passed\
only has an effect, when rendering the current active project",
    opt = {
     use = false,
    },
    name = "ADDTOPROJ",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true or nil, closes rendering to file-dialog after rendering is finished; false, keep it open\
will overwrite the settings in the RenderTable; will default to true, if no RenderTable is passed",
    opt = {
     use = false,
    },
    name = "CLOSEAFTERRENDER",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true or nil, silently increment filename, when file already exists; false, ask for overwriting\
will overwrite the settings in the RenderTable; will default to true, if no RenderTable is passed",
    opt = {
     use = false,
    },
    name = "SILENTLYINCREMENTFILENAME",
   },
  },
  sp_api = "ultraschall",
 },
 [379] = {
  fname = "GetRenderQueuedProjects",
  label = "US_GetRenderQueuedProjects",
  run = "in/out",
  desc = "Gets the number and names of files currently in the render-queue",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of project-files in the render-queue",
    name = "FILECOUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "filenames with path of all queued-projectfiles",
    name = "FILEARRAY",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [380] = {
  fname = "AddProjectFileToRenderQueue",
  label = "US_AddProjectFileToRenderQueue",
  run = "in/out",
  desc = "Adds a projectfile or the current active project to the render-queue\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, adding was successful; false, adding was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile, that you want to add to the render-queue; nil, to add the current active project",
    name = "PROJECTFILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [381] = {
  fname = "RenderProject_RenderQueue",
  label = "US_RenderProject_RenderQueue",
  run = "in/out",
  desc = "Renders a specific project from the render-queue. \
\
See [GetRenderQueuedProjects](#GetRenderQueuedProjects) to get the names of the currently existing render-queue-projects, where the filename-order reflects the index needed for this function.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "false, a problem occurred; true, rendering went through; returns true as well, when rendering is aborted!",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the render-queued-project; beginning with 1; -1 to render all projects in the render-queue",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [382] = {
  fname = "RenderProject",
  label = "US_RenderProject",
  run = "in/out",
  desc = "Renders a project, using a specific render-cfg-string.\
To get render-cfg-strings, see functions starting with CreateRenderCFG_, like <a href=\"#CreateRenderCFG_AIFF\">CreateRenderCFG_AIFF</a>, <a href=\"#CreateRenderCFG_DDP\">CreateRenderCFG_DDP</a>, <a href=\"#CreateRenderCFG_FLAC\">CreateRenderCFG_FLAC</a>, <a href=\"#CreateRenderCFG_OGG\">CreateRenderCFG_OGG</a>, <a href=\"#CreateRenderCFG_Opus\">CreateRenderCFG_Opus</a>, etc.\
\
Will use the render-settings currently set in projectfilename_with_path/the currently active project, except bound(set to Custom time range), render file and render-pattern, as they are set by this function!\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1, in case of error; 0, in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of rendered files",
    name = "RENDERFILECOUNT",
   },
   [3] = {
    type = "ARRAY",
    desc = "the MediaItemStateChunks of all rendered files, with the one in entry 1 being the rendered master-track(when rendering stems+master)",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
   [4] = {
    type = "ARRAY",
    desc = "the filenames of the rendered files, including their paths. The filename in entry 1 is the one of the mastered track(when rendering stems+master)",
    name = "FILEARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the project to render; nil, for the currently opened project",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the filename with path of the output-file. If you give the wrong extension, Reaper will exchange it by the correct one.\
You can use wildcards to some extend in the actual filename(not the path!)\
note: parameter overwrite_without_asking only works, when you give the right extension and use no wildcards, due API-limitations!",
    name = "RENDERFILENAME_WITH_PATH",
   },
   [3] = {
    type = "NUMBER",
    desc = "the startposition of the render-area in seconds; \
-1, to use the startposition set in the projectfile itself; \
-2, to use the start of the time-selection",
    name = "STARTPOSITION",
   },
   [4] = {
    type = "NUMBER",
    desc = "the endposition of the render-area in seconds; \
-1, to use the endposition set in the projectfile/current project itself\
-2, to use the end of the time-selection",
    name = "ENDPOSITION",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, overwrite an existing renderfile; false, don't overwrite an existing renderfile\
works only, when renderfilename_with_path has the right extension given and when not using wildcards(due API-limitations)!",
    name = "OVERWRITE_WITHOUT_ASKING",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, automatically close the render-window after rendering; false, keep rendering window open after rendering; nil, use current settings",
    name = "RENDERCLOSEWHENDONE",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, silently increase filename, if it already exists; false, ask before overwriting an already existing outputfile; nil, use current settings",
    name = "FILENAMEINCREASE",
   },
   [8] = {
    type = "STRING",
    desc = "the rendercfg-string, that contains all render-settings for an output-format\
To get render-cfg-strings, see CreateRenderCFG_xxx-functions, like: <a href=\"#CreateRenderCFG_AIFF\">CreateRenderCFG_AIFF</a>, <a href=\"#CreateRenderCFG_DDP\">CreateRenderCFG_DDP</a>, <a href=\"#CreateRenderCFG_FLAC\">CreateRenderCFG_FLAC</a>, <a href=\"#CreateRenderCFG_OGG\">CreateRenderCFG_OGG</a>, <a href=\"#CreateRenderCFG_Opus\">CreateRenderCFG_Opus</a>, <a href=\"#CreateRenderCFG_WAVPACK\">CreateRenderCFG_WAVPACK</a>, <a href=\"#CreateRenderCFG_WebMVideo\">CreateRenderCFG_WebMVideo</a>\
\
If you want to render the current project, you can use a four-letter-version of the render-string; will use the default settings for that format. Not available with projectfiles!\
\"evaw\" for wave, \"ffia\" for aiff, \" iso\" for audio-cd, \" pdd\" for ddp, \"calf\" for flac, \"l3pm\" for mp3, \"vggo\" for ogg, \"SggO\" for Opus, \"PMFF\" for FFMpeg-video, \"FVAX\" for MP4Video/Audio on Mac, \" FIG\" for Gif, \" FCL\" for LCF, \"kpvw\" for wavepack ",
    opt = {
     use = false,
    },
    name = "RENDERCFG",
   },
   [9] = {
    type = "STRING",
    desc = "just like rendercfg, but for the secondary render-format",
    opt = {
     use = false,
    },
    name = "RENDERCFG2",
   },
  },
  sp_api = "ultraschall",
 },
 [383] = {
  fname = "RenderProject_Regions",
  label = "US_RenderProject_Regions",
  run = "in/out",
  desc = "Renders a region of a project, using a specific render-cfg-string.\
To get render-cfg-strings, see <a href=\"#CreateRenderCFG_AIFF\">CreateRenderCFG_AIFF</a>, <a href=\"#CreateRenderCFG_DDP\">CreateRenderCFG_DDP</a>, <a href=\"#CreateRenderCFG_FLAC\">CreateRenderCFG_FLAC</a>, <a href=\"#CreateRenderCFG_OGG\">CreateRenderCFG_OGG</a>, <a href=\"#CreateRenderCFG_Opus\">CreateRenderCFG_Opus</a>\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1, in case of error; 0, in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of rendered files",
    name = "RENDERFILECOUNT",
   },
   [3] = {
    type = "ARRAY",
    desc = "the MediaItemStateChunks of all rendered files, with the one in entry 1 being the rendered master-track(when rendering stems)",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
   [4] = {
    type = "ARRAY",
    desc = "the filenames of the rendered files, including their paths. The filename in entry 1 is the one of the mastered track(when rendering stems)",
    name = "FILEARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the project to render; nil, for the currently opened project",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the filename of the output-file. \
You can use wildcards to some extend in the actual filename(not the path!); doesn't support $region yet\
Will be seen as path only, when you set addregionname=true and addregionnameseparator=\"/\"",
    name = "RENDERFILENAME_WITH_PATH",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of the region in the Projectfile to render",
    name = "REGION",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "add the name of the region to the renderfilename; only works, when you don't add a file-extension to renderfilename_with_path",
    name = "ADDREGIONNAME",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, overwrite an existing renderfile; false, don't overwrite an existing renderfile",
    name = "OVERWRITE_WITHOUT_ASKING",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, automatically close the render-window after rendering; false, keep rendering window open after rendering; nil, use current settings",
    name = "RENDERCLOSEWHENDONE",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, silently increase filename, if it already exists; false, ask before overwriting an already existing outputfile; nil, use current settings",
    name = "FILENAMEINCREASE",
   },
   [8] = {
    type = "STRING",
    desc = "the rendercfg-string, that contains all render-settings for an output-format\
To get render-cfg-strings, see CreateRenderCFG_xxx-functions, like: <a href=\"#CreateRenderCFG_AIFF\">CreateRenderCFG_AIFF</a>, <a href=\"#CreateRenderCFG_DDP\">CreateRenderCFG_DDP</a>, <a href=\"#CreateRenderCFG_FLAC\">CreateRenderCFG_FLAC</a>, <a href=\"#CreateRenderCFG_OGG\">CreateRenderCFG_OGG</a>, <a href=\"#CreateRenderCFG_Opus\">CreateRenderCFG_Opus</a>, <a href=\"#CreateRenderCFG_WAVPACK\">CreateRenderCFG_WAVPACK</a>, <a href=\"#CreateRenderCFG_WebMVideo\">CreateRenderCFG_WebMVideo</a>\
\
If you want to render the current project, you can use a four-letter-version of the render-string; will use the default settings for that format. Not available with projectfiles!\
\"evaw\" for wave, \"ffia\" for aiff, \" iso\" for audio-cd, \" pdd\" for ddp, \"calf\" for flac, \"l3pm\" for mp3, \"vggo\" for ogg, \"SggO\" for Opus, \"PMFF\" for FFMpeg-video, \"FVAX\" for MP4Video/Audio on Mac, \" FIG\" for Gif, \" FCL\" for LCF, \"kpvw\" for wavepack ",
    name = "RENDERCFG",
   },
   [9] = {
    type = "STRING",
    desc = "when addregionname==true, this parameter allows you to set a separator between renderfilename_with_path and regionname. \
Also allows / or \\\\ to use renderfilename_with_path as only path as folder, into which the files are stored having the regionnames only.\
Default is an empty string.",
    opt = {
     use = false,
    },
    name = "ADDREGIONNAMESEPARATOR",
   },
   [10] = {
    type = "STRING",
    desc = "the render-cfg-string for secondary render-format",
    opt = {
     use = false,
    },
    name = "RENDERCFG2",
   },
  },
  sp_api = "ultraschall",
 },
 [384] = {
  fname = "AddSelectedItemsToRenderQueue",
  label = "US_AddSelectedItemsToRenderQueue",
  run = "in/out",
  desc = "Adds the selected MediaItems to the render-queue.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, adding was successful; false, adding was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of newly created projects in the render-queue",
    name = "NUM_QUEUED_PROJECTS",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "false or nil, render all selected MediaItems in one render-queued-project; true, render all selected MediaItems individually as separate Queued-projects",
    opt = {
     use = false,
    },
    name = "RENDER_ITEMS_INDIVIDUALLY",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "false or nil, just render the MediaItems; true, render the MediaItems through the Master-channel",
    opt = {
     use = false,
    },
    name = "RENDER_ITEMS_THROUGH_MASTER",
   },
   [3] = {
    type = "TABLE",
    desc = "a RenderTable to apply for the renders in the render-queue",
    opt = {
     use = false,
    },
    name = "RENDERTABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [385] = {
  fname = "CreateRenderCFG_MP3MaxQuality",
  label = "US_CreateRenderCFG_MP3MaxQuality",
  run = "in/out",
  desc = "Creates the render-cfg-string for the MP3-format with highest quality-settings. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini",
  out = {
   [1] = {
    type = "STRING",
    desc = "the renderstring for MP3 with maximum quality",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "the \"Write ReplayGain-tag\"-checkbox; true, checked; false, unchecked; default is unchecked",
    opt = {
     use = false,
    },
    name = "WRITE_REPLAY_GAIN",
   },
  },
  sp_api = "ultraschall",
 },
 [386] = {
  fname = "CreateRenderCFG_MP3VBR",
  label = "US_CreateRenderCFG_MP3VBR",
  run = "in/out",
  desc = "Creates the render-cfg-string for the MP3-format with variable bitrate. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected MP3-VBR-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the variable-bitrate quality; 1(for 10%) to 10(for 100%)",
    name = "VBR_QUALITY",
   },
   [2] = {
    type = "INTEGER",
    desc = "the encoding speed for the mp3\
0, Maximum\
1, Better\
2, Normal\
3, FastEncode\
4, FasterEncode\
5, FastestEncode",
    name = "QUALITY",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "the \"Do not allow joint stereo\"-checkbox; true, checked; false, unchecked; default is unchecked",
    opt = {
     use = false,
    },
    name = "NO_JOINT_STEREO",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "the \"Write ReplayGain-tag\"-checkbox; true, checked; false, unchecked; default is unchecked",
    opt = {
     use = false,
    },
    name = "WRITE_REPLAY_GAIN",
   },
  },
  sp_api = "ultraschall",
 },
 [387] = {
  fname = "CreateRenderCFG_MP3ABR",
  label = "US_CreateRenderCFG_MP3ABR",
  run = "in/out",
  desc = "Creates the render-cfg-string for the MP3-format with average bitrate. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected MP3-ABR-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the encoding quality for the mp3\
0, 8 kbps\
1, 16 kbps\
2, 24 kbps\
3, 32 kbps\
4, 40 kbps\
5, 48 kbps\
6, 56 kbps\
7, 64 kbps\
8, 80 kbps\
9, 96 kbps\
10, 112 kbps\
11, 128 kbps\
12, 160 kbps\
13, 192 kbps\
14, 224 kbps\
15, 256 kbps\
16, 320 kbps",
    name = "BITRATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the encoding speed for the mp3\
0, Maximum\
1, Better\
2, Normal\
3, FastEncode\
4, FasterEncode\
5, FastestEncode",
    name = "QUALITY",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "the \"Do not allow joint stereo\"-checkbox; true, checked; false, unchecked; default is unchecked",
    opt = {
     use = false,
    },
    name = "NO_JOINT_STEREO",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "the \"Write ReplayGain-tag\"-checkbox; true, checked; false, unchecked; default is unchecked",
    opt = {
     use = false,
    },
    name = "WRITE_REPLAY_GAIN",
   },
  },
  sp_api = "ultraschall",
 },
 [388] = {
  fname = "CreateRenderCFG_MP3CBR",
  label = "US_CreateRenderCFG_MP3CBR",
  run = "in/out",
  desc = "Creates the render-cfg-string for the MP3-format with constant bitrate. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected MP3-CBR-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the encoding quality for the mp3\
0, 8 kbps\
1, 16 kbps\
2, 24 kbps\
3, 32 kbps\
4, 40 kbps\
5, 48 kbps\
6, 56 kbps\
7, 64 kbps\
8, 80 kbps\
9, 96 kbps\
10, 112 kbps\
11, 128 kbps\
12, 160 kbps\
13, 192 kbps\
14, 224 kbps\
15, 256 kbps\
16, 320 kbps",
    name = "BITRATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the encoding speed for the mp3\
0, Maximum\
1, Better\
2, Normal\
3, FastEncode\
4, FasterEncode\
5, FastestEncode",
    name = "QUALITY",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "the \"Do not allow joint stereo\"-checkbox; true, checked; false, unchecked; default is unchecked",
    opt = {
     use = false,
    },
    name = "NO_JOINT_STEREO",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "the \"Write ReplayGain-tag\"-checkbox; true, checked; false, unchecked; default is unchecked",
    opt = {
     use = false,
    },
    name = "WRITE_REPLAY_GAIN",
   },
  },
  sp_api = "ultraschall",
 },
 [389] = {
  fname = "CreateRenderCFG_WAV",
  label = "US_CreateRenderCFG_WAV",
  run = "in/out",
  desc = "Creates the render-cfg-string for the WAV-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected WAV-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the bitdepth of the WAV-file\
0, 8 Bit PCM\
1, 16 Bit PCM\
2, 24 Bit PCM\
3, 32 Bit FP\
4, 64 Bit FP\
5, 4 Bit IMA ADPCM\
6, 2 Bit cADPCM\
7, 32 Bit PCM\
8, 8 Bit u-Law",
    name = "BITDEPTH",
   },
   [2] = {
    type = "INTEGER",
    desc = "how shall Reaper treat large WAV-files\
0, Auto WAV/Wave64\
1, Auto Wav/RF64\
2, Force WAV\
3, Force Wave64\
4, Force RF64",
    name = "LARGEFILES",
   },
   [3] = {
    type = "INTEGER",
    desc = "Write BWF ('bext') chunk and Include project filename in BWF data - checkboxes\
0, unchecked - unchecked\
1, checked - unchecked\
2, unchecked - checked\
3, checked - checked",
    name = "BWFCHUNK",
   },
   [4] = {
    type = "INTEGER",
    desc = "The include markerlist-dropdownlist\
0, Do not include markers and regions\
1, Markers + regions\
2, Markers + regions starting with #\
3, Markers only\
4, Markers starting with # only\
5, Regions only\
6, Regions starting with # only",
    name = "INCLUDEMARKERS",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "Embed tempo-checkbox; true, checked; false, unchecked",
    name = "EMBEDPROJECTTEMPO",
   },
  },
  sp_api = "ultraschall",
 },
 [390] = {
  fname = "GetLastUsedRenderPatterns",
  label = "US_GetLastUsedRenderPatterns",
  run = "in/out",
  desc = "returns the last 12 used render-patterns, that have been used for rendering by any project in Reaper.",
  out = {
   [1] = {
    type = "ARRAY",
    desc = "a table, which holds the last 12 used render-patterns, used by any project in Reaper",
    name = "LAST_RENDER_PATTERNS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [391] = {
  fname = "GetLastRenderPaths",
  label = "US_GetLastRenderPaths",
  run = "in/out",
  desc = "returns the last 20 used render-output-paths, that have been used for rendering by any project in Reaper.",
  out = {
   [1] = {
    type = "ARRAY",
    desc = "a table, which holds the last 20 used render-output-paths, used by any project in Reaper",
    name = "LAST_RENDER_PATHS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [392] = {
  fname = "IsReaperRendering",
  label = "US_IsReaperRendering",
  run = "in/out",
  desc = "Returns, if Reaper is currently rendering and the rendering position and projectlength of the rendered project",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, Reaper is rendering; false, Reaper does not render",
    name = "RETVAL",
   },
   [2] = {
    type = "NUMBER",
    desc = "the current rendering-position of the rendering project",
    opt = {
     use = false,
    },
    name = "RENDER_POSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the length of the currently rendering project",
    opt = {
     use = false,
    },
    name = "RENDER_PROJECTLENGTH",
   },
   [4] = {
    type = "REAPROJECT",
    desc = "the project currently rendering",
    opt = {
     use = false,
    },
    name = "PROJ",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, if a project from the queued-folder is currently being rendered; false, if not; a hint if queued-rendering is currently active",
    opt = {
     use = false,
    },
    name = "QUEUE_RENDER",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [393] = {
  fname = "CreateRenderCFG_AIFF",
  label = "US_CreateRenderCFG_AIFF",
  run = "in/out",
  desc = "Returns the render-cfg-string for the AIFF-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected AIFF-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the bitdepth of the aiff-file; 8, 16, 24 and 32 are supported",
    name = "BITS",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "Embed beat length if exact-checkbox; true, checked; false or nil, unchecked",
    opt = {
     use = false,
    },
    name = "EMBEDBEATLENGTH",
   },
  },
  sp_api = "ultraschall",
 },
 [394] = {
  fname = "CreateRenderCFG_AudioCD",
  label = "US_CreateRenderCFG_AudioCD",
  run = "in/out",
  desc = "Returns the render-cfg-string for the AudioCD-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
You can also check, whether to burn the created cd-image after rendering.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected AudioCD-image-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "Track mode-dropdownlist: 1, Markers define new track; 2, Regions define tracks (other areas ignored); 3, One Track",
    name = "TRACKMODE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "Only use markers starting with #-checkbox; true, checked; false, unchecked",
    name = "ONLY_MARKERS_STARTING_WITH_HASH",
   },
   [3] = {
    type = "INTEGER",
    desc = "Lead-in silence for tracks-inputbox, in milliseconds",
    name = "LEADIN_SILENCE_TRACKS",
   },
   [4] = {
    type = "INTEGER",
    desc = "Extra lead-in silence for disc-inputbox, in milliseconds",
    name = "LEADIN_SILENCE_DISC",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "Burn CD image after render-checkbox; true, checked; false, unchecked",
    name = "BURNCD_IMAGE_AFTER_RENDER",
   },
  },
  sp_api = "ultraschall",
 },
 [395] = {
  fname = "GetRender_EmbedStretchMarkers",
  label = "US_GetRender_EmbedStretchMarkers",
  run = "in/out",
  desc = "Gets the current state of the \"Embed stretch markers/transient guides\"-checkbox from the Render to File-dialog.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, check the checkbox; false, uncheck the checkbox",
    name = "STATE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [396] = {
  fname = "SetRender_EmbedStretchMarkers",
  label = "US_SetRender_EmbedStretchMarkers",
  run = "in/out",
  desc = "Sets the new state of the \"Embed stretch markers/transient guides\"-checkbox from the Render to File-dialog.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, check the checkbox; false, uncheck the checkbox",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [397] = {
  fname = "Render_Loop",
  label = "US_Render_Loop",
  run = "in/out",
  desc = "Renders a part of a project using 2 passes. Good for rendering loops, including wetloops.\
\
The first pass will be set by FirstStart and FirstStart. This is the one for possible fx-buildups(reverbs, etc).\
The second pass will be set by SecondStart and SecondEnd. This is the one, which \"crops\" the first-pass to its correct length.\
\
You can also influence the second pass by setting fadein and fadeout, including the fadein/fadeout-shape. \
That way, you can control, how the beginning and the end of the loop-item sounds.\
\
SecondStart and SecondEnd are in relation of the original source project. SecondStart is from the beginning of the source-project, NOT FirstStart!\
\
returns -1 in case of an error ",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of rendered files",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "all MediaItemStateChunks within an array",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
   [3] = {
    type = "ARRAY",
    desc = "all rendered filenames including path",
    name = "FILEARRAY",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "the RenderTable, which holds the render-settings for the second pass",
    name = "RENDERTABLE",
   },
   [2] = {
    type = "STRING",
    desc = "the filename with path of the final rendered file",
    name = "RENDERFILENAME",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, autoincrement the filename(if it already exists); false, ask before rendering(if file already exists)",
    name = "AUTOINCREMENT",
   },
   [4] = {
    type = "NUMBER",
    desc = "the beginning of the first-pass-render in seconds",
    name = "FIRSTSTART",
   },
   [5] = {
    type = "NUMBER",
    desc = "the end of the first-pass-render in seconds",
    name = "FIRSTEND",
   },
   [6] = {
    type = "NUMBER",
    desc = "the beginning of the second-pass-render in seconds",
    name = "SECONDSTART",
   },
   [7] = {
    type = "NUMBER",
    desc = "the end of the second-pass-render in seconds",
    name = "SECONDEND",
   },
   [8] = {
    type = "NUMBER",
    desc = "the length of the fade-in in the second-pass-render and therefore the final rendered file in seconds",
    name = "FADEIN",
   },
   [9] = {
    type = "NUMBER",
    desc = "the length of the fade-out in the second-pass-render and therefore the final rendered file in seconds",
    name = "FADEOUT",
   },
   [10] = {
    type = "INTEGER",
    desc = "the shape of the fade-in-curve; fadein shape, 0..6, 0=linear",
    name = "FADEINSHAPE",
   },
   [11] = {
    type = "INTEGER",
    desc = "the shape of the fade-out-curve; fadeout shape, 0..6, 0=linear",
    name = "FADEOUTSHAPE",
   },
  },
  sp_api = "ultraschall",
 },
 [398] = {
  fname = "GetRender_EmbedMetaData",
  label = "US_GetRender_EmbedMetaData",
  run = "in/out",
  desc = "Gets the current state of the \"Embed metadata\"-checkbox from the Render to File-dialog.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, check the checkbox; false, uncheck the checkbox",
    name = "STATE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [399] = {
  fname = "SetRender_EmbedMetaData",
  label = "US_SetRender_EmbedMetaData",
  run = "in/out",
  desc = "Sets the new state of the \"Embed metadata\"-checkbox from the Render to File-dialog.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, check the checkbox; false, uncheck the checkbox",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [400] = {
  fname = "SetRender_OfflineOnlineMode",
  label = "US_SetRender_OfflineOnlineMode",
  run = "in/out",
  desc = "sets the current mode of the offline/online-render-dropdownlist from the Render to File-dialog\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting it was successful; false, setting it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the mode, that you want to set\
0, Full-speed Offline\
1, 1x Offline\
2, Online Render\
3, Offline Render (Idle)\
4, 1x Offline Render (Idle)",
    name = "MODE",
   },
  },
  sp_api = "ultraschall",
 },
 [401] = {
  fname = "GetRender_OfflineOnlineMode",
  label = "US_GetRender_OfflineOnlineMode",
  run = "in/out",
  desc = "gets the current mode of the offline/online-render-dropdownlist from the Render to File-dialog",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the mode, that is set\
0, Full-speed Offline\
1, 1x Offline\
2, Online Render\
3, Offline Render (Idle)\
4, 1x Offline Render (Idle)",
    name = "MODE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [402] = {
  fname = "GetRender_ResampleMode",
  label = "US_GetRender_ResampleMode",
  run = "in/out",
  desc = "gets the current mode of the \"Resample mode (if needed)\"-dropdownlist from the Render to File-dialog",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the mode, that is set\
0, Sinc Interpolation: 64pt (medium quality)\
1, Linear Interpolation: (low quality)\
2, Point Sampling (lowest quality, retro)\
3, Sinc Interpolation: 192pt\
4, Sinc Interpolation: 384pt\
5, Linear Interpolation + IIR\
6, Linear Interpolation + IIRx2\
7, Sinc Interpolation: 16pt\
8, Sinc Interpolation: 512pt(slow)\
9, Sinc Interpolation: 768pt(very slow)\
10, r8brain free (highest quality, fast)",
    name = "MODE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [403] = {
  fname = "SetRender_ResampleMode",
  label = "US_SetRender_ResampleMode",
  run = "in/out",
  desc = "sets the current mode of the \"Resample mode (if needed)\"-dropdownlist from the Render to File-dialog\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting it was successful; false, setting it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the mode, that is set\
0, Sinc Interpolation: 64pt (medium quality)\
1, Linear Interpolation: (low quality)\
2, Point Sampling (lowest quality, retro)\
3, Sinc Interpolation: 192pt\
4, Sinc Interpolation: 384pt\
5, Linear Interpolation + IIR\
6, Linear Interpolation + IIRx2\
7, Sinc Interpolation: 16pt\
8, Sinc Interpolation: 512pt(slow)\
9, Sinc Interpolation: 768pt(very slow)\
10, r8brain free (highest quality, fast)",
    name = "MODE",
   },
  },
  sp_api = "ultraschall",
 },
 [404] = {
  fname = "GetRender_NoSilentFiles",
  label = "US_GetRender_NoSilentFiles",
  run = "in/out",
  desc = "Returns the current check-state of the \"Do not render files that are likely silent\"-checkbox of the Render to File-dialog",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, checkbox is checked; false, checkbox is unchecked",
    name = "CURCHECKSTATE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [405] = {
  fname = "SetRender_NoSilentFiles",
  label = "US_SetRender_NoSilentFiles",
  run = "in/out",
  desc = "Sets the current check-state of the \"Do not render files that are likely silent\"-checkbox of the Render to File-dialog\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting checkbox was successful; false, setting checkbox was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, checkbox is checked; false, checkbox is unchecked",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [406] = {
  fname = "GetRender_AddRenderedFilesToProject",
  label = "US_GetRender_AddRenderedFilesToProject",
  run = "in/out",
  desc = "Returns the current check-state of the \"Add rendered items to new tracks in project\"-checkbox of the Render to File-dialog",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, checkbox is checked; false, checkbox is unchecked",
    name = "CURCHECKSTATE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [407] = {
  fname = "SetRender_AddRenderedFilesToProject",
  label = "US_SetRender_AddRenderedFilesToProject",
  run = "in/out",
  desc = "Sets the current check-state of the \"Add rendered items to new tracks in project\"-checkbox of the Render to File-dialog\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting checkbox was successful; false, setting checkbox was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, checkbox is checked; false, checkbox is unchecked",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [408] = {
  fname = "GetRender_TailLength",
  label = "US_GetRender_TailLength",
  run = "in/out",
  desc = "Returns the current tail-length in ms, as set in the Render to File-dialog",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current taillength in ms",
    name = "TAILLENGTH_MS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [409] = {
  fname = "SetRender_TailLength",
  label = "US_SetRender_TailLength",
  run = "in/out",
  desc = "Sets the tail-length, as set in the Render to File-dialog\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the taillength in milliseconds",
    name = "TAILLENGTH",
   },
  },
  sp_api = "ultraschall",
 },
 [410] = {
  fname = "AreRenderTablesEqual",
  label = "US_AreRenderTablesEqual",
  run = "in/out",
  desc = "compares two RenderTables and returns true, if they are equal.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, RenderTables are equal; false, RenderTables aren't equal",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of different table-entries in RenderTable1",
    opt = {
     use = false,
    },
    name = "COUNT_DIFFERENTENTRIES1",
   },
   [3] = {
    type = "TABLE",
    desc = "the table-entry-names, that are different in RenderTable1",
    opt = {
     use = false,
    },
    name = "DIFFERENTENTRIES1",
   },
   [4] = {
    type = "INTEGER",
    desc = "the number of different table-entries in RenderTable2",
    opt = {
     use = false,
    },
    name = "COUNT_DIFFERENTENTRIES2",
   },
   [5] = {
    type = "TABLE",
    desc = "the table-entry-names, that are different in RenderTable2",
    opt = {
     use = false,
    },
    name = "DIFFERENTENTRIES2",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "the first RenderTable, that you want to compare",
    name = "RENDERTABLE1",
   },
   [2] = {
    type = "TABLE",
    desc = "the second RenderTable, that you want to compare",
    name = "RENDERTABLE2",
   },
  },
  sp_api = "ultraschall",
 },
 [411] = {
  fname = "GetRenderCFG_Settings_CAF",
  label = "US_GetRenderCFG_Settings_CAF",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for CAF.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the bitdepth of the CAF-file(8, 16, 24, 32(fp), 33(pcm), 64)",
    name = "BITDEPTH",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "Embed tempo-checkbox; true, checked; false, unchecked",
    name = "EMBEDTEMPO",
   },
   [3] = {
    type = "INTEGER",
    desc = "the include markers and regions dropdownlist\
0, Do not include markers or regions\
1, Markers + Regions\
2, Markers + Regions starting with #\
3, Markers only\
4, Markers starting with # only\
5, Regions only\
6, Regions starting with # only",
    name = "INCLUDE_MARKERS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the caf-settings\
nil, get the current new-project-default render-settings for caf",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [412] = {
  fname = "CreateRenderCFG_CAF",
  label = "US_CreateRenderCFG_CAF",
  run = "in/out",
  desc = "Returns the render-cfg-string for the CAF-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected CAF-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the bitdepth of the CAF-file(8, 16, 24, 32(fp), 33(pcm), 64)",
    name = "BITDEPTH",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "Embed tempo-checkbox; true, checked; false, unchecked",
    name = "EMBEDTEMPO",
   },
   [3] = {
    type = "INTEGER",
    desc = "the include markers and regions dropdownlist\
0, Do not include markers or regions\
1, Markers + Regions\
2, Markers + Regions starting with #\
3, Markers only\
4, Markers starting with # only\
5, Regions only\
6, Regions starting with # only",
    name = "INCLUDE_MARKERS",
   },
  },
  sp_api = "ultraschall",
 },
 [413] = {
  fname = "GetRenderTargetFiles",
  label = "US_GetRenderTargetFiles",
  run = "in/out",
  desc = "Will return the render output-path and all filenames with path that would be rendered, if rendering would run right now\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the output-path for the rendered files",
    name = "PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of files that would be rendered",
    name = "FILE_COUNT",
   },
   [3] = {
    type = "ARRAY",
    desc = "the filenames with path of the files that would be rendered",
    name = "FILENAMES_WITH_PATH",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [414] = {
  fname = "GetRenderCFG_Settings_MPEG1_Video",
  label = "US_GetRenderCFG_Settings_MPEG1_Video",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for MPEG-1-Video.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Note: this works only with FFMPEG 4.1.3 installed\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the used VideoCodec for the MPEG-1-video\
0, MPEG-1\
1, NONE",
    name = "VIDEO_CODEC",
   },
   [2] = {
    type = "INTEGER",
    desc = "the audio-codec of the MPEG-1-video\
0, mp3\
1, mp2\
2, NONE",
    name = "AUDIO_CODEC",
   },
   [3] = {
    type = "INTEGER",
    desc = "the width of the video in pixels",
    name = "WIDTH",
   },
   [4] = {
    type = "INTEGER",
    desc = "the height of the video in pixels",
    name = "HEIGHT",
   },
   [5] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps",
    name = "FPS",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio ",
    name = "ASPECTRATIO",
   },
   [7] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the video; examples: \
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    name = "VIDEOEXPORTOPTIONS",
   },
   [8] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the audio; examples: \
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest",
    name = "AUDIOEXPORTOPTIONS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the MPEG-1-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [415] = {
  fname = "GetRenderCFG_Settings_MPEG2_Video",
  label = "US_GetRenderCFG_Settings_MPEG2_Video",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for MPEG-2-Video.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Note: this works only with FFMPEG 4.1.3 installed\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the used VideoCodec for the MPEG-2-video\
0, MPEG-2\
1, NONE",
    name = "VIDEO_CODEC",
   },
   [2] = {
    type = "INTEGER",
    desc = "the audio-codec of the MPEG-2-video\
0, aac\
1, mp3\
2, mp2\
3, NONE",
    name = "AUDIO_CODEC",
   },
   [3] = {
    type = "INTEGER",
    desc = "the width of the video in pixels",
    name = "WIDTH",
   },
   [4] = {
    type = "INTEGER",
    desc = "the height of the video in pixels",
    name = "HEIGHT",
   },
   [5] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps",
    name = "FPS",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio ",
    name = "ASPECTRATIO",
   },
   [7] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the video; examples: \
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    name = "VIDEOEXPORTOPTIONS",
   },
   [8] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the audio; examples: \
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest",
    name = "AUDIOEXPORTOPTIONS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the MPEG-2-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [416] = {
  fname = "GetRenderCFG_Settings_FLV_Video",
  label = "US_GetRenderCFG_Settings_FLV_Video",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for FLV-Video.\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Note: this works only with FFMPEG 4.1.3 installed\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the used VideoCodec for the FLV-video\
0, H.264\
1, FLV1\
2, NONE",
    name = "VIDEO_CODEC",
   },
   [2] = {
    type = "INTEGER",
    desc = "the MJPEG-quality of the MKV-video, if VIDEO_CODEC=0",
    name = "MJPEG_QUALITY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the audio-codec of the FLV-video\
0, MP3\
1, AAC\
2, NONE",
    name = "AUDIO_CODEC",
   },
   [4] = {
    type = "INTEGER",
    desc = "the width of the video in pixels",
    name = "WIDTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the height of the video in pixels",
    name = "HEIGHT",
   },
   [6] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps",
    name = "FPS",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio ",
    name = "ASPECTRATIO",
   },
   [8] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the video; examples: \
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    name = "VIDEOEXPORTOPTIONS",
   },
   [9] = {
    type = "STRING",
    desc = "the options for FFMPEG to apply to the audio; examples: \
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest",
    name = "AUDIOEXPORTOPTIONS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the MPEG-2-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [417] = {
  fname = "CreateRenderCFG_MPEG1_Video",
  label = "US_CreateRenderCFG_MPEG1_Video",
  run = "in/out",
  desc = "Returns the render-cfg-string for the MPEG-1-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Note: works only with FFMPEG 4.1.3 installed\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected MPEG-1-Video-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the videocodec used for the video;\
1, MPEG-1\
2, NONE",
    name = "VIDEOCODEC",
   },
   [2] = {
    type = "INTEGER",
    desc = "the video-bitrate of the video in kbps; 1 to 2147483647",
    name = "VIDKBPS",
   },
   [3] = {
    type = "INTEGER",
    desc = "the audiocodec to use for the video\
1, MP3\
2, MP2\
3, NONE",
    name = "AUDIOCODEC",
   },
   [4] = {
    type = "INTEGER",
    desc = "the audio-bitrate of the video in kbps; 1 to 2147483647",
    name = "AUDKBPS",
   },
   [5] = {
    type = "INTEGER",
    desc = "the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "WIDTH",
   },
   [6] = {
    type = "INTEGER",
    desc = "the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "HEIGHT",
   },
   [7] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00",
    name = "FPS",
   },
   [8] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio",
    name = "ASPECTRATIO",
   },
   [9] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    opt = {
     use = false,
    },
    name = "VIDEOOPTIONS",
   },
   [10] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest",
    opt = {
     use = false,
    },
    name = "AUDIOOPTIONS",
   },
  },
  sp_api = "ultraschall",
 },
 [418] = {
  fname = "CreateRenderCFG_MPEG2_Video",
  label = "US_CreateRenderCFG_MPEG2_Video",
  run = "in/out",
  desc = "Returns the render-cfg-string for the MPEG-2-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Note: works only with FFMPEG 4.1.3 installed\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected MPEG-2-Video-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the videocodec used for the video;\
1, MPEG-2\
2, NONE",
    name = "VIDEOCODEC",
   },
   [2] = {
    type = "INTEGER",
    desc = "the video-bitrate of the video in kbps; 1 to 2147483647",
    name = "VIDKBPS",
   },
   [3] = {
    type = "INTEGER",
    desc = "the audiocodec to use for the video\
1, AAC\
2, MP3\
3, MP2\
4, NONE",
    name = "AUDIOCODEC",
   },
   [4] = {
    type = "INTEGER",
    desc = "the audio-bitrate of the video in kbps; 1 to 2147483647",
    name = "AUDKBPS",
   },
   [5] = {
    type = "INTEGER",
    desc = "the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "WIDTH",
   },
   [6] = {
    type = "INTEGER",
    desc = "the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "HEIGHT",
   },
   [7] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00",
    name = "FPS",
   },
   [8] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio",
    name = "ASPECTRATIO",
   },
   [9] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    opt = {
     use = false,
    },
    name = "VIDEOOPTIONS",
   },
   [10] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest    ",
    opt = {
     use = false,
    },
    name = "AUDIOOPTIONS",
   },
  },
  sp_api = "ultraschall",
 },
 [419] = {
  fname = "CreateRenderCFG_FLV_Video",
  label = "US_CreateRenderCFG_FLV_Video",
  run = "in/out",
  desc = "Returns the render-cfg-string for the FLV-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Note: works only with FFMPEG 4.1.3 installed\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected MPEG-2-Video-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the videocodec used for the video;\
1, H.264\
2, FLV1\
3, NONE",
    name = "VIDEOCODEC",
   },
   [2] = {
    type = "INTEGER",
    desc = "the video-bitrate of the video in kbps; 1 to 2147483647",
    name = "VIDKBPS",
   },
   [3] = {
    type = "INTEGER",
    desc = "the audiocodec to use for the video\
1, MP3\
2, AAC\
3, NONE",
    name = "AUDIOCODEC",
   },
   [4] = {
    type = "INTEGER",
    desc = "the audio-bitrate of the video in kbps; 1 to 2147483647",
    name = "AUDKBPS",
   },
   [5] = {
    type = "INTEGER",
    desc = "the width of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "WIDTH",
   },
   [6] = {
    type = "INTEGER",
    desc = "the height of the video in pixels; 1 to 2147483647; only even values(2,4,6,etc) will be accepted by Reaper, uneven will be rounded up!",
    name = "HEIGHT",
   },
   [7] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (e.g. 9.09 or 25.00); 0.01 to 2000.00",
    name = "FPS",
   },
   [8] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio",
    name = "ASPECTRATIO",
   },
   [9] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
g=1 ; all keyframes\
crf=1  ; h264 high quality\
crf=51 ; h264 small size",
    opt = {
     use = false,
    },
    name = "VIDEOOPTIONS",
   },
   [10] = {
    type = "STRING",
    desc = "additional FFMPEG-options for rendering the video; examples:\
q=0 ; mp3 VBR highest\
q=9 ; mp3 VBR lowest",
    opt = {
     use = false,
    },
    name = "AUDIOOPTIONS",
   },
  },
  sp_api = "ultraschall",
 },
 [420] = {
  fname = "GetRenderTable_ProjectDefaults",
  label = "US_GetRenderTable_ProjectDefaults",
  run = "in/out",
  desc = "Returns all stored render-settings for the project-defaults, as a handy table.\
        \
        RenderTable[\"AddToProj\"] - Add rendered items to new tracks in project-checkbox; true, checked; false, unchecked\
        RenderTable[\"Brickwall_Limiter_Enabled\"] - true, brickwall limiting is enabled; false, brickwall limiting is disabled            \
        RenderTable[\"Brickwall_Limiter_Method\"] - brickwall-limiting-mode; 1, peak; 2, true peak\
        RenderTable[\"Brickwall_Limiter_Target\"] - the volume of the brickwall-limit\
        RenderTable[\"Bounds\"] - not stored with project defaults; will use the default bounds for the source\
                                0, Custom time range; \
                                1, Entire project; \
                                2, Time selection; \
                                3, Project regions; \
                                4, Selected Media Items(in combination with Source 32); \
                                5, Selected regions\
                                6, Razor edit areas\
                                7, All project markers\
                                8, Selected markers\
        RenderTable[\"Channels\"] - the number of channels in the rendered file; \
                                  1, mono; \
                                  2, stereo; \
                                  higher, the number of channels\
        RenderTable[\"CloseAfterRender\"] - true, closes rendering to file-dialog after render; false, doesn't close it\
        RenderTable[\"Dither\"] - &1, dither master mix; \
                                &2, noise shaping master mix; \
                                &4, dither stems; \
                                &8, dither noise shaping stems\
        RenderTable[\"EmbedMetaData\"] - Embed metadata; true, checked; false, unchecked\
        RenderTable[\"EmbedStretchMarkers\"] - Embed stretch markers/transient guides; true, checked; false, unchecked\
        RenderTable[\"EmbedTakeMarkers\"] - Embed Take markers; true, checked; false, unchecked                        \
        RenderTable[\"Enable2ndPassRender\"] - true, 2nd pass render is enabled; false, 2nd pass render is disabled\
        RenderTable[\"Endposition\"] - the endposition of the rendering selection in seconds; always 0 because it's not stored with project defaults\
        RenderTable[\"FadeIn_Enabled\"] - true, fade-in is enabled; false, fade-in is disabled\
        RenderTable[\"FadeIn\"] - the fade-in-time in seconds\
        RenderTable[\"FadeIn_Shape\"] - the fade-in-shape\
                               - 0, Linear fade in\
                               - 1, Inverted quadratic fade in\
                               - 2, Quadratic fade in\
                               - 3, Inverted quartic fade in\
                               - 4, Quartic fade in\
                               - 5, Cosine S-curve fade in\
                               - 6, Quartic S-curve fade in\
        RenderTable[\"FadeOut_Enabled\"] - true, fade-out is enabled; false, fade-out is disabled\
        RenderTable[\"FadeOut\"] - the fade-out time in seconds\
        RenderTable[\"FadeOut_Shape\"] - the fade-out-shape\
                               - 0, Linear fade in\
                               - 1, Inverted quadratic fade in\
                               - 2, Quadratic fade in\
                               - 3, Inverted quartic fade in\
                               - 4, Quartic fade in\
                               - 5, Cosine S-curve fade in\
                               - 6, Quartic S-curve fade in\
        RenderTable[\"MultiChannelFiles\"] - Multichannel tracks to multichannel files-checkbox; true, checked; false, unchecked            \
        RenderTable[\"Normalize_Enabled\"] - true, normalization enabled; false, normalization not enabled\
        RenderTable[\"Normalize_Method\"] - the normalize-method-dropdownlist\
                       0, LUFS-I\
                       1, RMS-I\
                       2, Peak\
                       3, True Peak\
                       4, LUFS-M max\
                       5, LUFS-S max\
        RenderTable[\"Normalize_Only_Files_Too_Loud\"] - Only normalize files that are too loud,checkbox\
                                                     - true, checkbox checked\
                                                     - false, checkbox unchecked\
        RenderTable[\"Normalize_Stems_to_Master_Target\"] - true, normalize-stems to master target(common gain to stems)\
                                                          false, normalize each file individually\
        RenderTable[\"Normalize_Target\"] - the normalize-target as dB-value\
        RenderTable[\"NoSilentRender\"] - Do not render files that are likely silent-checkbox; true, checked; false, unchecked\
        RenderTable[\"OfflineOnlineRendering\"] - Offline/Online rendering-dropdownlist; \
                                                0, Full-speed Offline\
                                                1, 1x Offline\
                                                2, Online Render\
                                                3, Online Render(Idle)\
                                                4, Offline Render(Idle)\
        RenderTable[\"OnlyChannelsSentToParent\"] - true, option is checked; false, option is unchecked\
        RenderTable[\"OnlyMonoMedia\"] - Tracks with only mono media to mono files-checkbox; true, checked; false, unchecked\
        RenderTable[\"ProjectSampleRateFXProcessing\"] - Use project sample rate for mixing and FX/synth processing-checkbox; \
                                                       true, checked; false, unchecked\
        RenderTable[\"RenderFile\"] - the contents of the Directory-inputbox of the Render to File-dialog; \
                                    always \"\" because it's not stored with project defaults\
        RenderTable[\"RenderPattern\"] - the render pattern as input into the File name-inputbox of the Render to File-dialog; \
                                       always \"\" because it's not stored with project defaults\
        RenderTable[\"RenderQueueDelay\"] - Delay queued render to allow samples to load-checkbox; \
                                          true, checked; false, unchecked\
        RenderTable[\"RenderQueueDelaySeconds\"] - the amount of seconds for the render-queue-delay\
        RenderTable[\"RenderResample\"] - Resample mode-dropdownlist; \
                                            0, Sinc Interpolation: 64pt (medium quality)\
                                            1, Linear Interpolation: (low quality)\
                                            2, Point Sampling (lowest quality, retro)\
                                            3, Sinc Interpolation: 192pt\
                                            4, Sinc Interpolation: 384pt\
                                            5, Linear Interpolation + IIR\
                                            6, Linear Interpolation + IIRx2\
                                            7, Sinc Interpolation: 16pt\
                                            8, Sinc Interpolation: 512pt(slow)\
                                            9, Sinc Interpolation: 768pt(very slow)\
                                            10, r8brain free (highest quality, fast)\
        RenderTable[\"RenderStems_Prefader\"] - true, option is checked; false, option is unchecked\
        RenderTable[\"RenderString\"] - the render-cfg-string, that holds all settings of the currently set render-output-format as BASE64 string\
        RenderTable[\"RenderString2\"] - the render-cfg-string, that holds all settings of the currently set secondary-render-output-format as BASE64 string\
        RenderTable[\"RenderTable\"]=true - signals, this is a valid render-table\
        RenderTable[\"SampleRate\"] - the samplerate of the rendered file(s)\
        RenderTable[\"SaveCopyOfProject\"] - the \"Save copy of project to outfile.wav.RPP\"-checkbox; true, checked; false, unchecked\
        RenderTable[\"SilentlyIncrementFilename\"] - Silently increment filenames to avoid overwriting-checkbox; true, checked; false, unchecked\
        RenderTable[\"Source\"] - 0, Master mix; \
                                1, Master mix + stems; \
                                3, Stems (selected tracks); \
                                8, Region render matrix; \
                                16, Tracks with only Mono-Media to Mono Files; \
                                32, Selected media items; \
                                64, selected media items via master; \
                                128, selected tracks via master\
                                4096, Razor edit areas\
                                4224, Razor edit areas via master\
        RenderTable[\"Startposition\"] - the startposition of the rendering selection in seconds; always 0 because it's not stored with project defaults\
        RenderTable[\"TailFlag\"] - in which bounds is the Tail-checkbox checked\
                                  &1, custom time bounds; \
                                  &2, entire project; \
                                  &4, time selection; \
                                  &8, all project regions; \
                                  &16, selected media items; \
                                  &32, selected project regions\
                                  &64, razor edit areas\
        RenderTable[\"TailMS\"] - the amount of milliseconds of the tail\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all of the current project's default render-settings",
    name = "RENDERTABLE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [421] = {
  fname = "GetSetRenderBlocksize",
  label = "US_GetSetRenderBlocksize",
  run = "in/out",
  desc = "gets/sets the blocksize for rendering\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the blocksize ",
    name = "BLOCKSIZE",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, get the current one",
    name = "IS_SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new value, must be between 4 and 2147483647; lower for auto",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [422] = {
  fname = "GetRenderCFG_Settings_WMF",
  label = "US_GetRenderCFG_Settings_WMF",
  run = "in/out",
  desc = "Returns the settings stored in a render-cfg-string for Windows Media Foundation-formats (WMA, WMV, MPEG-4).\
\
You can get this from the current RENDER_FORMAT using reaper.GetSetProjectInfo_String or from ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the used OutputFormat\
0, MPEG-4",
    name = "OUTPUTFORMAT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the used VideoCodec for the mp4-video\
0, H.264\
1, no video(Reaper 6.59+)\
255, no video(before Reaper 6.59)",
    name = "VIDEO_CODEC",
   },
   [3] = {
    type = "INTEGER",
    desc = "in kbps; 0 to 2147483647",
    name = "VIDEOBITRATE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the audio-codec of the mp4-video\
0, AAC\
2, no audio(Reaper 6.59+)",
    name = "AUDIO_CODEC",
   },
   [5] = {
    type = "INTEGER",
    desc = "in kbps; 0 to 2147483647",
    name = "AUDIOBITRATE",
   },
   [6] = {
    type = "INTEGER",
    desc = "the width of the video in pixels",
    name = "WIDTH",
   },
   [7] = {
    type = "INTEGER",
    desc = "the height of the video in pixels",
    name = "HEIGHT",
   },
   [8] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps",
    name = "FPS",
   },
   [9] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio ",
    name = "ASPECTRATIO",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string, that contains the wmf-settings",
    name = "RENDER_CFG",
   },
  },
  sp_api = "ultraschall",
 },
 [423] = {
  fname = "CreateRenderCFG_WMF",
  label = "US_CreateRenderCFG_WMF",
  run = "in/out",
  desc = "Returns the render-cfg-string for the WMF-Video-format. You can use this in ProjectStateChunks, RPP-Projectfiles and reaper-render.ini\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the render-cfg-string for the selected wmf-Video-settings",
    name = "RENDER_CFG_STRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the used OutputFormat\
0, MPEG-4",
    name = "OUTPUTFORMAT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the used VideoCodec for the mp4-video\
0, H.264\
1, no video",
    name = "VIDEO_CODEC",
   },
   [3] = {
    type = "INTEGER",
    desc = "in kbps; 0 to 2147483647",
    name = "VIDEOBITRATE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the audio-codec of the mp4-video\
0, AAC\
2, no audio",
    name = "AUDIO_CODEC",
   },
   [5] = {
    type = "INTEGER",
    desc = "in kbps; 0 to 2147483647",
    name = "AUDIOBITRATE",
   },
   [6] = {
    type = "INTEGER",
    desc = "the width of the video in pixels",
    name = "WIDTH",
   },
   [7] = {
    type = "INTEGER",
    desc = "the height of the video in pixels",
    name = "HEIGHT",
   },
   [8] = {
    type = "NUMBER",
    desc = "the fps of the video; must be a double-precision-float value (9.09 or 25.00); due API-limitations, this supports 0.01fps to 2000.00fps",
    name = "FPS",
   },
   [9] = {
    type = "BOOLEAN",
    desc = "the aspect-ratio; true, keep source aspect ratio; false, don't keep source aspect ratio ",
    name = "ASPECTRATIO",
   },
  },
  sp_api = "ultraschall",
 },
 [424] = {
  fname = "ResolvePresetName",
  label = "US_ResolvePresetName",
  run = "in/out",
  desc = "returns the correct case-sensitive-spelling of a bound/options-renderpreset name.\
\
Just pass the name in any kind of case-style and it will find the correct case-sensitive-names.\
    \
Returns nil in case of an error or if no such name was found",
  out = {
   [1] = {
    type = "STRING",
    desc = "the name of the Bounds-render-preset in correct case-sensitivity as stored",
    name = "BOUNDS_NAME",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the Renderformat-options-render-preset in correct case-sensitivity as stored",
    name = "OPTIONS_AND_FORMAT_NAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the Bounds-render-preset you want to query",
    name = "BOUNDS_NAME",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the Renderformat-options-render-preset you want to query",
    name = "OPTIONS_AND_FORMAT_NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [425] = {
  fname = "SetRender_SaveRenderStats",
  label = "US_SetRender_SaveRenderStats",
  run = "in/out",
  desc = "Sets the \"Save outfile.render_stats.html\"-checkboxstate of the Render to File-dialog.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, check the checkbox; false, uncheck the checkbox",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [426] = {
  fname = "GetRender_QueueDelay",
  label = "US_GetRender_QueueDelay",
  run = "in/out",
  desc = "Sets the \"Save outfile.render_stats.html\"-checkboxstate of the Render to File-dialog.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, check the checkbox; false, uncheck the checkbox",
    name = "STATE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [427] = {
  fname = "StoreRenderTable_ProjExtState",
  label = "US_StoreRenderTable_ProjExtState",
  run = "in/out",
  desc = "Stores the render-settings of a RenderTable into a project-extstate.",
  out = {
  },
  ins = {
   [1] = {
    type = "REAPROJECT",
    desc = "the project, into which you want to store the render-settings",
    name = "PROJ",
   },
   [2] = {
    type = "STRING",
    desc = "the section-name, into which you want to store the render-settings",
    name = "SECTION",
   },
   [3] = {
    type = "TABLE",
    desc = "the RenderTable which holds all render-settings",
    name = "RENDERTABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [428] = {
  fname = "GetRenderTable_ProjExtState",
  label = "US_GetRenderTable_ProjExtState",
  run = "in/out",
  desc = "Gets the render-settings of a RenderTable from a project-extstate, stored by SetRenderTable_ProjExtState.",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the stored render-settings as a RenderTable",
    name = "RENDERTABLE",
   },
  },
  ins = {
   [1] = {
    type = "REAPROJECT",
    desc = "the project, in which you stored the render-settings",
    name = "PROJ",
   },
   [2] = {
    type = "STRING",
    desc = "the section-name, in which you stored the render-settings",
    name = "SECTION",
   },
  },
  sp_api = "ultraschall",
 },
 [429] = {
  fname = "StoreRenderTable_ExtState",
  label = "US_StoreRenderTable_ExtState",
  run = "in/out",
  desc = "Stores the render-settings of a RenderTable into an extstate.",
  out = {
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the section-name, into which you want to store the render-settings",
    name = "SECTION",
   },
   [2] = {
    type = "TABLE",
    desc = "the RenderTable which holds all render-settings",
    name = "RENDERTABLE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, the settings shall be stored long-term; false, the settings shall be stored until Reaper exits",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [430] = {
  fname = "GetRenderTable_ExtState",
  label = "US_GetRenderTable_ExtState",
  run = "in/out",
  desc = "Gets the render-settings of a RenderTable from an extstate, stored by SetRenderTable_ExtState.",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the stored render-settings as a RenderTable",
    name = "RENDERTABLE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the section-name, in which you stored the render-settings",
    name = "SECTION",
   },
  },
  sp_api = "ultraschall",
 },
 [431] = {
  fname = "IsValidMediaItemStateChunk",
  label = "US_IsValidMediaItemStateChunk",
  run = "in/out",
  desc = "Checks, whether MediaItemStateChunk is a valide MediaItemStateChunk.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, MediaItemStateChunk is valid; false, MediaItemStateChunk isn't a valid statechunk",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string to check, if it's a valid MediaItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [432] = {
  fname = "CheckMediaItemArray",
  label = "US_CheckMediaItemArray",
  run = "in/out",
  desc = "Checks, whether MediaItemArray is valid.\
It throws out all entries, that are not MediaItems and returns the altered array as result.\
\
returns false in case of error or if it is not a valid MediaItemArray",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "returns true if MediaItemArray is valid, false if not",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of entries in the returned retMediaItemArray",
    name = "COUNT",
   },
   [3] = {
    type = "ARRAY",
    desc = "the, possibly, altered MediaItemArray",
    name = "RETMEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "a MediaItemArray that shall be checked for validity",
    name = "MEDIAITEMARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [433] = {
  fname = "IsValidMediaItemArray",
  label = "US_IsValidMediaItemArray",
  run = "in/out",
  desc = "Checks, whether MediaItemArray is valid.\
It throws out all entries, that are not MediaItems and returns the altered array as result.\
\
returns false in case of an error or if it is not a valid MediaItemArray",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "returns true if MediaItemArray is valid, false if not",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of entries in the returned retMediaItemArray",
    name = "COUNT",
   },
   [3] = {
    type = "ARRAY",
    desc = "the, possibly, altered MediaItemArray",
    name = "RETMEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "a MediaItemArray that shall be checked for validity",
    name = "MEDIAITEMARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [434] = {
  fname = "CheckMediaItemStateChunkArray",
  label = "US_CheckMediaItemStateChunkArray",
  run = "in/out",
  desc = "Checks, whether MediaItemStateChunkArray is valid.\
It throws out all entries, that are not MediaItemStateChunks and returns the altered array as result.\
\
returns false in case of an error or if it is not a valid MediaItemStateChunkArray",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "returns true if MediaItemStateChunkArray is valid, false if not",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of entries in the returned retMediaItemStateChunkArray",
    name = "COUNT",
   },
   [3] = {
    type = "ARRAY",
    desc = "the, possibly, altered MediaItemStateChunkArray",
    name = "RETMEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "a MediaItemStateChunkArray that shall be checked for validity",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [435] = {
  fname = "IsValidMediaItemStateChunkArray",
  label = "US_IsValidMediaItemStateChunkArray",
  run = "in/out",
  desc = "Checks, whether MediaItemStateChunkArray is valid.\
It throws out all entries, that are not MediaItemStateChunks and returns the altered array as result.\
\
returns false in case of an error or if it is not a valid MediaItemStateChunkArray",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "returns true if MediaItemStateChunkArray is valid, false if not",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of entries in the returned retMediaItemStateChunkArray",
    name = "COUNT",
   },
   [3] = {
    type = "ARRAY",
    desc = "the, possibly, altered MediaItemStateChunkArray",
    name = "RETMEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "a MediaItemStateChunkArray that shall be checked for validity",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [436] = {
  fname = "GetMediaItemsAtPosition",
  label = "US_GetMediaItemsAtPosition",
  run = "in/out",
  desc = "Gets all Mediaitems at position, from the tracks given by trackstring.\
Returns a MediaItemArray with the found MediaItems\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of items at position",
    name = "NUMBER_OF_ITEMS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array, that contains all MediaItems at position from the tracks given by trackstring.",
    name = "MEDIAITEMARRAY",
   },
   [3] = {
    type = "ARRAY",
    desc = "an array, that contains all Mediaitem's MediaItemStatechunks at position from the tracks given by trackstring.",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "position in seconds",
    name = "POSITION",
   },
   [2] = {
    type = "STRING",
    desc = "the tracknumbers, separated by a comma",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [437] = {
  fname = "OnlyMediaItemsOfTracksInTrackstring",
  label = "US_OnlyMediaItemsOfTracksInTrackstring",
  run = "in/out",
  desc = "Throws all MediaItems out of the MediaItemArray, that are not within the tracks, as given with trackstring.\
Returns the \"cleared\" MediaItemArray\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "ARRAY",
    desc = "the \"cleared\" array, that contains only Items in tracks, as given by trackstring, -1 in case of error",
    name = "MEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with MediaItems; no nil-entries allowed, will be seen as the end of the array",
    name = "MEDIAITEMARRAY",
   },
   [2] = {
    type = "STRING",
    desc = "the tracknumbers, separated by a comma",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [438] = {
  fname = "SplitMediaItems_Position",
  label = "US_SplitMediaItems_Position",
  run = "in/out",
  desc = "Splits items at position, in the tracks given by trackstring.\
If auto-crossfade is set in the Reaper-preferences, crossfade turns it on(true) or off(false).\
\
Returns false, in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true - success, false - error",
    name = "RETVAL",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the items on the right side of the split",
    name = "MEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position in seconds",
    name = "POSITION",
   },
   [2] = {
    type = "STRING",
    desc = "the numbers for the tracks, where split shall be applied to; numbers separated by a comma",
    name = "TRACKSTRING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true or nil, automatic crossfade(if enabled) will be applied; false, automatic crossfade is off",
    name = "CROSSFADE",
   },
  },
  sp_api = "ultraschall",
 },
 [439] = {
  fname = "SplitItemsAtPositionFromArray",
  label = "US_SplitItemsAtPositionFromArray",
  run = "in/out",
  desc = "Splits items in MediaItemArray at position, in the tracks given by trackstring.\
If auto-crossfade is set in the Reaper-preferences, crossfade turns it on(true) or off(false).\
\
Returns false, in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true - success, false - error",
    name = "RETVAL",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the items on the right side of the split",
    name = "MEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position in seconds",
    name = "POSITION",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the items, where split shall be applied to. No nil-entries allowed!",
    name = "MEDIAITEMARRAY",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true - automatic crossfade(if enabled) will be applied; false - automatic crossfade is off",
    name = "CROSSFADE",
   },
  },
  sp_api = "ultraschall",
 },
 [440] = {
  fname = "DeleteMediaItem",
  label = "US_DeleteMediaItem",
  run = "in/out",
  desc = "deletes a MediaItem. Returns true, in case of success, false in case of error.\
\
returns the MediaItemStateChunk of the deleted MediaItem as well, so you can do additional processing with a deleted item.\
  \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, delete was successful; false was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the StateChunk of the deleted MediaItem\
the statechunk contains an additional entry \"ULTRASCHALL_TRACKNUMBER\" which holds the tracknumber, in which the deleted MediaItem was located",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem to be deleted",
    name = "MEDIAITEM",
   },
  },
  sp_api = "ultraschall",
 },
 [441] = {
  fname = "DeleteMediaItemsFromArray",
  label = "US_DeleteMediaItemsFromArray",
  run = "in/out",
  desc = "deletes the MediaItems from MediaItemArray. Returns true, in case of success, false in case of error.\
In addition, it returns a MediaItemStateChunkArray, that contains the statechunks of all deleted MediaItems\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, delete was successful; false was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "ARRAY",
    desc = "and array with all statechunks of all deleted MediaItems; \
each statechunk contains an additional entry \"ULTRASCHALL_TRACKNUMBER\" which holds the tracknumber, in which the deleted MediaItem was located",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "a array with MediaItem-objects to delete; no nil entries allowed",
    name = "MEDIAITEMARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [442] = {
  fname = "DeleteMediaItems_Position",
  label = "US_DeleteMediaItems_Position",
  run = "in/out",
  desc = "Delete the MediaItems between start- and endposition, from the tracks as given by trackstring.\
Returns also a MediaItemStateChunkArray, that contains the statechunks of all deleted MediaItem\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, delete was successful; false was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "ARRAY",
    desc = "and array with all statechunks of all deleted MediaItems; \
each statechunk contains an additional entry \"ULTRASCHALL_TRACKNUMBER\" which holds the tracknumber, in which the deleted MediaItem was located",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the startposition in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endposition in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the tracknumbers, separated by a comma",
    name = "TRACKSTRING",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, delete only MediaItems that are completely within start and endposition; false, also include MediaItems partially within start and endposition",
    name = "INSIDE",
   },
  },
  sp_api = "ultraschall",
 },
 [443] = {
  fname = "GetAllMediaItemsBetween",
  label = "US_GetAllMediaItemsBetween",
  run = "in/out",
  desc = "Gets all MediaItems between startposition and endposition from the tracks as given by trackstring. \
Set inside to true to get only items, that are fully within the start and endposition, set it to false, if you also want items, that are just partially inside(end or just the beginning of the item).\
\
Returns the number of items, an array with all the MediaItems and an array with all the MediaItemStateChunks of the items, as used by functions as <a href=\"#InsertMediaItem_MediaItemStateChunk\">InsertMediaItem_MediaItemStateChunk</a>, reaper.GetItemStateChunk and reaper.SetItemStateChunk.\
The statechunks include a new element \"ULTRASCHALL_TRACKNUMBER\", which contains the tracknumber of where the item originally was in; important, if you delete the items as you'll otherwise loose this information!\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found items",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all the found MediaItems",
    name = "MEDIAITEMARRAY",
   },
   [3] = {
    type = "ARRAY",
    desc = "an array with the MediaItemStateChunks, that can be used to create new items with <a href=\"#InsertMediaItem_MediaItemStateChunk\">InsertMediaItem_MediaItemStateChunk</a>",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "startposition in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "endposition in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the tracknumbers, separated by a comma",
    name = "TRACKSTRING",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, only items that are completely within selection; false, include items that are partially within selection",
    name = "INSIDE",
   },
  },
  sp_api = "ultraschall",
 },
 [444] = {
  fname = "MoveMediaItemsAfter_By",
  label = "US_MoveMediaItemsAfter_By",
  run = "in/out",
  desc = "Moves all items after old_position by change_position_by-seconds. Affects only items, that begin after oldposition, so items that start before and end after old_position do not move.\
\
Returns false in case of failure, true in case of success.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success; false in case of failure",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position, from where the movement shall be applied to, in seconds",
    name = "OLDPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the change of the position in seconds; positive - toward the end of the project, negative - toward the beginning.",
    name = "CHANGE_POSITION_BY",
   },
   [3] = {
    type = "STRING",
    desc = "the tracknumbers, separated by a comma",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [445] = {
  fname = "MoveMediaItemsBefore_By",
  label = "US_MoveMediaItemsBefore_By",
  run = "in/out",
  desc = "Moves all items before old_position by change_position_by-seconds. Affects only items, that end before oldposition, so items that start before and end after old_position do not move.\
\
Returns false in case of failure, true in case of success.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success; false in case of failure",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position, from where the movement shall be applied to, in seconds",
    name = "OLDPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the change of the position in seconds; positive - toward the end of the project, negative - toward the beginning.",
    name = "CHANGE_POSITION_BY",
   },
   [3] = {
    type = "STRING",
    desc = "the tracknumbers, separated by a comma",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [446] = {
  fname = "MoveMediaItemsBetween_To",
  label = "US_MoveMediaItemsBetween_To",
  run = "in/out",
  desc = "Moves the items between sectionstart and sectionend to newposition, within the tracks given by trackstring.\
If inside is set to true, only items completely within the section are moved; if set to false, also items are affected, that are just partially within the section.\
\
Items, that start after sectionstart, and therefore have an offset, will be moved to newposition+their offset. Keep that in mind.\
\
Returns false in case of failure, true in case of success.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success; false in case of failure",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "begin of the item-selection in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "end of the item-selection in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "new position in seconds",
    name = "NEWPOSITION",
   },
   [4] = {
    type = "STRING",
    desc = "the tracknumbers, separated by a ,",
    name = "TRACKSTRING",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, only items completely within the section; false, also items partially within the section",
    name = "INSIDE",
   },
  },
  sp_api = "ultraschall",
 },
 [447] = {
  fname = "ChangeLengthOfMediaItems_FromArray",
  label = "US_ChangeLengthOfMediaItems_FromArray",
  run = "in/out",
  desc = "Changes the length of the MediaItems in MediaItemArray to newlength.\
They will all be set to the new length, regardless of their old length. If you want to change the length of the items not >to< newlength, but >by< newlength, use <a href\"#ChangeDeltaLengthOfMediaItems_FromArray\">ChangeDeltaLengthOfMediaItems_FromArray</a> instead.\
\
Returns false in case of failure, true in case of success.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success; false in case of failure",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with items to be changed. No nil entries allowed!",
    name = "MEDIAITEMARRAY",
   },
   [2] = {
    type = "NUMBER",
    desc = "the new length of the items in seconds",
    name = "NEWLENGTH",
   },
  },
  sp_api = "ultraschall",
 },
 [448] = {
  fname = "ChangeDeltaLengthOfMediaItems_FromArray",
  label = "US_ChangeDeltaLengthOfMediaItems_FromArray",
  run = "in/out",
  desc = "Changes the length of the MediaItems in MediaItemArray by deltalength.\
If you want to change the length of the items not >by< deltalength, but >to< deltalength, use <a href\"#ChangeLengthOfMediaItems_FromArray\">ChangeLengthOfMediaItems_FromArray</a> instead.\
\
Returns false in case of failure, true in case of success.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success; false in case of failure",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with items to be changed. No nil entries allowed!",
    name = "MEDIAITEMARRAY",
   },
   [2] = {
    type = "NUMBER",
    desc = "the change of the length of the items in seconds, positive value - longer, negative value - shorter",
    name = "DELTALENGTH",
   },
  },
  sp_api = "ultraschall",
 },
 [449] = {
  fname = "ChangeOffsetOfMediaItems_FromArray",
  label = "US_ChangeOffsetOfMediaItems_FromArray",
  run = "in/out",
  desc = "Changes the audio-offset of the MediaItems in MediaItemArray to newoffset.\
It affects all(!) takes that the MediaItems has.\
If you want to change the offset of the items not >to< newoffset, but >by< newoffset, use <a href\"#ChangeDeltaOffsetOfMediaItems_FromArray\">ChangeDeltaOffsetOfMediaItems_FromArray</a> instead.\
\
Returns false in case of failure, true in case of success.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, in case of success; false, in case of failure",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with items to be changed. No nil entries allowed!",
    name = "MEDIAITEMARRAY",
   },
   [2] = {
    type = "NUMBER",
    desc = "the new offset of the items in seconds",
    name = "NEWOFFSET",
   },
  },
  sp_api = "ultraschall",
 },
 [450] = {
  fname = "ChangeDeltaOffsetOfMediaItems_FromArray",
  label = "US_ChangeDeltaOffsetOfMediaItems_FromArray",
  run = "in/out",
  desc = "Changes the audio-offset of the MediaItems in MediaItemArray by deltaoffset.\
It affects all(!) takes of the MediaItems have.\
If you want to change the offset of the items not >by< deltaoffset, but >to< deltaoffset, use <a href\"#ChangeOffsetOfMediaItems_FromArray\">ChangeOffsetOfMediaItems_FromArray</a> instead.\
\
Returns false in case of failure, true in case of success.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success; false in case of failure",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with items to be changed. No nil entries allowed!",
    name = "MEDIAITEMARRAY",
   },
   [2] = {
    type = "NUMBER",
    desc = "the new offset of the items in seconds",
    name = "NEWOFFSET",
   },
  },
  sp_api = "ultraschall",
 },
 [451] = {
  fname = "SectionCut",
  label = "US_SectionCut",
  run = "in/out",
  desc = "Cuts out all items between startposition and endposition in the tracks given by trackstring.\
\
Returns number of cut items as well as an array with the mediaitem-statechunks, which can be used with functions as <a href=\"#InsertMediaItem_MediaItemStateChunk\">InsertMediaItem_MediaItemStateChunk</a>, reaper.GetItemStateChunk and reaper.SetItemStateChunk.\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of cut items",
    name = "NUMBER_ITEMS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the mediaitem-states of the cut items.",
    name = "MEDIAITEMARRAY_STATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the startposition of the section in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endposition of the section in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the tracknumbers, separated by ,",
    name = "TRACKSTRING",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, puts the cut items into the clipboard; false, don't put into the clipboard",
    name = "ADD_TO_CLIPBOARD",
   },
  },
  sp_api = "ultraschall",
 },
 [452] = {
  fname = "SectionCut_Inverse",
  label = "US_SectionCut_Inverse",
  run = "in/out",
  desc = "Cuts out all items before(!) startposition and after(!) endposition in the tracks given by trackstring; it keeps all items inbetween startposition and endposition.\
\
Returns number of cut items as well as an array with the mediaitem-statechunks, which can be used with functions as <a href=\"#InsertMediaItem_MediaItemStateChunk\">InsertMediaItem_MediaItemStateChunk</a>, reaper.GetItemStateChunk and reaper.SetItemStateChunk.\
\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of cut items before startposition",
    name = "NUMBER_ITEMS_BEFORESTART",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the mediaitem-states of the cut items before startposition",
    name = "MEDIAITEMARRAY_STATECHUNK_BEFORESTART",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of cut items after endposition",
    name = "NUMBER_ITEMS_AFTEREND",
   },
   [4] = {
    type = "ARRAY",
    desc = "an array with the mediaitem-states of the cut items after endposition",
    name = "MEDIAITEMARRAY_STATECHUNK_AFTEREND",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the startposition of the section in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endposition of the section in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the tracknumbers, separated by ,",
    name = "TRACKSTRING",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, puts the cut items into the clipboard; false, don't put into the clipboard",
    name = "ADD_TO_CLIPBOARD",
   },
  },
  sp_api = "ultraschall",
 },
 [453] = {
  fname = "RippleCut",
  label = "US_RippleCut",
  run = "in/out",
  desc = "Cuts out all items between startposition and endposition in the tracks given by trackstring. After cut, it moves the remaining items after(!) endposition toward projectstart, by the difference between start and endposition.\
\
Returns number of cut items as well as an array with the mediaitem-statechunks, which can be used with functions as <a href=\"#InsertMediaItem_MediaItemStateChunk\">InsertMediaItem_MediaItemStateChunk</a>, reaper.GetItemStateChunk and reaper.SetItemStateChunk.\
  \
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of cut items",
    name = "NUMBER_ITEMS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the mediaitem-states of the cut items",
    name = "MEDIAITEMARRAY_STATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the startposition of the section in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endposition of the section in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the tracknumbers, separated by ,",
    name = "TRACKSTRING",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "moves envelopepoints, if existing, as well",
    name = "MOVEENVELOPEPOINTS",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, puts the cut items into the clipboard; false, don't put into the clipboard",
    name = "ADD_TO_CLIPBOARD",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true or nil, move markers; false, don't move markers",
    name = "MOVEMARKERS",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, apply crossfade with the default length set in preferences; nil or false, apply no crossfade",
    opt = {
     use = false,
    },
    name = "OBEY_CROSSFADE",
   },
  },
  sp_api = "ultraschall",
 },
 [454] = {
  fname = "RippleCut_Reverse",
  label = "US_RippleCut_Reverse",
  run = "in/out",
  desc = "Cuts out all items between startposition and endposition in the tracks given by trackstring. After cut, it moves the remaining items before(!) startposition toward projectend, by the difference between start and endposition.\
\
Returns number of cut items as well as an array with the mediaitem-statechunks, which can be used with functions as <a href=\"#InsertMediaItem_MediaItemStateChunk\">InsertMediaItem_MediaItemStateChunk</a>, reaper.GetItemStateChunk and reaper.SetItemStateChunk.\
\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of cut items",
    name = "NUMBER_ITEMS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the mediaitem-states of the cut items",
    name = "MEDIAITEMARRAY_STATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the startposition of the section in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endposition of the section in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the tracknumbers, separated by ,",
    name = "TRACKSTRING",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "moves envelopepoints, if existing, as well",
    name = "MOVEENVELOPEPOINTS",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, puts the cut items into the clipboard; false, don't put into the clipboard",
    name = "ADD_TO_CLIPBOARD",
   },
  },
  sp_api = "ultraschall",
 },
 [455] = {
  fname = "InsertMediaItem_MediaItem",
  label = "US_InsertMediaItem_MediaItem",
  run = "in/out",
  desc = "Inserts MediaItem in MediaTrack at position. Returns the newly created(or better: inserted) MediaItem as well as startposition, endposition and length of the inserted item.\
\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "MEDIAITEM",
    desc = "the newly created MediaItem",
    name = "MEDIAITEM",
   },
   [3] = {
    type = "NUMBER",
    desc = "the startposition of the inserted MediaItem in seconds",
    name = "STARTPOSITION",
   },
   [4] = {
    type = "NUMBER",
    desc = "the endposition of the inserted MediaItem in seconds",
    name = "ENDPOSITION",
   },
   [5] = {
    type = "NUMBER",
    desc = "the length of the inserted MediaItem in seconds",
    name = "LENGTH",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the newly created mediaitem",
    name = "POSITION",
   },
   [2] = {
    type = "MEDIAITEM",
    desc = "the MediaItem that shall be inserted into a track",
    name = "MEDIAITEM",
   },
   [3] = {
    type = "MEDIATRACK",
    desc = "the track, where the item shall be inserted to",
    name = "MEDIATRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [456] = {
  fname = "InsertMediaItem_MediaItemStateChunk",
  label = "US_InsertMediaItem_MediaItemStateChunk",
  run = "in/out",
  desc = "Inserts a new MediaItem in MediaTrack at position. Uses a mediaitem-state-chunk as created by functions like <a href=\"#GetAllMediaItemsBetween\">GetAllMediaItemsBetween</a>, reaper.GetItemStateChunk and reaper.SetItemStateChunk.. Returns the newly created MediaItem.\
\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "MEDIAITEM",
    desc = "the newly created MediaItem",
    name = "MEDIAITEM",
   },
   [3] = {
    type = "NUMBER",
    desc = "the startposition of the inserted MediaItem in seconds",
    name = "STARTPOSITION",
   },
   [4] = {
    type = "NUMBER",
    desc = "the endposition of the inserted MediaItem in seconds",
    name = "ENDPOSITION",
   },
   [5] = {
    type = "NUMBER",
    desc = "the length of the inserted MediaItem in seconds",
    name = "LENGTH",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the newly created mediaitem",
    name = "POSITION",
   },
   [2] = {
    type = "STRING",
    desc = "the Statechunk for the MediaItem, that shall be inserted into a track",
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "MEDIATRACK",
    desc = "the track, where the item shall be inserted to; nil, use the statechunk-entry ULTRASCHALL_TRACKNUMBER for the track instead.",
    name = "MEDIATRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [457] = {
  fname = "InsertMediaItemArray",
  label = "US_InsertMediaItemArray",
  run = "in/out",
  desc = "Inserts the MediaItems from MediaItemArray at position into the tracks, as given by trackstring. \
\
Returns the number of newly created items, as well as an array with the newly create MediaItems.\
Returns -1 in case of failure.\
\
Note: this inserts the items only in the tracks, where the original items came from. Items from track 1 will be included into track 1. Trackstring only helps to include or exclude the items from inclusion into certain tracks.\
If you have a MediaItemArray with items from track 1,2,3,4,5 and you give trackstring only the tracknumber for track 3 and 4 -> 3,4, then only the items, that were in tracks 3 and 4 originally, will be included, all the others will be ignored.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of MediaItems created",
    name = "NUMBER_OF_ITEMS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the newly created MediaItems",
    name = "MEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the newly created mediaitem",
    name = "POSITION",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the MediaItems to be inserted",
    name = "MEDIAITEMARRAY",
   },
   [3] = {
    type = "STRING",
    desc = "the numbers of the tracks, separated by a ,",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [458] = {
  fname = "GetMediaItemStateChunksFromItems",
  label = "US_GetMediaItemStateChunksFromItems",
  run = "in/out",
  desc = "Returns the MediaItem-StateChunks for all MediaItems in MediaItemArray. It returns the number of items as well as an array, with each entry one MediaItemStateChunk.\
\
StateChunks are used by the reaper-functions reaper.GetItemStateChunk and reaper.SetItemStateChunk.\
\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of trackstatechunks, usually the same as MediaItems in MediaItemArray",
    name = "NUMBER_OF_ITEMS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the StateChunks of the MediaItems in MediaItemArray",
    name = "MEDIAITEMARRAY_STATECHUNKS",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with the MediaItems you want the statechunks of",
    name = "MEDIAITEMARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [459] = {
  fname = "RippleInsert",
  label = "US_RippleInsert",
  run = "in/out",
  desc = "It inserts the MediaItems from MediaItemArray at position into the tracks, as given by trackstring. It moves the items, that were there before, accordingly toward the end of the project.\
\
Returns the number of newly created items, as well as an array with the newly created MediaItems and the endposition of the last(projectposition) inserted item into the project.\
Returns -1 in case of failure.\
\
Note: this inserts the items only in the tracks, where the original items came from. Items from track 1 will be included into track 1. Trackstring only helps to include or exclude the items from inclusion into certain tracks.\
If you have a MediaItemArray with items from track 1,2,3,4,5 and you give trackstring only the tracknumber for track 3 and 4 -> 3,4, then only the items, that were in tracks 3 and 4 originally, will be included, all the others will be ignored.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of newly created items",
    name = "NUMBER_OF_ITEMS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the newly created MediaItems",
    name = "MEDIAITEMARRAY",
   },
   [3] = {
    type = "NUMBER",
    desc = "the endposition of the last newly inserted MediaItem",
    name = "ENDPOS_INSERTED_ITEMS",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the newly created mediaitem",
    name = "POSITION",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the MediaItems to be inserted",
    name = "MEDIAITEMARRAY",
   },
   [3] = {
    type = "STRING",
    desc = "the numbers of the tracks, separated by a ,",
    name = "TRACKSTRING",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, move the envelopepoints as well; false, keep the envelopepoints where they are",
    name = "MOVEENVELOPEPOINTS",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, move markers as well; false, keep markers where they are",
    name = "MOVEMARKERS",
   },
  },
  sp_api = "ultraschall",
 },
 [460] = {
  fname = "MoveMediaItems_FromArray",
  label = "US_MoveMediaItems_FromArray",
  run = "in/out",
  desc = "It changes the position of the MediaItems from MediaItemArray. It keeps the related position to each other, putting the earliest item at newposition, putting the others later, relative to their offset.\
\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, else returns 1",
    name = "RETVAL",
   },
   [2] = {
    type = "NUMBER",
    desc = "the new earliest starttime of all MediaItems moved",
    name = "EARLIEST_ITEMTIME",
   },
   [3] = {
    type = "NUMBER",
    desc = "the new latest endtime of all MediaItems moved",
    name = "LATEST_ITEMTIME",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with the MediaItems to be inserted",
    name = "MEDIAITEMARRAY",
   },
   [2] = {
    type = "NUMBER",
    desc = "the new position in seconds",
    name = "NEWPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [461] = {
  fname = "InsertMediaItemStateChunkArray",
  label = "US_InsertMediaItemStateChunkArray",
  run = "in/out",
  desc = "Inserts the MediaItems from MediaItemStateChunkArray at position into the tracks, as given by trackstring.\
Note:Needs ULTRASCHALL_TRACKNUMBER within the statechunks, which includes the tracknumber for each mediaitem to be included. Else it will return -1. That entry will be included automatically into the MediaItemStateChunkArray as provided by <a href=\"#GetAllMediaItemsBetween\">GetAllMediaItemsBetween</a>. If you need to manually insert that entry into a statechunk, use <a href=\"#SetItemUSTRackNumber_StateChunk\">SetItemUSTRackNumber_StateChunk</a>.\
\
Returns the number of newly created items, as well as an array with the newly create MediaItems.\
Returns -1 in case of failure.\
\
Note: this inserts the items only in the tracks, where the original items came from(or the tracks set with the entry ULTRASCHALL_TRACKNUMBER). Items from track 1 will be included into track 1. Trackstring only helps to include or exclude the items from inclusion into certain tracks.\
If you have a MediaItemStateChunkArray with items from track 1,2,3,4,5 and you give trackstring only the tracknumber for track 3 and 4 -> 3,4, then only the items, that were in tracks 3 and 4 originally, will be included, all the others will be ignored.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of MediaItems created",
    name = "NUMBER_OF_ITEMS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the newly created MediaItems",
    name = "MEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the newly created mediaitem",
    name = "POSITION",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the statechunks of the MediaItems to be inserted",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
   [3] = {
    type = "STRING",
    desc = "the numbers of the tracks, separated by a ,",
    name = "TRACKSTRING",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, adds tracks to the project, if needed; nil or false, will only insert into existing tracks",
    opt = {
     use = false,
    },
    name = "ADD_NEEDED_TRACKS",
   },
  },
  sp_api = "ultraschall",
 },
 [462] = {
  fname = "OnlyMediaItemsOfTracksInTrackstring_StateChunk",
  label = "US_OnlyMediaItemsOfTracksInTrackstring_StateChunk",
  run = "in/out",
  desc = "Throws all MediaItems out of the MediaItemStateChunkArray, that are not within the tracks, as given with trackstring.\
Returns the \"cleared\" MediaItemArray; returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "ARRAY",
    desc = "the \"cleared\" array, that contains only the statechunks of MediaItems in tracks, as given by trackstring, -1 in case of error",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with MediaItems; no nil-entries allowed, will be seen as the end of the array",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
   [2] = {
    type = "STRING",
    desc = "the tracknumbers, separated by a comma",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [463] = {
  fname = "RippleInsert_MediaItemStateChunks",
  label = "US_RippleInsert_MediaItemStateChunks",
  run = "in/out",
  desc = "It inserts the MediaItems from MediaItemStateChunkArray at position into the tracks, as given by trackstring. It moves the items, that were there before, accordingly toward the end of the project.\
\
Returns the number of newly created items, as well as an array with the newly created MediaItems as statechunks and the endposition of the last(projectposition) inserted item into the project.\
Returns -1 in case of failure.\
\
Note: this inserts the items only in the tracks, where the original items came from. Items from track 1 will be included into track 1. Trackstring only helps to include or exclude the items from inclusion into certain tracks.\
If you have a MediaItemStateChunkArray with items from track 1,2,3,4,5 and you give trackstring only the tracknumber for track 3 and 4 -> 3,4, then only the items, that were in tracks 3 and 4 originally, will be included, all the others will be ignored.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of newly created items",
    name = "NUMBER_OF_ITEMS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the newly created MediaItems as StateChunkArray",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
   [3] = {
    type = "NUMBER",
    desc = "the endposition of the last newly inserted MediaItem",
    name = "ENDPOS_INSERTED_ITEMS",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the newly created mediaitem",
    name = "POSITION",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with the statechunks of MediaItems to be inserted",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
   [3] = {
    type = "STRING",
    desc = "the numbers of the tracks, separated by a ,",
    name = "TRACKSTRING",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, move the envelopepoints as well; false, keep the envelopepoints where they are",
    name = "MOVEENVELOPEPOINTS",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, move markers as well; false, keep markers where they are",
    name = "MOVEMARKERS",
   },
  },
  sp_api = "ultraschall",
 },
 [464] = {
  fname = "GetAllMediaItemsFromTrack",
  label = "US_GetAllMediaItemsFromTrack",
  run = "in/out",
  desc = "returns the number of items of tracknumber, as well as an array with all MediaItems and an array with all MediaItemStateChunks\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of items in that track",
    name = "ITEMCOUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all MediaItems from this track",
    name = "MEDIAITEMARRAY",
   },
   [3] = {
    type = "ARRAY",
    desc = "an array with all MediaItemStateCunks from this track",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber, from where you want to get the item",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [465] = {
  fname = "SetItemsLockState",
  label = "US_SetItemsLockState",
  run = "in/out",
  desc = "Sets the lockstate of the items in MediaItemArray. Set lockstate=true to set the items locked; false to set them unlocked.\
\
returns true in case of success, false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success, false in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with the MediaItems to be processed",
    name = "MEDIAITEMARRAY",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, to set the MediaItems to locked, false to set them to unlocked",
    name = "LOCKSTATE",
   },
  },
  sp_api = "ultraschall",
 },
 [466] = {
  fname = "AddLockStateToMediaItemStateChunk",
  label = "US_AddLockStateToMediaItemStateChunk",
  run = "in/out",
  desc = "Sets the lockstate in a MediaItemStateChunk. Set lockstate=true to set the chunk locked; false to set it unlocked.\
\
Does not apply the changes to the MediaItem itself. To do that, use reaper.GetItemStateChunk or <a href=\"#ApplyStateChunkToItems\">ApplyStateChunkToItems</a>!\
\
returns the changed MediaItemStateChunk\
\
returns -1 in case of failure",
  out = {
   [1] = {
    type = "STRING",
    desc = "the lockstate-modified MediaItemStateChunk",
    name = "CHANGEDMEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the item to be processed, as returned by functions like reaper.GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, to set the MediaItemStateChunk to locked, false to set it to unlocked",
    name = "LOCKSTATE",
   },
  },
  sp_api = "ultraschall",
 },
 [467] = {
  fname = "AddLockStateTo_MediaItemStateChunkArray",
  label = "US_AddLockStateTo_MediaItemStateChunkArray",
  run = "in/out",
  desc = "Sets the lockstates in a MediaItemStateChunkArray. Set lockstate=true to set the chunks locked; false to set them unlocked.\
\
Does not apply the changes to the MediaItem itself. To do that, use reaper.GetItemStateChunk or <a href=\"#ApplyStateChunkToItems\">ApplyStateChunkToItems</a>!\
\
returns the number of entries and the altered MediaItemStateChunkArray; -1 in case of failure",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of entries in the changed MediaItemStateChunkArray",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the lockstate-modified MediaItemStateChunkArray",
    name = "CHANGEDMEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "the statechunkarray of the items to be processed, as returned by functions like reaper.GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, to set the MediaItemStateChunk to locked, false to set it to unlocked",
    name = "LOCKSTATE",
   },
  },
  sp_api = "ultraschall",
 },
 [468] = {
  fname = "ApplyStateChunkToItems",
  label = "US_ApplyStateChunkToItems",
  run = "in/out",
  desc = "Applies changed StateChunks to the respective items. Skips deleted items, as they can't be set.\
\
It will look into the IGUID-entry of the statechunks, to find the right corresponding MediaItem to apply the statechunk to.\
\
returns the number of entries and the altered MediaItemStateChunkArray; -1 in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true it worked, false it didn't",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of entries that couldn't be applied",
    name = "SKIPPEDITEMSCOUNT",
   },
   [3] = {
    type = "ARRAY",
    desc = "the StateChunks, that couldn't be aplied",
    name = "SKIPPED_MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "the statechunkarray of the items to be applied, as returned by functions like reaper.GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, sets the changed undo-possible, false undo-impossible",
    name = "UNDOSTATE",
   },
  },
  sp_api = "ultraschall",
 },
 [469] = {
  fname = "GetAllLockedItemsFromMediaItemArray",
  label = "US_GetAllLockedItemsFromMediaItemArray",
  run = "in/out",
  desc = "Returns the number and the items that are locked, as well as the number and the items that are NOT locked.\
The items are returned as MediaItemArrays\
returns -1 in case of failure",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of locked items. -1 in case of failure",
    name = "COUNTLOCK",
   },
   [2] = {
    type = "ARRAY",
    desc = "the locked items in a mediaitemarray",
    name = "LOCKED_MEDIAITEMARRAY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of un(!)locked items",
    name = "COUNTUNLOCK",
   },
   [4] = {
    type = "ARRAY",
    desc = "the un(!)locked items in a mediaitemarray",
    name = "UNLOCKED_MEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "the statechunkarray of the items to be checked.",
    name = "MEDIAITEMARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [470] = {
  fname = "GetMediaItemStateChunksFromMediaItemArray",
  label = "US_GetMediaItemStateChunksFromMediaItemArray",
  run = "in/out",
  desc = "Returns the number of items and statechunks of the Items in MediaItemArray. It skips items in MediaItemArray, that are deleted.\
returns -1 in case of failure",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of statechunks returned. -1 in case of failure",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the statechunks of the items in mediaitemarray",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "the statechunkarray of the items to be checked.",
    name = "MEDIAITEMARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [471] = {
  fname = "GetSelectedMediaItemsAtPosition",
  label = "US_GetSelectedMediaItemsAtPosition",
  run = "in/out",
  desc = "Returns all selected items at position in the tracks as given by trackstring, as MediaItemArray. Empty MediaItemAray if none is found.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of entries in the returned MediaItemArray",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the found MediaItems returned as an array",
    name = "MEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "position in seconds",
    name = "POSITION",
   },
   [2] = {
    type = "STRING",
    desc = "the tracknumbers, separated by commas",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [472] = {
  fname = "GetSelectedMediaItemsBetween",
  label = "US_GetSelectedMediaItemsBetween",
  run = "in/out",
  desc = "Returns all selected items between startposition and endposition in the tracks as given by trackstring, as MediaItemArray. Empty MediaItemAray if none is found.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of entries in the returned MediaItemArray",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the found MediaItems returned as an array",
    name = "MEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "startposition in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "endposition in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the tracknumbers, separated by commas",
    name = "TRACKSTRING",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, only items completely within start/endposition; false, also items, that are partially within start/endposition",
    name = "INSIDE",
   },
  },
  sp_api = "ultraschall",
 },
 [473] = {
  fname = "DeselectMediaItems_MediaItemArray",
  label = "US_DeselectMediaItems_MediaItemArray",
  run = "in/out",
  desc = "Deselects all MediaItems, that are in MediaItemArray.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with all the MediaItemObjects, that shall be deselected",
    name = "MEDIAITEMARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [474] = {
  fname = "SelectMediaItems_MediaItemArray",
  label = "US_SelectMediaItems_MediaItemArray",
  run = "in/out",
  desc = "Selects all MediaItems, that are in MediaItemArray.\
\
It retains any current selection.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with all the MediaItemObjects, that shall be selected",
    name = "MEDIAITEMARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [475] = {
  fname = "EnumerateMediaItemsInTrack",
  label = "US_EnumerateMediaItemsInTrack",
  run = "in/out",
  desc = "returns the itemnumberth MediaItemobject in track, the number of items in tracknumber and an array with all MediaItems from this track.\
returns -1 in case of error",
  out = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the Mediaitem, as requested by parameter itemnumber",
    name = "ITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of items in that track",
    name = "ITEMCOUNT",
   },
   [3] = {
    type = "ARRAY",
    desc = "an array with all MediaItems from this track",
    name = "MEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber, from where you want to get the item",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the itemnumber within that track. 1 for the first, 2 for the second, etc",
    name = "ITEMNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [476] = {
  fname = "GetMediaItemArrayLength",
  label = "US_GetMediaItemArrayLength",
  run = "in/out",
  desc = "Returns the beginning of the first item, the end of the last item as well as the length between start and end of all items within the MediaItemArray.\
Will return -1, in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the beginning of the earliest item in the MediaItemArray in seconds",
    name = "START",
   },
   [2] = {
    type = "INTEGER",
    desc = "the end of the latest item in the MediaItemArray, timewise, in seconds",
    name = "END",
   },
   [3] = {
    type = "INTEGER",
    desc = "the length of the MediaItemArray in seconds",
    name = "LENGTH",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with MediaItems, as returned by functions like <a href=\"#GetAllMediaItemsBetween\">GetAllMediaItemsBetween</a> or <a href=\"#GetMediaItemsAtPosition\">GetMediaItemsAtPosition</a> or similar.",
    name = "MEDIAITEMARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [477] = {
  fname = "GetMediaItemStateChunkArrayLength",
  label = "US_GetMediaItemStateChunkArrayLength",
  run = "in/out",
  desc = "Returns the beginning of the first item, the end of the last item as well as the length between start and end of all items within the MediaItemStateChunkArray.\
Will return -1, in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the beginning of the earliest item in the MediaItemArray in seconds",
    name = "START",
   },
   [2] = {
    type = "INTEGER",
    desc = "the end of the latest item in the MediaItemArray, timewise, in seconds",
    name = "END",
   },
   [3] = {
    type = "INTEGER",
    desc = "the length of the MediaItemArray in seconds",
    name = "LENGTH",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with MediaItemStateChunks, as returned by functions like <a href=\"#GetAllMediaItemsBetween\">GetAllMediaItemsBetween</a> or <a href=\"#GetMediaItemsAtPosition\">GetMediaItemsAtPosition</a> or similar.",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [478] = {
  fname = "GetAllMediaItemGUIDs",
  label = "US_GetAllMediaItemGUIDs",
  run = "in/out",
  desc = "Returns an array with all MediaItem-GUIDs in order of the MediaItems-count(1 for first MediaItem, etc).\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "an array with all entries from CompareArray2, that are not in Array",
    name = "DIFF_ARRAY",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "an array with all GUIDs of all MediaItems",
    name = "GUID_ARRAY",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of GUIDs(from MediaItems) in the GUID_Array",
    name = "COUNT_OF_GUID",
   },
  },
  sp_api = "ultraschall",
 },
 [479] = {
  fname = "GetItemSpectralConfig",
  label = "US_GetItemSpectralConfig",
  run = "in/out",
  desc = "returns the item-spectral-config, which is the fft-size of the spectral view for this item.\
set itemidx to -1 to use the optional parameter MediaItemStateChunk to alter a MediaItemStateChunk instead of an item directly.\
\
returns -1 in case of error or nil if no spectral-config exists(e.g. when no spectral-edit is applied to this item)",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the fft-size in points for the spectral-view; 16, 32, 64, 128, 256, 512, 1024(default), 2048, 4096, 8192; -1, if not existing",
    name = "ITEM_SPECTRAL_CONFIG",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the item, with 1 for the first item, 2 for the second, etc.; -1, to use the parameter MediaItemStateChunk",
    name = "ITEMIDX",
   },
   [2] = {
    type = "STRING",
    desc = "you can give a MediaItemStateChunk to process, if itemidx is set to -1",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [480] = {
  fname = "SetItemSpectralConfig",
  label = "US_SetItemSpectralConfig",
  run = "in/out",
  desc = "sets the item-spectral-config, which is the fft-size of the spectral view for this item. \
\
returns false in case of error or if no spectral-config exists(e.g. when no spectral-edit is applied to this item)",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting spectral-config worked; false, if not",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered MediaItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the item, with 1 for the first item, 2 for the second, etc.; -1, if you want to use the optional parameter MediaItemStateChunk",
    name = "ITEMIDX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the fft-size in points for the spectral-view; 16, 32, 64, 128, 256, 512, 1024(default), 2048, 4096, 8192; nil, to remove it\
nil will only remove it, when SPECTRAL_EDIT is removed from item first; returned statechunk will have it removed still",
    name = "ITEM_SPECTRAL_CONFIG",
   },
   [3] = {
    type = "STRING",
    desc = "a MediaItemStateChunk you want to have altered; works only, if itemdidx is set to -1, otherwise it will be ignored",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [481] = {
  fname = "CountItemSpectralEdits",
  label = "US_CountItemSpectralEdits",
  run = "in/out",
  desc = "counts the number of SPECTRAL_EDITs in a given MediaItem/MediaItemStateChunk.\
The SPECTRAL_EDITs are the individual edit-boundary-boxes in the spectral-view.\
If itemidx is set to -1, you can give the function a MediaItemStateChunk to look in, instead.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of spectral-edits available in a given MediaItem/MediaItemStateChunk",
    name = "COUNT",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the MediaItem to look in for the spectral-edit; -1, to use the parameter MediaItemStateChunk instead",
    name = "ITEMIDX",
   },
   [2] = {
    type = "STRING",
    desc = "if itemidx is -1, this can be a MediaItemStateChunk to use, otherwise this will be ignored",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [482] = {
  fname = "GetItemSpectralEdit",
  label = "US_GetItemSpectralEdit",
  run = "in/out",
  desc = "returns the settings of a specific SPECTRAL_EDIT in a given MediaItem/MediaItemStateChunk.\
The SPECTRAL_EDITs are the individual edit-boundary-boxes in the spectral-view.\
If itemidx is set to -1, you can give the function a MediaItemStateChunk to look in, instead.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the startposition of the spectral-edit-region in seconds",
    name = "START_POS",
   },
   [2] = {
    type = "NUMBER",
    desc = "the length of the spectral-edit-region in seconds",
    name = "LENGTH",
   },
   [3] = {
    type = "NUMBER",
    desc = "the gain as slider-value; 0(-224dB) to 98350.1875(99.68dB); 1 for 0dB",
    name = "GAIN",
   },
   [4] = {
    type = "NUMBER",
    desc = "0(0%)-0.5(100%); adjusting this affects also parameter fade2!",
    name = "FADE",
   },
   [5] = {
    type = "NUMBER",
    desc = "0(0%)-0.5(100%); adjusting this affects also parameter freq_fade2!",
    name = "FREQ_FADE",
   },
   [6] = {
    type = "NUMBER",
    desc = "the bottom of the edit-region, but can be moved to be top as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)",
    name = "FREQ_RANGE_BOTTOM",
   },
   [7] = {
    type = "NUMBER",
    desc = "the top of the edit-region, but can be moved to be bottom as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)",
    name = "FREQ_RANGE_TOP",
   },
   [8] = {
    type = "INTEGER",
    desc = "unknown",
    name = "H",
   },
   [9] = {
    type = "INTEGER",
    desc = "sets the solo and bypass-state. 0, no solo, no bypass; 1, bypass only; 2, solo only; 3, bypass and solo",
    name = "BYP_SOLO",
   },
   [10] = {
    type = "NUMBER",
    desc = "sets the threshold of the gate; 0(-224dB)-98786.226563(99.89dB)",
    name = "GATE_THRES",
   },
   [11] = {
    type = "NUMBER",
    desc = "sets the floor of the gate; 0(-224dB)-99802.171875(99.98dB)",
    name = "GATE_FLOOR",
   },
   [12] = {
    type = "NUMBER",
    desc = "sets the threshold for the compressor; 0(-224dB)-98842.484375(99.90dB); 1(0dB)is default",
    name = "COMP_THRESH",
   },
   [13] = {
    type = "NUMBER",
    desc = "sets the ratio of the compressor/expander; 0.1(1:10.0)-100(100:1.0); 1(1.0:1) is default",
    name = "COMP_EXP_RATIO",
   },
   [14] = {
    type = "NUMBER",
    desc = "unknown",
    name = "N",
   },
   [15] = {
    type = "NUMBER",
    desc = "unknown",
    name = "O",
   },
   [16] = {
    type = "NUMBER",
    desc = "negative with fade_in set; positive with fadeout-set",
    name = "FADE2",
   },
   [17] = {
    type = "NUMBER",
    desc = "negative with low frequency-fade, positive with high-frequency-fade",
    name = "FREQ_FADE2",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the MediaItem to look in for the spectral-edit; -1, to use the parameter MediaItemStateChunk instead",
    name = "ITEMIDX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the spectral-edit to return; 1 for the first, 2 for the second, etc",
    name = "SPECTRALIDX",
   },
   [3] = {
    type = "STRING",
    desc = "if itemidx is -1, this can be a MediaItemStateChunk to use, otherwise this will be ignored",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [483] = {
  fname = "DeleteItemSpectralEdit",
  label = "US_DeleteItemSpectralEdit",
  run = "in/out",
  desc = "deletes a specific SPECTRAL_EDIT in a given MediaItem/MediaItemStateChunk.\
The SPECTRAL_EDITs are the individual edit-boundary-boxes in the spectral-view.\
If itemidx is set to -1, you can give the function a MediaItemStateChunk to look in, instead.\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if deleting an spectral-edit-entry was successful; false, if it was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered MediaItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the MediaItem to look in for the spectral-edit; -1, to use the parameter MediaItemStateChunk instead",
    name = "ITEMIDX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the spectral-edit to delete; 1 for the first, 2 for the second, etc",
    name = "SPECTRALIDX",
   },
   [3] = {
    type = "STRING",
    desc = "if itemidx is -1, this can be a MediaItemStateChunk to use, otherwise this will be ignored",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [484] = {
  fname = "SetItemSpectralVisibilityState",
  label = "US_SetItemSpectralVisibilityState",
  run = "in/out",
  desc = "Sets SPECTROGRAM-state in a MediaItem or MediaItemStateChunk.\
Setting it shows the spectrogram, in which you can do spectral-editing, as selected in the MediaItem-menu \"Spectral-editing -> Toggle show spectrogram for selected items\"\
\
It returns the modified MediaItemStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the item in the project; use -1 to use MediaItemStateChunk instead",
    name = "ITEMIDX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the state of the SPECTROGRAM; 0, to hide SpectralEdit; 1, to set SpectralEdit visible",
    name = "STATE",
   },
   [3] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk; only read, when itemidx=-1",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [485] = {
  fname = "SetItemSpectralEdit",
  label = "US_SetItemSpectralEdit",
  run = "in/out",
  desc = "Sets a spectral-edit-instance in a MediaItem or MediaItemStateChunk.\
\
After committing the changed MediaItemStateChunk to a MediaItem, Reaper may change the order of the spectral-edits! Keep that in mind, when changing numerous Spectral-Edits or use MediaItemStateChunks for the setting before committing them to a MediaItem using Reaper's function reaper.SetItemStateChunk().\
\
It returns the modified MediaItemStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the item in the project; use -1 to use MediaItemStateChunk instead",
    name = "ITEMIDX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the spectral-edit-instance, that you want to set",
    name = "SPECTRALIDX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the startposition of the spectral-edit-region in seconds",
    name = "START_POS",
   },
   [4] = {
    type = "NUMBER",
    desc = "the length of the spectral-edit-region in seconds",
    name = "LENGTH",
   },
   [5] = {
    type = "NUMBER",
    desc = "the gain as slider-value; 0(-224dB) to 98350.1875(99.68dB); 1 for 0dB",
    name = "GAIN",
   },
   [6] = {
    type = "NUMBER",
    desc = "0(0%)-0.5(100%); adjusting this affects also parameter fade2!",
    name = "FADE",
   },
   [7] = {
    type = "NUMBER",
    desc = "0(0%)-0.5(100%); adjusting this affects also parameter freq_fade2!",
    name = "FREQ_FADE",
   },
   [8] = {
    type = "NUMBER",
    desc = "the bottom of the edit-region, but can be moved to be top as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)",
    name = "FREQ_RANGE_BOTTOM",
   },
   [9] = {
    type = "NUMBER",
    desc = "the top of the edit-region, but can be moved to be bottom as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)",
    name = "FREQ_RANGE_TOP",
   },
   [10] = {
    type = "INTEGER",
    desc = "unknown",
    name = "H",
   },
   [11] = {
    type = "INTEGER",
    desc = "sets the solo and bypass-state. 0, no solo, no bypass; 1, bypass only; 2, solo only; 3, bypass and solo",
    name = "BYP_SOLO",
   },
   [12] = {
    type = "NUMBER",
    desc = "sets the threshold of the gate; 0(-224dB)-98786.226563(99.89dB)",
    name = "GATE_THRES",
   },
   [13] = {
    type = "NUMBER",
    desc = "sets the floor of the gate; 0(-224dB)-99802.171875(99.98dB)",
    name = "GATE_FLOOR",
   },
   [14] = {
    type = "NUMBER",
    desc = "sets the threshold for the compressor; 0(-224dB)-98842.484375(99.90dB); 1(0dB)is default",
    name = "COMP_THRESH",
   },
   [15] = {
    type = "NUMBER",
    desc = "sets the ratio of the compressor/expander; 0.1(1:10.0)-100(100:1.0); 1(1.0:1) is default",
    name = "COMP_EXP_RATIO",
   },
   [16] = {
    type = "NUMBER",
    desc = "unknown",
    name = "N",
   },
   [17] = {
    type = "NUMBER",
    desc = "unknown",
    name = "O",
   },
   [18] = {
    type = "NUMBER",
    desc = "negative with fade_in set; positive with fadeout-set",
    name = "FADE2",
   },
   [19] = {
    type = "NUMBER",
    desc = "negative with low frequency-fade, positive with high-frequency-fade",
    name = "FREQ_FADE2",
   },
   [20] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [486] = {
  fname = "GetItemSourceFile_Take",
  label = "US_GetItemSourceFile_Take",
  run = "in/out",
  desc = "returns filename, the PCM_Source-object and the MediaItem_Take-object of a specific take. Use take_nr=0 for active take.\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the filename of the requested take",
    name = "SOURCE_FILENAME",
   },
   [2] = {
    type = "PCM_SOURCE",
    desc = "the PCM_source-object of the requested take",
    name = "SOURCE",
   },
   [3] = {
    type = "MEDIAITEM_TAKE",
    desc = "the Media-Item_Take-object of the requested take",
    name = "TAKE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem-object, in which the requested take lies",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the requested take; use 0 for the active take",
    name = "TAKE_NR",
   },
  },
  sp_api = "ultraschall",
 },
 [487] = {
  fname = "AddItemSpectralEdit",
  label = "US_AddItemSpectralEdit",
  run = "in/out",
  desc = "Adds a new SPECTRAL_EDIT-entry in a given MediaItem/MediaItemStateChunk.\
The SPECTRAL_EDITs are the individual edit-boundary-boxes in the spectral-view.\
If itemidx is set to -1, you can give the function a MediaItemStateChunk to look in, instead.\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if adding was successful; false, if adding wasn't successful",
    name = "RETVAL",
   },
   [2] = {
    type = "MEDIAITEMSTATECHUNK",
    desc = "the altered MediaItemStateChunk",
    opt = {
     use = false,
    },
    name = "STATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the MediaItem to add to another spectral-edit-entry; -1, to use the parameter MediaItemStateChunk instead",
    name = "ITEMIDX",
   },
   [2] = {
    type = "NUMBER",
    desc = "the startposition of the spectral-edit-region in seconds",
    name = "START_POS",
   },
   [3] = {
    type = "NUMBER",
    desc = "the length of the spectral-edit-region in seconds",
    name = "LENGTH",
   },
   [4] = {
    type = "NUMBER",
    desc = "the gain as slider-value; 0(-224dB) to 98350.1875(99.68dB); 1 for 0dB",
    name = "GAIN",
   },
   [5] = {
    type = "NUMBER",
    desc = "0(0%)-0.5(100%); adjusting this affects also parameter fade2!",
    name = "FADE",
   },
   [6] = {
    type = "NUMBER",
    desc = "0(0%)-0.5(100%); adjusting this affects also parameter freq_fade2!",
    name = "FREQ_FADE",
   },
   [7] = {
    type = "NUMBER",
    desc = "the bottom of the edit-region, but can be moved to be top as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)",
    name = "FREQ_RANGE_BOTTOM",
   },
   [8] = {
    type = "NUMBER",
    desc = "the top of the edit-region, but can be moved to be bottom as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)",
    name = "FREQ_RANGE_TOP",
   },
   [9] = {
    type = "INTEGER",
    desc = "unknown",
    name = "H",
   },
   [10] = {
    type = "INTEGER",
    desc = "sets the solo and bypass-state. 0, no solo, no bypass; 1, bypass only; 2, solo only; 3, bypass and solo",
    name = "BYP_SOLO",
   },
   [11] = {
    type = "NUMBER",
    desc = "sets the threshold of the gate; 0(-224dB)-98786.226563(99.89dB)",
    name = "GATE_THRES",
   },
   [12] = {
    type = "NUMBER",
    desc = "sets the floor of the gate; 0(-224dB)-99802.171875(99.98dB)",
    name = "GATE_FLOOR",
   },
   [13] = {
    type = "NUMBER",
    desc = "sets the threshold for the compressor; 0(-224dB)-98842.484375(99.90dB); 1(0dB)is default",
    name = "COMP_THRESH",
   },
   [14] = {
    type = "NUMBER",
    desc = "sets the ratio of the compressor/expander; 0.1(1:10.0)-100(100:1.0); 1(1.0:1) is default",
    name = "COMP_EXP_RATIO",
   },
   [15] = {
    type = "NUMBER",
    desc = "unknown",
    name = "N",
   },
   [16] = {
    type = "NUMBER",
    desc = "unknown",
    name = "O",
   },
   [17] = {
    type = "NUMBER",
    desc = "negative with fade_in set; positive with fadeout-set",
    name = "FADE2",
   },
   [18] = {
    type = "NUMBER",
    desc = "negative with low frequency-fade, positive with high-frequency-fade",
    name = "FREQ_FADE2",
   },
   [19] = {
    type = "STRING",
    desc = "if itemidx is -1, this can be a MediaItemStateChunk to use, otherwise this will be ignored",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [488] = {
  fname = "GetItemSpectralVisibilityState",
  label = "US_GetItemSpectralVisibilityState",
  run = "in/out",
  desc = "returns, if spectral-editing is shown in the arrange-view of item itemidx\
set itemidx to -1 to use the optional parameter MediaItemStateChunk to alter a MediaItemStateChunk instead of an item directly.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, if spectral-config isn't shown in arrange-view; 1, if spectral-config is shown in arrange-view",
    name = "ITEM_SPECTRAL_CONFIG",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the item, with 1 for the first item, 2 for the second, etc.; -1, to use the parameter MediaItemStateChunk",
    name = "ITEMIDX",
   },
   [2] = {
    type = "STRING",
    desc = "you can give a MediaItemStateChunk to process, if itemidx is set to -1",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [489] = {
  fname = "InsertImageFile",
  label = "US_InsertImageFile",
  run = "in/out",
  desc = "Inserts a supported image-file into your project.\
Due API-limitations, it creates two undo-points(one for inserting the MediaItem and one for changing the length).\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if inserting was successful; false, if inserting was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "MEDIAITEM",
    desc = "the MediaItem of the newly inserted image",
    name = "ITEM",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the file to check for it's image-fileformat",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the track, in which the image shall be inserted",
    name = "TRACK",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the inserted image in seconds",
    name = "POSITION",
   },
   [4] = {
    type = "NUMBER",
    desc = "the length of the image-item in seconds; 1, for the default length of 1 second",
    name = "LENGTH",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, loop the inserted image-file; false, don't loop the inserted image-file",
    name = "LOOPED",
   },
  },
  sp_api = "ultraschall",
 },
 [490] = {
  fname = "GetAllSelectedMediaItems",
  label = "US_GetAllSelectedMediaItems",
  run = "in/out",
  desc = "Returns all selected items in the project as MediaItemArray. Empty MediaItemAray if none is found.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of entries in the returned MediaItemArray",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "all selected MediaItems returned as an array",
    name = "MEDIAITEMARRAY",
   },
   [3] = {
    type = "ARRAY",
    desc = "the statechunks of all found MediaItems as an array",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [491] = {
  fname = "SetMediaItemsSelected_TimeSelection",
  label = "US_SetMediaItemsSelected_TimeSelection",
  run = "in/out",
  desc = "Sets all MediaItems selected, that are within the time-selection.",
  out = {
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, select only items completely inside the time-selection; false or nil, include also items, that are partially inside the time-selection",
    opt = {
     use = false,
    },
    name = "INSIDE",
   },
  },
  sp_api = "ultraschall",
 },
 [492] = {
  fname = "GetParentTrack_MediaItem",
  label = "US_GetParentTrack_MediaItem",
  run = "in/out",
  desc = "Returns the tracknumber and the MediaTrack-object of the track in which the MediaItem is placed.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber of the track, in which the MediaItem is placed; 1 for track 1, 2 for track 2, etc",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack-object of the track, in which the MediaItem is placed",
    name = "MEDIATRACK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, of which you want to know the track is is placed in",
    name = "MEDIAITEM",
   },
  },
  sp_api = "ultraschall",
 },
 [493] = {
  fname = "IsItemInTrack2",
  label = "US_IsItemInTrack2",
  run = "in/out",
  desc = "Checks, whether a MediaItem is in track with tracknumber.\
\
see [IsItemInTrack](#IsItemInTrack) to use itemidx instead of the MediaItem-object.\
see [IsItemInTrack3](#IsItemInTrack3) to check against multiple tracks at once using a trackstring.\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if item is in track; false, if not",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber of the track, in which the item lies",
    name = "TRACKNUMBER",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, of which you want to know the track is is placed in",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber to check the parent track of the MediaItem against, with 1 for track 1, etc",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [494] = {
  fname = "IsItemInTimerange",
  label = "US_IsItemInTimerange",
  run = "in/out",
  desc = "checks, whether a given MediaItem is within startposition and endposition and returns the result.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, item is in timerange; false, item isn't in timerange",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem to check for, if it's within the timerange",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "NUMBER",
    desc = "the starttime of the timerange, in which the MediaItem must be, in seconds",
    name = "STARTPOSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the endtime of the timerange, in which the MediaItem must be, in seconds",
    name = "ENDPOSITION",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, MediaItem must be fully within timerange; false, MediaItem can be partially inside timerange",
    name = "INSIDE",
   },
  },
  sp_api = "ultraschall",
 },
 [495] = {
  fname = "OnlyItemsInTracksAndTimerange",
  label = "US_OnlyItemsInTracksAndTimerange",
  run = "in/out",
  desc = "Removes all items from MediaItemArray, that aren't in tracks, as given by trackstring and are outside the timerange(starttime to endtime).\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of items that fit the requested tracks and timerange",
    name = "COUNT",
   },
   [2] = {
    type = "MEDIAITEMARRAY",
    desc = "the altered MediaItemArray, that has only the MediaItems from tracks as requested by trackstring and from within timerange",
    name = "MEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEMARRAY",
    desc = "an array with all MediaItems, that shall be checked for trackexistence and timerange",
    name = "MEDIAITEMARRAY",
   },
   [2] = {
    type = "STRING",
    desc = "a string with all requested tracknumbers in which the MediaItem must be, separated by commas; 1 for track 1, 2 for track 2, etc",
    name = "TRACKSTRING",
   },
   [3] = {
    type = "NUMBER",
    desc = "the starttime of the timerange, in which the MediaItem must be, in seconds",
    name = "STARTTIME",
   },
   [4] = {
    type = "NUMBER",
    desc = "the endtime of the timerange, in which the MediaItem must be, in seconds",
    name = "ENDTIME",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, only MediaItems are returned, that are fully within starttime and endtime; false, return also MediaItems partially in timerange",
    name = "INSIDE",
   },
  },
  sp_api = "ultraschall",
 },
 [496] = {
  fname = "ApplyActionToMediaItem",
  label = "US_ApplyActionToMediaItem",
  run = "in/out",
  desc = "Applies an action to a MediaItem, in either main or MIDI-Editor section-context.\
The action given must support applying itself to selected items.    \
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if running the action was successful; false, if not or an error occured",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, to whom the action shall be applied to",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "the commandid-number or ActionCommandID, that shall be run.",
    name = "ACTIONCOMMANDID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of times this action shall be applied to each item; minimum value is 1",
    name = "REPEAT_ACTION",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, run an action from MIDI-Editor-section-context; false, run an action from the main section",
    name = "MIDI",
   },
   [5] = {
    type = "HWND",
    desc = "the HWND-handle of the MIDI-Editor, to which a MIDI-action shall be applied to; nil, to use the currently selected one",
    opt = {
     use = false,
    },
    name = "MIDI_HWND",
   },
  },
  sp_api = "ultraschall",
 },
 [497] = {
  fname = "ApplyActionToMediaItemArray",
  label = "US_ApplyActionToMediaItemArray",
  run = "in/out",
  desc = "Applies an action to the MediaItems in MediaItemArray, in either main or MIDI-Editor section-context\
The action given must support applying itself to selected items.\
\
This function applies the action to each MediaItem individually. To apply the action to all MediaItems in MediaItemArray at once, see <a href=\"#ApplyActionToMediaItemArray2\">ApplyActionToMediaItemArray2</a>.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if running the action was successful; false, if not or an error occured",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEMARRAY",
    desc = "an array with all MediaItems, to whom the action shall be applied to",
    name = "MEDIAITEMARRAY",
   },
   [2] = {
    type = "STRING",
    desc = "the commandid-number or ActionCommandID, that shall be run.",
    name = "ACTIONCOMMANDID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of times this action shall be applied to each item; minimum value is 1",
    name = "REPEAT_ACTION",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, run an action from MIDI-Editor-section-context; false, run an action from the main section",
    name = "MIDI",
   },
   [5] = {
    type = "HWND",
    desc = "the HWND-handle of the MIDI-Editor, to which a MIDI-action shall be applied to; nil, to use the currently selected one",
    opt = {
     use = false,
    },
    name = "MIDI_HWND",
   },
  },
  sp_api = "ultraschall",
 },
 [498] = {
  fname = "GetAllMediaItemsInTimeSelection",
  label = "US_GetAllMediaItemsInTimeSelection",
  run = "in/out",
  desc = "Gets all MediaItems from within a time-selection\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of items found in time-selection",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all MediaItems found within time-selection",
    name = "MEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string with all tracknumbers, separated by a comma; 1 for the first track, 2 for the second",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [499] = {
  fname = "NormalizeItems",
  label = "US_NormalizeItems",
  run = "in/out",
  desc = "Normalizes all items in MediaItemArray.\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1, in case of an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with all MediaItems, that shall be normalized",
    name = "MEDIAITEMARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [500] = {
  fname = "GetAllMediaItems",
  label = "US_GetAllMediaItems",
  run = "in/out",
  desc = "Returns a MediaItemArray with all MediaItems in the current project",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of items in the MediaItemArray",
    name = "ITEMCOUNT",
   },
   [2] = {
    type = "MEDIAITEMARRAY",
    desc = "an array with all MediaItems from the current project",
    name = "MEDIAITEMARRAY",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [501] = {
  fname = "PreviewMediaItem",
  label = "US_PreviewMediaItem",
  run = "in/out",
  desc = "Will play a preview a given MediaItem.\
You can just play one preview at a time, except when previewing additionally through the MediaExplorer.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "false, in case of error; true, in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, of which you want to play a preview",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the type of the preview\
0, Preview the MediaItem in the Media Explorer\
1, Preview the MediaItem\
2, Preview the MediaItem at track fader volume of the track, in which it lies\
3, Preview the MediaItem through the track, in which it lies(including FX-settings)",
    name = "PREVIEWTYPE",
   },
  },
  sp_api = "ultraschall",
 },
 [502] = {
  fname = "StopAnyPreview",
  label = "US_StopAnyPreview",
  run = "in/out",
  desc = "Stops any playing preview of a MediaItem.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [503] = {
  fname = "PreviewMediaFile",
  label = "US_PreviewMediaFile",
  run = "in/out",
  desc = "Plays a preview of a media-file. You can only play one file at a time.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, starting preview was successful; false, starting preview wasn't successful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename with path of the media-file to play",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "NUMBER",
    desc = "the gain of the volume; nil, defaults to 1",
    opt = {
     use = false,
    },
    name = "GAIN",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, loop the previewed file; false or nil, don't loop the file",
    opt = {
     use = false,
    },
    name = "LOOP",
   },
   [4] = {
    type = "INTEGER",
    desc = "the outputChannel; for multichannel files, this is the first hardware-output-channel for e.g. left channel of a stereo file; default, 0",
    opt = {
     use = false,
    },
    name = "OUTPUTCHANNEL",
   },
  },
  sp_api = "ultraschall",
 },
 [504] = {
  fname = "GetMediaItemTake",
  label = "US_GetMediaItemTake",
  run = "in/out",
  desc = "Returns the requested MediaItem-Take of MediaItem. Use TakeNr=0 for the active take(!)\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "MEDIAITEM_TAKE",
    desc = "the requested take of a MediaItem",
    name = "TAKE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of takes available within this Mediaitem",
    name = "TAKECOUNT",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, of whom you want to request a certain take.",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the take that you want to request; 1 for the first; 2 for the second, etc; 0, for the current active take",
    name = "TAKENR",
   },
  },
  sp_api = "ultraschall",
 },
 [505] = {
  fname = "ApplyFunctionToMediaItemArray",
  label = "US_ApplyFunctionToMediaItemArray",
  run = "in/out",
  desc = "Applies function \"functionname\" on all items in MediaItemArray. Parameter ... is all parameters used for function \"functionname\", where you should use nil in place of the parameter that shall hold a MediaItem.\
\
Returns a table with a boolean(did the function run without an error) and all returnvalues returned by function \"functionname\".\
\
Returns nil in case of an error. Will NOT(!) stop execution, if function \"functionname\" produces an error(see table returnvalues for more details)",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all returnvalues of the following structure:\
   returnvalues[1]=boolean - true, running the function succeeded; false, running the function did not succeed\
   returnvalues[2]=optional(!) string - the errormessage, if returnvalues[1]=false; will be omitted if returnvalues[1]=true\
all other tableentries contain the returnvalues, as returned by function \"functionname\"",
    name = "RETURNVALUES",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEMARRAY",
    desc = "an array with all MediaItems, who you want to apply functionname to.",
    name = "MEDIAITEMARRAY",
   },
   [2] = {
    type = "FUNCTION",
    desc = "the name of the function to apply to every MediaItem in MediaItemArray",
    name = "FUNCTIONNAME",
   },
   [3] = {
    type = "FUNCTIONPARAMETERS1...N",
    desc = "the parameters needed for function \"functionname\". Important: the function-parameter that is intended for the MediaItem, must be nil. \
This nil-parameter will be filled with the appropriate MediaItem by ApplyFunctionToMediaItemArray automatically",
    name = "RETVAL",
   },
  },
  sp_api = "ultraschall",
 },
 [506] = {
  fname = "GetGapsBetweenItems",
  label = "US_GetGapsBetweenItems",
  run = "in/out",
  desc = "Returns a table with all gaps between items in MediaTrack.\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of gaps found between items; -1, in case of error",
    name = "NUMBER_OF_GAPS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all gappositions found\
gaptable[idx][1]=startposition of gap\
gaptable[idx][2]=endposition of gap",
    name = "GAPTABLE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, of which you want to have the gaps between items",
    name = "MEDIATRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [507] = {
  fname = "DeleteMediaItems_Position",
  label = "US_DeleteMediaItems_Position",
  run = "in/out",
  desc = "Delete the MediaItems between start- and endposition, from the tracks as given by trackstring.\
Returns also a MediaItemStateChunkArray, that contains the statechunks of all deleted MediaItem\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, delete was successful; false was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "ARRAY",
    desc = "and array with all statechunks of all deleted MediaItems; \
each statechunk contains an additional entry \"ULTRASCHALL_TRACKNUMBER\" which holds the tracknumber, in which the deleted MediaItem was located",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the startposition in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endposition in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the tracknumbers, separated by a comma",
    name = "TRACKSTRING",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, delete only MediaItems that are completely within start and endposition; false, also include MediaItems partially within start and endposition",
    name = "INSIDE",
   },
  },
  sp_api = "ultraschall",
 },
 [508] = {
  fname = "ApplyActionToMediaItemArray2",
  label = "US_ApplyActionToMediaItemArray2",
  run = "in/out",
  desc = "Applies an action to the MediaItems in MediaItemArray, in either main or MIDI-Editor section-context\
The action given must support applying itself to selected items.\
\
This function applies the action to all MediaItems at once. To apply the action to each MediaItem in MediaItemArray individually, see <a href=\"#ApplyActionToMediaItemArray\">ApplyActionToMediaItemArray</a>\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if running the action was successful; false, if not or an error occured",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEMARRAY",
    desc = "an array with all MediaItems, to whom the action shall be applied to",
    name = "MEDIAITEMARRAY",
   },
   [2] = {
    type = "STRING",
    desc = "the commandid-number or ActionCommandID, that shall be run.",
    name = "ACTIONCOMMANDID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of times this action shall be applied to each item; minimum value is 1",
    name = "REPEAT_ACTION",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, run an action from MIDI-Editor-section-context; false, run an action from the main section",
    name = "MIDI",
   },
   [5] = {
    type = "HWND",
    desc = "the HWND-handle of the MIDI-Editor, to which a MIDI-action shall be applied to; nil, to use the currently selected one",
    opt = {
     use = false,
    },
    name = "MIDI_HWND",
   },
  },
  sp_api = "ultraschall",
 },
 [509] = {
  fname = "GetMediafileAttributes",
  label = "US_GetMediafileAttributes",
  run = "in/out",
  desc = "returns the attributes of a mediafile\
\
if the mediafile is an rpp-project, this function creates a proxy-file called filename.RPP-PROX, which is a wave-file of the length of the project.\
This file can be deleted safely after that, but would be created again the next time this function is called.    \
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the length of the mediafile in seconds",
    name = "LENGTH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of channels of the mediafile",
    name = "NUMCHANNELS",
   },
   [3] = {
    type = "INTEGER",
    desc = "the samplerate of the mediafile in hertz",
    name = "SAMPLERATE",
   },
   [4] = {
    type = "STRING",
    desc = "the type of the mediafile, like MP3, WAV, MIDI, FLAC, RPP_PROJECT etc",
    name = "FILETYPE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the file whose attributes you want to have",
    name = "FILENAME",
   },
  },
  sp_api = "ultraschall",
 },
 [510] = {
  fname = "InsertMediaItemFromFile",
  label = "US_InsertMediaItemFromFile",
  run = "in/out",
  desc = "Inserts the mediafile filename into the project at position in track\
When giving an rpp-projectfile, it will be rendered by Reaper and inserted as subproject!\
\
Due API-limitations, it creates two undo-points: one for inserting the MediaItem and one for changing the length(when length isn't -1).\
\
Returns -1 in case of failure",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, if insertion worked; -1, if it failed",
    name = "RETVAL",
   },
   [2] = {
    type = "MEDIAITEM",
    desc = "the newly created MediaItem",
    name = "ITEM",
   },
   [3] = {
    type = "NUMBER",
    desc = "the endposition of the newly created MediaItem in seconds",
    name = "ENDPOSITION",
   },
   [4] = {
    type = "INTEGER",
    desc = "the number of channels of the mediafile",
    name = "NUMCHANNELS",
   },
   [5] = {
    type = "INTEGER",
    desc = "the samplerate of the mediafile in hertz",
    name = "SAMPLERATE",
   },
   [6] = {
    type = "STRING",
    desc = "the type of the mediafile, like MP3, WAV, MIDI, FLAC, etc",
    name = "FILETYPE",
   },
   [7] = {
    type = "NUMBER",
    desc = "the (new) editcursorposition",
    name = "EDITCURSORPOSITION",
   },
   [8] = {
    type = "MEDIATRACK",
    desc = "returns the MediaTrack, in which the item is included",
    name = "TRACK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the path+filename of the mediafile to be inserted into the project",
    name = "FILENAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the track, in which the file shall be inserted\
 0, insert the file into a newly inserted track after the last track\
-1, insert the file into a newly inserted track before the first track\
-2, insert into the last touched track",
    name = "TRACK",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the newly inserted item",
    name = "POSITION",
   },
   [4] = {
    type = "NUMBER",
    desc = "the length of the newly created mediaitem; -1, use the length of the sourcefile",
    name = "LENGTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the position of the editcursor after insertion of the mediafile\
0, the old editcursorposition\
1, the position, at which the item was inserted\
2, the end of the newly inserted item",
    name = "EDITCURSORPOS",
   },
   [6] = {
    type = "NUMBER",
    desc = "an offset, to delay the insertion of the item, to overcome possible \"too late\"-starting of playback of item during recording",
    opt = {
     use = false,
    },
    name = "OFFSET",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, loop source; false or nil, don't loop source",
    opt = {
     use = false,
    },
    name = "LOOPED",
   },
   [8] = {
    type = "BOOLEAN",
    desc = "true, lock MediaItem; false or nil, don't lock MediaItem",
    opt = {
     use = false,
    },
    name = "LOCKED",
   },
  },
  sp_api = "ultraschall",
 },
 [511] = {
  fname = "CopyMediaItemToDestinationTrack",
  label = "US_CopyMediaItemToDestinationTrack",
  run = "in/out",
  desc = "Copies MediaItem to MediaTrack_destination at position.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the newly created MediaItem; nil, if no item could be created",
    name = "NEWMEDIAITEM",
   },
   [2] = {
    type = "MEDIAITEMSTATECHUNK",
    desc = "the statechunk of the newly created MediaItem",
    name = "STATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, that you want to create a copy from",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "MEDIATRACK",
    desc = "the track, into which you want to copy the MediaItem",
    name = "MEDIATRACK_DESTINATION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the copy of the MediaItem; negative, to keep the position of the source-MediaItem",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [512] = {
  fname = "IsSplitAtPosition",
  label = "US_IsSplitAtPosition",
  run = "in/out",
  desc = "returns, if theres at least one split, MediaItemend or MediaItemstart at position within the tracks given in trackstring.\
 \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, there's a split/mediaitemend/mediaitemstart at position; false, it isn't",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tracknumbers, within to search for, as comma separated string. Starting 1 for the first track.",
    name = "TRACKSTRING",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position, at which to check for.",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [513] = {
  fname = "GetItem_Number",
  label = "US_GetItem_Number",
  run = "in/out",
  desc = "returns the indexnumber of a MediaItem-object\
\
Can be helpful with Reaper's own API-functions, like reaper.GetMediaItem(ReaProject proj, integer itemidx)\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the indexnumber of the MediaItem, zero based. ",
    name = "ITEMIDX",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose itemidx you want to have",
    name = "MEDIAITEM",
   },
  },
  sp_api = "ultraschall",
 },
 [514] = {
  fname = "GetItem_HighestRecCounter",
  label = "US_GetItem_HighestRecCounter",
  run = "in/out",
  desc = "Takes the RECPASS-counters of all items and takes and returns the highest one, which usually means, the number of items, who have been recorded since the project has been created.\
\
Note: a RECPASS-entry can also be part of a copy of a recorded item, so multiple items/takes can share the same RECPASS-entries with the same counter.\
Means: the highest number can be of multiple items\
 \
returns -1 if no recorded item/take has been found.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the highest reccount of all MediaItems, which usually means, that so many Items have been recorded in this project",
    name = "HIGHEST_ITEM_RECCOUNT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of MediaItems, who have a recpass-entry in their StateChunk, means, who have been recorded.    ",
    name = "FOUND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [515] = {
  fname = "GetItem_ClickState",
  label = "US_GetItem_ClickState",
  run = "in/out",
  desc = "Returns the currently clicked item and take, as well as the current timeposition.\
\
Mostly useful in defer-scripts.\
\
Returns false, if no item is clicked at",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, item is clicked on; false, item isn't clicked on",
    name = "CLICKSTATE",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position, at which the item is currently clicked at",
    name = "POSITION",
   },
   [3] = {
    type = "MEDIAITEM",
    desc = "the Item, which is currently clicked at",
    name = "ITEM",
   },
   [4] = {
    type = "MEDIAITEM_TAKE",
    desc = "the take found at clickposition",
    name = "TAKE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the mousebutton, that shall be clicked at the item; you can combine them as flags\
-1, get all states\
&1, only left mouse button\
&2, only right mouse button\
&4, Ctrl/Cmd-key\
&8, Shift-key\
&16, Alt key\
&32, Windows key\
&64, Middle mouse button",
    name = "MOUSE_BUTTON",
   },
  },
  sp_api = "ultraschall",
 },
 [516] = {
  fname = "GetEndOfItem",
  label = "US_GetEndOfItem",
  run = "in/out",
  desc = "Returns the endposition of MediaItem\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the ending edge of the MediaItem",
    name = "END_OF_ITEM_POSITION",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose ending-position you want to know",
    name = "MEDIAITEM",
   },
  },
  sp_api = "ultraschall",
 },
 [517] = {
  fname = "GetAllMediaItemAttributes_Table",
  label = "US_GetAllMediaItemAttributes_Table",
  run = "in/out",
  desc = "Returns all attributes of MediaItem as a handy table.\
\
The returned table is of the following scheme:\
    AttributeTable[\"B_MUTE\"] - bool * : muted\
    AttributeTable[\"B_LOOPSRC\"] - bool * : loop source\
    AttributeTable[\"B_ALLTAKESPLAY\"] - bool * : all takes play\
    AttributeTable[\"B_UISEL\"] - bool * : selected in arrange view\
    AttributeTable[\"C_BEATATTACHMODE\"] - char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\
    AttributeTable[\"C_AUTOSTRETCH:\"] - char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\
    AttributeTable[\"C_LOCK\"] - char * : locked, &1=locked\
    AttributeTable[\"D_VOL\"] - double * : item volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\
    AttributeTable[\"D_POSITION\"] - double * : item position in seconds\
    AttributeTable[\"D_LENGTH\"] - double * : item length in seconds\
    AttributeTable[\"D_SNAPOFFSET\"] - double * : item snap offset in seconds\
    AttributeTable[\"D_FADEINLEN\"] - double * : item manual fadein length in seconds\
    AttributeTable[\"D_FADEOUTLEN\"] - double * : item manual fadeout length in seconds\
    AttributeTable[\"D_FADEINDIR\"] - double * : item fadein curvature, -1..1\
    AttributeTable[\"D_FADEOUTDIR\"] - double * : item fadeout curvature, -1..1\
    AttributeTable[\"D_FADEINLEN_AUTO\"] - double * : item auto-fadein length in seconds, -1=no auto-fadein\
    AttributeTable[\"D_FADEOUTLEN_AUTO\"] - double * : item auto-fadeout length in seconds, -1=no auto-fadeout\
    AttributeTable[\"C_FADEINSHAPE\"] - int * : fadein shape, 0..6, 0=linear\
    AttributeTable[\"C_FADEOUTSHAPE\"] - int * : fadeout shape, 0..6, 0=linear\
    AttributeTable[\"I_GROUPID\"] - int * : group ID, 0=no group\
    AttributeTable[\"I_LASTY\"] - int * : Y-position of track in pixels (read-only)\
    AttributeTable[\"I_LASTH\"] - int * : height in track in pixels (read-only)\
    AttributeTable[\"I_CUSTOMCOLOR\"] - int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used, but will store the color anyway)\
    AttributeTable[\"I_CURTAKE\"] - int * : active take number\
    AttributeTable[\"IP_ITEMNUMBER\"] - int, item number on this track (read-only, returns the item number directly)\
    AttributeTable[\"F_FREEMODE_Y\"] - float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)\
    AttributeTable[\"F_FREEMODE_H\"] - float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)\
    AttributeTable[\"P_TRACK\"] - MediaTrack * (read-only)\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all attributes of a MediaItem",
    name = "ATTRIBUTETABLE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose attributes you want to retrieve",
    name = "MEDIAITEM",
   },
  },
  sp_api = "ultraschall",
 },
 [518] = {
  fname = "SetAllMediaItemAttributes_Table",
  label = "US_SetAllMediaItemAttributes_Table",
  run = "in/out",
  desc = "Sets all attributes of MediaItem using a AttributeTable, which holds all the new settings for the MediaItem.\
\
The expected table is of the following scheme:\
    AttributeTable[\"B_MUTE\"] - bool * : muted\
    AttributeTable[\"B_LOOPSRC\"] - bool * : loop source\
    AttributeTable[\"B_ALLTAKESPLAY\"] - bool * : all takes play\
    AttributeTable[\"B_UISEL\"] - bool * : selected in arrange view\
    AttributeTable[\"C_BEATATTACHMODE\"] - char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\
    AttributeTable[\"C_AUTOSTRETCH:\"] - char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\
    AttributeTable[\"C_LOCK\"] - char * : locked, &1=locked\
    AttributeTable[\"D_VOL\"] - double * : item volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\
    AttributeTable[\"D_POSITION\"] - double * : item position in seconds\
    AttributeTable[\"D_LENGTH\"] - double * : item length in seconds\
    AttributeTable[\"D_SNAPOFFSET\"] - double * : item snap offset in seconds\
    AttributeTable[\"D_FADEINLEN\"] - double * : item manual fadein length in seconds\
    AttributeTable[\"D_FADEOUTLEN\"] - double * : item manual fadeout length in seconds\
    AttributeTable[\"D_FADEINDIR\"] - double * : item fadein curvature, -1..1\
    AttributeTable[\"D_FADEOUTDIR\"] - double * : item fadeout curvature, -1..1\
    AttributeTable[\"D_FADEINLEN_AUTO\"] - double * : item auto-fadein length in seconds, -1=no auto-fadein\
    AttributeTable[\"D_FADEOUTLEN_AUTO\"] - double * : item auto-fadeout length in seconds, -1=no auto-fadeout\
    AttributeTable[\"C_FADEINSHAPE\"] - int * : fadein shape, 0..6, 0=linear\
    AttributeTable[\"C_FADEOUTSHAPE\"] - int * : fadeout shape, 0..6, 0=linear\
    AttributeTable[\"I_GROUPID\"] - int * : group ID, 0=no group\
    AttributeTable[\"I_LASTY\"] - int * : Y-position of track in pixels (read-only)\
    AttributeTable[\"I_LASTH\"] - int * : height in track in pixels (read-only)\
    AttributeTable[\"I_CUSTOMCOLOR\"] - int * : custom color, OS dependent color|0x100000 (i.e. ColorToNative(r,g,b)|0x100000). If you do not |0x100000, then it will not be used, but will store the color anyway)\
    AttributeTable[\"I_CURTAKE\"] - int * : active take number\
    AttributeTable[\"IP_ITEMNUMBER\"] - int, item number on this track (read-only, returns the item number directly)\
    AttributeTable[\"F_FREEMODE_Y\"] - float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)\
    AttributeTable[\"F_FREEMODE_H\"] - float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)\
    AttributeTable[\"P_TRACK\"] - MediaTrack * (read-only)\
\
returns false in case of an error or if some of the attributes could not be set.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting attributes failed",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose attributes you want to set",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "TABLE",
    desc = "a table which holds all settings, that you want to set",
    name = "ATTRIBUTETABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [519] = {
  fname = "GetAllSelectedMediaItemsBetween",
  label = "US_GetAllSelectedMediaItemsBetween",
  run = "in/out",
  desc = "Gets all selected MediaItems between startposition and endposition from the tracks as given by trackstring. \
Set inside to true to get only items, that are fully within the start and endposition, set it to false, if you also want items, that are just partially inside(end or just the beginning of the item).\
\
Returns the number of selected items, an array with all the selected MediaItems and an array with all the MediaItemStateChunks of the selected items, as used by functions as <a href=\"#InsertMediaItem_MediaItemStateChunk\">InsertMediaItem_MediaItemStateChunk</a>, reaper.GetItemStateChunk and reaper.SetItemStateChunk.\
The statechunks include a new element \"ULTRASCHALL_TRACKNUMBER\", which contains the tracknumber of where the item originally was in; important, if you delete the items as you'll otherwise loose this information!\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of selected items",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all the found and selected MediaItems",
    name = "MEDIAITEMARRAY",
   },
   [3] = {
    type = "ARRAY",
    desc = "an array with the MediaItemStateChunks, that can be used to create new items with <a href=\"#InsertMediaItem_MediaItemStateChunk\">InsertMediaItem_MediaItemStateChunk</a>",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "startposition in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "endposition in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the tracknumbers, separated by a comma",
    name = "TRACKSTRING",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, only items that are completely within selection; false, include items that are partially within selection",
    name = "INSIDE",
   },
  },
  sp_api = "ultraschall",
 },
 [520] = {
  fname = "MediaItems_Outtakes_AddSelectedItems",
  label = "US_MediaItems_Outtakes_AddSelectedItems",
  run = "in/out",
  desc = "Adds selected MediaItems to the outtakes-vault of a given project.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of items, added to the outtakes-vault",
    name = "NUMBER_OF_ITEMS",
   },
  },
  ins = {
   [1] = {
    type = "REAPROJECT",
    desc = "the project, into whose outtakes-vault the selected items shall be added to; 0 or nil, for the current project",
    name = "TARGETPROJECT",
   },
  },
  sp_api = "ultraschall",
 },
 [521] = {
  fname = "MediaItems_Outtakes_GetAllItems",
  label = "US_MediaItems_Outtakes_GetAllItems",
  run = "in/out",
  desc = "Returns all MediaItems stored in the outtakes-vault of a given project.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of items, added to the outtakes-vault",
    name = "NUMBER_OF_ITEMS",
   },
   [2] = {
    type = "ARRAY",
    desc = "all the MediaItemStateChunks of the stored MediaItems in the outtakes vault",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "REAPROJECT",
    desc = "the project, into whose outtakes-vault the selected items shall be added to; 0 or nil, for the current project",
    name = "TARGETPROJECT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "position the MediaItems one after the next, so if you import them, they would be stored one after another\
true, position the startposition of the MediaItems one after another\
false, keep old startpositions",
    opt = {
     use = false,
    },
    name = "EACHITEMSAFTERANOTHER",
   },
  },
  sp_api = "ultraschall",
 },
 [522] = {
  fname = "MediaItems_Outtakes_InsertAllItems",
  label = "US_MediaItems_Outtakes_InsertAllItems",
  run = "in/out",
  desc = "Inserts all MediaItems from the outtakes-vault into a certain track, with one item after the other, back to back.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, adding was successful; false, adding was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of added items",
    name = "NUMBER_OF_ITEMS",
   },
   [3] = {
    type = "ARRAY",
    desc = "all the inserted MediaItems",
    name = "MEDIAITEMARRAY",
   },
  },
  ins = {
   [1] = {
    type = "REAPROJECT",
    desc = "the project, into whose outtakes-vault the selected items shall be added to; 0 or nil, for the current project",
    name = "TARGETPROJECT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber, into which to insert all items from the outtakes-vault",
    name = "TRACKNUMBER",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position, at which to insert the first MediaItem; nil, startposition=0",
    name = "STARTPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [523] = {
  fname = "GetTake_ReverseState",
  label = "US_GetTake_ReverseState",
  run = "in/out",
  desc = "returns, if the chosen take of the MediaItem is reversed\
  \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, take is reversed; false, take is not reversed",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, of whose take you want to get the reverse-state",
    name = "ITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the take, whose reverse-state you want to know; 1, for the first take, etc",
    name = "TAKENUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [524] = {
  fname = "IsItemVisible",
  label = "US_IsItemVisible",
  run = "in/out",
  desc = "returns if n item is currently visible in arrangeview\
\
Note: Items who start above and end below the visible arrangeview will be treated as not completely visible!\
\
parent_track_visible and within_start_and_endtime will allow you to determine, if the item could be visible if scrolled in only x or y direction.\
  \
returns nil in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, the item is visible; false, the item is not visible",
    name = "VISIBLE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, its parent-track is visible; false, its parent track is not visible",
    name = "PARENT_TRACK_VISIBLE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, the item is within start and endtime of the arrangeview; false, it is not",
    name = "WITHIN_START_AND_ENDTIME",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose visibility you want to query",
    name = "TRACK",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "false, all tracks including partially visible ones; true, only fully visible tracks",
    name = "COMPLETELY_VISIBLE",
   },
  },
  sp_api = "ultraschall",
 },
 [525] = {
  fname = "ApplyActionToMediaItemTake",
  label = "US_ApplyActionToMediaItemTake",
  run = "in/out",
  desc = "Applies an action to a MediaItemTake, in the main section-context.\
The action given must support applying itself to selected item-takes, other actions might do weird things.    \
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if running the action was successful; false, if not or an error occured",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, that holds the take",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the take, at which the actions shall be applied to; 1-based; 0, use currently active take",
    name = "TAKEID",
   },
   [3] = {
    type = "STRING",
    desc = "the commandid-number or ActionCommandID, that shall be run.",
    name = "ACTIONCOMMANDID",
   },
   [4] = {
    type = "INTEGER",
    desc = "the number of times this action shall be applied to each take; minimum value is 1",
    name = "REPEAT_ACTION",
   },
  },
  sp_api = "ultraschall",
 },
 [526] = {
  fname = "CountMediaItemTake_StateChunk",
  label = "US_CountMediaItemTake_StateChunk",
  run = "in/out",
  desc = "Counts the number of available takes in a MediaItemStateChunk.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of takes in this MediaItemStateChunk    ",
    name = "NUMBER_OF_TAKES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the mediaitem, whose takes you want to count",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [527] = {
  fname = "GetMediaItemTake_StateChunk",
  label = "US_GetMediaItemTake_StateChunk",
  run = "in/out",
  desc = "Returns the statechunk-entries of takes from a MediaItemStateChunk.\
\
Note: takeid>0 will never return statechunk-entries as selected, even if they are.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk-entries of the requested take",
    name = "TAKESTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the mediaitem, whose take you want to get",
    name = "MEDIAITEMSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the take, whose statechunk-entries you want; 0, get selected take",
    name = "TAKEID",
   },
  },
  sp_api = "ultraschall",
 },
 [528] = {
  fname = "GetItemSpectralConfig2",
  label = "US_GetItemSpectralConfig2",
  run = "in/out",
  desc = "counts the number of spectral-edit-entries in a take, which is the fft-size of the spectral view for this item.\
\
It's the entry SPECTRAL_EDIT\
\
use take_id==0 for the active take\
\
returns -2 in case of an error ",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the fft-size in points for the spectral-view; 16, 32, 64, 128, 256, 512, 1024(default), 2048, 4096, 8192; -1, if not existing",
    name = "ITEM_SPECTRAL_CONFIG",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the item, whose spectral-edits you want to count; nil, to use the parameter MediaItemStateChunk",
    name = "ITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the take; 1-based; 0, for active take",
    name = "TAKE_ID",
   },
   [3] = {
    type = "STRING",
    desc = "you can give a MediaItemStateChunk to process, if itemidx is set to -1",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [529] = {
  fname = "GetItemSpectralEdit2",
  label = "US_GetItemSpectralEdit2",
  run = "in/out",
  desc = "returns the settings of a specific SPECTRAL_EDIT in a given MediaItem/MediaItemStateChunk.\
The SPECTRAL_EDITs are the individual edit-boundary-boxes in the spectral-view.\
If itemidx is set to nil, you can give the function a MediaItemStateChunk to look in, instead.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, getting states was successful; false, getting states was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "NUMBER",
    desc = "the startposition of the spectral-edit-region in seconds",
    name = "START_POS",
   },
   [3] = {
    type = "NUMBER",
    desc = "the length of the spectral-edit-region in seconds",
    name = "LENGTH",
   },
   [4] = {
    type = "NUMBER",
    desc = "the gain as slider-value; 0(-224dB) to 98350.1875(99.68dB); 1 for 0dB",
    name = "GAIN",
   },
   [5] = {
    type = "NUMBER",
    desc = "0(0%)-0.5(100%); adjusting this affects also parameter fade2!",
    name = "FADE",
   },
   [6] = {
    type = "NUMBER",
    desc = "0(0%)-0.5(100%); adjusting this affects also parameter freq_fade2!",
    name = "FREQ_FADE",
   },
   [7] = {
    type = "NUMBER",
    desc = "the bottom of the edit-region, but can be moved to be top as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)",
    name = "FREQ_RANGE_BOTTOM",
   },
   [8] = {
    type = "NUMBER",
    desc = "the top of the edit-region, but can be moved to be bottom as well! 0 to device-samplerate/2 (e.g 96000 for 192kHz)",
    name = "FREQ_RANGE_TOP",
   },
   [9] = {
    type = "INTEGER",
    desc = "unknown",
    name = "H",
   },
   [10] = {
    type = "INTEGER",
    desc = "sets the solo and bypass-state. 0, no solo, no bypass; 1, bypass only; 2, solo only; 3, bypass and solo",
    name = "BYP_SOLO",
   },
   [11] = {
    type = "NUMBER",
    desc = "sets the threshold of the gate; 0(-224dB)-98786.226563(99.89dB)",
    name = "GATE_THRES",
   },
   [12] = {
    type = "NUMBER",
    desc = "sets the floor of the gate; 0(-224dB)-99802.171875(99.98dB)",
    name = "GATE_FLOOR",
   },
   [13] = {
    type = "NUMBER",
    desc = "sets the threshold for the compressor; 0(-224dB)-98842.484375(99.90dB); 1(0dB)is default",
    name = "COMP_THRESH",
   },
   [14] = {
    type = "NUMBER",
    desc = "sets the ratio of the compressor/expander; 0.1(1:10.0)-100(100:1.0); 1(1.0:1) is default",
    name = "COMP_EXP_RATIO",
   },
   [15] = {
    type = "NUMBER",
    desc = "unknown",
    name = "N",
   },
   [16] = {
    type = "NUMBER",
    desc = "unknown",
    name = "O",
   },
   [17] = {
    type = "NUMBER",
    desc = "negative with fade_in set; positive with fadeout-set",
    name = "FADE2",
   },
   [18] = {
    type = "NUMBER",
    desc = "negative with low frequency-fade, positive with high-frequency-fade",
    name = "FREQ_FADE2",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem to look in for the spectral-edit; nil, to use the parameter MediaItemStateChunk instead",
    name = "ITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the take, whose spectral-edit-information you want to retrieve; 1-based; 0, active take",
    name = "TAKE_ID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of the spectral-edit to return; 1 for the first, 2 for the second, etc",
    name = "SPECTRALIDX",
   },
   [4] = {
    type = "STRING",
    desc = "if itemidx is -1, this can be a MediaItemStateChunk to use, otherwise this will be ignored",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [530] = {
  fname = "GetItemSpectralConfig2",
  label = "US_GetItemSpectralConfig2",
  run = "in/out",
  desc = "counts the number of spectral-edit-entries in a take, which is the fft-size of the spectral view for this item.\
\
It's the entry SPECTRAL_EDIT\
\
use take_id==0 for the active take\
\
returns -2 in case of an error ",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the fft-size in points for the spectral-view; 16, 32, 64, 128, 256, 512, 1024(default), 2048, 4096, 8192; -1, if not existing",
    name = "ITEM_SPECTRAL_CONFIG",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the item, whose spectral-edits you want to count; nil, to use the parameter MediaItemStateChunk",
    name = "ITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the take; 1-based; 0, for active take",
    name = "TAKE_ID",
   },
   [3] = {
    type = "STRING",
    desc = "you can give a MediaItemStateChunk to process, if itemidx is set to -1",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [531] = {
  fname = "SpectralPeak_GetMinColor",
  label = "US_SpectralPeak_GetMinColor",
  run = "in/out",
  desc = "returns the minimum value of the spectral peak-view in Media Items, which is the lowest-frequency-color.\
\
The color is encoded, so that:\
  0 = red\
  1 = green\
  2 = blue\
  3 = red again",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the minimum color of the spectral peak",
    name = "MIN_COLOR",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [532] = {
  fname = "SpectralPeak_SetMinColor",
  label = "US_SpectralPeak_SetMinColor",
  run = "in/out",
  desc = "sets the minimum value of the spectral peak-view in Media Items, which is the lowest-frequency-color.\
\
The color is encoded, so that:\
  0 = red\
  1 = green\
  2 = blue\
  3 = red again, etc\
  \
return false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the minimum color of the spectral peak",
    name = "MIN_COLOR",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, update arrange; false or nil, don't update arrange",
    opt = {
     use = false,
    },
    name = "UPDATE_ARRANGE",
   },
  },
  sp_api = "ultraschall",
 },
 [533] = {
  fname = "SpectralPeak_GetMaxColor",
  label = "US_SpectralPeak_GetMaxColor",
  run = "in/out",
  desc = "returns the maximum value of the spectral peak-view in Media Items, which is the highest-frequency-color.\
\
The color is encoded, so that:\
  0 = red\
  1 = green\
  2 = blue\
  3 = red again\
  \
Max-color should be higher than min-color.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the maximum color of the spectral peak",
    name = "MAX_COLOR",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [534] = {
  fname = "SpectralPeak_SetMaxColor",
  label = "US_SpectralPeak_SetMaxColor",
  run = "in/out",
  desc = "sets the maximum value of the spectral peak-view in Media Items.\
\
The color is encoded, so that:\
  0 = red\
  1 = green\
  2 = blue\
  3 = red again, etc\
\
  Max-color should be higher than min-color.\
  \
return false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the maximum color of the spectral peak",
    name = "COLOR",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, update arrange; false or nil, don't update arrange",
    opt = {
     use = false,
    },
    name = "UPDATE_ARRANGE",
   },
  },
  sp_api = "ultraschall",
 },
 [535] = {
  fname = "SpectralPeak_SetMaxColor_Relative",
  label = "US_SpectralPeak_SetMaxColor_Relative",
  run = "in/out",
  desc = "sets the maximum value of the spectral peak-view in Media Items relative to the minimum color.\
\
This will set the shown spectrum relative to the minimum-color set.\
\
To set it to the whole spectrum, pass 3 as color.\
To set it to a third of the spectrum, pass 1 as color.\
To set it to two times the spectrum, set color to 6.\
  \
return false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the maximum spectrum of the spectral peak relative to the minimum color",
    name = "COLOR",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, update arrange; false or nil, don't update arrange",
    opt = {
     use = false,
    },
    name = "UPDATE_ARRANGE",
   },
  },
  sp_api = "ultraschall",
 },
 [536] = {
  fname = "SpectralPeak_SetColorAttributes",
  label = "US_SpectralPeak_SetColorAttributes",
  run = "in/out",
  desc = "sets the noise_threshold, variance and opacity of the spectral peak-view in Media Items.\
\
return false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the noise threshold, between 0.25 and 8.00",
    opt = {
     use = false,
    },
    name = "NOISE_THRESHOLD",
   },
   [2] = {
    type = "NUMBER",
    desc = "the variance of the spectrum, between 0 and 1",
    opt = {
     use = false,
    },
    name = "VARIANCE",
   },
   [3] = {
    type = "NUMBER",
    desc = "the opacity of the spectrum, between 0 and 1.33; 1, for default",
    opt = {
     use = false,
    },
    name = "OPACITY",
   },
  },
  sp_api = "ultraschall",
 },
 [537] = {
  fname = "SpectralPeak_GetColorAttributes",
  label = "US_SpectralPeak_GetColorAttributes",
  run = "in/out",
  desc = "returns the noise_threshold, variance and opacity of the spectral peak-view in Media Items.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the noise threshold, between 0.25 and 8.00",
    name = "NOISE_THRESHOLD",
   },
   [2] = {
    type = "NUMBER",
    desc = "the variance of the spectrum, between 0 and 1",
    name = "VARIANCE",
   },
   [3] = {
    type = "NUMBER",
    desc = "the opacity of the spectrum, between 0 and 1.33; 1, for default",
    name = "OPACITY",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [538] = {
  fname = "ToggleCrossfadeStateForSplits",
  label = "US_ToggleCrossfadeStateForSplits",
  run = "in/out",
  desc = "Sets the state of crossfade for splitting items to either on/off or toggling it.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting state was successful; false, setting state was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, crossfade split is turned on; false, crossfade split is turned off",
    name = "CURSTATE",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "nil, toggle setting of crossfade-splitstate; true, set crossfade split on; false, set crossfade split off",
    opt = {
     use = false,
    },
    name = "TOGGLE",
   },
  },
  sp_api = "ultraschall",
 },
 [539] = {
  fname = "GetTakeSourcePosByProjectPos",
  label = "US_GetTakeSourcePosByProjectPos",
  run = "in/out",
  desc = "returns the source-position of a take at a certain project-position. Will obey time-stretch-markers, offsets, etc, as well.\
\
Note: works only within item-start and item-end.\
\
Also note: when the active take of the parent-item is a different one than the one you've passed, this will temporarily switch the active take to the one you've passed.\
That could potentially cause audio-glitches!\
\
This function is expensive, so don't use it permanently!\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the position within the source of the take in seconds",
    name = "SOURCE_POS",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the project-position, from which you want to get the take's source-position",
    name = "PROJECT_POS",
   },
   [2] = {
    type = "MEDIAITEM_TAKE",
    desc = "the take, whose source-position you want to retrieve",
    name = "TAKE",
   },
  },
  sp_api = "ultraschall",
 },
 [540] = {
  fname = "GetProjectPosByTakeSourcePos",
  label = "US_GetProjectPosByTakeSourcePos",
  run = "in/out",
  desc = "returns the project-position-representation of the source-position of a take. \
Will obey time-stretch-markers, offsets, etc, as well.\
\
Note: due API-limitations, you can only get the project position of take-source-positions 0 and higher, so no negative position is allowed.\
\
Also note: when the active take of the parent-item is a different one than the one you've passed, this will temporarily switch the active take to the one you've passed.\
That could potentially cause audio-glitches!\
\
This function is expensive, so don't use it permanently!\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the project-position, converted from the take's source-position",
    name = "PROJECT_POS",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position within the source of the take in seconds",
    name = "SOURCE_POS",
   },
   [2] = {
    type = "MEDIAITEM_TAKE",
    desc = "the take, whose source-position you want to retrieve",
    name = "TAKE",
   },
  },
  sp_api = "ultraschall",
 },
 [541] = {
  fname = "SplitStringAtLineFeedToArray",
  label = "US_SplitStringAtLineFeedToArray",
  run = "in/out",
  desc = "Splits the string unsplitstring at linefeed/tabs/control characters and puts each of these splitpieces into an array, each splitpiece one array-entry.\
The linefeeds will not(!) be returned in the array's entries.\
Returns the number of entries in the array, as well as the array itself\
If there are no control characters or linefeeds in the string, the array will have only one entry with unsplitstring in it.\
  \
  returns -1 in case of failure",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of entries in the split_string-array",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all the individual \"postsplit\"-pieces of the string",
    name = "SPLIT_STRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string, that shall be split at LineFeed/Tabs/Control Characters. Nil is not allowed.",
    name = "UNSPLITSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [542] = {
  fname = "CountCharacterInString",
  label = "US_CountCharacterInString",
  run = "in/out",
  desc = "Counts, how often character appears in checkstring and returns the count, as well as a array an with the position-numbers.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of occurences of character in checkstring",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the positionnumbers of the character in checkstring",
    name = "POSITIONS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string to check search through",
    name = "CHECKSTRING",
   },
   [2] = {
    type = "STRING",
    desc = "the character to search for. Only single characters are allowed. Controlcodes like \\n \\t count as single character. Case sensitive.",
    name = "CHARACTER",
   },
  },
  sp_api = "ultraschall",
 },
 [543] = {
  fname = "IsValidMatchingPattern",
  label = "US_IsValidMatchingPattern",
  run = "in/out",
  desc = "Returns, if patstring is a valid pattern-matching-string",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, patstring is a valid pattern-matching-string; false, patstring isn't a valid pattern-matching-string",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string to check for, if it's a valid pattern-matching-string",
    name = "PATSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [544] = {
  fname = "CSV2IndividualLinesAsArray",
  label = "US_CSV2IndividualLinesAsArray",
  run = "in/out",
  desc = "convert a csv-string to an array of the individual values. If separator cannot be found, it'll return the original string\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of entries",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "all values, each in an individual array-position",
    name = "INDIVIDUAL_VALUES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string as a csv, with all values included and separated by parameter separator",
    name = "CSV_LINE",
   },
   [2] = {
    type = "STRING",
    desc = "the separator, that separates the individual entries; use nil for commas; separators will be removed from the final strings!",
    name = "SEPARATOR",
   },
  },
  sp_api = "ultraschall",
 },
 [545] = {
  fname = "RoundNumber",
  label = "US_RoundNumber",
  run = "in/out",
  desc = "returns a rounded value of the parameter number. %.5 and higher rounds up, lower than %.5 round down.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the rounded number",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the floatingpoint number, you'd like to have rounded.",
    name = "NUM",
   },
  },
  sp_api = "ultraschall",
 },
 [546] = {
  fname = "GetPartialString",
  label = "US_GetPartialString",
  run = "in/out",
  desc = "returns the part of a filename-string between sep1 and sep2\
\
returns nil if it doesn't work, no sep1 or sep2 exist ",
  out = {
   [1] = {
    type = "STRING",
    desc = "the partial string between sep1 and sep2",
    name = "PARTIAL_STRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "string to be processed",
    name = "STR",
   },
   [2] = {
    type = "STRING",
    desc = "separator on the \"left\" side of the partial string",
    name = "SEP1",
   },
   [3] = {
    type = "STRING",
    desc = "separator on the \"right\" side of the partial string",
    name = "SEP2",
   },
  },
  sp_api = "ultraschall",
 },
 [547] = {
  fname = "Notes2CSV",
  label = "US_Notes2CSV",
  run = "in/out",
  desc = "Gets the project's notes and returns it as a CSV.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the project notes, returned as a csv-string; entries separated by a comma",
    name = "CSV_RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [548] = {
  fname = "CSV2Line",
  label = "US_CSV2Line",
  run = "in/out",
  desc = "converts a string of csv-values into a string with all values and without the ,-separators\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "STRING",
    desc = "all values in one string",
    name = "VALUES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [549] = {
  fname = "IsItemInTrack",
  label = "US_IsItemInTrack",
  run = "in/out",
  desc = "checks, whether a given item is part of the track tracknumber\
\
returns true, if the itemIDX is part of track tracknumber, false if not, nil if no such itemIDX or Tracknumber available",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if item is in track, false if item isn't in track",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the item to check of",
    name = "ITEMIDX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the track to check in, with 1 for track 1, 2 for track 2, etc.",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [550] = {
  fname = "CheckActionCommandIDFormat",
  label = "US_CheckActionCommandIDFormat",
  run = "in/out",
  desc = "Checks, whether an action command id is a valid commandid(which is a number) or a valid _action_command_id (which is a string with an _underscore in the beginning).\
\
Does not check, whether this action_command_id is a useable one, only if it's \"syntax\" is correct!\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, valid action_command_id; false, not a valid action_command_id",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ACTIONCOMMAND_ID",
    desc = "the ActionCommandID you want to check; either a number or an action_command_id with an underscore at the beginning",
    name = "RETVAL",
   },
  },
  sp_api = "ultraschall",
 },
 [551] = {
  fname = "CheckActionCommandIDFormat2",
  label = "US_CheckActionCommandIDFormat2",
  run = "in/out",
  desc = "Checks, whether an action command id is a valid commandid(which is a number) or a valid _action_command_id (which is a string with an _underscore in the beginning).\
\
Unlike CheckActionCommandIDFormat, this checks whether an action-command-id-string is an actual registered one(case sensitive!).\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, valid action_command_id; false, not a valid action_command_id",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ACTIONCOMMAND_ID",
    desc = "the ActionCommandID you want to check; either a number or an action_command_id with an underscore at the beginning",
    name = "RETVAL",
   },
  },
  sp_api = "ultraschall",
 },
 [552] = {
  fname = "ToggleStateAction",
  label = "US_ToggleStateAction",
  run = "in/out",
  desc = "Toggles state of an action using the actioncommand_id(instead of the CommandID-number)\
\
returns current state of the action after toggling or -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "state if the action, after it has been toggled",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the section of the action(see ShowActionlist-dialog)\
0 - Main\
100 - Main (alt recording)\
32060 - MIDI Editor\
32061 - MIDI Event List Editor\
32062 - MIDI Inline Editor\
32063 - Media Explorer",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "the ActionCommandID of the action to toggle",
    name = "ACTIONCOMMAND_ID",
   },
   [3] = {
    type = "INTEGER",
    desc = "toggle-state \
0, off\
&1, on/checked in menus\
&2, on/grayed out in menus\
&16, on/bullet in front of the entry in menus\
-1, NA because the action does not have on/off states.",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [553] = {
  fname = "RefreshToolbar_Action",
  label = "US_RefreshToolbar_Action",
  run = "in/out",
  desc = "Refreshes a toolbarbutton with an ActionCommandID(instead of the CommandID-number)\
\
returns -1 in case of error",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "section\
0 - Main\
100 - Main (alt recording)\
32060 - MIDI Editor\
32061 - MIDI Event List Editor\
32062 - MIDI Inline Editor\
32063 - Media Explorer",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "ActionCommandID of the action, associated with the toolbarbutton ",
    name = "ACTIONCOMMAND_ID",
   },
  },
  sp_api = "ultraschall",
 },
 [554] = {
  fname = "ToggleStateButton",
  label = "US_ToggleStateButton",
  run = "in/out",
  desc = "Toggles state and refreshes the button of an actioncommand_id\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, toggling worked; false, toggling didn't work",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the section of the action(see ShowActionlist-dialog)\
0 - Main\
100 - Main (alt recording)\
32060 - MIDI Editor\
32061 - MIDI Event List Editor\
32062 - MIDI Inline Editor\
32063 - Media Explorer",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "the ActionCommandID of the action to toggle",
    name = "ACTIONCOMMAND_ID",
   },
   [3] = {
    type = "INTEGER",
    desc = "1 or 0",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [555] = {
  fname = "SecondsToTime",
  label = "US_SecondsToTime",
  run = "in/out",
  desc = "converts timeposition in seconds(pos) to a timestring (h)hh:mm:ss.mss\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "STRING",
    desc = "timestring in (h)hh:mm:ss.mss",
    name = "TIME_STRING",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "timeposition in seconds",
    name = "POS",
   },
  },
  sp_api = "ultraschall",
 },
 [556] = {
  fname = "TimeToSeconds",
  label = "US_TimeToSeconds",
  run = "in/out",
  desc = "converts a timestring days:hours:minutes:seconds.milliseconds to timeposition in seconds\
it is ok, to have only some of the last ones given, so i.e. excluding days and hours is ok. Though excluding values inbetween does not work!\
 \
A single integer in timestring will be seen as seconds.\
To only specifiy milliseconds in particular, start the number with a .\
all other values are separated by :\
\
returns -1 in case of error, timestring is a nil or if you try to add an additional value, added before days\
\
does not check for valid timeranges, so 61 minutes is possible to give, even if hours are present in the string",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the converted position",
    name = "POSITION",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string like: days:hours:minutes:seconds.milliseconds , i.e. 1:16:27:50.098",
    name = "TIMESTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [557] = {
  fname = "SecondsToTimeString_hh_mm_ss_mss",
  label = "US_SecondsToTimeString_hh_mm_ss_mss",
  run = "in/out",
  desc = "Converts the parameter time into a timestring of the format hh:mm:ss.mss\
Valid timeranges are from 0 to 359999.99 seconds(about 99 hours).\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the converted timestring. It will always follow the format hh:mm:ss.mss and fill up digits with zeros, if necessary.",
    name = "TIMESTRING",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the time in seconds to be converted into the timestring",
    name = "TIME",
   },
  },
  sp_api = "ultraschall",
 },
 [558] = {
  fname = "TimeStringToSeconds_hh_mm_ss_mss",
  label = "US_TimeStringToSeconds_hh_mm_ss_mss",
  run = "in/out",
  desc = "Converts the parameter timestring of the format hh:mm:ss.mss into seconds\
The timestring must follow strictly this format, or the function returns -1 as result.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the time in seconds to be converted into the timestring, -1 in case of an error",
    name = "TIME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the converted timestring. It must always follow the format hh:mm:ss.mss. Fill up digits with zeros, if necessary.",
    name = "TIMESTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [559] = {
  fname = "CountPatternInString",
  label = "US_CountPatternInString",
  run = "in/out",
  desc = "returns the count and an array with all positions of searchstring in sourcestring.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of appearances of searchstring in sourcestring",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with count-entries, where every entry contains the position of searchstring in sourcestring",
    name = "POSITIONS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string, you want to search through",
    name = "SOURCESTRING",
   },
   [2] = {
    type = "STRING",
    desc = "the string, you want to search for in sourcestring",
    name = "SEARCHSTRING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, the search does not care about case-sensitivity; false, case of searchstring will be kept",
    name = "NON_CASE_SENSITIVE",
   },
  },
  sp_api = "ultraschall",
 },
 [560] = {
  fname = "OpenURL",
  label = "US_OpenURL",
  run = "in/out",
  desc = "Opens the URI with the standard-browser installed in your system.\
\
returns -1 in case of an error",
  out = {
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the url to be opened in the browser; will check for :// in it for validity!",
    name = "URL",
   },
  },
  sp_api = "ultraschall",
 },
 [561] = {
  fname = "CountEntriesInTable_Main",
  label = "US_CountEntriesInTable_Main",
  run = "in/out",
  desc = "Counts the number of entries in an indexed table.\
Will only count the entries from the main-table, not it's subtables. If you want to know the number of subtables, this function returns a table that includes all subtables found in the main-table,\
as well as the number of found subtables.\
\
Returns -1 if table isn't a valid table",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of entries in the table",
    name = "COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "if an entry of table has a table as value, that table-value will be included in this subtables-table(for recursive counting-usecases)",
    name = "SUBTABLES",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of entries in the subtables-table",
    name = "COUNT_OF_SUBTABLES",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "the table, whose entries you want to count",
    name = "TABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [562] = {
  fname = "CompareArrays",
  label = "US_CompareArrays",
  run = "in/out",
  desc = "Compares Array using parameter CompareArray2 and returns an array with all entries in CompareArray2, that are not in Array.\
The comparable arrays must be indexed by integer-numbers.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "an array with all entries from CompareArray2, that are not in Array",
    name = "DIFF_ARRAY",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "the reference-array",
    name = "ARRAY",
   },
   [2] = {
    type = "TABLE",
    desc = "the array you want to check against Array; all entries in CompareArray2 that are not in Array will be returned",
    name = "COMPAREARRAY2",
   },
  },
  sp_api = "ultraschall",
 },
 [563] = {
  fname = "GetOS",
  label = "US_GetOS",
  run = "in/out",
  desc = "Returns operating system and if it's a 64bit/32bit-operating system.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the operating system used; usually \"Win\", \"Mac\" or \"Other\"(e.g. when Linux is used)",
    name = "OPERATING_SYSTEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of bits of the operating-system. Either 32 or 64 bit.",
    name = "BITS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [564] = {
  fname = "IsOS_Windows",
  label = "US_IsOS_Windows",
  run = "in/out",
  desc = "returns, if the current operating system is windows",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the operating-system is windows; false if not",
    name = "IS_WINDOWS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of bits of the operating-system. Either 32 or 64 bit; nil if is_win==false",
    name = "BITS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [565] = {
  fname = "IsOS_Mac",
  label = "US_IsOS_Mac",
  run = "in/out",
  desc = "returns, if the current operating system is mac-osx",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the operating-system is mac-osx; false if not",
    name = "IS_MAC",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of bits of the operating-system. Either 32 or 64 bit.; nil if is_mac=false",
    name = "BITS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [566] = {
  fname = "IsOS_Other",
  label = "US_IsOS_Other",
  run = "in/out",
  desc = "returns, if the current operating system is neither mac or win",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the operating-system is neither mac or win; false if not",
    name = "IS_OTHER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of bits of the operating-system. Either 32 or 64 bit.; nil if is_other=false",
    name = "BITS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [567] = {
  fname = "GetReaperAppVersion",
  label = "US_GetReaperAppVersion",
  run = "in/out",
  desc = "Returns operating system and if it's a 64bit/32bit-operating system.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the majorversion of Reaper. Can be used for comparisions like \"if version<5 then ... end\".",
    name = "MAJORVERSION",
   },
   [2] = {
    type = "INTEGER",
    desc = "the subversion of Reaper. Can be used for comparisions like \"if subversion<96 then ... end\".",
    name = "SUBVERSION",
   },
   [3] = {
    type = "STRING",
    desc = "the number of bits of the reaper-app",
    name = "BITS",
   },
   [4] = {
    type = "STRING",
    desc = "the operating system, either \"Win\", \"OSX\" or \"Other\"",
    name = "OPERATING_SYSTEM",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, if it's a portable installation; false, if it isn't a portable installation",
    name = "PORTABLE",
   },
   [6] = {
    type = "STRING",
    desc = "if you use a pre-release of Reaper, this contains the beta-version, like \"rc9\" or \"+dev0423\" or \"pre6\"",
    opt = {
     use = false,
    },
    name = "BETAVERSION",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [568] = {
  fname = "LimitFractionOfFloat",
  label = "US_LimitFractionOfFloat",
  run = "in/out",
  desc = "limits the fraction of a float-number to a specific length of fraction(digits). You can also choose to round the value or not.\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the altered number with the new fraction-length. Will be equal to parameter number, if number was integer or fraction less digits than length_of_fraction",
    name = "ALTERED_NUMBER",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the number, whose fraction shall be limited",
    name = "NUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of digits in the fraction",
    name = "LENGTH_OF_FRACTION",
   },
  },
  sp_api = "ultraschall",
 },
 [569] = {
  fname = "GetAllEntriesFromTable",
  label = "US_GetAllEntriesFromTable",
  run = "in/out",
  desc = "Gets an iterable version of table. Good for analysing unknown tables.\
\
Returns the number of entries, a table(array) with the datatypes of each entry and the table with all it's entries in the same order as in the foundtypes-table.\
\
This doesn't treat table recursivley, means: each \"Subtable\" within the table is treated as one entry of the type \"table\". That means, that these tables must be analysed themselves in an extra step!\
A[1]=1\
A[2][1]=2\
A[2][2]=3.4\
will return two(!) entries, the first being of type \"integer\", the second being of type \"table\". Next step would be to run use this function to analyse A[2] as well, which would result in two entries: the first being of type \"integer\" and the second of type \"float\", etc.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of table-entries found",
    name = "COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "a table, with count-entries, each entry having the type of each entry in the returned_table as string.\
The types can be \"nil\", \"integer\", \"float\", \"string\", \"boolean\", \"table\", \"function\", \"thread\", \"userdata\"",
    name = "FOUNDTYPES",
   },
   [3] = {
    type = "TABLE",
    desc = "an iterable version of table. The type of each entry can be found in the accompanying entry of foundtypes\
the format is returned_table[indexnr][1] - indexname/number of the original table-entry\
              returned_table[indexnr][2] - the value of the original table-entry\
the indexnr is 1 to count, while [indexnr][1] is the indexnr of the original-table-entry, which might be a string, functionname or something else as well",
    name = "RETURNED_TABLE",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "the table to get the individual entries from",
    name = "TABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [570] = {
  fname = "APIExists",
  label = "US_APIExists",
  run = "in/out",
  desc = "returns true, if a certain function/variable exists in ultraschall.\
\
returns false if nothing has been found",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if element exists; false if it doesn't exist",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function to check for; only the functionname without ultraschall. !",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [571] = {
  fname = "IsValidGuid",
  label = "US_IsValidGuid",
  run = "in/out",
  desc = "Checks, if guid is a valid guid. Can also be used for strings, that contain a guid somewhere in them(strict=false)\
\
A valid guid is a string that follows the following pattern:\
{........-....-....-....-............}\
where . is a hexadecimal value(0-F)\
\
Returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, guid is/contains a valid guid; false, guid isn't/does not contain a valid guid",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the guid to check for validity",
    name = "GUID",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, guid must only be the valid guid; false, guid must contain a valid guid somewhere in it(means, can contain trailing or preceding characters)",
    name = "STRICT",
   },
  },
  sp_api = "ultraschall",
 },
 [572] = {
  fname = "SetBitfield",
  label = "US_SetBitfield",
  run = "in/out",
  desc = "Alters an integer-bitfield.\
\
Returns nil in case of error, like invalid bit-values",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the newly altered bitfield",
    name = "NEW_INTEGER_BITFIELD",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the old integer-bitfield that you want to alter",
    name = "INTEGER_BITFIELD",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, set the bits to 1; false, set the bits to 0; nil, toggle the bits",
    name = "SET_TO",
   },
   [3] = {
    type = "INTEGER",
    desc = "one or more parameters, that include the bitvalues toset/unset/toggle with 1 for the first bit; 2 for the second, 4 for the third, 8 for the fourth, etc",
    name = "BIT1..N",
   },
  },
  sp_api = "ultraschall",
 },
 [573] = {
  fname = "PreventCreatingUndoPoint",
  label = "US_PreventCreatingUndoPoint",
  run = "in/out",
  desc = "Prevents creation of an Undo-point. Only useful in non-defer-scripts.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [574] = {
  fname = "SetIntConfigVar_Bitfield",
  label = "US_SetIntConfigVar_Bitfield",
  run = "in/out",
  desc = "Alters an integer-bitfield stored by a ConfigVariable.\
\
Returns false in case of error, like invalid bit-values, etc",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if altering was successful; false, if not successful",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the newly altered bitfield",
    name = "NEW_INTEGER_BITFIELD",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the config-variable, that is stored as an integer-bitfield, that you want to alter.",
    name = "CONFIGVAR",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, set the bits to 1; false, set the bits to 0; nil, toggle the bits",
    name = "SET_TO",
   },
   [3] = {
    type = "INTEGER",
    desc = "one or more parameters, that include the bitvalues toset/unset/toggle with 1 for the first bit; 2 for the second, 4 for the third, 8 for the fourth, etc",
    name = "BIT1..N",
   },
  },
  sp_api = "ultraschall",
 },
 [575] = {
  fname = "MakeCopyOfTable",
  label = "US_MakeCopyOfTable",
  run = "in/out",
  desc = "Creates a true copy of a table(not only references).\
\
adapted from Tyler Neylon's function, found at [Stack Overflow](https://stackoverflow.com/questions/640642/how-do-you-copy-a-lua-table-by-value/26367080#26367080)\
\
Returns nil if table isn't a valid table",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the true copy of the table; nil in case of error",
    name = "TABLE_COPY",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "the table to create a copy from.",
    name = "TABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [576] = {
  fname = "ConvertStringToAscii_Array",
  label = "US_ConvertStringToAscii_Array",
  run = "in/out",
  desc = "Converts a string into it's individual characters and numerical-representation as a table and after that returns its number of table-entries and the table.\
\
Returns -1 if string isn't a valid string",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of characters in the string/entries in the returned table byte_array",
    name = "LENGTH",
   },
   [2] = {
    type = "TABLE",
    desc = "the ByteArray as a table, with the format\
    ByteArray[idx][1]=\"A\" -- the byte itself\
    ByteArray[idx][2]=65  -- the numerical representation of the byte",
    name = "BYTE_ARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string to be converted",
    name = "STRING",
   },
  },
  sp_api = "ultraschall",
 },
 [577] = {
  fname = "CompareStringWithAsciiValues",
  label = "US_CompareStringWithAsciiValues",
  run = "in/out",
  desc = "Compares a string with a number of byte-values(like ASCII-values).\
Bytevalues can be either decimal and hexadecimal.\
-1, if you want to skip checking of a specific position in string.\
\
Returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if check was successful; false, if not successful",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "if retval is false, this will contain the position in string, where the checking failed; nil, if retval is true",
    name = "ERRORPOSITION",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string to check against the bytevalues",
    name = "STRING",
   },
   [2] = {
    type = "INTEGER",
    desc = "one or more parameters, that include the bytevalues to check against the accompanying byte in string; -1, if you want to skip check for that position",
    name = "BYTEVALUE_1..N",
   },
  },
  sp_api = "ultraschall",
 },
 [578] = {
  fname = "ReturnsMinusOneInCaseOfError_Arzala",
  label = "US_ReturnsMinusOneInCaseOfError_Arzala",
  run = "in/out",
  desc = "Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "returns -1 in case of error",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [579] = {
  fname = "CountLinesInString",
  label = "US_CountLinesInString",
  run = "in/out",
  desc = "Counts the lines in a string. It counts them by counting \\n-newlines(not carriage returns!)\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of lines of the string",
    name = "NUMBER_OF_LINES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string to count the lines of",
    name = "STRING",
   },
  },
  sp_api = "ultraschall",
 },
 [580] = {
  fname = "ReturnTypeOfReaperObject",
  label = "US_ReturnTypeOfReaperObject",
  run = "in/out",
  desc = "returns the type of a Reaper-object.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the type of the parameter of object\
the following types can be returned: \
ReaProject, MediaTrack, MediaItem, MediaItem_Take, TrackEnvelope, PCM_source, None",
    name = "OBJECTTYPE",
   },
  },
  ins = {
   [1] = {
    type = "REAPEROBJECT",
    desc = "a Reaper-object of the following types:\
ReaProject, MediaTrack, MediaItem, MediaItem_Take, TrackEnvelope, PCM_source\
returns None if the object isn't a valid Reaper-object",
    name = "OBJECT",
   },
  },
  sp_api = "ultraschall",
 },
 [581] = {
  fname = "IsObjectValidReaperObject",
  label = "US_IsObjectValidReaperObject",
  run = "in/out",
  desc = "checks, if object is a valid Reaper-object. It also returns the type of that Reaper-object.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's a valid Reaper-object; false, if not",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the type of the parameter of object\
the following types can be returned: \
ReaProject, MediaTrack, MediaItem, MediaItem_Take, TrackEnvelope, PCM_source, None",
    name = "OBJECTTYPE",
   },
  },
  ins = {
   [1] = {
    type = "REAPEROBJECT",
    desc = "a Reaper-object of the following types:\
ReaProject, MediaTrack, MediaItem, MediaItem_Take, TrackEnvelope, PCM_source\
returns None if the object isn't a valid Reaper-object",
    name = "OBJECT",
   },
  },
  sp_api = "ultraschall",
 },
 [582] = {
  fname = "KeepTableEntriesOfType",
  label = "US_KeepTableEntriesOfType",
  run = "in/out",
  desc = "Removes all entries from worktable, that are not of the datatype as given by keeptype.\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the table, that contains only the entries of the type as given by parameter keeptype",
    name = "ALTEREDTABLE",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "the unaltered source-table for processing",
    name = "WORKTABLE",
   },
   [2] = {
    type = "STRING",
    desc = "the type that shall remain in table\
allowed are boolean, integer, float, number, table, string, userdata, thread, ReaProject, MediaTrack, MediaItem, MediaItem_Take, TrackEnvelope, PCM_source",
    name = "KEEPTYPE",
   },
  },
  sp_api = "ultraschall",
 },
 [583] = {
  fname = "RemoveTableEntriesOfType",
  label = "US_RemoveTableEntriesOfType",
  run = "in/out",
  desc = "Removes all entries from worktable, that are of the datatype as given by removetype.\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the table, that contains only the entries that are nt of the type as given by parameter removetype",
    name = "ALTEREDTABLE",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "the unaltered source-table for processing",
    name = "WORKTABLE",
   },
   [2] = {
    type = "STRING",
    desc = "the type that shall be removed from table\
allowed are boolean, integer, float, number, table, string, userdata, ReaProject, MediaTrack, MediaItem, MediaItem_Take, TrackEnvelope, PCM_source",
    name = "REMOVETYPE",
   },
  },
  sp_api = "ultraschall",
 },
 [584] = {
  fname = "IsItemInTrack3",
  label = "US_IsItemInTrack3",
  run = "in/out",
  desc = "Checks, whether a MediaItem is in any of the tracks, given by trackstring.\
\
see [IsItemInTrack](#IsItemInTrack) to use itemidx instead of the MediaItem-object.\
see [IsItemInTrack2](#IsItemInTrack2) to check against only one track.\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if item is in track; false, if not",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "a string with all tracknumbers, separated by commas; 1 for track 1, 2 for track 2, etc",
    name = "TRACKSTRING",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, of which you want to know the track is is placed in",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "a string with all tracknumbers, separated by commas; 1 for track 1, 2 for track 2, etc",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [585] = {
  fname = "AddIntToChar",
  label = "US_AddIntToChar",
  run = "in/out",
  desc = "Adds/subtracts int to/from the numeric representation of character. It will return the new character.\
It will not(!) include \"overflows\" into the adding/subtraction. That said, if you want to add a value resulting in a character above ASCII-code 255, it will fail!\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the new character, after parameter int has been added/subtracted from/to character",
    name = "NEW_CHARACTER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the character, onto which you want to add/subtract parameter int; only single character allowed",
    name = "CHARACTER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the value, that you want to add to the numerical representation of parameter character",
    name = "INT",
   },
  },
  sp_api = "ultraschall",
 },
 [586] = {
  fname = "MakeFunctionUndoable",
  label = "US_MakeFunctionUndoable",
  run = "in/out",
  desc = "Run the function Func and create an undopoint for this function. You can also give an UndoMessage and a flag for Reaper to use.\
All parameters needed by Func follow after parameter Flag, as if it would be the normal parameters.\
This should make creating undo-points much much easier...\
\
Note: Reaper will use the undo-point only for functions, who do \"undo\"-able things. If you don't have something of that kind(no creating a track or something), Reaper will not create an undo-point.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, undoing was successful; false, undoing wasn't successful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the current UndoMessage for the last action done by Reaper. Use this so see, if getting an undo-point was successful",
    name = "CURRENT_UNDOMESSAGE",
   },
   [3] = {
    type = "RETVALS_1 ...",
    desc = "the returnvalues, as returned by function Func",
    name = "RETVALS_2",
   },
  },
  ins = {
   [1] = {
    type = "FUNCTION",
    desc = "the function, that you want to create an undo-point for",
    name = "FUNC",
   },
   [2] = {
    type = "STRING",
    desc = "the undo-message to be displayed by Reaper in the Undo-history",
    name = "UNDOMESSAGE",
   },
   [3] = {
    type = "INTEGER",
    desc = "you can set a flag, if you want, for this undo-point",
    name = "FLAG",
   },
   [4] = {
    type = "FUNC_PARAMETERS_1,  ...",
    desc = "the parameters, as needed by the function Func; will be given to Func as provided by you",
    name = "FUNC_PARAMETERS_N",
   },
  },
  sp_api = "ultraschall",
 },
 [587] = {
  fname = "ReturnTableAsIndividualValues",
  label = "US_ReturnTableAsIndividualValues",
  run = "in/out",
  desc = "Returns the first 64 entries of an numerical-indexed table as returnvalues",
  out = {
   [1] = {
    type = "RETVAL1 ...",
    desc = "the values from Table returned",
    name = "RETVAL64",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "the table, whose values you want to return. It will only return values with index 1...64!",
    name = "TABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [588] = {
  fname = "type",
  label = "US_type",
  run = "in/out",
  desc = "Returns the type of the object.\
Supported types are Lua's own datatypes as well as Reaper's own datatypes.\
\
Due API-limitations, SWS-specific datatypes are not supported in this function!",
  out = {
   [1] = {
    type = "STRING",
    desc = "the type of the object; the following are valid:\
nil, number: integer, number: float, boolean, string, function, table, thread, userdata, \
ReaProject, MediaItem, MediaItem_Take, MediaTrack, TrackEnvelope, AudioAccessor, joystick_device, PCM_source\
userdata will be shown, if object isn't of any known type",
    name = "TYPE_OF_OBJECT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if object is a number(either integer or number)",
    opt = {
     use = false,
    },
    name = "ISNUMBER",
   },
  },
  ins = {
   [1] = {
    type = "IDENTIFIER",
    desc = "the object, whose type you want to know",
    name = "OBJECT",
   },
  },
  sp_api = "ultraschall",
 },
 [589] = {
  fname = "ConcatIntegerIndexedTables",
  label = "US_ConcatIntegerIndexedTables",
  run = "in/out",
  desc = "Concatenates the entries of two tables into one table. The entries of each table must be indexed by integers\
\
The new table still has the same references as the old table, means: if you remove the old tables/entries in the old tables, the concatenated table/accompanying entries will loose elements.\
To get a \"true\"-concatenated copy, you should first create new copies of the tables, using [MakeCopyOfTable](#MakeCopyOfTable).",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of entries in the new table",
    name = "NUMENTRIES",
   },
   [2] = {
    type = "ARRAY",
    desc = "the new concatenated table",
    name = "CONCATENATED_TABLE",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "the first table to be concatenated; the entries must be indexed by integer-numbers!",
    name = "TABLE1",
   },
   [2] = {
    type = "ARRAY",
    desc = "the second table to be concatenated; the entries must be indexed by integer-numbers!",
    name = "TABLE2",
   },
  },
  sp_api = "ultraschall",
 },
 [590] = {
  fname = "ReverseTable",
  label = "US_ReverseTable",
  run = "in/out",
  desc = "reversed the order of the entries of a table, means, the last entry will become the first, the first become the last, etc.\
The table must be indexed by integers.\
\
Returns nil if table isn't a valid table",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the resulting table with the reversed order of all entries",
    name = "REVERSED_TABLE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of entries in the reversed_table",
    name = "ENTRY_COUNT",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "the table, whose entries you want to reverse",
    name = "TABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [591] = {
  fname = "GetDuplicatesFromArrays",
  label = "US_GetDuplicatesFromArrays",
  run = "in/out",
  desc = "Returns the duplicates and the originals(entries only in one of the arrays) of two arrays. It will also return the number of entries.\
\
This works only on arrays with integer-indexed entries; index must start with index 1!\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of entries in both arrays",
    name = "DUPLICATE_COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the entries in both arrays",
    name = "DUPLICATE_ARRAY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of entries only in array1",
    name = "ORIGINALSCOUNT_ARRAY1",
   },
   [4] = {
    type = "ARRAY",
    desc = "the entries that are only existing in array1",
    name = "ORIGINALS_ARRAY1",
   },
   [5] = {
    type = "INTEGER",
    desc = "the number of entries only in array2",
    name = "ORIGINALSCOUNT_ARRAY2",
   },
   [6] = {
    type = "ARRAY",
    desc = "the entries that are only existing in array2",
    name = "ORIGINALS_ARRAY2",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "the first array to check for duplicates and \"original\"-entries",
    name = "ARRAY1",
   },
   [2] = {
    type = "ARRAY",
    desc = "the second array to check for duplicates and \"original\"-entries",
    name = "ARRAY2",
   },
  },
  sp_api = "ultraschall",
 },
 [592] = {
  fname = "GetScriptFilenameFromActionCommandID",
  label = "US_GetScriptFilenameFromActionCommandID",
  run = "in/out",
  desc = "returns the filename with path of a script, associated to a ReaScript.\
Command-ID-numbers do not work!\
                        \
returns false in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the scriptfilename with path associated with this ActionCommandID",
    name = "SCRIPTFILENAME_WITH_PATH",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the path to set as new current working directory",
    name = "PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [593] = {
  fname = "CombineBytesToInteger",
  label = "US_CombineBytesToInteger",
  run = "in/out",
  desc = "Combines the Byte-values Byte_1 to Byte_n into one integer.\
That means, if you give 4 values, it will return a 32bit-integer(4*8Bits).\
\
Negative values will use the maximum possible value of that byte minus the bits. \
In Byte_1, -2 will be 255-1=254, in Byte 2, -2 will be 65280-256=65024.\
\
Use bitoffset to define, from which bit on you want to combine the values.\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the combined integer",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "if you want to start combining the values from a certain bitoffset-onwards, set the offset here; use 0 to start with the first bit.",
    name = "BITOFFSET",
   },
   [2] = {
    type = "INTEGER",
    desc = "a bytevalue that you want to combine into one",
    name = "BYTE_1",
   },
   [3] = {
    type = "INTEGER",
    desc = "a bytevalue that you want to combine into one",
    opt = {
     use = false,
    },
    name = "BYTE_2",
   },
   [4] = {
    type = "INTEGER",
    desc = "a bytevalue that you want to combine into one",
    opt = {
     use = false,
    },
    name = "BYTE_N",
   },
  },
  sp_api = "ultraschall",
 },
 [594] = {
  fname = "SplitIntegerIntoBytes",
  label = "US_SplitIntegerIntoBytes",
  run = "in/out",
  desc = "Splits a 32-bit-integer-value into four bytes.\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the first eight bits of the integer-value as a Byte",
    name = "BYTE1",
   },
   [2] = {
    type = "INTEGER",
    desc = "the second eight bits of the integer-value as a Byte",
    name = "BYTE2",
   },
   [3] = {
    type = "INTEGER",
    desc = "the third eight bits of the integer-value as a Byte",
    name = "BYTE3",
   },
   [4] = {
    type = "INTEGER",
    desc = "the fourth eight bits of the integer-value as a Byte",
    name = "BYTE4",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the integer-value that you want to split into individual bytes",
    name = "INTEGEROFFSET",
   },
  },
  sp_api = "ultraschall",
 },
 [595] = {
  fname = "GetReaperScriptPath",
  label = "US_GetReaperScriptPath",
  run = "in/out",
  desc = "Returns path to Reaper's script-folder",
  out = {
   [1] = {
    type = "STRING",
    desc = "the path of the scripts-folder of Reaper",
    name = "REAPER_SCRIPT_PATH",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [596] = {
  fname = "GetReaperColorThemesPath",
  label = "US_GetReaperColorThemesPath",
  run = "in/out",
  desc = "Returns path to Reaper's color-theme-folder",
  out = {
   [1] = {
    type = "STRING",
    desc = "the path of the color-theme-folder of Reaper",
    name = "REAPER_COLORTHEMES_PATH",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [597] = {
  fname = "GetReaperJSFXPath",
  label = "US_GetReaperJSFXPath",
  run = "in/out",
  desc = "Returns path to Reaper's JSFX-plugin-folder",
  out = {
   [1] = {
    type = "STRING",
    desc = "the path of the JSFX-plugin-folder of Reaper",
    name = "REAPER_JSFX_PATH",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [598] = {
  fname = "GetReaperWebRCPath",
  label = "US_GetReaperWebRCPath",
  run = "in/out",
  desc = "Returns path to the Web-RC-folder for Reaper as well as for the user-webrc-pages.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the path of the JSFX-plugin-folder of Reaper",
    name = "REAPER_SCRIPT_PATH",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [599] = {
  fname = "CycleTable",
  label = "US_CycleTable",
  run = "in/out",
  desc = "Cycles the entries by offset. Offset can be positive(cycle forward) or negative(cycle negative). The number also tells the function, by how many entries the table shall be cycled, with 1 for one entry, 2 for 2 entries, etc.\
Entries \"falling out\" of one side(top or bottom) of the table will be readded on the other side.\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the altered table",
    name = "NEW_TABLE",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "the table to cycle through",
    name = "THE_TABLE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the offset, by which to cycle the entries through; positive, cycle entries forward; negative, cycle entries backward",
    name = "OFFSET",
   },
  },
  sp_api = "ultraschall",
 },
 [600] = {
  fname = "SplitStringAtNULLBytes",
  label = "US_SplitStringAtNULLBytes",
  run = "in/out",
  desc = "Splits splitstring into individual string at NULL-Bytes.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found strings",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the found strings put into an array",
    name = "SPLIT_STRINGS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string with NULL-Bytes(\\0) into it, that you want to split",
    name = "SPLITSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [601] = {
  fname = "RunBackgroundHelperFeatures",
  label = "US_RunBackgroundHelperFeatures",
  run = "in/out",
  desc = "Deprecated\
\
Starts background-scripts supplied with the Ultraschall-API, like:  \
\
  - a script for getting the last edit-cursor-position before the current one -> [GetLastCursorPosition()](#GetLastCursorPosition)\
  - a script for getting the last playstate before the current one -> [GetLastPlayState()](#GetLastPlayState)\
  - a script for getting the last loopstate before the current one -> [GetLastLoopState()](#GetLastLoopState)",
  out = {
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, start the background-scripts/start unstarted background-helper-scripts; false, stop all background-helper-scripts",
    name = "SWITCH_ON",
   },
  },
  sp_api = "ultraschall",
 },
 [602] = {
  fname = "Main_OnCommandByFilename",
  label = "US_Main_OnCommandByFilename",
  run = "in/out",
  desc = "Runs a command by a filename. It internally registers the file temporarily as command, runs it and unregisters it again.\
This is especially helpful, when you want to run a command for sure without possible command-id-number-problems.\
\
It returns a unique script-identifier for this script, which can be used to communicate with this script-instance.\
The started script gets its script-identifier using [GetScriptIdentifier](#GetScriptIdentifier).\
You can use this script-identifier e.g. as extstate.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if running it was successful; false, if not",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "a unique script-identifier, which can be used as extstate to communicate with the started scriptinstance",
    name = "SCRIPT_IDENTIFIER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name and path of the scriptfile to run",
    name = "FILENAME",
   },
   [2] = {
    type = "STRING",
    desc = "parameters that shall be passed over to the script",
    name = "...",
   },
  },
  sp_api = "ultraschall",
 },
 [603] = {
  fname = "MIDI_OnCommandByFilename",
  label = "US_MIDI_OnCommandByFilename",
  run = "in/out",
  desc = "Runs a command by a filename in the MIDI-editor-context. It internally registers the file temporarily as command, runs it and unregisters it again.\
This is especially helpful, when you want to run a command for sure without possible command-id-number-problems.\
\
It returns a unique script-identifier for this script, which can be used to communicate with this script-instance.\
The started script gets its script-identifier using [GetScriptIdentifier](#GetScriptIdentifier).\
You can use this script-identifier e.g. as extstate.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if running it was successful; false, if not",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "a unique script-identifier, which can be used as extstate to communicate with the started scriptinstance",
    name = "SCRIPT_IDENTIFIER",
   },
  },
  ins = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the MIDI-editor, in which to run the script; nil, for the last active MIDI-editor",
    name = "MIDI_EDITORHWND",
   },
   [2] = {
    type = "STRING",
    desc = "the name plus path of the scriptfile to run",
    name = "FILENAME",
   },
   [3] = {
    type = "STRING",
    desc = "parameters, that shall be passed over to the script",
    name = "...",
   },
  },
  sp_api = "ultraschall",
 },
 [604] = {
  fname = "GetScriptParameters",
  label = "US_GetScriptParameters",
  run = "in/out",
  desc = "Gets the parameters stored for a specific script_identifier.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of parameters available",
    name = "NUM_PARAMS",
   },
   [2] = {
    type = "ARRAY",
    desc = "the values of the parameters as an array",
    name = "PARAMS",
   },
   [3] = {
    type = "STRING",
    desc = "the scriptidentifier of the script, that set the parameters",
    name = "CALLER_SCRIPT_IDENTIFIER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the script-identifier, whose parameters you want to retrieve; \
use nil, to get the parameters stored for the current script",
    opt = {
     use = false,
    },
    name = "SCRIPT_IDENTIFIER",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true or nil, remove the stored parameter-extstates; false, keep them for later retrieval",
    opt = {
     use = false,
    },
    name = "REMOVE",
   },
  },
  sp_api = "ultraschall",
 },
 [605] = {
  fname = "SetScriptParameters",
  label = "US_SetScriptParameters",
  run = "in/out",
  desc = "Sets the parameters stored for a specific script_identifier.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, storing was successful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the script_identifier, whose parameters have been set",
    name = "SCRIPT_IDENTIFIER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the script-identifier, whose parameters you want to retrieve; \
use nil, to set the parameters stored for the current script",
    name = "SCRIPT_IDENTIFIER",
   },
   [2] = {
    type = "STRING",
    desc = "the parameters you want to set; there can be more than one, but they must be strings",
    name = "...",
   },
  },
  sp_api = "ultraschall",
 },
 [606] = {
  fname = "GetScriptReturnvalues",
  label = "US_GetScriptReturnvalues",
  run = "in/out",
  desc = "Gets the return-values which a specific sender\\_script\\_identifier sent to the current script.\
\
If you have started numerous child-scripts and want to know, which child-script sent you return-values, see [GetScriptReturnvalues_Sender](#GetScriptReturnvalues_Sender)\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of return-values available",
    name = "NUM_RETVALS",
   },
   [2] = {
    type = "ARRAY",
    desc = "the values of the return-values as an array",
    name = "PARAMS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the script-identifier, that sent the return-values to your script",
    name = "SENDER_SCRIPT_IDENTIFIER",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true or nil, remove the stored retval-extstates; false, keep them for later retrieval",
    opt = {
     use = false,
    },
    name = "REMOVE",
   },
  },
  sp_api = "ultraschall",
 },
 [607] = {
  fname = "SetScriptReturnvalues",
  label = "US_SetScriptReturnvalues",
  run = "in/out",
  desc = "Send return-values back to the script, that has a specific script_identifier.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, storing was successful; false, there was an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the script-identifier of the script-instance, to where you want to send the returnvalues ",
    name = "SCRIPT_IDENTIFIER",
   },
   [2] = {
    type = "STRING",
    desc = "the returnvalues you want to set; there can be more than one, but they must be strings",
    name = "...",
   },
  },
  sp_api = "ultraschall",
 },
 [608] = {
  fname = "GetScriptReturnvalues_Sender",
  label = "US_GetScriptReturnvalues_Sender",
  run = "in/out",
  desc = "Retrieves, which scripts sent returnvalues to the current script.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of scripts, who have left returnvalues for the current script",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the ScriptIdentifier of the scripts, who returned values",
    name = "RETVAL_SENDER",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [609] = {
  fname = "Base64_Encoder",
  label = "US_Base64_Encoder",
  run = "in/out",
  desc = "Converts a string into a Base64-Encoded string. \
Currently, only standard Base64-encoding is supported.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the encoded string",
    name = "ENCODED_STRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string that you want to convert into Base64",
    name = "SOURCE_STRING",
   },
   [2] = {
    type = "INTEGER",
    desc = "the Base64-decoding-style\
nil or 0, for standard default Base64-encoding",
    opt = {
     use = false,
    },
    name = "BASE64_TYPE",
   },
   [3] = {
    type = "INTEGER",
    desc = "1, removes \\n-newlines(including \\r-carriage return) from the string\
2, replaces \\n-newlines(including \\r-carriage return) from the string with a single space",
    opt = {
     use = false,
    },
    name = "REMOVE_NEWLINES",
   },
   [4] = {
    type = "INTEGER",
    desc = "1, removes \\t-tabs from the string\
2, replaces \\t-tabs from the string with a single space",
    opt = {
     use = false,
    },
    name = "REMOVE_TABS",
   },
  },
  sp_api = "ultraschall",
 },
 [610] = {
  fname = "Base64_Decoder",
  label = "US_Base64_Decoder",
  run = "in/out",
  desc = "Converts a Base64-encoded string into a normal string. \
Currently, only standard Base64-encoding is supported.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the decoded string",
    name = "DECODED_STRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the Base64-encoded string",
    name = "SOURCE_STRING",
   },
   [2] = {
    type = "INTEGER",
    desc = "the Base64-decoding-style\
nil or 0, for standard default Base64-encoding",
    opt = {
     use = false,
    },
    name = "BASE64_TYPE",
   },
  },
  sp_api = "ultraschall",
 },
 [611] = {
  fname = "StateChunkLayouter",
  label = "US_StateChunkLayouter",
  run = "in/out",
  desc = "Layouts StateChunks as returned by <a href=\"Reaper_Api_Documentation.html#GetTrackStateChunk\">GetTrackStateChunk</a> or <a href=\"Reaper_Api_Documentation.html#GetItemStateChunk\">GetItemStateChunk</a> into a format that resembles the formatting-rules of an rpp-file.\
This is very helpful, when parsing such a statechunk, as you can now use the number of spaces used for intendation as help parsing.\
Usually, every new element, that starts with < will be followed by none or more lines, that have two spaces added in the beginning.\
Example of a MediaItemStateChunk(I use . to display the needed spaces in the beginning of each line):\
<pre><code>\
<ITEM\
..POSITION 6.96537864205337\
..SNAPOFFS 0\
..LENGTH 1745.2745\
..LOOP 0\
..ALLTAKES 0\
..FADEIN 1 0.01 0 1 0 0\
..FADEOUT 1 0.01 0 1 0 0\
..MUTE 0\
..SEL 1\
..IGUID {020E6372-97E6-4066-9010-B044F67F2772}\
..IID 1\
..NAME myaudio.flac\
..VOLPAN 1 0 1 -1\
..SOFFS 0\
..PLAYRATE 1 1 0 -1 0 0.0025\
..CHANMODE 0\
..GUID {79F087CE-49E8-4212-91F5-8487FBCF10B1}\
..<SOURCE FLAC\
....FILE \"C:\\Users\\IncredibleSupergirl\\Desktop\\X_audiofile.flac\"\
..>\
>\
</code></pre>\
\
This function will not check, if you've passed a valid statechunk!\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk, that is now layouted to the rules of rpp-projectfiles",
    name = "LAYOUTED_STATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a statechunk, that you want to layout properly",
    name = "STATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [612] = {
  fname = "ReverseEndianess_Byte",
  label = "US_ReverseEndianess_Byte",
  run = "in/out",
  desc = "reverses the endianess of a byte and returns this as value.\
The parameter byte must be between 0 and 255!\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the endianess-reversed byte",
    name = "NEWBYTE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the integer whose endianess you want to reverse",
    name = "BYTE",
   },
  },
  sp_api = "ultraschall",
 },
 [613] = {
  fname = "ConvertIntegerToBits",
  label = "US_ConvertIntegerToBits",
  run = "in/out",
  desc = "converts an integer-value(up to 64 bits) into it's individual bits and returns it as comma-separated csv-string as well as a table with 64 entries.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "a comma-separated csv-string of all bitvalues, with bit 1 coming first and bit 32 coming last",
    name = "BITVALS_CSV",
   },
   [2] = {
    type = "TABLE",
    desc = "a 64-entry table, where each entry contains the bit-value of integer; first entry for bit 1, 64th entry for bit 64",
    name = "BITVALUES",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the integer-number to separated into it's individual bits",
    name = "INTEGER",
   },
  },
  sp_api = "ultraschall",
 },
 [614] = {
  fname = "ConvertBitsToInteger",
  label = "US_ConvertBitsToInteger",
  run = "in/out",
  desc = "converts a table with all bitvalues into it's integer-representation.\
each table-entry holds either a 1 or a 0; \
  with index 1 being the first (for 1), \
  index 2 for the second (for 2),\
  index 3 for the third (for 4),\
  index 4 for the fourth(for 8), etc\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the integer-number converted from the integer-entries",
    name = "INTEGER",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "a table, where each entry contains the bit-value of integer; first entry for bit 1, 64th entry for bit 64, etc",
    name = "BITVALUES",
   },
  },
  sp_api = "ultraschall",
 },
 [615] = {
  fname = "GetSetIntConfigVar",
  label = "US_GetSetIntConfigVar",
  run = "in/out",
  desc = "Gets/Sets an integer-bitfield of an integer-configvariable.\
\
Pass to it a varname, if it shall be set or gotten from and up to 32 parameters who specify, if that bit shall be set(true) or not(false) or the currently set value shall be used(nil)\
\
See <a href=\"Reaper_Config_Variables.html\">Reaper_Config_Variables.html</a> for more details on config-variables in Reaper.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, getting/setting the config-var was successful; false, it wasn't successful",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new/current value of the configuration-variable",
    name = "CONFIG_VAR_VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the config-variable",
    name = "VARNAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, set this config-var; false, don't set it",
    name = "SET",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, set this bit; false, don't set this bit; nil, use the currently set value",
    opt = {
     use = false,
    },
    name = "BIT1",
   },
   [4] = {
    type = "...",
    desc = "true, set this bit; false, don't set this bit; nil, use the currently set value",
    name = "RETVAL",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, set this bit; false, don't set this bit; nil, use the currently set value",
    opt = {
     use = false,
    },
    name = "BIT32",
   },
  },
  sp_api = "ultraschall",
 },
 [616] = {
  fname = "GetScriptIdentifier",
  label = "US_GetScriptIdentifier",
  run = "in/out",
  desc = "The Ultraschall-API gives any script, that uses the API, a unique identifier generated when the script is run.\
This identifier can be used to communicate with this script. If you start numerous instances of a script, it will create for each instance\
its own script-identifier, so you can be sure, that you communicate with the right instance.\
\
The identifier is of the format \"ScriptIdentifier:scriptfilename-{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}.ext\", where the {}-part is a guid and ext either .lua .py or .eel",
  out = {
   [1] = {
    type = "STRING",
    desc = "a unique script-identifier for this script-instance, of the format:\
ScriptIdentifier: scriptfilename-guid",
    name = "SCRIPT_IDENTIFIER",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [617] = {
  fname = "ReplacePartOfString",
  label = "US_ReplacePartOfString",
  run = "in/out",
  desc = "replaces a part of a string with a second string\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered string",
    name = "REPLACED_STRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the originalstring, in which you want to insert the string",
    name = "ORIGINALSTRING",
   },
   [2] = {
    type = "STRING",
    desc = "the string that shall be inserted",
    name = "INSERTSTRING",
   },
   [3] = {
    type = "INTEGER",
    desc = "the position, at which to insert the string; it is the position BEFORE the position at which to insert, so if you want to replace the 25th character, offset is 24!",
    name = "OFFSET",
   },
   [4] = {
    type = "INTEGER",
    desc = "the length of the part of the originalstring that shall be replaced, counted from offset. 0 or nil for simple insertion.",
    opt = {
     use = false,
    },
    name = "LENGTH",
   },
  },
  sp_api = "ultraschall",
 },
 [618] = {
  fname = "SearchStringInString",
  label = "US_SearchStringInString",
  run = "in/out",
  desc = "Searches for the string searchstring in fullstring. \
\
Keep in mind: Umlauts may produce multibyte-values. Therefore, the returned offsets might be confusing.\
\
returns -1 in case of error, 0 if string wasn't found",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found occurences of searchstring in fullstring",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array that contains the positions, where searchstring was found within fullstring",
    name = "POSARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string to be searched through",
    name = "FULLSTRING",
   },
   [2] = {
    type = "STRING",
    desc = "the string to search for within fullstring",
    name = "SEARCHSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [619] = {
  fname = "MKVOL2DB",
  label = "US_MKVOL2DB",
  run = "in/out",
  desc = "Converts an MKVOL-value into a dB-value.\
\
MKVOL-values are used by the routing-functions for HWOut/AUXSendReceive, specifically for their volume-value as these can't be converted using Reaper's own DB2SLIDER or SLIDER2DB, so this function should help you.\
\
This function is an adapted one from the function provided in Plugins/reaper\\_www\\_root/main.js\
\
See [DB2MKVOL](#DB2MKVOL) to convert a dB-value into it's MKVOL-representation\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the dB-value, converted from the MKVOL-value; minimum -144dB",
    name = "DB_VALUE",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the mkvol_value, that you want to convert into dB",
    name = "MKVOL_VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [620] = {
  fname = "DB2MKVOL",
  label = "US_DB2MKVOL",
  run = "in/out",
  desc = "Converts an dB-value into a MKVOL-value.\
\
MKVOL-values are used by the routing-functions for HWOut/AUXSendReceive, specifically for their volume-value as these can't be converted using Reaper's own DB2SLIDER or SLIDER2DB, so this function should help you.\
\
See [MKVOL2DB](#MKVOL2DB) to convert a MKVOL-value into it's dB-representation\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the mkvol-value, converted from the dB-value",
    name = "MKVOL_VALUE",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the dB-value, that you want to convert into the MKVOL-value; minimum is -144dB",
    name = "DB_VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [621] = {
  fname = "ConvertIntegerIntoString2",
  label = "US_ConvertIntegerIntoString2",
  run = "in/out",
  desc = "Splits numerous integers into its individual bytes and converts them into a string-representation.\
Maximum 32bit-integers are supported.\
\
Returns nil in case of an error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the string-representation of the integer",
    name = "CONVERTED_VALUE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the maximum size of the integer to convert, 1(8 bit) to 4(32 bit)",
    name = "SIZE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the first integer value to convert from",
    name = "INTEGERVALUE_1",
   },
   [3] = {
    type = "...",
    desc = "",
    name = "RETVAL",
   },
   [4] = {
    type = "INTEGER",
    desc = "the last integer value to convert from",
    name = "INTEGERVALUE_N",
   },
  },
  sp_api = "ultraschall",
 },
 [622] = {
  fname = "ConvertStringToIntegers",
  label = "US_ConvertStringToIntegers",
  run = "in/out",
  desc = "Converts a string into its integer-representation. Allows you to set the size of the integers between 1 Byte and 8 Bytes(64 bits).\
\
Returns -1 in case of an error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of integers converted from this string",
    name = "NUM_INTEGERS",
   },
   [2] = {
    type = "ARRAY",
    desc = "the individual integers, as converted from the original string",
    name = "INDIVIDUAL_INTEGERS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string to convert into its integer representation",
    name = "STRING",
   },
   [2] = {
    type = "INTEGER",
    desc = "the size of the integers. 1 for 8 bits, 2 for 16 bits, ..., 8 for 64 bits",
    name = "SIZE",
   },
  },
  sp_api = "ultraschall",
 },
 [623] = {
  fname = "SetScriptIdentifier_Description",
  label = "US_SetScriptIdentifier_Description",
  run = "in/out",
  desc = "The Ultraschall-API gives any script, that uses the API, a unique identifier generated when the script is run.\
This identifier can be used to communicate with this script. If you start numerous instances of a script, it will create for each instance\
its own script-identifier, so you can be sure, that you communicate with the right instance.\
\
With this function, you can set its description, that is less cryptic than the ScriptIdentifier itself.\
\
You can get it using [GetScriptIdentifier_Description](#GetScriptIdentifier_Description).\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the new description of your script",
    name = "DESCRIPTION",
   },
  },
  sp_api = "ultraschall",
 },
 [624] = {
  fname = "GetScriptIdentifier_Description",
  label = "US_GetScriptIdentifier_Description",
  run = "in/out",
  desc = "The Ultraschall-API gives any script, that uses the API, a unique identifier generated when the script is run.\
This identifier can be used to communicate with this script. If you start numerous instances of a script, it will create for each instance\
its own script-identifier, so you can be sure, that you communicate with the right instance.\
\
With this function, you can get its description, that is less cryptic than the ScriptIdentifier itself.\
\
You can set it using [SetScriptIdentifier_Description](#SetScriptIdentifier_Description).",
  out = {
   [1] = {
    type = "STRING",
    desc = "the description of your script",
    name = "SCRIPT_IDENTIFIER_DESCRIPTION",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [625] = {
  fname = "SetScriptIdentifier_Title",
  label = "US_SetScriptIdentifier_Title",
  run = "in/out",
  desc = "The Ultraschall-API gives any script, that uses the API, a unique identifier generated when the script is run.\
This identifier can be used to communicate with this script. If you start numerous instances of a script, it will create for each instance\
its own script-identifier, so you can be sure, that you communicate with the right instance.\
\
With this function, you can set its title, that is less cryptic than the ScriptIdentifier itself.\
No \\n-newlines, \\r-carriage returns or \\0-nullbytes are allowed and will be removed\
\
You can get it using [GetScriptIdentifier\\_Title](#GetScriptIdentifier_Title).\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the new title of your script",
    name = "TITLE",
   },
  },
  sp_api = "ultraschall",
 },
 [626] = {
  fname = "GetScriptIdentifier_Title",
  label = "US_GetScriptIdentifier_Title",
  run = "in/out",
  desc = "The Ultraschall-API gives any script, that uses the API, a unique identifier generated when the script is run.\
This identifier can be used to communicate with this script. If you start numerous instances of a script, it will create for each instance\
its own script-identifier, so you can be sure, that you communicate with the right instance.\
\
With this function, you can get its description, that is less cryptic than the ScriptIdentifier itself.\
\
Default is the script's filename.\
\
You can set it using [SetScriptIdentifier\\_Title](#SetScriptIdentifier_Title).",
  out = {
   [1] = {
    type = "STRING",
    desc = "the title of your script; default is the filename of the script",
    name = "SCRIPT_IDENTIFIER_TITLE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [627] = {
  fname = "ResetProgressBar",
  label = "US_ResetProgressBar",
  run = "in/out",
  desc = "Resets the initial-values of the progressbar. Should be called, if you want to start a new progressbar after you filled up the former one, or you may have update-issues.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [628] = {
  fname = "PrintProgressBar",
  label = "US_PrintProgressBar",
  run = "in/out",
  desc = "Calculate a simple progressbar, which can be optionally displayed in the ReaScript console; Will clear the console before displaying the next updated progressbar.\
\
Will update it only, if the current-value of last time this function got called is different from the current one or toptext or bottomtext changed.\
\
You can also use the returnvalues to draw your own progressbar, e.g. in a gfx.init-window\
\
If you need to calculate a new progressbar, after the former got to 100%, it is wise to call [ResetProgressBar](#ResetProgressBar), or it might not update the first time you call this function.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, displaying was successful; false, displaying wasn't successful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the progressbar including its full statuses and layout",
    name = "PROGRESSSTRING",
   },
   [3] = {
    type = "INTEGER",
    desc = "the progression of the progressbar in percent",
    name = "PERCENTAGE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the current progress-position, relative to length and maximumvalue",
    name = "PROGRESS_POSITION",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, show progressbar in the ReaScript-console; false, don't show it there",
    name = "SHOW",
   },
   [2] = {
    type = "INTEGER",
    desc = "the length of the progressbar in characters. Minimum is 10.",
    name = "LENGTH",
   },
   [3] = {
    type = "INTEGER",
    desc = "the maximum integer-value, to which to count; minimum 1",
    name = "MAXIMUMVALUE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the current integer-value, at which we are with counting, minimum 0",
    name = "CURRENTVALUE",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, show percentage in progressbar; false, show only progressbar",
    name = "PERCENTAGE",
   },
   [6] = {
    type = "INTEGER",
    desc = "an offset to be added before the progressbar, so you can indent it",
    name = "OFFSET",
   },
   [7] = {
    type = "STRING",
    desc = "an optional string, that shall be displayed above the progressbar",
    opt = {
     use = false,
    },
    name = "TOPTEXT",
   },
   [8] = {
    type = "STRING",
    desc = "an optional string, that shall be displayed below the progressbar",
    opt = {
     use = false,
    },
    name = "BOTTOMTEXT",
   },
  },
  sp_api = "ultraschall",
 },
 [629] = {
  fname = "StoreFunctionInExtState",
  label = "US_StoreFunctionInExtState",
  run = "in/out",
  desc = "Stores a function into an extstate. You can store it's debug-information as well.\
\
To load the function again, use [LoadFunctionFromExtState](#LoadFunctionFromExtState)\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the sectionname of the extstate",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "the keyname of the extstate",
    name = "KEY",
   },
   [3] = {
    type = "FUNCTION",
    desc = "the function, that you want to store",
    name = "FUNC",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, store debug-values as well; false, don't store the debug-values as well",
    name = "DEBUG",
   },
  },
  sp_api = "ultraschall",
 },
 [630] = {
  fname = "LoadFunctionFromExtState",
  label = "US_LoadFunctionFromExtState",
  run = "in/out",
  desc = "Loads a function from an extstate, if it has been stored in there before.\
The extstate must contain a valid function. If something else is stored, the loaded \"function\" might crash Lua!\
\
To store the function, use [StoreFunctionInExtState](#StoreFunctionInExtState)\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "FUNCTION",
    desc = "the stored function, that you want to (re-)load",
    name = "FUNC",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the sectionname of the extstate",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "the keyname of the extstate",
    name = "KEY",
   },
  },
  sp_api = "ultraschall",
 },
 [631] = {
  fname = "ConvertHex2Ascii",
  label = "US_ConvertHex2Ascii",
  run = "in/out",
  desc = "converts a hexstring into an ascii-string.\
\
Will combine two hexvalues into one byte, until the whole string is converted.\
\
See [ConvertAscii2Hex](#ConvertAscii2Hex) to convert a string into its HEX-representation.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the converted string",
    name = "ASCII_STRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the original string with only hexadecimal numbers ",
    name = "HEXSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [632] = {
  fname = "ConvertAscii2Hex",
  label = "US_ConvertAscii2Hex",
  run = "in/out",
  desc = "converts an ascii-string into a hexstring.\
\
See [ConvertHex2Ascii](#ConvertHex2Ascii) to convert a HEX-string into its normal string-representation.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the original string with only hexadecimal numbers ",
    name = "HEXSTRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the converted string",
    name = "ASCII_STRING",
   },
  },
  sp_api = "ultraschall",
 },
 [633] = {
  fname = "get_action_context_MediaItemDiff",
  label = "US_get_action_context_MediaItemDiff",
  run = "in/out",
  desc = "Returns the currently clicked MediaItem, Take as well as the difference of position, end, length and startoffset since last time calling this function.\
Good for implementing ripple-drag/editing-functions, whose position depends on changes in the currently clicked MediaItem.\
Repeatedly call this (e.g. in a defer-cycle) to get all changes made, during dragging position, length or offset of the MediaItem underneath mousecursor.\
\
This function takes into account the size of the start/end-drag-mousecursor, that means: if mouse-position is within 3 pixels before start/after end of the item, it will get the correct MediaItem. \
This is a workaround, as the mouse-cursor changes to dragging and can still affect the MediaItem, even though the mouse at this position isn't above a MediaItem anymore.\
To be more strict, set exlude_mousecursorsize to true. That means, it will only detect MediaItems directly beneath the mousecursor. If the mouse isn't above a MediaItem, this function will ignore it, even if the mouse could still affect the MediaItem.\
If you don't understand, what that means: simply omit exlude_mousecursorsize, which should work in almost all use-cases. If it doesn't work as you want, try setting it to true and see, whether it works now.    ",
  out = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem at the current mouse-position; nil if not found",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "MEDIAITEM_TAKE",
    desc = "the MediaItem_Take underneath the mouse-cursor",
    name = "MEDIAITEM_TAKE",
   },
   [3] = {
    type = "MEDIAITEM",
    desc = "if the MediaItem isn't locked, you'll get a MediaItem here. If it is locked, this retval is nil",
    name = "MEDIAITEM_UNLOCKED",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, the item was moved; false, only a part(either start or end or offset) of the item was moved",
    name = "ITEM_MOVED",
   },
   [5] = {
    type = "NUMBER",
    desc = "if the start of the item changed, this is the difference;\
  positive, the start of the item has been changed towards the end of the project\
  negative, the start of the item has been changed towards the start of the project\
  0, no changes to the itemstart-position at all",
    name = "STARTDIFFTIME",
   },
   [6] = {
    type = "NUMBER",
    desc = "if the end of the item changed, this is the difference;\
  positive, the end of the item has been changed towards the end of the project\
  negative, the end of the item has been changed towards the start of the project\
  0, no changes to the itemend-position at all",
    name = "ENDDIFFTIME",
   },
   [7] = {
    type = "NUMBER",
    desc = "if the length of the item changed, this is the difference;\
  positive, the length is longer\
  negative, the length is shorter\
  0, no changes to the length of the item",
    name = "LENGTHDIFFTIME",
   },
   [8] = {
    type = "NUMBER",
    desc = "if the offset of the item-take has changed, this is the difference;\
  positive, the offset has been changed towards the start of the project\
  negative, the offset has been changed towards the end of the project\
  0, no changes to the offset of the item-take\
Note: this is the offset of the take underneath the mousecursor, which might not be the same size, as the MediaItem itself!\
So changes to the offset maybe changes within the MediaItem or the start of the MediaItem!\
This could be important, if you want to affect other items with rippling.",
    name = "OFFSETDIFFTIME",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "false or nil, get the item underneath, when it can be affected by the mouse-cursor(dragging etc): when in doubt, use this\
true, get the item underneath the mousecursor only, when mouse is strictly above the item,\
      which means: this ignores the item when mouse is not above it, even if the mouse could affect the item",
    opt = {
     use = false,
    },
    name = "EXLUDE_MOUSECURSORSIZE",
   },
   [2] = {
    type = "INTEGER",
    desc = "nil, use the current x-mouseposition; otherwise the x-position in pixels",
    opt = {
     use = false,
    },
    name = "X",
   },
   [3] = {
    type = "INTEGER",
    desc = "nil, use the current y-mouseposition; otherwise the y-position in pixels",
    opt = {
     use = false,
    },
    name = "Y",
   },
  },
  sp_api = "ultraschall",
 },
 [634] = {
  fname = "GetAllActions",
  label = "US_GetAllActions",
  run = "in/out",
  desc = "Returns all actions and accompanying attributes from a specific section as a handy table\
\
The table is of the following format:\
\
        actiontable[index][\"commandid\"]       - the command-id-number of the action  \
        actiontable[index][\"actioncommandid\"] - the action-command-id-string of the action, if it's a named \
                                                command(usually scripts or extensions), otherwise empty string  \
        actiontable[index][\"name\"]            - the name of command  \
        actiontable[index][\"scriptfilename\"]  - the filename+path of a command, that is a ReaScript, otherwise empty string  \
        actiontable[index][\"termination\"]     - the termination-state of the action  \
                                                  -1  - not available  \
                                                  4   - Dialogwindow appears(Terminate, New Instance, Abort), if another \
                                                        instance of a given script is started, that's already running  \
                                                  260 - always Terminate All(!) Instances, if you try to run another \
                                                        instance of a script, that's already running. When no instance is \
                                                        running, it simply starts the script.  \
                                                  516 - always start a New Instance of the script, that's already running  \
        actiontable[index][\"consolidate\"]     - the consolidate-state of custom actions; \
                                                    1 consolidate undo points, \
                                                    2 show in Actions-Menu, \
                                                    3 consolidate undo points AND show in Actions Menu\
                                                    -1, if not available  \
        actiontable[index][\"actiontype\"]      - the type of the action; \
                                                \"native action\", \"extension action\", \
                                                \"custom action\", \"script\"  \
 \
returns -1 in case of an error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of actions found; -1 in case of an error",
    name = "NUMBER_OF_ACTIONS",
   },
   [2] = {
    type = "TABLE",
    desc = "a table, which holds all attributes of an action(see description for more details)",
    name = "ACTIONTABLE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the section, whose actions you want to retrieve\
0, Main=0\
1, invisible actions(shown but not runnable actions)\
100, Main (alt recording)\
32060, MIDI Editor=32060\
32061, MIDI Event List Editor\
32062, MIDI Inline Editor\
32063, Media Explorer=32063",
    name = "SECTIONS",
   },
  },
  sp_api = "ultraschall",
 },
 [635] = {
  fname = "IsWithinTimeRange",
  label = "US_IsWithinTimeRange",
  run = "in/out",
  desc = "returns if time is between(including) start and stop.\
 \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, time is between start and stop; false, it isn't",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the time in seconds, to check for",
    name = "POINT_IN_TIME",
   },
   [2] = {
    type = "NUMBER",
    desc = "the starttime in seconds, within to check for",
    name = "START",
   },
   [3] = {
    type = "NUMBER",
    desc = "the endtime in seconds, within to check for",
    name = "STOP",
   },
  },
  sp_api = "ultraschall",
 },
 [636] = {
  fname = "MediaExplorer_OnCommand",
  label = "US_MediaExplorer_OnCommand",
  run = "in/out",
  desc = "runs a Media Explorer-associated action.\
Note: Can only run Reaper's native actions currently(all actions having a number as actioncommandid), not scripts!\
\
returns false if Media Explorer is closed",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, could update run the action in the Media Explorer; false, couldn't run it",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [637] = {
  fname = "UpdateMediaExplorer",
  label = "US_UpdateMediaExplorer",
  run = "in/out",
  desc = "updates the listview of the Media Explorer.\
\
returns false if Media Explorer is closed",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, could update the listview of the Media Explorer; false, couldn't update the listview",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [638] = {
  fname = "FindPatternsInString",
  label = "US_FindPatternsInString",
  run = "in/out",
  desc = "Finds all occurrences of matching-patterns in a string. You can sort them optionally.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found items in the string; -1, in case of an error",
    name = "COUNT_FOUND_ITEMS",
   },
   [2] = {
    type = "ARRAY",
    desc = "all occurrences found in the string as an array",
    name = "FOUND_ITEMS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the source-string to search for all occurences",
    name = "SOURCESTRING",
   },
   [2] = {
    type = "STRING",
    desc = "the matching-pattern, with which to search for in the string",
    name = "PATTERN",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, sorts the entries; false, doesn't sort the entries",
    name = "SORT_AFTER_FINDING",
   },
  },
  sp_api = "ultraschall",
 },
 [639] = {
  fname = "RunLuaSourceCode",
  label = "US_RunLuaSourceCode",
  run = "in/out",
  desc = "runs the Lua-code stored in the parameter code\
\
Does not check for validity and syntaxerrors in the code!\
\
You can also add new callable functions that way. Just put function-declarations in the parameter code.\
\
For instance from the following code:\
\
  code=function main()\
         reaper.MB(\"I'm only run, when my parent function main is called\", \"\", 0)\
       end\
       \
       reaper.MB(\"I'm run immediately\", \"\", 0)\"\
\
when called by \
\
    ultraschall.RunLuaSourceCode(code)\
\
only the line reaper.MB(\"I'm run immediately\", \"\", 0) will be run immediately.\
If you want to run the function main as well, you need to explicitly call it with main()\
\
returns false in case of an error; nil, in case of an syntax/lua-error in the code itself",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, code was run successfully; false, code wasn't successfully; nil, code had an error in it, probably syntax error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the code, that you want to execute; you can also add new functions that way",
    name = "CODE",
   },
  },
  sp_api = "ultraschall",
 },
 [640] = {
  fname = "Main_OnCommand_LuaCode",
  label = "US_Main_OnCommand_LuaCode",
  run = "in/out",
  desc = "Runs LuaCode as new temporary script-instance. It internally registers the code as a file temporarily as command, runs it and unregisters it again.\
This is especially helpful, when you want to run a command for sure without possible command-id-number-problems.\
\
It returns a unique script-identifier for this script, which can be used to communicate with this script-instance.\
The started script gets its script-identifier using [GetScriptIdentifier](#GetScriptIdentifier).\
You can use this script-identifier e.g. as extstate.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if running it was successful; false, if not",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "a unique script-identifier, which can be used as extstate to communicate with the started code",
    name = "SCRIPT_IDENTIFIER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the Lua-code, which shall be run; will not be checked vor validity!",
    name = "CODE",
   },
   [2] = {
    type = "STRING",
    desc = "parameters that shall be passed over to the script",
    name = "...",
   },
  },
  sp_api = "ultraschall",
 },
 [641] = {
  fname = "ReplacePatternInString",
  label = "US_ReplacePatternInString",
  run = "in/out",
  desc = "Replaces the index'th occurrence of pattern in OriginalString with replacepattern.\
\
Unlike string.gsub, this replaces only the selected pattern!\
\
returns nil, false in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered string, where the n'th occurence of the pattern has been replaced",
    name = "ALTERED_STRING",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, there has been a replacement; false, no replacement has happened",
    name = "REPLACED",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string, from which you want to replace a specific occurence of a matching pattern",
    name = "ORIGINALSTRING",
   },
   [2] = {
    type = "STRING",
    desc = "the pattern to look for",
    name = "PATTERN",
   },
   [3] = {
    type = "STRING",
    desc = "the string, which shall replace the found pattern",
    name = "REPLACESTRING",
   },
   [4] = {
    type = "INTEGER",
    desc = "the number of found occurence of the pattern in the string, which shall be replaced",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [642] = {
  fname = "ConvertFunction_ToBase64String",
  label = "US_ConvertFunction_ToBase64String",
  run = "in/out",
  desc = "Converts a function into a BASE64-string.\
\
To load a function from a BASE64-string, use [ConvertFunction_FromBase64String](#ConvertFunction_FromBase64String)\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the function, stored as BASE64-string",
    name = "BASE64_FUNCTIONSTRING",
   },
  },
  ins = {
   [1] = {
    type = "FUNCTION",
    desc = "the function, that you want to convert",
    name = "TO_CONVERT_FUNCTION",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, store debug-information as well; false, only store function",
    name = "DEBUG",
   },
  },
  sp_api = "ultraschall",
 },
 [643] = {
  fname = "ConvertFunction_FromBase64String",
  label = "US_ConvertFunction_FromBase64String",
  run = "in/out",
  desc = "Loads a function from a BASE64-string.\
\
To convert a function into a BASE64-string, use [ConvertFunction_ToBase64String](#ConvertFunction_ToBase64String)\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "FUNCTION",
    desc = "the loaded function",
    name = "FUNC",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the function, stored as BASE64-string",
    name = "BASE64_FUNCTIONSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [644] = {
  fname = "ConvertFunction_ToHexString",
  label = "US_ConvertFunction_ToHexString",
  run = "in/out",
  desc = "Converts a function into a HEX-string.\
\
To load a function from a HEX-string, use [ConvertFunction_FromHexString](#ConvertFunction_FromHexString)\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the function, stored as HEX-string",
    name = "HEX_FUNCTIONSTRING",
   },
  },
  ins = {
   [1] = {
    type = "FUNCTION",
    desc = "the function, that you want to convert",
    name = "TO_CONVERT_FUNCTION",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, store debug-information as well; false, only store function",
    name = "DEBUG",
   },
  },
  sp_api = "ultraschall",
 },
 [645] = {
  fname = "ConvertFunction_FromHexString",
  label = "US_ConvertFunction_FromHexString",
  run = "in/out",
  desc = "Loads a function from a HEX-string.\
\
To convert a function into a HEX-string, use [ConvertFunction_ToHexString](#ConvertFunction_ToHexString)\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "FUNCTION",
    desc = "the loaded function",
    name = "FUNC",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the function, stored as HEX-string",
    name = "HEX_FUNCTIONSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [646] = {
  fname = "Benchmark_GetStartTime",
  label = "US_Benchmark_GetStartTime",
  run = "in/out",
  desc = "This function is for benchmarking parts of your code.\
It returns the starttime of the last benchmark-start, started by [Benchmark_MeasureTime](#Benchmark_MeasureTime).\
\
returns nil, if no benchmark has been made yet.\
\
Use [Benchmark_MeasureTime](#Benchmark_MeasureTime) to start/reset a new benchmark-measureing.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the starttime of the currently running benchmark",
    name = "STARTTIME",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the slot, whose starttime you want to get",
    opt = {
     use = false,
    },
    name = "SLOT",
   },
  },
  sp_api = "ultraschall",
 },
 [647] = {
  fname = "Benchmark_GetAllStartTimesAndSlots",
  label = "US_Benchmark_GetAllStartTimesAndSlots",
  run = "in/out",
  desc = "This function is for benchmarking parts of your code.\
It returns a table with all starttimes of all current benchmark-measurings. The index of the table reflects the slots.\
\
Use [Benchmark_MeasureTime](#Benchmark_MeasureTime) to start/reset a new benchmark-measureing.",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all starttimes of all current benchmark-measurings, where the index reflects the slots",
    name = "STARTTIME_SLOTS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [648] = {
  fname = "Benchmark_MeasureTime",
  label = "US_Benchmark_MeasureTime",
  run = "in/out",
  desc = "This function is for benchmarking parts of your code.\
It returns the passed time, since last time calling this function.\
\
Use [Benchmark_GetStartTime](#Benchmark_GetStartTime) to start the benchmark.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the elapsed time in seconds",
    name = "ELAPSED_TIME",
   },
   [2] = {
    type = "STRING",
    desc = "the elapsed time, formatted by parameter time_mode",
    name = "ELAPSED_TIME_STRING",
   },
   [3] = {
    type = "STRING",
    desc = "an evaluation of time, mostly starting with &lt; or &gt; an a number of +\
0, no time passed\
>, for elapsed times greater than 1, the following + will show the number of integer digits; example: 12.927 -> \">++\"\
<, for elapsed times smaller than 1, the following + will show the number of zeros+1 in the fraction, until the first non-zero-digit appears; example: 0.0063 -> \"<+++\"",
    name = "MEASURE_EVALUATION",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the formatting of elapsed_time_string\
0=time\
1=measures.beats + time\
2=measures.beats\
3=seconds\
4=samples\
5=h:m:s:f",
    opt = {
     use = false,
    },
    name = "TIME_MODE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, resets the starttime(for new measuring); false, keeps current measure-starttime(for continuing measuring)",
    opt = {
     use = false,
    },
    name = "RESET",
   },
   [3] = {
    type = "INTEGER",
    desc = "if you want to have multiple benchmark-measures at the same time, you can store them in different slots.\
means, you can measure in slot 1 and slot 2, where you can occasionally reset slot 1 while \
having continuous measuring in slot 2.\
this allows you to measure the execution time of the whole script(slot 2) and certain parts of the script \
on individual basis(slot 1).\
you can use as many slots, as you want.\
nil, default slot is 0",
    opt = {
     use = false,
    },
    name = "SLOT",
   },
  },
  sp_api = "ultraschall",
 },
 [649] = {
  fname = "TimeToMeasures",
  label = "US_TimeToMeasures",
  run = "in/out",
  desc = "a function which converts a time into current projects time-measures\
only useful, when there are no tempo-changes in the project\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the measures, that parameter time needs to be reflected",
    name = "MEASURE",
   },
  },
  ins = {
   [1] = {
    type = "REAPROJECT",
    desc = "ReaProject to use the timesignature-settings from",
    name = "PROJECT",
   },
   [2] = {
    type = "NUMBER",
    desc = "in seconds, the time to convert into a time-measurment, which can be\
used in config-variable \"prerollmeas\"",
    name = "TIME",
   },
  },
  sp_api = "ultraschall",
 },
 [650] = {
  fname = "Create2DTable",
  label = "US_Create2DTable",
  run = "in/out",
  desc = "creates a 2-dimensional table with x-lines and y-rows, of which all entries are indexable right away.\
\
It also has two additional fields [\"x\"] and [\"y\"] who hold the x and y-dimensions of the table you've set for later reference.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the 2d-table you've created",
    name = "TWO_D_TABLE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of rows in the table(x-dimension)",
    name = "MAXX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of lines in the table(y-dimension)",
    name = "MAXY",
   },
   [3] = {
    type = "ANYTYPE",
    desc = "the default-value to set in each field, can be any type",
    opt = {
     use = false,
    },
    name = "DEFVAL",
   },
  },
  sp_api = "ultraschall",
 },
 [651] = {
  fname = "Create3DTable",
  label = "US_Create3DTable",
  run = "in/out",
  desc = "creates a 3-dimensional table with x-lines and y-rows and z-depths, of which all entries are indexable right away.\
\
It also has two additional fields [\"x\"], [\"y\"] and [\"z\"] who hold the x, y and z-dimensions of the table you've set for later reference.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the 3d-table you've created",
    name = "THREED_TABLE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of rows in the table(x-dimension)",
    name = "MAXX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of lines in the table(y-dimension)",
    name = "MAXY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of depths in the table(z-dimension)",
    name = "MAXZ",
   },
   [4] = {
    type = "ANYTYPE",
    desc = "the default-value to set in each field, can be any type",
    opt = {
     use = false,
    },
    name = "DEFVAL",
   },
  },
  sp_api = "ultraschall",
 },
 [652] = {
  fname = "CreateMultiDimTable",
  label = "US_CreateMultiDimTable",
  run = "in/out",
  desc = "creates a multidimensional table\
\
It also adds additional fields [\"dimension1\"] to [\"dimension10\"] who hold the number of available entries in this dimension for later reference.\
\
It supports up to 10 dimensions.\
Note: the more dimensions, the more memory you need and the longer it takes to create the table.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the multidimensional-table you've created",
    name = "MULTIDIMTABLE",
   },
  },
  ins = {
   [1] = {
    type = "ANYTYPE",
    desc = "the default-value to set in each field, can be any type; set to nil to keep empty",
    opt = {
     use = false,
    },
    name = "DEFVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of entries in the first dimension of the table",
    name = "DIMENSION1",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of entries in the second dimension of the table",
    name = "DIMENSION2",
   },
   [4] = {
    type = "INTEGER",
    desc = "the number of entries in the n'th dimension of the table",
    name = "DIMENSIONN",
   },
  },
  sp_api = "ultraschall",
 },
 [653] = {
  fname = "GMem_Read_ValueRange",
  label = "US_GMem_Read_ValueRange",
  run = "in/out",
  desc = "Returns a table with all values of a gmem between startindex and startindex+number_of_indices.\
You can optionally set a specific gmem-attachname or leave it blank to get the values from the currently attached gmem.\
\
Set use_gmem_indices_for_table=true, so have the index of the table reflect the index of the gmems.\
\
Note: Keep in mind, that requesting tons of gmem-values will use up a lot of resources, so to to just get, what you need to avoid hanging gui.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the requested values.",
    name = "GMEM_VALUES",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the first index you want to request; must be 0 or higher",
    name = "STARTINDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of values to request, from startindex onwards",
    name = "NUMBER_OF_INDICES",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, index the table according to gmem-index; false or nil, just index from 1 onwards",
    opt = {
     use = false,
    },
    name = "USE_GMEM_INDICES_FOR_TABLE",
   },
   [4] = {
    type = "STRING",
    desc = "the attached gmem, from which you want to get the values; nil, use the currently attached gmem",
    opt = {
     use = false,
    },
    name = "GMEM_ATTACHNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [654] = {
  fname = "GMem_GetValues_VideoSamplePeeker",
  label = "US_GMem_GetValues_VideoSamplePeeker",
  run = "in/out",
  desc = "For usage together with the JSFX-fx- \"Video Sample Peeker\", which sends samples to a gmem, that can be used(for instance by video processor's presets \"Synthesis: Decorative Oscilloscope with Blitter\" and \"Synthesis: Decorative Spectrum Analyzer\").\
\
Ths returns all important values and the samples-values.\
\
You need to use the samples according to samplerate and number of channels to be able to do something with it.\
\
The overall maximum sample-buffer provided by the JSFX is 2 seconds.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the playposition, when the sample has been re",
    name = "PLAY_POS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the samplerate of the sampledata",
    name = "SAMPLERATE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of channels within the sampledata",
    name = "NUM_CHANNELS",
   },
   [4] = {
    type = "INTEGER",
    desc = "the length of the requested buffer; maximum is the number of values for about 2 seconds",
    name = "REQUESTED_SAMPLEBUFFER_LENGTH",
   },
   [5] = {
    type = "TABLE",
    desc = "the values themselves",
    name = "SAMPLEBUFFER",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the samplesize you want to get; nil, return the whole 2-seconds-samplebuffer(takes a lot of resources)",
    opt = {
     use = false,
    },
    name = "SAMPLESIZE",
   },
  },
  sp_api = "ultraschall",
 },
 [655] = {
  fname = "ReturnReaperExeFile_With_Path",
  label = "US_ReturnReaperExeFile_With_Path",
  run = "in/out",
  desc = "returns the reaper-exe-file with file-path",
  out = {
   [1] = {
    type = "STRING",
    desc = "the filename and path of the reaper-executable",
    name = "EXEFILE_WITH_PATH",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [656] = {
  fname = "MediaExplorer_SetDeviceOutput",
  label = "US_MediaExplorer_SetDeviceOutput",
  run = "in/out",
  desc = "Sets the output-channel(s) of the Media Explorer\
\
When Media Explorer is opened, playback will be stopped and the Media Explorer will flicker for a short time. This is due limitations in Reaper.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting the value was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the channel to set the media-explorer-output to\
when mono: 1-512\
when stereo: 1-511\
-1, Play through first track named \"Media Explorer Preview\" or first selected track",
    name = "CHANNEL",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, use the mono-channel; false, use stereo-channels",
    name = "MONO",
   },
  },
  sp_api = "ultraschall",
 },
 [657] = {
  fname = "MediaExplorer_SetAutoplay",
  label = "US_MediaExplorer_SetAutoplay",
  run = "in/out",
  desc = "Sets the autoplay-state of the Media Explorer\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting the value was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activate autoplay; false, deactivate autoplay",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [658] = {
  fname = "MediaExplorer_SetRate",
  label = "US_MediaExplorer_SetRate",
  run = "in/out",
  desc = "Sets the rate of the Media Explorer; works only with Media Explorer opened!\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting the value was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the value to set the rate to",
    name = "RATE",
   },
  },
  sp_api = "ultraschall",
 },
 [659] = {
  fname = "MediaExplorer_SetStartOnBar",
  label = "US_MediaExplorer_SetStartOnBar",
  run = "in/out",
  desc = "Sets the start on bar-state of the Media Explorer\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting the value was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activate start on bar; false, deactivate start on bar",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [660] = {
  fname = "MediaExplorer_SetPitch",
  label = "US_MediaExplorer_SetPitch",
  run = "in/out",
  desc = "Sets the pitch of the Media Explorer; works only with Media Explorer opened!\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting the value was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the value to set the pitch to",
    name = "RATE",
   },
  },
  sp_api = "ultraschall",
 },
 [661] = {
  fname = "MediaExplorer_SetVolume",
  label = "US_MediaExplorer_SetVolume",
  run = "in/out",
  desc = "Sets the volume of the Media Explorer; works only with Media Explorer opened!\
\
The volume is close, but not necessarily exactly the requested value.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting the value was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the value to set the volume to; -127 to +12",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [662] = {
  fname = "IsValidReaProject",
  label = "US_IsValidReaProject",
  run = "in/out",
  desc = "Returns, if parameter ReaProject is a valid ReaProject(means, an existing opened project) or not.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if parameter ReaProject is a valid ReaProject; false, if parameter ReaProject isn't a valid ReaProject",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "REAPROJECT",
    desc = "the object that you want to check for being a valid ReaProject",
    name = "REAPROJECT",
   },
  },
  sp_api = "ultraschall",
 },
 [663] = {
  fname = "GetSetIDEAutocompleteSuggestions",
  label = "US_GetSetIDEAutocompleteSuggestions",
  run = "in/out",
  desc = "gets/sets the number of shown suggestions for autocomplete in the IDE\
\
affects all IDEs immediately\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of shown suggestions",
    name = "SUGGESTIONS",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, get the current one",
    name = "IS_SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new value, must be between 0 and 2147483647; default is 50",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [664] = {
  fname = "GetRandomString",
  label = "US_GetRandomString",
  run = "in/out",
  desc = "creates a string with random upper and lowercase letters. Length it also random with maximum 256 characters.",
  out = {
   [1] = {
    type = "STRING",
    desc = "a random string",
    name = "RANDOM_STRING",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [665] = {
  fname = "GetTrackStateChunk_Tracknumber",
  label = "US_GetTrackStateChunk_Tracknumber",
  run = "in/out",
  desc = "returns the trackstatechunk for track tracknumber\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success; false in case of error",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the trackstatechunk for track tracknumber",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber, 0 for master track, 1 for track 1, 2 for track 2, etc.    ",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [666] = {
  fname = "GetTrackState_NumbersOnly",
  label = "US_GetTrackState_NumbersOnly",
  run = "in/out",
  desc = "returns a state of a TrackStateChunk.\
\
It only supports single-entry-states with numbers/integers, separated by spaces!\
All other values will be set to nil and strings with spaces will produce weird results!\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "all values found as numerical indexed array",
    name = "VALUES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the state, whose attributes you want to retrieve",
    name = "STATE",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a track",
    name = "TRACKSTATECHUNK",
   },
   [3] = {
    type = "STRING",
    desc = "if this function is used within specific gettrackstate-functions, pass here the \"host\"-functionname, so error-messages will reflect that",
    opt = {
     use = false,
    },
    name = "FUNCTIONNAME",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true or nil; converts all values to numbers; false, keep them as string versions",
    opt = {
     use = false,
    },
    name = "NUMBERTOGGLE",
   },
  },
  sp_api = "ultraschall",
 },
 [667] = {
  fname = "GetTrackName",
  label = "US_GetTrackName",
  run = "in/out",
  desc = "returns name of the track.\
\
It's the entry NAME\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the name of the track",
    name = "TRACKNAME",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [668] = {
  fname = "GetTrackPeakColorState",
  label = "US_GetTrackPeakColorState",
  run = "in/out",
  desc = "returns state of the PeakColor-number, which is the trackcolor. Will be returned as string, to avoid losing trailing or preceding zeros.\
\
It's the entry PEAKCOL\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the color of the track",
    name = "PEAKCOLORSTATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [669] = {
  fname = "GetTrackBeatState",
  label = "US_GetTrackBeatState",
  run = "in/out",
  desc = "returns Track-BeatState. \
\
It's the entry BEAT\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "-1 - Project time base; 0 - Time; 1 - Beats position, length, rate; 2 - Beats position only",
    name = "BEATSTATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [670] = {
  fname = "GetTrackAutoRecArmState",
  label = "US_GetTrackAutoRecArmState",
  run = "in/out",
  desc = "returns if the track is in AutoRecArm, when selected. Returns nil if not.\
\
It's the entry AUTO_RECARM\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "state of autorecarm; 1 for set; nil, if unset",
    name = "AUTORECARMSTATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [671] = {
  fname = "GetTrackMuteSoloState",
  label = "US_GetTrackMuteSoloState",
  run = "in/out",
  desc = "returns states of Mute and Solo-Buttons.\
\
It's the entry MUTESOLO\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "Mute set to 0 - Mute off, 1 - Mute On",
    name = "MUTE",
   },
   [2] = {
    type = "INTEGER",
    desc = "Solo set to 0 - Solo off, 1 - Solo ignore routing, 2 - Solo on",
    name = "SOLO",
   },
   [3] = {
    type = "INTEGER",
    desc = "SoloDefeat set to 0 - off, 1 - on",
    name = "SOLODEFEAT",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [672] = {
  fname = "GetTrackIPhaseState",
  label = "US_GetTrackIPhaseState",
  run = "in/out",
  desc = "returns state of the IPhase. If the Phase-button is pressed, it will return 1, else it will return 0.\
\
It's the entry IPHASE\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "state of the phase-button; 0, normal phase; 1, inverted phase(180°)",
    name = "IPHASE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [673] = {
  fname = "GetTrackIsBusState",
  label = "US_GetTrackIsBusState",
  run = "in/out",
  desc = "returns busstate of the track, means: if it's a folder track\
\
It's the entry ISBUS\
\
busstate1=0, busstate2=0 - track is no folder\
- or\
busstate1=1, busstate2=1 - track is a folder\
- or\
busstate1=1, busstate2=2 - track is a folder but view of all subtracks not compactible\
- or\
busstate1=2, busstate2=-1 - track is last track in folder(no tracks of subfolders follow)\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "refer to description for details",
    name = "BUSSTATE1",
   },
   [2] = {
    type = "INTEGER",
    desc = "refer to description for details",
    name = "BUSSTATE2",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [674] = {
  fname = "GetTrackBusCompState",
  label = "US_GetTrackBusCompState",
  run = "in/out",
  desc = "returns BusCompState, if the tracks in a folder are compacted or not.\
\
It's the entry BUSCOMP\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "0 - no compacting, 1 - compacted tracks, 2 - minimized tracks",
    name = "BUSCOMPSTATE1",
   },
   [2] = {
    type = "NUMBER",
    desc = "0 - unknown,1 - unknown",
    name = "BUSCOMPSTATE2",
   },
   [3] = {
    type = "NUMBER",
    desc = "0 - unknown,1 - unknown",
    name = "BUSCOMPSTATE3",
   },
   [4] = {
    type = "NUMBER",
    desc = "0 - unknown,1 - unknown",
    name = "BUSCOMPSTATE4",
   },
   [5] = {
    type = "NUMBER",
    desc = "0 - unknown,1 - unknown",
    name = "BUSCOMPSTATE5",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [675] = {
  fname = "GetTrackShowInMixState",
  label = "US_GetTrackShowInMixState",
  run = "in/out",
  desc = "returns Show in Mix-state.\
\
It's the entry SHOWINMIX\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0 invisible, 1 visible",
    name = "MCPVISIBLE",
   },
   [2] = {
    type = "NUMBER",
    desc = "0 visible, 1 FX-Parameters visible, 2 invisible",
    name = "MCP_FX_VISIBLE",
   },
   [3] = {
    type = "NUMBER",
    desc = "0 & 1.1 and higher TrackSends in MCP visible, every other number makes them invisible",
    name = "MCPTRACKSENDSVISIBLE",
   },
   [4] = {
    type = "INTEGER",
    desc = "0 track is invisible in TCP, 1 track is visible in TCP",
    name = "TCPVISIBLE",
   },
   [5] = {
    type = "NUMBER",
    desc = "unknown",
    name = "SHOWINMIX5",
   },
   [6] = {
    type = "NUMBER",
    desc = "unknown",
    name = "SHOWINMIX6",
   },
   [7] = {
    type = "NUMBER",
    desc = "unknown",
    name = "SHOWINMIX7",
   },
   [8] = {
    type = "NUMBER",
    desc = "unknown",
    name = "SHOWINMIX8",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [676] = {
  fname = "GetTrackFreeModeState",
  label = "US_GetTrackFreeModeState",
  run = "in/out",
  desc = "returns if the track has track free item positioning enabled(1) or not(0).\
\
It's the entry FREEMODE\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "1 - enabled, 0 - not enabled",
    name = "FREEMODESTATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [677] = {
  fname = "GetTrackRecState",
  label = "US_GetTrackRecState",
  run = "in/out",
  desc = "returns Track Rec State.\
\
It's the entry REC\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "returns 1(armed) or 0(unarmed)    ",
    name = "ARMSTATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "returns the InputChannel\
-1 - No Input\
1-16(more?) - Mono Input Channel\
1024 - Stereo Channel 1 and 2\
1026 - Stereo Channel 3 and 4\
1028 - Stereo Channel 5 and 6\
...\
5056 - Virtual MIDI Keyboard all Channels\
5057 - Virtual MIDI Keyboard Channel 1\
...\
5072 - Virtual MIDI Keyboard Channel 16\
5088 - All MIDI Inputs - All Channels\
5089 - All MIDI Inputs - Channel 1\
...\
5104 - All MIDI Inputs - Channel 16    ",
    name = "INPUTCHANNEL",
   },
   [3] = {
    type = "INTEGER",
    desc = "0 monitor off, 1 monitor on, 2 monitor on tape audio style     ",
    name = "MONITORINPUT",
   },
   [4] = {
    type = "INTEGER",
    desc = "returns rec-input type\
0 input(Audio or Midi)\
1 Record Output Stereo\
2 Disabled, Input Monitoring Only\
3 Record Output Stereo, Latency Compensated\
4 Record Output MIDI\
5 Record Output Mono\
6 Record Output Mono, Latency Compensated\
7 MIDI overdub\
8 MIDI replace\
9 MIDI touch replace\
10 Record Output Multichannel\
11 Record Output Multichannel, Latency Compensated \
12 Record Input Force Mono\
13 Record Input Force Stereo\
14 Record Input Force Multichannel\
15 Record Input Force MIDI\
16 MIDI latch replace",
    name = "RECINPUT",
   },
   [5] = {
    type = "INTEGER",
    desc = "Monitor Trackmedia when recording, 0 is off, 1 is on",
    name = "MONITORWHILEREC",
   },
   [6] = {
    type = "INTEGER",
    desc = "preserve PDC delayed monitoring in media items",
    name = "PRESPDCDELAY",
   },
   [7] = {
    type = "INTEGER",
    desc = "recording path used \
0 - Primary Recording-Path only\
1 - Secondary Recording-Path only\
2 - Primary Recording Path and Secondary Recording Path(for invisible backup)",
    name = "RECORDINGPATH",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [678] = {
  fname = "GetTrackVUState",
  label = "US_GetTrackVUState",
  run = "in/out",
  desc = "returns VUState. \
\
It's the entry VU\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "nil if MultiChannelMetering is off, 2 if MultichannelMetering is on, 3 Metering is off",
    name = "VUSTATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [679] = {
  fname = "GetTrackHeightState",
  label = "US_GetTrackHeightState",
  run = "in/out",
  desc = "returns height of the track.\
\
It's the entry TRACKHEIGHT\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "24 up to 443",
    name = "HEIGHT",
   },
   [2] = {
    type = "INTEGER",
    desc = "0 - use height, 1 - compact the track and ignore the height",
    name = "HEIGHTSTATE2",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, don't lock the trackheight; 1, lock the trackheight",
    name = "LOCK_TRACKHEIGHT",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [680] = {
  fname = "GetTrackINQState",
  label = "US_GetTrackINQState",
  run = "in/out",
  desc = "Gets INQ-state, mostly the quantize-settings for MIDI, as set in the \"Track: View track recording settings (MIDI quantize, file format/path) for last touched track\"-dialog (action 40604)\
\
It's the entry INQ\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "quantize MIDI; 0 or 1",
    name = "QUANTMIDI",
   },
   [2] = {
    type = "INTEGER",
    desc = "quantize to position; -1,prev; 0, nearest; 1, next",
    name = "QUANTPOS",
   },
   [3] = {
    type = "INTEGER",
    desc = "quantize note-offs; 0 or 1",
    name = "QUANTNOTEOFFS",
   },
   [4] = {
    type = "NUMBER",
    desc = "quantize to (fraction of beat)",
    name = "QUANTTOFRACTBEAT",
   },
   [5] = {
    type = "INTEGER",
    desc = "quantize strength; -128 to 127",
    name = "QUANTSTRENGTH",
   },
   [6] = {
    type = "INTEGER",
    desc = "swing strength; -128 to 127",
    name = "SWINGSTRENGTH",
   },
   [7] = {
    type = "INTEGER",
    desc = "quantize range minimum; -128 to 127",
    name = "QUANTRANGEMIN",
   },
   [8] = {
    type = "INTEGER",
    desc = "quantize range maximum; -128 to 127",
    name = "QUANTRANGEMAX",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [681] = {
  fname = "GetTrackNChansState",
  label = "US_GetTrackNChansState",
  run = "in/out",
  desc = "returns the number of channels for this track, as set in the routing.\
\
It's the entry NCHAN\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of channels for this track",
    name = "CHANNELNUMBER",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [682] = {
  fname = "GetTrackBypFXState",
  label = "US_GetTrackBypFXState",
  run = "in/out",
  desc = "returns the off/bypass(0) or nobypass(1) state of the FX-Chain\
\
It's the entry FX\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "off/bypass(0) or nobypass(1)",
    name = "FXSTATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [683] = {
  fname = "GetTrackPerfState",
  label = "US_GetTrackPerfState",
  run = "in/out",
  desc = "returns TrackPerformance-state\
\
It's the entry PERF\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "TrackPerformance-state\
0 - allow anticipative FX + allow media buffering\
1 - allow anticipative FX + prevent media buffering \
2 - prevent anticipative FX + allow media buffering\
3 - prevent anticipative FX + prevent media buffering\
settings seem to repeat with higher numbers (e.g. 4(like 0) - allow anticipative FX + allow media buffering)",
    name = "TRACKPERFSTATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [684] = {
  fname = "GetTrackMIDIOutState",
  label = "US_GetTrackMIDIOutState",
  run = "in/out",
  desc = "returns MIDI_Out-State, as set in the Routing-Settings\
\
It's the entry MIDIOUT\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "MIDI_Out-State, as set in the Routing-Settings\
-1 no output\
416 - microsoft GS wavetable synth - send to original channels\
417-432 - microsoft GS wavetable synth - send to channel state minus 416\
-31 - no Output, send to original channel 1\
-16 - no Output, send to original channel 16",
    name = "MIDIOUTSTATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [685] = {
  fname = "GetTrackMainSendState",
  label = "US_GetTrackMainSendState",
  run = "in/out",
  desc = "returns, if Main-Send is on(1) or off(0) and the ParentChannels(0-63), as set in the Routing-Settings.\
\
It's the entry MAINSEND\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "Main-Send is on(1) or off(0)",
    name = "MAINSENDON",
   },
   [2] = {
    type = "INTEGER",
    desc = "ParentChannels(0-63)",
    name = "PARENTCHANNELS",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [686] = {
  fname = "GetTrackGroupFlagsState",
  label = "US_GetTrackGroupFlagsState",
  run = "in/out",
  desc = "returns the state of the group-flags, as set in the menu Track Grouping Parameters. Returns a 23bit flagvalue as well as an array with 32 individual 23bit-flagvalues. You must use bitoperations to get the individual values.\
\
You can reach the Group-Flag-Settings in the context-menu of a track.\
\
The groups_bitfield_table contains up to 23 entries. Every entry represents one of the checkboxes in the Track grouping parameters-dialog\
\
Each entry is a bitfield, that represents the groups, in which this flag is set to checked or unchecked.\
\
So if you want to get Volume Master(table entry 1) to check if it's set in Group 1(2^0=1) and 3(2^2=4):\
  group1=groups_bitfield_table[1]&1\
  group2=groups_bitfield_table[1]&4\
\
The following flags(and their accompanying array-entry-index) are available:\
                       1 - Volume Master\
                       2 - Volume Follow\
                       3 - Pan Master\
                       4 - Pan Follow\
                       5 - Mute Master\
                       6 - Mute Follow\
                       7 - Solo Master\
                       8 - Solo Follow\
                       9 - Record Arm Master\
                       10 - Record Arm Follow\
                       11 - Polarity/Phase Master\
                       12 - Polarity/Phase Follow\
                       13 - Automation Mode Master\
                       14 - Automation Mode Follow\
                       15 - Reverse Volume\
                       16 - Reverse Pan\
                       17 - Do not master when slaving\
                       18 - Reverse Width\
                       19 - Width Master\
                       20 - Width Follow\
                       21 - VCA Master\
                       22 - VCA Follow\
                       23 - VCA pre-FX Follow\
                       24 - Media/Razor Edit Lead\
                       25 - Media/Razor Edit Lead\
\
The GroupState_as_Flags-bitfield is a hint, if a certain flag is set in any of the groups. So, if you want to know, if VCA Master is set in any group, check if flag &1048576 (2^20) is set to 1048576.\
\
This function will work only for Groups 1 to 32. To get Groups 33 to 64, use <a href=\"#GetTrackGroupFlags_HighState\">GetTrackGroupFlags_HighState</a> instead!\
\
It's the entry GROUP_FLAGS\
\
returns -1 in case of failure",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "returns a flagvalue with 23 bits, that tells you, which grouping-flag is set in at least one of the 32 groups available.\
returns -1 in case of failure\
\
the following flags are available:\
&1 - Volume Master\
&2 - Volume Follow\
&4 - Pan Master\
&8 - Pan Follow\
&16 - Mute Master\
&32 - Mute Follow\
&64 - Solo Master\
&128 - Solo Follow\
&256 - Record Arm Master\
&512 - Record Arm Follow\
&1024 - Polarity/Phase Master\
&2048 - Polarity/Phase Follow\
&4096 - Automation Mode Master\
&8192 - Automation Mode Follow\
&16384 - Reverse Volume\
&32768 - Reverse Pan\
&65536 - Do not master when slaving\
&131072 - Reverse Width\
&262144 - Width Master\
&524288 - Width Follow\
&1048576 - VCA Master\
&2097152 - VCA Follow\
&4194304 - VCA pre-FX Follow\
&8388608 - Media/Razor Edit Lead\
&16777216 - Media/Razor Edit Follow",
    name = "GROUPSTATE_AS_FLAGS",
   },
   [2] = {
    type = "ARRAY",
    desc = "returns an array with 23 entries. Every entry represents one of the GroupState_as_Flags, but it's value is a flag, that describes, in which of the 32 Groups a certain flag is set.\
e.g. If Volume Master is set only in Group 1, entry 1 in the array will be set to 1. If Volume Master is set on Group 2 and Group 4, the first entry in the array will be set to 10.\
refer to the upper GroupState_as_Flags list to see, which entry in the array is for which set flag, e.g. array[22] is VCA pre-F Follow, array[16] is Do not master when slaving, etc\
As said before, the values in each entry is a flag, that tells you, which of the groups is set with a certain flag. The following flags determine, in which group a certain flag is set:\
&1 - Group 1\
&2 - Group 2\
&4 - Group 3\
&8 - Group 4\
etc...",
    name = "INDIVIDUALGROUPSTATE_FLAGS",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [687] = {
  fname = "GetTrackGroupFlags_HighState",
  label = "US_GetTrackGroupFlags_HighState",
  run = "in/out",
  desc = "returns the state of the group-flags, as set in the menu Track Grouping Parameters. Returns a 23bit flagvalue as well as an array with 32 individual 23bit-flagvalues. You must use bitoperations to get the individual values.\
\
You can reach the Group-Flag-Settings in the context-menu of a track.\
\
The groups_bitfield_table contains up to 23 entries. Every entry represents one of the checkboxes in the Track grouping parameters-dialog\
\
Each entry is a bitfield, that represents the groups, in which this flag is set to checked or unchecked.\
\
So if you want to get Volume Master(table entry 1) to check if it's set in Group 33(2^0=1) and 35(2^2=4):\
  group1=groups_bitfield_table[1]&1\
  group2=groups_bitfield_table[1]&4\
\
The following flags(and their accompanying array-entry-index) are available:\
                       1 - Volume Master\
                       2 - Volume Follow\
                       3 - Pan Master\
                       4 - Pan Follow\
                       5 - Mute Master\
                       6 - Mute Follow\
                       7 - Solo Master\
                       8 - Solo Follow\
                       9 - Record Arm Master\
                       10 - Record Arm Follow\
                       11 - Polarity/Phase Master\
                       12 - Polarity/Phase Follow\
                       13 - Automation Mode Master\
                       14 - Automation Mode Follow\
                       15 - Reverse Volume\
                       16 - Reverse Pan\
                       17 - Do not master when slaving\
                       18 - Reverse Width\
                       19 - Width Master\
                       20 - Width Follow\
                       21 - VCA Master\
                       22 - VCA Follow\
                       23 - VCA pre-FX Follow\
                       24 - Media/Razor Edit Lead\
                       25 - Media/Razor Edit Lead    \
The GroupState_as_Flags-bitfield is a hint, if a certain flag is set in any of the groups. So, if you want to know, if VCA Master is set in any group, check if flag &1048576 (2^20) is set to 1048576.\
\
This function will work only for Groups 33(2^0) to 64(2^31). To get Groups 1 to 32, use <a href=\"#GetTrackGroupFlagsState\">GetTrackGroupFlagsState</a> instead!\
\
It's the entry GROUP_FLAGS_HIGH\
\
returns -1 in case of failure",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "returns a flagvalue with 23 bits, that tells you, which grouping-flag is set in at least one of the 32 groups available.\
returns -1 in case of failure\
\
the following flags are available:\
&1 - Volume Master\
&2 - Volume Follow\
&4 - Pan Master\
&8 - Pan Follow\
&16 - Mute Master\
&32 - Mute Follow\
&64 - Solo Master\
&128 - Solo Follow\
&256 - Record Arm Master\
&512 - Record Arm Follow\
&1024 - Polarity/Phase Master\
&2048 - Polarity/Phase Follow\
&4096 - Automation Mode Master\
&8192 - Automation Mode Follow\
&16384 - Reverse Volume\
&32768 - Reverse Pan\
&65536 - Do not master when slaving\
&131072 - Reverse Width\
&262144 - Width Master\
&524288 - Width Follow\
&1048576 - VCA Master\
&2097152 - VCA Follow\
&4194304 - VCA pre-FX Follow\
&8388608 - Media/Razor Edit Lead\
&16777216 - Media/Razor Edit Follow",
    name = "GROUPSTATE_AS_FLAGS",
   },
   [2] = {
    type = "ARRAY",
    desc = "returns an array with 23 entries. Every entry represents one of the GroupState_as_Flags, but it's value is a flag, that describes, in which of the 32 Groups a certain flag is set.\
e.g. If Volume Master is set only in Group 33, entry 1 in the array will be set to 1. If Volume Master is set on Group 34 and Group 36, the first entry in the array will be set to 10.\
refer to the upper GroupState_as_Flags list to see, which entry in the array is for which set flag, e.g. array[22] is VCA pre-F Follow, array[16] is Do not master when slaving, etc\
As said before, the values in each entry is a flag, that tells you, which of the groups is set with a certain flag. The following flags determine, in which group a certain flag is set:\
&1 - Group 33\
&2 - Group 34\
&4 - Group 35\
&8 - Group 36\
etc...",
    name = "INDIVIDUALGROUPSTATE_FLAGS",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [688] = {
  fname = "GetTrackLockState",
  label = "US_GetTrackLockState",
  run = "in/out",
  desc = "returns, if the track-controls of this track are locked(1) or not(nil).\
\
It's the entry LOCK\
Only the LOCK within TrackStateChunks, but not MediaItemStateChunks\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "locked(1) or not(nil)",
    name = "LOCKEDSTATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [689] = {
  fname = "GetTrackLayoutNames",
  label = "US_GetTrackLayoutNames",
  run = "in/out",
  desc = "returns the current selected layouts for TrackControlPanel and MixerControlPanel for this track as strings. Returns nil, if default is set.\
\
It's the entry LAYOUTS\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "name of the TCP-Layoutname",
    name = "TCP_LAYOUTNAME",
   },
   [2] = {
    type = "STRING",
    desc = "name of the MCP-Layoutname",
    name = "MCP_LAYOUTNAME",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [690] = {
  fname = "GetTrackAutomodeState",
  label = "US_GetTrackAutomodeState",
  run = "in/out",
  desc = "returns, if the automation-mode for envelopes of this track\
\
It's the entry AUTOMODE\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "is set to 0 - trim/read, 1 - read, 2 - touch, 3 - write, 4 - latch.",
    name = "AUTOMODESTATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [691] = {
  fname = "GetTrackIcon_Filename",
  label = "US_GetTrackIcon_Filename",
  run = "in/out",
  desc = "returns the filename with path for the track-icon of the current track. Returns nil, if no trackicon has been set.\
\
It's the entry TRACKIMGFN\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the current track-icon.",
    name = "FILENAME_WITH_PATH",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [692] = {
  fname = "GetTrackRecCFG",
  label = "US_GetTrackRecCFG",
  run = "in/out",
  desc = "returns the Rec-configuration-string, with which recordings are made. Returns nil, if no reccfg exists.\
\
It's the entry <RECCFG\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the string, that encodes the recording configuration of the track.",
    name = "RECCFG",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the recording-configuration of the track; \
0, use default project rec-setting\
1, use track-customized rec-setting, as set in the \"Track: View track recording settings (MIDI quantize, file format/path) for last touched track\"-dialog (action 40604)",
    name = "RECCFGNR",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [693] = {
  fname = "GetTrackMidiInputChanMap",
  label = "US_GetTrackMidiInputChanMap",
  run = "in/out",
  desc = "returns the state of the MIDIInputChanMap for the current track, as set in the Input-MIDI->Map Input to Channel menu. 0 for channel 1, 2 for channel 2, etc. Nil, if not existing.\
\
It's the entry MIDI_INPUT_CHANMAP\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0 for channel 1, 1 for channel 2, ... 15 for channel 16; nil, source channel.",
    name = "MIDIINPUTCHANMAP_STATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [694] = {
  fname = "GetTrackMidiCTL",
  label = "US_GetTrackMidiCTL",
  run = "in/out",
  desc = "returns linked to Midi channel and an unknown value. Nil if not existing.\
\
It's the entry MIDICTL\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "linked to midichannel",
    name = "LINKEDTOMIDICHANNEL",
   },
   [2] = {
    type = "INTEGER",
    desc = "unknown",
    name = "UNKNOWN",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [695] = {
  fname = "GetTrackWidth",
  label = "US_GetTrackWidth",
  run = "in/out",
  desc = "returns width of the track. 1 if set to +100%. \
\
Note for TrackStateChunk-enthusiasts: When set to +100%, it is not stored in the TrackStateChunk\
\
It's the entry WIDTH\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "width of the track, from -1(-100%) to 1(+100%)",
    name = "WIDTH",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [696] = {
  fname = "GetTrackPanMode",
  label = "US_GetTrackPanMode",
  run = "in/out",
  desc = "returns Panmode of the track.\
\
It's the entry PANMODE\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the Panmode of the track\
nil - Project Default\
0 - Reaper 3.x balance (deprecated)\
3 - Stereo Balance/ Mono Pan(Default)\
5 - Stereo Balance\
6 - Dual Pan",
    name = "PANMODE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [697] = {
  fname = "GetTrackMidiColorMapFn",
  label = "US_GetTrackMidiColorMapFn",
  run = "in/out",
  desc = "returns MidiColorMap-Filename of the track. Nil if not existing.\
\
It's the entry MIDICOLORMAPFN\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the MidiColorMap-Filename; nil if not existing",
    name = "MIDICOLORMAPFN",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [698] = {
  fname = "GetTrackMidiBankProgFn",
  label = "US_GetTrackMidiBankProgFn",
  run = "in/out",
  desc = "returns MidiBankProg-Filename of the track. Nil if not existing.\
\
It's the entry MIDIBANKPROGFN\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the MidiBankProg-Filename; nil if not existing",
    name = "MIDIBANKPROGFN",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [699] = {
  fname = "GetTrackMidiTextStrFn",
  label = "US_GetTrackMidiTextStrFn",
  run = "in/out",
  desc = "returns MidiTextStrFn-Filename of the track. Nil if not existing.\
\
It's the entry MIDIEXTSTRFN\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the MidiTextStrFn-Filename; nil if not existing",
    name = "MIDITEXTSTRFN",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [700] = {
  fname = "GetTrackID",
  label = "US_GetTrackID",
  run = "in/out",
  desc = "returns TrackID of the track.\
\
It's the entry TRACKID\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the TrackID as GUID",
    name = "TRACKID",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [701] = {
  fname = "GetTrackScore",
  label = "US_GetTrackScore",
  run = "in/out",
  desc = "returns Score of the track.\
\
It's the entry SCORE\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "unknown ",
    name = "SCORE1",
   },
   [2] = {
    type = "INTEGER",
    desc = "unknown",
    name = "SCORE2",
   },
   [3] = {
    type = "NUMBER",
    desc = "unknown",
    name = "SCORE3",
   },
   [4] = {
    type = "NUMBER",
    desc = "unknown",
    name = "SCORE4",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [702] = {
  fname = "GetTrackVolPan",
  label = "US_GetTrackVolPan",
  run = "in/out",
  desc = "returns Vol and Pan-states of the track.\
\
It's the entry VOLPAN\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "Volume Settings\
-Inf dB(0) to +12dB (3.98107170553497)",
    name = "VOL",
   },
   [2] = {
    type = "NUMBER",
    desc = "Pan Settings\
-1(-100%); 0(center); 1(100% R)",
    name = "PAN",
   },
   [3] = {
    type = "NUMBER",
    desc = "Override Default Pan Track Law\
0dB(1) to -144dB(0.00000006309573)",
    name = "OVERRIDEPANLAW",
   },
   [4] = {
    type = "NUMBER",
    desc = "unknown",
    name = "UNKNOWN",
   },
   [5] = {
    type = "NUMBER",
    desc = "unknown",
    name = "UNKNOWN2",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [703] = {
  fname = "SetTrackName",
  label = "US_SetTrackName",
  run = "in/out",
  desc = "Set the name of a track or a trackstatechunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "new name of the track",
    name = "NAME",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [704] = {
  fname = "SetTrackPeakColorState",
  label = "US_SetTrackPeakColorState",
  run = "in/out",
  desc = "Set the color of the track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the color for the track",
    name = "COLORVALUE",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [705] = {
  fname = "SetTrackBeatState",
  label = "US_SetTrackBeatState",
  run = "in/out",
  desc = "Set the timebase for a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "tracktimebase for this track; -1 - Project time base, 0 - Time, 1 - Beats position, length, rate, 2 - Beats position only",
    name = "BEATSTATE",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [706] = {
  fname = "SetTrackAutoRecArmState",
  label = "US_SetTrackAutoRecArmState",
  run = "in/out",
  desc = "Set the AutoRecArmState for a track or a TrackStateChunk.\
\
It's the entry AUTO_RECARM\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the autorecarmstate; 1, autorecarm on; 0, autorecarm off",
    name = "AUTORECARMSTATE",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [707] = {
  fname = "SetTrackMuteSoloState",
  label = "US_SetTrackMuteSoloState",
  run = "in/out",
  desc = "Set the Track Mute/Solo/Solodefeat for a track or a TrackStateChunk.\
Has no real effect on master track.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "Mute set to 0 - Mute off, 1 - Mute On",
    name = "MUTE",
   },
   [3] = {
    type = "INTEGER",
    desc = "Solo set to 0 - Solo off, 1 - Solo ignore routing, 2 - Solo on",
    name = "SOLO",
   },
   [4] = {
    type = "INTEGER",
    desc = "SoloDefeat set to 0 - off, 1 - on",
    name = "SOLODEFEAT",
   },
   [5] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [708] = {
  fname = "SetTrackIPhaseState",
  label = "US_SetTrackIPhaseState",
  run = "in/out",
  desc = "Sets IPhase, the Phase-Buttonstate of the track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "0-off, &lt;&gt; than 0-on",
    name = "IPHASESTATE",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [709] = {
  fname = "SetTrackIsBusState",
  label = "US_SetTrackIsBusState",
  run = "in/out",
  desc = "Sets ISBUS-state of the track or a TrackStateChunk; if it's a folder track.\
\
busstate1=0, busstate2=0 - track is no folder\
busstate1=1, busstate2=1 - track is a folder\
busstate1=1, busstate2=2 - track is a folder but view of all subtracks not compactible\
busstate1=2, busstate2=-1 - track is last track in folder(no tracks of subfolders follow)\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "refer to description for details",
    name = "BUSSTATE1",
   },
   [3] = {
    type = "INTEGER",
    desc = "refer to description for details",
    name = "BUSSTATE2",
   },
   [4] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [710] = {
  fname = "SetTrackBusCompState",
  label = "US_SetTrackBusCompState",
  run = "in/out",
  desc = "Sets BUSCOMP-state of the track or a TrackStateChunk; This is the state, if tracks in a folder are compacted or not.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "buscompstate1 - 0 - no compacting, 1 - compacted tracks, 2 - minimized tracks",
    name = "RETVAL",
   },
   [3] = {
    type = "INTEGER",
    desc = "buscompstate2 - 0 - unknown, 1 - unknown",
    name = "RETVAL",
   },
   [4] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [711] = {
  fname = "SetTrackShowInMixState",
  label = "US_SetTrackShowInMixState",
  run = "in/out",
  desc = "Sets SHOWINMIX, that sets visibility of track or TrackStateChunk in MCP and TCP.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "0 invisible, 1 visible",
    name = "MCPVISIBLE",
   },
   [3] = {
    type = "NUMBER",
    desc = "0 visible, 1 FX-Parameters visible, 2 invisible",
    name = "MCP_FX_VISIBLE",
   },
   [4] = {
    type = "NUMBER",
    desc = "0 & 1.1 and higher TrackSends in MCP visible, every other number makes them invisible",
    name = "MCPTRACKSENDSVISIBLE",
   },
   [5] = {
    type = "INTEGER",
    desc = "0 track is invisible in TCP, 1 track is visible in TCP\
with Master-Track, 1 shows all active envelopes, 0 hides all active envelopes",
    name = "TCPVISIBLE",
   },
   [6] = {
    type = "NUMBER",
    desc = "unknown",
    name = "SHOWINMIX5",
   },
   [7] = {
    type = "INTEGER",
    desc = "unknown",
    name = "SHOWINMIX6",
   },
   [8] = {
    type = "INTEGER",
    desc = "unknown",
    name = "SHOWINMIX7",
   },
   [9] = {
    type = "INTEGER",
    desc = "unknown",
    name = "SHOWINMIX8",
   },
   [10] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [712] = {
  fname = "SetTrackFreeModeState",
  label = "US_SetTrackFreeModeState",
  run = "in/out",
  desc = "Sets FREEMODE-state of a track or a TrackStateChunk; enables Track-Free Item Positioning.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "0 - off, 1 - on",
    name = "FREEMODESTATE",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [713] = {
  fname = "SetTrackRecState",
  label = "US_SetTrackRecState",
  run = "in/out",
  desc = "Sets REC, that sets the Recording-state of the track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "set to 1(armed) or 0(unarmed)    ",
    name = "ARMSTATE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the InputChannel\
-1 - No Input\
1-16(more?) - Mono Input Channel\
1024 - Stereo Channel 1 and 2\
1026 - Stereo Channel 3 and 4\
1028 - Stereo Channel 5 and 6\
...\
5056 - Virtual MIDI Keyboard all Channels\
5057 - Virtual MIDI Keyboard Channel 1\
...\
5072 - Virtual MIDI Keyboard Channel 16\
5088 - All MIDI Inputs - All Channels\
5089 - All MIDI Inputs - Channel 1\
...\
5104 - All MIDI Inputs - Channel 16",
    name = "INPUTCHANNEL",
   },
   [4] = {
    type = "INTEGER MONITOR",
    desc = "0 monitor off, 1 monitor on, 2 monitor on tape audio style    ",
    name = "INPUT",
   },
   [5] = {
    type = "INTEGER",
    desc = "the rec-input type\
0 input(Audio or Midi)\
1 Record Output Stereo\
2 Disabled, Input Monitoring Only\
3 Record Output Stereo, Latency Compensated\
4 Record Output MIDI\
5 Record Output Mono\
6 Record Output Mono, Latency Compensated\
7 MIDI overdub\
8 MIDI replace\
9 MIDI touch replace\
10 Record Output Multichannel\
11 Record Output Multichannel, Latency Compensated \
12 Record Input Force Mono\
13 Record Input Force Stereo\
14 Record Input Force Multichannel\
15 Record Input Force MIDI\
16 MIDI latch replace",
    name = "RECINPUT",
   },
   [6] = {
    type = "INTEGER",
    desc = "Monitor Trackmedia when recording, 0 is off, 1 is on",
    name = "MONITORWHILEREC",
   },
   [7] = {
    type = "INTEGER",
    desc = "preserve PDC delayed monitoring in media items",
    name = "PRESPDCDELAY",
   },
   [8] = {
    type = "INTEGER",
    desc = "0 Primary Recording-Path only, 1 Secondary Recording-Path only, 2 Primary Recording Path and Secondary Recording Path(for invisible backup)",
    name = "RECORDINGPATH",
   },
   [9] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [714] = {
  fname = "SetTrackVUState",
  label = "US_SetTrackVUState",
  run = "in/out",
  desc = "Sets VU-state of a track or a TrackStateChunk; the way metering shows.\
\
Has no real effect on master track.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "0 MultiChannelMetering is off, 2 MultichannelMetering is on, 3 Metering is off;seems to have no effect on MasterTrack",
    name = "VUSTATE",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [715] = {
  fname = "SetTrackHeightState",
  label = "US_SetTrackHeightState",
  run = "in/out",
  desc = "Sets TRACKHEIGHT-state; the height and compacted state of the track or a TrackStateChunk.\
\
Has no visible effect on the master-track.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "24 up to 443 pixels",
    name = "HEIGHT",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, trackheight is not locked; 1, trackheight is locked",
    name = "LOCKEDTRACKHEIGHT",
   },
   [4] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [716] = {
  fname = "SetTrackINQState",
  label = "US_SetTrackINQState",
  run = "in/out",
  desc = "Sets INQ-state, mostly the quantize-settings for MIDI, of a track or a TrackStateChunk, as set in the \"Track: View track recording settings (MIDI quantize, file format/path) for last touched track\"-dialog (action 40604)\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "quantize MIDI; 0 or 1",
    name = "QUANTMIDI",
   },
   [3] = {
    type = "INTEGER",
    desc = "quantize to position; -1,prev; 0, nearest; 1, next",
    name = "QUANTPOS",
   },
   [4] = {
    type = "INTEGER",
    desc = "quantize note-offs; 0 or 1",
    name = "QUANTNOTEOFFS",
   },
   [5] = {
    type = "NUMBER",
    desc = "quantize to (fraction of beat)",
    name = "QUANTTOFRACTBEAT",
   },
   [6] = {
    type = "INTEGER",
    desc = "quantize strength; -128 to 127",
    name = "QUANTSTRENGTH",
   },
   [7] = {
    type = "INTEGER",
    desc = "swing strength; -128 to 127",
    name = "SWINGSTRENGTH",
   },
   [8] = {
    type = "INTEGER",
    desc = "quantize range minimum; -128 to 127",
    name = "QUANTRANGEMIN",
   },
   [9] = {
    type = "INTEGER",
    desc = "quantize range maximum; -128 to 127",
    name = "QUANTRANGEMAX",
   },
   [10] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [717] = {
  fname = "SetTrackNChansState",
  label = "US_SetTrackNChansState",
  run = "in/out",
  desc = "Sets NCHAN-state; the number of channels in this track or a TrackStateChunk, as set in the routing.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "2 to 64, counted every second channel (2,4,6,8,etc) with stereo-tracks. Unknown, if Multichannel and Mono-tracks count differently.",
    name = "NCHANS",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [718] = {
  fname = "SetTrackBypFXState",
  label = "US_SetTrackBypFXState",
  run = "in/out",
  desc = "Sets FX, FX-Bypass-state of the track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "0 bypass, 1 activate fx; has only effect, if FX or instruments are added to this track",
    name = "FXBYPASSSTATE",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [719] = {
  fname = "SetTrackPerfState",
  label = "US_SetTrackPerfState",
  run = "in/out",
  desc = "Sets PERF, the TrackPerformance-State of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "performance-state\
0 - allow anticipative FX + allow media buffering\
1 - allow anticipative FX + prevent media buffering\
2 - prevent anticipative FX + allow media buffering\
3 - prevent anticipative FX + prevent media buffering",
    name = "PERF",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [720] = {
  fname = "SetTrackMIDIOutState",
  label = "US_SetTrackMIDIOutState",
  run = "in/out",
  desc = "Sets MIDIOUT, the state of MIDI out for this track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "%-1 no output\
 416 %- microsoft GS wavetable synth-send to original channels\
 417-432 %- microsoft GS wavetable synth-send to channel state minus 416\
 -31 %- no Output, send to original channel 1\
 -16 %- no Output, send to original channel 16",
    name = "MIDIOUTSTATE",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [721] = {
  fname = "SetTrackMainSendState",
  label = "US_SetTrackMainSendState",
  run = "in/out",
  desc = "Sets MAINSEND, as set in the routing-settings, of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk, if tracknumber=-1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "on(1) or off(0)",
    name = "MAINSENDON",
   },
   [3] = {
    type = "INTEGER",
    desc = "the ParentChannels(0-64), interpreted as beginning with ParentChannels to ParentChannels+NCHAN",
    name = "PARENTCHANNELS",
   },
   [4] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [722] = {
  fname = "SetTrackLockState",
  label = "US_SetTrackLockState",
  run = "in/out",
  desc = "Sets LOCK-State, as set by the menu entry Lock Track Controls, of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "1 - locked, 0 - unlocked",
    name = "LOCKEDSTATE",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [723] = {
  fname = "SetTrackLayoutNames",
  label = "US_SetTrackLayoutNames",
  run = "in/out",
  desc = "Sets LAYOUTS, the MCP and TCP-layout by name of the layout as defined in the theme, of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "name of the TrackControlPanel-Layout from the theme to use",
    name = "TCP_LAYOUTNAME",
   },
   [3] = {
    type = "STRING",
    desc = "name of the MixerControlPanel-Layout from the theme to use",
    name = "MCP_LAYOUTNAME",
   },
   [4] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [724] = {
  fname = "SetTrackAutomodeState",
  label = "US_SetTrackAutomodeState",
  run = "in/out",
  desc = "Sets AUTOMODE-State, as set by the menu entry Set Track Automation Mode, for a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "0 - trim/read, 1 - read, 2 - touch, 3 - write, 4 - latch",
    name = "AUTOMODESTATE",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [725] = {
  fname = "SetTrackIcon_Filename",
  label = "US_SetTrackIcon_Filename",
  run = "in/out",
  desc = "Sets TRACKIMGFN, the trackicon-filename with path, of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "filename+path of the imagefile to use as the trackicon; \"\", to remove track-icon",
    name = "ICONFILENAME_WITH_PATH",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [726] = {
  fname = "SetTrackMidiInputChanMap",
  label = "US_SetTrackMidiInputChanMap",
  run = "in/out",
  desc = "Sets MIDI_INPUT_CHANMAP, as set in the Input-MIDI->Map Input to Channel menu, of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "0 for channel 1, 2 for channel 2, etc. -1 if not existing; nil, to remove MidiInputChanMap",
    name = "INPUTCHANMAP",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [727] = {
  fname = "SetTrackMidiCTL",
  label = "US_SetTrackMidiCTL",
  run = "in/out",
  desc = "sets MIDICTL-state, the linkage to Midi-Channels of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "unknown; nil, to remove this setting completely",
    name = "LINKEDTOMIDICHANNEL",
   },
   [3] = {
    type = "INTEGER",
    desc = "unknown",
    name = "UNKNOWN",
   },
   [4] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [728] = {
  fname = "SetTrackID",
  label = "US_SetTrackID",
  run = "in/out",
  desc = "sets the track-id, which must be a valid GUID, of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a valid GUID. Can be generated with the native Reaper-function reaper.genGuid()",
    name = "GUID",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [729] = {
  fname = "SetTrackMidiColorMapFn",
  label = "US_SetTrackMidiColorMapFn",
  run = "in/out",
  desc = "sets the filename+path to the MIDI-ColorMap-graphicsfile of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "filename+path to the MIDI-ColorMap-file; \"\", to remove it",
    name = "MIDI_COLORMAPFN",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [730] = {
  fname = "SetTrackMidiBankProgFn",
  label = "US_SetTrackMidiBankProgFn",
  run = "in/out",
  desc = "sets the filename+path to the MIDI-Bank-Prog-file of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "filename+path to the MIDI-Bank-Prog-file; \"\", to remove it",
    name = "MIDIBANKPROGFN",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [731] = {
  fname = "SetTrackMidiTextStrFn",
  label = "US_SetTrackMidiTextStrFn",
  run = "in/out",
  desc = "sets the filename+path to the MIDI-Text-Str-file of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "filename+path to the MIDI-Text-Str-file; \"\", to remove it",
    name = "MIDITEXTSTRFN",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [732] = {
  fname = "SetTrackPanMode",
  label = "US_SetTrackPanMode",
  run = "in/out",
  desc = "sets the panmode for a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the Panmode of the track\
nil - Project Default\
0 - Reaper 3.x balance (deprecated)\
3 - Stereo Balance/ Mono Pan(Default)\
5 - Stereo Balance\
6 - Dual Pan\
7 - unknown mode",
    name = "PANMODE",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [733] = {
  fname = "SetTrackWidth",
  label = "US_SetTrackWidth",
  run = "in/out",
  desc = "sets the width of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "NUMBER",
    desc = "width of the track, from -1(-100%) to 1(+100%)",
    name = "WIDTH",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [734] = {
  fname = "SetTrackScore",
  label = "US_SetTrackScore",
  run = "in/out",
  desc = "sets the SCORE of a track or a TrackStateChunk.\
\
set unknown1 to unknown4 to 0 to remove the entry from the TrackStateChunk\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "unknown",
    name = "UNKNOWN1",
   },
   [3] = {
    type = "INTEGER",
    desc = "unknown",
    name = "UNKNOWN2",
   },
   [4] = {
    type = "NUMBER",
    desc = "unknown",
    name = "UNKNOWN3",
   },
   [5] = {
    type = "NUMBER",
    desc = "unknown",
    name = "UNKNOWN4",
   },
   [6] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [735] = {
  fname = "SetTrackVolPan",
  label = "US_SetTrackVolPan",
  run = "in/out",
  desc = "sets the VOLPAN-state of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1, if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "NUMBER",
    desc = "Volume Settings; -Inf dB(0) to +12dB (3.98107170553497)",
    name = "VOL",
   },
   [3] = {
    type = "NUMBER",
    desc = "Pan Settings; -1(-100%); 0(center); 1(100% R)",
    name = "PAN",
   },
   [4] = {
    type = "NUMBER",
    desc = "Override Default Pan Track Law; 0dB(1) to -144dB(0.00000006309573)",
    name = "OVERRIDEPANLAW",
   },
   [5] = {
    type = "NUMBER",
    desc = "unknown",
    name = "UNKNOWN",
   },
   [6] = {
    type = "NUMBER",
    desc = "unknown",
    name = "UNKNOWN2",
   },
   [7] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [736] = {
  fname = "SetTrackRecCFG",
  label = "US_SetTrackRecCFG",
  run = "in/out",
  desc = "sets the RECCFG of a track or a TrackStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the string, that encodes the recording configuration of the track",
    name = "RECCFG_STRING",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of the recording-configuration of the track; \
-1, removes the reccfg-setting\
0, use default project rec-setting\
1, use track-customized rec-setting, as set in the \"Track: View track recording settings (MIDI quantize, file format/path) for last touched track\"-dialog (action 40604)",
    name = "RECCFGNR",
   },
   [4] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [737] = {
  fname = "GetAllLockedTracks",
  label = "US_GetAllLockedTracks",
  run = "in/out",
  desc = "returns a trackstring with all tracknumbers of tracks, that are locked, as well as one with all tracknumbers of tracks, that are unlocked.\
\
returns an empty locked_trackstring, if none is locked, returns an empty unlocked_trackstring if all are locked.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the tracknumbers of all tracks, that are locked; empty string if none is locked",
    name = "LOCKED_TRACKSTRING",
   },
   [2] = {
    type = "STRING",
    desc = "the tracknumbers of all tracks, that are NOT locked; empty string if all are locked",
    name = "UNLOCKED_TRACKSTRING",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [738] = {
  fname = "GetAllSelectedTracks",
  label = "US_GetAllSelectedTracks",
  run = "in/out",
  desc = "returns a trackstring with all tracknumbers of tracks, that are selected, as well as one with all tracknumbers of tracks, that are unselected.\
returns an empty selected_trackstring, if none is selected, returns an empty unselected_trackstring if all are selected.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the tracknumbers of all tracks, that are selected; empty string if none is selected",
    name = "SELECTED_TRACKSTRING",
   },
   [2] = {
    type = "STRING",
    desc = "the tracknumbers of all tracks, that are NOT selected; empty string if all are selected",
    name = "UNSELECTED_TRACKSTRING",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [739] = {
  fname = "GetTrackSelection_TrackStateChunk",
  label = "US_GetTrackSelection_TrackStateChunk",
  run = "in/out",
  desc = "returns selection of the track.    \
\
It's the entry SEL.\
\
Works only with statechunks stored in ProjectStateChunks, due API-limitations!\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, track is unselected; 1, track is selected",
    name = "SELECTION_STATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a TrackStateChunk whose selection-state you want to retrieve; works only with TrackStateChunks from ProjectStateChunks!",
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [740] = {
  fname = "SetTrackSelection_TrackStateChunk",
  label = "US_SetTrackSelection_TrackStateChunk",
  run = "in/out",
  desc = "set selection of the track in a TrackStateChunk.    \
\
It's the entry SEL.\
\
Works only with statechunks stored in ProjectStateChunks, due API-limitations!\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered TrackStateChunk with the new selection",
    name = "ALTEREDTRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "0, track is unselected; 1, track is selected",
    name = "SELECTION_STATE",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk whose selection-state you want to set; works only with TrackStateChunks from ProjectStateChunks!",
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [741] = {
  fname = "SetAllTracksSelected",
  label = "US_SetAllTracksSelected",
  run = "in/out",
  desc = "Sets all tracks selected(if selected is true) of unselected(if selected is false)\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "returns -1 in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if all tracks shall be selected, false if all shall be deselected",
    name = "SELECTED",
   },
  },
  sp_api = "ultraschall",
 },
 [742] = {
  fname = "SetTracksSelected",
  label = "US_SetTracksSelected",
  run = "in/out",
  desc = "Sets tracks in trackstring selected. If reset is set to true, then the previous selection will be discarded.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "returns -1 in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string with the tracknumbers, separated by a comma; nil or \"\", deselects all",
    name = "TRACKSTRING",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, any previous selection will be discarded; false, it will be kept",
    name = "RESET",
   },
  },
  sp_api = "ultraschall",
 },
 [743] = {
  fname = "SetTracksToLocked",
  label = "US_SetTracksToLocked",
  run = "in/out",
  desc = "sets tracks in trackstring locked. \
returns false in case or error, true in case of success",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success, false in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tracknumbers, separated with a ,",
    name = "TRACKSTRING",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "reset lockedstate of other tracks\
true - resets the locked-state of all tracks not included in trackstring\
false - the lockedstate of tracks not in trackstring is retained",
    name = "RESET",
   },
  },
  sp_api = "ultraschall",
 },
 [744] = {
  fname = "SetTracksToUnlocked",
  label = "US_SetTracksToUnlocked",
  run = "in/out",
  desc = "sets tracks in trackstring unlocked. \
returns false in case or error, true in case of success",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success, false in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tracknumbers, separated with a ,",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [745] = {
  fname = "SetTrackStateChunk_Tracknumber",
  label = "US_SetTrackStateChunk_Tracknumber",
  run = "in/out",
  desc = "Sets the trackstatechunk for track tracknumber. Undo flag is a performance/caching hint.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success; false in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber, 0 for master track, 1 for track 1, 2 for track 2, etc.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the trackstatechunk, you want to set this track with",
    name = "TRACKSTATECHUNK",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "Undo flag is a performance/caching hint.",
    name = "UNDO",
   },
  },
  sp_api = "ultraschall",
 },
 [746] = {
  fname = "SetTrackGroupFlagsState",
  label = "US_SetTrackGroupFlagsState",
  run = "in/out",
  desc = "Set the GroupFlags-state of a track or trackstatechunk.\
You can reach the Group-Flag-Settings in the context-menu of a track.\
\
The groups_bitfield_table can contain up to 23 entries. Every entry represents one of the checkboxes in the Track grouping parameters-dialog\
\
Each entry is a bitfield, that represents the groups, in which this flag is set to checked or unchecked.\
\
So if you want to set Volume Master(table entry 1) to checked in Group 1(2^0=1) and 3(2^2=4):\
  groups_bitfield_table[1]=groups_bitfield_table[1]+1+4\
\
The following flags(and their accompanying array-entry-index) are available:\
                       1 - Volume Master\
                       2 - Volume Follow\
                       3 - Pan Master\
                       4 - Pan Follow\
                       5 - Mute Master\
                       6 - Mute Follow\
                       7 - Solo Master\
                       8 - Solo Follow\
                       9 - Record Arm Master\
                       10 - Record Arm Follow\
                       11 - Polarity/Phase Master\
                       12 - Polarity/Phase Follow\
                       13 - Automation Mode Master\
                       14 - Automation Mode Follow\
                       15 - Reverse Volume\
                       16 - Reverse Pan\
                       17 - Do not master when slaving\
                       18 - Reverse Width\
                       19 - Width Master\
                       20 - Width Follow\
                       21 - VCA Master\
                       22 - VCA Follow\
                       23 - VCA pre-FX Follow\
                       24 - Media/Razor Edit Lead\
                       25 - Media/Razor Edit Lead\
\
This function will work only for Groups 1 to 32. To set Groups 33 to 64, use <a href=\"#SetTrackGroupFlags_HighState\">SetTrackGroupFlags_HighState</a> instead!\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all bitfields with all groupflag-settings",
    name = "GROUPS_BITFIELD_TABLE",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [747] = {
  fname = "SetTrackGroupFlags_HighState",
  label = "US_SetTrackGroupFlags_HighState",
  run = "in/out",
  desc = "Set the GroupFlags-state of a track or trackstatechunk.\
You can reach the Group-Flag-Settings in the context-menu of a track.\
\
The groups_bitfield_table can contain up to 23 entries. Every entry represents one of the checkboxes in the Track grouping parameters-dialog\
\
Each entry is a bitfield, that represents the groups, in which this flag is set to checked or unchecked.\
\
So if you want to set Volume Master(table entry 1) to checked in Group 33(2^0=1) and 35(2^2=4):\
  groups_bitfield_table[1]=groups_bitfield_table[1]+1+4\
\
The following flags(and their accompanying array-entry-index) are available:\
                       1 - Volume Master\
                       2 - Volume Follow\
                       3 - Pan Master\
                       4 - Pan Follow\
                       5 - Mute Master\
                       6 - Mute Follow\
                       7 - Solo Master\
                       8 - Solo Follow\
                       9 - Record Arm Master\
                       10 - Record Arm Follow\
                       11 - Polarity/Phase Master\
                       12 - Polarity/Phase Follow\
                       13 - Automation Mode Master\
                       14 - Automation Mode Follow\
                       15 - Reverse Volume\
                       16 - Reverse Pan\
                       17 - Do not master when slaving\
                       18 - Reverse Width\
                       19 - Width Master\
                       20 - Width Follow\
                       21 - VCA Master\
                       22 - VCA Follow\
                       23 - VCA pre-FX Follow\
                       24 - Media/Razor Edit Lead\
                       25 - Media/Razor Edit Lead\
\
This function will work only for Groups 33(2^0) to 64(2^31). To set Groups 1 to 32, use <a href=\"#SetTrackGroupFlagsState\">SetTrackGroupFlagsState</a> instead!\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all bitfields with all groupflag-settings",
    name = "GROUPS_BITFIELD_TABLE",
   },
   [3] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [748] = {
  fname = "ConvertTrackstringToArray",
  label = "US_ConvertTrackstringToArray",
  run = "in/out",
  desc = "returns all tracknumbers from trackstring, that can be used as tracknumbers, as an array.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of tracks in trackstring",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array that contains all tracknumbers in trackstring",
    name = "INDIVIDUAL_TRACKNUMBERS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the trackstring to check, if it's a valid one",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [749] = {
  fname = "GetTrackPlayOffsState",
  label = "US_GetTrackPlayOffsState",
  run = "in/out",
  desc = "returns state of Media playback offset\
\
It's the entry PLAYOFFS\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "common values settable via UI are: -0.5(-500ms) to 0.5(500ms) or -8192 to 8192(samples) ",
    name = "OFFSET",
   },
   [2] = {
    type = "INTEGER",
    desc = "flags for Media playback offset-settings\
&1=0, Media playback offset-checkbox is on; &1=1, Media playback offset-checkbox is off\
&2=0, value is in milliseconds; &2=2, value is in samples",
    name = "MEDIA_PLAYBACK_FLAGS",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master track; -1, if you want to use the parameter TrackStateChunk instead.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "a TrackStateChunk that you want to use, instead of a given track",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [750] = {
  fname = "SetTrackPlayOffsState",
  label = "US_SetTrackPlayOffsState",
  run = "in/out",
  desc = "Set the AutoRecArmState for a track or a TrackStateChunk.\
\
It's the entry PLAYOFFS\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the track, beginning with 1; 0 for master-track; -1 if you want to use parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "use a trackstatechunk instead of a track; only used when tracknumber is -1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
   [3] = {
    type = "NUMBER",
    desc = "common values settable via UI are: -0.5(-500ms) to 0.5(500ms) or -8192 to 8192(samples) ",
    name = "OFFSET",
   },
   [4] = {
    type = "INTEGER",
    desc = "flags for Media playback offset-settings\
&1=0, Media playback offset-checkbox is on; &1=1, Media playback offset-checkbox is off\
&2=0, value is in milliseconds; &2=2, value is in samples",
    name = "MEDIA_PLAYBACK_FLAGS",
   },
  },
  sp_api = "ultraschall",
 },
 [751] = {
  fname = "AddNormalMarker",
  label = "US_AddNormalMarker",
  run = "in/out",
  desc = "Adds a normal marker. Returns the index of the marker as marker_number.\
\
Normal markers are all markers, that don't include \"_Shownote:\" or \"_Edit\" or custommarkers with the scheme \"_custommarker:\" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the overall-marker-index, can be used for reaper's own marker-management functions",
    name = "MARKER_NUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the guid, associated with this marker",
    name = "GUID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index of the normal marker",
    name = "NORMAL_MARKER_IDX",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "position in seconds.",
    name = "POSITION",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number, that will be shown within Reaper. Can be multiple times. Use -1 to let Ultraschall-API add +1 to the highest number used.",
    name = "SHOWN_NUMBER",
   },
   [3] = {
    type = "STRING",
    desc = "the title of the marker",
    name = "MARKERTITLE",
   },
  },
  sp_api = "ultraschall",
 },
 [752] = {
  fname = "AddPodRangeRegion",
  label = "US_AddPodRangeRegion",
  run = "in/out",
  desc = "Deprecated.\
\
Adds a region, which shows the time-range from the beginning to the end of the podcast.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the overall-marker-index, can be used for reaper's own marker-management functions",
    name = "MARKER_NUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the guid of the PodRangeRegion",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "begin of the podcast in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "end of the podcast in seconds",
    name = "ENDPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [753] = {
  fname = "GetMarkerByName",
  label = "US_GetMarkerByName",
  run = "in/out",
  desc = "Get all markers/regions that have a certain name. This function is not case-sensitive.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found markers/regions",
    name = "COUNT_MARKERS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all marker/region-numbers of the found markers; counts only regions or markers(depending on parameter searchisrgn); markernumbers are 0-based",
    name = "FOUNDMARKERS",
   },
   [3] = {
    type = "ARRAY",
    desc = "the guids of all markers/regions found",
    name = "FOUND_GUIDS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name to look for; must be exact; not case-sensitive",
    name = "SEARCHNAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, search only within regions; false, search only within markers",
    name = "SEARCHISRGN",
   },
  },
  sp_api = "ultraschall",
 },
 [754] = {
  fname = "GetMarkerByName_Pattern",
  label = "US_GetMarkerByName_Pattern",
  run = "in/out",
  desc = "Get all markers/regions that have a certain character-sequence in their name. This function is not case-sensitive.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found markers/regions",
    name = "COUNT_MARKERS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all marker/region-numbers of the found markers; counts only regions or markers(depending on parameter searchisrgn)",
    name = "FOUNDMARKERS",
   },
   [3] = {
    type = "ARRAY",
    desc = "the guids of all found markers/regions",
    name = "FOUNDGUIDS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name to look for; a character-sequence that shall be part of the name; not case-sensitive",
    name = "SEARCHNAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, search only within regions; false, search only within markers",
    name = "SEARCHISRGN",
   },
  },
  sp_api = "ultraschall",
 },
 [755] = {
  fname = "GetMarkerAndRegionsByIndex",
  label = "US_GetMarkerAndRegionsByIndex",
  run = "in/out",
  desc = "Returns the values of a certain marker/region. The numbering of idx is either only for the markers or for regions, depending on what you set with parameter searchisrgn.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the name of the marker/region",
    name = "NAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the shown number of the marker/region",
    name = "MARKRGNINDEXNUMBER",
   },
   [3] = {
    type = "INTEGER",
    desc = "the color-value of the marker/region",
    name = "COLOR",
   },
   [4] = {
    type = "NUMBER",
    desc = "the position of the marker/region",
    name = "POS",
   },
   [5] = {
    type = "NUMBER",
    desc = "the end of the region",
    opt = {
     use = false,
    },
    name = "RGNEND",
   },
   [6] = {
    type = "STRING",
    desc = "the guid of the marker/region; if it's a marker, the retval rgnend will be nil!",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the requested marker/region; counts only within either markers or regions, depending on what you've set searchisrgn to; 1-based!",
    name = "IDX",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, search only within regions; false, search only within markers",
    name = "SEARCHISRGN",
   },
  },
  sp_api = "ultraschall",
 },
 [756] = {
  fname = "SetMarkerByIndex",
  label = "US_SetMarkerByIndex",
  run = "in/out",
  desc = "Sets the values of a certain marker/region. The numbering of idx is either only for the markers or for regions, depending on what you set with parameter searchisrgn.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting the marker/region was successful; false, setting of the marker/region was unsuccessful.",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the requested marker/region; counts only within either markers or regions, depending on what you've set searchisrgn to",
    name = "IDX",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, search only within regions; false, search only within markers",
    name = "SEARCHISRGN",
   },
   [3] = {
    type = "INTEGER",
    desc = "the shown-number of the region/marker; no duplicate numbers for regions allowed; nil to keep previous shown_number",
    name = "SHOWN_NUMBER",
   },
   [4] = {
    type = "NUMBER",
    desc = "the position of the marker/region in seconds; nil to keep previous position",
    name = "POSITION",
   },
   [5] = {
    type = "POSITION",
    desc = "the end of the region in seconds; nil to keep previous region-end",
    name = "RGNEND",
   },
   [6] = {
    type = "STRING",
    desc = "the name of the marker/region; nil to keep the previous name",
    name = "NAME",
   },
   [7] = {
    type = "INTEGER",
    desc = "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000; nil to keep the previous color",
    name = "COLOR",
   },
   [8] = {
    type = "INTEGER",
    desc = "flags&1 to clear name; 0, keep it; nil to use the previous setting",
    name = "FLAGS",
   },
  },
  sp_api = "ultraschall",
 },
 [757] = {
  fname = "AddEditMarker",
  label = "US_AddEditMarker",
  run = "in/out",
  desc = "Adds an Edit marker. Returns the index of the marker as marker_number. \
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the overall-marker-index, can be used for reaper's own marker-management functions",
    name = "MARKER_NUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the guid, associated with this marker",
    name = "GUID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index if the edit-marker within all edit-markers; 1-based",
    name = "EDIT_MARKER_IDX",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "position in seconds.",
    name = "POSITION",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number, that will be shown within Reaper. Can be multiple times. Use -1 to let Reaper decide the number.",
    name = "SHOWN_NUMBER",
   },
   [3] = {
    type = "STRING",
    desc = "the title of the edit-marker; will be shown as _Edit:edittitle",
    name = "EDITTITLE",
   },
  },
  sp_api = "ultraschall",
 },
 [758] = {
  fname = "CountNormalMarkers",
  label = "US_CountNormalMarkers",
  run = "in/out",
  desc = "Counts all normal markers. \
\
Normal markers are all markers, that don't include \"_Shownote:\" or \"_Edit\" or custommarkers with the scheme \"_custommarker:\" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of normal markers",
    name = "NUMBER_OF_MARKERS",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the starttime, from which to count the markers",
    opt = {
     use = false,
    },
    name = "STARTTIME",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endtime, to which to count the markers",
    opt = {
     use = false,
    },
    name = "ENDTIME",
   },
  },
  sp_api = "ultraschall",
 },
 [759] = {
  fname = "CountEditMarkers",
  label = "US_CountEditMarkers",
  run = "in/out",
  desc = "Counts all edit-markers.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of edit markers",
    name = "NUMBER_OF_EDIT_MARKERS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [760] = {
  fname = "GetPodRangeRegion",
  label = "US_GetPodRangeRegion",
  run = "in/out",
  desc = "Deprecated.\
\
Gets the start_position and the end_position of the PodRangeRegion.\
\
returns -1 if no PodRangeRegion exists",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "beginning of the podrangeregion, that marks the beginning of the podcast",
    name = "START_POSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "end of the podrangeregion, that marks the end of the podcast",
    name = "END_POSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the guid associated with this marker",
    name = "GUID",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [761] = {
  fname = "EnumerateNormalMarkers",
  label = "US_EnumerateNormalMarkers",
  run = "in/out",
  desc = "Get the data of a normal marker. \
Normal markers are all markers, that don't include \"_Shownote:\" or \"_Edit\" or custommarkers with the scheme \"_custommarker:\" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).\
\
Returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "overallmarker/regionnumber of marker beginning with 1 for the first marker; ignore the order of first,second,etc creation of\
markers but counts from position 00:00:00 to end of project. So if you created a marker at position 00:00:00 and move the first created marker to\
the end of the timeline, it will be the last one, NOT the first one in the retval! For use with reaper's own marker-functions.",
    name = "RETNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "shown number of the marker",
    name = "SHOWN_NUMBER",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the marker",
    name = "POSITION",
   },
   [4] = {
    type = "STRING",
    desc = "the name of the marker",
    name = "MARKERTITLE",
   },
   [5] = {
    type = "STRING",
    desc = "the guid of the enumerated marker",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the marker(normal markers only). Refer <a href=\"#CountNormalMarkers\">ultraschall.CountNormalMarkers</a> for getting the number of normal markers.",
    name = "NUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [762] = {
  fname = "EnumerateEditMarkers",
  label = "US_EnumerateEditMarkers",
  run = "in/out",
  desc = "Gets the data of an edit marker.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "overallmarker/regionnumber of marker beginning with 1 for the first marker; ignore the order of first,second,etc creation of\
markers but counts from position 00:00:00 to end of project. So if you created a marker at position 00:00:00 and move the first created marker to\
the end of the timeline, it will be the last one, NOT the first one in the retval! For use with reaper's own marker-functions.",
    name = "RETNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "indexnumber of the marker",
    name = "SHOWN_NUMBER",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the marker",
    name = "POSITION",
   },
   [4] = {
    type = "STRING",
    desc = "the name of the marker",
    name = "EDITTITLE",
   },
   [5] = {
    type = "STRING",
    desc = "the guid of the editmarker",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the edit-marker. Refer <a href=\"#CountEditMarkers\">ultraschall.CountEditMarkers</a> for getting the number of edit-markers.",
    name = "EDIT_INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [763] = {
  fname = "GetAllEditMarkers",
  label = "US_GetAllEditMarkers",
  run = "in/out",
  desc = "returns the number of editmarkers and an array with each editmarker in the format:\
\
    editmarkersarray[index][0] - position\
    editmarkersarray[index][1] - name\
    editmarkersarray[index][2] - idx\
    editmarkersarray[index][3] - guid\
    ",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of editmarkers returned",
    name = "NUMBER_OF_EDITMARKERS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all the edit-markers of the project",
    name = "EDITMARKERSARRAY",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [764] = {
  fname = "GetAllNormalMarkers",
  label = "US_GetAllNormalMarkers",
  run = "in/out",
  desc = "returns the number of normalmarkers and an array with each normalmarker in the format:\
\
normalmarkersarray[index][0] - position\
normalmarkersarray[index][1] - name\
normalmarkersarray[index][2] - idx of the marker within all markers in project\
normalmarkersarray[index][3] - the shown index number of the marker\
normalmarkersarray[index][4] - the guid of the marker\
\
\
Normal markers are all markers, that don't include \"_Shownote:\" or \"_Edit\" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of normalmarkers returned",
    name = "NUMBER_OF_NORMALMARKERS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array, that holds all normal markers of the project",
    name = "NORMALMARKERSARRAY",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [765] = {
  fname = "GetAllMarkers",
  label = "US_GetAllMarkers",
  run = "in/out",
  desc = "To get all Markers in the project(normal, edit, chapter), regardless of their category.\
Doesn't return regions!\
\
returns the number of markers and an array with each marker in the format:\
\
    markersarray[index][0] - position\
    markersarray[index][1] - name\
    markersarray[index][2] - indexnumber of the marker within all markers in the project\
    markersarray[index][3] - the shown index-number\
    markersarray[index][4] - the color of the marker\
    markersarray[index][5] - the guid of the marker\
    ",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of markers returned",
    name = "NUMBER_OF_ALLMARKERS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array, that holds all markers(not regions!) of the project",
    name = "ALLMARKERSARRAY",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [766] = {
  fname = "SetNormalMarker",
  label = "US_SetNormalMarker",
  run = "in/out",
  desc = "Sets values of a normal Marker(no _Chapter:, _Shownote:, etc). Returns true if successful and false if not(i.e. marker doesn't exist)\
\
Normal markers are all markers, that don't include \"_Shownote:\" or \"_Edit\" or custommarkers with the scheme \"_custommarker:\" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true if successful and false if not(i.e. marker doesn't exist)",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the normal marker",
    name = "NUMBER",
   },
   [2] = {
    type = "NUMBER",
    desc = "position of the marker in seconds",
    name = "POSITION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of the marker",
    name = "SHOWN_NUMBER",
   },
   [4] = {
    type = "STRING",
    desc = "title of the marker",
    name = "MARKERTITLE",
   },
  },
  sp_api = "ultraschall",
 },
 [767] = {
  fname = "SetEditMarker",
  label = "US_SetEditMarker",
  run = "in/out",
  desc = "Sets values of an Edit Marker. Returns true if successful and false if not(i.e. marker doesn't exist)\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true if successful and false if not(i.e. marker doesn't exist)",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the edit marker",
    name = "EDIT_INDEX",
   },
   [2] = {
    type = "NUMBER",
    desc = "position of the marker in seconds",
    name = "POSITION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of the marker",
    name = "SHOWN_NUMBER",
   },
   [4] = {
    type = "STRING",
    desc = "title of the marker",
    name = "MARKERTITLE",
   },
  },
  sp_api = "ultraschall",
 },
 [768] = {
  fname = "SetPodRangeRegion",
  label = "US_SetPodRangeRegion",
  run = "in/out",
  desc = "Deprecated\
Sets \"_PodRange:\"-Region\
\
returns -1 if it fails.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of the region, -1 if it fails",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "begin of the podcast in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "end of the podcast in seconds",
    name = "ENDPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [769] = {
  fname = "DeletePodRangeRegion",
  label = "US_DeletePodRangeRegion",
  run = "in/out",
  desc = "deprecated\
deletes the PodRange-Region. \
\
Returns false if unsuccessful",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if deleting was successful; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [770] = {
  fname = "DeleteNormalMarker",
  label = "US_DeleteNormalMarker",
  run = "in/out",
  desc = "Deletes a Normal-Marker. Returns true if successful and false if not(i.e. marker doesn't exist) Use <a href=\"#EnumerateNormalMarkers\">ultraschall.EnumerateNormalMarkers</a> to get the correct number.\
\
Normal markers are all markers, that don't include \"_Shownote:\" or \"_Edit\" or custommarkers with the scheme \"_custommarker:\" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of a normal marker; 0-based",
    name = "NUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [771] = {
  fname = "DeleteEditMarker",
  label = "US_DeleteEditMarker",
  run = "in/out",
  desc = "Deletes an _Edit:-Marker. Returns true if successful and false if not(i.e. marker doesn't exist) Use <a href=\"#EnumerateEditMarkers\">ultraschall.EnumerateEditMarkers</a> to get the correct number.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of an edit marker",
    name = "EDIT_INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [772] = {
  fname = "ExportEditMarkersToFile",
  label = "US_ExportEditMarkersToFile",
  run = "in/out",
  desc = "Export Edit-Markers (not regions!) to filename_with_path. \
\
Each line in the exportfile contains an entry for such an edit-marker in the format:\
\
hh:mm:ss.mss Title\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "1 in case of success, -1 if it failed",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the export-file",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "NUMBER",
    desc = "beginning of the podcast in seconds",
    name = "PODRANGESTART",
   },
   [3] = {
    type = "NUMBER",
    desc = "end of the podcast in seconds",
    name = "PODRANGEEND",
   },
  },
  sp_api = "ultraschall",
 },
 [773] = {
  fname = "ExportNormalMarkersToFile",
  label = "US_ExportNormalMarkersToFile",
  run = "in/out",
  desc = "Export Normal-Markers to filename_with_path. Returns -1 in case of error.\
\
Normal markers are all markers, that don't include \"_Shownote:\" or \"_Edit\" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "1 in case of success, -1 if it failed",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the export-file",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "NUMBER",
    desc = "beginning of the podcast in seconds",
    name = "PODRANGESTART",
   },
   [3] = {
    type = "NUMBER",
    desc = "end of the podcast in seconds",
    name = "PODRANGEEND",
   },
  },
  sp_api = "ultraschall",
 },
 [774] = {
  fname = "ImportEditFromFile",
  label = "US_ImportEditFromFile",
  run = "in/out",
  desc = "Imports editentries from a file and returns an array of the imported values.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "ARRAY",
    desc = "array[0] is position of marker+PodRangeStart, array[1] is name of the marker",
    name = "CHAPTERS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "markerfile to be imported",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "NUMBER",
    desc = "podcast-start-offset",
    name = "PODRANGESTART",
   },
  },
  sp_api = "ultraschall",
 },
 [775] = {
  fname = "ImportMarkersFromFile",
  label = "US_ImportMarkersFromFile",
  run = "in/out",
  desc = "Imports markerentries from a file and returns an array of the imported values.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "ARRAY",
    desc = "array[0] is position of marker+PodRangeStart, array[1] is name of the marker",
    name = "CHAPTERS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "markerfile to be imported",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "NUMBER",
    desc = "podcast-start-offset",
    name = "PODRANGESTART",
   },
  },
  sp_api = "ultraschall",
 },
 [776] = {
  fname = "MarkerToEditMarker",
  label = "US_MarkerToEditMarker",
  run = "in/out",
  desc = "Converts a normal-marker to an edit-marker.\
\
Normal markers are all markers, that don't include \"_Shownote:\" or \"_Edit\" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "overallmarker/regionnumber of marker beginning with 1 for the first marker; ignore the order of first,second,etc creation of\
markers but counts from position 00:00:00 to end of project. So if you created a marker at position 00:00:00 and move the first created marker to\
the end of the timeline, it will be the last one, NOT the first one in the retval! For use with reaper's own marker-functions.",
    name = "IDX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the shown number of the marker",
    name = "SHOWN_NUMBER",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the marker in seconds",
    name = "POSITION",
   },
   [4] = {
    type = "STRING",
    desc = "the markertitle",
    name = "MARKERTITLE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the normal-marker. Refer <a href=\"#CountNormalMarkers\">ultraschall.CountNormalMarkers</a> for getting the number of normal-markers.",
    name = "MARKERINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [777] = {
  fname = "EditToMarker",
  label = "US_EditToMarker",
  run = "in/out",
  desc = "Converts an edit-marker to a normal marker.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "overallmarker/regionnumber of marker beginning with 1 for the first marker; ignore the order of first,second,etc creation of\
markers but counts from position 00:00:00 to end of project. So if you created a marker at position 00:00:00 and move the first created marker to\
the end of the timeline, it will be the last one, NOT the first one in the retval! For use with reaper's own marker-functions.",
    name = "IDX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the shown number of the marker",
    name = "SHOWN_NUMBER",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the marker in seconds",
    name = "POSITION",
   },
   [4] = {
    type = "STRING",
    desc = "the markertitle",
    name = "MARKERTITLE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "number of the edit-marker. Refer <a href=\"#CountEditMarkers\">ultraschall.CountEditMarkers</a> for getting the number of edit-markers.",
    name = "EDIT_INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [778] = {
  fname = "GetMarkerByScreenCoordinates",
  label = "US_GetMarkerByScreenCoordinates",
  run = "in/out",
  desc = "returns the markers at a given absolute-x-pixel-position. It sees markers according their graphical representation in the arrange-view, not just their position! Returned string will be \"Markeridx\\npos\\nName\\nMarkeridx2\\npos2\\nName2\\n...\".    \
Will return \"\", if no marker has been found.\
\
The second returnvalue has the index of the marker within all markers and regions.\
\
Returns only markers, no time markers or regions!\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with all markernumbers, markerpositions and markertitles, separated by a newline. \
Can contain numerous markers, if there are more markers in one position.",
    name = "MARKER",
   },
   [2] = {
    type = "STRING",
    desc = "a newline separated string with all marker-index-numbers found; 0-based",
    name = "MARKER_INDEX",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the absolute x-screen-position, like current mouse-position",
    name = "XMOUSEPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [779] = {
  fname = "GetMarkerByTime",
  label = "US_GetMarkerByTime",
  run = "in/out",
  desc = "returns the markers at a given project-position in seconds. \
It sees markers according their actual graphical representation in the arrange-view, not just their position. \
If, for example, you pass to it the current playposition, the function will return the marker as long as the playcursor is behind the marker-graphics.\
\
Returned string will be \"Markeridx\\npos\\nName\\nMarkeridx2\\npos2\\nName2\\n...\".\
Will return \"\", if no marker has been found.\
\
Returns only markers, no time markers or regions!\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with all markernumbers, markerpositions and markertitles, separated by a newline. \
Can contain numerous markers, if there are more markers in one position.",
    name = "MARKER",
   },
   [2] = {
    type = "STRING",
    desc = "a newline separated string with all marker-index-numbers found; 0-based",
    name = "MARKER_INDEX",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the time-position in seconds",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [780] = {
  fname = "GetRegionByScreenCoordinates",
  label = "US_GetRegionByScreenCoordinates",
  run = "in/out",
  desc = "returns the regions at a given absolute-x-pixel-position. It sees regions according their graphical representation in the arrange-view, not just their position! Returned string will be \"Regionidx\\npos\\nName\\nRegionidx2\\npos2\\nName2\\n...\".\
Returns only regions, no time markers or other markers!\
Will return \"\", if no region has been found.\
\
Note: there might be an offset, when the drag-edges-cursor is activated at the edges of the \"head\" of the region.\
      So if you notice the edge of the region before the drag-cursor is visible, this is actually precise.\
      In the future, I might add an option to correct this offset, so getting the left-draggable areas\
      of the region is possible(it's complicated).\
    \
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with all regionnumbers, regionpositions and regionnames, separated by a newline. \
Can contain numerous regions, if there are more regions in one position.",
    name = "MARKER",
   },
   [2] = {
    type = "STRING",
    desc = "a newline separated string with all region-index-numbers found; 0-based",
    name = "REGION_INDEX",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the absolute x-screen-position, like current mouse-position",
    name = "XMOUSEPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [781] = {
  fname = "GetRegionByTime",
  label = "US_GetRegionByTime",
  run = "in/out",
  desc = "returns the regions at a given position in seconds. It sees regions according their graphical representation in the arrange-view, not just their position! Returned string will be \"Regionidx\\npos\\nName\\nRegionidx2\\npos2\\nName2\\n...\".\
Returns only regions, no timesignature-markers or other markers!\
Will return \"\", if no region has been found.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with all regionnumbers, regionpositions and regionnames, separated by a newline. \
Can contain numerous regions, if there are more regions in one position.",
    name = "MARKER",
   },
   [2] = {
    type = "STRING",
    desc = "a newline separated string with all region-index-numbers found; 0-based",
    name = "REGION_INDEX",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "position in seconds",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [782] = {
  fname = "GetTimeSignaturesByScreenCoordinates",
  label = "US_GetTimeSignaturesByScreenCoordinates",
  run = "in/out",
  desc = "returns the time-signature/tempo-marker at a given absolute-x-pixel-position. It sees time-signature/tempo-markers according their graphical representation in the arrange-view, not just their position! Returned string will be \"tempomarkeridx\\npos\\ntempomarkeridx2\\npos2\\n...\".\
Returns only time-signature-markers, no regions or other markers!\
Will return \"\", if no timesig-marker has been found.\
    \
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with all markernumbers and markerpositions, separated by a newline. \
Can contain numerous markers, if there are more markers in one position.",
    name = "MARKER",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the absolute x-screen-position, like current mouse-position",
    name = "XMOUSEPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [783] = {
  fname = "GetTimeSignaturesByTime",
  label = "US_GetTimeSignaturesByTime",
  run = "in/out",
  desc = "returns the time-signature/tempo-marker at a given absolute-x-pixel-position. It sees time-signature/tempo-markers according their graphical representation in the arrange-view, not just their position! Returned string will be \"tempomarkeridx\\npos\\ntempomarkeridx2\\npos2\\n...\".\
Returns only time-signature-markers, no other markers or regions!\
Will return \"\", if no timesig-marker has been found.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with all markernumbers and markerpositions, separated by a newline. \
Can contain numerous markers, if there are more markers in one position.",
    name = "MARKER",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "position in seconds",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [784] = {
  fname = "IsMarkerEdit",
  label = "US_IsMarkerEdit",
  run = "in/out",
  desc = "returns true, if the marker is an edit-marker, false if not. Returns nil, if markerid is invalid.\
Markerid is the marker-number for all markers, as used by marker-functions from Reaper.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's an edit-marker, false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the markerid of all markers in the project, beginning with 0 for the first marker",
    name = "MARKERID",
   },
  },
  sp_api = "ultraschall",
 },
 [785] = {
  fname = "IsMarkerNormal",
  label = "US_IsMarkerNormal",
  run = "in/out",
  desc = "returns true, if the marker is a normal-marker, false if not. Returns nil, if markerid is invalid.\
Markerid is the marker-number for all markers, as used by marker-functions from Reaper.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's an normal-marker, false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the markerid of all markers in the project, beginning with 0 for the first marker",
    name = "MARKERID",
   },
  },
  sp_api = "ultraschall",
 },
 [786] = {
  fname = "IsRegionPodrange",
  label = "US_IsRegionPodrange",
  run = "in/out",
  desc = "deprecated\
returns true, if the marker is a Podrange-region, false if not. Returns nil, if markerid is invalid.\
Markerid is the marker-number for all markers, as used by marker-functions from Reaper.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's a PodRange-Region, false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the markerid of all markers in the project, beginning with 0 for the first marker",
    name = "MARKERID",
   },
  },
  sp_api = "ultraschall",
 },
 [787] = {
  fname = "AddEditRegion",
  label = "US_AddEditRegion",
  run = "in/out",
  desc = "Adds a new edit-region and returns index of the newly created edit-marker-region.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the newly created region",
    name = "MARKERNR",
   },
   [2] = {
    type = "STRING",
    desc = "the guid, associated with this edit-region",
    name = "GUID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index of the edit-region within all edit-regions",
    name = "EDIT_REGION_INDEX",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "startposition in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "endposition in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the title of the marker",
    name = "TEXT",
   },
  },
  sp_api = "ultraschall",
 },
 [788] = {
  fname = "SetEditRegion",
  label = "US_SetEditRegion",
  run = "in/out",
  desc = "Sets the values of an already existing edit-region. To retain an already set position, endposition and/or edittitle, use nil.\
Returns true in case of success, false if not.\
Note: if you set the new beginning of the region before another region, the indexnumber of the edit-region changes. So if you want to set an edit-region repeatedly, you should get the indexnumber using <a href=\"#EnumerateEditRegion\">ultraschall.EnumerateEditRegion</a>, or you might accidently change another region!\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, in case of success, false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the edit-region, beginning with 1 for the first edit-region",
    name = "NUMBER",
   },
   [2] = {
    type = "NUMBER",
    desc = "startposition in seconds, nil to retain the old value",
    name = "STARTPOSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "endposition in seconds, nil to retain the old value",
    name = "ENDPOSITION",
   },
   [4] = {
    type = "STRING",
    desc = "the title of the marker, nil to retain the old value",
    name = "TEXT",
   },
  },
  sp_api = "ultraschall",
 },
 [789] = {
  fname = "DeleteEditRegion",
  label = "US_DeleteEditRegion",
  run = "in/out",
  desc = "Deletes an already existing edit-region.\
Returns true in case of success, false if not.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, in case of success, false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the edit-region, beginning with 1 for the first edit-region",
    name = "NUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [790] = {
  fname = "EnumerateEditRegion",
  label = "US_EnumerateEditRegion",
  run = "in/out",
  desc = "Returns the values of an edit-region.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the overall marker-index-number of all markers in the project, -1 in case of error",
    name = "RETVAL",
   },
   [2] = {
    type = "NUMBER",
    desc = "position in seconds",
    name = "POSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "endposition in seconds",
    name = "ENDPOSITION",
   },
   [4] = {
    type = "STRING",
    desc = "the title of the region",
    name = "TITLE",
   },
   [5] = {
    type = "INTEGER",
    desc = "the overall region index number, as used by other of Reaper's own marker-functions",
    name = "RGNINDEXNUMBER",
   },
   [6] = {
    type = "STRING",
    desc = "the guid of the edit-region",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the edit-region, beginning with 1 for the first edit-region",
    name = "NUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [791] = {
  fname = "CountEditRegions",
  label = "US_CountEditRegions",
  run = "in/out",
  desc = "returns the number of edit-regions in the project.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of edit-regions in the project",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [792] = {
  fname = "GetAllMarkersBetween",
  label = "US_GetAllMarkersBetween",
  run = "in/out",
  desc = "To get all Markers in the project(normal, edit, chapter), regardless of their category, between startposition and endposition.\
Doesn't return regions!\
\
returns the number of markers and an array with each marker in the format:\
\
    markersarray[index][0] - position\
    markersarray[index][1] - name\
    markersarray[index][2] - indexnumber of the marker within all markers in the project\
    markersarray[index][3] - the shown index-number\
    markersarray[index][4] - the color of the marker\
    markersarray[index][5] - the guid of the marker\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of markers returned",
    name = "NUMBER_OF_ALLMARKERS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array, that holds all markers(not regions!) of the project",
    name = "ALLMARKERSARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the earliest position a returned marker may have; nil for projectposition 0",
    opt = {
     use = false,
    },
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the latest position a returned marker may have; nil for end of project",
    opt = {
     use = false,
    },
    name = "ENDPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [793] = {
  fname = "GetAllRegions",
  label = "US_GetAllRegions",
  run = "in/out",
  desc = "To get all Regions in the project(normal, edit, chapter), regardless of their category.\
Doesn't return markers!\
\
returns the number of markers and an array with each marker in the format:\
\
    regionarray[index][0] - position\
    regionarray[index][1] - endposition\
    regionarray[index][2] - name\
    regionarray[index][3] - indexnumber of the region within all markers in the project. This is 1-based, unlike in Reaper's own API!\
    regionarray[index][4] - the shown index-number\
    regionarray[index][5] - the color of the region\
    regionarray[index][6] - the guid of the region\
    \
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of regions returned",
    name = "NUMBER_OF_ALLREGIONS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array, that holds all regions(not markers!) of the project",
    name = "REGIONSARRAY",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [794] = {
  fname = "GetAllRegionsBetween",
  label = "US_GetAllRegionsBetween",
  run = "in/out",
  desc = "To get all Regions in the project(normal, edit, chapter), regardless of their category between start- and endposition.\
Set partial to true, if you want to get regions as well, that are only partially between start- and endposition\
Doesn't return markers!\
\
returns the number of markers and an array with each marker in the format:\
\
    regionarray[index][0] - position\
    regionarray[index][1] - endposition\
    regionarray[index][2] - name\
    regionarray[index][3] - indexnumber of the region within all markers in the project\
    regionarray[index][4] - the shown index-number\
    regionarray[index][5] - the color of the region\
    regionarray[index][6] - the guid of the region\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of regions returned",
    name = "NUMBER_OF_ALLREGIONS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array, that holds all regions(not markers!) of the project",
    name = "REGIONSARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the earliest position a returned region may have; nil, startposition=0",
    opt = {
     use = false,
    },
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the latest position a returned region may have; nil, endposition=end of project",
    opt = {
     use = false,
    },
    name = "ENDPOSITION",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true or nil, to get regions that are partially within start and endposition as well; false, only regions completely within start/endposition.",
    opt = {
     use = false,
    },
    name = "RETVAL",
   },
  },
  sp_api = "ultraschall",
 },
 [795] = {
  fname = "ParseMarkerString",
  label = "US_ParseMarkerString",
  run = "in/out",
  desc = "Parses the entries in markerstring for timestrings and markertitles.\
It returns the number of entries as well as a table with all marker-information.\
The table works as such:\
\
markertable[1][markernumber] - the timestring of the marker, -1 if no time is available\
markertable[2][markernumber] - the time, converted into position in seconds, -1 if no time is available\
markertable[3][markernumber] - the name of the marker\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of markers in markerstring",
    name = "NUMBER_OF_ENTRIES",
   },
   [2] = {
    type = "ARRAY",
    desc = "a table with all the information of a marker\
markertable[1][markernumber] - the timestring of the marker, -1 if no time is available\
markertable[2][markernumber] - the time, converted into position in seconds, -1 if no time is available\
markertable[3][markernumber] - the name of the marker",
    name = "MARKERARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string with all markers. An entry is \"timestring markertitle\\n\". Each marker-entry must be separated by a newline from each other.",
    name = "MARKERSTRING",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "interpret the time in timestring more strict or more loosely?\
true, the time in markerstring must follow the format hh:mm:ss.mss , e.g. 11:22:33.444\
false, the time can be more flexible, leading to possible misinterpretation of indexnumbers as time/seconds",
    name = "STRICT",
   },
  },
  sp_api = "ultraschall",
 },
 [796] = {
  fname = "RenumerateMarkers",
  label = "US_RenumerateMarkers",
  run = "in/out",
  desc = "Renumbers the shown numbers of markers(not regions!) in the current project, that have the color colorvalue.\
The numbering starts with the number startingnumber.\
\
The markers will be renumbered from the earliest marker in the project to the latest one.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, nil in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the (systemdependent)colorvalue a marker must have. -1 if you want all markers to be numbered.\
Keep in mind, that colors are differently interpreted on Mac compared to Windows!",
    name = "COLORVALUE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the first number that shall be given.",
    name = "STARTINGNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [797] = {
  fname = "CountNormalMarkers_NumGap",
  label = "US_CountNormalMarkers_NumGap",
  run = "in/out",
  desc = "Returns the first \"gap\" in shown marker-numbers. If you have markers with numbers \"1, 2, 4\" it will return 3, as this is the first number missing.\
\
Normal markers are all markers, that don't include \"_Shownote:\" or \"_Edit\" in the beginning of their name, as well as markers with the color 100,255,0(planned chapter).",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the first \"gap\" in the numbering of the shown marker-numbers",
    name = "GAP_NUMBER",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [798] = {
  fname = "IsMarkerAtPosition",
  label = "US_IsMarkerAtPosition",
  run = "in/out",
  desc = "returns, if markers are at position and returns the marker-numbers.\
\
The marker-numbers are numerated by order, not the shown marker-numbers!\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the function found marker(s); false, if no markers are available at position",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the count of markers at position",
    name = "COUNT",
   },
   [3] = {
    type = "STRING",
    desc = "a string with all the markernumbers, separated by a ,",
    name = "MARKERSSTRING",
   },
   [4] = {
    type = "ARRAY",
    desc = "an array with each entry consisting a markernumber",
    name = "MARKERSARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position to check for markers in seconds; only positive numbers",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [799] = {
  fname = "IsRegionAtPosition",
  label = "US_IsRegionAtPosition",
  run = "in/out",
  desc = "returns, if regions are at position and returns the region-numbers.\
\
The region-numbers are numerated by order, not the shown region-numbers!\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the function found region(s); false, if no regions are available at position",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the count of regions at position",
    name = "COUNT",
   },
   [3] = {
    type = "STRING",
    desc = "a string with all the regionnumbers, separated by a ,",
    name = "REGIONSSTRING",
   },
   [4] = {
    type = "ARRAY",
    desc = "an array with each entry consisting a regionnumber",
    name = "REGIONSARRAY",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position to check for regions in seconds; only positive numbers",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [800] = {
  fname = "CountMarkersAndRegions",
  label = "US_CountMarkersAndRegions",
  run = "in/out",
  desc = "Returns the position of the last projectmarker in the project(no regions or time-sig-markers!).\
Use <a href=\"#GetMarkerAndRegionsByIndex\">GetMarkerAndRegionsByIndex</a> to enumerate markers or regions in particular.\
\
Returns -1 in case of no markers available",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of markers available in the project",
    name = "COUNT_MARKERS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of regions available in the project",
    name = "COUNT_REGIONS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [801] = {
  fname = "GetLastMarkerPosition",
  label = "US_GetLastMarkerPosition",
  run = "in/out",
  desc = "Returns the position of the last projectmarker in the project(no regions or time-sig-markers!).\
\
Returns -1 in case of no markers available",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the last marker in the project",
    name = "POSITION",
   },
   [2] = {
    type = "INTEGER",
    desc = "the idx of the last marker in the project. Not the shown number!",
    name = "MARKER_IDX",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [802] = {
  fname = "GetLastRegion",
  label = "US_GetLastRegion",
  run = "in/out",
  desc = "Returns the position of the last region in the project(no markers or time-sig-markers!).\
Note: Last region means the last ending region in the project, even if it's the first starting.\
\
Returns -1 in case of no regions available",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the startposition of the last region in the project",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endposition of the last region in the project",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the idx of the last region in the project. Not the shown number!",
    name = "REGION_IDX",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [803] = {
  fname = "GetLastTimeSigMarkerPosition",
  label = "US_GetLastTimeSigMarkerPosition",
  run = "in/out",
  desc = "Returns the position of the last time-signature-marker in the project(no markers or regions!).\
\
Returns -1 in case of no time-signature-markers available",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the last timesig-marker in the project",
    name = "POSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the measureposition of the last timesig-marker in the project",
    name = "MEASUREPOSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the beatposition of the last timesig-marker in the project",
    name = "BEATPOSITION",
   },
   [4] = {
    type = "INTEGER",
    desc = "the idx of the last timesig-marker in the project.",
    name = "TIMESIG_IDX",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [804] = {
  fname = "GetMarkerUpdateCounter",
  label = "US_GetMarkerUpdateCounter",
  run = "in/out",
  desc = "returns the number of times, a marker in any project has been updated since Reaper started.\
Counts up, if a marker is added, set, moved, deleted from any project opened in Reaper.\
\
This counter includes already closed projects as well",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of times a marker in any project in Reaper has been updated",
    name = "MARKER_UPDATE_COUNTER",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [805] = {
  fname = "MoveTimeSigMarkersBy",
  label = "US_MoveTimeSigMarkersBy",
  run = "in/out",
  desc = "Moves time-signature-markers between startposition and endposition by moveby.\
\
Does NOT move normal projectmarkers or regions!\
\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of failure",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the startposition in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endposition in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "in seconds, negative values: move toward beginning of project, positive values: move toward the end of project",
    name = "MOVEBY",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "shortens or cuts markers, that leave the section between startposition and endposition",
    name = "CUT_AT_BORDERS",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, updates the timeline after moving time-signature markers; false, don't update timeline(must be done manually then)",
    name = "UPDATE_TIMELINE",
   },
  },
  sp_api = "ultraschall",
 },
 [806] = {
  fname = "GetAllTimeSigMarkers",
  label = "US_GetAllTimeSigMarkers",
  run = "in/out",
  desc = "Returns the number of Tempo/Time-Signature-Markers in the project, as well as an array with all attributes of all these markers.\
\
The array is of the format: TimeSigArray[markernumber(1-based)][attribute-idx]\
where attribute-idx is\
1, number timepos\
2, number measurepos\
3, number beatpos\
4, number bpm\
5, number timesig_num\
6, number timesig_denom\
7, boolean lineartempo \
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of time-signature-markers in the project",
    name = "NUM_TIMESIG_MARKERS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all time-signature-markers and all their attributes; see Description for more details",
    name = "TIMESIGARRAY",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [807] = {
  fname = "MoveMarkersBy",
  label = "US_MoveMarkersBy",
  run = "in/out",
  desc = "Moves the markers between startposition and endposition by moveby.\
\
Does NOT move regions and time-signature-markers!\
\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of failure",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the startposition in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endposition in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "in seconds, negative values: move toward beginning of project, positive values: move toward the end of project",
    name = "MOVEBY",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "shortens or cuts markers, that leave the section between startposition and endposition when applying moveby",
    name = "CUT_AT_BORDERS",
   },
  },
  sp_api = "ultraschall",
 },
 [808] = {
  fname = "MoveRegionsBy",
  label = "US_MoveRegionsBy",
  run = "in/out",
  desc = "Moves the regions between startposition and endposition by moveby.\
Will affect only regions, who start within start and endposition. It will not affect those, who end within start and endposition but start before startposition.\
\
Does NOT move markers and time-signature-markers!\
\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of failure",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the startposition in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endposition in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "in seconds, negative values: move toward beginning of project, positive values: move toward the end of project",
    name = "MOVEBY",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "shortens or cuts markers, that leave the section between startposition and endposition",
    name = "CUT_AT_BORDERS",
   },
  },
  sp_api = "ultraschall",
 },
 [809] = {
  fname = "RippleCut_Regions",
  label = "US_RippleCut_Regions",
  run = "in/out",
  desc = "Ripplecuts regions, where applicable.\
It cuts all (parts of) regions between startposition and endposition and moves remaining parts plus all regions after endposition by endposition-startposition toward projectstart.\
\
Returns false in case of an error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if regions were cut/altered; false, if not",
    name = "WERE_REGIONS_ALTERED",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of regions that were altered/cut/moved",
    name = "NUMBER_OF_ALTERED_REGIONS",
   },
   [3] = {
    type = "ARRAY",
    desc = "the regions that were altered:\
  altered_regions_array[index_of_region][0] - old startposition\
  altered_regions_array[index_of_region][1] - old endposition\
  altered_regions_array[index_of_region][2] - name\
  altered_regions_array[index_of_region][3] - old indexnumber of the region within all markers in the project\
  altered_regions_array[index_of_region][4] - the shown index-number\
  altered_regions_array[index_of_region][5] - the color of the region\
  altered_regions_array[index_of_region][6] - the change that was applied to this region\
  altered_regions_array[index_of_region][7] - the new startposition\
  altered_regions_array[index_of_region][8] - the new endposition",
    name = "ALTERED_REGIONS",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the startposition from where regions shall be cut from",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endposition to which regions shall be cut from; all regions/parts of regions after that will be moved toward projectstart",
    name = "ENDPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [810] = {
  fname = "GetAllCustomMarkers",
  label = "US_GetAllCustomMarkers",
  run = "in/out",
  desc = "Will return all custom-markers with a certain name.\
\
A custom-marker has the naming-scheme \
    \
    _customname: text for this marker\
    \
You just need to pass customname to this function, leaving out the preceding \\_ and the trailing :\
Exception: if the custom-marker has the name\
  \
   __customname:: test for this marker\
    \
Example:\
\
The custom-marker *VanillaChief* has the custom\\_marker\\_name *VanillaChief* and will be shown as *\\_VanillaChief: text* in the project.\
So you pass VanillaChief to this function to get all \\_VanillaChief:-markers.\
\
Will not check custom-regions, use [GetAllCustomRegions](#GetAllCustomRegions) instead.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found markers; -1, in case of an error",
    name = "COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "an array with all found custom-markers. It follows the scheme:\
\
   marker_array[index][\"index\"] - index of the marker, in timeline-order, with 0 for the first in the project\
   marker_array[index][\"pos\"]   - position of the marker in seconds\
   marker_array[index][\"name\"]  - name of the marker, excluding the custom-marker-name\
   marker_array[index][\"shown_number\"]  - the number of the marker, that is displayed in the timeline\
   marker_array[index][\"color\"]  - color-value of the marker\
   marker_array[index][\"guid\"]  - the guid of the marker",
    name = "MARKER_ARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-marker. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-marker is called \"__CustomMarker::\"\
Lua-pattern-matching-expressions are allowed. This parameter is NOT case-sensitive.\
\"\" will return all custom marker",
    name = "CUSTOM_MARKER_NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [811] = {
  fname = "GetAllCustomRegions",
  label = "US_GetAllCustomRegions",
  run = "in/out",
  desc = "Will return all custom-regions with a certain name.\
\
A custom-region has the naming-scheme \
    \
    _customname: text for this region\
    \
You just need to pass customname to this function, leaving out the preceding \\_ and the trailing :\
Exception: if the custom-region has the name\
  \
    __customname:: test for this region\
    \
Example:\
\
The custom-region *VanillaChief* has the custom\\_region\\_name *VanillaChief* and will be shown as *\\_VanillaChief: text* in the project.\
So you pass VanillaChief to this function to get all \\_VanillaChief:-regions.\
\
Will not check custom-markers, use [GetAllCustomMarkers](#GetAllCustomMarkers) instead.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found regions; -1, in case of an error",
    name = "COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "an array with all found custom-markers. It follows the scheme:\
\
   region_array[index][\"index\"] - index of the region, in timeline-order, with 0 for the first in the project\
   region_array[index][\"pos\"]   - position of the region in seconds\
   region_array[index][\"regionend\"] - the endposition of the region in seconds\
   region_array[index][\"name\"]  - name of the region, excluding the custom-region-name\
   region_array[index][\"shown_number\"]  - the number of the region, that is displayed in the timeline\
   region_array[index][\"color\"]  - color-value of the region\
   region_array[index][\"guid\"]  - the guid of the region",
    name = "REGION_ARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-region. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-region is called \"__CustomRegion::\"\
Lua-pattern-matching-expressions are allowed. This parameter is NOT case-sensitive.\
\"\" will return all custom-regions",
    name = "CUSTOM_REGION_NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [812] = {
  fname = "CountAllCustomMarkers",
  label = "US_CountAllCustomMarkers",
  run = "in/out",
  desc = "Will count all custom-markers with a certain name.\
\
A custom-marker has the naming-scheme \
    \
    _customname: text for this marker\
    \
You just need to pass customname to this function, leaving out the preceding \\_ and the trailing :\
Exception: if the custom-marker has the name\
  \
   __customname:: test for this marker\
    \
Example:\
\
The custom-marker *VanillaChief* has the custom\\_marker\\_name *VanillaChief* and will be shown as *\\_VanillaChief: text* in the project.\
So you pass VanillaChief to this function to get all \\_VanillaChief:-markers.\
\
Will not count custom-regions, use [CountAllCustomRegions](#CountAllCustomRegions) instead.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found markers; -1, in case of an error",
    name = "COUNT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-marker. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-marker is called \"__CustomMarker::\"\
Lua-pattern-matching-expressions are allowed. This parameter is NOT case-sensitive.\
\"\" counts all custom markers, regardless of their name",
    name = "CUSTOM_MARKER_NAME",
   },
   [2] = {
    type = "NUMBER",
    desc = "the starttime, from which to count the markers",
    opt = {
     use = false,
    },
    name = "STARTTIME",
   },
   [3] = {
    type = "NUMBER",
    desc = "the endtime, to which to count the markers",
    opt = {
     use = false,
    },
    name = "ENDTIME",
   },
  },
  sp_api = "ultraschall",
 },
 [813] = {
  fname = "CountAllCustomRegions",
  label = "US_CountAllCustomRegions",
  run = "in/out",
  desc = "Will count all custom-regions with a certain name.\
\
A custom-region has the naming-scheme \
    \
    _customname: text for this region\
    \
You just need to pass customname to this function, leaving out the preceding \\_ and the trailing :\
Exception: if the custom-region has the name\
  \
    __customname:: test for this region\
    \
Example:\
\
The custom-region *VanillaChief* has the custom\\_region\\_name *VanillaChief* and will be shown as *\\_VanillaChief: text* in the project.\
So you pass VanillaChief to this function to get all \\_VanillaChief:-regions.\
\
Will not count custom-markers, use [CountAllCustomMarkers](#CountAllCustomMarkers) instead.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found regions; -1, in case of an error",
    name = "COUNT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-region. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-region is called \"__CustomRegion::\"\
Lua-pattern-matching-expressions are allowed. This parameter is NOT case-sensitive.\
\"\" will count all custom-regions, regardless of their names",
    name = "CUSTOM_REGION_NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [814] = {
  fname = "EnumerateCustomMarkers",
  label = "US_EnumerateCustomMarkers",
  run = "in/out",
  desc = "Will return a specific custom-marker with a certain name.\
\
A custom-marker has the naming-scheme \
    \
    _customname: text for this marker\
    \
You just need to pass customname to this function, leaving out the preceding \\_ and the trailing :\
Exception: if the custom-marker has the name\
  \
   __customname:: test for this marker\
    \
Example:\
\
The custom-marker *VanillaChief* has the custom\\_marker\\_name *VanillaChief* and will be shown as *\\_VanillaChief: text* in the project.\
So you pass VanillaChief to this function to get all \\_VanillaChief:-markers.\
\
Will not enumerate custom-regions, use [EnumerateCustomRegions](#EnumerateCustomRegions) instead.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the custom-marker exists; false, if not or an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the marker within all markers and regions, as positioned in the project, with 0 for the first, 1 for the second, etc",
    name = "MARKER_INDEX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the marker in seconds",
    name = "POS",
   },
   [4] = {
    type = "STRING",
    desc = "the name of the marker, exluding the custom-marker-name",
    name = "NAME",
   },
   [5] = {
    type = "INTEGER",
    desc = "the markernumber, that is displayed in the timeline of the arrangeview",
    name = "SHOWN_NUMBER",
   },
   [6] = {
    type = "INTEGER",
    desc = "the color of the marker",
    name = "COLOR",
   },
   [7] = {
    type = "STRING",
    desc = "the guid of the custom-marker",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-marker. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-marker is called \"__CustomMarker::\"\
Lua-pattern-matching-expressions are allowed. This parameter is NOT case-sensitive.\
\"\" will enumerate over all existing custom-markers",
    name = "CUSTOM_MARKER_NAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the marker within all same-named custom-markers; 0, for the first custom-marker",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [815] = {
  fname = "EnumerateCustomRegions",
  label = "US_EnumerateCustomRegions",
  run = "in/out",
  desc = "Will return a specific custom-region with a certain name.\
\
A custom-region has the naming-scheme \
    \
    _customname: text for this region\
    \
You just need to pass customname to this function, leaving out the preceding \\_ and the trailing :\
Exception: if the custom-region has the name\
  \
    __customname:: test for this region\
    \
Example:\
\
The custom-region *VanillaChief* has the custom\\_region\\_name *VanillaChief* and will be shown as *\\_VanillaChief: text* in the project.\
So you pass VanillaChief to this function to get all \\_VanillaChief:-regions.\
\
Will not enumerate custom-markers, use [EnumerateCustomMarkers](#EnumerateCustomMarkers) instead.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the custom-region exists; false, if not or an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the marker within all markers and regions, as positioned in the project, with 0 for the first, 1 for the second, etc",
    name = "MARKER_INDEX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the region in seconds",
    name = "POS",
   },
   [4] = {
    type = "NUMBER",
    desc = "the end of the region in seconds",
    name = "RGNEND",
   },
   [5] = {
    type = "STRING",
    desc = "the name of the region, exluding the custom-region-name",
    name = "NAME",
   },
   [6] = {
    type = "INTEGER",
    desc = "the regionnumber, that is displayed in the timeline of the arrangeview",
    name = "SHOWN_NUMBER",
   },
   [7] = {
    type = "INTEGER",
    desc = "the color of the region",
    name = "COLOR",
   },
   [8] = {
    type = "STRING",
    desc = "the guid of the custom-region",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-region. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-region is called \"__CustomRegion::\"\
Lua-pattern-matching-expressions are allowed. This parameter is NOT case-sensitive.",
    name = "CUSTOM_REGION_NAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the region within all same-named custom-regions; 0, for the first custom-region",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [816] = {
  fname = "DeleteCustomMarkers",
  label = "US_DeleteCustomMarkers",
  run = "in/out",
  desc = "Will delete a specific custom-marker with a certain name.\
\
A custom-marker has the naming-scheme \
    \
    _customname: text for this marker\
    \
You just need to pass customname to this function, leaving out the preceding \\_ and the trailing :\
Exception: if the custom-marker has the name\
  \
   __customname:: test for this marker\
    \
Example:\
\
The custom-marker *VanillaChief* has the custom\\_marker\\_name *VanillaChief* and will be shown as *\\_VanillaChief: text* in the project.\
So you pass VanillaChief to this function to get all \\_VanillaChief:-markers.\
\
Will not delete custom-regions, use [DeleteCustomRegions](#DeleteCustomRegions) instead.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the custom-marker exists; false, if not or an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the marker within all markers and regions, as positioned in the project, with 0 for the first, 1 for the second, etc",
    name = "MARKER_INDEX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the marker in seconds",
    name = "POS",
   },
   [4] = {
    type = "STRING",
    desc = "the name of the marker, exluding the custom-marker-name",
    name = "NAME",
   },
   [5] = {
    type = "INTEGER",
    desc = "the markernumber, that is displayed in the timeline of the arrangeview",
    name = "SHOWN_NUMBER",
   },
   [6] = {
    type = "INTEGER",
    desc = "the color of the marker",
    name = "COLOR",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-marker. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-marker is called \"__CustomMarker::\"\
Lua-pattern-matching-expressions are allowed. This parameter is NOT case-sensitive.\
\"\" will delete over all custom-markers available, regardless of their name",
    name = "CUSTOM_MARKER_NAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the marker within all same-named custom-markers; 0, for the first custom-marker    ",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [817] = {
  fname = "DeleteCustomRegions",
  label = "US_DeleteCustomRegions",
  run = "in/out",
  desc = "Deletes a specific custom-region with a certain name.\
\
A custom-region has the naming-scheme \
    \
    _customname: text for this region\
    \
You just need to pass customname to this function, leaving out the preceding \\_ and the trailing :\
Exception: if the custom-region has the name\
  \
    __customname:: test for this region\
    \
Example:\
\
The custom-region *VanillaChief* has the custom\\_region\\_name *VanillaChief* and will be shown as *\\_VanillaChief: text* in the project.\
So you pass VanillaChief to this function to get all \\_VanillaChief:-regions.\
\
Will not delete custom-markers, use [DeleteCustomMarkers](#DeleteCustomMarkers) instead.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the custom-region exists; false, if not or an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the region within all custom regions, by position in the project, with 0 for the first, 1 for the second, etc",
    name = "MARKER_INDEX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the region in seconds",
    name = "POS",
   },
   [4] = {
    type = "NUMBER",
    desc = "the end of the region in seconds",
    name = "RGNEND",
   },
   [5] = {
    type = "STRING",
    desc = "the name of the region, exluding the custom-region-name",
    name = "NAME",
   },
   [6] = {
    type = "INTEGER",
    desc = "the regionnumber, that is displayed in the timeline of the arrangeview",
    name = "SHOWN_NUMBER",
   },
   [7] = {
    type = "INTEGER",
    desc = "the color of the region",
    name = "COLOR",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-region. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-region is called \"__CustomRegion::\"\
Lua-pattern-matching-expressions are allowed. This parameter is NOT case-sensitive.\
\"\" will delete over all custom-regions available, regardless of their name",
    name = "CUSTOM_REGION_NAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the region within all same-named custom-regions; 0, for the first custom-region",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [818] = {
  fname = "AddCustomMarker",
  label = "US_AddCustomMarker",
  run = "in/out",
  desc = "Will add new custom-marker with a certain name.\
\
A custom-marker has the naming-scheme \
    \
    _customname: text for this marker\
    \
You just need to pass customname to this function, leaving out the preceding \\_ and the trailing :\
Exception: if the custom-marker has the name\
  \
   __customname:: test for this marker\
    \
Example:\
\
The custom-marker *VanillaChief* has the custom\\_marker\\_name *VanillaChief* and will be shown as *\\_VanillaChief: text* in the project.\
So you pass VanillaChief to this function to get all \\_VanillaChief:-markers.\
\
Will not add custom-regions, use [AddCustomRegion](#AddCustomRegion) instead.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if adding the custom-marker was successful; false, if not or an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the indexnumber of the newly added custommarker within all regions and markers; 0-based\
use this for Reaper's own marker-management-functions",
    name = "MARKERNUMBER",
   },
   [3] = {
    type = "STRING",
    desc = "the guid of the custommarker",
    name = "GUID",
   },
   [4] = {
    type = "INTEGER",
    desc = "the index of the custom-marker within the custom-markers only(!); 0-based\
use this for Ultraschall-API's custom-markers-functions",
    name = "CUSTOMMARKER_INDEX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-marker. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-marker is called \"__CustomMarker::\"; nil, adds a normal marker",
    name = "CUSTOM_MARKER_NAME",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position of the marker in seconds",
    name = "POS",
   },
   [3] = {
    type = "STRING",
    desc = "the name of the marker, exluding the custom-marker-name",
    name = "NAME",
   },
   [4] = {
    type = "INTEGER",
    desc = "the markernumber, that is displayed in the timeline of the arrangeview",
    name = "SHOWN_NUMBER",
   },
   [5] = {
    type = "INTEGER",
    desc = "the color of the marker",
    name = "COLOR",
   },
  },
  sp_api = "ultraschall",
 },
 [819] = {
  fname = "AddCustomRegion",
  label = "US_AddCustomRegion",
  run = "in/out",
  desc = "Will add new custom-region with a certain name.\
\
A custom-region has the naming-scheme \
    \
    _customname: text for this region\
    \
You just need to pass customname to this function, leaving out the preceding \\_ and the trailing :\
Exception: if the custom-region has the name\
  \
    __customname:: test for this region\
    \
Example:\
\
The custom-region *VanillaChief* has the custom\\_region\\_name *VanillaChief* and will be shown as *\\_VanillaChief: text* in the project.\
So you pass VanillaChief to this function to get all \\_VanillaChief:-regions.\
\
Will not add custom-markers, use [AddCustomMarker](#AddCustomMarker) instead.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if adding the custom-region was successful; false, if not or an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "if the desired shown_number is already used by another region, this will hold the alternative number for the new custom-region",
    name = "SHOWN_NUMBER",
   },
   [3] = {
    type = "INTEGER",
    desc = "the indexnumber of the newly added customregion within all regions and markers; 0-based\
use this for Reaper's own marker-management-functions",
    name = "MARKERNUMBER",
   },
   [4] = {
    type = "STRING",
    desc = "the guid of the customregion",
    name = "GUID",
   },
   [5] = {
    type = "INTEGER",
    desc = "the index of the custom-region within the custom-regions only(!); 0-based\
use this for Ultraschall-API's custom-regions-functions",
    name = "CUSTOMREGION_INDEX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-region. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-region is called \"__CustomRegion::\"; nil, make it a normal regionname",
    name = "CUSTOM_MARKER_NAME",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position of the region in seconds",
    name = "POS",
   },
   [3] = {
    type = "NUMBER",
    desc = "the endposition of the region in seconds",
    name = "REGIONEND",
   },
   [4] = {
    type = "STRING",
    desc = "the name of the region, exluding the custom-region-name",
    name = "NAME",
   },
   [5] = {
    type = "INTEGER",
    desc = "the regionnumber, that is displayed in the timeline of the arrangeview",
    name = "SHOWN_NUMBER",
   },
   [6] = {
    type = "INTEGER",
    desc = "the color of the marker",
    name = "COLOR",
   },
  },
  sp_api = "ultraschall",
 },
 [820] = {
  fname = "SetCustomMarker",
  label = "US_SetCustomMarker",
  run = "in/out",
  desc = "Will set attributes of an already existing custom-marker with a certain name.\
\
A custom-marker has the naming-scheme \
    \
    _customname: text for this marker\
    \
You just need to pass customname to this function, leaving out the preceding \\_ and the trailing :\
Exception: if the custom-marker has the name\
  \
   __customname:: test for this marker\
    \
Example:\
\
The custom-marker *VanillaChief* has the custom\\_marker\\_name *VanillaChief* and will be shown as *\\_VanillaChief: text* in the project.\
So you pass VanillaChief to this function to get all \\_VanillaChief:-markers.\
\
Will not set custom-regions, use [SetCustomRegion](#SetCustomRegion) instead.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting the new attributes of the custom-marker was successful; false, if not or an error occurred",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-marker. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-marker is called \"__CustomMarker::\"; nil, make it a normal marker\
\"\" will use idx over all custom-markers, regardless of their name",
    name = "CUSTOM_MARKER_NAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index-number of the custom-marker within all custom-markers",
    name = "IDX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the marker in seconds",
    name = "POS",
   },
   [4] = {
    type = "STRING",
    desc = "the name of the marker, exluding the custom-marker-name",
    name = "NAME",
   },
   [5] = {
    type = "INTEGER",
    desc = "the markernumber, that is displayed in the timeline of the arrangeview",
    name = "SHOWN_NUMBER",
   },
   [6] = {
    type = "INTEGER",
    desc = "the color of the marker",
    name = "COLOR",
   },
  },
  sp_api = "ultraschall",
 },
 [821] = {
  fname = "SetCustomRegion",
  label = "US_SetCustomRegion",
  run = "in/out",
  desc = "Will set an already existing custom-region with a certain name.\
\
A custom-region has the naming-scheme \
    \
    _customname: text for this region\
    \
You just need to pass customname to this function, leaving out the preceding \\_ and the trailing :\
Exception: if the custom-region has the name\
  \
    __customname:: test for this region\
    \
Example:\
\
The custom-region *VanillaChief* has the custom\\_region\\_name *VanillaChief* and will be shown as *\\_VanillaChief: text* in the project.\
So you pass VanillaChief to this function to get all \\_VanillaChief:-regions.\
\
Will not add custom-markers, use [AddCustomMarker](#AddCustomMarker) instead.\
\
returns false in case of an error, like the desired shown_number is already taken by another region",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if adding the region was successful; false, if not or an error occurred\
false could be an indicator, that there's already a region using the number passed over in shown_number",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "if the desired shown_number is already used by another region, this will hold the alternative number for the new custom-region",
    name = "SHOWN_NUMBER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-region. Don't include the _ at the beginning and the : at the end, or it might not be found. Exception: Your custom-region is called \"__CustomRegion::\"\
\"\" will use idx over all custom-markers, regardless of their name",
    name = "CUSTOM_MARKER_NAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the custom region to change",
    name = "IDX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the region in seconds",
    name = "POS",
   },
   [4] = {
    type = "STRING",
    desc = "the name of the region, exluding the custom-region-name",
    name = "NAME",
   },
   [5] = {
    type = "INTEGER",
    desc = "the regionnumber, that is displayed in the timeline of the arrangeview",
    name = "SHOWN_NUMBER",
   },
   [6] = {
    type = "INTEGER",
    desc = "the color of the marker",
    name = "COLOR",
   },
  },
  sp_api = "ultraschall",
 },
 [822] = {
  fname = "GetNextFreeRegionIndex",
  label = "US_GetNextFreeRegionIndex",
  run = "in/out",
  desc = "returns the next unused region-index-number, beginning with 0.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the next free/unused region-index-number",
    name = "FREE_SHOWN_NUMBER",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [823] = {
  fname = "IsMarkerValidCustomMarker",
  label = "US_IsMarkerValidCustomMarker",
  run = "in/out",
  desc = "returns true, if the marker with id markeridx is a valid custom-marker of the type custom_marker_name\
\
markeridx is the index of all markers and regions!\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, marker is a valid custom-marker of type custom_marker_name; false, it is not or an error occurred",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [824] = {
  fname = "IsRegionValidCustomRegion",
  label = "US_IsRegionValidCustomRegion",
  run = "in/out",
  desc = "returns true, if the marker with id markeridx is a valid custom-region of the type custom_region_name\
\
markeridx is the index of all markers and regions!\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, marker is a valid custom-region of type custom_region_name; false, it is not or an error occurred",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [825] = {
  fname = "GetMarkerIDFromGuid",
  label = "US_GetMarkerIDFromGuid",
  run = "in/out",
  desc = "Gets the corresponding indexnumber of a marker-guid\
\
The index is for all markers and regions, inclusive and 1-based\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the marker/region, whose guid you have passed to this function; 1 for the first marker/region",
    name = "INDEX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the guid of the marker/region, whose index-number you want to retrieve",
    name = "GUID",
   },
  },
  sp_api = "ultraschall",
 },
 [826] = {
  fname = "GetGuidFromMarkerID",
  label = "US_GetGuidFromMarkerID",
  run = "in/out",
  desc = "Gets the corresponding marker-guid of a marker with a specific index \
\
The index is for all markers and regions, inclusive and 1-based\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the guid of the marker/region of the marker with a specific index",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the marker/region, whose guid you want to retrieve",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [827] = {
  fname = "IsTimeSigmarkerAtPosition",
  label = "US_IsTimeSigmarkerAtPosition",
  run = "in/out",
  desc = "returns, if at position is a time-signature marker\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, marker found; false, marker not found",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position to check, whether there's a timesignature marker",
    name = "POSITION",
   },
   [2] = {
    type = "INTEGER",
    desc = "nil or 0, use position in seconds; 1, use position in measures",
    opt = {
     use = false,
    },
    name = "POSITION_MODE",
   },
  },
  sp_api = "ultraschall",
 },
 [828] = {
  fname = "GetAllCustomMarkerNames",
  label = "US_GetAllCustomMarkerNames",
  run = "in/out",
  desc = "Will return all names of all available custom-markers.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found markers; -1, in case of an error",
    name = "COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all found custom-markernames. ",
    name = "CUSTOM_MARKER_NAMES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [829] = {
  fname = "GetAllCustomRegionNames",
  label = "US_GetAllCustomRegionNames",
  run = "in/out",
  desc = "Will return all names of all available custom-regions.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found markers; -1, in case of an error",
    name = "COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all found custom-regionnames. ",
    name = "CUSTOM_REGION_NAMES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [830] = {
  fname = "GetGuidFromNormalMarkerID",
  label = "US_GetGuidFromNormalMarkerID",
  run = "in/out",
  desc = "Gets the corresponding guid of a normal marker with a specific index \
\
The index is for normal markers only\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the guid of the normal marker with a specific index",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the normal marker, whose guid you want to retrieve",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [831] = {
  fname = "GetNormalMarkerIDFromGuid",
  label = "US_GetNormalMarkerIDFromGuid",
  run = "in/out",
  desc = "Gets the corresponding indexnumber of a normal-marker-guid\
\
The index is for all normal markers only.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the marker, whose guid you have passed to this function",
    name = "INDEX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the guid of the marker, whose index-number you want to retrieve",
    name = "GUID",
   },
  },
  sp_api = "ultraschall",
 },
 [832] = {
  fname = "AddProjectMarker",
  label = "US_AddProjectMarker",
  run = "in/out",
  desc = "Creates a new projectmarker/region and returns the shown number, index and guid of the created marker/region. \
\
Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the shown-number of the newly created marker/region",
    name = "INDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the newly created marker/region within all markers/regions",
    name = "MARKER_REGION_INDEX",
   },
   [3] = {
    type = "STRING",
    desc = "the guid of the newly created marker/region",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "REAPROJECT",
    desc = "the project, in which to add the new marker; use 0 for the current project; ",
    name = "PROJ",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if it shall be a region; false, if a normal marker",
    name = "ISRGN",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the newly created marker/region in seconds",
    name = "POS",
   },
   [4] = {
    type = "NUMBER",
    desc = "if the marker is a region, this is the end of the region in seconds",
    name = "RGNEND",
   },
   [5] = {
    type = "STRING",
    desc = "the shown name of the marker",
    name = "NAME",
   },
   [6] = {
    type = "INTEGER",
    desc = "the shown number of the marker/region. Markers can have the same shown marker multiple times. Regions will get another number, if wantidx is already given.",
    name = "WANTIDX",
   },
   [7] = {
    type = "INTEGER",
    desc = "the color of the marker",
    name = "COLOR",
   },
  },
  sp_api = "ultraschall",
 },
 [833] = {
  fname = "GetEditMarkerIDFromGuid",
  label = "US_GetEditMarkerIDFromGuid",
  run = "in/out",
  desc = "Gets the corresponding indexnumber of an edit-marker-guid\
\
The index is for all _edit:-markers or _edit-markers only.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the edit-marker, whose guid you have passed to this function",
    name = "INDEX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the guid of the edit-marker, whose index-number you want to retrieve",
    name = "GUID",
   },
  },
  sp_api = "ultraschall",
 },
 [834] = {
  fname = "GetGuidFromEditMarkerID",
  label = "US_GetGuidFromEditMarkerID",
  run = "in/out",
  desc = "Gets the corresponding guid of an edit-marker with a specific index \
\
The index is for _edit:-markers and _edit-markers only\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the guid of the edit marker with a specific index",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the edit marker, whose guid you want to retrieve",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [835] = {
  fname = "GetEditRegionIDFromGuid",
  label = "US_GetEditRegionIDFromGuid",
  run = "in/out",
  desc = "Gets the corresponding indexnumber of an edit-region-guid\
\
The index is for all _edit:-regions or _edit-regions only.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the edit-region, whose guid you have passed to this function",
    name = "INDEX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the guid of the edit-region, whose index-number you want to retrieve",
    name = "GUID",
   },
  },
  sp_api = "ultraschall",
 },
 [836] = {
  fname = "GetGuidFromEditRegionID",
  label = "US_GetGuidFromEditRegionID",
  run = "in/out",
  desc = "Gets the corresponding guid of an edit-region with a specific index \
\
The index is for _edit:-regions and _edit-regions only\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the guid of the edit region with a specific index",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the edit region, whose guid you want to retrieve",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [837] = {
  fname = "StoreTemporaryMarker",
  label = "US_StoreTemporaryMarker",
  run = "in/out",
  desc = "Stores a marker/region temporarily for later use.\
\
See GetTemporaryMarker to get the index of the marker, which will also keep in mind, if scripts or the user change the order of the markers/regions in the meantime.\
\
It's good practice to remove a temporary marker you don't need anymore, using marker_id=-1, Otherwise you might accidentally mess around with a temporary marker, that you forgot about but was still stored.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, storing temporary marker was successful; false, storing temporary marker was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the marker/region within all markers and regions, that you want to temporarily store; 0-based; \
-1, to remove this temporary marker; \
-2, to store the last marker before edit-cursor position\
-3, to store the last marker before play-cursor position\
-4, to store the last marker before position underneath mouse-cursor",
    name = "MARKER_ID",
   },
   [2] = {
    type = "INTEGER",
    desc = "a numerical index, if you want to temporarily store multiple markers/regions; default is 1",
    opt = {
     use = false,
    },
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [838] = {
  fname = "GetTemporaryMarker",
  label = "US_GetTemporaryMarker",
  run = "in/out",
  desc = "returns a temporarily stored marker/region.\
\
See StoreTemporaryMarker to set temporary markers/regions.\
\
It is good practice to \"clear\" the temporary marker, if not needed anymore, by using StoreTemporaryMarker with marker_id=-1\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current id of the stored marker/region; 0-based; -1, in case of an error",
    name = "MARKER_ID",
   },
   [2] = {
    type = "STRING",
    desc = "the guid of the marker",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "a numerical index, if you stored multiple temporary markers/regions; default is 1",
    opt = {
     use = false,
    },
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [839] = {
  fname = "AddShownoteMarker",
  label = "US_AddShownoteMarker",
  run = "in/out",
  desc = "Will add new shownote-marker.\
\
A shownote-marker has the naming-scheme \
    \
    _Shownote: name for this shownote\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the indexnumber of the newly added shownotemarker within all regions and markers; 0-based\
use this for Reaper's regular marker-functions\
-1 in case of an error",
    name = "MARKERNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the guid of the shownotemarker",
    name = "GUID",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index of the shownote-marker within shownotes only; 1-based. \
Use this for the other Ultraschall-API-shownote-functions!",
    name = "SHOWNOTEMARKER_INDEX",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the marker in seconds",
    name = "POS",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the shownote-marker",
    name = "NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [840] = {
  fname = "SetShownoteMarker",
  label = "US_SetShownoteMarker",
  run = "in/out",
  desc = "Will set an already existing shownote-marker.\
\
A shownote-marker has the naming-scheme \
    \
    _Shownote: name for this shownote\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting the shownote-marker was successful; false, if not or an error occurred",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the shownote marker within all shownote-markers you want to set; 1-based",
    name = "IDX",
   },
   [2] = {
    type = "NUMBER",
    desc = "the new position of the marker in seconds",
    name = "POS",
   },
   [3] = {
    type = "STRING",
    desc = "the new name of the shownote-marker",
    name = "NAME",
   },
   [4] = {
    type = "INTEGER",
    desc = "the shown-number of the marker; set to nil to use the current one",
    opt = {
     use = false,
    },
    name = "SHOWN_NUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [841] = {
  fname = "EnumerateShownoteMarkers",
  label = "US_EnumerateShownoteMarkers",
  run = "in/out",
  desc = "Will return a specific shownote-marker.\
\
A shownote-marker has the naming-scheme \
    \
    _Shownote: name for this marker\
    \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the shownote-marker exists; false, if not or an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the shownote-marker within all markers and regions, as positioned in the project, with 0 for the first, 1 for the second, etc",
    name = "MARKER_INDEX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the shownote in seconds",
    name = "POS",
   },
   [4] = {
    type = "STRING",
    desc = "the name of the shownote",
    name = "NAME",
   },
   [5] = {
    type = "INTEGER",
    desc = "the markernumber, that is displayed in the timeline of the arrangeview",
    name = "SHOWN_NUMBER",
   },
   [6] = {
    type = "STRING",
    desc = "the guid of the shownote-marker",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the marker within all shownote-markers; 1, for the first shownote-marker",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [842] = {
  fname = "CountShownoteMarkers",
  label = "US_CountShownoteMarkers",
  run = "in/out",
  desc = "Returns count of all shownotes\
\
A shownote-marker has the naming-scheme \
    \
    _Shownote: name for this marker\
",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of shownotes in the current project",
    name = "NUM_SHOWNOTES",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the starttime, from which to count the markers",
    opt = {
     use = false,
    },
    name = "STARTTIME",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endtime, to which to count the markers",
    opt = {
     use = false,
    },
    name = "ENDTIME",
   },
  },
  sp_api = "ultraschall",
 },
 [843] = {
  fname = "DeleteShownoteMarker",
  label = "US_DeleteShownoteMarker",
  run = "in/out",
  desc = "Deletes a shownotes\
\
A shownote-marker has the naming-scheme \
    \
    _Shownote: name for this marker\
\
will also delete all stored additional attributes with the shownote!\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, shownote deleted; false, shownote not deleted",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the shownote to delete, within all shownotes; 1-based",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [844] = {
  fname = "PrepareChapterMarkers4ReaperExport",
  label = "US_PrepareChapterMarkers4ReaperExport",
  run = "in/out",
  desc = "Will add CHAP= to the beginning of each chapter-marker name. This will let Reaper embed this marker into the exported\
media-file as metadata, when rendering.\
\
Will add CHAP= only to chapter-markers, who do not already have that in their name.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [845] = {
  fname = "RestoreChapterMarkersAfterReaperExport",
  label = "US_RestoreChapterMarkersAfterReaperExport",
  run = "in/out",
  desc = "Will remove CHAP= at the beginning of each chapter-marker name, so you have the original marker-names back after render-export.\
\
Will remove only CHAP= from chapter-markers and leave the rest untouched.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [846] = {
  fname = "GetGuidFromShownoteMarkerID",
  label = "US_GetGuidFromShownoteMarkerID",
  run = "in/out",
  desc = "Gets the corresponding guid of a shownote marker with a specific index \
\
The index is for _shownote:-markers only\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the guid of the shownote marker with a specific index",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the shownote marker, whose guid you want to retrieve",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [847] = {
  fname = "GetShownoteMarkerIDFromGuid",
  label = "US_GetShownoteMarkerIDFromGuid",
  run = "in/out",
  desc = "Gets the corresponding indexnumber of a shownote-marker-guid\
\
The index is for all _shownote:-markers only.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the shownote-marker, whose guid you have passed to this function",
    name = "INDEX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the guid of the shownote-marker, whose index-number you want to retrieve",
    name = "GUID",
   },
  },
  sp_api = "ultraschall",
 },
 [848] = {
  fname = "IsMarkerShownote",
  label = "US_IsMarkerShownote",
  run = "in/out",
  desc = "returns true, if the marker is a shownote-marker, false if not. Returns nil, if markerid is invalid.\
Markerid is the marker-number for all markers, as used by marker-functions from Reaper.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's an shownote-marker, false if not",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the shownote; 1-based",
    name = "SHOWNOTE_IDX",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the markerid of all markers in the project, beginning with 0 for the first marker",
    name = "MARKERID",
   },
  },
  sp_api = "ultraschall",
 },
 [849] = {
  fname = "RenumerateNormalMarkers",
  label = "US_RenumerateNormalMarkers",
  run = "in/out",
  desc = "renumerates the shown number of normal markers",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [850] = {
  fname = "RenumerateShownoteMarkers",
  label = "US_RenumerateShownoteMarkers",
  run = "in/out",
  desc = "renumerates the shown number of normal markers",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [851] = {
  fname = "GetMarkerType",
  label = "US_GetMarkerType",
  run = "in/out",
  desc = "return the type of a marker or region, either \"shownote\", \"edit\", \"normal\" for chapter markers, \"planned\", \"custom_marker:custom_marker_name\", \"custom_region:custom_region_name\" or \"region\".\
\
returns \"no such marker or region\", when markerindex is no valid markerindex\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "see description for more details",
    name = "MARKERTYPE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the markerid of all markers/regions in the project, beginning with 0 for the first marker/region",
    name = "MARKERID",
   },
  },
  sp_api = "ultraschall",
 },
 [852] = {
  fname = "MarkerMenu_Start",
  label = "US_MarkerMenu_Start",
  run = "in/out",
  desc = "starts a background-script, that hijacks the marker/region-context-menu when right-clicking them.\
\
You can set the menu-entries in resourcefolder/ultraschall_marker_menu.ini\
\
Important: this has issues with marker-lanes, so you might be able to open the context-menu when right-clicking above/below the marker!\
\
Markertypes, who have no menuentry set yet, will get their default-menu, instead.\
\
Scripts that shall influence the clicked marker, should use \
\
    -- get the last clicked marker\
    marker_id, marker_guid=ultraschall.GetTemporaryMarker() \
    \
    -- get the menuentry and additonal values from the markermenu\
    markermenu_entry, markermenu_entry_additionaldata, \
    markermenu_entry_markertype, markermenu_entry_number = ultraschall.MarkerMenu_GetLastClickedMenuEntry()\
    \
in them to retrieve the marker the user clicked on(plus some additional values), as Reaper has no way of finding this \
out via API.\
It also means, that marker-actions of Reaper might NOT be able to find out, which marker to influence, so writing \
your own scripts for that is probably unavoidable. Please keep this in mind and test this thoroughly.\
\
Note: to ensure, that the script can not be accidentally stopped by the user, you can run this function in a defer-loop to restart it, if needed.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, marker-menu has been started; false, markermenu is already running",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [853] = {
  fname = "MarkerMenu_Stop",
  label = "US_MarkerMenu_Stop",
  run = "in/out",
  desc = "stops the marker-menu background-script.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, marker-menu has been started; false, markermenu is already running",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [854] = {
  fname = "MarkerMenu_Debug",
  label = "US_MarkerMenu_Debug",
  run = "in/out",
  desc = "toggles debug-messages, that shall be output with the marker-menu-backgroundscript\
\
Messages available are\
  0 - no messages\
  1 - output the markertype of the clicked marker in the ReaScript-Console\
  2 - show marker-information as first entry in the marker-menu(type, overall marker-number, guid)",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting debug-messages worked; false, setting debug-messages did not work",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "0, show no debug messages in marker-menu-background-script\
1, show the markertype of the last clicked-marker/region\
2 - show marker-information as first entry in the marker-menu(type, overall marker-number, guid)",
    name = "MESSAGES",
   },
  },
  sp_api = "ultraschall",
 },
 [855] = {
  fname = "MarkerMenu_GetEntry",
  label = "US_MarkerMenu_GetEntry",
  run = "in/out",
  desc = "gets the description and action-command-id for a menu-entry in the marker-menu, associated with a certain custom marker/region\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the currently set description for this marker-entry; \"\", entry is a separator",
    name = "DESCRIPTION",
   },
   [2] = {
    type = "STRING",
    desc = "the currently set action-command-id for this marker-entry",
    name = "ACTION_COMMAND_ID",
   },
   [3] = {
    type = "STRING",
    desc = "potential additional data, stored with this menu-entry    ",
    name = "ADDITIONAL_DATA",
   },
   [4] = {
    type = "INTEGER",
    desc = "0, entry is no submenu(but can be within a submenu!); 1, entry is start of a submenu; 2, entry is last entry in a submenu",
    name = "SUBMENU",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, entry is greyed(submenu-entries will not be accessible!); false, entry is not greyed and therefore selectable",
    name = "GREYED",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, entry has a checkmark; false, entry has no checkmark; nil, entry will show checkmark depending on toggle-state of action_command_id",
    opt = {
     use = false,
    },
    name = "CHECKED",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom marker/region, whose menu-entry you want to retrieve",
    name = "MARKER_NAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, it's a custom-region; false, it's a custom-marker",
    name = "IS_MARKER_REGION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the entry-number, that you want to retrieve",
    name = "ENTRY_NR",
   },
  },
  sp_api = "ultraschall",
 },
 [856] = {
  fname = "MarkerMenu_SetEntry",
  label = "US_MarkerMenu_SetEntry",
  run = "in/out",
  desc = "sets the description and action-command-id for a menu-entry in the marker-menu, associated with a certain custom marker/region\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom marker/region, whose menu-entry you want to set",
    name = "MARKER_NAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, it's a custom-region; false, it's a custom-marker",
    name = "IS_MARKER_REGION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the entry-number, that you want to set",
    name = "ENTRY_NR",
   },
   [5] = {
    type = "STRING",
    desc = "the new action-command-id for this marker-entry",
    name = "ACTION",
   },
   [6] = {
    type = "STRING",
    desc = "the new description for this marker-entry; \"\", entry is a separator",
    name = "DESCRIPTION",
   },
   [7] = {
    type = "STRING",
    desc = "additional data, that will be sent by the marker-menu, when clicking this menuentry",
    name = "ADDITIONAL_DATA",
   },
   [8] = {
    type = "INTEGER",
    desc = "0, entry is no submenu; 1, entry is start of submenu, 2, entry if last entry in the submenu",
    name = "SUBMENU",
   },
   [9] = {
    type = "BOOLEAN",
    desc = "true, the entry is greyed(if it's a submenu, its entries will NOT show!); false, the entry is shown normally",
    name = "GREYED",
   },
   [10] = {
    type = "BOOLEAN",
    desc = "true, the entry will show a checkmark\
false, the entry will show no checkmark\
nil, the entry will show a checkmark depending on the toggle-command-state of the action for this menuentry",
    opt = {
     use = false,
    },
    name = "CHECKED",
   },
  },
  sp_api = "ultraschall",
 },
 [857] = {
  fname = "MarkerMenu_GetAvailableTypes",
  label = "US_MarkerMenu_GetAvailableTypes",
  run = "in/out",
  desc = "gets all available markers/regions, that are added to the marker-menu, including their types.\
\
The table is of the following format:\
    table[idx][\"name\"] - the name of the marker\
    table[idx][\"is_region\"] - true, markertype is region; false, markertype is not a region\
    table[idx][\"markertype\"] - either \"default\" or \"custom\"\
    table[idx][\"clicktype\"] - the clicktype; 0, right-click\
    ",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [858] = {
  fname = "MarkerMenu_GetEntry_DefaultMarkers",
  label = "US_MarkerMenu_GetEntry_DefaultMarkers",
  run = "in/out",
  desc = "gets the description and action-command-id for a menu-entry in the marker-menu, associated with a certain default marker/region from Ultraschall\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the new description for this marker-entry; \"\", entry is a separator",
    name = "DESCRIPTION",
   },
   [2] = {
    type = "STRING",
    desc = "the new action-command-id for this marker-entry",
    name = "ACTION_COMMAND_ID",
   },
   [3] = {
    type = "STRING",
    desc = "potentially stored additional data with this menuentry",
    name = "ADDITIONAL_DATA",
   },
   [4] = {
    type = "INTEGER",
    desc = "0, entry is no submenu(but can be within a submenu!); 1, entry is start of a submenu; 2, entry is last entry in a submenu",
    name = "SUBMENU",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, entry is greyed(submenu-entries will not be accessible!); false, entry is not greyed and therefore selectable",
    name = "GREYED",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, entry has a checkmark; false, entry has no checkmark; nil, entry will show checkmark depending on toggle-state of action_command_id",
    opt = {
     use = false,
    },
    name = "CHECKED",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the marker_type, whose menu-entry you want to get\
0, normal(chapter) markers\
1, planned markers (Custom markers whose name is _Planned:)\
2, edit (Custom markers, whose name is _Edit: or _Edit)\
3, shownote\
4, region\
5, action marker",
    name = "MARKER_TYPE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the entry-number, that you want to get",
    name = "ENTRY_NR",
   },
  },
  sp_api = "ultraschall",
 },
 [859] = {
  fname = "MarkerMenu_SetEntry_DefaultMarkers",
  label = "US_MarkerMenu_SetEntry_DefaultMarkers",
  run = "in/out",
  desc = "sets the description and action-command-id for a menu-entry in the marker-menu, associated with a certain default marker/region from Ultraschall\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the marker_type, whose menu-entry you want to set\
0, normal(chapter) markers\
1, planned markers (Custom markers whose name is _Planned:)\
2, edit (Custom markers, whose name is _Edit: or _Edit)\
3, shownote\
4, region\
5, action marker",
    name = "MARKER_TYPE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the entry-number, that you want to set",
    name = "ENTRY_NR",
   },
   [4] = {
    type = "STRING",
    desc = "the new action-command-id for this marker-entry",
    name = "ACTION",
   },
   [5] = {
    type = "STRING",
    desc = "the new description for this marker-entry; \"\", entry is a separator",
    name = "DESCRIPTION",
   },
   [6] = {
    type = "STRING",
    desc = "optional additional data, that will be passed over by the marker-menu, when this menu-entry has been clicked; \"\", if not needed",
    name = "ADDITIONAL_DATA",
   },
   [7] = {
    type = "INTEGER",
    desc = "0, entry is no submenu; 1, entry is start of submenu, 2, entry if last entry in the submenu",
    name = "SUBMENU",
   },
   [8] = {
    type = "BOOLEAN",
    desc = "true, the entry is greyed(if it's a submenu, its entries will NOT show!); false, the entry is shown normally",
    name = "GREYED",
   },
   [9] = {
    type = "BOOLEAN",
    desc = "true, the entry will show a checkmark\
false, the entry will show no checkmark\
nil, the entry will show a checkmark depending on the toggle-command-state of the action for this menuentry",
    opt = {
     use = false,
    },
    name = "CHECKED",
   },
  },
  sp_api = "ultraschall",
 },
 [860] = {
  fname = "MarkerMenu_RemoveEntry",
  label = "US_MarkerMenu_RemoveEntry",
  run = "in/out",
  desc = "removes a menu-entry in the marker-menu, associated with a certain default custom marker/region\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, removing was successful; false, removing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the custom-marker/region name, whose menu-entry you want to remove",
    name = "MARKER_NAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if the marker is a region; false, if not",
    name = "IS_MARKER_REGION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the entry-number, that you want to remove",
    name = "ENTRY_NR",
   },
  },
  sp_api = "ultraschall",
 },
 [861] = {
  fname = "MarkerMenu_RemoveEntry_DefaultMarkers",
  label = "US_MarkerMenu_RemoveEntry_DefaultMarkers",
  run = "in/out",
  desc = "removes a menu-entry in the marker-menu, associated with a certain default marker/region from Ultraschall\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, removing was successful; false, removing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the marker_type, whose menu-entry you want to remove\
0, normal(chapter) markers\
1, planned markers (Custom markers whose name is _Planned:)\
2, edit (Custom markers, whose name is _Edit: or _Edit)\
3, shownote\
4, region\
5, action marker",
    name = "MARKER_TYPE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the entry-number, that you want to remove",
    name = "ENTRY_NR",
   },
  },
  sp_api = "ultraschall",
 },
 [862] = {
  fname = "MarkerMenu_GetLastClickedMenuEntry",
  label = "US_MarkerMenu_GetLastClickedMenuEntry",
  run = "in/out",
  desc = "gets the last clicked entry of the marker-menu\
\
the markermenu_entry_number is according to the entry-number in the ultraschall_marker_menu.ini\
\
the stored data will be deleted after one use!",
  out = {
   [1] = {
    type = "STRING",
    desc = "the text of the clicked menu-entry",
    name = "MARKERMENU_ENTRY",
   },
   [2] = {
    type = "STRING",
    desc = "additional data, that is associated with this menu-entry",
    name = "MARKERMENU_ENTRY_ADDITIONALDATA",
   },
   [3] = {
    type = "STRING",
    desc = "the type of the marker",
    name = "MARKERMENU_ENTRY_MARKERTYPE",
   },
   [4] = {
    type = "STRING",
    desc = "the number of the marker-entry",
    name = "MARKERMENU_ENTRY_NUMBER",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [863] = {
  fname = "MarkerMenu_CountEntries",
  label = "US_MarkerMenu_CountEntries",
  run = "in/out",
  desc = "counts the number of menu-entries in the marker-menu, associated with a certain default custom marker/region\
\
ends conting, when an entry is either missing an action-command-id or description or both\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of entries available; -1, in case of an error",
    name = "NUMBER_OF_ENTRIES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the custom-marker/region name, whose menu-entries you want to count",
    name = "MARKER_NAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if the marker is a region; false, if not",
    name = "IS_MARKER_REGION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
  },
  sp_api = "ultraschall",
 },
 [864] = {
  fname = "MarkerMenu_CountEntries_DefaultMarkers",
  label = "US_MarkerMenu_CountEntries_DefaultMarkers",
  run = "in/out",
  desc = "counts the number of menu-entries in the marker-menu, associated with a certain default markers from Ultraschall\
\
ends counting, when an entry is either missing an action-command-id or description or both\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of entries available; -1, in case of an error",
    name = "NUMBER_OF_ENTRIES",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the marker_type, whose menu-entry you want to remove\
0, normal(chapter) markers\
1, planned markers (Custom markers whose name is _Planned:)\
2, edit (Custom markers, whose name is _Edit: or _Edit)\
3, shownote\
4, region\
5, action marker",
    name = "MARKER_TYPE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
  },
  sp_api = "ultraschall",
 },
 [865] = {
  fname = "MarkerMenu_InsertEntry",
  label = "US_MarkerMenu_InsertEntry",
  run = "in/out",
  desc = "inserts a menu-entry into the marker-menu, associated with a certain default custom marker/region and moves all others one up\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, inserting was successful; false, inserting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the custom-marker/region name, whose menu-entry you want to insert",
    name = "MARKER_NAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if the marker is a region; false, if not",
    name = "IS_MARKER_REGION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the entry-number, that you want to insert",
    name = "ENTRY_NR",
   },
   [5] = {
    type = "STRING",
    desc = "the action-command-id for this new marker-entry",
    name = "ACTION",
   },
   [6] = {
    type = "STRING",
    desc = "the description for this new marker-entry; \"\", entry is a separator",
    name = "DESCRIPTION",
   },
   [7] = {
    type = "STRING",
    desc = "additional data, that will be sent by the marker-menu, when clicking this menuentry",
    name = "ADDITIONAL_DATA",
   },
   [8] = {
    type = "INTEGER",
    desc = "0, entry is no submenu; 1, entry is start of submenu, 2, entry if last entry in the submenu",
    name = "SUBMENU",
   },
   [9] = {
    type = "BOOLEAN",
    desc = "true, the entry is greyed(if it's a submenu, its entries will NOT show!); false, the entry is shown normally",
    name = "GREYED",
   },
   [10] = {
    type = "BOOLEAN",
    desc = "true, the entry will show a checkmark\
false, the entry will show no checkmark\
nil, the entry will show a checkmark depending on the toggle-command-state of the action for this menuentry",
    opt = {
     use = false,
    },
    name = "CHECKED",
   },
  },
  sp_api = "ultraschall",
 },
 [866] = {
  fname = "MarkerMenu_InsertEntry_DefaultMarkers",
  label = "US_MarkerMenu_InsertEntry_DefaultMarkers",
  run = "in/out",
  desc = "inserts a menu-entry into the marker-menu, associated with a certain default marker/region as in Ultraschall and moves all others one up\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, inserting was successful; false, inserting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the marker_type, whose menu-entry you want to get\
0, normal(chapter) markers\
1, planned markers (Custom markers whose name is _Planned:)\
2, edit (Custom markers, whose name is _Edit: or _Edit)\
3, shownote\
4, region\
5, action marker",
    name = "MARKER_TYPE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the entry-number, that you want to insert",
    name = "ENTRY_NR",
   },
   [4] = {
    type = "STRING",
    desc = "the action-command-id for this new marker-entry",
    name = "ACTION",
   },
   [5] = {
    type = "STRING",
    desc = "the description for this new marker-entry; \"\", entry is a separator",
    name = "DESCRIPTION",
   },
   [6] = {
    type = "STRING",
    desc = "additional data, that will be sent by the marker-menu, when clicking this menuentry",
    name = "ADDITIONAL_DATA",
   },
   [7] = {
    type = "INTEGER",
    desc = "0, entry is no submenu; 1, entry is start of submenu, 2, entry if last entry in the submenu",
    name = "SUBMENU",
   },
   [8] = {
    type = "BOOLEAN",
    desc = "true, the entry is greyed(if it's a submenu, its entries will NOT show!); false, the entry is shown normally",
    name = "GREYED",
   },
   [9] = {
    type = "BOOLEAN",
    desc = "true, the entry will show a checkmark\
false, the entry will show no checkmark\
nil, the entry will show a checkmark depending on the toggle-command-state of the action for this menuentry",
    opt = {
     use = false,
    },
    name = "CHECKED",
   },
  },
  sp_api = "ultraschall",
 },
 [867] = {
  fname = "MarkerMenu_SetStartupAction",
  label = "US_MarkerMenu_SetStartupAction",
  run = "in/out",
  desc = "adds a startup-action into the marker-menu, associated with a certain default custom marker/region\
\
This startup-action will be run before the menu for this specific marker/region will be opened and can be used to populate/update the menuentries first before showing the menu(for filelists, etc)\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, adding startup-action was successful; false, adding startup-action was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the custom-marker/region name, whose menu-entry you want to add a startup-action for",
    name = "MARKER_NAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if the marker is a region; false, if not",
    name = "IS_MARKER_REGION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
   [4] = {
    type = "STRING",
    desc = "the action-command-id for this new marker-entry",
    name = "ACTION",
   },
  },
  sp_api = "ultraschall",
 },
 [868] = {
  fname = "MarkerMenu_SetStartupAction_DefaultMarkers",
  label = "US_MarkerMenu_SetStartupAction_DefaultMarkers",
  run = "in/out",
  desc = "adds a startup-action into the marker-menu, associated with a certain default marker/region as in Ultraschall and moves all others one up\
\
This startup-action will be run before the menu for this specific marker/region will be opened and can be used to populate/update the menuentries first before showing the menu(for filelists, etc)\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, adding startup-action was successful; false, adding startup-action was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the marker_type, whose menu-entry you want to add a startup-action for\
0, normal(chapter) markers\
1, planned markers (Custom markers whose name is _Planned:)\
2, edit (Custom markers, whose name is _Edit: or _Edit)\
3, shownote\
4, region\
5, action marker",
    name = "MARKER_TYPE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
   [3] = {
    type = "STRING",
    desc = "the action-command-id for this startup-action",
    name = "ACTION",
   },
  },
  sp_api = "ultraschall",
 },
 [869] = {
  fname = "MarkerMenu_RemoveSubMenu",
  label = "US_MarkerMenu_RemoveSubMenu",
  run = "in/out",
  desc = "removes a submenu from the markermenu of a specific custom marker.\
\
Will also remove nested submenus. \
If the number of starts of submenus and ends of submenus mismatch, this could cause weird behavior. So keep the starts and ends of submenu-entries consistent!\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, removing submenu worked; false, removing of submenus didn't work",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the custom-marker/region, whose sub-menu-entry you want to remove",
    name = "MARKER_NAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, the custom-marker is a region; false, the custom-marker is not a region",
    name = "IS_MARKER_REGION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the entry-number, that is the first entry in the submenu",
    name = "ENTRY_NR",
   },
  },
  sp_api = "ultraschall",
 },
 [870] = {
  fname = "MarkerMenu_RemoveSubMenu_DefaultMarkers",
  label = "US_MarkerMenu_RemoveSubMenu_DefaultMarkers",
  run = "in/out",
  desc = "removes a submenu from the markermenu of a specific default marker/region.\
\
Will also remove nested submenus. \
If the number of starts of submenus and ends of submenus mismatch, this could cause weird behavior. So keep the starts and ends of submenu-entries consistent!\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, removing submenu worked; false, removing of submenus didn't work",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the marker_type, whose sub-menu-entry you want to remove\
0, normal(chapter) markers\
1, planned markers (Custom markers whose name is _Planned:)\
2, edit (Custom markers, whose name is _Edit: or _Edit)\
3, shownote\
4, region\
5, action marker",
    name = "MARKER_TYPE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the clicktype; 0, right-click",
    name = "CLICKTYPE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the entry-number, that is the first entry in the submenu",
    name = "ENTRY_NR",
   },
  },
  sp_api = "ultraschall",
 },
 [871] = {
  fname = "MarkerMenu_GetLastTouchedMarkerRegion",
  label = "US_MarkerMenu_GetLastTouchedMarkerRegion",
  run = "in/out",
  desc = "Returns the last touched marker/region, when the MarkerMenu is running.\
\
returns nil, if no marker has been touched or markermenu is not running",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the last touched marker/region; 0-based",
    name = "LAST_TOUCHED_MARKER",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [872] = {
  fname = "MarkerMenu_GetLastClickState",
  label = "US_MarkerMenu_GetLastClickState",
  run = "in/out",
  desc = "Returns the last clickstate including modifiers of the markermenu\
\
returns nil, if no clickstate exists or markermenu is not running",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the last clickstate on a marker\
&1, left mouse button\
&2, right mouse button\
&4, Control key\
&8, Shift key\
&16, Alt key\
&32, Windows key\
&64, middle mouse button",
    name = "LAST_MARKER_CLICKSTATE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [873] = {
  fname = "GetSetChapterMarker_Attributes",
  label = "US_GetSetChapterMarker_Attributes",
  run = "in/out",
  desc = "Will get/set additional attributes of a chapter-marker.\
    \
Supported attributes are:\
  \"chap_title\" - the title of this chapter\
  \"chap_position\" - the current position of this chapter in seconds\
  \"chap_url\" - the url for this chapter(check first, if a shownote is not suited better for the task!)\
  \"chap_url_description\" - a description for this url\
  \"chap_description\" - a description of the content of this chapter\
  \"chap_is_advertisement\" - yes, if this chapter is an ad; \"\", to unset it\
  \"chap_image_path\" - the path to the filename of the chapter-image(Ultraschall will see it as placed in the project-folder!)\
  \"chap_image_description\" - a description for the chapter-image\
  \"chap_image_license\" - the license of the chapter-image\
  \"chap_image_origin\" - the origin of the chapterimage, like an institution or similar \
  \"chap_image_url\" - the url that links to the chapter-image\
  \"chap_descriptive_tags\" - some tags, that describe the chapter-content, must separated by commas\
  \"chap_content_notification_tags\" - some tags, that warn of specific content; must be separated by commas\
  \"chap_spoiler_alert\" - \"yes\", if spoiler; \"\", if no spoiler\
  \"chap_next_chapter_numbers\" - decide, which chapter could be the next after this one; \
                               - format is: \"chap_number:description\\nchap_number:description\\n\"\
                               - chap_number is the number of the chapter in timeline-order\
                               - it's possible to set multiple chapters as the next chapters; chap_number is 0-based\
                               - this can be used for non-linear podcasts, like \"choose your own adventure\"\
  \"chap_previous_chapter_numbers\" - decide, which chapter could be the previous before this one\
                               - format is: \"chap_number:description\\nchap_number:description\\n\"\
                               - chap_number is the number of the chapter in timeline-order\
                               - it's possible to set multiple chapters as the previous chapters; chap_number is 0-based\
                               - this can be used for non-linear podcasts, like \"choose your own adventure\"\
  \"chap_guid\" - a unique guid for this chapter-marker; read-only\
    \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the attribute exists/could be set; false, if not or an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the content of a specific attribute",
    name = "CONTENT",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set the attribute; false, retrieve the current content",
    name = "IS_SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the chapter-marker, whose attribute you want to get; 1-based",
    name = "IDX",
   },
   [3] = {
    type = "STRING",
    desc = "the attributename you want to get/set",
    name = "ATTRIBUTENAME",
   },
   [4] = {
    type = "STRING",
    desc = "the new contents to set the attribute with",
    name = "CONTENT",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, get/set this attribute with planned marker; false or nil, get/set this attribute with normal marker(chapter marker)",
    opt = {
     use = false,
    },
    name = "PLANNED",
   },
  },
  sp_api = "ultraschall",
 },
 [874] = {
  fname = "GetSetPodcast_Attributes",
  label = "US_GetSetPodcast_Attributes",
  run = "in/out",
  desc = "Will get/set metadata-attributes for a podcast.\
\
This is about the podcast globally, NOT the individual episodes.\
\
     \"podc_title\" - the title of the podcast\
     \"podc_description\" - a description for your podcast\
     \"podc_website\" - either one url or a list of website-urls of the podcast,separated by newlines\
     \"podc_contact_email\" - an email-address that can be used to contact the podcasters                  \
     \"podc_descriptive_tags\" - some tags, who describe the podcast, must be separated by commas\
     \"podc_category\" - a category that describes the podcast\
\
For episode's-metadata, use [GetSetPodcastEpisode\\_Attributes](#GetSetPodcastEpisode_Attributes)\
\
preset-values will be stored into resourcepath/ultraschall\\_podcast\\_presets.ini\
\
You can either set the current project's attributes(preset_slot=nil) or a preset(preset_slot=1 and higher)\
    \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the attribute exists/could be set; false, if not or an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the content of a specific attribute; when preset_slot is not nil then this is the content of the presetslot",
    name = "CONTENT",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set the attribute; false, retrieve the current content",
    name = "IS_SET",
   },
   [2] = {
    type = "STRING",
    desc = "the attributename you want to get/set",
    name = "ATTRIBUTENAME",
   },
   [3] = {
    type = "STRING",
    desc = "some attributes allow additional attributes to be set; in all other cases set to \"\"\
when attribute=\"podcast_website\", set this to a number, 1 and higher, which will index possibly multiple websites you have for your podcast\
use 1 for the main-website",
    name = "ADDITIONAL_ATTRIBUTE",
   },
   [4] = {
    type = "STRING",
    desc = "the new contents to set the attribute",
    name = "CONTENT",
   },
   [5] = {
    type = "INTEGER",
    desc = "the slot in the podcast-presets to get/set the value from/to; nil, no preset used",
    opt = {
     use = false,
    },
    name = "PRESET_SLOT",
   },
  },
  sp_api = "ultraschall",
 },
 [875] = {
  fname = "GetSetPodcastEpisode_Attributes",
  label = "US_GetSetPodcastEpisode_Attributes",
  run = "in/out",
  desc = "Will get/set metadata-attributes for a podcast-episode.\
\
This is about the individual podcast-episode, NOT the global podcast itself..\
\
For podcast's-metadata, use [GetSetPodcast\\_Attributes](#GetSetPodcast_Attributes)\
\
Supported attributes are:\
    \"epsd_title\" - the title of the episode\
    \"epsd_number\" - the number of the episode\
    \"epsd_season\" - the season of the episode\
    \"epsd_author\" - the authors of this episode as comma separated list\
    \"epsd_release_date\" - releasedate of the episode; yyyy-mm-dd\
    \"epsd_release_time\" - releasedate of the episode; hh:mm:ss\
    \"epsd_release_timezone\" - the time's timezone in UTC of the release-time; +hh:mm or -hh:mm\
    \"epsd_tagline\" - the tagline of the episode\
    \"epsd_description\" - the descriptionof the episode\
    \"epsd_cover\" - the cover-image of the episode(path+filename)\
    \"epsd_language\" - the language of the episode; Languagecode according to ISO639\
    \"epsd_explicit\" - yes, if explicit; \"\", if not explicit\
    \"epsd_descriptive_tags\" - some tags, that describe the content of the episode, must separated by commas\
    \"epsd_sponsor\" - the name of the sponsor of this episode\
    \"epsd_sponsor_url\" - a link to the sponsor's website\
    \"epsd_content_notification_tags\" - some tags, that warn of specific content; must be separated by commas\
    \"epsd_guid\" - a unique identifier for this episode; contains three guids in a row; read-only; can't be stored in presets!\
    \"epsd_produced_by_software\" - an identifier of which software was produced for this podcast-episode like \"Ultraschall\"\
\
preset-values will be stored into resourcepath/ultraschall\\_podcast\\_presets.ini\
\
You can either set the current project's attributes(preset_slot=nil) or a preset(preset_slot=1 and higher)\
    \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the attribute exists/could be set; false, if not or an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the content of a specific attribute; when preset_slot is not nil then this is the content of the presetslot",
    name = "CONTENT",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set the attribute; false, retrieve the current content",
    name = "IS_SET",
   },
   [2] = {
    type = "STRING",
    desc = "the attributename you want to get/set",
    name = "ATTRIBUTENAME",
   },
   [3] = {
    type = "STRING",
    desc = "some attributes allow additional attributes to be set; in all other cases set to \"\"",
    name = "ADDITIONAL_ATTRIBUTE",
   },
   [4] = {
    type = "STRING",
    desc = "the new contents to set the attribute",
    name = "CONTENT",
   },
   [5] = {
    type = "INTEGER",
    desc = "the slot in the podcast-presets to get/set the value from/to; nil, no preset used",
    opt = {
     use = false,
    },
    name = "PRESET_SLOT",
   },
  },
  sp_api = "ultraschall",
 },
 [876] = {
  fname = "GetSetShownoteMarker_Attributes",
  label = "US_GetSetShownoteMarker_Attributes",
  run = "in/out",
  desc = "Will get/set additional attributes of a shownote-marker.\
\
A shownote-marker has the naming-scheme \
    \
    _Shownote: name for this marker\
    \
    \
Supported attributes are:\
       \"shwn_title\" - the title of the shownote\
       \"shwn_position\" - the position of the shownote\
       \"shwn_description\" - a more detailed description for this shownote\
       \"shwn_descriptive_tags\" - some tags, that describe the content of the shownote, must separated by commas\
       \"shwn_url\" - the url you want to set\
       \"shwn_url_description\" - a short description of the url\
       \"shwn_url_retrieval_date\" - the date, at which you retrieved the url; yyyy-mm-dd\
       \"shwn_url_retrieval_time\" - the time, at which you retrieved the url; hh:mm:ss\
       \"shwn_url_retrieval_timezone_utc\" - the timezone of the retrieval time as utc; +hh:mm or -hh:mm\
       \"shwn_url_archived_copy_of_original_url\" - if you have an archived copy of the url(from archive.org, etc), you can place the link here\
       \"shwn_is_advertisement\" - yes, if the shownote is an ad; \"\", to unset it\
       \"shwn_language\" - the language of the content; Languagecode according to ISO639\
       \"shwn_location_gps\" - the gps-coordinates of the location\
       \"shwn_location_google_maps\" - the coordinates as used in Google Maps\
       \"shwn_location_open_street_map\" - the coordinates as used in Open Street Maps\
       \"shwn_location_apple_maps\" - the coordinates as used in Apple Maps                         \
       \"shwn_date\" - the date of the content of the shownote(when talking about events, etc); yyyy-mm-dd; use XX or XXXX, for when day/month/year is unknown or irrelevant\
       \"shwn_time\" - the time of the content of the shownote(when talking about events, etc); hh:mm:ss; use XX for when hour/minute/second is unknown or irrelevant\
       \"shwn_timezone\" - the timezone of the content of the shownote(when talking about events, etc); UTC-format; +hh:mm or -hh:mm\
       \"shwn_event_date_start\" - the startdate of an event associated with the show; yyyy-mm-dd\
       \"shwn_event_date_end\" - the enddate of an event associated with the show; yyyy-mm-dd\
       \"shwn_event_time_start\" - the starttime of an event associated with the show; hh:mm:ss\
       \"shwn_event_time_end\" - the endtime of an event associated with the show; hh:mm:ss\
       \"shwn_event_timezone\" - the timezone of the event assocated with the show; UTC-format; +hh:mm or -hh:mm\
       \"shwn_event_name\" - a name for the event\
       \"shwn_event_description\" - a description for the event\
       \"shwn_event_url\" - an url of the event(for ticket sale or the general url for the event)\
       \"shwn_event_location_gps\" - the gps-coordinates of the event-location\
       \"shwn_event_location_google_maps\" - the google-maps-coordinates of the event-location\
       \"shwn_event_location_open_street_map\" - the open-streetmap-coordinates of the event-location\
       \"shwn_event_location_apple_maps\" - the apple-maps-coordinates of the event-location\
       \"shwn_event_ics_data\" - the event as ics-data-format; will NOT set other event-attributes; will not be checked for validity!\
       \"shwn_quote_cite_source\" - a specific place you want to cite, like bookname + page + paragraph + line or something via webcite\
       \"shwn_quote\" - a quote from the cite_source\
       \"shwn_wikidata_uri\" - the uri to an entry to wikidata\
       \"shwn_guid\" - a unique identifier for this shownote; read-only\
       \"shwn_linked_audiovideomedia\" - a link to a mediafile like a podcast-episode; the additional attribute is the time-position in seconds\
    \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the attribute exists/could be set; false, if not or an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the content of a specific attribute",
    name = "CONTENT",
   },
   [3] = {
    type = "STRING",
    desc = "additional content, needed by some attributes; see list of attributes for more details",
    opt = {
     use = false,
    },
    name = "ADDITIONAL_CONTENT",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set the attribute; false, retrieve the current content",
    name = "IS_SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the shownote-marker, whose attribute you want to get; 1-based",
    name = "IDX",
   },
   [3] = {
    type = "STRING",
    desc = "the attributename you want to get/set",
    name = "ATTRIBUTENAME",
   },
   [4] = {
    type = "STRING",
    desc = "the new contents to set the attribute with",
    name = "CONTENT",
   },
   [5] = {
    type = "STRING",
    desc = "additional content, needed by some attributes; see list of attributes for more details",
    opt = {
     use = false,
    },
    name = "ADDITIONAL_CONTENT",
   },
  },
  sp_api = "ultraschall",
 },
 [877] = {
  fname = "GetPodcastAttributesAsJSON",
  label = "US_GetPodcastAttributesAsJSON",
  run = "in/out",
  desc = "Returns the MetaDataEntry for podcast as JSON according to PodMeta_v1-standard..",
  out = {
   [1] = {
    type = "STRING",
    desc = "the podcast-metadata as json",
    name = "PODCASTMETADATA_JSON",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [878] = {
  fname = "PodcastMetaData_ExportWebsiteAsJSON",
  label = "US_PodcastMetaData_ExportWebsiteAsJSON",
  run = "in/out",
  desc = "Returns the MetaDataEntry for a website as JSON according to PodMeta_v1-standard.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the podcast's website-metadata as json according to the PodMeta_v1-standard",
    name = "WEBSITE_ENTRY_JSON",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [879] = {
  fname = "GetEpisodeAttributesAsJSON",
  label = "US_GetEpisodeAttributesAsJSON",
  run = "in/out",
  desc = "Returns the MetaDataEntry for the podcast's episode as JSON according to PodMeta_v1-standard..",
  out = {
   [1] = {
    type = "STRING",
    desc = "the podcast's episode-metadata as json",
    name = "EPISODEMETADATA_JSON",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [880] = {
  fname = "GetChapterAttributesAsJSON",
  label = "US_GetChapterAttributesAsJSON",
  run = "in/out",
  desc = "Returns the MetaDataEntry for a chapter as JSON according to PodMeta_v1-standard..\
\
You can choose a range within which the marker must be for chapters only within a certain region, etc. \
If it is outside of it, this function returns \"\".\
\
You can set an offset to subtract. This could be important, if you want to render a region and want the \
chapter be the right position from the starting point of the region.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the chapter-metadata as json",
    name = "CHAPTERMETADATA_JSON",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the chapter-marker, whose metadata-entry you want to get as JSON; 1-based",
    name = "CHAPTERMARKER_ID",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number to give to this chapter within the JSON",
    name = "SHOWN_ID",
   },
   [3] = {
    type = "NUMBER",
    desc = "the starttime of the range to export valid chapters",
    name = "WITHIN_START",
   },
   [4] = {
    type = "NUMBER",
    desc = "the starttime of the range to export valid chapters",
    name = "WITHIN_END",
   },
   [5] = {
    type = "NUMBER",
    desc = "subtracts time from the position of the chapter",
    opt = {
     use = false,
    },
    name = "OFFSET",
   },
  },
  sp_api = "ultraschall",
 },
 [881] = {
  fname = "GetShownoteAttributesAsJSON",
  label = "US_GetShownoteAttributesAsJSON",
  run = "in/out",
  desc = "Returns the MetaDataEntry for a shownote as JSON according to PodMeta_v1-standard.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the shownote-metadata as json",
    name = "SHOWNOTEMETADATA_JSON",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the shownote-marker, whose metadata-entry you want to get as JSON; 1-based",
    name = "CHAPTERMARKER_ID",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number to give to this shownote within the JSON",
    name = "SHOWN_ID",
   },
   [3] = {
    type = "NUMBER",
    desc = "the starttime of the range to export valid shownotes",
    name = "WITHIN_START",
   },
   [4] = {
    type = "NUMBER",
    desc = "the starttime of the range to export valid shownotes",
    name = "WITHIN_END",
   },
   [5] = {
    type = "NUMBER",
    desc = "subtracts time from the position of the shownotes",
    opt = {
     use = false,
    },
    name = "OFFSET",
   },
  },
  sp_api = "ultraschall",
 },
 [882] = {
  fname = "PodcastMetadata_CreateJSON_Entry",
  label = "US_PodcastMetadata_CreateJSON_Entry",
  run = "in/out",
  desc = "Returns the MetaDataEntry for the entire podcast as JSON according to PodMeta_v1-standard.\
\
Includes all chapters and shownotes as well as episode and podcast attributes\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the podcast's entire-metadata as json according to the PodMeta_v1-standard",
    name = "PODMETA_ENTRY_JSON",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the starttime from which to add chapters/shownotes into the JSON",
    name = "START_TIME",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endtime to which to add chapters/shownotes into the JSON",
    name = "END_TIME",
   },
   [3] = {
    type = "NUMBER",
    desc = "the offset to subtract from the position-attributes of the shownotes/chapters",
    opt = {
     use = false,
    },
    name = "OFFSET",
   },
   [4] = {
    type = "STRING",
    desc = "path+filename to where the JSON shall be output to",
    opt = {
     use = false,
    },
    name = "FILENAME",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, add to the ID3-metadata storage of Reaper for the current project; false or nil, don't add(default)",
    opt = {
     use = false,
    },
    name = "DO_ID3",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, add to the VORBIS-metadata storage of Reaper for the current project;  false or nil, don't add(default)",
    opt = {
     use = false,
    },
    name = "DO_VORBIS",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, add to the APE-metadata storage of Reaper for the current project;  false or nil, don't add(default)",
    opt = {
     use = false,
    },
    name = "DO_APE",
   },
   [8] = {
    type = "BOOLEAN",
    desc = "true, add to the IXML-metadata storage of Reaper for the current project;  false or nil, don't add(default)",
    opt = {
     use = false,
    },
    name = "DO_IXML",
   },
  },
  sp_api = "ultraschall",
 },
 [883] = {
  fname = "GetSetPodcastWebsite",
  label = "US_GetSetPodcastWebsite",
  run = "in/out",
  desc = "Will get/set website-metadata-attributes for a podcast.\
\
This is about the podcast globally, NOT the individual episodes.\
\
preset-values will be stored into resourcepath/ultraschall\\_podcast\\_presets.ini\
    \
You can either set the current project's attributes(preset_slot=nil) or a preset(preset_slot=1 and higher)\
    \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the url could be set; false, if an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the url; when preset_slot is not nil then this is the content of the presetslot",
    name = "NAME",
   },
   [3] = {
    type = "STRING",
    desc = "a description of this url; when preset_slot is not nil then this is the content of the presetslot",
    name = "DESCRIPTION",
   },
   [4] = {
    type = "STRING",
    desc = "the url itself; when preset_slot is not nil then this is the content of the presetslot",
    name = "URL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set the attribute; false, retrieve the current content",
    name = "IS_SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the url to store, 1 and higher",
    name = "INDEX",
   },
   [3] = {
    type = "STRING",
    desc = "the name of the url",
    name = "NAME",
   },
   [4] = {
    type = "STRING",
    desc = "a description of this url",
    name = "DESCRIPTION",
   },
   [5] = {
    type = "STRING",
    desc = "the url itself",
    name = "URL",
   },
   [6] = {
    type = "INDEX",
    desc = "nil, don't return any preset's content; 1 and higher, set/return the website of the index-slot",
    opt = {
     use = false,
    },
    name = "PRESET_SLOT",
   },
  },
  sp_api = "ultraschall",
 },
 [884] = {
  fname = "GetSetContributor_Attributes",
  label = "US_GetSetContributor_Attributes",
  run = "in/out",
  desc = "Get/set contributor-metadata-attributes for an episode. You can have multiple contributors per episode.\
\
This is about the the individual episodes.    \
\
Accepted attributes are:\
\
  \"ctrb_name\" - the name of the contributor\
  \"ctrb_description\" - a description of the contributor\
  \"ctrb_email\" - the email of the contributor\
  \
  The following store websites for a contributor. The parameter additional_attribute represents the website-index.\
  So when additional_attribute=1 then the following attributes are for website number 1, when additional_attribute=2 then they are for website number 2.\
  ctrb_website_name - the name of the website; additional_attribute must be set to 1 and higher\
  ctrb_website_description - the name of the website; additional_attribute must be set to 1 and higher\
  ctrb_website_url - the name of the website; additional_attribute must be set to 1 and higher\
  \
preset-values will be stored into resourcepath/ultraschall\\_podcast\\_presets.ini\
\
You can either set the current project's attributes(preset_slot=nil) or a preset(preset_slot=1 and higher)\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the url could be set; false, if an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the content of the attribute for this contributor; when preset_slot is not nil then this will be content of the preset-slot",
    name = "CONTENT",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set the attribute; false, retrieve the current content",
    name = "IS_SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the contributor to store, 1 and higher",
    name = "INDEX",
   },
   [3] = {
    type = "STRING",
    desc = "the name of the attribute for the contributor",
    name = "ATTRIBUTENAME",
   },
   [4] = {
    type = "STRING",
    desc = "the additional attribute for some attributes; set to nil, if not needed.",
    name = "ADDITIONAL_ATTRIBUTE",
   },
   [5] = {
    type = "STRING",
    desc = "the value for this contributor",
    name = "CONTENT",
   },
   [6] = {
    type = "INDEX",
    desc = "nil, don't return any preset's content; 1 and higher, set/return the contributor's entry as stored in the presets",
    opt = {
     use = false,
    },
    name = "PRESET_SLOT",
   },
  },
  sp_api = "ultraschall",
 },
 [885] = {
  fname = "GetPodcastAttributePresetSlotByName",
  label = "US_GetPodcastAttributePresetSlotByName",
  run = "in/out",
  desc = "Gets the preset-index of a Podcast-Attribute-Preset by its name.\
\
Index must be between 1 and 4096 or it will return -1\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the preset; -1, in case of an error",
    name = "INDEX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the preset, non case-sensitive",
    name = "NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [886] = {
  fname = "GetEpisodeAttributePresetSlotByName",
  label = "US_GetEpisodeAttributePresetSlotByName",
  run = "in/out",
  desc = "Gets the preset-index of an Episode-Attribute-Preset by its name.\
\
Index must be between 1 and 4096 or it will return -1\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the preset; -1, in case of an error",
    name = "INDEX",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the preset, non case-sensitive",
    name = "NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [887] = {
  fname = "GetPodcastContributorAttributesAsJSON",
  label = "US_GetPodcastContributorAttributesAsJSON",
  run = "in/out",
  desc = "Returns the MetaDataEntry for contributors as JSON according to PodMeta_v1-standard..",
  out = {
   [1] = {
    type = "STRING",
    desc = "the contributor's-metadata as json",
    name = "CONTRIBUTORSMETADATA_JSON",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [888] = {
  fname = "CountContributors",
  label = "US_CountContributors",
  run = "in/out",
  desc = "Returns the number of podcast-contributors stored in this project.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of stored contributors in this project",
    name = "CONTRIBUTORS_COUNT",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [889] = {
  fname = "SetPodcastAttributesPreset_Name",
  label = "US_SetPodcastAttributesPreset_Name",
  run = "in/out",
  desc = "Sets the name of a podcast-metadata-preset\
    \
Note, this sets only the presetname for the podcast-metadata-preset. To set the name of the podcast-episode-metadata-preset, see: [SetPodcastEpisodeAttributesPreset\\_Name](#SetPodcastEpisodeAttributesPreset_Name)\
    \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting the name was successful; false, if setting the name was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the preset-slot, whose name you want to set",
    name = "PRESET_SLOT",
   },
   [2] = {
    type = "STRING",
    desc = "the new name of the preset",
    name = "PRESET_NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [890] = {
  fname = "GetPodcastAttributesPreset_Name",
  label = "US_GetPodcastAttributesPreset_Name",
  run = "in/out",
  desc = "Gets the name of a podcast-metadata-preset\
    \
Note, this gets only the presetname for the podcast-metadata-preset. To get the name of the podcast-episode-metadata-preset, see: [GetPodcastEpisodeAttributesPreset\\_Name](#GetPodcastEpisodeAttributesPreset_Name)\
    \
returns false in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the name of the podcast-metadata-preset",
    name = "PRESET_NAME",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the preset-slot, whose name you want to get",
    name = "PRESET_SLOT",
   },
  },
  sp_api = "ultraschall",
 },
 [891] = {
  fname = "SetPodcastEpisodeAttributesPreset_Name",
  label = "US_SetPodcastEpisodeAttributesPreset_Name",
  run = "in/out",
  desc = "Sets the name of a podcast-episode-metadata-preset\
\
Note, this sets only the presetname for the episode-metadata-preset. To set the name of the podcast-metadata-preset, see: [SetPodcastAttributesPreset\\_Name](#SetPodcastAttributesPreset_Name)\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting the name was successful; false, if setting the name was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the preset-slot, whose name you want to set",
    name = "PRESET_SLOT",
   },
   [2] = {
    type = "STRING",
    desc = "the new name of the preset",
    name = "PRESET_NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [892] = {
  fname = "GetPodcastEpisodeAttributesPreset_Name",
  label = "US_GetPodcastEpisodeAttributesPreset_Name",
  run = "in/out",
  desc = "Gets the name of a podcast-metadata-preset\
    \
Note, this gets only the presetname for the episode-metadata-preset. To get the name of the podcast-metadata-preset, see: [GetPodcastAttributesPreset\\_Name](#GetPodcastAttributesPreset_Name)\
    \
returns false in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the name of the podcast-metadata-preset",
    name = "PRESET_NAME",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the preset-slot, whose name you want to get",
    name = "PRESET_SLOT",
   },
  },
  sp_api = "ultraschall",
 },
 [893] = {
  fname = "GetVerticalZoom",
  label = "US_GetVerticalZoom",
  run = "in/out",
  desc = "Returns the vertical-zoom-factor.\
\
Returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current vertical zoom-factor",
    name = "VERTICAL_ZOOM_FACTOR",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [894] = {
  fname = "SetVerticalZoom",
  label = "US_SetVerticalZoom",
  run = "in/out",
  desc = "Sets the vertical zoom factor.\
\
To set it relative to the current vertical-zoom-value, use Reaper's own API-function CSurf_OnZoom\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1, in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the current vertical zoom-factor",
    name = "VERTICAL_ZOOM_FACTOR",
   },
  },
  sp_api = "ultraschall",
 },
 [895] = {
  fname = "StoreArrangeviewSnapshot",
  label = "US_StoreArrangeviewSnapshot",
  run = "in/out",
  desc = "Stores a new Arrangeview-snapshot, that includes the position, horizontal zoom, vertical zoom and vertical scroll.\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1, in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the slot for arrangeview-snapshot",
    name = "SLOT",
   },
   [2] = {
    type = "STRING",
    desc = "a description for this arrangeview-snapshot",
    name = "DESCRIPTION",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, store start and endposition of the current arrangeview; false, don't store start and endposition of current arrangeview(keep old position in slot, if existing)",
    name = "POSITION",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, store current vertical-zoom-factor; false, don't store current vertical-zoom-factor(keep old zoomfactor in slot, if existing)",
    name = "VZOOM",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, store current vertical scroll-factor; false, don't store current vertival-scroll-factor",
    name = "VSCROLL",
   },
  },
  sp_api = "ultraschall",
 },
 [896] = {
  fname = "IsValidArrangeviewSnapshot",
  label = "US_IsValidArrangeviewSnapshot",
  run = "in/out",
  desc = "Checks, if an Arrangeview-snapshot-slot is valid(means set).\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if Arrangeview-Snapshot is valid; false, if Arrangeview-Snapshot is not existing",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the slot for arrangeview-snapshot",
    name = "SLOT",
   },
  },
  sp_api = "ultraschall",
 },
 [897] = {
  fname = "RetrieveArrangeviewSnapshot",
  label = "US_RetrieveArrangeviewSnapshot",
  run = "in/out",
  desc = "Retrieves an Arrangeview-snapshot and returns the startposition, endposition and vertical and horizontal zoom-factor as well as the number vertical-scroll-factor..\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "false, in case of error; true, in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "a description for this arrangeview-snapshot",
    name = "DESCRIPTION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the startposition of the arrangeview",
    name = "STARTPOSITION",
   },
   [4] = {
    type = "NUMBER",
    desc = "the endposition of the arrangeview",
    name = "ENDPOSITION",
   },
   [5] = {
    type = "INTEGER",
    desc = "the vertical-zoomfactor(0-40)",
    name = "VZOOM",
   },
   [6] = {
    type = "NUMBER",
    desc = "the horizontal zoomfactor",
    name = "HZOOMFACTOR",
   },
   [7] = {
    type = "NUMBER",
    desc = "the vertical scroll-value",
    name = "VERTICAL_SCROLL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the slot for arrangeview-snapshot",
    name = "SLOT",
   },
  },
  sp_api = "ultraschall",
 },
 [898] = {
  fname = "RestoreArrangeviewSnapshot",
  label = "US_RestoreArrangeviewSnapshot",
  run = "in/out",
  desc = "Sets arrangeview to start/endposition and horizontal and vertical-zoom, as received from Arrangeview-Snapshot-slot. It returns the newly set start/endposition, vertical zoom, horizontal zoom and description of slot.\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "false, in case of error; true, in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "a description for this arrangeview-snapshot",
    name = "DESCRIPTION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the startposition of the arrangeview",
    name = "STARTPOSITION",
   },
   [4] = {
    type = "NUMBER",
    desc = "the endposition of the arrangeview",
    name = "ENDPOSITION",
   },
   [5] = {
    type = "INTEGER",
    desc = "the vertical-zoomfactor(0-40)",
    name = "VZOOM",
   },
   [6] = {
    type = "NUMBER",
    desc = "the horizontal zoomfactor",
    name = "HZOOMFACTOR",
   },
   [7] = {
    type = "NUMBER",
    desc = "the vertical-scroll-factor",
    name = "VERTICAL_SCROLL_FACTOR",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the slot for arrangeview-snapshot",
    name = "SLOT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "nil or true, set arrange to stored start and endposition(and it's horizontal-zoom); false, set only horizontal-zoom",
    opt = {
     use = false,
    },
    name = "POSITION",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "nil or true, set vertical-zoom; false, don't set vertical zoom",
    opt = {
     use = false,
    },
    name = "VZOOM",
   },
   [4] = {
    type = "INTEGER",
    desc = "decides, what shall be in the center of the zoomed horizontal view. Only available when position==false\
The following are available:\
 nil, keeps center of view in the center during zoom(default)\
  -1, default selection, as set in the reaper-prefs, \
   0, edit-cursor or playcursor(if it's in the current zoomfactor of the view during playback/recording) in center,\
   1, keeps edit-cursor in center of zoom\
   2, keeps center of view in the center during zoom\
   3, keeps in center of zoom, what is beneath the mousecursor",
    opt = {
     use = false,
    },
    name = "HCENTERMODE",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true or nil, sets vertical scroll-value as well; false, doesn't set vertical-scroll-value",
    opt = {
     use = false,
    },
    name = "VERTICALSCROLL",
   },
  },
  sp_api = "ultraschall",
 },
 [899] = {
  fname = "DeleteArrangeviewSnapshot",
  label = "US_DeleteArrangeviewSnapshot",
  run = "in/out",
  desc = "Deletes an ArrangeviewSnapshot-slot.\
\
Returns -1 if the slot is unset or slot is an invalid value.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of an error; 0 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the slot for arrangeview-snapshot",
    name = "SLOT",
   },
  },
  sp_api = "ultraschall",
 },
 [900] = {
  fname = "SetIDEFontSize",
  label = "US_SetIDEFontSize",
  run = "in/out",
  desc = "Sets the fontsize of Reaper's IDE (ReaScript/Video Processor/JSFX)\
New fontsize is valid for all IDE's opened after calling this function.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting was successful; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the new font-size for Reaper's IDEs",
    name = "FONTSIZE",
   },
  },
  sp_api = "ultraschall",
 },
 [901] = {
  fname = "GetIDEFontSize",
  label = "US_GetIDEFontSize",
  run = "in/out",
  desc = "Returns the current fontsize of Reaper's IDE (ReaScript/Video Processor/JSFX)",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the currently set fontsize within Reaper's IDEs",
    name = "FONTSIZE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [902] = {
  fname = "GetPlayCursorWidth",
  label = "US_GetPlayCursorWidth",
  run = "in/out",
  desc = "Returns the width of the playcursor in pixels\
\
see <a href=\"#SetPlayCursorWidth\">SetPlayCursorWidth</a> for setting the playcursor-width.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the width of the playcursor in pixels",
    name = "PLAY_CURSOR_WIDTH",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [903] = {
  fname = "SetPlayCursorWidth",
  label = "US_SetPlayCursorWidth",
  run = "in/out",
  desc = "Sets a new playcursor-width.\
\
see <a href=\"#GetPlayCursorWidth\">GetPlayCursorWidth</a> for getting the playcursor-width.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the new width of the playcursor",
    name = "PLAY_CURSOR_WIDTH",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, set the setting to reaper.ini so it persists after restarting Reaper; false, set it only for the time, until Reaper is restarted",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [904] = {
  fname = "GetScreenWidth",
  label = "US_GetScreenWidth",
  run = "in/out",
  desc = "returns the width of the screen in pixels.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the width of the screen in pixels",
    name = "WIDTH",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, returns workspace only; false, full monitor coordinates of the returned viewport; nil, will be seen as true",
    opt = {
     use = false,
    },
    name = "WANT_WORKAREA",
   },
  },
  sp_api = "ultraschall",
 },
 [905] = {
  fname = "GetScreenHeight",
  label = "US_GetScreenHeight",
  run = "in/out",
  desc = "returns the height of the screen in pixels.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the height of the screen in pixels",
    name = "WIDTH",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, returns workspace only; false, full monitor coordinates of the returned viewport; nil, will be seen as true",
    opt = {
     use = false,
    },
    name = "WANT_WORKAREA",
   },
  },
  sp_api = "ultraschall",
 },
 [906] = {
  fname = "ShowMenu",
  label = "US_ShowMenu",
  run = "in/out",
  desc = "Draws a menu at position x,y.\
\
Entries is the string, that contains the Menuentries, separated by |\
Example: \"Entry1|Entry2|Entry3\"\
\
Each field can start with a special character\
  # grays out the entry\
  ! entry is checked\
  > starts a new submenu, where every following entry will be part of the submenu\
  < ends a submenu with this entry being the last one\
These special characters can be combined, however, grayed out entries don't open submenus, even if they are shown as submenus.\
A field with nothing in it || creates a separator.    \
\
The returned number follows the numbering of the clickable(!) entries. Even if grayed out-entries can't be selected, they count as well.\
However, opening-submenu-entries and separators don't count as clickable.\
That said, if you have one grayed out entry and one normal entry, the grayed out entry is 1, the normal entry(the only selectable one) is 2.\
\
The following entry \
\
  Normal1|>SubmenuOpener|Submenuentry1|<SubmenuEntry2Closer|#Grayed Out\
\
creates the following menu:\
\
  Normal1\
  SubmenuOpener >\
    Submenuentry1\
    SubmenuEntry2Closer\
  Grayed Out\
\
One last thing: the title does not count as entry!\
\
Note for Mac-users: y-coordinates are \"reversed\", so y=0 is at the bottom\
Note for Linux: does not work on Linux yet.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the selected entry; 0, nothing selected",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the title shown on top of the menu",
    name = "TITLE",
   },
   [2] = {
    type = "STRING",
    desc = "the individual entries. See above on how to create such an entry.",
    name = "ENTRIES",
   },
   [3] = {
    type = "INTEGER",
    desc = "the x-position of the menu",
    name = "X",
   },
   [4] = {
    type = "INTEGER",
    desc = "the y-position of the menu",
    name = "Y",
   },
  },
  sp_api = "ultraschall",
 },
 [907] = {
  fname = "IsValidHWND",
  label = "US_IsValidHWND",
  run = "in/out",
  desc = "Checks, if a HWND-handler is a valid one.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if running it was successful; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "HWND",
    desc = "the HWND-handler to check for",
    name = "HWND",
   },
  },
  sp_api = "ultraschall",
 },
 [908] = {
  fname = "BrowseForOpenFiles",
  label = "US_BrowseForOpenFiles",
  run = "in/out",
  desc = "Opens a filechooser-dialog which optionally allows selection of multiple files.\
Unlike Reaper's own GetUserFileNameForRead, this dialog allows giving non-existant files as well(for saving operations).\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the path, in which the selected file(s) lie; nil, in case of an error; \"\" if no file was selected",
    name = "PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of files selected; 0, if no file was selected",
    name = "NUMBER_OF_FILES",
   },
   [3] = {
    type = "ARRAY",
    desc = "an array with all the selected files",
    name = "FILEARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the title shown in the filechooser-dialog",
    name = "WINDOWTITLE",
   },
   [2] = {
    type = "STRING",
    desc = "the initial-folder opened in the filechooser-dialog",
    name = "INITIALFOLDER",
   },
   [3] = {
    type = "STRING",
    desc = "the initial-file selected in the filechooser-dialog, good for giving default filenames",
    name = "INITIALFILE",
   },
   [4] = {
    type = "STRING",
    desc = "a list of extensions that can be selected in the selection-list.\
the list has the following structure(separate the entries with a \\0): \
      \"description of type1\\0type1\\0description of type 2\\0type2\\0\"\
the description of type can be anything that describes the type(s), \
to define one type, write: *.ext \
to define multiple types, write: *.ext;*.ext2;*.ext3\
the extensionList must end with a \\0",
    name = "EXTENSIONLIST",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, allows selection of multiple files; false, only allows selection of single files",
    name = "ALLOWMULTIPLE",
   },
  },
  sp_api = "ultraschall",
 },
 [909] = {
  fname = "HasHWNDChildWindowNames",
  label = "US_HasHWNDChildWindowNames",
  run = "in/out",
  desc = "Returns, whether the given HWND has childhwnds with a certain name in them. This is good for checking for valid Reaper-windows. \
As gfx.init()-windows can have the same as Reaper's original-windows, this function gives you the chance for aditional checks.\
gfx.init windows don't have child-hwnds and other applications probably have child-hwnds with different names.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, the HWND has child-hwnds with that name(s); false, it doesn't",
    name = "RETAL",
   },
  },
  ins = {
   [1] = {
    type = "HWND",
    desc = "the HWND, whose child-hwnd-names you want to check",
    name = "HWND",
   },
   [2] = {
    type = "STRING",
    desc = "a string with the names of the child-HWNDs the parameter hwnd must have. It is a \\0-separated string, means, you put \\0 in between the child-Hwnd-names.",
    name = "CHILDWINDOWNAMES",
   },
  },
  sp_api = "ultraschall",
 },
 [910] = {
  fname = "CloseReaScriptConsole",
  label = "US_CloseReaScriptConsole",
  run = "in/out",
  desc = "Closes the ReaConsole-window, if opened.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if there is a mute-point; false, if there isn't one",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [911] = {
  fname = "MB",
  label = "US_MB",
  run = "in/out",
  desc = "Shows Messagebox with user-clickable buttons. Works like reaper.MB() but unlike reaper.MB, this function accepts omitting some parameters for quicker use.\
\
Important: This doesn't work on Mac, as you can not replace the button texts there in the first place. Sorry...\
\
You can change the text in the buttons with button1_caption, button2_caption and button3_caption.\
    \
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the button pressed by the user\
-1, error while executing this function\
1, Button 1\
2, Button 2\
3, Button 3",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the message, that shall be shown in messagebox",
    name = "MSG",
   },
   [2] = {
    type = "STRING",
    desc = "the title of the messagebox",
    opt = {
     use = false,
    },
    name = "TITLE",
   },
   [3] = {
    type = "INTEGER",
    desc = "which buttons shall be shown in the messagebox, in that order\
0, OK\
1, OK CANCEL\
2, ABORT RETRY IGNORE\
3, YES NO CANCEL\
4, YES NO\
5, RETRY CANCEL\
nil, defaults to OK",
    opt = {
     use = false,
    },
    name = "TYPE",
   },
   [4] = {
    type = "STRING",
    desc = "caption of the first button",
    opt = {
     use = false,
    },
    name = "BUTTON1_CAPTION",
   },
   [5] = {
    type = "STRING",
    desc = "caption of the second button",
    opt = {
     use = false,
    },
    name = "BUTTON2_CAPTION",
   },
   [6] = {
    type = "STRING",
    desc = "caption of the third button",
    opt = {
     use = false,
    },
    name = "BUTTON3_CAPTION",
   },
  },
  sp_api = "ultraschall",
 },
 [912] = {
  fname = "GetTopmostHWND",
  label = "US_GetTopmostHWND",
  run = "in/out",
  desc = "returns the topmost-parent hwnd of a hwnd, as sometimes, hwnds are children of a higher hwnd. It also returns the number of parent hwnds available and a list of all parent hwnds for this hwnd.\
\
A hwnd is a window-handler, which contains all attributes of a certain window.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "HWND",
    desc = "the top-most parent hwnd available",
    name = "HWND",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of parent hwnds, that are above the parameter hwnd",
    name = "NUMBER_OF_PARENT_HWND",
   },
   [3] = {
    type = "TABLE",
    desc = "all available parent hwnds, above the parameter hwnd, including the topmost-hwnd",
    name = "ALL_PARENT_HWNDS",
   },
  },
  ins = {
   [1] = {
    type = "HWND",
    desc = "the HWND, whose topmost parent-HWND you want to have",
    name = "HWND",
   },
  },
  sp_api = "ultraschall",
 },
 [913] = {
  fname = "GetReaperWindowAttributes",
  label = "US_GetReaperWindowAttributes",
  run = "in/out",
  desc = "returns many attributes of the Reaper Main-window, like position, size, active, visibility, childwindows\
\
A hwnd is a window-handler, which contains all attributes of a certain window.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the left position of the Reaper-window in pixels",
    name = "LEFT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the top position of the Reaper-window in pixels",
    name = "TOP",
   },
   [3] = {
    type = "INTEGER",
    desc = "the right position of the Reaper-window in pixels",
    name = "RIGHT",
   },
   [4] = {
    type = "INTEGER",
    desc = "the bottom position of the Reaper-window in pixels",
    name = "BOTTOM",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, if the window is active(any child-hwnd of the Reaper-window has focus currently); false, if not",
    name = "ACTIVE",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, Reaper-window is visible; false, Reaper-window is not visible",
    name = "VISIBLE",
   },
   [7] = {
    type = "STRING",
    desc = "the current title of the Reaper-window",
    name = "TITLE",
   },
   [8] = {
    type = "INTEGER",
    desc = "the number of available child-hwnds that the Reaper-window currently has",
    name = "NUMBER_OF_CHILDHWNDS",
   },
   [9] = {
    type = "TABLE",
    desc = "a table with all child-hwnds in the following format:\
     childhwnds[index][1]=hwnd\
     childhwnds[index][2]=title",
    name = "CHILDHWNDS",
   },
  },
  ins = {
   [1] = {
    type = "HWND",
    desc = "the HWND, whose topmost parent-HWND you want to have",
    name = "HWND",
   },
  },
  sp_api = "ultraschall",
 },
 [914] = {
  fname = "Windows_Find",
  label = "US_Windows_Find",
  run = "in/out",
  desc = "Returns all Reaper-window-HWND-handler, with a given title. Can be further used with the JS\\_Window\\_functions of the JS-function-plugin.\
\
Doesn't return IDE-windows! Use [GetAllReaScriptIDEWindows](#GetAllReaScriptIDEWindows) to get them.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the title the window has",
    name = "TITLE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if the title must be exactly as given by parameter title; false, only parts of a windowtitle must match parameter title",
    name = "STRICT",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of windows found",
    name = "COUNT_HWNDS",
   },
   [2] = {
    type = "ARRAY",
    desc = "the hwnd-handler of all found windows",
    name = "HWND_ARRAY",
   },
   [3] = {
    type = "ARRAY",
    desc = "the adresses of all found windows",
    name = "HWND_ADRESSES",
   },
  },
  sp_api = "ultraschall",
 },
 [915] = {
  fname = "GetAllReaScriptIDEWindows",
  label = "US_GetAllReaScriptIDEWindows",
  run = "in/out",
  desc = "Returns the hwnds and all titles of all Reaper-IDE-windows currently opened.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of windows found",
    name = "COUNT_IDE_HWNDS",
   },
   [2] = {
    type = "ARRAY",
    desc = "the hwnd-handler of all found windows",
    name = "IDE_HWND_ARRAY",
   },
   [3] = {
    type = "ARRAY",
    desc = "the titles of all found windows",
    name = "IDE_TITLES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [916] = {
  fname = "GetReaScriptConsoleWindow",
  label = "US_GetReaScriptConsoleWindow",
  run = "in/out",
  desc = "Returns the hwnd of the ReaScript-Console-window, if opened.\
\
returns nil when ReaScript-console isn't opened",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler to the ReaScript-console, if opened",
    name = "REASCRIPT_CONSOLE_HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [917] = {
  fname = "GetHWND_ArrangeViewAndTimeLine",
  label = "US_GetHWND_ArrangeViewAndTimeLine",
  run = "in/out",
  desc = "Returns the HWND-Reaper-Windowhandler for the tracklist- and timeline-area in the arrange-view \
\
Note: in later versions of Reaper, TracklistWindow and arrange_view became the same.\
\
returns nil in case of an error. Please report such an error, which means, that you should use ultraschall.ShowLastErrorMessage() to show that error and report the information requested(fruitful bugreports lead to a handwritten postcard as reward :) )",
  out = {
   [1] = {
    type = "HWND",
    desc = "the HWND-window-handler for the tracklist-area of the arrangeview",
    name = "ARRANGE_VIEW",
   },
   [2] = {
    type = "HWND",
    desc = "the HWND-window-handler for the timeline/markerarea of the arrangeview",
    name = "TIMELINE",
   },
   [3] = {
    type = "HWND",
    desc = "the HWND-window-handler for the track-control-panel(TCP)(may not work anymore in an upcoming Reaper-release! Send me a note in that case!)",
    name = "TRACKCONTROLPANEL",
   },
   [4] = {
    type = "HWND",
    desc = "the HWND-window-handler for the tracklist-window",
    name = "TRACKLISTWINDOW",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [918] = {
  fname = "GetVerticalScroll",
  label = "US_GetVerticalScroll",
  run = "in/out",
  desc = "Gets the current vertical_scroll_value. The valuerange is dependent on the vertical zoom.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the vertical-scroll-factor",
    name = "VERTICAL_SCROLL_FACTOR",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [919] = {
  fname = "SetVerticalScroll",
  label = "US_SetVerticalScroll",
  run = "in/out",
  desc = "Sets the absolute vertical-scroll-factor.\
\
The possible value-range depends on the vertical-zoom.\
\
returns false in case of an error or if scrolling is impossible(e.g. zoomed out fully)",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting was successful; false, if setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the vertical scrolling-position",
    name = "SCROLLPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [920] = {
  fname = "SetVerticalRelativeScroll",
  label = "US_SetVerticalRelativeScroll",
  run = "in/out",
  desc = "Sets the vertical-scroll-factor, relative to it's current position.\
\
The possible value-range depends on the vertical-zoom.\
\
returns false in case of an error or if scrolling is impossible(e.g. zoomed out fully)",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting was successful; false, if setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the vertical scrolling-position",
    name = "SCROLLPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [921] = {
  fname = "GetUserInputs",
  label = "US_GetUserInputs",
  run = "in/out",
  desc = "Gets inputs from the user.\
\
Important: This works only on Windows, currently.\
\
The captions and the default-returnvalues must be passed as an integer-index table.\
e.g.\
  caption_names[1]=\"first caption name\"\
  caption_names[2]=\"second caption name\"\
  caption_names[1]=\"*third caption name, which creates an inputfield for passwords, due the * at the beginning\"\
  \
   The number of entries in the tables \"caption_names\" and \"default_retvals\" decide, how many inputfields are shown. Maximum is 16 inputfields.\
   You can safely pass \"\" as table-entry for a name, if you don't want to set it.\
  \
  The following example shows an input-dialog with three fields, where the first two the have default-values:\
  \
    retval, number_of_inputfields, returnvalues = ultraschall.GetUserInputs(\"I am the title\", {\"first\", \"second\", \"third\"}, {1,\"two\"})   \
 \
   Note: Don't use this function within defer-scripts or scripts that are started by defer-scripts, as this produces errors.\
     This is due limitations in Reaper, sorry.\
\
   Note for Mac-Users: size of caption/retval-fields and positioning of the window doesn't work on Mac yet, but you can use these parameters anyways.\
                   This is due Mac's way of having y-coordinate starting at the bottom and I will fix it as soon as I figured that out.\
\
   returns false in case of an error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, the user clicked ok on the userinput-window; false, the user clicked cancel or an error occured",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of returned values; nil, in case of an error",
    name = "NUMBER_OF_INPUTFIELDS",
   },
   [3] = {
    type = "TABLE",
    desc = "the returnvalues input by the user as a table; nil, in case of an error",
    name = "RETURNVALUES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the title of the inputwindow",
    name = "TITLE",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all inputfield-captions. All non-string-entries will be converted to string-entries. Begin an entry with a * for password-entry-fields.\
it can be up to 16 fields\
This dialog only allows limited caption-field-length, about 19-30 characters, depending on the size of the used characters.\
Don't enter nil as captionname, as this will be seen as end of the table by this function, omitting possible following captionnames!",
    name = "CAPTION_NAMES",
   },
   [3] = {
    type = "TABLE",
    desc = "a table with all default retvals. All non-string-entries will be converted to string-entries.\
it can be up to 16 fields\
Only enter nil as default-retval, if no further default-retvals are existing, otherwise use \"\" for empty retvals.\
for no default-retvals, write nil",
    name = "DEFAULT_RETVALS",
   },
   [4] = {
    type = "INTEGER",
    desc = "the extralength of the values-inputfield. With that, you can enhance the length of the inputfields. \
1-500(doesn't work on Mac yet)",
    opt = {
     use = false,
    },
    name = "VALUES_LENGTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the length of the caption in pixels; inputfields and OK, Cancel-buttons will be moved accordingly.(doesn't work on Mac yet)",
    opt = {
     use = false,
    },
    name = "CAPTION_LENGTH",
   },
   [6] = {
    type = "INTEGER",
    desc = "the x-position of the GetUserInputs-dialog; nil, to keep default position(doesn't work on Mac yet)",
    opt = {
     use = false,
    },
    name = "X_POS",
   },
   [7] = {
    type = "INTEGER",
    desc = "the y-position of the GetUserInputs-dialog; nil, to keep default position(doesn't work on Mac yet)",
    opt = {
     use = false,
    },
    name = "Y_POS",
   },
  },
  sp_api = "ultraschall",
 },
 [922] = {
  fname = "GetRenderToFileHWND",
  label = "US_GetRenderToFileHWND",
  run = "in/out",
  desc = "returns the HWND of the Render to File-dialog, if the window is opened.\
\
returns nil if Render to File-dialog is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the Render to File-dialog",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [923] = {
  fname = "GetActionsHWND",
  label = "US_GetActionsHWND",
  run = "in/out",
  desc = "returns the HWND of the Actions-dialog, if the window is opened.\
\
returns nil if the Actions-dialog is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the Actions-dialog",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [924] = {
  fname = "GetVideoHWND",
  label = "US_GetVideoHWND",
  run = "in/out",
  desc = "returns the HWND of the Video window, if the window is opened.\
\
returns nil if the Video Window is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the Video Window",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [925] = {
  fname = "GetRenderQueueHWND",
  label = "US_GetRenderQueueHWND",
  run = "in/out",
  desc = "returns the HWND of the Render-Queue-dialog, if the window is opened.\
\
returns nil if the Render-Queue-dialog is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the Render-Queue-dialog",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [926] = {
  fname = "GetProjectSettingsHWND",
  label = "US_GetProjectSettingsHWND",
  run = "in/out",
  desc = "returns the HWND of the Project Settings-dialog, if the window is opened.\
\
returns nil if the Project-Settings-dialog is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the Project Settings-dialog",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [927] = {
  fname = "GetPreferencesHWND",
  label = "US_GetPreferencesHWND",
  run = "in/out",
  desc = "returns the HWND of the Preferences-dialog, if the window is opened.\
\
returns nil if the Preferences-dialog is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the Preferences-dialog",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [928] = {
  fname = "GetSaveLiveOutputToDiskHWND",
  label = "US_GetSaveLiveOutputToDiskHWND",
  run = "in/out",
  desc = "returns the HWND of the \"Save live output to disk(bounce)\"-dialog, if the window is opened.\
\
returns nil if the \"Save live output to disk(bounce)\"-dialog is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the \"Save live output to disk(bounce)\"-dialog",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [929] = {
  fname = "GetConsolidateTracksHWND",
  label = "US_GetConsolidateTracksHWND",
  run = "in/out",
  desc = "returns the HWND of the Consolidate Tracks-dialog, if the window is opened.\
\
returns nil if the Consolidate Tracks-dialog is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the Consolidate Tracks-dialog",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [930] = {
  fname = "GetExportProjectMIDIHWND",
  label = "US_GetExportProjectMIDIHWND",
  run = "in/out",
  desc = "returns the HWND of the \"Export Project MIDI\"-dialog, if the window is opened.\
\
returns nil if the \"Export Project MIDI\"-dialog is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the \"Export Project MIDI\"-dialog",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [931] = {
  fname = "GetProjectDirectoryCleanupHWND",
  label = "US_GetProjectDirectoryCleanupHWND",
  run = "in/out",
  desc = "returns the HWND of the \"Project Directory Cleanup\"-dialog, if the window is opened.\
\
returns nil if the \"Project Directory Cleanup\"-dialog is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the \"Project Directory Cleanup\"-dialog",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [932] = {
  fname = "GetBatchFileItemConverterHWND",
  label = "US_GetBatchFileItemConverterHWND",
  run = "in/out",
  desc = "returns the HWND of the \"Batch File/Item Converter\"-dialog, if the window is opened.\
\
returns nil if the \"Batch File/Item Converter\"-dialog is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the \"Batch File/Item Converter\"-dialog",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [933] = {
  fname = "MoveChildWithinParentHWND",
  label = "US_MoveChildWithinParentHWND",
  run = "in/out",
  desc = "Moves a childhwnd within the coordinates of its parenthwnd.\
Good for moving gui-elements around without having to deal with screen-coordinates.\
\
You can decide, whether the new position shall be relative to its old position or absolute within the parenthwnd-position.\
\
The parent-hwnd must not be necessarily the parenthwnd of the childhwnd, so you can move the childhwnd relative to other hwnds as well, but\
keep in mind, that the childhwnd is only seeable within the boundaries of it's own parenthwnd!\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the new x-position on the screen in pixels",
    name = "NEWXPOS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new y-position on the screen in pixels",
    name = "NEWYPOS",
   },
   [3] = {
    type = "INTEGER",
    desc = "the new right-position on the screen in pixels",
    name = "NEWRIGHTPOS",
   },
   [4] = {
    type = "INTEGER",
    desc = "the new bottom-position on the screen in pixels",
    name = "NEWBOTTOMPOS",
   },
   [5] = {
    type = "INTEGER",
    desc = "the new x-position of the childhwnd, relative to it's position within the parenthwnd",
    name = "NEWRELATIVEX",
   },
   [6] = {
    type = "INTEGER",
    desc = "the new y-position of the childhwnd, relative to it's position within the parenthwnd",
    name = "NEWRELATIVEY",
   },
   [7] = {
    type = "INTEGER",
    desc = "the new width of the childhwnd in pixels",
    name = "NEWWIDTH",
   },
   [8] = {
    type = "INTEGER",
    desc = "the new height of the childhwnd in pixels",
    name = "NEWHEIGHT",
   },
  },
  ins = {
   [1] = {
    type = "HWND",
    desc = "the parenthwnd of the childhwnd, within whose dimensions you want to move the childhwnd",
    name = "PARENTHWND",
   },
   [2] = {
    type = "HWND",
    desc = "the childhwnd, that you want to move",
    name = "CHILDHWND",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, new position will be relative to the old position; false, new position will be absolute within the boundaries of the parenthwnd",
    name = "RELATIVE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the new x-position of the childhwnd in pixels",
    name = "LEFT",
   },
   [5] = {
    type = "INTEGER",
    desc = "the new y-position of the childhwnd in pixels",
    name = "TOP",
   },
   [6] = {
    type = "INTEGER",
    desc = "the new width of the childhwnd in pixels; when relative=true then 0 keeps the old width; when relative=false then 0 is width of 0 pixels",
    name = "WIDTH",
   },
   [7] = {
    type = "INTEGER",
    desc = "the new height of the childhwnd in pixels; when relative=true then 0 keeps the old height; when relative=false then 0 is height of 0 pixels",
    name = "HEIGHT",
   },
  },
  sp_api = "ultraschall",
 },
 [934] = {
  fname = "GetChildSizeWithinParentHWND",
  label = "US_GetChildSizeWithinParentHWND",
  run = "in/out",
  desc = "Returns the position, height and width of a childhwnd, relative to the position of parenthwnd\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the x-position of the childhwnd relative to the position of the parenthwnd in pixels",
    name = "XPOS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the y-position of the childhwnd relative to the position of the parenthwnd in pixels",
    name = "YPOS",
   },
   [3] = {
    type = "INTEGER",
    desc = "the width of the childhwnd in pixels",
    name = "WIDTH",
   },
   [4] = {
    type = "INTEGER",
    desc = "the height of the childhwnd in pixels",
    name = "HEIGHT",
   },
  },
  ins = {
   [1] = {
    type = "HWND",
    desc = "the parenthwnd of the childhwnd, whose position will be the base for position-calculation of the childhwnd",
    name = "PARENTHWND",
   },
   [2] = {
    type = "HWND",
    desc = "the childhwnd, whose dimensions you want to get, relative to the position of the parenthwnd",
    name = "CHILDHWND",
   },
  },
  sp_api = "ultraschall",
 },
 [935] = {
  fname = "GetCheckboxState",
  label = "US_GetCheckboxState",
  run = "in/out",
  desc = "Gets the checked-state of a checkbox-hwnd.\
This function will not check, whether the hwnd is an actual checkbox!\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, checkbox is checked; false, checkbox isn't checked",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "HWND",
    desc = "the hwnd-handler of the checkbox",
    name = "HWND",
   },
  },
  sp_api = "ultraschall",
 },
 [936] = {
  fname = "SetCheckboxState",
  label = "US_SetCheckboxState",
  run = "in/out",
  desc = "Sets the checked-state of a checkbox-hwnd.\
This function will not check, whether the hwnd is an actual checkbox!\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "HWND",
    desc = "the hwnd-handler of the checkbox",
    name = "HWND",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, checkbox will be checked; false, checkbox will be unchecked",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [937] = {
  fname = "GetRenderingToFileHWND",
  label = "US_GetRenderingToFileHWND",
  run = "in/out",
  desc = "Gets the HWND of the Rendering to File-dialog, which is displayed while Reaper is rendering.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "HWND",
    desc = "the HWND of the render to file-dialog; nil, in case of an error",
    name = "RENDERTOFILE_DIALOG",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [938] = {
  fname = "ConvertScreen2ClientXCoordinate_ReaperWindow",
  label = "US_ConvertScreen2ClientXCoordinate_ReaperWindow",
  run = "in/out",
  desc = "Converts an x-screencoordinate into a x-coordinate within the Reaper-Main-Window.\
Due to Api-limitations, if the Reaper-window is too small, the position might be wrong up to about 74 pixels!\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "coordinate within the main Reaper-window. Negative, if the coordinate is left of the edge of the window; -1, in case of error",
    name = "XCLIENTCOORDINATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the screen-coordinate, you want to have converted to.",
    name = "XSCREENCOORDINATE",
   },
  },
  sp_api = "ultraschall",
 },
 [939] = {
  fname = "ConvertClient2ScreenXCoordinate_ReaperWindow",
  label = "US_ConvertClient2ScreenXCoordinate_ReaperWindow",
  run = "in/out",
  desc = "Converts an x-clientcoordinate from within the main Reaper-window into a x-screencoordinate.\
Due to Api-limitations, if the Reaper-window is too small, the position might be wrong up to about 74 pixels!\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "coordinate within the screen.",
    name = "XSCREENCOORDINATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the screen-coordinate, you want to have converted to. Negative, if left of the left edge of the main Reaper-window.",
    name = "XCLIENTCOORDINATE",
   },
  },
  sp_api = "ultraschall",
 },
 [940] = {
  fname = "SetReaperWindowToSize",
  label = "US_SetReaperWindowToSize",
  run = "in/out",
  desc = "Sets the Reaper-Window to the size of w and h. The x and y-windowposition will be retained.\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the new width of the Reaper-window in pixels",
    name = "W",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new height of the reaper-windows in pixels",
    name = "H",
   },
  },
  sp_api = "ultraschall",
 },
 [941] = {
  fname = "ConvertYCoordsMac2Win",
  label = "US_ConvertYCoordsMac2Win",
  run = "in/out",
  desc = "Converts the y-coordinate between Windows/Linux and MacOS-based systems.\
\
Note: MacOS y-coordinates begin at the bottom of the screen, while Windows and Linux y-coordinates begin at the top.\
With this function, you can convert between these two coordinate-systems\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the converted coordinate in pixels",
    name = "CONV_YCOORD",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the y-coordinate to convert in pixels",
    name = "YCOORD",
   },
   [2] = {
    type = "INTEGER",
    desc = "the height of the screen in pixels, which is the base for the conversion; nil, uses current screenheight",
    opt = {
     use = false,
    },
    name = "HEIGHT",
   },
  },
  sp_api = "ultraschall",
 },
 [942] = {
  fname = "GetMediaExplorerHWND",
  label = "US_GetMediaExplorerHWND",
  run = "in/out",
  desc = "returns the HWND of the Media Explorer, if the window is opened.\
\
returns nil if Media Explorer is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the Media Explorer",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [943] = {
  fname = "GetTimeByMouseXPosition",
  label = "US_GetTimeByMouseXPosition",
  run = "in/out",
  desc = "Returns the projectposition at x-mouseposition.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the projectposition at x-coordinate in seconds",
    name = "POSITION",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the x-position in pixels, from which you would love to have the projectposition",
    name = "XPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [944] = {
  fname = "ShowTrackInputMenu",
  label = "US_ShowTrackInputMenu",
  run = "in/out",
  desc = "Opens a TrackInput-context menu\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, opening the menu worked; false, there was an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "x position of the context-menu in pixels",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "y position of the context-menu in pixels",
    name = "Y",
   },
   [3] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected one",
    opt = {
     use = false,
    },
    name = "MEDIATRACK",
   },
   [4] = {
    type = "HWND",
    desc = "a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window",
    opt = {
     use = false,
    },
    name = "HWNDPARENT",
   },
  },
  sp_api = "ultraschall",
 },
 [945] = {
  fname = "ShowTrackPanelMenu",
  label = "US_ShowTrackPanelMenu",
  run = "in/out",
  desc = "Opens a TrackPanel-context menu\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, opening the menu worked; false, there was an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "x position of the context-menu in pixels",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "y position of the context-menu in pixels",
    name = "Y",
   },
   [3] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected one",
    opt = {
     use = false,
    },
    name = "MEDIATRACK",
   },
   [4] = {
    type = "HWND",
    desc = "a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window",
    opt = {
     use = false,
    },
    name = "HWNDPARENT",
   },
  },
  sp_api = "ultraschall",
 },
 [946] = {
  fname = "ShowTrackAreaMenu",
  label = "US_ShowTrackAreaMenu",
  run = "in/out",
  desc = "Opens a TrackArea-context menu\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, opening the menu worked; false, there was an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "x position of the context-menu in pixels",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "y position of the context-menu in pixels",
    name = "Y",
   },
   [3] = {
    type = "HWND",
    desc = "a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window",
    opt = {
     use = false,
    },
    name = "HWNDPARENT",
   },
  },
  sp_api = "ultraschall",
 },
 [947] = {
  fname = "ShowTrackRoutingMenu",
  label = "US_ShowTrackRoutingMenu",
  run = "in/out",
  desc = "Opens a TrackRouting-context menu\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, opening the menu worked; false, there was an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "x position of the context-menu in pixels",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "y position of the context-menu in pixels",
    name = "Y",
   },
   [3] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected one",
    opt = {
     use = false,
    },
    name = "MEDIATRACK",
   },
   [4] = {
    type = "HWND",
    desc = "a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window",
    opt = {
     use = false,
    },
    name = "HWNDPARENT",
   },
  },
  sp_api = "ultraschall",
 },
 [948] = {
  fname = "ShowRulerMenu",
  label = "US_ShowRulerMenu",
  run = "in/out",
  desc = "Opens a Ruler-context menu\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, opening the menu worked; false, there was an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "x position of the context-menu in pixels",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "y position of the context-menu in pixels",
    name = "Y",
   },
   [3] = {
    type = "HWND",
    desc = "a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window",
    opt = {
     use = false,
    },
    name = "HWNDPARENT",
   },
  },
  sp_api = "ultraschall",
 },
 [949] = {
  fname = "ShowMediaItemMenu",
  label = "US_ShowMediaItemMenu",
  run = "in/out",
  desc = "Opens a MediaItem-context menu\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, opening the menu worked; false, there was an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "x position of the context-menu in pixels",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "y position of the context-menu in pixels",
    name = "Y",
   },
   [3] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected one",
    opt = {
     use = false,
    },
    name = "MEDIAITEM",
   },
   [4] = {
    type = "HWND",
    desc = "a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window",
    opt = {
     use = false,
    },
    name = "HWNDPARENT",
   },
  },
  sp_api = "ultraschall",
 },
 [950] = {
  fname = "ShowEnvelopeMenu",
  label = "US_ShowEnvelopeMenu",
  run = "in/out",
  desc = "Opens a Track/TakeEnvelope-context menu\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, opening the menu worked; false, there was an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "x position of the context-menu in pixels",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "y position of the context-menu in pixels",
    name = "Y",
   },
   [3] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope/TakeEnvelope, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected TrackEnvelope",
    opt = {
     use = false,
    },
    name = "TRACKENVELOPE",
   },
   [4] = {
    type = "HWND",
    desc = "a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window",
    opt = {
     use = false,
    },
    name = "HWNDPARENT",
   },
  },
  sp_api = "ultraschall",
 },
 [951] = {
  fname = "ShowEnvelopePointMenu",
  label = "US_ShowEnvelopePointMenu",
  run = "in/out",
  desc = "Opens a Track/TakeEnvelope-Point-context menu\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, opening the menu worked; false, there was an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "x position of the context-menu in pixels",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "y position of the context-menu in pixels",
    name = "Y",
   },
   [3] = {
    type = "INTEGER",
    desc = "the envelope-point, which shall be influenced by the context-menu",
    name = "POINTIDX",
   },
   [4] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope/TakeEnvelope, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected TrackEnvelope",
    opt = {
     use = false,
    },
    name = "TRACKENVELOPE",
   },
   [5] = {
    type = "HWND",
    desc = "a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window",
    opt = {
     use = false,
    },
    name = "HWNDPARENT",
   },
  },
  sp_api = "ultraschall",
 },
 [952] = {
  fname = "ShowEnvelopePointMenu_AutomationItem",
  label = "US_ShowEnvelopePointMenu_AutomationItem",
  run = "in/out",
  desc = "Opens a Track/TakeEnvelope-Point-context menu for AutomationItems\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, opening the menu worked; false, there was an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "x position of the context-menu in pixels",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "y position of the context-menu in pixels",
    name = "Y",
   },
   [3] = {
    type = "INTEGER",
    desc = "the envelope-point, which shall be influenced by the context-menu",
    name = "POINTIDX",
   },
   [4] = {
    type = "INTEGER",
    desc = "the automation item-id within this Envelope, beginning with 1 for the first",
    name = "AUTOMATIONIDX",
   },
   [5] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope/TakeEnvelope, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected TrackEnvelope",
    opt = {
     use = false,
    },
    name = "TRACKENVELOPE",
   },
   [6] = {
    type = "HWND",
    desc = "a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window",
    opt = {
     use = false,
    },
    name = "HWNDPARENT",
   },
  },
  sp_api = "ultraschall",
 },
 [953] = {
  fname = "ShowAutomationItemMenu",
  label = "US_ShowAutomationItemMenu",
  run = "in/out",
  desc = "Opens an AutomationItem-context menu\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, opening the menu worked; false, there was an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "x position of the context-menu in pixels",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "y position of the context-menu in pixels",
    name = "Y",
   },
   [3] = {
    type = "INTEGER",
    desc = "the automation item-id within this Envelope which shall be influenced by the menu-selection of the opened context-menu, beginning with 1 for the first",
    name = "AUTOMATIONIDX",
   },
   [4] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope/TakeEnvelope, which shall be influenced by the menu-selection of the opened context-menu; nil, use the currently selected TrackEnvelope",
    opt = {
     use = false,
    },
    name = "TRACKENVELOPE",
   },
   [5] = {
    type = "HWND",
    desc = "a HWND, in which the context-menu shall be shown in; nil, use Reaper's main window",
    opt = {
     use = false,
    },
    name = "HWNDPARENT",
   },
  },
  sp_api = "ultraschall",
 },
 [954] = {
  fname = "GetSaveProjectAsHWND",
  label = "US_GetSaveProjectAsHWND",
  run = "in/out",
  desc = "returns the HWND of the Save As-dialog, if the window is opened.\
\
returns nil if the Save As-dialog is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the Save As-dialog",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [955] = {
  fname = "SetHelpDisplayMode",
  label = "US_SetHelpDisplayMode",
  run = "in/out",
  desc = "sets the help-display-mode, as shown in the area beneath the track control panels.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "0, No information display  \
1, Reaper tips  \
2, Track/item count  \
3, selected track/item/envelope details  \
4, CPU/RAM use, time since last save  ",
    name = "HELPCONTENT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, show mouse editing-help; false, don't show mouse editing-help",
    name = "MOUSEEDITING",
   },
  },
  sp_api = "ultraschall",
 },
 [956] = {
  fname = "GetHelpDisplayMode",
  label = "US_GetHelpDisplayMode",
  run = "in/out",
  desc = "gets the current help-display-mode, as shown in the area beneath the track control panels.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, No information display  \
1, Reaper tips  \
2, Track/item count  \
3, selected track/item/envelope details  \
4, CPU/RAM use, time since last save  ",
    name = "HELPCONTENT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, show mouse editing-help; false, don't show mouse editing-help",
    name = "MOUSEEDITING",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [957] = {
  fname = "WiringDiagram_SetOptions",
  label = "US_WiringDiagram_SetOptions",
  run = "in/out",
  desc = "sets the current wiring-display-options",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was not successful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "only show send wires on track mouseover; true, it's set; false, it's unset",
    name = "SHOW_SEND_WIRES",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "show routing controls when creating send/hardware output; true, it's set; false, it's unset",
    name = "SHOW_ROUTING_CONTROLS",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "only show hardware output/input wires on track mouseover; true, it's set; false, it's unset",
    name = "SHOW_HARDWARE_OUTPUTS",
   },
  },
  sp_api = "ultraschall",
 },
 [958] = {
  fname = "WiringDiagram_GetOptions",
  label = "US_WiringDiagram_GetOptions",
  run = "in/out",
  desc = "gets the current wiring-display-options",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "only show send wires on track mouseover; true, it's set; false, it's unset",
    name = "SHOW_SEND_WIRES",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "show routing controls when creating send/hardware output; true, it's set; false, it's unset",
    name = "SHOW_ROUTING_CONTROLS",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "only show hardware output/input wires on track mouseover; true, it's set; false, it's unset",
    name = "SHOW_HARDWARE_OUTPUTS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [959] = {
  fname = "GetTCPWidth",
  label = "US_GetTCPWidth",
  run = "in/out",
  desc = "Returns the current width of the TrackControlPanel.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the width of the TCP",
    name = "WIDTH",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [960] = {
  fname = "VideoWindow_FullScreenToggle",
  label = "US_VideoWindow_FullScreenToggle",
  run = "in/out",
  desc = "toggles fullscreen-state of Reaper's video-processor-window \
  \
returns nil in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, video-window is now fullscreen; false, video-window is NOT fullscreen",
    name = "FULLSCREENSTATE",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, sets video-window to fullscreen; false, sets video-window to windowed; nil, toggle between fullscreen and nonfullscreen states",
    opt = {
     use = false,
    },
    name = "TOGGLE",
   },
  },
  sp_api = "ultraschall",
 },
 [961] = {
  fname = "PreventUIRefresh",
  label = "US_PreventUIRefresh",
  run = "in/out",
  desc = "like Reaper's own PreventUIRefresh, it allows you to prevent redrawing of the userinterface.\
\
Unlike Reaper's own PreventUIRefresh, this will manage the preventcount itself.\
\
this will not take into account usage of Reaper's own PreventUIRefresh, so you should use either\
\
To reallow refreshing of the UI, use [RestoreUIRefresh](#RestoreUIRefresh).",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of times PreventUIRefresh has been called since scriptstart",
    name = "CURRENT_PREVENTCOUNT",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [962] = {
  fname = "RestoreUIRefresh",
  label = "US_RestoreUIRefresh",
  run = "in/out",
  desc = "This reallows UI-refresh, after you've prevented it using [PreventUIRefresh](#PreventUIRefresh).\
\
If you set parameter full=true, it will reset all PreventUIRefresh-calls since scriptstart at once, otherwise you need to call this\
as often until the returnvalue current_preventcount equals 0.\
\
To get the remaining UI-refreshes to be restored, use [GetPreventUIRefreshCount](#GetPreventUIRefreshCount)\
\
If no UIRefreshes are available anymore, calling this function has no effect.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the remaining number of times PreventUIRefresh has been called since scriptstart",
    name = "CURRENT_PREVENTCOUNT",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, restores UIRefresh fully, no matter, how often PreventUIRefresh has been called before; false or nil, just reset one single call to PreventUIRefresh",
    opt = {
     use = false,
    },
    name = "FULL",
   },
  },
  sp_api = "ultraschall",
 },
 [963] = {
  fname = "GetPreventUIRefreshCount",
  label = "US_GetPreventUIRefreshCount",
  run = "in/out",
  desc = "This returns the number of times [PreventUIRefresh](#PreventUIRefresh) has been called since scriptstart, minus possible restored UI refreshes.\
\
Use [RestoreUIRefresh](#RestoreUIRefresh) to restore UI-refresh ",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the remaining number of times PreventUIRefresh has been called since scriptstart",
    name = "CURRENT_PREVENTCOUNT",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [964] = {
  fname = "SetItemButtonsVisible",
  label = "US_SetItemButtonsVisible",
  run = "in/out",
  desc = "allows setting, which item-buttons shall be shown\
  \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting button was successful; false, buttons couldn't be set",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, show the volume knob; false, don't show the volume knob; nil, keep current setting",
    opt = {
     use = false,
    },
    name = "VOLUME",
   },
   [2] = {
    type = "INTEGER",
    desc = "sets state of locked/unlocked button\
nil, keep current state\
0, don't show lockstate button\
1, show locked button only\
2, show unlocked button only\
3, show locked and unlocked button",
    opt = {
     use = false,
    },
    name = "LOCKED",
   },
   [3] = {
    type = "INTEGER",
    desc = "sets state of mute/unmuted button\
nil, keep current state\
0, don't show mute button\
1, show mute button only\
2, show unmuted button only\
3, show muted and unmuted button",
    opt = {
     use = false,
    },
    name = "MUTE",
   },
   [4] = {
    type = "INTEGER",
    desc = "sets state of itemnotes-button\
nil, keep current state\
0, don't show item-note button\
1, show itemnote existing-button only\
2, show no itemnote existing-button only\
3, show itemnote existing and no itemnote existing-button",
    opt = {
     use = false,
    },
    name = "NOTES",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, show the pooled midi-button; false, don't show the pooled midi-button; nil, keep current setting",
    opt = {
     use = false,
    },
    name = "POOLEDMIDI",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, show the grouped item-button; false, don't show the grouped item-button; nil, keep current setting",
    opt = {
     use = false,
    },
    name = "GROUPEDITEMS",
   },
   [7] = {
    type = "INTEGER",
    desc = "sets state of take fx-button\
nil, keep current state\
0, don't show take-fx button\
1, show active take fx-button only\
2, show non active take fx-button only\
3, show active and nonactive take fx-button",
    opt = {
     use = false,
    },
    name = "PERTAKEFX",
   },
   [8] = {
    type = "INTEGER",
    desc = "show properties-button\
nil, keep current state\
0, don't show item properties-button\
1, show item properties-button\
2, show item properties-button only if resampled media",
    opt = {
     use = false,
    },
    name = "PROPERTIES",
   },
   [9] = {
    type = "INTEGER",
    desc = "sets state of envelope-button\
nil, keep current state\
0, don't show envelope-button\
1, show active envelope-button only\
2, show non active envelope-button only\
3, show active and nonactive envelope-button",
    opt = {
     use = false,
    },
    name = "AUTOMATIONENVELOPES",
   },
   [10] = {
    type = "INTEGER",
    desc = "the value to hide when take is less than x pixels; 0 to 2147483647",
    opt = {
     use = false,
    },
    name = "HIDE_WHEN_TAKE_LESS_THAN_PX",
   },
  },
  sp_api = "ultraschall",
 },
 [965] = {
  fname = "GetItemButtonsVisible",
  label = "US_GetItemButtonsVisible",
  run = "in/out",
  desc = "gets, which item-buttons are be shown",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, shows the volume knob; false, doesn't show the volume knob",
    name = "VOLUME",
   },
   [2] = {
    type = "INTEGER",
    desc = "gets visibility-state of locked/unlocked button\
0, doesn't show lockstate button\
1, shows locked button only\
2, shows unlocked button only\
3, shows locked and unlocked button",
    name = "LOCKED",
   },
   [3] = {
    type = "INTEGER",
    desc = "gets visibility-state of mute/unmuted button\
0, doesn't show mute button\
1, shows mute button only\
2, shows unmuted button only\
3, shows muted and unmuted button",
    name = "MUTE",
   },
   [4] = {
    type = "INTEGER",
    desc = "gets visibility-state of itemnotes-button\
0, doesn't show item-note button\
1, shows itemnote existing-button only\
2, shows no itemnote existing-button only\
3, shows itemnote existing and no itemnote existing-button",
    name = "NOTES",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, shows the pooled midi-button; false, don't show the pooled midi-button",
    name = "POOLEDMIDI",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, shows the grouped item-button; false, don't show the grouped item-button",
    name = "GROUPEDITEMS",
   },
   [7] = {
    type = "INTEGER",
    desc = "gets visibility-state of take fx-button\
0, doesn't show take-fx button\
1, shows active take fx-button only\
2, shows non active take fx-button only\
3, shows active and nonactive take fx-button",
    name = "PERTAKEFX",
   },
   [8] = {
    type = "INTEGER",
    desc = "gets visibility-state of properties-button\
0, doesn't show item properties-button\
1, shows item properties-button\
2, shows item properties-button only if resampled media",
    name = "PROPERTIES",
   },
   [9] = {
    type = "INTEGER",
    desc = "gets visibility-state of envelope-button\
0, doesn't show envelope-button\
1, shows active envelope-button only\
2, shows non active envelope-button only\
3, shows active and nonactive envelope-button",
    name = "AUTOMATIONENVELOPES",
   },
   [10] = {
    type = "INTEGER",
    desc = "the value to hide when take is less than x pixels; 0 to 2147483647",
    name = "HIDE_WHEN_TAKE_LESS_THAN_PX",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [966] = {
  fname = "TCP_SetWidth",
  label = "US_TCP_SetWidth",
  run = "in/out",
  desc = "allows setting the width of the tcp.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the new width of the tcp in pixels; 0 and higher",
    name = "WIDTH",
   },
  },
  sp_api = "ultraschall",
 },
 [967] = {
  fname = "GetTrackManagerHWND",
  label = "US_GetTrackManagerHWND",
  run = "in/out",
  desc = "returns the HWND of the Track Manager-dialog, if the window is opened.\
\
returns nil if Track Manager-dialog is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the Track Manager-dialog",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [968] = {
  fname = "SetTimeUnit",
  label = "US_SetTimeUnit",
  run = "in/out",
  desc = "Sets the time-unit for transport, ruler and secondary ruler\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the unit for the transport\
nil, keep current\
0, seconds\
1, samples\
2, Minutes:Seconds\
3, Measures.Beats/minutes:Seconds\
4, Measures.Beats\
5, Hours:Minutes:Seconds:Frames\
6, Absolute frames",
    opt = {
     use = false,
    },
    name = "TRANSPORT_UNIT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the unit for the ruler\
nil, keep current\
0, seconds\
1, samples\
2, Minutes:Seconds\
3, Measures.Beats/minutes:Seconds\
4, Measures.Beats\
5, Hours:Minutes:Seconds:Frames\
6, Absolute frames\
7, Measures.Beats(minimal)/minutes:Seconds\
8, Measures.Beats(minimal)",
    opt = {
     use = false,
    },
    name = "RULER_UNIT",
   },
   [3] = {
    type = "INTEGER",
    desc = "the unit for the secondary ruler\
nil, keep current\
0, seconds\
1, samples\
2, Minutes:Seconds\
3, Hours:Minutes:Seconds:Frames\
4, Absolute frames\
5, None",
    opt = {
     use = false,
    },
    name = "RULER_UNIT2",
   },
  },
  sp_api = "ultraschall",
 },
 [969] = {
  fname = "ReturnAllChildHWND",
  label = "US_ReturnAllChildHWND",
  run = "in/out",
  desc = "Returns all child-window-handler of hwnd.\
\
Returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found child-window-handler",
    name = "COUNT_OF_HWNDS",
   },
   [2] = {
    type = "TABLE",
    desc = "the found child-window-handler of hwnd",
    name = "HWNDS",
   },
  },
  ins = {
   [1] = {
    type = "HWND",
    desc = "the HWND-handler to check for",
    name = "HWND",
   },
  },
  sp_api = "ultraschall",
 },
 [970] = {
  fname = "SetUIScale",
  label = "US_SetUIScale",
  run = "in/out",
  desc = "Sets the UI-scaling of Reaper's UI.\
\
Works only, if the \"Scale UI elements of track/mixer panels, tansport, etc, by:\"-checkbox is enabled in Preferences -> General -> Advanced UI/system tweaks-dialog, \
by setting the value in the dialog to anything else than 1.0.\
\
returns false in case of an error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the scaling-factor; safe range is between 0.30 and 3.00, though higher is supported",
    name = "SCALING",
   },
  },
  sp_api = "ultraschall",
 },
 [971] = {
  fname = "GetUIScale",
  label = "US_GetUIScale",
  run = "in/out",
  desc = "Gets the current UI-scaling of Reaper's UI.\
\
returns false in case of an error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the current scaling-factor of Reaper's UI",
    name = "UISCALE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [972] = {
  fname = "GetHWND_Transport",
  label = "US_GetHWND_Transport",
  run = "in/out",
  desc = "returns the HWND of the Transport-area and its visible position/docking-state",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the position of the transport-area\
-1, transport is docked in docker\
1, transport is top of main\
2, transport is at the bottom\
3, transport is above the ruler\
4, transport is below arrange",
    name = "TRANSPORT_POSITION",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, transport is floating; false, transport is docked in main-window or docker",
    name = "FLOATING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, transport is hidden(its hwnd might still be available); false, transport is visible",
    name = "HIDDEN",
   },
   [4] = {
    type = "HWND",
    desc = "the window-handler of transport",
    name = "TRANSPORT_HWND",
   },
   [5] = {
    type = "INTEGER",
    desc = "x-position of transport in pixels",
    name = "X",
   },
   [6] = {
    type = "INTEGER",
    desc = "y-position of transport in pixels",
    name = "Y",
   },
   [7] = {
    type = "INTEGER",
    desc = "right position of transport in pixels",
    name = "RIGHT",
   },
   [8] = {
    type = "INTEGER",
    desc = "bottom position of transport in pixels",
    name = "BOTTOM",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [973] = {
  fname = "GetHWND_TCP",
  label = "US_GetHWND_TCP",
  run = "in/out",
  desc = "returns the HWND of the TrackControlPanel and its visible area including right or left of arrange-view",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of tcp",
    name = "TCP_HWND",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, tcp is on right side of arrange view; false, tcp is on left side of the arrange view",
    name = "TCP_RIGHT",
   },
   [3] = {
    type = "INTEGER",
    desc = "x-position of tcp in pixels",
    name = "X",
   },
   [4] = {
    type = "INTEGER",
    desc = "y-position of tcp in pixels",
    name = "Y",
   },
   [5] = {
    type = "INTEGER",
    desc = "right position of tcp in pixels",
    name = "RIGHT",
   },
   [6] = {
    type = "INTEGER",
    desc = "bottom position of tcp in pixels",
    name = "BOTTOM",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [974] = {
  fname = "GetHWND_ArrangeView",
  label = "US_GetHWND_ArrangeView",
  run = "in/out",
  desc = "returns the HWND of the ArrangeView and its visible area",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of arrange-view",
    name = "ARRANGE_VIEW_HWND",
   },
   [2] = {
    type = "INTEGER",
    desc = "x-position of arrange-view in pixels",
    name = "X",
   },
   [3] = {
    type = "INTEGER",
    desc = "y-position of arrange-view in pixels",
    name = "Y",
   },
   [4] = {
    type = "INTEGER",
    desc = "right position of arrange-view in pixels",
    name = "RIGHT",
   },
   [5] = {
    type = "INTEGER",
    desc = "bottom position of arrange-view in pixels",
    name = "BOTTOM",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [975] = {
  fname = "GetScaleRangeFromDpi",
  label = "US_GetScaleRangeFromDpi",
  run = "in/out",
  desc = "Returns the scale-range for a specific dpi between 0 and 1539 dpi.\
\
Can be used to find out, which scale a gui-script needs to use when a specific dpi-value is present in Reaper's UI.\
\
Note: each dpi represents a minimum/maximum range of a scaling factor. So every scaling-factor within that range is part of a specific dpi!\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the minimum scale-value for this dpi-value",
    name = "MINIMUM_SCALE_FOR_DPI",
   },
   [2] = {
    type = "NUMBER",
    desc = "the maximum scale-value for this dpi-value",
    name = "MAXIMUM_SCALE_FOR_DPI",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the dpi-value to convert into its scale-range-representation; 0-1539 dpi",
    name = "DPI",
   },
  },
  sp_api = "ultraschall",
 },
 [976] = {
  fname = "GetDpiFromScale",
  label = "US_GetDpiFromScale",
  run = "in/out",
  desc = "Returns the dpi for a specific scale, between 0.001 and 6.000.\
\
Note: each dpi represents a minimum/maximum range of a scaling factor. So every scaling-factor within that range is part of a specific dpi!\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the dpi-value to convert into its scale-range-representation; 0-1539 dpi",
    name = "DPI",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the scale-value to convert into its dpi-representation; 0.001 to 6.000 is supported",
    name = "SCALE",
   },
  },
  sp_api = "ultraschall",
 },
 [977] = {
  fname = "GetItemPosition",
  label = "US_GetItemPosition",
  run = "in/out",
  desc = "Returns the values of the POSITION-entry of a MediaItem or MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the position in seconds, as set in the statechunk",
    name = "POSITION",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose position you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [978] = {
  fname = "GetItemLength",
  label = "US_GetItemLength",
  run = "in/out",
  desc = "Returns the values of the LENGTH-entry of a MediaItem or MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the length in seconds, as set in the statechunk",
    name = "LENGTH",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose length you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [979] = {
  fname = "GetItemSnapOffset",
  label = "US_GetItemSnapOffset",
  run = "in/out",
  desc = "Returns the values of the SNAPOFFS-entry of a MediaItem or MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the snapoffset in seconds, as set in the statechunk",
    name = "SNAPOFFSET",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose snapoffset you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [980] = {
  fname = "GetItemLoop",
  label = "US_GetItemLoop",
  run = "in/out",
  desc = "Returns the values of the LOOP-entry of a MediaItem or MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the loopstate, as set in the statechunk; 1, loop source; 0, don't loop source",
    name = "LOOPSTATE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [981] = {
  fname = "GetItemAllTakes",
  label = "US_GetItemAllTakes",
  run = "in/out",
  desc = "Returns the values of the ALLTAKES-entry of a MediaItem or MediaItemStateChunk.\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "Play all takes(1) or don't play all takes(0)",
    name = "ALLTAKES",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose all-takes-playstate you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [982] = {
  fname = "GetItemFadeIn",
  label = "US_GetItemFadeIn",
  run = "in/out",
  desc = "Returns the values of the FADEIN-entry of a MediaItem or MediaItemStateChunk.\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the type of the curve: 0, 1, 2, 3, 4, 5, 5.1; must be set like curvetype2",
    name = "CURVETYPE1",
   },
   [2] = {
    type = "NUMBER",
    desc = "fadein in seconds",
    name = "FADEIN_LENGTH",
   },
   [3] = {
    type = "NUMBER",
    desc = "the fadein-length in seconds; overrides fadein_length and will be moved to fadein_length when fadein-length changes(e.g. mouse-drag); might be autocrossfade-length",
    name = "FADEIN_LENGTH2",
   },
   [4] = {
    type = "NUMBER",
    desc = "the type of the curve: 0, 1, 2, 3, 4, 5, 5.1; must be set like curvetype1",
    name = "CURVETYPE2",
   },
   [5] = {
    type = "INTEGER",
    desc = "unknown, either 0 or 1; fadeinstate entry as set in the rppxml-mediaitem-statechunk",
    name = "FADESTATE5",
   },
   [6] = {
    type = "NUMBER",
    desc = "curve -1 to 1",
    name = "CURVE",
   },
   [7] = {
    type = "NUMBER",
    desc = "unknown",
    name = "FADESTATE7",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose fadein-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [983] = {
  fname = "GetItemFadeOut",
  label = "US_GetItemFadeOut",
  run = "in/out",
  desc = "Returns the values of the FADEOUT-entry of a MediaItem or MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the type of the curve: 0, 1, 2, 3, 4, 5, 5.1; must be set like curvetype2",
    name = "CURVETYPE1",
   },
   [2] = {
    type = "NUMBER",
    desc = "the current fadeout-length in seconds",
    name = "FADEOUT_LENGTH",
   },
   [3] = {
    type = "NUMBER",
    desc = "the fadeout-length in seconds; overrides fadeout_length and will be moved to fadeout_length when fadeout-length changes(e.g. mouse-drag); might be autocrossfade-length",
    name = "FADEOUT_LENGTH2",
   },
   [4] = {
    type = "NUMBER",
    desc = "the type of the curve: 0, 1, 2, 3, 4, 5, 5.1; must be set like curvetype1",
    name = "CURVETYPE2",
   },
   [5] = {
    type = "INTEGER",
    desc = "unknown, either 0 or 1; fadeinstate entry as set in the rppxml-mediaitem-statechunk",
    name = "FADESTATE5",
   },
   [6] = {
    type = "NUMBER",
    desc = "curvation of the fadeout, -1 to 1",
    name = "CURVE",
   },
   [7] = {
    type = "NUMBER",
    desc = "unknown",
    name = "FADESTATE7",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose fadeout-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [984] = {
  fname = "GetItemMute",
  label = "US_GetItemMute",
  run = "in/out",
  desc = "Returns mutestate-entry of a MediaItem or MediaItemStateChunk.\
\
It's the MUTE-entry.\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "actual mutestate, item solo overrides; 0, item is muted; 1, item is unmuted",
    name = "MUTESTATE1",
   },
   [2] = {
    type = "INTEGER",
    desc = "mutestate, ignores solo; 0, item is muted; 1, item is unmuted",
    name = "MUTESTATE2",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose mute-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [985] = {
  fname = "GetItemFadeFlag",
  label = "US_GetItemFadeFlag",
  run = "in/out",
  desc = "Returns autofade-entry of a MediaItem or MediaItemStateChunk.\
It's the FADEFLAG-entry.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the autofade-state; 1, autofade is off; nil, autofade is on",
    name = "AUTOFADE_STATE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose fadeflag-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [986] = {
  fname = "GetItemLock",
  label = "US_GetItemLock",
  run = "in/out",
  desc = "Returns itemlock-entry of a MediaItem or MediaItemStateChunk.\
\
It's the LOCK-entry.\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the lock-state; 1, item is locked; nil, item is not locked",
    name = "LOCK_STATE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose itemlock-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [987] = {
  fname = "GetItemSelected",
  label = "US_GetItemSelected",
  run = "in/out",
  desc = "Returns item-selected-state-entry of a MediaItem or MediaItemStateChunk.\
\
It's the SEL-entry.\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the item-selected-state; 1 - item is selected; 0 - item is not selected",
    name = "SELECTED_STATE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose selection-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [988] = {
  fname = "GetItemGroup",
  label = "US_GetItemGroup",
  run = "in/out",
  desc = "Returns group of a MediaItem or MediaItemStateChunk, where the item belongs to.\
\
It's the GROUP-entry\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the group the item belongs to; nil, if item doesn't belong to any group",
    name = "ITEM_GROUP",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose ItemGroup-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [989] = {
  fname = "GetItemIGUID",
  label = "US_GetItemIGUID",
  run = "in/out",
  desc = "Returns the IGUID-entry of a MediaItem or MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the IGUID of the item",
    name = "IGUID",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose IGUID-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [990] = {
  fname = "GetItemIID",
  label = "US_GetItemIID",
  run = "in/out",
  desc = "Returns the IID-entry of a MediaItem or MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the IID of the item; the item-id, which is basically a counter of all items created within this project. May change, so use it only as a counter. If you want to identify a specific item, use GUID and IGUID instead.",
    name = "IID",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose ItemIID-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [991] = {
  fname = "GetItemName",
  label = "US_GetItemName",
  run = "in/out",
  desc = "Returns the name-entry of a MediaItem or MediaItemStateChunk.\
\
It's the NAME-entry.\
\
It is the name of the first take in the MediaItem!\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the name of the item",
    name = "NAME",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose itemname-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [992] = {
  fname = "GetItemVolPan",
  label = "US_GetItemVolPan",
  run = "in/out",
  desc = "Returns the vol/pan-entries of a MediaItem or MediaItemStateChunk.\
\
It's the VOLPAN-entry.\
\
Use ultraschall.MKVOL2DB() to convert retval volume to dB.\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "unknown; 0, seems to mute the item without using mute; 1, seems to keep the item unmuted",
    name = "VOLPAN1",
   },
   [2] = {
    type = "NUMBER",
    desc = "from -1(100%L) to 1(100%R), 0 is center",
    name = "PAN",
   },
   [3] = {
    type = "NUMBER",
    desc = "from 0(-inf) to 3.981072(+12db), 1 is 0db; higher numbers are allowed; negative means phase inverted",
    name = "VOLUME",
   },
   [4] = {
    type = "NUMBER",
    desc = "unknown",
    name = "VOLPAN4",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose volpan-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [993] = {
  fname = "GetItemSampleOffset",
  label = "US_GetItemSampleOffset",
  run = "in/out",
  desc = "Returns the sampleoffset-entry of a MediaItem or MediaItemStateChunk.\
\
It's the SOFFS-entry.\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "sampleoffset in seconds",
    name = "SAMPLEOFFSET",
   },
   [2] = {
    type = "NUMBER",
    desc = "unknown",
    opt = {
     use = false,
    },
    name = "SAMPLEOFFSET2",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose sample-offset-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [994] = {
  fname = "GetItemPlayRate",
  label = "US_GetItemPlayRate",
  run = "in/out",
  desc = "Returns the playback-rate-entries of a MediaItem or MediaItemStateChunk.\
\
It's the PLAYRATE-entry.\
  \
takepitch_timestretch_mode can be \
\
        SoundTouch:\
        0 - Default settings\
        1 - High Quality\
        2 - Fast\
\
    Simple windowed (fast):\
        131072 - 50ms window, 25ms fade\
        131073 - 50ms window, 16ms fade\
        131074 - 50ms window, 10ms fade\
        131075 - 50ms window, 7ms fade\
        131076 - 75ms window, 37ms fade\
        131077 - 75ms window, 25ms fade\
        131078 - 75ms window, 15ms fade\
        131079 - 75ms window, 10ms fade\
        131080 - 100ms window, 50ms fade\
        131081 - 100ms window, 33ms fade\
        131082 - 100ms window, 20ms fade\
        131083 - 100ms window, 14ms fade\
        131084 - 150ms window, 75ms fade\
        131085 - 150ms window, 50ms fade\
        131086 - 150ms window, 30ms fade\
        131087 - 150ms window, 21ms fade\
        131088 - 225ms window, 112ms fade\
        131089 - 225ms window, 75ms fade\
        131090 - 225ms window, 45ms fade\
        131091 - 225ms window, 32ms fade\
        131092 - 300ms window, 150ms fade\
        131093 - 300ms window, 100ms fade\
        131094 - 300ms window, 60ms fade\
        131095 - 300ms window, 42ms fade\
        131096 - 40ms window, 20ms fade\
        131097 - 40ms window, 13ms fade\
        131098 - 40ms window, 8ms fade\
        131099 - 40ms window, 5ms fade\
        131100 - 30ms window, 15ms fade\
        131101 - 30ms window, 10ms fade\
        131102 - 30ms window, 6ms fade\
        131103 - 30ms window, 4ms fade\
        131104 - 20ms window, 10ms fade\
        131105 - 20ms window, 6ms fade\
        131106 - 20ms window, 4ms fade\
        131107 - 20ms window, 2ms fade\
        131108 - 10ms window, 5ms fade\
        131109 - 10ms window, 3ms fade\
        131110 - 10ms window, 2ms fade\
        131111 - 10ms window, 1ms fade\
        131112 - 5ms window, 2ms fade\
        131113 - 5ms window, 1ms fade\
        131114 - 5ms window, 1ms fade\
        131115 - 5ms window, 1ms fade\
        131116 - 3ms window, 1ms fade\
        131117 - 3ms window, 1ms fade\
        131118 - 3ms window, 1ms fade\
        131119 - 3ms window, 1ms fade\
\
    Ã©lastique 2.2.8 Pro:\
        393216 - Normal\
        393217 - Preserve Formants (Lowest Pitches)\
        393218 - Preserve Formants (Lower Pitches)\
        393219 - Preserve Formants (Low Pitches)\
        393220 - Preserve Formants (Most Pitches)\
        393221 - Preserve Formants (High Pitches)\
        393222 - Preserve Formants (Higher Pitches)\
        393223 - Preserve Formants (Highest Pitches)\
        393224 - Mid/Side\
        393225 - Mid/Side, Preserve Formants (Lowest Pitches)\
        393226 - Mid/Side, Preserve Formants (Lower Pitches)\
        393227 - Mid/Side, Preserve Formants (Low Pitches)\
        393228 - Mid/Side, Preserve Formants (Most Pitches)\
        393229 - Mid/Side, Preserve Formants (High Pitches)\
        393230 - Mid/Side, Preserve Formants (Higher Pitches)\
        393231 - Mid/Side, Preserve Formants (Highest Pitches)\
        393232 - Synchronized: Normal\
        393233 - Synchronized: Preserve Formants (Lowest Pitches)\
        393234 - Synchronized: Preserve Formants (Lower Pitches)\
        393235 - Synchronized: Preserve Formants (Low Pitches)\
        393236 - Synchronized: Preserve Formants (Most Pitches)\
        393237 - Synchronized: Preserve Formants (High Pitches)\
        393238 - Synchronized: Preserve Formants (Higher Pitches)\
        393239 - Synchronized: Preserve Formants (Highest Pitches)\
        393240 - Synchronized:  Mid/Side\
        393241 - Synchronized:  Mid/Side, Preserve Formants (Lowest Pitches)\
        393242 - Synchronized:  Mid/Side, Preserve Formants (Lower Pitches)\
        393243 - Synchronized:  Mid/Side, Preserve Formants (Low Pitches)\
        393244 - Synchronized:  Mid/Side, Preserve Formants (Most Pitches)\
        393245 - Synchronized:  Mid/Side, Preserve Formants (High Pitches)\
        393246 - Synchronized:  Mid/Side, Preserve Formants (Higher Pitches)\
        393247 - Synchronized:  Mid/Side, Preserve Formants (Highest Pitches)\
\
    Ã©lastique 2.2.8 Efficient:\
        458752 - Normal\
        458753 - Mid/Side\
        458754 - Synchronized: Normal\
        458755 - Synchronized: Mid/Side\
\
    Ã©lastique 2.2.8 Soloist:\
        524288 - Monophonic\
        524289 - Monophonic [Mid/Side]\
        524290 - Speech\
        524291 - Speech [Mid/Side]\
\
    Ã©lastique 3.3.0 Pro:\
        589824 - Normal\
        589825 - Preserve Formants (Lowest Pitches)\
        589826 - Preserve Formants (Lower Pitches)\
        589827 - Preserve Formants (Low Pitches)\
        589828 - Preserve Formants (Most Pitches)\
        589829 - Preserve Formants (High Pitches)\
        589830 - Preserve Formants (Higher Pitches)\
        589831 - Preserve Formants (Highest Pitches)\
        589832 - Mid/Side\
        589833 - Mid/Side, Preserve Formants (Lowest Pitches)\
        589834 - Mid/Side, Preserve Formants (Lower Pitches)\
        589835 - Mid/Side, Preserve Formants (Low Pitches)\
        589836 - Mid/Side, Preserve Formants (Most Pitches)\
        589837 - Mid/Side, Preserve Formants (High Pitches)\
        589838 - Mid/Side, Preserve Formants (Higher Pitches)\
        589839 - Mid/Side, Preserve Formants (Highest Pitches)\
        589840 - Synchronized: Normal\
        589841 - Synchronized: Preserve Formants (Lowest Pitches)\
        589842 - Synchronized: Preserve Formants (Lower Pitches)\
        589843 - Synchronized: Preserve Formants (Low Pitches)\
        589844 - Synchronized: Preserve Formants (Most Pitches)\
        589845 - Synchronized: Preserve Formants (High Pitches)\
        589846 - Synchronized: Preserve Formants (Higher Pitches)\
        589847 - Synchronized: Preserve Formants (Highest Pitches)\
        589848 - Synchronized:  Mid/Side\
        589849 - Synchronized:  Mid/Side, Preserve Formants (Lowest Pitches)\
        589850 - Synchronized:  Mid/Side, Preserve Formants (Lower Pitches)\
        589851 - Synchronized:  Mid/Side, Preserve Formants (Low Pitches)\
        589852 - Synchronized:  Mid/Side, Preserve Formants (Most Pitches)\
        589853 - Synchronized:  Mid/Side, Preserve Formants (High Pitches)\
        589854 - Synchronized:  Mid/Side, Preserve Formants (Higher Pitches)\
        589855 - Synchronized:  Mid/Side, Preserve Formants (Highest Pitches)\
\
    Ã©lastique 3.3.0 Efficient:\
        655360 - Normal\
        655361 - Mid/Side\
        655362 - Synchronized: Normal\
        655363 - Synchronized: Mid/Side\
\
    Ã©lastique 3.3.0 Soloist:\
        720896 - Monophonic\
        720897 - Monophonic [Mid/Side]\
        720898 - Speech\
        720899 - Speech [Mid/Side]\
\
\
    Rubber Band Library - Default\
        851968 - nothing\
\
    Rubber Band Library - Preserve Formants\
        851969 - Preserve Formants\
\
    Rubber Band Library - Mid/Side\
        851970 - Mid/Side\
\
    Rubber Band Library - Preserve Formants, Mid/Side\
        851971 - Preserve Formants, Mid/Side\
\
    Rubber Band Library - Independent Phase\
        851972 - Independent Phase\
\
    Rubber Band Library - Preserve Formants, Independent Phase\
        851973 - Preserve Formants, Independent Phase\
\
    Rubber Band Library - Mid/Side, Independent Phase\
        851974 - Mid/Side, Independent Phase\
\
    Rubber Band Library - Preserve Formants, Mid/Side, Independent Phase\
        851975 - Preserve Formants, Mid/Side, Independent Phase\
\
    Rubber Band Library - Time Domain Smoothing\
        851976 - Time Domain Smoothing\
\
    Rubber Band Library - Preserve Formants, Time Domain Smoothing\
        851977 - Preserve Formants, Time Domain Smoothing\
\
    Rubber Band Library - Mid/Side, Time Domain Smoothing\
        851978 - Mid/Side, Time Domain Smoothing\
\
    Rubber Band Library - Preserve Formants, Mid/Side, Time Domain Smoothing\
        851979 - Preserve Formants, Mid/Side, Time Domain Smoothing\
\
    Rubber Band Library - Independent Phase, Time Domain Smoothing\
        851980 - Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Preserve Formants, Independent Phase, Time Domain Smoothing\
        851981 - Preserve Formants, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Mid/Side, Independent Phase, Time Domain Smoothing\
        851982 - Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
        851983 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed\
        851984 - nothing\
        851985 - Preserve Formants\
        851986 - Mid/Side\
        851987 - Preserve Formants, Mid/Side\
        851988 - Independent Phase\
        851989 - Preserve Formants, Independent Phase\
        851990 - Mid/Side, Independent Phase\
        851991 - Preserve Formants, Mid/Side, Independent Phase\
        851992 - Time Domain Smoothing\
        851993 - Preserve Formants, Time Domain Smoothing\
        851994 - Mid/Side, Time Domain Smoothing\
        851995 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        851996 - Independent Phase, Time Domain Smoothing\
        851997 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        851998 - Mid/Side, Independent Phase, Time Domain Smoothing\
        851999 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth\
        852000 - nothing\
        852001 - Preserve Formants\
        852002 - Mid/Side\
        852003 - Preserve Formants, Mid/Side\
        852004 - Independent Phase\
        852005 - Preserve Formants, Independent Phase\
        852006 - Mid/Side, Independent Phase\
        852007 - Preserve Formants, Mid/Side, Independent Phase\
        852008 - Time Domain Smoothing\
        852009 - Preserve Formants, Time Domain Smoothing\
        852010 - Mid/Side, Time Domain Smoothing\
        852011 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852012 - Independent Phase, Time Domain Smoothing\
        852013 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852014 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852015 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive\
        852016 - nothing\
        852017 - Preserve Formants\
        852018 - Mid/Side\
        852019 - Preserve Formants, Mid/Side\
        852020 - Independent Phase\
        852021 - Preserve Formants, Independent Phase\
        852022 - Mid/Side, Independent Phase\
        852023 - Preserve Formants, Mid/Side, Independent Phase\
        852024 - Time Domain Smoothing\
        852025 - Preserve Formants, Time Domain Smoothing\
        852026 - Mid/Side, Time Domain Smoothing\
        852027 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852028 - Independent Phase, Time Domain Smoothing\
        852029 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852030 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852031 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive\
        852032 - nothing\
        852033 - Preserve Formants\
        852034 - Mid/Side\
        852035 - Preserve Formants, Mid/Side\
        852036 - Independent Phase\
        852037 - Preserve Formants, Independent Phase\
        852038 - Mid/Side, Independent Phase\
        852039 - Preserve Formants, Mid/Side, Independent Phase\
        852040 - Time Domain Smoothing\
        852041 - Preserve Formants, Time Domain Smoothing\
        852042 - Mid/Side, Time Domain Smoothing\
        852043 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852044 - Independent Phase, Time Domain Smoothing\
        852045 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852046 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852047 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive\
        852048 - nothing\
        852049 - Preserve Formants\
        852050 - Mid/Side\
        852051 - Preserve Formants, Mid/Side\
        852052 - Independent Phase\
        852053 - Preserve Formants, Independent Phase\
        852054 - Mid/Side, Independent Phase\
        852055 - Preserve Formants, Mid/Side, Independent Phase\
        852056 - Time Domain Smoothing\
        852057 - Preserve Formants, Time Domain Smoothing\
        852058 - Mid/Side, Time Domain Smoothing\
        852059 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852060 - Independent Phase, Time Domain Smoothing\
        852061 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852062 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852063 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft\
        852064 - nothing\
        852065 - Preserve Formants\
        852066 - Mid/Side\
        852067 - Preserve Formants, Mid/Side\
        852068 - Independent Phase\
        852069 - Preserve Formants, Independent Phase\
        852070 - Mid/Side, Independent Phase\
        852071 - Preserve Formants, Mid/Side, Independent Phase\
        852072 - Time Domain Smoothing\
        852073 - Preserve Formants, Time Domain Smoothing\
        852074 - Mid/Side, Time Domain Smoothing\
        852075 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852076 - Independent Phase, Time Domain Smoothing\
        852077 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852078 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852079 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft\
        852080 - nothing\
        852081 - Preserve Formants\
        852082 - Mid/Side\
        852083 - Preserve Formants, Mid/Side\
        852084 - Independent Phase\
        852085 - Preserve Formants, Independent Phase\
        852086 - Mid/Side, Independent Phase\
        852087 - Preserve Formants, Mid/Side, Independent Phase\
        852088 - Time Domain Smoothing\
        852089 - Preserve Formants, Time Domain Smoothing\
        852090 - Mid/Side, Time Domain Smoothing\
        852091 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852092 - Independent Phase, Time Domain Smoothing\
        852093 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852094 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852095 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft\
        852096 - nothing\
        852097 - Preserve Formants\
        852098 - Mid/Side\
        852099 - Preserve Formants, Mid/Side\
        852100 - Independent Phase\
        852101 - Preserve Formants, Independent Phase\
        852102 - Mid/Side, Independent Phase\
        852103 - Preserve Formants, Mid/Side, Independent Phase\
        852104 - Time Domain Smoothing\
        852105 - Preserve Formants, Time Domain Smoothing\
        852106 - Mid/Side, Time Domain Smoothing\
        852107 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852108 - Independent Phase, Time Domain Smoothing\
        852109 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852110 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852111 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: HighQ\
        852112 - nothing\
        852113 - Preserve Formants\
        852114 - Mid/Side\
        852115 - Preserve Formants, Mid/Side\
        852116 - Independent Phase\
        852117 - Preserve Formants, Independent Phase\
        852118 - Mid/Side, Independent Phase\
        852119 - Preserve Formants, Mid/Side, Independent Phase\
        852120 - Time Domain Smoothing\
        852121 - Preserve Formants, Time Domain Smoothing\
        852122 - Mid/Side, Time Domain Smoothing\
        852123 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852124 - Independent Phase, Time Domain Smoothing\
        852125 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852126 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852127 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: HighQ\
        852128 - nothing\
        852129 - Preserve Formants\
        852130 - Mid/Side\
        852131 - Preserve Formants, Mid/Side\
        852132 - Independent Phase\
        852133 - Preserve Formants, Independent Phase\
        852134 - Mid/Side, Independent Phase\
        852135 - Preserve Formants, Mid/Side, Independent Phase\
        852136 - Time Domain Smoothing\
        852137 - Preserve Formants, Time Domain Smoothing\
        852138 - Mid/Side, Time Domain Smoothing\
        852139 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852140 - Independent Phase, Time Domain Smoothing\
        852141 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852142 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852143 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: HighQ\
        852144 - nothing\
        852145 - Preserve Formants\
        852146 - Mid/Side\
        852147 - Preserve Formants, Mid/Side\
        852148 - Independent Phase\
        852149 - Preserve Formants, Independent Phase\
        852150 - Mid/Side, Independent Phase\
        852151 - Preserve Formants, Mid/Side, Independent Phase\
        852152 - Time Domain Smoothing\
        852153 - Preserve Formants, Time Domain Smoothing\
        852154 - Mid/Side, Time Domain Smoothing\
        852155 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852156 - Independent Phase, Time Domain Smoothing\
        852157 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852158 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852159 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: HighQ\
        852160 - nothing\
        852161 - Preserve Formants\
        852162 - Mid/Side\
        852163 - Preserve Formants, Mid/Side\
        852164 - Independent Phase\
        852165 - Preserve Formants, Independent Phase\
        852166 - Mid/Side, Independent Phase\
        852167 - Preserve Formants, Mid/Side, Independent Phase\
        852168 - Time Domain Smoothing\
        852169 - Preserve Formants, Time Domain Smoothing\
        852170 - Mid/Side, Time Domain Smoothing\
        852171 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852172 - Independent Phase, Time Domain Smoothing\
        852173 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852174 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852175 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: HighQ\
        852176 - nothing\
        852177 - Preserve Formants\
        852178 - Mid/Side\
        852179 - Preserve Formants, Mid/Side\
        852180 - Independent Phase\
        852181 - Preserve Formants, Independent Phase\
        852182 - Mid/Side, Independent Phase\
        852183 - Preserve Formants, Mid/Side, Independent Phase\
        852184 - Time Domain Smoothing\
        852185 - Preserve Formants, Time Domain Smoothing\
        852186 - Mid/Side, Time Domain Smoothing\
        852187 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852188 - Independent Phase, Time Domain Smoothing\
        852189 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852190 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852191 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: HighQ\
        852192 - nothing\
        852193 - Preserve Formants\
        852194 - Mid/Side\
        852195 - Preserve Formants, Mid/Side\
        852196 - Independent Phase\
        852197 - Preserve Formants, Independent Phase\
        852198 - Mid/Side, Independent Phase\
        852199 - Preserve Formants, Mid/Side, Independent Phase\
        852200 - Time Domain Smoothing\
        852201 - Preserve Formants, Time Domain Smoothing\
        852202 - Mid/Side, Time Domain Smoothing\
        852203 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852204 - Independent Phase, Time Domain Smoothing\
        852205 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852206 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852207 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: HighQ\
        852208 - nothing\
        852209 - Preserve Formants\
        852210 - Mid/Side\
        852211 - Preserve Formants, Mid/Side\
        852212 - Independent Phase\
        852213 - Preserve Formants, Independent Phase\
        852214 - Mid/Side, Independent Phase\
        852215 - Preserve Formants, Mid/Side, Independent Phase\
        852216 - Time Domain Smoothing\
        852217 - Preserve Formants, Time Domain Smoothing\
        852218 - Mid/Side, Time Domain Smoothing\
        852219 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852220 - Independent Phase, Time Domain Smoothing\
        852221 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852222 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852223 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: HighQ\
        852224 - nothing\
        852225 - Preserve Formants\
        852226 - Mid/Side\
        852227 - Preserve Formants, Mid/Side\
        852228 - Independent Phase\
        852229 - Preserve Formants, Independent Phase\
        852230 - Mid/Side, Independent Phase\
        852231 - Preserve Formants, Mid/Side, Independent Phase\
        852232 - Time Domain Smoothing\
        852233 - Preserve Formants, Time Domain Smoothing\
        852234 - Mid/Side, Time Domain Smoothing\
        852235 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852236 - Independent Phase, Time Domain Smoothing\
        852237 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852238 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852239 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: HighQ\
        852240 - nothing\
        852241 - Preserve Formants\
        852242 - Mid/Side\
        852243 - Preserve Formants, Mid/Side\
        852244 - Independent Phase\
        852245 - Preserve Formants, Independent Phase\
        852246 - Mid/Side, Independent Phase\
        852247 - Preserve Formants, Mid/Side, Independent Phase\
        852248 - Time Domain Smoothing\
        852249 - Preserve Formants, Time Domain Smoothing\
        852250 - Mid/Side, Time Domain Smoothing\
        852251 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852252 - Independent Phase, Time Domain Smoothing\
        852253 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852254 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852255 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: Consistent\
        852256 - nothing\
        852257 - Preserve Formants\
        852258 - Mid/Side\
        852259 - Preserve Formants, Mid/Side\
        852260 - Independent Phase\
        852261 - Preserve Formants, Independent Phase\
        852262 - Mid/Side, Independent Phase\
        852263 - Preserve Formants, Mid/Side, Independent Phase\
        852264 - Time Domain Smoothing\
        852265 - Preserve Formants, Time Domain Smoothing\
        852266 - Mid/Side, Time Domain Smoothing\
        852267 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852268 - Independent Phase, Time Domain Smoothing\
        852269 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852270 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852271 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: Consistent\
        852272 - nothing\
        852273 - Preserve Formants\
        852274 - Mid/Side\
        852275 - Preserve Formants, Mid/Side\
        852276 - Independent Phase\
        852277 - Preserve Formants, Independent Phase\
        852278 - Mid/Side, Independent Phase\
        852279 - Preserve Formants, Mid/Side, Independent Phase\
        852280 - Time Domain Smoothing\
        852281 - Preserve Formants, Time Domain Smoothing\
        852282 - Mid/Side, Time Domain Smoothing\
        852283 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852284 - Independent Phase, Time Domain Smoothing\
        852285 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852286 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852287 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: Consistent\
        852288 - nothing\
        852289 - Preserve Formants\
        852290 - Mid/Side\
        852291 - Preserve Formants, Mid/Side\
        852292 - Independent Phase\
        852293 - Preserve Formants, Independent Phase\
        852294 - Mid/Side, Independent Phase\
        852295 - Preserve Formants, Mid/Side, Independent Phase\
        852296 - Time Domain Smoothing\
        852297 - Preserve Formants, Time Domain Smoothing\
        852298 - Mid/Side, Time Domain Smoothing\
        852299 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852300 - Independent Phase, Time Domain Smoothing\
        852301 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852302 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852303 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: Consistent\
        852304 - nothing\
        852305 - Preserve Formants\
        852306 - Mid/Side\
        852307 - Preserve Formants, Mid/Side\
        852308 - Independent Phase\
        852309 - Preserve Formants, Independent Phase\
        852310 - Mid/Side, Independent Phase\
        852311 - Preserve Formants, Mid/Side, Independent Phase\
        852312 - Time Domain Smoothing\
        852313 - Preserve Formants, Time Domain Smoothing\
        852314 - Mid/Side, Time Domain Smoothing\
        852315 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852316 - Independent Phase, Time Domain Smoothing\
        852317 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852318 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852319 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: Consistent\
        852320 - nothing\
        852321 - Preserve Formants\
        852322 - Mid/Side\
        852323 - Preserve Formants, Mid/Side\
        852324 - Independent Phase\
        852325 - Preserve Formants, Independent Phase\
        852326 - Mid/Side, Independent Phase\
        852327 - Preserve Formants, Mid/Side, Independent Phase\
        852328 - Time Domain Smoothing\
        852329 - Preserve Formants, Time Domain Smoothing\
        852330 - Mid/Side, Time Domain Smoothing\
        852331 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852332 - Independent Phase, Time Domain Smoothing\
        852333 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852334 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852335 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: Consistent\
        852336 - nothing\
        852337 - Preserve Formants\
        852338 - Mid/Side\
        852339 - Preserve Formants, Mid/Side\
        852340 - Independent Phase\
        852341 - Preserve Formants, Independent Phase\
        852342 - Mid/Side, Independent Phase\
        852343 - Preserve Formants, Mid/Side, Independent Phase\
        852344 - Time Domain Smoothing\
        852345 - Preserve Formants, Time Domain Smoothing\
        852346 - Mid/Side, Time Domain Smoothing\
        852347 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852348 - Independent Phase, Time Domain Smoothing\
        852349 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852350 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852351 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: Consistent\
        852352 - nothing\
        852353 - Preserve Formants\
        852354 - Mid/Side\
        852355 - Preserve Formants, Mid/Side\
        852356 - Independent Phase\
        852357 - Preserve Formants, Independent Phase\
        852358 - Mid/Side, Independent Phase\
        852359 - Preserve Formants, Mid/Side, Independent Phase\
        852360 - Time Domain Smoothing\
        852361 - Preserve Formants, Time Domain Smoothing\
        852362 - Mid/Side, Time Domain Smoothing\
        852363 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852364 - Independent Phase, Time Domain Smoothing\
        852365 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852366 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852367 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: Consistent\
        852368 - nothing\
        852369 - Preserve Formants\
        852370 - Mid/Side\
        852371 - Preserve Formants, Mid/Side\
        852372 - Independent Phase\
        852373 - Preserve Formants, Independent Phase\
        852374 - Mid/Side, Independent Phase\
        852375 - Preserve Formants, Mid/Side, Independent Phase\
        852376 - Time Domain Smoothing\
        852377 - Preserve Formants, Time Domain Smoothing\
        852378 - Mid/Side, Time Domain Smoothing\
        852379 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852380 - Independent Phase, Time Domain Smoothing\
        852381 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852382 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852383 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: Consistent\
        852384 - nothing\
        852385 - Preserve Formants\
        852386 - Mid/Side\
        852387 - Preserve Formants, Mid/Side\
        852388 - Independent Phase\
        852389 - Preserve Formants, Independent Phase\
        852390 - Mid/Side, Independent Phase\
        852391 - Preserve Formants, Mid/Side, Independent Phase\
        852392 - Time Domain Smoothing\
        852393 - Preserve Formants, Time Domain Smoothing\
        852394 - Mid/Side, Time Domain Smoothing\
        852395 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852396 - Independent Phase, Time Domain Smoothing\
        852397 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852398 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852399 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Window: Short\
        852400 - nothing\
        852401 - Preserve Formants\
        852402 - Mid/Side\
        852403 - Preserve Formants, Mid/Side\
        852404 - Independent Phase\
        852405 - Preserve Formants, Independent Phase\
        852406 - Mid/Side, Independent Phase\
        852407 - Preserve Formants, Mid/Side, Independent Phase\
        852408 - Time Domain Smoothing\
        852409 - Preserve Formants, Time Domain Smoothing\
        852410 - Mid/Side, Time Domain Smoothing\
        852411 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852412 - Independent Phase, Time Domain Smoothing\
        852413 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852414 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852415 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Window: Short\
        852416 - nothing\
        852417 - Preserve Formants\
        852418 - Mid/Side\
        852419 - Preserve Formants, Mid/Side\
        852420 - Independent Phase\
        852421 - Preserve Formants, Independent Phase\
        852422 - Mid/Side, Independent Phase\
        852423 - Preserve Formants, Mid/Side, Independent Phase\
        852424 - Time Domain Smoothing\
        852425 - Preserve Formants, Time Domain Smoothing\
        852426 - Mid/Side, Time Domain Smoothing\
        852427 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852428 - Independent Phase, Time Domain Smoothing\
        852429 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852430 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852431 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Window: Short\
        852432 - nothing\
        852433 - Preserve Formants\
        852434 - Mid/Side\
        852435 - Preserve Formants, Mid/Side\
        852436 - Independent Phase\
        852437 - Preserve Formants, Independent Phase\
        852438 - Mid/Side, Independent Phase\
        852439 - Preserve Formants, Mid/Side, Independent Phase\
        852440 - Time Domain Smoothing\
        852441 - Preserve Formants, Time Domain Smoothing\
        852442 - Mid/Side, Time Domain Smoothing\
        852443 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852444 - Independent Phase, Time Domain Smoothing\
        852445 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852446 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852447 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Window: Short\
        852448 - nothing\
        852449 - Preserve Formants\
        852450 - Mid/Side\
        852451 - Preserve Formants, Mid/Side\
        852452 - Independent Phase\
        852453 - Preserve Formants, Independent Phase\
        852454 - Mid/Side, Independent Phase\
        852455 - Preserve Formants, Mid/Side, Independent Phase\
        852456 - Time Domain Smoothing\
        852457 - Preserve Formants, Time Domain Smoothing\
        852458 - Mid/Side, Time Domain Smoothing\
        852459 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852460 - Independent Phase, Time Domain Smoothing\
        852461 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852462 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852463 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Window: Short\
        852464 - nothing\
        852465 - Preserve Formants\
        852466 - Mid/Side\
        852467 - Preserve Formants, Mid/Side\
        852468 - Independent Phase\
        852469 - Preserve Formants, Independent Phase\
        852470 - Mid/Side, Independent Phase\
        852471 - Preserve Formants, Mid/Side, Independent Phase\
        852472 - Time Domain Smoothing\
        852473 - Preserve Formants, Time Domain Smoothing\
        852474 - Mid/Side, Time Domain Smoothing\
        852475 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852476 - Independent Phase, Time Domain Smoothing\
        852477 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852478 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852479 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Window: Short\
        852480 - nothing\
        852481 - Preserve Formants\
        852482 - Mid/Side\
        852483 - Preserve Formants, Mid/Side\
        852484 - Independent Phase\
        852485 - Preserve Formants, Independent Phase\
        852486 - Mid/Side, Independent Phase\
        852487 - Preserve Formants, Mid/Side, Independent Phase\
        852488 - Time Domain Smoothing\
        852489 - Preserve Formants, Time Domain Smoothing\
        852490 - Mid/Side, Time Domain Smoothing\
        852491 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852492 - Independent Phase, Time Domain Smoothing\
        852493 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852494 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852495 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Window: Short\
        852496 - nothing\
        852497 - Preserve Formants\
        852498 - Mid/Side\
        852499 - Preserve Formants, Mid/Side\
        852500 - Independent Phase\
        852501 - Preserve Formants, Independent Phase\
        852502 - Mid/Side, Independent Phase\
        852503 - Preserve Formants, Mid/Side, Independent Phase\
        852504 - Time Domain Smoothing\
        852505 - Preserve Formants, Time Domain Smoothing\
        852506 - Mid/Side, Time Domain Smoothing\
        852507 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852508 - Independent Phase, Time Domain Smoothing\
        852509 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852510 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852511 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Window: Short\
        852512 - nothing\
        852513 - Preserve Formants\
        852514 - Mid/Side\
        852515 - Preserve Formants, Mid/Side\
        852516 - Independent Phase\
        852517 - Preserve Formants, Independent Phase\
        852518 - Mid/Side, Independent Phase\
        852519 - Preserve Formants, Mid/Side, Independent Phase\
        852520 - Time Domain Smoothing\
        852521 - Preserve Formants, Time Domain Smoothing\
        852522 - Mid/Side, Time Domain Smoothing\
        852523 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852524 - Independent Phase, Time Domain Smoothing\
        852525 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852526 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852527 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Window: Short\
        852528 - nothing\
        852529 - Preserve Formants\
        852530 - Mid/Side\
        852531 - Preserve Formants, Mid/Side\
        852532 - Independent Phase\
        852533 - Preserve Formants, Independent Phase\
        852534 - Mid/Side, Independent Phase\
        852535 - Preserve Formants, Mid/Side, Independent Phase\
        852536 - Time Domain Smoothing\
        852537 - Preserve Formants, Time Domain Smoothing\
        852538 - Mid/Side, Time Domain Smoothing\
        852539 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852540 - Independent Phase, Time Domain Smoothing\
        852541 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852542 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852543 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: HighQ, Window: Short\
        852544 - nothing\
        852545 - Preserve Formants\
        852546 - Mid/Side\
        852547 - Preserve Formants, Mid/Side\
        852548 - Independent Phase\
        852549 - Preserve Formants, Independent Phase\
        852550 - Mid/Side, Independent Phase\
        852551 - Preserve Formants, Mid/Side, Independent Phase\
        852552 - Time Domain Smoothing\
        852553 - Preserve Formants, Time Domain Smoothing\
        852554 - Mid/Side, Time Domain Smoothing\
        852555 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852556 - Independent Phase, Time Domain Smoothing\
        852557 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852558 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852559 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: HighQ, Window: Short\
        852560 - nothing\
        852561 - Preserve Formants\
        852562 - Mid/Side\
        852563 - Preserve Formants, Mid/Side\
        852564 - Independent Phase\
        852565 - Preserve Formants, Independent Phase\
        852566 - Mid/Side, Independent Phase\
        852567 - Preserve Formants, Mid/Side, Independent Phase\
        852568 - Time Domain Smoothing\
        852569 - Preserve Formants, Time Domain Smoothing\
        852570 - Mid/Side, Time Domain Smoothing\
        852571 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852572 - Independent Phase, Time Domain Smoothing\
        852573 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852574 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852575 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: HighQ, Window: Short\
        852576 - nothing\
        852577 - Preserve Formants\
        852578 - Mid/Side\
        852579 - Preserve Formants, Mid/Side\
        852580 - Independent Phase\
        852581 - Preserve Formants, Independent Phase\
        852582 - Mid/Side, Independent Phase\
        852583 - Preserve Formants, Mid/Side, Independent Phase\
        852584 - Time Domain Smoothing\
        852585 - Preserve Formants, Time Domain Smoothing\
        852586 - Mid/Side, Time Domain Smoothing\
        852587 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852588 - Independent Phase, Time Domain Smoothing\
        852589 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852590 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852591 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: HighQ, Window: Short\
        852592 - nothing\
        852593 - Preserve Formants\
        852594 - Mid/Side\
        852595 - Preserve Formants, Mid/Side\
        852596 - Independent Phase\
        852597 - Preserve Formants, Independent Phase\
        852598 - Mid/Side, Independent Phase\
        852599 - Preserve Formants, Mid/Side, Independent Phase\
        852600 - Time Domain Smoothing\
        852601 - Preserve Formants, Time Domain Smoothing\
        852602 - Mid/Side, Time Domain Smoothing\
        852603 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852604 - Independent Phase, Time Domain Smoothing\
        852605 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852606 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852607 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: HighQ, Window: Short\
        852608 - nothing\
        852609 - Preserve Formants\
        852610 - Mid/Side\
        852611 - Preserve Formants, Mid/Side\
        852612 - Independent Phase\
        852613 - Preserve Formants, Independent Phase\
        852614 - Mid/Side, Independent Phase\
        852615 - Preserve Formants, Mid/Side, Independent Phase\
        852616 - Time Domain Smoothing\
        852617 - Preserve Formants, Time Domain Smoothing\
        852618 - Mid/Side, Time Domain Smoothing\
        852619 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852620 - Independent Phase, Time Domain Smoothing\
        852621 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852622 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852623 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: HighQ, Window: Short\
        852624 - nothing\
        852625 - Preserve Formants\
        852626 - Mid/Side\
        852627 - Preserve Formants, Mid/Side\
        852628 - Independent Phase\
        852629 - Preserve Formants, Independent Phase\
        852630 - Mid/Side, Independent Phase\
        852631 - Preserve Formants, Mid/Side, Independent Phase\
        852632 - Time Domain Smoothing\
        852633 - Preserve Formants, Time Domain Smoothing\
        852634 - Mid/Side, Time Domain Smoothing\
        852635 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852636 - Independent Phase, Time Domain Smoothing\
        852637 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852638 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852639 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: HighQ, Window: Short\
        852640 - nothing\
        852641 - Preserve Formants\
        852642 - Mid/Side\
        852643 - Preserve Formants, Mid/Side\
        852644 - Independent Phase\
        852645 - Preserve Formants, Independent Phase\
        852646 - Mid/Side, Independent Phase\
        852647 - Preserve Formants, Mid/Side, Independent Phase\
        852648 - Time Domain Smoothing\
        852649 - Preserve Formants, Time Domain Smoothing\
        852650 - Mid/Side, Time Domain Smoothing\
        852651 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852652 - Independent Phase, Time Domain Smoothing\
        852653 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852654 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852655 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: HighQ, Window: Short\
        852656 - nothing\
        852657 - Preserve Formants\
        852658 - Mid/Side\
        852659 - Preserve Formants, Mid/Side\
        852660 - Independent Phase\
        852661 - Preserve Formants, Independent Phase\
        852662 - Mid/Side, Independent Phase\
        852663 - Preserve Formants, Mid/Side, Independent Phase\
        852664 - Time Domain Smoothing\
        852665 - Preserve Formants, Time Domain Smoothing\
        852666 - Mid/Side, Time Domain Smoothing\
        852667 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852668 - Independent Phase, Time Domain Smoothing\
        852669 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852670 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852671 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: HighQ, Window: Short\
        852672 - nothing\
        852673 - Preserve Formants\
        852674 - Mid/Side\
        852675 - Preserve Formants, Mid/Side\
        852676 - Independent Phase\
        852677 - Preserve Formants, Independent Phase\
        852678 - Mid/Side, Independent Phase\
        852679 - Preserve Formants, Mid/Side, Independent Phase\
        852680 - Time Domain Smoothing\
        852681 - Preserve Formants, Time Domain Smoothing\
        852682 - Mid/Side, Time Domain Smoothing\
        852683 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852684 - Independent Phase, Time Domain Smoothing\
        852685 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852686 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852687 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: Consistent, Window: Short\
        852688 - nothing\
        852689 - Preserve Formants\
        852690 - Mid/Side\
        852691 - Preserve Formants, Mid/Side\
        852692 - Independent Phase\
        852693 - Preserve Formants, Independent Phase\
        852694 - Mid/Side, Independent Phase\
        852695 - Preserve Formants, Mid/Side, Independent Phase\
        852696 - Time Domain Smoothing\
        852697 - Preserve Formants, Time Domain Smoothing\
        852698 - Mid/Side, Time Domain Smoothing\
        852699 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852700 - Independent Phase, Time Domain Smoothing\
        852701 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852702 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852703 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: Consistent, Window: Short\
        852704 - nothing\
        852705 - Preserve Formants\
        852706 - Mid/Side\
        852707 - Preserve Formants, Mid/Side\
        852708 - Independent Phase\
        852709 - Preserve Formants, Independent Phase\
        852710 - Mid/Side, Independent Phase\
        852711 - Preserve Formants, Mid/Side, Independent Phase\
        852712 - Time Domain Smoothing\
        852713 - Preserve Formants, Time Domain Smoothing\
        852714 - Mid/Side, Time Domain Smoothing\
        852715 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852716 - Independent Phase, Time Domain Smoothing\
        852717 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852718 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852719 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: Consistent, Window: Short\
        852720 - nothing\
        852721 - Preserve Formants\
        852722 - Mid/Side\
        852723 - Preserve Formants, Mid/Side\
        852724 - Independent Phase\
        852725 - Preserve Formants, Independent Phase\
        852726 - Mid/Side, Independent Phase\
        852727 - Preserve Formants, Mid/Side, Independent Phase\
        852728 - Time Domain Smoothing\
        852729 - Preserve Formants, Time Domain Smoothing\
        852730 - Mid/Side, Time Domain Smoothing\
        852731 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852732 - Independent Phase, Time Domain Smoothing\
        852733 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852734 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852735 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: Consistent, Window: Short\
        852736 - nothing\
        852737 - Preserve Formants\
        852738 - Mid/Side\
        852739 - Preserve Formants, Mid/Side\
        852740 - Independent Phase\
        852741 - Preserve Formants, Independent Phase\
        852742 - Mid/Side, Independent Phase\
        852743 - Preserve Formants, Mid/Side, Independent Phase\
        852744 - Time Domain Smoothing\
        852745 - Preserve Formants, Time Domain Smoothing\
        852746 - Mid/Side, Time Domain Smoothing\
        852747 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852748 - Independent Phase, Time Domain Smoothing\
        852749 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852750 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852751 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: Consistent, Window: Short\
        852752 - nothing\
        852753 - Preserve Formants\
        852754 - Mid/Side\
        852755 - Preserve Formants, Mid/Side\
        852756 - Independent Phase\
        852757 - Preserve Formants, Independent Phase\
        852758 - Mid/Side, Independent Phase\
        852759 - Preserve Formants, Mid/Side, Independent Phase\
        852760 - Time Domain Smoothing\
        852761 - Preserve Formants, Time Domain Smoothing\
        852762 - Mid/Side, Time Domain Smoothing\
        852763 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852764 - Independent Phase, Time Domain Smoothing\
        852765 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852766 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852767 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: Consistent, Window: Short\
        852768 - nothing\
        852769 - Preserve Formants\
        852770 - Mid/Side\
        852771 - Preserve Formants, Mid/Side\
        852772 - Independent Phase\
        852773 - Preserve Formants, Independent Phase\
        852774 - Mid/Side, Independent Phase\
        852775 - Preserve Formants, Mid/Side, Independent Phase\
        852776 - Time Domain Smoothing\
        852777 - Preserve Formants, Time Domain Smoothing\
        852778 - Mid/Side, Time Domain Smoothing\
        852779 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852780 - Independent Phase, Time Domain Smoothing\
        852781 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852782 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852783 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: Consistent, Window: Short\
        852784 - nothing\
        852785 - Preserve Formants\
        852786 - Mid/Side\
        852787 - Preserve Formants, Mid/Side\
        852788 - Independent Phase\
        852789 - Preserve Formants, Independent Phase\
        852790 - Mid/Side, Independent Phase\
        852791 - Preserve Formants, Mid/Side, Independent Phase\
        852792 - Time Domain Smoothing\
        852793 - Preserve Formants, Time Domain Smoothing\
        852794 - Mid/Side, Time Domain Smoothing\
        852795 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852796 - Independent Phase, Time Domain Smoothing\
        852797 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852798 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852799 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: Consistent, Window: Short\
        852800 - nothing\
        852801 - Preserve Formants\
        852802 - Mid/Side\
        852803 - Preserve Formants, Mid/Side\
        852804 - Independent Phase\
        852805 - Preserve Formants, Independent Phase\
        852806 - Mid/Side, Independent Phase\
        852807 - Preserve Formants, Mid/Side, Independent Phase\
        852808 - Time Domain Smoothing\
        852809 - Preserve Formants, Time Domain Smoothing\
        852810 - Mid/Side, Time Domain Smoothing\
        852811 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852812 - Independent Phase, Time Domain Smoothing\
        852813 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852814 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852815 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: Consistent, Window: Short\
        852816 - nothing\
        852817 - Preserve Formants\
        852818 - Mid/Side\
        852819 - Preserve Formants, Mid/Side\
        852820 - Independent Phase\
        852821 - Preserve Formants, Independent Phase\
        852822 - Mid/Side, Independent Phase\
        852823 - Preserve Formants, Mid/Side, Independent Phase\
        852824 - Time Domain Smoothing\
        852825 - Preserve Formants, Time Domain Smoothing\
        852826 - Mid/Side, Time Domain Smoothing\
        852827 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852828 - Independent Phase, Time Domain Smoothing\
        852829 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852830 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852831 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Window: Long\
        852832 - nothing\
        852833 - Preserve Formants\
        852834 - Mid/Side\
        852835 - Preserve Formants, Mid/Side\
        852836 - Independent Phase\
        852837 - Preserve Formants, Independent Phase\
        852838 - Mid/Side, Independent Phase\
        852839 - Preserve Formants, Mid/Side, Independent Phase\
        852840 - Time Domain Smoothing\
        852841 - Preserve Formants, Time Domain Smoothing\
        852842 - Mid/Side, Time Domain Smoothing\
        852843 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852844 - Independent Phase, Time Domain Smoothing\
        852845 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852846 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852847 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Window: Long\
        852848 - nothing\
        852849 - Preserve Formants\
        852850 - Mid/Side\
        852851 - Preserve Formants, Mid/Side\
        852852 - Independent Phase\
        852853 - Preserve Formants, Independent Phase\
        852854 - Mid/Side, Independent Phase\
        852855 - Preserve Formants, Mid/Side, Independent Phase\
        852856 - Time Domain Smoothing\
        852857 - Preserve Formants, Time Domain Smoothing\
        852858 - Mid/Side, Time Domain Smoothing\
        852859 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852860 - Independent Phase, Time Domain Smoothing\
        852861 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852862 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852863 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Window: Long\
        852864 - nothing\
        852865 - Preserve Formants\
        852866 - Mid/Side\
        852867 - Preserve Formants, Mid/Side\
        852868 - Independent Phase\
        852869 - Preserve Formants, Independent Phase\
        852870 - Mid/Side, Independent Phase\
        852871 - Preserve Formants, Mid/Side, Independent Phase\
        852872 - Time Domain Smoothing\
        852873 - Preserve Formants, Time Domain Smoothing\
        852874 - Mid/Side, Time Domain Smoothing\
        852875 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852876 - Independent Phase, Time Domain Smoothing\
        852877 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852878 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852879 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Window: Long\
        852880 - nothing\
        852881 - Preserve Formants\
        852882 - Mid/Side\
        852883 - Preserve Formants, Mid/Side\
        852884 - Independent Phase\
        852885 - Preserve Formants, Independent Phase\
        852886 - Mid/Side, Independent Phase\
        852887 - Preserve Formants, Mid/Side, Independent Phase\
        852888 - Time Domain Smoothing\
        852889 - Preserve Formants, Time Domain Smoothing\
        852890 - Mid/Side, Time Domain Smoothing\
        852891 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852892 - Independent Phase, Time Domain Smoothing\
        852893 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852894 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852895 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Window: Long\
        852896 - nothing\
        852897 - Preserve Formants\
        852898 - Mid/Side\
        852899 - Preserve Formants, Mid/Side\
        852900 - Independent Phase\
        852901 - Preserve Formants, Independent Phase\
        852902 - Mid/Side, Independent Phase\
        852903 - Preserve Formants, Mid/Side, Independent Phase\
        852904 - Time Domain Smoothing\
        852905 - Preserve Formants, Time Domain Smoothing\
        852906 - Mid/Side, Time Domain Smoothing\
        852907 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852908 - Independent Phase, Time Domain Smoothing\
        852909 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852910 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852911 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Window: Long\
        852912 - nothing\
        852913 - Preserve Formants\
        852914 - Mid/Side\
        852915 - Preserve Formants, Mid/Side\
        852916 - Independent Phase\
        852917 - Preserve Formants, Independent Phase\
        852918 - Mid/Side, Independent Phase\
        852919 - Preserve Formants, Mid/Side, Independent Phase\
        852920 - Time Domain Smoothing\
        852921 - Preserve Formants, Time Domain Smoothing\
        852922 - Mid/Side, Time Domain Smoothing\
        852923 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852924 - Independent Phase, Time Domain Smoothing\
        852925 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852926 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852927 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Window: Long\
        852928 - nothing\
        852929 - Preserve Formants\
        852930 - Mid/Side\
        852931 - Preserve Formants, Mid/Side\
        852932 - Independent Phase\
        852933 - Preserve Formants, Independent Phase\
        852934 - Mid/Side, Independent Phase\
        852935 - Preserve Formants, Mid/Side, Independent Phase\
        852936 - Time Domain Smoothing\
        852937 - Preserve Formants, Time Domain Smoothing\
        852938 - Mid/Side, Time Domain Smoothing\
        852939 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852940 - Independent Phase, Time Domain Smoothing\
        852941 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852942 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852943 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Window: Long\
        852944 - nothing\
        852945 - Preserve Formants\
        852946 - Mid/Side\
        852947 - Preserve Formants, Mid/Side\
        852948 - Independent Phase\
        852949 - Preserve Formants, Independent Phase\
        852950 - Mid/Side, Independent Phase\
        852951 - Preserve Formants, Mid/Side, Independent Phase\
        852952 - Time Domain Smoothing\
        852953 - Preserve Formants, Time Domain Smoothing\
        852954 - Mid/Side, Time Domain Smoothing\
        852955 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852956 - Independent Phase, Time Domain Smoothing\
        852957 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852958 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852959 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Window: Long\
        852960 - nothing\
        852961 - Preserve Formants\
        852962 - Mid/Side\
        852963 - Preserve Formants, Mid/Side\
        852964 - Independent Phase\
        852965 - Preserve Formants, Independent Phase\
        852966 - Mid/Side, Independent Phase\
        852967 - Preserve Formants, Mid/Side, Independent Phase\
        852968 - Time Domain Smoothing\
        852969 - Preserve Formants, Time Domain Smoothing\
        852970 - Mid/Side, Time Domain Smoothing\
        852971 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852972 - Independent Phase, Time Domain Smoothing\
        852973 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852974 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852975 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: HighQ, Window: Long\
        852976 - nothing\
        852977 - Preserve Formants\
        852978 - Mid/Side\
        852979 - Preserve Formants, Mid/Side\
        852980 - Independent Phase\
        852981 - Preserve Formants, Independent Phase\
        852982 - Mid/Side, Independent Phase\
        852983 - Preserve Formants, Mid/Side, Independent Phase\
        852984 - Time Domain Smoothing\
        852985 - Preserve Formants, Time Domain Smoothing\
        852986 - Mid/Side, Time Domain Smoothing\
        852987 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        852988 - Independent Phase, Time Domain Smoothing\
        852989 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        852990 - Mid/Side, Independent Phase, Time Domain Smoothing\
        852991 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: HighQ, Window: Long\
        852992 - nothing\
        852993 - Preserve Formants\
        852994 - Mid/Side\
        852995 - Preserve Formants, Mid/Side\
        852996 - Independent Phase\
        852997 - Preserve Formants, Independent Phase\
        852998 - Mid/Side, Independent Phase\
        852999 - Preserve Formants, Mid/Side, Independent Phase\
        853000 - Time Domain Smoothing\
        853001 - Preserve Formants, Time Domain Smoothing\
        853002 - Mid/Side, Time Domain Smoothing\
        853003 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853004 - Independent Phase, Time Domain Smoothing\
        853005 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853006 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853007 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: HighQ, Window: Long\
        853008 - nothing\
        853009 - Preserve Formants\
        853010 - Mid/Side\
        853011 - Preserve Formants, Mid/Side\
        853012 - Independent Phase\
        853013 - Preserve Formants, Independent Phase\
        853014 - Mid/Side, Independent Phase\
        853015 - Preserve Formants, Mid/Side, Independent Phase\
        853016 - Time Domain Smoothing\
        853017 - Preserve Formants, Time Domain Smoothing\
        853018 - Mid/Side, Time Domain Smoothing\
        853019 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853020 - Independent Phase, Time Domain Smoothing\
        853021 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853022 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853023 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: HighQ, Window: Long\
        853024 - nothing\
        853025 - Preserve Formants\
        853026 - Mid/Side\
        853027 - Preserve Formants, Mid/Side\
        853028 - Independent Phase\
        853029 - Preserve Formants, Independent Phase\
        853030 - Mid/Side, Independent Phase\
        853031 - Preserve Formants, Mid/Side, Independent Phase\
        853032 - Time Domain Smoothing\
        853033 - Preserve Formants, Time Domain Smoothing\
        853034 - Mid/Side, Time Domain Smoothing\
        853035 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853036 - Independent Phase, Time Domain Smoothing\
        853037 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853038 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853039 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: HighQ, Window: Long\
        853040 - nothing\
        853041 - Preserve Formants\
        853042 - Mid/Side\
        853043 - Preserve Formants, Mid/Side\
        853044 - Independent Phase\
        853045 - Preserve Formants, Independent Phase\
        853046 - Mid/Side, Independent Phase\
        853047 - Preserve Formants, Mid/Side, Independent Phase\
        853048 - Time Domain Smoothing\
        853049 - Preserve Formants, Time Domain Smoothing\
        853050 - Mid/Side, Time Domain Smoothing\
        853051 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853052 - Independent Phase, Time Domain Smoothing\
        853053 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853054 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853055 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: HighQ, Window: Long\
        853056 - nothing\
        853057 - Preserve Formants\
        853058 - Mid/Side\
        853059 - Preserve Formants, Mid/Side\
        853060 - Independent Phase\
        853061 - Preserve Formants, Independent Phase\
        853062 - Mid/Side, Independent Phase\
        853063 - Preserve Formants, Mid/Side, Independent Phase\
        853064 - Time Domain Smoothing\
        853065 - Preserve Formants, Time Domain Smoothing\
        853066 - Mid/Side, Time Domain Smoothing\
        853067 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853068 - Independent Phase, Time Domain Smoothing\
        853069 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853070 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853071 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: HighQ, Window: Long\
        853072 - nothing\
        853073 - Preserve Formants\
        853074 - Mid/Side\
        853075 - Preserve Formants, Mid/Side\
        853076 - Independent Phase\
        853077 - Preserve Formants, Independent Phase\
        853078 - Mid/Side, Independent Phase\
        853079 - Preserve Formants, Mid/Side, Independent Phase\
        853080 - Time Domain Smoothing\
        853081 - Preserve Formants, Time Domain Smoothing\
        853082 - Mid/Side, Time Domain Smoothing\
        853083 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853084 - Independent Phase, Time Domain Smoothing\
        853085 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853086 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853087 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: HighQ, Window: Long\
        853088 - nothing\
        853089 - Preserve Formants\
        853090 - Mid/Side\
        853091 - Preserve Formants, Mid/Side\
        853092 - Independent Phase\
        853093 - Preserve Formants, Independent Phase\
        853094 - Mid/Side, Independent Phase\
        853095 - Preserve Formants, Mid/Side, Independent Phase\
        853096 - Time Domain Smoothing\
        853097 - Preserve Formants, Time Domain Smoothing\
        853098 - Mid/Side, Time Domain Smoothing\
        853099 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853100 - Independent Phase, Time Domain Smoothing\
        853101 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853102 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853103 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: HighQ, Window: Long\
        853104 - nothing\
        853105 - Preserve Formants\
        853106 - Mid/Side\
        853107 - Preserve Formants, Mid/Side\
        853108 - Independent Phase\
        853109 - Preserve Formants, Independent Phase\
        853110 - Mid/Side, Independent Phase\
        853111 - Preserve Formants, Mid/Side, Independent Phase\
        853112 - Time Domain Smoothing\
        853113 - Preserve Formants, Time Domain Smoothing\
        853114 - Mid/Side, Time Domain Smoothing\
        853115 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853116 - Independent Phase, Time Domain Smoothing\
        853117 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853118 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853119 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Pitch Mode: Consistent, Window: Long\
        853120 - nothing\
        853121 - Preserve Formants\
        853122 - Mid/Side\
        853123 - Preserve Formants, Mid/Side\
        853124 - Independent Phase\
        853125 - Preserve Formants, Independent Phase\
        853126 - Mid/Side, Independent Phase\
        853127 - Preserve Formants, Mid/Side, Independent Phase\
        853128 - Time Domain Smoothing\
        853129 - Preserve Formants, Time Domain Smoothing\
        853130 - Mid/Side, Time Domain Smoothing\
        853131 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853132 - Independent Phase, Time Domain Smoothing\
        853133 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853134 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853135 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Pitch Mode: Consistent, Window: Long\
        853136 - nothing\
        853137 - Preserve Formants\
        853138 - Mid/Side\
        853139 - Preserve Formants, Mid/Side\
        853140 - Independent Phase\
        853141 - Preserve Formants, Independent Phase\
        853142 - Mid/Side, Independent Phase\
        853143 - Preserve Formants, Mid/Side, Independent Phase\
        853144 - Time Domain Smoothing\
        853145 - Preserve Formants, Time Domain Smoothing\
        853146 - Mid/Side, Time Domain Smoothing\
        853147 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853148 - Independent Phase, Time Domain Smoothing\
        853149 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853150 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853151 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Pitch Mode: Consistent, Window: Long\
        853152 - nothing\
        853153 - Preserve Formants\
        853154 - Mid/Side\
        853155 - Preserve Formants, Mid/Side\
        853156 - Independent Phase\
        853157 - Preserve Formants, Independent Phase\
        853158 - Mid/Side, Independent Phase\
        853159 - Preserve Formants, Mid/Side, Independent Phase\
        853160 - Time Domain Smoothing\
        853161 - Preserve Formants, Time Domain Smoothing\
        853162 - Mid/Side, Time Domain Smoothing\
        853163 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853164 - Independent Phase, Time Domain Smoothing\
        853165 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853166 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853167 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Percussive, Pitch Mode: Consistent, Window: Long\
        853168 - nothing\
        853169 - Preserve Formants\
        853170 - Mid/Side\
        853171 - Preserve Formants, Mid/Side\
        853172 - Independent Phase\
        853173 - Preserve Formants, Independent Phase\
        853174 - Mid/Side, Independent Phase\
        853175 - Preserve Formants, Mid/Side, Independent Phase\
        853176 - Time Domain Smoothing\
        853177 - Preserve Formants, Time Domain Smoothing\
        853178 - Mid/Side, Time Domain Smoothing\
        853179 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853180 - Independent Phase, Time Domain Smoothing\
        853181 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853182 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853183 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Percussive, Pitch Mode: Consistent, Window: Long\
        853184 - nothing\
        853185 - Preserve Formants\
        853186 - Mid/Side\
        853187 - Preserve Formants, Mid/Side\
        853188 - Independent Phase\
        853189 - Preserve Formants, Independent Phase\
        853190 - Mid/Side, Independent Phase\
        853191 - Preserve Formants, Mid/Side, Independent Phase\
        853192 - Time Domain Smoothing\
        853193 - Preserve Formants, Time Domain Smoothing\
        853194 - Mid/Side, Time Domain Smoothing\
        853195 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853196 - Independent Phase, Time Domain Smoothing\
        853197 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853198 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853199 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Percussive, Pitch Mode: Consistent, Window: Long\
        853200 - nothing\
        853201 - Preserve Formants\
        853202 - Mid/Side\
        853203 - Preserve Formants, Mid/Side\
        853204 - Independent Phase\
        853205 - Preserve Formants, Independent Phase\
        853206 - Mid/Side, Independent Phase\
        853207 - Preserve Formants, Mid/Side, Independent Phase\
        853208 - Time Domain Smoothing\
        853209 - Preserve Formants, Time Domain Smoothing\
        853210 - Mid/Side, Time Domain Smoothing\
        853211 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853212 - Independent Phase, Time Domain Smoothing\
        853213 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853214 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853215 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Detector: Soft, Pitch Mode: Consistent, Window: Long\
        853216 - nothing\
        853217 - Preserve Formants\
        853218 - Mid/Side\
        853219 - Preserve Formants, Mid/Side\
        853220 - Independent Phase\
        853221 - Preserve Formants, Independent Phase\
        853222 - Mid/Side, Independent Phase\
        853223 - Preserve Formants, Mid/Side, Independent Phase\
        853224 - Time Domain Smoothing\
        853225 - Preserve Formants, Time Domain Smoothing\
        853226 - Mid/Side, Time Domain Smoothing\
        853227 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853228 - Independent Phase, Time Domain Smoothing\
        853229 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853230 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853231 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Mixed, Detector: Soft, Pitch Mode: Consistent, Window: Long\
        853232 - nothing\
        853233 - Preserve Formants\
        853234 - Mid/Side\
        853235 - Preserve Formants, Mid/Side\
        853236 - Independent Phase\
        853237 - Preserve Formants, Independent Phase\
        853238 - Mid/Side, Independent Phase\
        853239 - Preserve Formants, Mid/Side, Independent Phase\
        853240 - Time Domain Smoothing\
        853241 - Preserve Formants, Time Domain Smoothing\
        853242 - Mid/Side, Time Domain Smoothing\
        853243 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853244 - Independent Phase, Time Domain Smoothing\
        853245 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853246 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853247 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
    Rubber Band Library - Transients: Smooth, Detector: Soft, Pitch Mode: Consistent, Window: Long\
        853248 - nothing\
        853249 - Preserve Formants\
        853250 - Mid/Side\
        853251 - Preserve Formants, Mid/Side\
        853252 - Independent Phase\
        853253 - Preserve Formants, Independent Phase\
        853254 - Mid/Side, Independent Phase\
        853255 - Preserve Formants, Mid/Side, Independent Phase\
        853256 - Time Domain Smoothing\
        853257 - Preserve Formants, Time Domain Smoothing\
        853258 - Mid/Side, Time Domain Smoothing\
        853259 - Preserve Formants, Mid/Side, Time Domain Smoothing\
        853260 - Independent Phase, Time Domain Smoothing\
        853261 - Preserve Formants, Independent Phase, Time Domain Smoothing\
        853262 - Mid/Side, Independent Phase, Time Domain Smoothing\
        853263 - Preserve Formants, Mid/Side, Independent Phase, Time Domain Smoothing\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "1 is 1x, 2 is 2x, 1.8 is 1.8x,etc",
    name = "PLAYBACKRATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "preserve pitch; 1, preserve; 0, don't preserve",
    name = "PRESERVE_PITCH",
   },
   [3] = {
    type = "NUMBER",
    desc = "pitch_adjust(semitones); negative values allowed; 1.1=1.1 semitones higher, -0.3=0.3 semitones lower,etc",
    name = "PITCH_ADJUST",
   },
   [4] = {
    type = "INTEGER",
    desc = "the item's pitchmode - 65536 for project-default",
    name = "TAKEPITCH_TIMESTRETCH_MODE",
   },
   [5] = {
    type = "INTEGER",
    desc = "2, checkbox for optimize-tonal-content is set on; 0, checkbox for optimize-tonal-content is set off",
    name = "OPTIMIZE_TONAL_CONTENT",
   },
   [6] = {
    type = "NUMBER",
    desc = "in milliseconds; negative values are allowed",
    name = "STRETCH_MARKER_FADESIZE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose playback-rate-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [995] = {
  fname = "GetItemChanMode",
  label = "US_GetItemChanMode",
  run = "in/out",
  desc = "Returns the channelmode-entry of a MediaItem or MediaItemStateChunk.\
\
It's the CHANMODE-entry\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "channelmode of the MediaItem\
0 - normal\
1 - reverse stereo\
2 - Mono (Mix L+R)\
3 - Mono Left\
4 - Mono Right\
5 - Mono 3\
...\
66 - Mono 64\
67 - Stereo 1/2\
...\
129 - Stereo 63/64",
    name = "CHANNELMODE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose channelmode-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [996] = {
  fname = "GetItemGUID",
  label = "US_GetItemGUID",
  run = "in/out",
  desc = "Returns the GUID-entry of a MediaItem or MediaItemStateChunk.\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the GUID of the item",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose GUID-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [997] = {
  fname = "GetItemRecPass",
  label = "US_GetItemRecPass",
  run = "in/out",
  desc = "Returns the recpass-entry of a MediaItem or MediaItemStateChunk.\
It's the counter of the recorded item-takes within a project, ordered by the order of recording. Only displayed with recorded item-takes, not imported ones.\
\
It's the RECPASS-entry.\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of recorded mediaitem; every recorded item gets it's counting-number.",
    name = "RECPASS_STATE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose recpass-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [998] = {
  fname = "GetItemBeat",
  label = "US_GetItemBeat",
  run = "in/out",
  desc = "Returns the beatstate/timebase-entry of a MediaItem or MediaItemStateChunk.\
\
It's the BEAT-entry.\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the item-timebase state\
nil - Track/project default timebase\
0 - Time\
1 - Beats (posiiton, length, rate)\
2 - Beats (position only)",
    name = "BEATSTATE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose beatstate/timebase-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [999] = {
  fname = "GetItemMixFlag",
  label = "US_GetItemMixFlag",
  run = "in/out",
  desc = "Returns the item-mix-behavior-entry of a MediaItemStateChunk.\
\
It's the MIXFLAG-entry.\
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the item-mix-behavior\
nil - Project Default item mix behavior\
0 - Enclosed items replace enclosing items\
1 - Items always mix\
2 - Items always replace earlier items",
    name = "ITEMMIX_STATE",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose item-mix-behavior-state you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1000] = {
  fname = "GetItemUSTrackNumber_StateChunk",
  label = "US_GetItemUSTrackNumber_StateChunk",
  run = "in/out",
  desc = "Returns the tracknumber as well as the mediatrack-object from where the mediaitem was from, as given by a MediaItemStateChunk.\
This works only, if the StateChunk contains the entry \"ULTRASCHALL_TRACKNUMBER\", which holds the original tracknumber of the MediaItem.\
\
This entry will only be added by functions from the Ultraschall-API, like [GetAllMediaItemsBetween](#GetAllMediaItemsBetween)  \
\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber, where this item came from; starts with 1 for the first track!",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "MEDIATRACK",
    desc = "the accompanying track as MediaTrack-object",
    name = "TRACK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1001] = {
  fname = "SetItemUSTrackNumber_StateChunk",
  label = "US_SetItemUSTrackNumber_StateChunk",
  run = "in/out",
  desc = "Adds/Replaces the entry \"ULTRASCHALL_TRACKNUMBER\" in a MediaItemStateChunk, that tells other Ultraschall-Apifunctions, from which track this item originated from.\
It returns the modified MediaItemStateChunk.\
Returns -1 in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber you want to set, with 1 for track 1, 2 for track 2",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1002] = {
  fname = "SetItemPosition",
  label = "US_SetItemPosition",
  run = "in/out",
  desc = "Sets position in a MediaItem or MediaItemStateChunk in seconds.\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "position in seconds",
    name = "POSITION",
   },
   [3] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1003] = {
  fname = "SetItemLength",
  label = "US_SetItemLength",
  run = "in/out",
  desc = "Sets length in a MediaItem and MediaItemStateChunk in seconds.\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "INTEGER",
    desc = "length in seconds",
    name = "LENGTH",
   },
   [3] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1004] = {
  fname = "GetItemStateChunk",
  label = "US_GetItemStateChunk",
  run = "in/out",
  desc = "Returns the statechunk of MediaItem. Parameter AddTracknumber allows you to set, whether the tracknumber of the MediaItem shall be inserted to the statechunk as well, by the new entry \"ULTRASCHALL_TRACKNUMBER\".\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if getting the statechunk was successful; false, if not",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the statechunk of the MediaItem",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose statechunk you want to have",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "nil or true; add the tracknumber, where the MediaItem lies, as additional entry entry \"ULTRASCHALL_TRACKNUMBER\" to the statechunk; false, just return the original statechunk.",
    name = "ADDTRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1005] = {
  fname = "GetItem_Video_IgnoreAudio",
  label = "US_GetItem_Video_IgnoreAudio",
  run = "in/out",
  desc = "Gets the \"Ignore audio\"-checkbox of a video-item-source in a specific MediaItem-take.\
\
It's the AUDIO-entry in the <SOURCE-statechunk of the take\
\
Returns nil in case of an error(no video source in take)",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, checkbox is checked; false, checkbox is unchecked",
    name = "CHECKED_STATE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1006] = {
  fname = "SetItem_Video_IgnoreAudio",
  label = "US_SetItem_Video_IgnoreAudio",
  run = "in/out",
  desc = "Sets the \"Ignore audio\"-checkbox of a video-item-source in a specific MediaItem-take.\
\
Returns nil in case of an error(no video source in take)",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered statechunk",
    name = "STATECHUNK",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1007] = {
  fname = "GetItemImage",
  label = "US_GetItemImage",
  run = "in/out",
  desc = "Returns filename of an imagefile of an MediaItem or MediaItemStateChunk, as set in the item-notes-dialog.\
\
It is the entry RESOURCEFN\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the filename of the item-image; \"\", if not image is associated with this item",
    name = "FILENAME",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose itemimage you want to know; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1008] = {
  fname = "SetItemImage",
  label = "US_SetItemImage",
  run = "in/out",
  desc = "Sets the filename of an imagefile of an MediaItem or MediaItemStateChunk, as set in the item-notes-dialog.\
\
It is the entry RESOURCEFN\
\
Note: This function will not check, if the filename exists.\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered MediaItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose itemimage you want to set; nil, use parameter MediaItemStatechunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk; set to nil, if not needed",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "STRING",
    desc = "the filename of the item-image; \"\", if not image is associated with this item",
    name = "FILENAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1009] = {
  fname = "SetItemAllTakes",
  label = "US_SetItemAllTakes",
  run = "in/out",
  desc = "Sets position in a MediaItem or MediaItemStateChunk.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "INTEGER",
    desc = "play all takes-setting; 0, don't play all takes; 1, play all takes",
    name = "ALL_TAKES",
   },
  },
  sp_api = "ultraschall",
 },
 [1010] = {
  fname = "SetItemChanMode",
  label = "US_SetItemChanMode",
  run = "in/out",
  desc = "Sets channelmode in a MediaItem or MediaItemStateChunk.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "INTEGER",
    desc = "the channel-mode of the item; 0 and higher\
0, normal\
1, Mono (Mix L+R)\
2, Mono (Left)\
3, Mono (Right)\
4, Mono 3\
...\
66, Mono 64\
67, Stereo 1/2\
67, Stereo 2/3\
...\
129, Stereo 63/64\
higher, (unknown)",
    name = "CHANMODE",
   },
  },
  sp_api = "ultraschall",
 },
 [1011] = {
  fname = "SetItemLoop",
  label = "US_SetItemLoop",
  run = "in/out",
  desc = "Sets loop-source-setting in a MediaItem or MediaItemStateChunk.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "INTEGER",
    desc = "the loopstate of the item/item-statechunk; 0, loop is off; 1, loop is on",
    name = "LOOP",
   },
  },
  sp_api = "ultraschall",
 },
 [1012] = {
  fname = "SetItemName",
  label = "US_SetItemName",
  run = "in/out",
  desc = "Sets name of a MediaItem or MediaItemStateChunk.\
\
It is the name of the first take in the MediaItem!\
\
Note: No '-quotes in the name are allowed. This is due Reaper's complicated management of quotes in strings in statechunks.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of an error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "STRING",
    desc = "the new name of the first take in the item",
    name = "NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1013] = {
  fname = "SetItemSelected",
  label = "US_SetItemSelected",
  run = "in/out",
  desc = "Sets selection of a MediaItem or MediaItemStateChunk.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "INTEGER",
    desc = "the selected state; 0, item is unselected; 1, item is selected",
    name = "SELECTED",
   },
  },
  sp_api = "ultraschall",
 },
 [1014] = {
  fname = "SetItemGUID",
  label = "US_SetItemGUID",
  run = "in/out",
  desc = "Sets iguid of a MediaItem or MediaItemStateChunk.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "STRING",
    desc = "the new iguid of the item",
    name = "IGUID",
   },
  },
  sp_api = "ultraschall",
 },
 [1015] = {
  fname = "SetItemGUID",
  label = "US_SetItemGUID",
  run = "in/out",
  desc = "Sets iguid of a MediaItem or MediaItemStateChunk.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "STRING",
    desc = "the new iguid of the item",
    name = "IGUID",
   },
  },
  sp_api = "ultraschall",
 },
 [1016] = {
  fname = "SetItemIID",
  label = "US_SetItemIID",
  run = "in/out",
  desc = "Sets itemid-number of a MediaItem or MediaItemStateChunk.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "INTEGER",
    desc = "the new item-id; 1 and higher; function will not check, whether the iid is already in use!",
    name = "IID",
   },
  },
  sp_api = "ultraschall",
 },
 [1017] = {
  fname = "SetItemMute",
  label = "US_SetItemMute",
  run = "in/out",
  desc = "Sets mutestate of a MediaItem or MediaItemStateChunk.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "INTEGER",
    desc = "actual mutestate, item solo overrides; 0, item is muted; 1, item is unmuted",
    name = "MUTESTATE1",
   },
   [4] = {
    type = "INTEGER",
    desc = "mutestate, ignores solo; 0, item is muted; 1, item is unmuted",
    name = "MUTESTATE2",
   },
  },
  sp_api = "ultraschall",
 },
 [1018] = {
  fname = "SetItemSampleOffset",
  label = "US_SetItemSampleOffset",
  run = "in/out",
  desc = "Sets sample-offset of a MediaItem or MediaItemStateChunk.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "NUMBER",
    desc = "the offset in seconds",
    name = "SOFFS1",
   },
   [4] = {
    type = "NUMBER",
    desc = "unknown, probably something with QN(?); seems to be set by Reaper automatically, when committing to a MediaItem",
    opt = {
     use = false,
    },
    name = "SOFFS2",
   },
  },
  sp_api = "ultraschall",
 },
 [1019] = {
  fname = "SetItemVolPan",
  label = "US_SetItemVolPan",
  run = "in/out",
  desc = "Sets volume-pan-settings of a MediaItem or MediaItemStateChunk.\
\
Use ultraschall.DB2MKVOL() to convert dB to a value accepted by parameter volume.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "NUMBER",
    desc = "unknown; 0, seems to mute the item without using mute; 1, seems to keep the item unmuted",
    name = "VOLPAN1",
   },
   [4] = {
    type = "NUMBER",
    desc = "from -1(100%L) to 1(100%R), 0 is center",
    name = "PAN",
   },
   [5] = {
    type = "NUMBER",
    desc = "from 0(-inf) to 3.981072(+12db), 1 is 0db; higher numbers are allowed; negative means phase inverted",
    name = "VOLUME",
   },
   [6] = {
    type = "NUMBER",
    desc = "unknown",
    name = "VOLPAN4",
   },
  },
  sp_api = "ultraschall",
 },
 [1020] = {
  fname = "SetItemFadeIn",
  label = "US_SetItemFadeIn",
  run = "in/out",
  desc = "Sets fade-in-settings of a MediaItem or MediaItemStateChunk.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "NUMBER",
    desc = "the type of the curve: 0, 1, 2, 3, 4, 5, 5.1; must be set like curvetype2",
    name = "CURVETYPE1",
   },
   [4] = {
    type = "NUMBER",
    desc = "the current fadein-length in seconds; minimum 0",
    name = "FADEIN_LENGTH",
   },
   [5] = {
    type = "NUMBER",
    desc = "the fadein-length in seconds; overrides fadein_length and will be moved to fadein_length when fadein-length changes(e.g. mouse-drag); might be autocrossfade-length; minimum 0",
    name = "FADEIN_LENGTH2",
   },
   [6] = {
    type = "NUMBER",
    desc = "the type of the curve: 0, 1, 2, 3, 4, 5, 5.1; must be set like curvetype1",
    name = "CURVETYPE2",
   },
   [7] = {
    type = "INTEGER",
    desc = "unknown, either 0 or 1; fadeinstate entry as set in the rppxml-mediaitem-statechunk",
    name = "FADESTATE5",
   },
   [8] = {
    type = "NUMBER",
    desc = "curve -1 to 1",
    name = "CURVE",
   },
   [9] = {
    type = "NUMBER",
    desc = "unknown",
    name = "FADESTATE7",
   },
  },
  sp_api = "ultraschall",
 },
 [1021] = {
  fname = "SetItemFadeOut",
  label = "US_SetItemFadeOut",
  run = "in/out",
  desc = "Sets fade-out-settings of a MediaItem or MediaItemStateChunk.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "NUMBER",
    desc = "the type of the curve: 0, 1, 2, 3, 4, 5, 5.1; must be set like curvetype2",
    name = "CURVETYPE1",
   },
   [4] = {
    type = "NUMBER",
    desc = "the current fadeout-length in seconds; minimum 0",
    name = "FADEOUT_LENGTH",
   },
   [5] = {
    type = "NUMBER",
    desc = "the fadeout-length in seconds; overrides fadeout_length and will be moved to fadeout_length when fadeout-length changes(e.g. mouse-drag); might be autocrossfade-length; minimum 0",
    name = "FADEOUT_LENGTH2",
   },
   [6] = {
    type = "NUMBER",
    desc = "the type of the curve: 0, 1, 2, 3, 4, 5, 5.1; must be set like curvetype1",
    name = "CURVETYPE2",
   },
   [7] = {
    type = "INTEGER",
    desc = "unknown, either 0 or 1; fadeoutstate entry as set in the rppxml-mediaitem-statechunk",
    name = "FADESTATE5",
   },
   [8] = {
    type = "NUMBER",
    desc = "curve -1 to 1",
    name = "CURVE",
   },
   [9] = {
    type = "NUMBER",
    desc = "unknown",
    name = "FADESTATE7",
   },
  },
  sp_api = "ultraschall",
 },
 [1022] = {
  fname = "SetItemPlayRate",
  label = "US_SetItemPlayRate",
  run = "in/out",
  desc = "Sets playrate-settings of a MediaItem or MediaItemStateChunk.\
\
It returns the modified MediaItemStateChunk.\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem, whose state you want to change; nil, use parameter MediaItemStateChunk instead",
    name = "MEDIAITEM",
   },
   [2] = {
    type = "STRING",
    desc = "an rpp-xml-statechunk, as created by reaper-api-functions like GetItemStateChunk",
    opt = {
     use = false,
    },
    name = "MEDIAITEMSTATECHUNK",
   },
   [3] = {
    type = "NUMBER",
    desc = "1 is 1x, 2 is 2x, 1.8 is 1.8x,etc",
    name = "PLAYBACKRATE",
   },
   [4] = {
    type = "INTEGER",
    desc = "preserve pitch; 1, preserve; 0, don't preserve",
    name = "PRESERVE_PITCH",
   },
   [5] = {
    type = "NUMBER",
    desc = "pitch_adjust(semitones); negative values allowed; 1.1=1.1 semitones higher, -0.3=0.3 semitones lower,etc",
    name = "PITCH_ADJUST",
   },
   [6] = {
    type = "INTEGER",
    desc = "the item's pitchmode - 65536 for project-default",
    name = "TAKEPITCH_TIMESTRETCH_MODE",
   },
   [7] = {
    type = "INTEGER",
    desc = "2, checkbox for optimize-tonal-content is set on; 0, checkbox for optimize-tonal-content is set off",
    name = "OPTIMIZE_TONAL_CONTENT",
   },
   [8] = {
    type = "NUMBER",
    desc = "in milliseconds; negative values are allowed",
    name = "STRETCH_MARKER_FADESIZE",
   },
  },
  sp_api = "ultraschall",
 },
 [1023] = {
  fname = "IsValidEnvStateChunk",
  label = "US_IsValidEnvStateChunk",
  run = "in/out",
  desc = "returns, if a EnvelopeStateChunk is a valid statechunk\
\
returns false, in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the string is a valid statechunk; false, if not a valid statechunk",
    name = "VALID",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string to check, if it's a valid EnvelopeStateChunk",
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1024] = {
  fname = "MoveTrackEnvelopePointsBy",
  label = "US_MoveTrackEnvelopePointsBy",
  run = "in/out",
  desc = "Moves the envelopepoints between startposition and endposition by moveby in MediaTrack. \
It moves all trackenvelope-points for all track-envelopes available.\
\
Does NOT move item-envelopepoints!\
\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of failure",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the startposition in seconds",
    name = "STARTPOSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the endposition in seconds",
    name = "ENDPOSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "in seconds, negative values: move toward beginning of project, positive values: move toward the end of project",
    name = "MOVEBY",
   },
   [4] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack object of the track, where the EnvelopsPoints shall be moved",
    name = "MEDIATRACK",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, cut envelope-points, that would move outside section between startposition and endposition",
    name = "CUT_AT_BORDER",
   },
  },
  sp_api = "ultraschall",
 },
 [1025] = {
  fname = "GetEnvelopePoint",
  label = "US_GetEnvelopePoint",
  run = "in/out",
  desc = "Returns the values for the idxth envelope point in Tracknumber->EnvelopeName.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the time of the envelope point",
    name = "TIME",
   },
   [2] = {
    type = "NUMBER",
    desc = "the raw-value of the envelope point",
    name = "VALUE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the shape of this envelope\
0 - Linear\
1 - Square\
2 - Slow start/end\
3 - Fast start\
4 - Fast end\
5 - Bezier",
    name = "SHAPE",
   },
   [4] = {
    type = "NUMBER",
    desc = "the intensity of the tension of the shape",
    name = "TENSION",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, if this point is selected; false if not",
    name = "SELECTED",
   },
   [6] = {
    type = "NUMBER",
    desc = "the envelopevalue converted to dB",
    name = "DBVAL",
   },
   [7] = {
    type = "ARRAY",
    desc = "an array with all elements of an envelopepoint\
[1] - TrackEnvelope-object\
[2] - Envelope-idx, beginning with 0 for the first one\
[3] - time\
[4] - value\
[5] - shape\
[6] - tension\
[7] - selected\
[8] - dBValue converted from value",
    name = "ENVELOPEPOINTOBJECT",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, beginning with 1. Use 0 for Master Track.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the envelope-lane",
    name = "ENVELOPENAME",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of the envelope-point, beginning with 0",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [1026] = {
  fname = "GetClosestEnvelopePointIDX_ByTime",
  label = "US_GetClosestEnvelopePointIDX_ByTime",
  run = "in/out",
  desc = "Returns the idxs and EnvelopePointObject of the envelope-points closest to timeposition CheckTime\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the closest envelopepoint at or before CheckTime",
    name = "IDXPRE",
   },
   [2] = {
    type = "ARRAY",
    desc = "an EnvelopePointObject of idxpre",
    name = "ENVELOPEPOINTOBJECTPRE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the idx of the closest envelopepoint after CheckTime",
    name = "IDXPOST",
   },
   [4] = {
    type = "ARRAY",
    desc = "an EnvelopePointObject of idxpost",
    name = "ENVELOPEPOINTOBJECTPOST",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, beginning with 1. Use 0 for Master Track.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the envelope-lane",
    name = "ENVELOPENAME",
   },
   [3] = {
    type = "NUMBER",
    desc = "the time in seconds to check for the closest envelope-points",
    name = "CHECKTIME",
   },
  },
  sp_api = "ultraschall",
 },
 [1027] = {
  fname = "GetEnvelopePointIDX_Between",
  label = "US_GetEnvelopePointIDX_Between",
  run = "in/out",
  desc = "Returns a string and an EnvelopePointArray with all idx/EnvelopePointObjects of all envelopepoints between startposition and endposition in the EnvelopeName-lane.\
returns -1 in case of error",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with all envelope-point-idx in the selection, separated by commas.",
    name = "ENVELOPESTRING",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all EnvelopePointObjects of all envelope-points in selection.",
    name = "ENVELOPEPOINTARRAY",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track. 1 for track 1, 2 for track 2, etc. 0 for Master-track.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the envelope-lane, where you want to have the envelope-points of.",
    name = "ENVELOPENAME",
   },
   [3] = {
    type = "NUMBER",
    desc = "the startposition of the selection in seconds. Must be bigger than or equal 0.",
    name = "STARTPOSITION",
   },
   [4] = {
    type = "NUMBER",
    desc = "the endposition of the selection in seconds. Must be bigger than startposition.",
    name = "ENDPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1028] = {
  fname = "CheckEnvelopePointObject",
  label = "US_CheckEnvelopePointObject",
  run = "in/out",
  desc = "Checks, if EnvelopePointObject is valid or not.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's a valid EnvelopePointObject; false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with all information of an envelope point",
    name = "ENVELOPEPOINTOBJECT",
   },
  },
  sp_api = "ultraschall",
 },
 [1029] = {
  fname = "IsValidEnvelopePointObject",
  label = "US_IsValidEnvelopePointObject",
  run = "in/out",
  desc = "Checks, if EnvelopePointObject is valid or not.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's a valid EnvelopePointObject; false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with all information of an envelope point",
    name = "ENVELOPEPOINTOBJECT",
   },
  },
  sp_api = "ultraschall",
 },
 [1030] = {
  fname = "SetEnvelopePoints_EnvelopePointObject",
  label = "US_SetEnvelopePoints_EnvelopePointObject",
  run = "in/out",
  desc = "Sets an envelope-point, as defined in EnvelopePointObject.\
\
returns true in case of success, false in case of failure.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's a valid EnvelopePointObject; false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with all information of an envelope point",
    name = "ENVELOPEPOINTOBJECT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "set true, if setting multiple points at once and call Envelope_SortPoints when done.",
    name = "SORT_IN",
   },
  },
  sp_api = "ultraschall",
 },
 [1031] = {
  fname = "SetEnvelopePoints_EnvelopePointArray",
  label = "US_SetEnvelopePoints_EnvelopePointArray",
  run = "in/out",
  desc = "Sets envelope-points, as defined in the EnvelopePointObjects, in the EnvelopePointArray.\
\
returns true in case of success, false in case of failure.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's a valid EnvelopePointObject; false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with all EnvelopePointObjects you want to insert",
    name = "ENVELOPEPOINTARRAY",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "set true, if setting multiple points at once and call Envelope_SortPoints when done.",
    name = "SORT_IN",
   },
  },
  sp_api = "ultraschall",
 },
 [1032] = {
  fname = "DeleteEnvelopePoints_EnvelopePointObject",
  label = "US_DeleteEnvelopePoints_EnvelopePointObject",
  run = "in/out",
  desc = "Deletes an envelope-point, as defined in EnvelopePointObject.\
\
returns true in case of success, false in case of failure.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's a valid EnvelopePointObject; false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with all information of an envelope point",
    name = "ENVELOPEPOINTOBJECT",
   },
  },
  sp_api = "ultraschall",
 },
 [1033] = {
  fname = "DeleteEnvelopePoints_EnvelopePointArray",
  label = "US_DeleteEnvelopePoints_EnvelopePointArray",
  run = "in/out",
  desc = "Deletes the envelope-points, as defined in the EnvelopePointObjects, in the EnvelopePointArray.\
returns true in case of success, false in case of failure.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's a valid EnvelopePointObject; false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with all EnvelopePointObjects you want to insert",
    name = "ENVELOPEPOINTARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [1034] = {
  fname = "AddEnvelopePoints_EnvelopePointObject",
  label = "US_AddEnvelopePoints_EnvelopePointObject",
  run = "in/out",
  desc = "Adds an envelope-point, as defined in EnvelopePointObject.\
returns true in case of success, false in case of failure.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's a valid EnvelopePointObject; false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with all information of an envelope point",
    name = "ENVELOPEPOINTOBJECT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "set true, if setting multiple points at once and call Envelope_SortPoints when done.",
    name = "SORT_IN",
   },
  },
  sp_api = "ultraschall",
 },
 [1035] = {
  fname = "AddEnvelopePoints_EnvelopePointArray",
  label = "US_AddEnvelopePoints_EnvelopePointArray",
  run = "in/out",
  desc = "Adds the envelope-points, as defined in the EnvelopePointObjects, in the EnvelopePointArray.\
returns true in case of success, false in case of failure.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's a valid EnvelopePointObject; false if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with all EnvelopePointObjects you want to insert",
    name = "ENVELOPEPOINTARRAY",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "set true, if setting multiple points at once and call Envelope_SortPoints when done.",
    name = "SORT_IN",
   },
  },
  sp_api = "ultraschall",
 },
 [1036] = {
  fname = "CreateEnvelopePointObject",
  label = "US_CreateEnvelopePointObject",
  run = "in/out",
  desc = "Creates a new EnvelopePointObject, that can be used by other ultraschall-api-envelope-functions\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "false in case of error, true in case of success.",
    name = "RETVAL",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all elements of the envelopepoint\
[1] - TrackEnvelope-object\
[2] - Envelope-idx, beginning with 0 for the first one\
[3] - time\
[4] - value\
[5] - shape\
[6] - tension\
[7] - selected\
[8] - dBValue converted from value",
    name = "ENVELOPEPOINTOBJECT",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the track-envelope, in which this EnvelopePointObject shall be",
    name = "ENV",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the envelope-point, beginning with 0",
    name = "IDX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the time of the envelope point in seconds",
    name = "TIME",
   },
   [4] = {
    type = "NUMBER",
    desc = "the raw-value of the envelope point",
    name = "VALUE",
   },
   [5] = {
    type = "INTEGER",
    desc = "the shape of this envelope\
0 - Linear\
1 - Square\
2 - Slow start/end\
3 - Fast start\
4 - Fast end\
5 - Bezier",
    name = "SHAPE",
   },
   [6] = {
    type = "NUMBER",
    desc = "the intensity of the tension of the shape",
    name = "TENSION",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, if this point is selected; false if not",
    name = "SELECTED",
   },
  },
  sp_api = "ultraschall",
 },
 [1037] = {
  fname = "CountEnvelopePoints",
  label = "US_CountEnvelopePoints",
  run = "in/out",
  desc = "Counts and returns the number of envelope-points in track Tracknumber, envelopelane EnvelopeName.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of envelope-points in requested track+envelope-lane",
    name = "ENVPOINT_COUNT",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, beginning with 1. Use 0 for Master Track.",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the envelope-lane",
    name = "ENVELOPENAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1038] = {
  fname = "SetEnvelopeHeight",
  label = "US_SetEnvelopeHeight",
  run = "in/out",
  desc = "Changes the Envelope-lane-height and compactible state of TrackEnvelope or TrackEnvelopeStateChunk.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success; false in case of error",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackEnvelopeStateChunk",
    name = "TRACKENVELOPESTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the height of the envelopelane in pixels when not compacted. Reaper accepts 24-443 currently. Nil keeps old value.",
    name = "HEIGHT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "shall the envelopelane be compacted(true) or not(false). Nil keeps old value.",
    name = "COMPACTED",
   },
   [3] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope to alter, or nil to use the TrackEnvelopeStateChunk instead",
    name = "TRACKENVELOPE",
   },
   [4] = {
    type = "STRING",
    desc = "the TrackEnvelopeStateChunk you want to alter. Will be used only, if TrackEnvelope is set to nil",
    opt = {
     use = false,
    },
    name = "TRACKENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1039] = {
  fname = "GetAllTrackEnvelopes",
  label = "US_GetAllTrackEnvelopes",
  run = "in/out",
  desc = "Returns all TrackEnvelopes of all tracks from the current project as a handy table\
\
The format of the table is as follows:\
    TrackEnvelopes[trackenvelope_idx][\"Track\"] - the idx of the track; 0, for mastertrack, 1, for first track, etc\
    TrackEnvelopes[trackenvelope_idx][\"EnvelopeObject\"] - the TrackEnvelope-object\
    TrackEnvelopes[trackenvelope_idx][\"EnvelopeName\"] - the name of of TrackEnvelopeObject",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of TrackEnvelopes found in the current project",
    name = "NUMBER_OF_TRACKENVELOPES",
   },
   [2] = {
    type = "TABLE",
    desc = "all found TrackEnvelopes as a handy table(see description for details)",
    name = "TRACKENVELOPES_TABLE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1040] = {
  fname = "IsValidEnvelopePointArray",
  label = "US_IsValidEnvelopePointArray",
  run = "in/out",
  desc = "Checks, if an EnvelopePointArray is a valid one.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, EnvelopePointArray is a valid one; false, EnvelopePointArray isn't valid",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ENVELOPEPOINTARRAY",
    desc = "the EnvelopePointArray to check for it's validity",
    name = "ENVELOPEPOINTARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [1041] = {
  fname = "GetLastEnvelopePoint_TrackEnvelope",
  label = "US_GetLastEnvelopePoint_TrackEnvelope",
  run = "in/out",
  desc = "Gets the values of the last envelope-point in TrackEnvelope/MediaItemEnvelope.\
\
Note: there's a \"hidden\" last envelopepoint in every Envelope, which will be ignored by this function. It will return the last visible envelope-point instead!\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, getting the envelopepoint was successful; false, in case of an error",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the idx of the found envelope-point; with 0 for the first one on the Envelope",
    opt = {
     use = false,
    },
    name = "ENVPOINTIDX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the time of the envelope-point in seconds",
    opt = {
     use = false,
    },
    name = "TIME",
   },
   [4] = {
    type = "NUMBER",
    desc = "the value of the envelope-point",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
   [5] = {
    type = "INTEGER",
    desc = "the shape of the envelope-point\
0 - Linear\
1 - Square\
2 - Slow start/end\
3 - Fast start\
4 - Fast end\
5 - Bezier",
    opt = {
     use = false,
    },
    name = "SHAPE",
   },
   [6] = {
    type = "NUMBER",
    desc = "the intensity of the tension of the shape",
    opt = {
     use = false,
    },
    name = "TENSION",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, envelope-point is selected; false, it is not selected",
    opt = {
     use = false,
    },
    name = "SELECTED",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the Trackenvelope/MediaItemenvelope, whose last point you want",
    name = "ENVELOPE",
   },
  },
  sp_api = "ultraschall",
 },
 [1042] = {
  fname = "GetArmState_Envelope",
  label = "US_GetArmState_Envelope",
  run = "in/out",
  desc = "Returns the current armed-state of a TrackEnvelope-object.\
\
It is the entry ARM\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, unarmed; 1, armed",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, whose armed-state you want to know; nil, to use parameter EnvelopeStateChunk instead",
    name = "TRACKENVELOPE",
   },
   [2] = {
    type = "STRING",
    desc = "if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1043] = {
  fname = "SetArmState_Envelope",
  label = "US_SetArmState_Envelope",
  run = "in/out",
  desc = "Sets the new armed-state of a TrackEnvelope-object.\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered EnvelopeStateChunk, when parameter TrackEnvelope is set to nil",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, whose armed-state you want to change",
    name = "TRACKENVELOPE",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, unarmed; 1, armed",
    name = "STATE",
   },
   [3] = {
    type = "STRING",
    desc = "if parameter TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameters and change its arm-state",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1044] = {
  fname = "GetTrackEnvelope_ClickState",
  label = "US_GetTrackEnvelope_ClickState",
  run = "in/out",
  desc = "Returns the currently clicked Envelopepoint and TrackEnvelope, as well as the current timeposition.\
\
Works only, if the mouse is above the EnvelopePoint while having it clicked!\
\
Returns false, if no envelope is clicked at",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, an envelopepoint has been clicked; false, no envelopepoint has been clicked",
    name = "CLICKSTATE",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position, at which the mouse has clicked",
    name = "POSITION",
   },
   [3] = {
    type = "MEDIATRACK",
    desc = "the track, from which the envelope and it's corresponding point is taken from",
    name = "TRACK",
   },
   [4] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, in which the clicked envelope-point lies",
    name = "ENVELOPE",
   },
   [5] = {
    type = "INTEGER",
    desc = "the id of the clicked EnvelopePoint",
    name = "ENVELOPEPOINTIDX",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the mousebutton, that shall be clicked at the envelope; you can combine them as flags\
-1, get all states\
&1, only left mouse button\
&2, only right mouse button\
&4, Ctrl/Cmd-key\
&8, Shift-key\
&16, Alt key\
&32, Windows key\
&64, Middle mouse button",
    name = "MOUSE_BUTTON",
   },
  },
  sp_api = "ultraschall",
 },
 [1045] = {
  fname = "GetEnvelopeState_NumbersOnly",
  label = "US_GetEnvelopeState_NumbersOnly",
  run = "in/out",
  desc = "returns a state from an EnvelopeStateChunk.\
\
It only supports single-entry-states with numbers/integers, separated by spaces!\
All other values will be set to nil and strings with spaces will produce weird results!\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "all values found as numerical indexed array",
    name = "VALUES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the state, whose attributes you want to retrieve",
    name = "STATE",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of an envelope",
    name = "TRACKSTATECHUNK",
   },
   [3] = {
    type = "STRING",
    desc = "if this function is used within specific gettrackstate-functions, pass here the \"host\"-functionname, so error-messages will reflect that",
    opt = {
     use = false,
    },
    name = "FUNCTIONNAME",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true or nil; converts all values to numbers; false, keep them as string versions",
    opt = {
     use = false,
    },
    name = "NUMBERTOGGLE",
   },
  },
  sp_api = "ultraschall",
 },
 [1046] = {
  fname = "GetEnvelopeState_Act",
  label = "US_GetEnvelopeState_Act",
  run = "in/out",
  desc = "Returns the current act-state of a TrackEnvelope-object or EnvelopeStateChunk.\
\
It is the state entry ACT\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, bypass on\
1, no bypass",
    name = "ACT",
   },
   [2] = {
    type = "INTEGER",
    desc = "automation item-options for this envelope\
-1, project default behavior, outside of automation items\
0, automation items do not attach underlying envelope\
1, automation items attach to the underlying envelope on the right side\
2, automation items attach to the underlying envelope on both sides\
3, no automation item-options for this envelope\
4, bypass underlying envelope outside of automation items",
    name = "AUTOMATION_SETTINGS",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead",
    name = "TRACKENVELOPE",
   },
   [2] = {
    type = "STRING",
    desc = "if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1047] = {
  fname = "GetEnvelopeState_Vis",
  label = "US_GetEnvelopeState_Vis",
  run = "in/out",
  desc = "Returns the current visibility-state of a TrackEnvelope-object or EnvelopeStateChunk.\
\
It is the state entry VIS\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "1, envelope is visible\
0, envelope is not visible",
    name = "VISIBLE",
   },
   [2] = {
    type = "INTEGER",
    desc = "1, envelope is in it's own lane \
0, envelope is in media-lane",
    name = "LANE",
   },
   [3] = {
    type = "INTEGER",
    desc = "unknown; default=1",
    name = "UNKNOWN",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead",
    name = "TRACKENVELOPE",
   },
   [2] = {
    type = "STRING",
    desc = "if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1048] = {
  fname = "GetEnvelopeState_LaneHeight",
  label = "US_GetEnvelopeState_LaneHeight",
  run = "in/out",
  desc = "Returns the current laneheight-state of a TrackEnvelope-object or EnvelopeStateChunk.\
\
It is the state entry LANEHEIGHT\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the height of this envelope in pixels; 24 - 263 pixels",
    name = "HEIGHT",
   },
   [2] = {
    type = "INTEGER",
    desc = "1, envelope-lane is compacted(\"normal\" height is not shown but still stored in height); \
0, envelope-lane is \"normal\" height",
    name = "COMPACTED",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead",
    name = "TRACKENVELOPE",
   },
   [2] = {
    type = "STRING",
    desc = "if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1049] = {
  fname = "GetEnvelopeState_DefShape",
  label = "US_GetEnvelopeState_DefShape",
  run = "in/out",
  desc = "Returns the current default-shape-state of a TrackEnvelope-object or EnvelopeStateChunk.\
\
It is the state entry DEFSHAPE\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, linear\
1, square\
2, slow start/end\
3, fast start\
4, fast end\
5, bezier",
    name = "SHAPE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the custom envelope range as set in the Pitch Envelope Settings; only available in take-fx-envelope \"Pitch\"\
-1, if unset or for non pitch-envelopes\
0, Custom envelope range-checkbox unchecked\
1-2147483647, the actual semitones",
    name = "PITCH_CUSTOM_ENVELOPE_RANGE_TAKES",
   },
   [3] = {
    type = "INTEGER",
    desc = "the snap values-dropdownlist as set in the Pitch Envelope Settings-dialog; only available in take-fx-envelope \"Pitch\"\
 -1, unset/Follow global default\
 0, Off\
 1, 1 Semitone\
 2, 50 cent\
 3, 25 cent\
 4, 10 cent\
 5, 5 cent\
 6, 1 cent",
    name = "PITCH_SNAP_VALUES",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead",
    name = "TRACKENVELOPE",
   },
   [2] = {
    type = "STRING",
    desc = "if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1050] = {
  fname = "GetEnvelopeState_Voltype",
  label = "US_GetEnvelopeState_Voltype",
  run = "in/out",
  desc = "Returns the current voltype-state of a TrackEnvelope-object or EnvelopeStateChunk.\
\
It is the state entry VOLTYPE\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "1, default volume-type is fader-scaling; if VOLTYPE-entry is not existing, default volume-type is amplitude-scaling",
    name = "VOLTYPE",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead",
    name = "TRACKENVELOPE",
   },
   [2] = {
    type = "STRING",
    desc = "if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1051] = {
  fname = "GetEnvelopeState_PooledEnvInstance",
  label = "US_GetEnvelopeState_PooledEnvInstance",
  run = "in/out",
  desc = "Returns the current state of a certain automation-item within a TrackEnvelope-object or EnvelopeStateChunk.\
\
It is the state entry POOLEDENVINST\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "counter of automation-items; 1-based",
    name = "ID",
   },
   [2] = {
    type = "NUMBER",
    desc = "position in seconds",
    name = "POSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "length in seconds",
    name = "LENGTH",
   },
   [4] = {
    type = "NUMBER",
    desc = "offset in seconds",
    name = "START_OFFSET",
   },
   [5] = {
    type = "NUMBER",
    desc = "playrate; minimum value is 0.001; default is 1.000",
    name = "PLAYRATE",
   },
   [6] = {
    type = "INTEGER",
    desc = "1, automation item is selected; 0, automation item isn't selected",
    name = "SELECTED",
   },
   [7] = {
    type = "NUMBER",
    desc = "0(-100) to 1(+100); default 0.5(0)",
    name = "BASELINE",
   },
   [8] = {
    type = "NUMBER",
    desc = "-2(-200) to 2(+200); default 1 (100)",
    name = "AMPLITUDE",
   },
   [9] = {
    type = "INTEGER",
    desc = "Loop Source; 0 and 1 are allowed settings; 1 is default",
    name = "LOOPSOURCE",
   },
   [10] = {
    type = "INTEGER",
    desc = "unknown; 0 is default",
    name = "I",
   },
   [11] = {
    type = "NUMBER",
    desc = "unknown; 0 is default",
    name = "J",
   },
   [12] = {
    type = "INTEGER",
    desc = "counts the automation-item-instances in this project, including deleted ones; 1-based",
    name = "POOL_ID",
   },
   [13] = {
    type = "INTEGER",
    desc = "1, mute automation-item; 0, unmute automation-item",
    name = "MUTE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index-number of the automation-item, whose states you want to have",
    name = "INDEX",
   },
   [2] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead",
    name = "TRACKENVELOPE",
   },
   [3] = {
    type = "STRING",
    desc = "if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1052] = {
  fname = "GetEnvelopeState_PT",
  label = "US_GetEnvelopeState_PT",
  run = "in/out",
  desc = "Returns the current state of a certain envelope-point within a TrackEnvelope-object or EnvelopeStateChunk.\
\
It is the state entry PT\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "position of the point in seconds",
    name = "POSITION",
   },
   [2] = {
    type = "INTEGER",
    desc = "volume as fader-value",
    name = "VOLUME",
   },
   [3] = {
    type = "INTEGER",
    desc = "may disappear with certain shapes, when point is unselected\
the values for point_shape_1 and point_shape_2 are:\
0 0, linear\
1 0, square\
2 0, slow start/end\
3 0, fast start\
4 0, fast end\
5 1, bezier",
    name = "POINT_SHAPE",
   },
   [4] = {
    type = "INTEGER",
    desc = "1, selected; disappearing, unselected",
    name = "SELECTED",
   },
   [5] = {
    type = "NUMBER",
    desc = "disappears, if no bezier is set",
    name = "UNKNOWN",
   },
   [6] = {
    type = "NUMBER",
    desc = "disappears, if no bezier is set; -1 to 1 \
0, for no bezier tension\
-0.5, for fast-start-beziertension\
0.5, for fast-end-beziertension\
1, for square-tension",
    name = "BEZIER_TENS2",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index-number of the envelope-point, whose states you want to have",
    name = "INDEX",
   },
   [2] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead",
    name = "TRACKENVELOPE",
   },
   [3] = {
    type = "STRING",
    desc = "if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1053] = {
  fname = "GetEnvelopeState_EnvName",
  label = "US_GetEnvelopeState_EnvName",
  run = "in/out",
  desc = "Returns the current envelope-name-state of a TrackEnvelope-object or EnvelopeStateChunk.\
\
It is the opening <-tag of the EnvelopeStateChunk\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the name of the envelope, usually:\
  VOLENV2 - for Volume-envelope\
  PANENV2 - for Pan-envelope\
  WIDTHENV2 - for Width-envelope\
  VOLEN - for Pre-FX-Volume-envelope\
  PANENV - for Pre-FX-Pan-envelope\
  WIDTHENV - for Pre-FX-Width-envelope\
  MUTEENV - for Mute-envelope\
  VOLENV3 - for Trim-Volume-envelope\
  PARMENV - an envelope for an FX-plugin",
    name = "ENVELOPENAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "fx_env is the id of the envelope, as provided by this fx; beginning with 1 for the first",
    opt = {
     use = false,
    },
    name = "FX_ENV_ID",
   },
   [3] = {
    type = "STRING",
    desc = "wet_byp is either \"\" if not existing, wet or bypass",
    opt = {
     use = false,
    },
    name = "WET_BYP",
   },
   [4] = {
    type = "NUMBER",
    desc = "the minimum value, accepted by this envelope; 6 digits-precision",
    opt = {
     use = false,
    },
    name = "MINIMUM_RANGE",
   },
   [5] = {
    type = "NUMBER",
    desc = "the maximum-value, accepted by this envelope; 6 digits-precision",
    opt = {
     use = false,
    },
    name = "MAXIMUM_RANGE",
   },
   [6] = {
    type = "NUMBER",
    desc = "unknown",
    opt = {
     use = false,
    },
    name = "UNKNOWN",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, whose state you want to know; nil, to use parameter EnvelopeStateChunk instead",
    name = "TRACKENVELOPE",
   },
   [2] = {
    type = "STRING",
    desc = "if TrackEnvelope is set to nil, you can pass an EnvelopeStateChunk into this parameter, to get that armed state",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1054] = {
  fname = "GetAllTrackEnvelopes",
  label = "US_GetAllTrackEnvelopes",
  run = "in/out",
  desc = "Returns all TrackEnvelopes of all tracks from the current project as a handy table\
\
The format of the table is as follows:\
    TrackEnvelopes[trackenvelope_idx][\"Track\"] - the idx of the track; 0, for mastertrack, 1, for first track, etc\
    TrackEnvelopes[trackenvelope_idx][\"EnvelopeObject\"] - the TrackEnvelope-object\
    TrackEnvelopes[trackenvelope_idx][\"EnvelopeName\"] - the name of of TrackEnvelopeObject",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of TrackEnvelopes found in the current project",
    name = "NUMBER_OF_TRACKENVELOPES",
   },
   [2] = {
    type = "TABLE",
    desc = "all found TrackEnvelopes as a handy table(see description for details)",
    name = "TRACKENVELOPES_TABLE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1055] = {
  fname = "GetAllTakeEnvelopes",
  label = "US_GetAllTakeEnvelopes",
  run = "in/out",
  desc = "Returns all TakeEnvelopes of all MediaItems from the current project as a handy table\
\
The format of the table is as follows:\
    TakeEnvelopes[takeenvelope_idx][\"MediaItem\"] - the idx of the MediaItem\
    TakeEnvelopes[takeenvelope_idx][\"MediaItem_Take\"] - the idx of the trake of the MediaItem\
    TakeEnvelopes[takeenvelope_idx][\"MediaItem_Take_Name\"] - the name of the MediaItek_Take\
    TakeEnvelopes[takeenvelope_idx][\"EnvelopeObject\"] - the TakeEnvelopeObject in question\
    TakeEnvelopes[takeenvelope_idx][\"EnvelopeName\"] - the name of of TakeEnvelopeObject",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of TakeEnvelopes found in the current project",
    name = "NUMBER_OF_TAKEENVELOPES",
   },
   [2] = {
    type = "TABLE",
    desc = "all found TakeEnvelopes as a handy table(see description for details)",
    name = "TAKEENVELOPES_TABLE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1056] = {
  fname = "SetEnvelopeState_Vis",
  label = "US_SetEnvelopeState_Vis",
  run = "in/out",
  desc = "sets the current visibility-state of a TrackEnvelope-object or EnvelopeStateChunk.\
\
It is the state entry VIS\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered EnvelopeStateChunk",
    name = "ENVELOPESTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, in whose envelope you want set the visibility states; nil, to us parameter EnvelopeStateChunk instead",
    name = "ENV",
   },
   [2] = {
    type = "INTEGER",
    desc = "the visibility of the envelope; 0, invisible; 1, visible",
    name = "VISIBILITY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the position of the envelope in the lane; 0, envelope is in media-lane; 1, envelope is in it's own lane",
    name = "LANE",
   },
   [4] = {
    type = "INTEGER",
    desc = "unknown; default=1 ",
    name = "UNKNOWN",
   },
   [5] = {
    type = "STRING",
    desc = "an EnvelopeStateChunk, in which you want to set these settings",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1057] = {
  fname = "SetEnvelopeState_Act",
  label = "US_SetEnvelopeState_Act",
  run = "in/out",
  desc = "sets the current bypass and automation-items-settings-state of a TrackEnvelope-object or EnvelopeStateChunk.\
\
It is the state entry ACT\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered EnvelopeStateChunk",
    name = "ENVELOPESTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, in whose envelope you want set the bypass and automation-item-states; nil, to use parameter EnvelopeStateChunk instead",
    name = "ENV",
   },
   [2] = {
    type = "INTEGER",
    desc = "bypass-setting; \
  0, bypass on\
  1, no bypass ",
    name = "ACT",
   },
   [3] = {
    type = "INTEGER",
    desc = "automation item-options for this envelope\
-1, project default behavior, outside of automation items\
0, automation items do not attach underlying envelope\
1, automation items attach to the underlying envelope on the right side\
2, automation items attach to the underlying envelope on both sides\
3, no automation item-options for this envelope\
4, bypass underlying envelope outside of automation items ",
    name = "AUTOMATION_SETTINGS",
   },
   [4] = {
    type = "STRING",
    desc = "an EnvelopeStateChunk, in which you want to set these settings",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1058] = {
  fname = "SetEnvelopeState_DefShape",
  label = "US_SetEnvelopeState_DefShape",
  run = "in/out",
  desc = "sets the current default-shape-states and pitch-snap-settings of a TrackEnvelope-object or EnvelopeStateChunk.\
\
It is the state entry DEFSHAPE\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered EnvelopeStateChunk",
    name = "ENVELOPESTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, in whose envelope you want set the default shape and pitch-snap states; nil, to use parameter EnvelopeStateChunk instead",
    name = "ENV",
   },
   [2] = {
    type = "INTEGER",
    desc = "the default shape of envelope-points\
0, linear\
1, square\
2, slow start/end\
3, fast start\
4, fast end\
5, bezier ",
    name = "SHAPE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the custom envelope range as set in the Pitch Envelope Settings; only available in take-fx-envelope \"Pitch\"\
-1, if unset or for non pitch-envelopes\
0, Custom envelope range-checkbox unchecked\
1-2147483647, the actual semitones",
    name = "PITCH_CUSTOM_ENVELOPE_RANGE_TAKES",
   },
   [4] = {
    type = "INTEGER",
    desc = "the snap values-dropdownlist as set in the Pitch Envelope Settings-dialog; only available in take-fx-envelope \"Pitch\"\
 -1, unset/Follow global default\
 0, Off\
 1, 1 Semitone\
 2, 50 cent\
 3, 25 cent\
 4, 10 cent\
 5, 5 cent\
 6, 1 cent",
    name = "PITCH_SNAP_VALUES",
   },
   [5] = {
    type = "STRING",
    desc = "an EnvelopeStateChunk, in which you want to set these settings",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1059] = {
  fname = "SetEnvelopeState_LaneHeight",
  label = "US_SetEnvelopeState_LaneHeight",
  run = "in/out",
  desc = "sets the current height-states and compacted-settings of a TrackEnvelope-object or EnvelopeStateChunk.\
\
It is the state entry LANEHEIGHT\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered EnvelopeStateChunk",
    name = "ENVELOPESTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, whose envelope you want set the height and compacted-states; nil, to us parameter EnvelopeStateChunk instead",
    name = "ENV",
   },
   [2] = {
    type = "INTEGER",
    desc = "the height of the laneheight; the height of this envelope in pixels; 24 - 263 pixels",
    name = "HEIGHT",
   },
   [3] = {
    type = "INTEGER",
    desc = "1, envelope-lane is compacted(\"normal\" height is not shown but still stored in height);\
0, envelope-lane is \"normal\" height ",
    name = "COMPACTED",
   },
   [4] = {
    type = "STRING",
    desc = "an EnvelopeStateChunk, in which you want to set these settings",
    opt = {
     use = false,
    },
    name = "ENVELOPESTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1060] = {
  fname = "ActivateEnvelope",
  label = "US_ActivateEnvelope",
  run = "in/out",
  desc = "Activates an envelope, so it can be displayed in the arrange-view.\
\
Will add an envelope-point at position 0 in the envelope, if no point is in the envelope yet\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activating was successful; false, activating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, which you want to activate",
    name = "ENVELOPE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true or nil, show envelope; false, don't show envelope",
    opt = {
     use = false,
    },
    name = "VISIBLE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true or nil, don't bypass envelope; false, bypass envelope",
    opt = {
     use = false,
    },
    name = "BYPASS",
   },
  },
  sp_api = "ultraschall",
 },
 [1061] = {
  fname = "ActivateTrackVolumeEnv",
  label = "US_ActivateTrackVolumeEnv",
  run = "in/out",
  desc = "activates a volume-envelope of a track\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activating was successful; false, activating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track, whose volume-envelope you want to activate; 1, for the first track",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1062] = {
  fname = "ActivateTrackVolumeEnv_TrackObject",
  label = "US_ActivateTrackVolumeEnv_TrackObject",
  run = "in/out",
  desc = "activates a volume-envelope of a MediaTrack-object\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activating was successful; false, activating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose volume-envelope you want to activate",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1063] = {
  fname = "ActivateTrackPanEnv",
  label = "US_ActivateTrackPanEnv",
  run = "in/out",
  desc = "activates a pan-envelope of a track\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activating was successful; false, activating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track, whose pan-envelope you want to activate; 1, for the first track",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1064] = {
  fname = "ActivateTrackPanEnv_TrackObject",
  label = "US_ActivateTrackPanEnv_TrackObject",
  run = "in/out",
  desc = "activates a pan-envelope of a MediaTrack-object\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activating was successful; false, activating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose pan-envelope you want to activate",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1065] = {
  fname = "ActivateTrackPreFXPanEnv",
  label = "US_ActivateTrackPreFXPanEnv",
  run = "in/out",
  desc = "activates a preFX-pan-envelope of a track\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activating was successful; false, activating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track, whose preFX-pan-envelope you want to activate; 1, for the first track",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1066] = {
  fname = "ActivateTrackPreFXPanEnv_TrackObject",
  label = "US_ActivateTrackPreFXPanEnv_TrackObject",
  run = "in/out",
  desc = "activates a preFX-pan-envelope of a MediaTrack-object\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activating was successful; false, activating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose prefx-pan-envelope you want to activate",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1067] = {
  fname = "ActivateTrackPreFXVolumeEnv",
  label = "US_ActivateTrackPreFXVolumeEnv",
  run = "in/out",
  desc = "activates a preFX-volume-envelope of a track\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activating was successful; false, activating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track, whose preFX-volume-envelope you want to activate; 1, for the first track",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1068] = {
  fname = "ActivateTrackPreFXVolumeEnv_TrackObject",
  label = "US_ActivateTrackPreFXVolumeEnv_TrackObject",
  run = "in/out",
  desc = "activates a preFX-volume-envelope of a MediaTrack-object\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activating was successful; false, activating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose prefx-volume-envelope you want to activate",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1069] = {
  fname = "ActivateTrackTrimVolumeEnv",
  label = "US_ActivateTrackTrimVolumeEnv",
  run = "in/out",
  desc = "activates a trim-volume-envelope of a track\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activating was successful; false, activating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track, whose trim-volume-envelope you want to activate; 1, for the first track",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1070] = {
  fname = "ActivateTrackTrimVolumeEnv_TrackObject",
  label = "US_ActivateTrackTrimVolumeEnv_TrackObject",
  run = "in/out",
  desc = "activates a trim-volume-envelope of a MediaTrack-object\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activating was successful; false, activating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose trim-volume-envelope you want to activate",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1071] = {
  fname = "GetTakeEnvelopeUnderMouseCursor",
  label = "US_GetTakeEnvelopeUnderMouseCursor",
  run = "in/out",
  desc = "returns the take-envelope underneath the mouse",
  out = {
   [1] = {
    type = "TAKEENVELOPE",
    desc = "the take-envelope found unterneath the mouse; nil, if none has been found",
    name = "ENV",
   },
   [2] = {
    type = "MEDIAITEM_TAKE",
    desc = "the take from which the take-envelope is",
    name = "TAKE",
   },
   [3] = {
    type = "NUMBER",
    desc = "the project-position",
    name = "PROJECTPOSITION",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1072] = {
  fname = "IsAnyMuteEnvelopeVisible",
  label = "US_IsAnyMuteEnvelopeVisible",
  run = "in/out",
  desc = "returns, if any mute-envelopes are currently set to visible in the current project\
\
Visible=true does include mute-envelopes, who are scrolled outside of the arrangeview",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, there are visible mute-envelopes in the project; false, no mute-envelope visible",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the envelope; case-sensitive, just take the one displayed in the envelope-lane\
Standard-Envelopes are: \
     \"Volume (Pre-FX)\", \"Pan (Pre-FX)\", \"Width (Pre-FX)\", \"Volume\", \"Pan\", \"Width\", \"Trim Volume\", \"Mute\"\
Plugin's envelopes can also be checked against, like\
     \"Freq-Band 1 / ReaEQ\"",
    name = "NAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1073] = {
  fname = "IsEnvelope_Track",
  label = "US_IsEnvelope_Track",
  run = "in/out",
  desc = "returns, if the envelope is a track envelope(true) or a take-envelope(false)\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, the envelope is a TrackEnvelope; false, the envelope is a TakeEnvelope",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope to check",
    name = "ENV",
   },
  },
  sp_api = "ultraschall",
 },
 [1074] = {
  fname = "IsTrackEnvelopeVisible_ArrangeView",
  label = "US_IsTrackEnvelopeVisible_ArrangeView",
  run = "in/out",
  desc = "returns, if the envelope is currently visible within arrange-view\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, the envelope is a TrackEnvelope; false, the envelope is a TakeEnvelope",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope to check for visibility",
    name = "ENV",
   },
  },
  sp_api = "ultraschall",
 },
 [1075] = {
  fname = "GetAllActiveEnvelopes_Track",
  label = "US_GetAllActiveEnvelopes_Track",
  run = "in/out",
  desc = "returns all active track-envelopes and their state of visibility and if they are on their own lane.\
\
the returned table is of the following format:\
\
  found_envelopes[envelope_idx][1] - the envelope\
  found_envelopes[envelope_idx][2] - the visibility of the envelope; 1, visible; 0, invisible\
  found_envelopes[envelope_idx][3] - is the envelope on its own lane; 1, on it's own lane; 0, on the media-lane\
  \
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of active envelopes; -1, in case of an error",
    name = "NUMBER_OF_ACTIVE_ENVELOPES",
   },
   [2] = {
    type = "TABLE",
    desc = "the found envelopes(see description for more details)",
    name = "FOUND_ENVELOPES",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose active envelopes you want to get",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1076] = {
  fname = "GetAllActiveEnvelopes_Take",
  label = "US_GetAllActiveEnvelopes_Take",
  run = "in/out",
  desc = "returns all active take-envelopes and their state of visibility and if they are on their own lane.\
\
the returned table is of the following format:\
\
  found_envelopes[envelope_idx][1] - the envelope\
  found_envelopes[envelope_idx][2] - the visibility of the envelope; 1, visible; 0, invisible\
  found_envelopes[envelope_idx][3] - is the envelope on its own lane; 1, on it's own lane; 0, on the media-lane\
  \
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of active envelopes; -1, in case of an error",
    name = "NUMBER_OF_ACTIVE_ENVELOPES",
   },
   [2] = {
    type = "TABLE",
    desc = "the found envelopes(see description for more details)",
    name = "FOUND_ENVELOPES",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM_TAKE",
    desc = "the take, whose active envelopes you want to get",
    name = "TAKE",
   },
  },
  sp_api = "ultraschall",
 },
 [1077] = {
  fname = "GetTrackEnvelopeFromPoint",
  label = "US_GetTrackEnvelopeFromPoint",
  run = "in/out",
  desc = "returns the TrackEnvelope at position x,y if existing\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope found at position x and y",
    name = "ENVELOPE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the x-position in pixels, at which to look for envelopes",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "the y-position in pixels, at which to look for envelopes",
    name = "Y",
   },
  },
  sp_api = "ultraschall",
 },
 [1078] = {
  fname = "GetTakeEnvelopeFromPoint",
  label = "US_GetTakeEnvelopeFromPoint",
  run = "in/out",
  desc = "returns the take-envelope at positon x and y in pixels, if existing",
  out = {
   [1] = {
    type = "TAKEENVELOPE",
    desc = "the take-envelope found unterneath the mouse; nil, if none has been found",
    name = "ENV",
   },
   [2] = {
    type = "MEDIAITEM_TAKE",
    desc = "the take from which the take-envelope is",
    name = "TAKE",
   },
   [3] = {
    type = "NUMBER",
    desc = "the project-position",
    name = "PROJECTPOSITION",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the x-position in pixels, at which to look for envelopes",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "the y-position in pixels, at which to look for envelopes",
    name = "Y",
   },
  },
  sp_api = "ultraschall",
 },
 [1079] = {
  fname = "IsEnvelopeTrackEnvelope",
  label = "US_IsEnvelopeTrackEnvelope",
  run = "in/out",
  desc = "checks, whether the passed envelope is a TrackEnvelope\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, envelope is a TrackEnvelope; false, envelope is not TakeEnvelope",
    name = "IS_TRACK_ENVELOPE",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope to check, if it's a TrackEnvelope",
    name = "ENVELOPE",
   },
  },
  sp_api = "ultraschall",
 },
 [1080] = {
  fname = "SetIniFileExternalState",
  label = "US_SetIniFileExternalState",
  run = "in/out",
  desc = "Sets an external state into ini_filename_with_path. Returns false, if it doesn't work.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting the state was successful; false, if setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "section of the external state. No = allowed!",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "key of the external state. No = allowed!",
    name = "KEY",
   },
   [3] = {
    type = "STRING",
    desc = "value for the key",
    name = "VALUE",
   },
   [4] = {
    type = "STRING",
    desc = "filename of the ini-file",
    name = "FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1081] = {
  fname = "GetIniFileExternalState",
  label = "US_GetIniFileExternalState",
  run = "in/out",
  desc = "Gets an external state from ini_filename_with_path. Returns -1, if the file does not exist or parameters are invalid.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the length of the returned value",
    name = "ENTRYLENGTH",
   },
   [2] = {
    type = "STRING",
    desc = "the value stored in a section->key in a configuration-file",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "section of the external state",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "key of the external state. No = allowed!",
    name = "KEY",
   },
   [3] = {
    type = "STRING",
    desc = "filename of the ini-file",
    name = "FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1082] = {
  fname = "CountIniFileExternalState_sec",
  label = "US_CountIniFileExternalState_sec",
  run = "in/out",
  desc = "Count external-state-[sections] from an ini-configurationsfile.\
\
Returns -1, if the file does not exist.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of sections within an ini-configuration-file",
    name = "SECTIONCOUNT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename of the ini-file",
    name = "INI_FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1083] = {
  fname = "CountIniFileExternalState_key",
  label = "US_CountIniFileExternalState_key",
  run = "in/out",
  desc = "Count external-state-keys within a specific section, in a ini_filename_with_path.\
\
Returns -1, if file does not exist.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of keys with section within an ini-configuration-file",
    name = "KEYSCOUNT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the section within the ini-filename",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "filename of the ini-file",
    name = "INI_FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1084] = {
  fname = "EnumerateIniFileExternalState_sec",
  label = "US_EnumerateIniFileExternalState_sec",
  run = "in/out",
  desc = "Returns the numberth section in an ini_filename_with_path.\
\
Returns nil, in case of an error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the name of the numberth section in the ini-file",
    name = "SECTIONNAME",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the section within the ini-filename; 1, for the first section",
    name = "NUMBER_OF_SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "filename of the ini-file",
    name = "INI_FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1085] = {
  fname = "EnumerateIniFileExternalState_key",
  label = "US_EnumerateIniFileExternalState_key",
  run = "in/out",
  desc = "Returns the numberth key within a section in an ini_filename_with_path.\
\
Returns nil, in case of an error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the name of the numberth key within section in the ini-file",
    name = "KEYNAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the section",
    name = "SECTION",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the key within a section within the ini-filename, with 1 for the first key in the section",
    name = "NUMBER",
   },
   [3] = {
    type = "STRING",
    desc = "filename of the ini-file",
    name = "INI_FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1086] = {
  fname = "CountSectionsByPattern",
  label = "US_CountSectionsByPattern",
  run = "in/out",
  desc = "Counts the number of sections within an ini-file, that fit a specific pattern.\
\
Uses \"pattern\"-string to determine, how often a section with a certain pattern exists. Good for sections, that have a number in them, like [section1], [section2], [section3].\
Returns the number of sections, that include that pattern as well as a string, that includes the names of all such sections, separated by a comma.\
\
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.\
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc\
\
Returns -1, in case of an error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of sections, that fit the pattern",
    name = "NUMBER_OF_SECTIONS",
   },
   [2] = {
    type = "STRING",
    desc = "a string, like: [section1],[section8],[section99]",
    name = "SECTIONNAMES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the pattern itself. Case sensitive.",
    name = "PATTERN",
   },
   [2] = {
    type = "STRING",
    desc = "filename of the ini-file",
    name = "INI_FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1087] = {
  fname = "CountKeysByPattern",
  label = "US_CountKeysByPattern",
  run = "in/out",
  desc = "Counts the number of keys within an ini-file, that fit a specific pattern.\
\
Uses \"pattern\"-string to determine, how often a key with a certain pattern exists. Good for keys, that have a number in them, like key1, key2, key3.\
Returns the number of keys, that include the pattern, as well as a string with all [sections] that contain keys= with a pattern, separated by a , i.e. [section1],key1=,key2=,key3=,[section2],key1=,key4=\
\
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.\
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc\
\
Returns -1, in case of an error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of keys, that fit the pattern",
    name = "NUMBER_OF_KEYS",
   },
   [2] = {
    type = "STRING",
    desc = "a string, like: [section1],Key1=,Key2=,Key3=[section2],Key7=",
    name = "SECTIONS_AND_KEYS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the pattern itself. Case sensitive.",
    name = "PATTERN",
   },
   [2] = {
    type = "STRING",
    desc = "filename of the ini-file",
    name = "INI_FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1088] = {
  fname = "CountValuesByPattern",
  label = "US_CountValuesByPattern",
  run = "in/out",
  desc = "Counts the number of values within an ini-file, that fit a specific pattern.\
\
Uses \"pattern\"-string to determine, how often a value with a certain pattern exists. Good for values, that have a number in them, like value1, value2, value3\
Returns the number of values, that include that pattern as well as a string, that contains the [sections] and the keys= and values , the latter that contain the pattern, separated by a comma\
 e.g. [section1], key1=, value, key4=, value, [section4], key2=, value\
\
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.\
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc\
\
Returns -1, in case of an error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of values, that fit the pattern",
    name = "NUMBER_OF_VALUES",
   },
   [2] = {
    type = "STRING",
    desc = "a string, like: [section1],key1=,value,key4=,value,[section4],key2=,value",
    name = "SECTIONS_KEYS_VALUES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the pattern itself. Case sensitive.",
    name = "PATTERN",
   },
   [2] = {
    type = "STRING",
    desc = "filename of the ini-file",
    name = "INI_FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1089] = {
  fname = "EnumerateSectionsByPattern",
  label = "US_EnumerateSectionsByPattern",
  run = "in/out",
  desc = "Returns the numberth section within an ini-file, that fits the pattern, e.g. the third section containing \"hawaii\" in it.\
\
Uses \"pattern\"-string to determine if a section contains a certain pattern. Good for sections, that have a number in them, like section1, section2, section3\
Returns the section that includes that pattern as a string, numbered by id.\
\
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.\
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc\
\
Returns nil, in case of an error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string, that contains the sectionname",
    name = "SECTIONNAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the pattern itself. Case sensitive.",
    name = "PATTERN",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of section, that contains pattern",
    name = "ID",
   },
   [3] = {
    type = "STRING",
    desc = "filename of the ini-file",
    name = "INI_FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1090] = {
  fname = "EnumerateKeysByPattern",
  label = "US_EnumerateKeysByPattern",
  run = "in/out",
  desc = "Returns the numberth key within a section in an ini-file, that fits the pattern, e.g. the third key containing \"hawaii\" in it.\
\
Uses \"pattern\"-string to determine if a key contains a certain pattern. Good for keys, that have a number in them, like key1=, key2=, key3=\
Returns the key that includes that pattern as a string, numbered by id.\
\
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.\
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc\
\
Returns nil, in case of an error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string, that contains the keyname",
    name = "KEYNAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the pattern itself. Case sensitive.",
    name = "PATTERN",
   },
   [2] = {
    type = "STRING",
    desc = "the section, in which to look for the key",
    name = "SECTION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of key, that contains pattern",
    name = "ID",
   },
   [4] = {
    type = "STRING",
    desc = "filename of the ini-file",
    name = "INI_FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1091] = {
  fname = "EnumerateValuesByPattern",
  label = "US_EnumerateValuesByPattern",
  run = "in/out",
  desc = "Returns the numberth value(and it's accompanying key) within a section in an ini-file, that fits the pattern, e.g. the third value containing \"hawaii\" in it.\
\
Uses \"pattern\"-string to determine if a value contains a certain pattern. Good for values, that have a number in them, like value1, value2, value3\
Returns the value that includes that pattern as a string, numbered by id, as well as it's accompanying key.\
\
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.\
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc\
\
Returns nil, in case of an error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value that contains the pattern",
    name = "VALUE",
   },
   [2] = {
    type = "STRING",
    desc = "a string, that contains the keyname",
    name = "KEYNAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the pattern itself. Case sensitive.",
    name = "PATTERN",
   },
   [2] = {
    type = "STRING",
    desc = "the section, in which to look for the key",
    name = "SECTION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of key, that contains pattern",
    name = "ID",
   },
   [4] = {
    type = "STRING",
    desc = "filename of the ini-file",
    name = "INI_FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1092] = {
  fname = "GetKBIniFilepath",
  label = "US_GetKBIniFilepath",
  run = "in/out",
  desc = "Returns the path and filename of the Reaper-kb.ini-file.",
  out = {
   [1] = {
    type = "STRING",
    desc = "path and filename of the reaper-kb.ini",
    name = "KB_INI_PATH",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1093] = {
  fname = "CountKBIniActions",
  label = "US_CountKBIniActions",
  run = "in/out",
  desc = "Count the number of \"ACT\"-Actions of the Reaper-kb.ini-file.\
Returns -1, if no such file exists.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of actions in the reaper-kb.ini",
    name = "ACTIONS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1094] = {
  fname = "CountKBIniScripts",
  label = "US_CountKBIniScripts",
  run = "in/out",
  desc = "Count the number of \"SCR\"-Scripts of the Reaper-kb.ini-file.\
Returns -1, if no such file exists.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of scripts in the reaper-kb.ini",
    name = "SCRIPTS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1095] = {
  fname = "CountKBIniKeys",
  label = "US_CountKBIniKeys",
  run = "in/out",
  desc = "Count the number of \"KEY\"-Keybindings of the Reaper-kb.ini-file.\
Returns -1, if no such file exists.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of keys in the reaper-kb.ini",
    name = "KEYS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1096] = {
  fname = "GetKBIniActions",
  label = "US_GetKBIniActions",
  run = "in/out",
  desc = "Get the states of \"ACT\"-Action number idx. Returns consolidate, section, ActionCommandID, description, ActionsToBeExecuted.\
Returns -1, if no such entry or file exists.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "consolidate-state\
1 consolidate undo points, \
2 show in Actions-Menu, \
3 consolidate undo points AND show in Actions Menu; \
maybe 4 and higher?    ",
    name = "CONSOLIDATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the section, in which this action is executed\
0 - Main\
1 - action stays invisible but is kept, if Reaper rewrites the reaper-kb.ini. Menu-buttons with this action associated appear but don't work.\
100 - Main (alt recording)\
32060 - MIDI Editor\
32061 - MIDI Event List Editor\
32062 - MIDI Inline Editor\
32063 - Media Explorer    ",
    name = "SECTION",
   },
   [3] = {
    type = "STRING",
    desc = "the ActionCommandID given to this Action",
    name = "ACTIONCOMMANDID",
   },
   [4] = {
    type = "STRING",
    desc = "the description of this action",
    name = "DESCRIPTION",
   },
   [5] = {
    type = "STRING",
    desc = "the actions that are run, the ActionCommandIDs beginning with _, multiple ActionCommandIDs are separated by whitespaces",
    name = "ACTIONSTOBEEXECUTED",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "path and filename of the reaper-kb.ini; nil, use current Reaper's reaper-kb.ini",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the action to get, beginning with 1 for the first one",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [1097] = {
  fname = "GetKBIniScripts",
  label = "US_GetKBIniScripts",
  run = "in/out",
  desc = "Get the states of \"SCR\"-Scripts number idx. Returns terminateinstance, section, ActionCommandID, description, scriptfile.\
Returns -1, if no such entry or file exists.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the state of terminating instances\
4 - Dialogwindow appears(Terminate, New Instance, Abort), if another instance of a given script is started, that's already running\
260 - always Terminate Instances, when an instance of the script is already running\
516 - always start a New Instance of the script already running",
    name = "TERMINATEINSTANCE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the section, in which this action is executed\
0 - Main\
1 - action stays invisible but is kept, if Reaper rewrites the reaper-kb.ini. Menu-buttons with this action associated appear but don't work.\
100 - Main (alt recording)\
32060 - MIDI Editor\
32061 - MIDI Event List Editor\
32062 - MIDI Inline Editor\
32063 - Media Explorer    ",
    name = "SECTION",
   },
   [3] = {
    type = "STRING",
    desc = "the ActionCommandID given to this Action",
    name = "ACTIONCOMMANDID",
   },
   [4] = {
    type = "STRING",
    desc = "the description of this action",
    name = "DESCRIPTION",
   },
   [5] = {
    type = "STRING",
    desc = "the filename of the script that shall be run",
    name = "SCRIPTFILE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "path and filename of the reaper-kb.ini; nil, use current Reaper's reaper-kb.ini",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the action to get, beginning with 1 for the first one",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [1098] = {
  fname = "GetKBIniKeys",
  label = "US_GetKBIniKeys",
  run = "in/out",
  desc = "Get the states of \"KEY\"-Keybinding-number idx, for MIDI/Key-bindings. Returns keytype_modifier_midichan, key_midinote, ActionCommandID, section.\
\
For a detailed description in how KEY-entries work, refer to <a href=\"Reaper-Filetype-Descriptions.html#Reaper-kb.ini\">Reaper-Filetype-Descriptions.html#Reaper-kb.ini</a>.\
\
Returns -1, if no such entry or file exists.\
Does not return OSC-keybindings, as they are stored in OSC/reaper-osc-actions.ini !\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "Type of Keytype, modifier or midichannel\
For a detailed description in how keytype/modifier in KEY-entries work, refer to <a href=\"Reaper-Filetype-Descriptions.html#Reaper-kb.ini\">Reaper-Filetype-Descriptions.html#Reaper-kb.ini</a>.",
    name = "KEYTYPE_MODIFIER_MIDICHAN",
   },
   [2] = {
    type = "INTEGER",
    desc = "the key(like ASCII-Codes) or midinote. \
For a detailed description in how key/midinotes in KEY-entries work, refer to <a href=\"Reaper-Filetype-Descriptions.html#Reaper-kb.ini\">Reaper-Filetype-Descriptions.html#Reaper-kb.ini</a>.    ",
    name = "KEY_MIDINOTE",
   },
   [3] = {
    type = "STRING",
    desc = "the ActionCommandID associated with this shortcut.",
    name = "ACTIONCOMMANDID",
   },
   [4] = {
    type = "INTEGER",
    desc = "the section, in which this shortcut is used\
0 - Main\
100 - Main (alt recording)\
32060 - MIDI Editor\
32061 - MIDI Event List Editor\
32062 - MIDI Inline Editor\
32063 - Media Explorer",
    name = "SECTION",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "path and filename of the reaper-kb.ini; nil, use current Reaper's reaper-kb.ini",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the action to get, beginning with 1 for the first one",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [1099] = {
  fname = "GetKBIniActionsID_ByActionCommandID",
  label = "US_GetKBIniActionsID_ByActionCommandID",
  run = "in/out",
  desc = "Returns the indexnumber(s) of actions by ActionCommandIDs within a reaper-kb.ini.\
Returns -1, if no such entry or file exists.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the ids of actions with ActionCommandID, separated by a ,",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of indices found",
    name = "INDEXCOUNT",
   },
   [3] = {
    type = "TABLE",
    desc = "a table with all indices found",
    name = "INDICES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "path and filename of the reaper-kb.ini; nil, use current Reaper's reaper-kb.ini",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the ActionCommandID",
    name = "ACTIONCOMMANDID",
   },
  },
  sp_api = "ultraschall",
 },
 [1100] = {
  fname = "GetKBIniScripts_ByActionCommandID",
  label = "US_GetKBIniScripts_ByActionCommandID",
  run = "in/out",
  desc = "Returns the indexnumber(s) of scripts by ActionCommandIDs within a reaper-kb.ini.\
Returns nil, if no such entry or file exists.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the ids of scripts with ActionCommandID, separated by a ,",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of indices found",
    name = "INDEXCOUNT",
   },
   [3] = {
    type = "TABLE",
    desc = "a table with all indices found",
    name = "INDICES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "path and filename of the reaper-kb.ini; nil, use current Reaper's reaper-kb.ini",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the ActionCommandID",
    name = "ACTIONCOMMANDID",
   },
  },
  sp_api = "ultraschall",
 },
 [1101] = {
  fname = "GetKBIniKeys_ByActionCommandID",
  label = "US_GetKBIniKeys_ByActionCommandID",
  run = "in/out",
  desc = "Returns the indexnumber(s) of keys by ActionCommandIDs within a reaper-kb.ini.\
Returns nil, if no such entry or file exists.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the ids of keys with ActionCommandID, separated by a ,",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of indices found",
    name = "INDEXCOUNT",
   },
   [3] = {
    type = "TABLE",
    desc = "a table with all indices found",
    name = "INDICES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "path and filename of the reaper-kb.ini; nil, use current Reaper's reaper-kb.ini",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the ActionCommandID",
    name = "ACTIONCOMMANDID",
   },
  },
  sp_api = "ultraschall",
 },
 [1102] = {
  fname = "SetKBIniActions",
  label = "US_SetKBIniActions",
  run = "in/out",
  desc = "Adds or sets(if it already exists) an \"ACT\"-action of a reaper-kb.ini.\
Returns true/false when adding or setting worked/didn't work, as well as the action-number within the reaper-kb.ini\
\
Needs a restart of Reaper for this change to take effect!",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if adding/setting worked, false if it didn't",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the entrynumber within the reaper-kb.ini of this action",
    name = "ACTIONNUMBER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the reaper-kb.ini",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "consolidation state of this action\
1 consolidate undo points, \
2 show in Actions-Menu, \
3 consolidate undo points AND show in Actions Menu; \
maybe 4 and higher?    ",
    name = "CONSOLIDATE",
   },
   [3] = {
    type = "INTEGER",
    desc = "section, in which this action is started\
0 - Main\
1 - action stays invisible but is kept, if Reaper rewrites the reaper-kb.ini. Menu-buttons with this action associated appear but don't work.\
100 - Main (alt recording)\
32060 - MIDI Editor\
32061 - MIDI Event List Editor\
32062 - MIDI Inline Editor\
32063 - Media Explorer",
    name = "SECTION",
   },
   [4] = {
    type = "STRING",
    desc = "the ActionCommandID of this action",
    name = "ACTIONCOMMANDID",
   },
   [5] = {
    type = "STRING",
    desc = "a description for this action",
    name = "DESCRIPTION",
   },
   [6] = {
    type = "STRING",
    desc = "the ActionCommandIDs for the actions, that are triggered by this action; unlike CommandID-numbers, every ActionCommandID must begin with _ ; will not be checked vor valid ones!",
    name = "ACTIONCOMMANDIDS",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true if an already existing entry shall be replaced, false if not",
    name = "REPLACE",
   },
  },
  sp_api = "ultraschall",
 },
 [1103] = {
  fname = "SetKBIniScripts",
  label = "US_SetKBIniScripts",
  run = "in/out",
  desc = "Adds or sets(if it already exists) an \"SCR\"-script of a reaper-kb.ini.\
Returns true/false when adding or setting worked/didn't work, as well as the script-number within the reaper-kb.ini\
\
Needs a restart of Reaper for this change to take effect!",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if adding/setting worked, false if it didn't",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the entrynumber within the reaper-kb.ini of this script",
    name = "SCRIPTNUMBER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the reaper-kb.ini",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "state of handling mulitple running scripts\
4 - Dialogwindow appears(Terminate, New Instance, Abort), if another instance of a given script is started, that's already running\
260 - always Terminate Instances, when an instance of the script is already running\
516 - always start a New Instance of the script already running",
    name = "TERMINATE_STATE",
   },
   [3] = {
    type = "INTEGER",
    desc = "section, in which this script is started\
0 - Main\
1 - action stays invisible but is kept, if Reaper rewrites the reaper-kb.ini. Menu-buttons with this action associated appear but don't work.\
100 - Main (alt recording)\
32060 - MIDI Editor\
32061 - MIDI Event List Editor\
32062 - MIDI Inline Editor\
32063 - Media Explorer",
    name = "SECTION",
   },
   [4] = {
    type = "STRING",
    desc = "the ActionCommandID of this action",
    name = "ACTIONCOMMANDID",
   },
   [5] = {
    type = "STRING",
    desc = "a description for this script",
    name = "DESCRIPTION",
   },
   [6] = {
    type = "STRING",
    desc = "the name of the ReaScript, like .lua or .eel or .py",
    name = "SCRIPTNAME",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true if an already existing entry shall be replaced, false if not",
    name = "REPLACE",
   },
  },
  sp_api = "ultraschall",
 },
 [1104] = {
  fname = "SetKBIniKeys",
  label = "US_SetKBIniKeys",
  run = "in/out",
  desc = "Adds or sets(if it already exists) a \"KEY\"-key of a reaper-kb.ini.\
Returns true/false when adding or setting worked/didn't work, as well as the keybinding-number within the reaper-kb.ini.\
Additional keybindings cannot share the same keytype_modifier_midichan, key_midinote and section at the same time, as every such keybind must be unique.\
\
For a detailed description in how KEY-entries work, refer to <a href=\"Reaper-Filetype-Descriptions.html#Reaper-kb.ini\">Reaper-Filetype-Descriptions.html#Reaper-kb.ini</a>.\
\
Does not support OSC-keybindings, as they are stored in OSC/reaper-osc-actions.ini !\
\
Needs a restart of Reaper for this change to take effect!\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if adding/setting worked, false if it didn't",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the entrynumber within the reaper-kb.ini of this script",
    name = "SCRIPTNUMBER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the reaper-kb.ini",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "Type of Keytype, modifier or midichannel\
For a detailed description in how keytype/modifier in KEY-entries work, refer to <a href=\"Reaper-Filetype-Descriptions.html#Reaper-kb.ini\">Reaper-Filetype-Descriptions.html#Reaper-kb.ini</a>.",
    name = "KEYTYPE_MODIFIER_MIDICHAN",
   },
   [3] = {
    type = "INTEGER",
    desc = "the key(like ASCII-Codes) or midinote. \
For a detailed description in how key/midinotes in KEY-entries work, refer to <a href=\"Reaper-Filetype-Descriptions.html#Reaper-kb.ini\">Reaper-Filetype-Descriptions.html#Reaper-kb.ini</a>.",
    name = "KEY_MIDINOTE",
   },
   [4] = {
    type = "STRING",
    desc = "the ActionCommandID associated with this shortcut.",
    name = "ACTIONCOMMANDID",
   },
   [5] = {
    type = "INTEGER",
    desc = "the section, in which this shortcut is used\
0 - Main\
100 - Main (alt recording)\
32060 - MIDI Editor\
32061 - MIDI Event List Editor\
32062 - MIDI Inline Editor\
32063 - Media Explorer",
    name = "SECTION",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true if an already existing entry shall be replaced, false if not",
    name = "REPLACE",
   },
  },
  sp_api = "ultraschall",
 },
 [1105] = {
  fname = "DeleteKBIniActions",
  label = "US_DeleteKBIniActions",
  run = "in/out",
  desc = "Deletes an \"ACT\"-action of a reaper-kb.ini.\
Returns true/false when deleting worked/didn't work.\
\
Needs a restart of Reaper for this change to take effect!",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if deleting worked, false if it didn't",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the reaper-kb.ini",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "indexnumber of the action within the reaper-kb.ini",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [1106] = {
  fname = "DeleteKBIniScripts",
  label = "US_DeleteKBIniScripts",
  run = "in/out",
  desc = "Deletes an \"SCR\"-script of a reaper-kb.ini.\
Returns true/false when deleting worked/didn't work.\
\
Needs a restart of Reaper for this change to take effect!",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if deleting worked, false if it didn't",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the reaper-kb.ini",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "indexnumber of the script within the reaper-kb.ini",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [1107] = {
  fname = "DeleteKBIniKeys",
  label = "US_DeleteKBIniKeys",
  run = "in/out",
  desc = "Deletes a \"KEY\"-keybinding of a reaper-kb.ini.\
Returns true/false when deleting worked/didn't work.\
\
Needs a restart of Reaper for this change to take effect!",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if deleting worked, false if it didn't",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the reaper-kb.ini",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "indexnumber of the keybinding within the reaper-kb.ini",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [1108] = {
  fname = "GetIniFileValue",
  label = "US_GetIniFileValue",
  run = "in/out",
  desc = "Gets a value from a key of an ini-file\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the length of the value in bytes",
    name = "LENGTH_OF_VALUE",
   },
   [2] = {
    type = "STRING",
    desc = "the value from the key-value-pair",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the section, in which the key-value-pair is located",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "the key whose value you want",
    name = "KEY",
   },
   [3] = {
    type = "STRING",
    desc = "an errorvalue, which will be shown, if key-value-store doesn't exist",
    name = "ERRVAL",
   },
   [4] = {
    type = "STRING",
    desc = "the ini-file, from which you want to retrieve the key-value-store",
    name = "INIFILE",
   },
  },
  sp_api = "ultraschall",
 },
 [1109] = {
  fname = "SetIniFileValue",
  label = "US_SetIniFileValue",
  run = "in/out",
  desc = "Sets a value of a key in an ini-file\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1, in case of an error; 1, in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the section, in which the key-value-pair is located",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "the key whose value you want to change",
    name = "KEY",
   },
   [3] = {
    type = "STRING",
    desc = "the new value for this key-value-pair",
    name = "VALUE",
   },
   [4] = {
    type = "STRING",
    desc = "the ini-file, in which you want to set the key-value-store",
    name = "INIFILE",
   },
  },
  sp_api = "ultraschall",
 },
 [1110] = {
  fname = "QueryKeyboardShortcutByKeyID",
  label = "US_QueryKeyboardShortcutByKeyID",
  run = "in/out",
  desc = "Returns the name of the shortcut of the modifier-key-values, as stored in the KEY-entries within the reaper-kb.ini\
\
That way, you can take a KEY-entry from the reaper-kb.ini, like\
 \
      KEY 1 65 _Ultraschall_Play_From_Editcursor_Position 0\
      \
Extract the modifier and key-values(1 and 65 in the example) and pass them to this function.\
You will get returned \"A\" as 1 and 65 is the keyboard-shortcut-code for the A-key.\
\
Only necessary for those, who try to read keyboard-shortcuts directly from the reaper-kb.ini to display them in some way.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the actual name of the shortcut, like \"A\" or \"F1\" or \"Ctrl+Alt+Shift+Win+PgUp\".",
    name = "SHORTCUTNAME",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the modifier value, which is the first one after KEY in a KEY-entry in the reaper-kb.ini-file",
    name = "MODIFIER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the key value, which is the second one after KEY in a KEY-entry in the reaper-kb.ini-file",
    name = "KEY",
   },
  },
  sp_api = "ultraschall",
 },
 [1111] = {
  fname = "CharacterCodes_ReverseLookup",
  label = "US_CharacterCodes_ReverseLookup",
  run = "in/out",
  desc = "returns the character-code+modifiers of a control-message-character as sent by reaper.StuffMIDIMessage with mode=1\
they will be returned as shown in the add shortcut-dialog, though the keyboard-modifiers are returned as extra returnvalues.\
\
optionally, you can select a multitude of keymaps for localization\
\
Note: as there are many different language-keymaps out there, I tried to use some common ones. That also means, that they might be different in detail to your used one.\
So the only keymap 100% reliable is the default-us-english one.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the character/midi-message associated with this character-code",
    name = "CHARACTER",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, this is the special modifier(byte1=255); false, regular character/midimessage\
the special modifier stores multizoom, multirotate, multiswipe, mousewheel, mediakbd-buttons",
    opt = {
     use = false,
    },
    name = "SPECIAL_MODIFIER",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, shift-key is needed; false, shift-key is not needed",
    opt = {
     use = false,
    },
    name = "SHIFT",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, ctrl-key is needed; false, ctrl-key is not needed",
    opt = {
     use = false,
    },
    name = "CONTROL",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, alt-key is needed; false, alt-key is not needed",
    opt = {
     use = false,
    },
    name = "ALT",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, win-key is needed; false, win-key is not needed",
    opt = {
     use = false,
    },
    name = "WIN",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, opt-key is needed; false, opt-key is not needed - (mac only)",
    opt = {
     use = false,
    },
    name = "OPT",
   },
   [8] = {
    type = "BOOLEAN",
    desc = "true, cmd-key is needed; false, cmd-key is not needed - (mac only)",
    opt = {
     use = false,
    },
    name = "CMD",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the first byte of the StuffMIDIMessage, usually stores modifiers",
    name = "BYTE1",
   },
   [2] = {
    type = "INTEGER",
    desc = "the first byte of the StuffMIDIMessage, usually stores character-codes",
    name = "BYTE2",
   },
   [3] = {
    type = "INTEGER",
    desc = "the first byte of the StuffMIDIMessage, usually stores additional information",
    name = "BYTE3",
   },
   [4] = {
    type = "INTEGER",
    desc = "the languagekeymap used. The following list includes the specific keymap supported\
so they might differ in details. I used the ones supported by Windows 7\
nil and 1, englisch(usa) default\
2, german\
3, arabian(saudi arabia)\
4, catalan(spain)\
5, greek(greece)\
6, french(france)\
7, hebrew(israel)\
8, icelandic(iceland)\
9, italian(italy)\
10, japanese(japan)\
11, russian(russian federation)\
12, turkish(turkey)\
13, indonesian(indonesia)\
14, hindi(india)\
15, punjabi(india)\
16, chinese_simplified(china)\
17, portuguese(portugal)\
18, spanish(spain)",
    opt = {
     use = false,
    },
    name = "LANG",
   },
  },
  sp_api = "ultraschall",
 },
 [1112] = {
  fname = "CharacterCodes_ReverseLookup_KBIni",
  label = "US_CharacterCodes_ReverseLookup_KBIni",
  run = "in/out",
  desc = "returns the character-code+modifiers of a control-message-character as stored in the KEY-entries in the reaper-kb.ini\
they will be returned as shown in the add shortcut-dialog, though the keyboard-modifiers are returned as extra returnvalues.\
\
optionally, you can select a multitude of keymaps for localization\
\
Note: as there are many different language-keymaps out there, I tried to use some common ones. That also means, that they might be different in detail to your used one.\
So the only keymap 100% reliable is the default-us-english one.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the character/midi-message associated with this KEY-entry-character-code",
    name = "CHARACTER",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, this is the special modifier(byte1=255); false, regular character/midimessage\
the special modifier stores multizoom, multirotate, multiswipe, mousewheel, mediakbd-buttons",
    opt = {
     use = false,
    },
    name = "SPECIAL_MODIFIER",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, shift-key is needed; false, shift-key is not needed",
    opt = {
     use = false,
    },
    name = "SHIFT",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, ctrl-key is needed; false, ctrl-key is not needed",
    opt = {
     use = false,
    },
    name = "CONTROL",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, alt-key is needed; false, alt-key is not needed",
    opt = {
     use = false,
    },
    name = "ALT",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, win-key is needed; false, win-key is not needed",
    opt = {
     use = false,
    },
    name = "WIN",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, opt-key is needed; false, opt-key is not needed - (mac only)",
    opt = {
     use = false,
    },
    name = "OPT",
   },
   [8] = {
    type = "BOOLEAN",
    desc = "true, cmd-key is needed; false, cmd-key is not needed - (mac only)",
    opt = {
     use = false,
    },
    name = "CMD",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the first byte of the kb.ini-KEY-entry, usually stores modifiers",
    name = "BYTE1",
   },
   [2] = {
    type = "INTEGER",
    desc = "the first byte of the kb.ini-KEY-entry, usually stores character-codes",
    name = "BYTE2",
   },
   [3] = {
    type = "INTEGER",
    desc = "the languagekeymap used. The following list includes the specific keymap supported\
so they might differ in details. I used the ones supported by Windows 7\
nil and 1, englisch(usa) default\
2, german\
3, arabian(saudi arabia)\
4, catalan(spain)\
5, greek(greece)\
6, french(france)\
7, hebrew(israel)\
8, icelandic(iceland)\
9, italian(italy)\
10, japanese(japan)\
11, russian(russian federation)\
12, turkish(turkey)\
13, indonesian(indonesia)\
14, hindi(india)\
15, punjabi(india)\
16, chinese_simplified(china)\
17, portuguese(portugal)\
18, spanish(spain)",
    opt = {
     use = false,
    },
    name = "LANG",
   },
  },
  sp_api = "ultraschall",
 },
 [1113] = {
  fname = "KBIniGetAllShortcuts",
  label = "US_KBIniGetAllShortcuts",
  run = "in/out",
  desc = "returns all shortcuts currently set in the current Reaper-installation(as stored in reaper-kb.ini) as a handy table.\
\
The table is of the following format:\
  KeyTable[shortcut_idx][\"Code1\"] - the first value in a KEY-entry\
  KeyTable[shortcut_idx][\"Code2\"] - the second value in a KEY-code\
  KeyTable[shortcut_idx][\"ActionCommandID\"] - the action-command id or command-id-number\
  KeyTable[shortcut_idx][\"Section\"] - the section: 0 - Main, 100 - Main (alt recording), 32060 - MIDI Editor, 32061 - MIDI Event List Editor, 32062 - MIDI Inline Editor, 32063 - Media Explorer\
  KeyTable[shortcut_idx][\"ShortcutName\"] - the keyname as shown in the Add shortcut-dialog; localization depending on language-parameter\
  KeyTable[shortcut_idx][\"Modifier_SpecialModifier\"] - true, the special modifier(for mediakbd, mousewheel, multitouch/zoom/swipe); false, midi or regular key\
  KeyTable[shortcut_idx][\"Modifier_Shift\"] - true, shift is needed; false, shift is not needed as modifier\
  KeyTable[shortcut_idx][\"Modifier_Control\"] - true, control is needed; false, control is not needed as modifier\
  KeyTable[shortcut_idx][\"Modifier_Alt\"] - true, alt is needed; false, alt is not needed as modifier\
  KeyTable[shortcut_idx][\"Modifier_Win\"] - true, win is needed; false, win is not needed as modifier(for windows)\
  KeyTable[shortcut_idx][\"Modifier_Opt\"] - true, opt is needed; false, opt is not needed as modifier(for mac)\
  KeyTable[shortcut_idx][\"Modifier_Cmd\"] - true, cmd is needed; false, cmd is not needed as modifier(for mac)\
  KeyTable[shortcut_idx][\"Global_Scope\"] - is this shortcut global; -1, no; 1, global; 101, global+textfields\
  KeyTable[shortcut_idx][\"Global_Section\"] - the section in which this shortcut is global; 102(main), 103(main alt.)\
\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found shortcuts",
    name = "NUMBER_OF_SHORTCUTS",
   },
   [2] = {
    type = "TABLE",
    desc = "a nice and handy table of all shortcut-attributes",
    name = "SHORTCUT_ATTRIBUTES",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, will only return the custom shortcuts; false or nil, returns all shortcuts, including factory default ones(usually not stored in kb.ini)",
    opt = {
     use = false,
    },
    name = "EXCLUDE_FACTORY_DEFAULT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the languagekeymap used. The following list includes the specific keymap supported\
so they might differ in details. I used the ones supported by Windows 7\
nil and 1, englisch(usa) default\
2, german\
3, arabian(saudi arabia)\
4, catalan(spain)\
5, greek(greece)\
6, french(france)\
7, hebrew(israel)\
8, icelandic(iceland)\
9, italian(italy)\
10, japanese(japan)\
11, russian(russian federation)\
12, turkish(turkey)\
13, indonesian(indonesia)\
14, hindi(india)\
15, punjabi(india)\
16, chinese_simplified(china)\
17, portuguese(portugal)\
18, spanish(spain)",
    opt = {
     use = false,
    },
    name = "LANG",
   },
  },
  sp_api = "ultraschall",
 },
 [1114] = {
  fname = "GetActionCommandIDByFilename",
  label = "US_GetActionCommandIDByFilename",
  run = "in/out",
  desc = "Returns the action-command-id of a script by its filename, as registered in the reaper-kb.ini.\
\
Important: scripts in subfolders of Scripts must be written with their full path. \\ and / are supported as folder-separators.\
Setting case_sensitive=false will return the action-command-id of the first script matching the filename, when you don't know the exact case-sensitivity.\
Keep in mind, that on Linux, camelcase can mean different filenames. So Prototype.lua and prototype.lua are different files on Linux, when they exist together. \
Keep that in mind or you risk finding the wrong ActionCommandID.\
\
Returns nil in case of an error ",
  out = {
   [1] = {
    type = "STRING",
    desc = "the actioncommand-id of the scriptfile; \"\", if no such file is installed; nil, in case of an error",
    name = "ACTIONCOMMANDID",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename(plus path, if needed) of the script, whose ActionCommandID you want to have.",
    name = "SEARCHFILENAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the section, in which the file is stored\
0, Main, \
100, Main (alt recording), \
32060, MIDI Editor, \
32061, MIDI Event List Editor, \
32062, MIDI Inline Editor,\
32063, Media Explorer.",
    name = "SECTION",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true or nil, search for filename on a case-sensitive base; false, case-sensitivity in filename is ignored",
    opt = {
     use = false,
    },
    name = "CASE_SENSITIVE",
   },
  },
  sp_api = "ultraschall",
 },
 [1115] = {
  fname = "ReadFullFile",
  label = "US_ReadFullFile",
  run = "in/out",
  desc = "Return contents of filename_with_path.\
\
Returns nil in case of an error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the contents of the whole file.",
    name = "CONTENTS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of bytes of the file",
    name = "LENGTH_OF_FILE",
   },
   [3] = {
    type = "INTEGER",
    desc = "number of lines in file (-1 if parameter binary is set to true)",
    name = "NUMBER_OF_LINES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename of the file to be read",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true if the file shall be read as a binary file; false if read as ASCII. Default is ASCII.",
    name = "BINARY",
   },
  },
  sp_api = "ultraschall",
 },
 [1116] = {
  fname = "ReadValueFromFile",
  label = "US_ReadValueFromFile",
  run = "in/out",
  desc = "Return contents of filename_with_path. \
\
If \"value\" is given, it will return all lines, containing the value in the file \"filename_with_path\". \
The second line-numbers return-value is very valuable when giving a \"value\". \"Value\" is not case-sensitive.\
The value can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.\
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc",
  out = {
   [1] = {
    type = "STRING",
    desc = "the contents of the file, or the lines that contain parameter value in it, separated by a newline",
    name = "CONTENTS",
   },
   [2] = {
    type = "STRING",
    desc = "a string, that contains the linenumbers returned as a , separated csv-string",
    name = "LINENUMBERS",
   },
   [3] = {
    type = "INTEGER",
    desc = "the total number of lines in the file",
    name = "NUMBEROFLINES_IN_FILE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the number of found lines",
    name = "NUMBER_OF_FOUNDLINES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename of the file to be read",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the value to look in the file for. Not case-sensitive.",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1117] = {
  fname = "ReadLinerangeFromFile",
  label = "US_ReadLinerangeFromFile",
  run = "in/out",
  desc = "Return contents of filename_with_path, from firstlinenumber to lastlinenumber. Counting of linenumbers starts with 1 for the first line.\
The returned string contains all requested lines, separated by a newline.\
\
Returns nil, if the linenumbers are invalid.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the contents the lines of the file, that you requested",
    name = "CONTENTS",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if the number of lines are returned, as requested; false if fewer lines are returned",
    name = "CORRECTNUMBEROFLINES",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of read lines",
    name = "NUMBER_OF_LINES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename of the file to be read",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the first linenumber to be returned. First line in the file begins with 1!",
    name = "FIRSTLINENUMBER",
   },
   [3] = {
    type = "INTEGER",
    desc = "the last linenumber to be returned; -1, for the whole file",
    name = "LASTLINENUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1118] = {
  fname = "MakeCopyOfFile",
  label = "US_MakeCopyOfFile",
  run = "in/out",
  desc = "Copies input_filename_with_path to output_filename_with_path. \
Only textfiles! For binary-files use MakeCopyOfFile_Binary() instead!\
\
Returns true, if it worked, false if it didn't.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if copy worked, false if it didn't.",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename of the file to copy",
    name = "INPUT_FILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "filename of the copied file to be created.",
    name = "OUTPUT_FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1119] = {
  fname = "MakeCopyOfFile_Binary",
  label = "US_MakeCopyOfFile_Binary",
  run = "in/out",
  desc = "Copies input_filename_with_path to output_filename_with_path as binary-file.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "returns true, if copy worked; false if it didn't",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename of the file to copy",
    name = "INPUT_FILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "filename of the copied file, that shall be created",
    name = "OUTPUT_FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1120] = {
  fname = "ReadBinaryFileUntilPattern",
  label = "US_ReadBinaryFileUntilPattern",
  run = "in/out",
  desc = "Returns a binary file, up until a pattern. The pattern is not case-sensitive.\
\
Pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.\
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the length of the returned data",
    name = "LENGTH",
   },
   [2] = {
    type = "STRING",
    desc = "the content of the file, that has been read until pattern",
    name = "CONTENT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename of the file to be read",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a pattern to search for. Case-sensitive.",
    name = "PATTERN",
   },
  },
  sp_api = "ultraschall",
 },
 [1121] = {
  fname = "ReadBinaryFileFromPattern",
  label = "US_ReadBinaryFileFromPattern",
  run = "in/out",
  desc = "Returns a binary file, from pattern onwards. The pattern is not case-sensitive.\
\
The pattern can also contain patterns for pattern matching. Refer the LUA-docs for pattern matching.\
i.e. characters like ^$()%.[]*+-? must be escaped with a %, means: %[%]%(%) etc\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the length of the returned data",
    name = "LENGTH",
   },
   [2] = {
    type = "STRING",
    desc = "the content of the file, that has been read from pattern to the end",
    name = "CONTENT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename of the file to be read",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a pattern to search for. Case-sensitive.",
    name = "PATTERN",
   },
  },
  sp_api = "ultraschall",
 },
 [1122] = {
  fname = "CountLinesInFile",
  label = "US_CountLinesInFile",
  run = "in/out",
  desc = "Counts lines in a textfile. In binary files, the number of lines may be weird and unexpected!\
Returns -1, if no such file exists.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of lines in a textfile; -1 in case of error",
    name = "LINESINFILE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename of the file to be read",
    name = "FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1123] = {
  fname = "ReadFileAsLines_Array",
  label = "US_ReadFileAsLines_Array",
  run = "in/out",
  desc = "Return contents of filename_with_path, from firstlinenumber to lastlinenumber as an array. Counting of linenumbers starts with 1 for the first line.\
The returned array contains all requested lines, which each entry holding one returned line.\
\
Returns nil, if the linenumbers are invalid.",
  out = {
   [1] = {
    type = "ARRAY",
    desc = "the contents the lines of the file, that you requested as an array, in which each entry hold one line of the file",
    name = "CONTENTS",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if the number of lines are returned, as you requested; false if fewer lines are returned",
    name = "CORRECTNUMBEROFLINES",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of lines returned",
    name = "NUMBER_OF_LINES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename of the file to be read",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the first linenumber to be returned. First line in the file begins with 1!",
    name = "FIRSTLINENUMBER",
   },
   [3] = {
    type = "INTEGER",
    desc = "the last linenumber to be returned; -1, read all lines in the file",
    name = "LASTLINENUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1124] = {
  fname = "ReadBinaryFile_Offset",
  label = "US_ReadBinaryFile_Offset",
  run = "in/out",
  desc = "Returns the contents of a binary file from startoffset until startoffset+numberofbytes.\
\
When setting startoffset to a negative value, it will read from the end of the file, means: \
-100 will start -100 characters before the end of the file and numberofbytes will read from that point on    \
\
Returns -1, if file can not be opened.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the length of the returned part of the file, might be shorter than requested, if file ends before",
    name = "LENGTH",
   },
   [2] = {
    type = "STRING",
    desc = "the content of the file, that has been read",
    name = "CONTENT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename of the file to be read",
    name = "INPUT_FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the offset, at where to begin the fileread. 0 for the beginning of the file; negative values set offset from the end of the file",
    name = "STARTOFFSET",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of bytes to read. -1 for until the end of the file. If there are fewer bytes than requested, the returned string will be shorter.",
    name = "NUMBEROFBYTES",
   },
  },
  sp_api = "ultraschall",
 },
 [1125] = {
  fname = "GetLengthOfFile",
  label = "US_GetLengthOfFile",
  run = "in/out",
  desc = "Returns the length of the file filename_with_path in bytes.\
Will return -1, if no such file exists.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the length of the file in bytes. -1 in case of error",
    name = "LENGTH_OF_FILE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename to write the value to",
    name = "FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1126] = {
  fname = "CountDirectoriesAndFilesInPath",
  label = "US_CountDirectoriesAndFilesInPath",
  run = "in/out",
  desc = "returns the number of files and directories in path\
\
returns -1, in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of files found in path",
    name = "FILECOUNT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of directories found in path",
    name = "DIRCOUNT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the path to count the files and directories from",
    name = "PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1127] = {
  fname = "GetAllFilenamesInPath",
  label = "US_GetAllFilenamesInPath",
  run = "in/out",
  desc = "returns the number of files and the filenames in path\
\
optionally allows you to filter for certain filenames\
\
returns -1, in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of files found in path",
    name = "FILECOUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the filenames found in path",
    name = "FILES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the path to get the filenames from",
    name = "PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a filter, that allows you to just get filenames of a certain pattern\
follows Lua's pattern-matching pattern!",
    opt = {
     use = false,
    },
    name = "FILTER",
   },
  },
  sp_api = "ultraschall",
 },
 [1128] = {
  fname = "GetAllDirectoriesInPath",
  label = "US_GetAllDirectoriesInPath",
  run = "in/out",
  desc = "returns the number of directories and the directorynames in path\
\
returns -1, in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of directories found in path",
    name = "FILECOUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the directories found in path",
    name = "FILES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the path to get the directories from",
    name = "PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a filter, that allows you to just get directory-names of a certain pattern\
follows Lua's pattern-matching pattern!",
    opt = {
     use = false,
    },
    name = "FILTER",
   },
  },
  sp_api = "ultraschall",
 },
 [1129] = {
  fname = "CheckForValidFileFormats",
  label = "US_CheckForValidFileFormats",
  run = "in/out",
  desc = "Returns the fileformat of a Reaper-supported-file, images, audios(opus and m4a missing, though!), and video(mp4-video missing, though!).\
Note: Checks the file itself and does not check for correct file-extension. Reaper needs the correct file-extension or it can't read an otherwise valid imagefile.\
      For example: if you want to import a GIF, renamed to filename.JPG, Reaper will not be able to read it. Only when the extension is the same as the file itself(filename.GIF).\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the format of the file; JPG, PNG, GIF, LCF, ICO, WAV, AIFF, ASF/WMA/WMV, MP3, MP3 -ID3TAG, FLAC, MKV/MKA/MKS/MK3D/WEBM, AVI, RPP_PROJECT, unknown",
    name = "FILEFORMAT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if importing of the fileformat is supported by Reaper; false, if not",
    name = "SUPPORTED_BY_REAPER",
   },
   [3] = {
    type = "STRING",
    desc = "the type of the media; Image, Audio, Audio/Video, Video, Reaper",
    name = "MEDIATYPE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the file to check for it's image-fileformat",
    name = "FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1130] = {
  fname = "DirectoryExists",
  label = "US_DirectoryExists",
  run = "in/out",
  desc = "Checks, if a directory exists in path.\
\
On Linux: path and directory are case-sensitive!\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, directory exists; false, directory does not exist",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the path, in which to look for the existence of parameter directory",
    name = "PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the directory to check for in path",
    name = "DIRECTORY",
   },
  },
  sp_api = "ultraschall",
 },
 [1131] = {
  fname = "OnlyFilesOfCertainType",
  label = "US_OnlyFilesOfCertainType",
  run = "in/out",
  desc = "Returns the filenames_with_path from a filearray, that are of a certain filetype\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of files that contain the right filetype",
    name = "FOUNDFILECOUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all the files that contain the right filetype",
    name = "FOUNDFILEARRAY",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array with files to check for; index is 1-based",
    name = "FILEARRAY",
   },
   [2] = {
    type = "STRING",
    desc = "the format of the file; JPG, PNG, GIF, LCF, ICO, WAV, AIFF, ASF/WMA/WMV, MP3, MP3 -ID3TAG, FLAC, MKV/MKA/MKS/MK3D/WEBM, AVI, RPP_PROJECT, unknown",
    name = "FILEFORMAT",
   },
  },
  sp_api = "ultraschall",
 },
 [1132] = {
  fname = "GetReaperWorkDir",
  label = "US_GetReaperWorkDir",
  run = "in/out",
  desc = "returns the current workdir, which is the directory. If you create a file without giving a path, this file will be created in this work-dir.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the current workdir of Reaper",
    name = "CURRENT_WORKDIR",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1133] = {
  fname = "DirectoryExists2",
  label = "US_DirectoryExists2",
  run = "in/out",
  desc = "returns, if Path is an existing path.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if path exists; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the path to check for",
    name = "PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1134] = {
  fname = "SetReaperWorkDir",
  label = "US_SetReaperWorkDir",
  run = "in/out",
  desc = "sets a new current working directory for Reaper. This requires a restart of Reaper to take effect, due API-limitations!\
                        \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if path could be set; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the path to set as new current working directory",
    name = "PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1135] = {
  fname = "GetPath",
  label = "US_GetPath",
  run = "in/out",
  desc = "returns the path of a filename-string\
\
returns \"\", \"\" in case of error ",
  out = {
   [1] = {
    type = "STRING",
    desc = "the path as a string",
    name = "PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the filename, without the path",
    name = "FILENAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the path with filename you want to process",
    name = "STR",
   },
   [2] = {
    type = "STRING",
    desc = "a separator, with which the function knows, how to separate filename from path; nil to use the last useful separator in the string, which is either / or \\\\",
    name = "SEP",
   },
  },
  sp_api = "ultraschall",
 },
 [1136] = {
  fname = "CreateValidTempFile",
  label = "US_CreateValidTempFile",
  run = "in/out",
  desc = "Tries to determine a valid temporary filename. Will check filename_with_path with an included number between 0 and 2147483648 to create such a filename.\
You can also add your own suffix to the filename.\
\
The pattern is: filename_with_path$Suffix~$number.ext (when retainextension is set to true!)\
\
If you wish, you can also create this temporary-file as an empty file.\
\
The path of the tempfile is always the same as the original file.\
\
Returns nil in case of failure.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the valid temporary filename found",
    name = "TEMPFILENAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the original filename",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if you want to create that temporary file as an empty file; false, just return the filename",
    name = "CREATE",
   },
   [3] = {
    type = "STRING",
    desc = "if you want to alter the temporary filename with an additional suffix, use this parameter",
    name = "SUFFIX",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, keep the extension(if existing) at the end of the tempfile; false, just add the suffix~number at the end.",
    name = "RETAINEXTENSION",
   },
  },
  sp_api = "ultraschall",
 },
 [1137] = {
  fname = "WriteValueToFile",
  label = "US_WriteValueToFile",
  run = "in/out",
  desc = "Writes value to filename_with_path. Will replace any previous content of the file if append is set to false. Returns -1 in case of failure, 1 in case of success.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of failure, 1 in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename with it's path",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the value to export, can be a long string that includes newlines and stuff. nil is not allowed!",
    name = "VALUE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true or nil, it will store the value as binary-file; false, will store it as textstring",
    name = "BINARYMODE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, add the value to the end of the file; false or nil, write value to file and erase all previous data in the file",
    name = "APPEND",
   },
  },
  sp_api = "ultraschall",
 },
 [1138] = {
  fname = "WriteValueToFile_Insert",
  label = "US_WriteValueToFile_Insert",
  run = "in/out",
  desc = "Inserts value into a file at linenumber. All lines, up to linenumber-1 come before value, all lines at linenumber to the end of the file will come after value.\
Will return -1, if no such line exists.\
\
Note: non-binary-files only!",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "1, in case of success, -1 in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename to write the value to",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the linenumber, at where to insert the value into the file",
    name = "LINENUMBER",
   },
   [3] = {
    type = "STRING",
    desc = "the value to be inserted into the file",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1139] = {
  fname = "WriteValueToFile_Replace",
  label = "US_WriteValueToFile_Replace",
  run = "in/out",
  desc = "Replaces the linenumbers startlinenumber to endlinenumber in a file with value. All lines, up to startlinenumber-1 come before value, all lines at endlinenumber+1 to the end of the file will come after value.\
Will return -1, if no such lines exists.\
\
Note: non-binary-files only!",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "1, in case of success, -1 in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename to write the value to",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the first linenumber, to be replaced with value in the file",
    name = "STARTLINENUMBER",
   },
   [3] = {
    type = "INTEGER",
    desc = "the last linenumber, to be replaced with value in the file",
    name = "ENDLINENUMBER",
   },
   [4] = {
    type = "STRING",
    desc = "the value to be inserted into the file",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1140] = {
  fname = "WriteValueToFile_InsertBinary",
  label = "US_WriteValueToFile_InsertBinary",
  run = "in/out",
  desc = "Inserts value into a file at byteposition. All bytes, up to byteposition-1 come before value, all bytes at byteposition to the end of the file will come after value.\
Will return -1, if no such line exists.\
\
Note: good for binary files",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "1, in case of success, -1 in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename to write the value to",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the byteposition, at where to insert the value into the file",
    name = "BYTEPOSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the value to be inserted into the file",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1141] = {
  fname = "WriteValueToFile_ReplaceBinary",
  label = "US_WriteValueToFile_ReplaceBinary",
  run = "in/out",
  desc = "Replaces content in the file from startbyteposition to endbyteposition-1 with value. All bytes, up to startbyteposition-1 come before value, all bytes from (and including)endbyteposition to the end of the file will come after value.\
Will return -1, if no such line exists.\
\
Note: good for binary files",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "1, in case of success, -1 in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename to write the value to",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the first byte in the file to be replaced, starting with 1, if you want to replace at the beginning of the file. Everything before startposition will be kept.",
    name = "STARTBYTEPOSITION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the first byte after the replacement. Everything from endbyteposition to the end of the file will be kept.",
    name = "ENDBYTEPOSITION",
   },
   [4] = {
    type = "STRING",
    desc = "the value to be inserted into the file",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1142] = {
  fname = "GetAllRecursiveFilesAndSubdirectories",
  label = "US_GetAllRecursiveFilesAndSubdirectories",
  run = "in/out",
  desc = "Returns all subdirectories and files within a given path.\
\
Might take some time with many folders/files.\
\
Optionally, you can filter for specific keywords(follows Lua's pattern-matching)\
\
Returns -1 in case of an error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of directories found; -1, in case of an error",
    name = "FOUND_DIRS",
   },
   [2] = {
    type = "ARRAY",
    desc = "the full path to the found directories as an array",
    name = "DIRS_ARRAY",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of files found",
    name = "FOUND_FILES",
   },
   [4] = {
    type = "ARRAY",
    desc = "the full path to the found files as an array",
    name = "FILES_ARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the path from where to retrieve the files and subdirectories",
    name = "PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a matching-string, that omits all folders, that don't match this string; default is \"\"\
follows Lua's pattern-matching!",
    opt = {
     use = false,
    },
    name = "DIR_FILTER",
   },
   [3] = {
    type = "STRING",
    desc = "true, filter-pattern for dir is case-sensitive(default); false, filter-pattern for dir isn't case-sensitive",
    opt = {
     use = false,
    },
    name = "DIR_CASE_SENSITIVE",
   },
   [4] = {
    type = "STRING",
    desc = "a matching-string, that omits all files, that don't match this string; default is \"\" \
follows Lua's pattern-matching!",
    opt = {
     use = false,
    },
    name = "FILE_FILTER",
   },
   [5] = {
    type = "STRING",
    desc = "true, filter-pattern for file is case-sensitive(default); false, filter-pattern for file isn't case-sensitive ",
    opt = {
     use = false,
    },
    name = "FILE_CASE_SENSITIVE",
   },
  },
  sp_api = "ultraschall",
 },
 [1143] = {
  fname = "SaveSubtitles_SRT",
  label = "US_SaveSubtitles_SRT",
  run = "in/out",
  desc = "saves the subtitles from the subtitle-table.\
\
The subtitles-table is expected to be of the following format:\
\
    subtitle_table[subtitle_index][\"start\"]   = starttime in seconds\
    subtitle_table[subtitle_index][\"end\"]     = endtime in seconds\
    subtitle_table[subtitle_index][\"caption\"] = the caption, which shall be shown from start to end-time\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the guid of the marker/region of the marker with a specific index",
    name = "GUID",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the subtitle-file, into which you want to store the subtitles",
    name = "SUBTITLE_FILENAME_WITH_PATH",
   },
   [2] = {
    type = "TABLE",
    desc = "the subtitle-table, which holds all captions and the start- and endtimes of displaying the caption",
    name = "TABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [1144] = {
  fname = "ReadSubtitles_SRT",
  label = "US_ReadSubtitles_SRT",
  run = "in/out",
  desc = "parses an srt-subtitle-file and returns its contents as table\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of captions in the file",
    name = "CAPTIONS_COUNTER",
   },
   [2] = {
    type = "TABLE",
    desc = "the Captions as a table of the format:\
   Captions[index][\"start\"]= the starttime of this caption in seconds\
   Captions[index][\"end\"]= the endtime of this caption in seconds\
   Captions[index][\"caption\"]= the caption itself",
    name = "CAPTIONS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename with path of the subrip srt-file",
    name = "FILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1145] = {
  fname = "MoveFileOrFolder",
  label = "US_MoveFileOrFolder",
  run = "in/out",
  desc = "Moves a file or folder from oldpath to newpath.\
\
returns false in case of an error ",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, moving was successful; false, moving was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the folder- or filename, which you want to move",
    name = "FILE_FOLDERNAME",
   },
   [2] = {
    type = "STRING",
    desc = "the old path, in which the file or folder is located",
    name = "OLDPATH",
   },
   [3] = {
    type = "STRING",
    desc = "the new path, into which the file or folder shall be moved",
    name = "NEWPATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1146] = {
  fname = "CopyFile_StartCopying",
  label = "US_CopyFile_StartCopying",
  run = "in/out",
  desc = "Starts copying the files added to the background-copy-queue.\
\
You can run this function multiple times, to have multiple background-copy-instances, depending on how fast the copying shall be and how much ressources it should eat.\
Each instance copies the amount of data set with [CopyFile\\_SetBufferSize](#CopyFile_SetBufferSize), so if the buffersize is set to 1048576(1 MB) then each instance will copy 1 MB per defer-cycle.\
That way you can balance the amount of data copied each defer-cycle with the amount of time each defer-cycle uses Reaper's processing-time.\
So having multiple instances with smaller buffer-sizes can prevent lagging of the gui of Reaper.\
    \
You can have up to 30 instances running in the background at the same time.\
\
Add files with [CopyFile\\_AddFileToQueue](#CopyFile_AddFileToQueue)\
\
If all files are copied, the instances will be stopped completely, so using [CopyFile\\_GetCurrentlyRunningCopyInstances](#CopyFile_GetCurrentlyRunningCopyInstances) returning 0 can tell you, if the copying is finished already.\
\
Will return -1, if all possible 30 instances are started already.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the copying-instance started",
    name = "INSTANCE_NUMBER",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1147] = {
  fname = "CopyFile_IsCurrentlyCopying",
  label = "US_CopyFile_IsCurrentlyCopying",
  run = "in/out",
  desc = "Returns, if the any copying-instance is (still) currently copying files.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, currently copying files; false, no file currently copying",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1148] = {
  fname = "CopyFile_GetCurrentlyRunningCopyInstances",
  label = "US_CopyFile_GetCurrentlyRunningCopyInstances",
  run = "in/out",
  desc = "Returns the number of copying-instances currently started by [CopyFile\\_StartCopying](#CopyFile_StartCopying)",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of copying instances started",
    name = "NUMBER_OF_INSTANCES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1149] = {
  fname = "CopyFile_GetCurrentlyCopiedFile",
  label = "US_CopyFile_GetCurrentlyCopiedFile",
  run = "in/out",
  desc = "Returns the information about the file currently copied",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of files still in the copying-queue",
    name = "NUMBER_OF_REMAINING_FILES",
   },
   [2] = {
    type = "STRING",
    desc = "the filename with path of the file currently copied",
    name = "FILENAME",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of bytes not copied yet of the current file",
    name = "REMAINING_BYTES_TO_COPY",
   },
   [4] = {
    type = "INTEGER",
    desc = "the percentage of the already copied part of the file",
    name = "PERCENTAGE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1150] = {
  fname = "CopyFile_SetBufferSize",
  label = "US_CopyFile_SetBufferSize",
  run = "in/out",
  desc = "Sets the buffer-size of the background-copy-instances in bytes.\
\
That means, each copying-instance will copy this amount of data per defer-cycle.\
\
Returns false in case of an error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting this was successful; false, setting this was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the amount of bytes of the buffer-size",
    name = "BUFFERSIZE",
   },
  },
  sp_api = "ultraschall",
 },
 [1151] = {
  fname = "CopyFile_GetBufferSize",
  label = "US_CopyFile_GetBufferSize",
  run = "in/out",
  desc = "Returns the current buffer-size in bytes.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the buffer-size for the copying instances in bytes",
    name = "BUFFER_SIZE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1152] = {
  fname = "CopyFile_AddFileToQueue",
  label = "US_CopyFile_AddFileToQueue",
  run = "in/out",
  desc = "Adds a new file to the copy-queue. \
\
If you try to copy a file into a subdirectory, which does not exist yet, this subdirectory will be created.  \
If the background-copying is still active(the copying-queue not finished with copying) at the time of adding, the file will be copied right away.  \
To check, whether you need to start if there are still running copying-instances in the background, use [CopyFile\\_IsCurrentlyCopying](#CopyFile_IsCurrentlyCopying).\
\
The returned value in current\\_copyqueue\\_position allows you get the current copying status and possible error-messages using [CopyFile\\_GetCopiedStatus](#CopyFile_GetCopiedStatus)\
\
returns -1 in case of an error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the position in the copy-queue",
    name = "CURRENT_COPYQUEUE_POSITION",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the file to be copied, including its path",
    name = "FILENAME",
   },
   [2] = {
    type = "STRING",
    desc = "the targetfile, to which the file shall be copied including its path",
    name = "TARGETFILENAME",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, overwrite an already existing file; false, don't overwrite an already existing file",
    name = "OVERWRITE",
   },
  },
  sp_api = "ultraschall",
 },
 [1153] = {
  fname = "CopyFile_GetCopiedStatus",
  label = "US_CopyFile_GetCopiedStatus",
  run = "in/out",
  desc = "Returns the copystatus of a file in the copy-queue\
\
Will return -1 in case of an error.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the filename of the file to be copied",
    name = "FILENAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, files has been processed; false, the file has not been processed, yet",
    name = "ALREADY_PROCESSED",
   },
   [3] = {
    type = "STRING",
    desc = "the error-message, when copying didn't work; \"\" if no error occurred",
    name = "ERROR_MESSAGE",
   },
   [4] = {
    type = "STRING",
    desc = "an error-code for the error happening",
    name = "ERROR_CODE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the file within the copying-queue",
    name = "FILEINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1154] = {
  fname = "CopyFile_FlushCopiedFiles",
  label = "US_CopyFile_FlushCopiedFiles",
  run = "in/out",
  desc = "Flushes the queue for the already copied files.\
\
This invalidates the files-index given by [CopyFile\\_AddFileToQueue](#CopyFile_AddFileToQueue)!",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1155] = {
  fname = "CopyFile_StopCopying",
  label = "US_CopyFile_StopCopying",
  run = "in/out",
  desc = "Stops copying of all files immediately. If the currently file isn't finished copying yet, it will remain incomplete.\
\
Returns the last file processed, so you can check, if the file has been copied properly.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the last filename that has been processed",
    name = "FILENAME",
   },
   [2] = {
    type = "STRING",
    desc = "the target of the last filename, that has been processed",
    name = "FILENAME_TARGET",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1156] = {
  fname = "CopyFile_Pause",
  label = "US_CopyFile_Pause",
  run = "in/out",
  desc = "Pauses the copying of the files in the copying-queue.\
\
Will return false in case of an error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, pausing was successful; false, pausing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "true, pause the copying; false, go on with copying of the files",
    name = "TOOGLE",
   },
  },
  sp_api = "ultraschall",
 },
 [1157] = {
  fname = "CopyFile_GetPausedState",
  label = "US_CopyFile_GetPausedState",
  run = "in/out",
  desc = "Returns the current paused-state of the background-copying",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, copying is paused; false, copying isn't paused",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1158] = {
  fname = "CopyFile_GetRemainingFilesToCopy",
  label = "US_CopyFile_GetRemainingFilesToCopy",
  run = "in/out",
  desc = "Returns the number of files that still need to be copied.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of files to be copied",
    name = "FILECOUNT",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1159] = {
  fname = "GetAllThemeLayoutNames",
  label = "US_GetAllThemeLayoutNames",
  run = "in/out",
  desc = "returns all layout-names and values of the current theme\
\
the table ThemeLayoutNames is of the following format:\
\
  ThemeLayoutNames[parameter_index][\"layout section\"] - the name of the layout-section of the parameter\
  ThemeLayoutNames[parameter_index][\"value\"] - the value of the parameter\
  ThemeLayoutNames[parameter_index][\"description\"] - the description of the parameter\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of theme-layout-parameters available",
    name = "INDEX",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all theme-layout-parameter available in the current theme",
    name = "THEMELAYOUTPARAMETERS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1160] = {
  fname = "GetAllThemeLayoutParameters",
  label = "US_GetAllThemeLayoutParameters",
  run = "in/out",
  desc = "returns all theme-layout-parameter attributes of the current theme\
\
the table ThemeLayoutParameters is of the following format:\
\
  ThemeLayoutParameters[parameter_index][\"name\"] - the name of the parameter\
  ThemeLayoutParameters[parameter_index][\"description\"] - the description of the parameter\
  ThemeLayoutParameters[parameter_index][\"value\"] - the value of the parameter\
  ThemeLayoutParameters[parameter_index][\"value default\"] - the defult value of the parameter\
  ThemeLayoutParameters[parameter_index][\"value min\"] - the minimum value of the parameter\
  ThemeLayoutParameters[parameter_index][\"value max\"] - the maximum value of the parameter\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of theme-layout-parameters available",
    name = "INDEX",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all theme-layout-parameter available in the current theme",
    name = "THEMELAYOUTPARAMETERS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1161] = {
  fname = "ApplyAllThemeLayoutParameters",
  label = "US_ApplyAllThemeLayoutParameters",
  run = "in/out",
  desc = "allows applying all theme-layout-parameter-values from a ThemeLayoutParameters-table, as gettable by [GetAllThemeLayoutParameters](#GetAllThemeLayoutParameters)\
\
the table ThemeLayoutParameters is of the following format:\
\
ThemeLayoutParameters[parameter_index][\"name\"] - the name of the parameter\
ThemeLayoutParameters[parameter_index][\"description\"] - the description of the parameter\
ThemeLayoutParameters[parameter_index][\"value\"] - the value of the parameter\
ThemeLayoutParameters[parameter_index][\"value default\"] - the defult value of the parameter\
ThemeLayoutParameters[parameter_index][\"value min\"] - the minimum value of the parameter\
ThemeLayoutParameters[parameter_index][\"value max\"] - the maximum value of the parameter\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "a table, which holds all theme-layout-parameter-values to apply; set values to nil to use default-value",
    name = "THEMELAYOUTPARAMETERS",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, the new values shall be persisting; false, values will not be persisting and lost after theme-change/Reaper restart",
    name = "PERSIST",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, refresh the theme to show the applied changes; false, don't refresh",
    name = "REFRESH",
   },
  },
  sp_api = "ultraschall",
 },
 [1162] = {
  fname = "GetThemeParameterIndexByName",
  label = "US_GetThemeParameterIndexByName",
  run = "in/out",
  desc = "allows getting a theme-parameter's values by its name\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the theme-parameter",
    name = "PARAMETERINDEX",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the theme-parameter",
    name = "RETVAL",
   },
   [3] = {
    type = "STRING",
    desc = "the description of the theme-parameter",
    opt = {
     use = false,
    },
    name = "DESC",
   },
   [4] = {
    type = "NUMBER",
    desc = "the current value of the theme-parameter",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
   [5] = {
    type = "NUMBER",
    desc = "the default value of the theme-parameter",
    opt = {
     use = false,
    },
    name = "DEFVALUE",
   },
   [6] = {
    type = "NUMBER",
    desc = "the minimum-value of the theme-parameter",
    opt = {
     use = false,
    },
    name = "MINVALUE",
   },
   [7] = {
    type = "NUMBER",
    desc = "the maximum-value of the theme-parameter",
    opt = {
     use = false,
    },
    name = "MAXVALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the theme-parameter, whose attributes you want to get(default v6-Theme has usually paramX, where X is a number between 0 and 80, other themes may differ from that)",
    name = "PARAMETERNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1163] = {
  fname = "SetThemeParameterIndexByName",
  label = "US_SetThemeParameterIndexByName",
  run = "in/out",
  desc = "allows setting the theme-parameter value by its name\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the theme-parameter, whose attributes you want to set(default v6-Theme has usually paramX, where X is a number between 0 and 80, other themes may differ from that)",
    name = "PARAMETERNAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new value to set",
    name = "VALUE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, the new value shall persist; false, the new value shall only be used until Reaper is closed",
    name = "PERSIST",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true or nil, only allow values within the minimum and maximum values of the parameter; false, allows setting values out of the range",
    opt = {
     use = false,
    },
    name = "STRICT",
   },
  },
  sp_api = "ultraschall",
 },
 [1164] = {
  fname = "GetThemeParameterIndexByDescription",
  label = "US_GetThemeParameterIndexByDescription",
  run = "in/out",
  desc = "allows getting a theme-parameter's values by its description\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the theme-parameter",
    name = "PARAMETERINDEX",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the theme-parameter",
    name = "RETVAL",
   },
   [3] = {
    type = "STRING",
    desc = "the description of the theme-parameter",
    opt = {
     use = false,
    },
    name = "DESC",
   },
   [4] = {
    type = "NUMBER",
    desc = "the current value of the theme-parameter",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
   [5] = {
    type = "NUMBER",
    desc = "the default value of the theme-parameter",
    opt = {
     use = false,
    },
    name = "DEFVALUE",
   },
   [6] = {
    type = "NUMBER",
    desc = "the minimum-value of the theme-parameter",
    opt = {
     use = false,
    },
    name = "MINVALUE",
   },
   [7] = {
    type = "NUMBER",
    desc = "the maximum-value of the theme-parameter",
    opt = {
     use = false,
    },
    name = "MAXVALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the description of the theme-parameter, whose attributes you want to get",
    name = "DESCRIPTION",
   },
  },
  sp_api = "ultraschall",
 },
 [1165] = {
  fname = "SetThemeParameterIndexByDescription",
  label = "US_SetThemeParameterIndexByDescription",
  run = "in/out",
  desc = "allows setting the theme-parameter value by its description\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the description of the theme-parameter, whose attributes you want to set",
    name = "DESCRIPTION",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new value to set",
    name = "VALUE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, the new value shall persist; false, the new value shall only be used until Reaper is closed",
    name = "PERSIST",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true or nil, only allow values within the minimum and maximum values of the parameter; false, allows setting values out of the range",
    opt = {
     use = false,
    },
    name = "STRICT",
   },
  },
  sp_api = "ultraschall",
 },
 [1166] = {
  fname = "Theme_Defaultv6_SetHideTCPElement",
  label = "US_Theme_Defaultv6_SetHideTCPElement",
  run = "in/out",
  desc = "Hides/unhides elements from TCP when using the default Reaper 6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose element you want to hide/unhide; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the element, whose hide-state you want to set\
1, record arm\
2, monitor\
3, trackname\
4, volume\
5, routing\
6, insert fx\
7, envelope\
8, pan and width\
9, record mode\
10, input\
11, labels and values\
12, meter values",
    name = "ELEMENT",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, hide element, when mixer is visible; false, don't hide element, when mixer is visible",
    name = "IF_MIXER_VISIBLE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, hide element, when track is not selected; false, don't hide element when track is not selected",
    name = "IF_TRACK_NOT_SELECTED",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, hides element, when track is not armed; false, don't hide element when track is not armed",
    name = "IF_TRACK_NOT_ARMED",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, always hides element; false, don't always hide element",
    name = "ALWAYS_HIDE",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1167] = {
  fname = "Theme_Defaultv6_GetHideTCPElement",
  label = "US_Theme_Defaultv6_GetHideTCPElement",
  run = "in/out",
  desc = "Get the current hides/unhide-state of elements from TCP when using the default Reaper 6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, getting was successful; false, getting was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, element is hidden, when mixer is visible; false, element is not hidden, when mixer is visible",
    name = "IF_MIXER_VISIBLE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, element is hidden, when track is not selected; false, element is not hidden when track is not selected",
    name = "IF_TRACK_NOT_SELECTED",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, element is hidden, when track is not armed; false, element is not hidden when track is not armed",
    name = "IF_TRACK_NOT_ARMED",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, element is always hidden; false, element isn't always hidden",
    name = "ALWAYS_HIDE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose element-hide/unhide-state you want to get; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the element, whose hide-state you want to get\
1, record arm\
2, monitor\
3, trackname\
4, volume\
5, routing\
6, insert fx\
7, envelope\
8, pan and width\
9, record mode\
10, input\
11, labels and values\
12, meter values",
    name = "ELEMENT",
   },
  },
  sp_api = "ultraschall",
 },
 [1168] = {
  fname = "Theme_Defaultv6_SetTCPNameSize",
  label = "US_Theme_Defaultv6_SetTCPNameSize",
  run = "in/out",
  desc = "Sets the size of the trackname-label in tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose trackname-label-size you want to set; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new size of the tcp-trackname-label\
0, auto\
1, 20\
2, 50\
3, 80\
4, 110\
5, 140\
6, 170",
    name = "SIZE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1169] = {
  fname = "Theme_Defaultv6_GetTCPNameSize",
  label = "US_Theme_Defaultv6_GetTCPNameSize",
  run = "in/out",
  desc = "Gets the size of the trackname-label in tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current size of the tcp-trackname-label\
0, auto\
1, 20\
2, 50\
3, 80\
4, 110\
5, 140\
6, 170",
    name = "SIZE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose trackname-size you want to get; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
  },
  sp_api = "ultraschall",
 },
 [1170] = {
  fname = "Theme_Defaultv6_SetTCPVolumeSize",
  label = "US_Theme_Defaultv6_SetTCPVolumeSize",
  run = "in/out",
  desc = "Sets the size of the volume in tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose volume-size you want to set; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new size of the tcp-volume\
0, knob\
1, 40\
2, 70\
3, 100\
4, 130\
5, 160\
6, 190",
    name = "SIZE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1171] = {
  fname = "Theme_Defaultv6_GetTCPVolumeSize",
  label = "US_Theme_Defaultv6_GetTCPVolumeSize",
  run = "in/out",
  desc = "Gets the size of the volume in tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current size of the tcp-volume\
0, knob\
1, 40\
2, 70\
3, 100\
4, 130\
5, 160\
6, 190",
    name = "SIZE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose volume-size you want to get; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
  },
  sp_api = "ultraschall",
 },
 [1172] = {
  fname = "Theme_Defaultv6_SetTCPInputSize",
  label = "US_Theme_Defaultv6_SetTCPInputSize",
  run = "in/out",
  desc = "Sets the size of the input in tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose input-size you want to set; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new size of the tcp-input\
0, MIN\
1, 25\
2, 40\
3, 60\
4, 90\
5, 150\
6, 200",
    name = "SIZE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1173] = {
  fname = "Theme_Defaultv6_GetTCPInputSize",
  label = "US_Theme_Defaultv6_GetTCPInputSize",
  run = "in/out",
  desc = "Gets the size of the input in tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current size of the tcp-input\
0, MIN\
1, 25\
2, 40\
3, 60\
4, 90\
5, 150\
6, 200",
    name = "SIZE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose input-size you want to get; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
  },
  sp_api = "ultraschall",
 },
 [1174] = {
  fname = "Theme_Defaultv6_SetTCPMeterSize",
  label = "US_Theme_Defaultv6_SetTCPMeterSize",
  run = "in/out",
  desc = "Sets the size of the meter in tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose meter-size you want to set; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new size of the tcp-meter\
1, 4\
2, 10\
3, 20\
4, 40\
5, 80\
6, 160\
7, 320",
    name = "SIZE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1175] = {
  fname = "Theme_Defaultv6_GetTCPMeterSize",
  label = "US_Theme_Defaultv6_GetTCPMeterSize",
  run = "in/out",
  desc = "Gets the size of the meter in tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current size of the tcp-meter\
1, 4\
2, 10\
3, 20\
4, 40\
5, 80\
6, 160\
7, 320",
    name = "SIZE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose meter-size you want to get; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
  },
  sp_api = "ultraschall",
 },
 [1176] = {
  fname = "Theme_Defaultv6_SetTCPMeterLocation",
  label = "US_Theme_Defaultv6_SetTCPMeterLocation",
  run = "in/out",
  desc = "Sets the location of the meter in tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose meter-location you want to set; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new location of the tcp-meter\
1, LEFT\
2, RIGHT\
3, LEFT IF ARMED",
    name = "LOCATION",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1177] = {
  fname = "Theme_Defaultv6_GetTCPMeterLocation",
  label = "US_Theme_Defaultv6_GetTCPMeterLocation",
  run = "in/out",
  desc = "Gets the location of the meter in tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current location of the tcp-meter\
1, Left\
2, Right\
3, Left if armed",
    name = "LOCATION",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose meter-location you want to get; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
  },
  sp_api = "ultraschall",
 },
 [1178] = {
  fname = "Theme_Defaultv6_SetTCPFolderIndent",
  label = "US_Theme_Defaultv6_SetTCPFolderIndent",
  run = "in/out",
  desc = "Sets the indentation of folders in tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the indentation-setting of tcp-folders\
0, None\
1, 1/8\
2, 1/4\
3, 1/2\
4, 1\
5, 2\
6, MAX",
    name = "INDENT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1179] = {
  fname = "Theme_Defaultv6_GetTCPFolderIndent",
  label = "US_Theme_Defaultv6_GetTCPFolderIndent",
  run = "in/out",
  desc = "Gets the indentation of folders in the tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the indentation-setting of tcp-folders\
0, None\
1, 1/8\
2, 1/4\
3, 1/2\
4, 1\
5, 2\
6, MAX",
    name = "INDENT",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1180] = {
  fname = "Theme_Defaultv6_SetTCPAlignControls",
  label = "US_Theme_Defaultv6_SetTCPAlignControls",
  run = "in/out",
  desc = "Sets the alignment of controls in tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the alignment-setting of tcp-controls\
1, Folder Indent\
2, Aligned\
3, Extend Name",
    name = "ALIGNEMENT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1181] = {
  fname = "Theme_Defaultv6_GetTCPAlignControls",
  label = "US_Theme_Defaultv6_GetTCPAlignControls",
  run = "in/out",
  desc = "Gets the alignment of controls in the tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the alignment-setting of tcp-controls\
1, Folder Indent\
2, Aligned\
3, Extend Name",
    name = "ALIGNEMENT",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1182] = {
  fname = "Theme_Defaultv6_SetMCPAlignControls",
  label = "US_Theme_Defaultv6_SetMCPAlignControls",
  run = "in/out",
  desc = "Sets the alignment of controls in mcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the alignment-setting of mcp-controls\
1, Folder Indent\
2, Aligned",
    name = "ALIGNEMENT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1183] = {
  fname = "Theme_Defaultv6_GetMCPAlignControls",
  label = "US_Theme_Defaultv6_GetMCPAlignControls",
  run = "in/out",
  desc = "Gets the alignment of controls in the mcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the alignment-setting of mcp-controls\
1, Folder Indent\
2, Aligned",
    name = "ALIGNEMENT",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1184] = {
  fname = "Theme_Defaultv6_SetTransSize",
  label = "US_Theme_Defaultv6_SetTransSize",
  run = "in/out",
  desc = "Sets the size of the transport-controls when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the transport-size\
1, normal\
2, 150%\
3, 200%",
    name = "SIZE",
   },
  },
  sp_api = "ultraschall",
 },
 [1185] = {
  fname = "Theme_Defaultv6_GetTransSize",
  label = "US_Theme_Defaultv6_GetTransSize",
  run = "in/out",
  desc = "Gets the size of the transport-controls when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the transport-size\
1, normal\
2, 150%\
3, 200%",
    name = "SIZE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1186] = {
  fname = "Theme_Defaultv6_SetTransPlayRateSize",
  label = "US_Theme_Defaultv6_SetTransPlayRateSize",
  run = "in/out",
  desc = "Sets the size of the playrate-slider in transport-controls when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the playrate-slidersize of transport-controls\
0, Knob\
1, 80\
2, 130\
3, 160\
4, 200\
5, 250\
6, 310",
    name = "SIZE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1187] = {
  fname = "Theme_Defaultv6_GetTransPlayRateSize",
  label = "US_Theme_Defaultv6_GetTransPlayRateSize",
  run = "in/out",
  desc = "Gets the size of the playrate-slider in transport-controls when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the playrate-slidersize of transport-controls\
0, Knob\
1, 80\
2, 130\
3, 160\
4, 200\
5, 250\
6, 310",
    name = "SIZE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1188] = {
  fname = "Theme_Defaultv6_SetEnvNameSize",
  label = "US_Theme_Defaultv6_SetEnvNameSize",
  run = "in/out",
  desc = "Sets the size of the name in envelopes when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the size of the name in envelopes\
0, Auto\
1, 20\
2, 50\
3, 80\
4, 110\
5, 140\
6, 170",
    name = "SIZE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1189] = {
  fname = "Theme_Defaultv6_GetEnvNameSize",
  label = "US_Theme_Defaultv6_GetEnvNameSize",
  run = "in/out",
  desc = "Gets the size of the name in envelopes when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the size of the name in envelopes\
0, Auto\
1, 20\
2, 50\
3, 80\
4, 110\
5, 140\
6, 170",
    name = "SIZE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1190] = {
  fname = "Theme_Defaultv6_SetEnvFaderSize",
  label = "US_Theme_Defaultv6_SetEnvFaderSize",
  run = "in/out",
  desc = "Sets the size of the faders in envelopes when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the size of the fader in envelopes\
0, Knob\
1, 40\
2, 70\
3, 100\
4, 130\
5, 160\
6, 190",
    name = "SIZE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1191] = {
  fname = "Theme_Defaultv6_GetEnvFaderSize",
  label = "US_Theme_Defaultv6_GetEnvFaderSize",
  run = "in/out",
  desc = "Gets the size of the faders in envelopes when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the size of the fader in envelopes\
0, Knob\
1, 40\
2, 70\
3, 100\
4, 130\
5, 160\
6, 190",
    name = "SIZE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1192] = {
  fname = "Theme_Defaultv6_SetEnvFolderIndent",
  label = "US_Theme_Defaultv6_SetEnvFolderIndent",
  run = "in/out",
  desc = "Sets the indentation of the envelope in relation to the track-folder when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the indentation of the enveloper in relation to the track-folder\
1, Don't match track folder indent\
2, Match track folder indent",
    name = "INDENTATION",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1193] = {
  fname = "Theme_Defaultv6_GetEnvFolderIndent",
  label = "US_Theme_Defaultv6_GetEnvFolderIndent",
  run = "in/out",
  desc = "Gets the indentation of the envelope in relation to the track-folder when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the indentation of the enveloper in relation to the track-folder\
1, Don't match track folder indent\
2, Match track folder indent",
    name = "INDENTATION",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1194] = {
  fname = "Theme_Defaultv6_SetEnvSize",
  label = "US_Theme_Defaultv6_SetEnvSize",
  run = "in/out",
  desc = "Sets the size of the envelope-controls when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the envelope-size\
1, normal\
2, 150%\
3, 200%",
    name = "SIZE",
   },
  },
  sp_api = "ultraschall",
 },
 [1195] = {
  fname = "Theme_Defaultv6_GetEnvSize",
  label = "US_Theme_Defaultv6_GetEnvSize",
  run = "in/out",
  desc = "Gets the size of the envelope-controls when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the envelope-size\
1, normal\
2, 150%\
3, 200%",
    name = "SIZE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1196] = {
  fname = "Theme_Defaultv6_SetMCPFolderIndent",
  label = "US_Theme_Defaultv6_SetMCPFolderIndent",
  run = "in/out",
  desc = "Sets the folder-indentation in mcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the indentation of folders in mcp\
0, None\
1, 1/8\
2, 1/4\
3, 1/2\
4, 1\
5, 2\
6, Max",
    name = "INDENTATION",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1197] = {
  fname = "Theme_Defaultv6_GetMCPFolderIndent",
  label = "US_Theme_Defaultv6_GetMCPFolderIndent",
  run = "in/out",
  desc = "Gets the folder-indentaion in the mcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the indentation of folders in mcp\
0, None\
1, 1/8\
2, 1/4\
3, 1/2\
4, 1\
5, 2\
6, Max",
    name = "INDENTATION",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1198] = {
  fname = "Theme_Defaultv6_SetStyleMCPElement",
  label = "US_Theme_Defaultv6_SetStyleMCPElement",
  run = "in/out",
  desc = "Sets style of elements from MCP when using the default Reaper 6-theme when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose element you want to style-set; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the element, whose style-state you want to set\
1, extend with sidebar\
2, Narrow form\
3, Do meter expansion\
4, Element labels",
    name = "ELEMENT",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, if track is selected; false, if not",
    name = "IF_TRACK_SELECTED",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, if track is not selected; false, if not",
    name = "IF_TRACK_NOT_SELECTED",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, if track is armed; false, if not",
    name = "IF_TRACK_ARMED",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, if track is unarmed; false, if not",
    name = "IF_TRACK_NOT_ARMED",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1199] = {
  fname = "Theme_Defaultv6_GetStyleMCPElement",
  label = "US_Theme_Defaultv6_GetStyleMCPElement",
  run = "in/out",
  desc = "Gets style of elements from MCP when using the default Reaper 6-theme when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, getting was successful; false, getting was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if track is selected; false, if not",
    name = "IF_TRACK_SELECTED",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, if track is not selected; false, if not",
    name = "IF_TRACK_NOT_SELECTED",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, if track is armed; false, if not",
    name = "IF_TRACK_ARMED",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, if track is unarmed; false, if not",
    name = "IF_TRACK_NOT_ARMED",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose element you want to style-get; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the element, whose style-state you want to set\
1, extend with sidebar\
2, Narrow form\
3, Do meter expansion\
4, Element labels",
    name = "ELEMENT",
   },
  },
  sp_api = "ultraschall",
 },
 [1200] = {
  fname = "Theme_Defaultv6_SetMCPBorderStyle",
  label = "US_Theme_Defaultv6_SetMCPBorderStyle",
  run = "in/out",
  desc = "Sets the style of the border of the mcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose mcp-borderstyle you want to set; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new style of the border of the mcp\
0, None\
1, Left edge\
2, Right edge\
3, Root folders\
4, Around folders",
    name = "STYLE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1201] = {
  fname = "Theme_Defaultv6_GetMCPBorderStyle",
  label = "US_Theme_Defaultv6_GetMCPBorderStyle",
  run = "in/out",
  desc = "Gets the style of the border of the mcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current syle of the border of the mcp\
0, None\
1, Left edge\
2, Right edge\
3, Root folders\
4, Around folders",
    name = "STYLE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose mcp-borderstyle you want to get; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
  },
  sp_api = "ultraschall",
 },
 [1202] = {
  fname = "Theme_Defaultv6_SetMCPMeterExpansion",
  label = "US_Theme_Defaultv6_SetMCPMeterExpansion",
  run = "in/out",
  desc = "Sets the size of the meter-expansion of the mcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose mcp-meter-expansion you want to set; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new size of the meter-expansion of the mcp\
0, None\
1, +2 pixels\
2, +4 pixels\
3, +8 pixels",
    name = "SIZE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting persists after restart of Reaper; false, this setting is only valid until closing Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1203] = {
  fname = "Theme_Defaultv6_GetMCPMeterExpansion",
  label = "US_Theme_Defaultv6_GetMCPMeterExpansion",
  run = "in/out",
  desc = "Gets the meter-expansion of the mcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the new size of the meter-expansion of the mcp\
0, None\
1, +2 pixels\
2, +4 pixels\
3, +8 pixels",
    name = "SIZE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the layout, whose mcp-meter-expansion you want to get; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
  },
  sp_api = "ultraschall",
 },
 [1204] = {
  fname = "Theme_Defaultv6_SetMCPSizeAndLayout",
  label = "US_Theme_Defaultv6_SetMCPSizeAndLayout",
  run = "in/out",
  desc = "Sets the size and layout of the mcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose MCP-layout and size you want to set(no master track supported)",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the new mcp-layout; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
   [3] = {
    type = "INTEGER",
    desc = "the new size of the mcp\
1, normal\
2, 150%\
3, 200%",
    name = "SIZE",
   },
  },
  sp_api = "ultraschall",
 },
 [1205] = {
  fname = "Theme_Defaultv6_SetTCPSizeAndLayout",
  label = "US_Theme_Defaultv6_SetTCPSizeAndLayout",
  run = "in/out",
  desc = "Sets the size and layout of the tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose TCP-layout and size you want to set(no master track supported)",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the new tcp-layout; either \"A\", \"B\" or \"C\"",
    name = "LAYOUT",
   },
   [3] = {
    type = "INTEGER",
    desc = "the new size of the mcp\
1, normal\
2, 150%\
3, 200%",
    name = "SIZE",
   },
  },
  sp_api = "ultraschall",
 },
 [1206] = {
  fname = "Theme_Defaultv6_GetTCPSizeAndLayout",
  label = "US_Theme_Defaultv6_GetTCPSizeAndLayout",
  run = "in/out",
  desc = "Gets the size and layout of the tcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the current layout of the tcp; either \"A\", \"B\", \"C\" or \"\"(if no layout is set yet)",
    name = "LAYOUT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current size of the tcp\
1, normal\
2, 150%\
3, 200%",
    name = "SIZE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose TCP-layout and size you want to get(no master track supported)",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1207] = {
  fname = "Theme_Defaultv6_GetMCPSizeAndLayout",
  label = "US_Theme_Defaultv6_GetMCPSizeAndLayout",
  run = "in/out",
  desc = "Gets the size and layout of the mcp when using default v6-theme\
\
This reflects the settings from the Theme-Adjuster.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the current layout of the mcp; either \"A\", \"B\", \"C\" or \"\"(if no layout is set yet)",
    name = "LAYOUT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current size of the mcp\
1, normal\
2, 150%\
3, 200%",
    name = "SIZE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose MCP-layout and size you want to get(no master track supported)",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1208] = {
  fname = "GetTrack_ThemeElementPositions",
  label = "US_GetTrack_ThemeElementPositions",
  run = "in/out",
  desc = "returns a list of all theme-elements for a track\
\
the table ThemeElements is of the following format:\
\
  ThemeLayoutNames[index][\"element\"] - the name of the theme-element \
  ThemeLayoutNames[index][\"x\"] - the x-position of the theme-element\
  ThemeLayoutNames[index][\"y\"] - the y-position of the theme-element\
  ThemeLayoutNames[index][\"w\"] - the width of the theme-element\
  ThemeLayoutNames[index][\"h\"] - the height of the theme-element\
  ThemeLayoutNames[index][\"visible\"] - true, the theme element is visible; false, the theme-element is invisible(width and heigh=0)\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all walter-theme elements, their positions and their visibility-state",
    name = "THEMEELEMENTS",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose Walter-theme-element-positions you want to query",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1209] = {
  fname = "GetAllThemeElements",
  label = "US_GetAllThemeElements",
  run = "in/out",
  desc = "returns a list of all theme-element-names available\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all walter-theme elements-names available",
    name = "THEMEELEMENTS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1210] = {
  fname = "GetTrackHWOut",
  label = "US_GetTrackHWOut",
  run = "in/out",
  desc = "Returns the settings of the HWOUT-HW-destination, as set in the routing-matrix, as well as in the Destination \"Controls for Track\"-dialogue, of tracknumber. There can be more than one, which you can choose with idx.\
\
It's the entry HWOUT\
\
see see [MKVOL2DB](#MKVOL2DB) to convert the volume-returnvalue into a dB-value\
\
returns -1 in case of failure",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "outputchannel, with 1024+x the individual hw-outputchannels, 0,2,4,etc stereo output channels",
    name = "OUTPUTCHANNEL",
   },
   [2] = {
    type = "INTEGER",
    desc = "0-post-fader(post pan), 1-preFX, 3-pre-fader(Post-FX), as set in the Destination \"Controls for Track\"-dialogue",
    name = "POST_PRE_FADER",
   },
   [3] = {
    type = "NUMBER",
    desc = "volume, as set in the Destination \"Controls for Track\"-dialogue",
    name = "VOLUME",
   },
   [4] = {
    type = "NUMBER",
    desc = "pan, as set in the Destination \"Controls for Track\"-dialogue",
    name = "PAN",
   },
   [5] = {
    type = "INTEGER",
    desc = "mute, 1-on, 0-off, as set in the Destination \"Controls for Track\"-dialogue",
    name = "MUTE",
   },
   [6] = {
    type = "INTEGER",
    desc = "Phase, 1-on, 0-off, as set in the Destination \"Controls for Track\"-dialogue",
    name = "PHASE",
   },
   [7] = {
    type = "INTEGER",
    desc = "source, as set in the Destination \"Controls for Track\"-dialogue\
                                   -1 - None\
                                    0 - Stereo Source 1/2\
                                    4 - Stereo Source 5/6\
                                   12 - New Channels On Sending Track Stereo Source Channel 13/14\
                                   1024 - Mono Source 1\
                                   1029 - Mono Source 6\
                                   1030 - New Channels On Sending Track Mono Source Channel 7\
                                   1032 - New Channels On Sending Track Mono Source Channel 9\
                                   2048 - MultiChannel 4 Channels 1-4\
                                   2050 - Multichannel 4 Channels 3-6\
                                   3072 - Multichannel 6 Channels 1-6",
    name = "SOURCE",
   },
   [8] = {
    type = "NUMBER",
    desc = "pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB",
    name = "PAN_LAW",
   },
   [9] = {
    type = "INTEGER",
    desc = "automation mode, as set in the Destination \"Controls for Track\"-dialogue\
                                   -1 - Track Automation Mode\
                                    0 - Trim/Read\
                                    1 - Read\
                                    2 - Touch\
                                    3 - Write\
                                    4 - Latch\
                                    5 - Latch Preview",
    name = "AUTOMATIONMODE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose HWOut you want, 0 for Master Track",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id-number of the HWOut, beginning with 1 for the first HWOut-Settings",
    name = "IDX",
   },
   [3] = {
    type = "STRING",
    desc = "a TrackStateChunk, whose HWOUT-entries you want to get",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1211] = {
  fname = "GetTrackAUXSendReceives",
  label = "US_GetTrackAUXSendReceives",
  run = "in/out",
  desc = "Returns the settings of the Send/Receive, as set in the routing-matrix, as well as in the Destination \"Controls for Track\"-dialogue, of tracknumber. There can be more than one, which you can choose with idx.\
Remember, if you want to get the sends of a track, you need to check the recv_tracknumber-returnvalues of the OTHER(!) tracks, as you can only get the receives. With the receives checked, you know, which track sends.\
\
It's the entry AUXRECV\
\
see [MKVOL2DB](#MKVOL2DB) to convert returnvalue volume into a dB-value\
\
returns -1 in case of failure",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "Tracknumber, from where to receive the audio from",
    name = "RECV_TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "0-PostFader, 1-PreFX, 3-Pre-Fader",
    name = "POST_PRE_FADER",
   },
   [3] = {
    type = "NUMBER",
    desc = "Volume",
    name = "VOLUME",
   },
   [4] = {
    type = "NUMBER",
    desc = "pan, as set in the Destination \"Controls for Track\"-dialogue; negative=left, positive=right, 0=center",
    name = "PAN",
   },
   [5] = {
    type = "INTEGER",
    desc = "Mute this send(1) or not(0)",
    name = "MUTE",
   },
   [6] = {
    type = "INTEGER",
    desc = "Mono(1), Stereo(0)",
    name = "MONO_STEREO",
   },
   [7] = {
    type = "INTEGER",
    desc = "Phase of this send on(1) or off(0)",
    name = "PHASE",
   },
   [8] = {
    type = "INTEGER",
    desc = "Audio-Channel Source\
                                       -1 - None\
                                       0 - Stereo Source 1/2\
                                       1 - Stereo Source 2/3\
                                       2 - Stereo Source 3/4\
                                       1024 - Mono Source 1\
                                       1025 - Mono Source 2\
                                       2048 - Multichannel Source 4 Channels 1-4",
    name = "CHAN_SRC",
   },
   [9] = {
    type = "INTEGER",
    desc = "send to channel\
                                       0 - Stereo 1/2\
                                       1 - Stereo 2/3\
                                       2 - Stereo 3/4\
                                       ...\
                                       1024 - Mono Channel 1\
                                       1025 - Mono Channel 2",
    name = "SND_CHAN",
   },
   [10] = {
    type = "NUMBER",
    desc = "pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB",
    name = "PAN_LAW",
   },
   [11] = {
    type = "INTEGER",
    desc = "0 - All Midi Tracks\
                                        1 to 16 - Midi Channel 1 to 16\
                                        32 - send to Midi Channel 1\
                                        64 - send to MIDI Channel 2\
                                        96 - send to MIDI Channel 3\
                                        ...\
                                        512 - send to MIDI Channel 16\
                                        4194304 - send to MIDI-Bus B1\
                                        send to MIDI-Bus B1 + send to MIDI Channel nr = MIDIBus B1 1/nr:\
                                        16384 - BusB1\
                                        BusB1+1 to 16 - BusB1-Channel 1 to 16\
                                        32768 - BusB2\
                                        BusB2+1 to 16 - BusB2-Channel 1 to 16\
                                        49152 - BusB3\
                                        ...\
                                        BusB3+1 to 16 - BusB3-Channel 1 to 16\
                                        262144 - BusB16\
                                        BusB16+1 to 16 - BusB16-Channel 1 to 16\
\
                                        1024 - Add that value to switch MIDI On\
                                        4177951 - MIDI - None",
    name = "MIDICHANFLAG",
   },
   [12] = {
    type = "INTEGER",
    desc = "Automation Mode\
                                      -1 - Track Automation Mode\
                                       0 - Trim/Read\
                                       1 - Read\
                                       2 - Touch\
                                       3 - Write\
                                       4 - Latch\
                                       5 - Latch Preview",
    name = "AUTOMATION",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose Send/Receive you want",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id-number of the Send/Receive, beginning with 1 for the first Send/Receive-Settings",
    name = "IDX",
   },
   [3] = {
    type = "STRING",
    desc = "a TrackStateChunk, whose AUXRECV-entries you want to get",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1212] = {
  fname = "CountTrackHWOuts",
  label = "US_CountTrackHWOuts",
  run = "in/out",
  desc = "Counts and returns the number of existing HWOUT-HW-destination, as set in the routing-matrix, as well as in the Destination \"Controls for Track\"-dialogue, of tracknumber.\
returns -1 in case of failure",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of HWOuts in tracknumber",
    name = "COUNT_HWOUTS",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose HWOUTs you want to count. 0 for Master Track; -1, to use optional parameter TrackStateChunk instead",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the TrackStateChunk, whose hwouts you want to count; only when tracknumber=-1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1213] = {
  fname = "CountTrackAUXSendReceives",
  label = "US_CountTrackAUXSendReceives",
  run = "in/out",
  desc = "Counts and returns the number of existing Send/Receives/Routing-settings, as set in the routing-matrix, as well as in the Destination \"Controls for Track\"-dialogue, of tracknumber.\
returns -1 in case of failure",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of Send/Receives-Settings in tracknumber",
    name = "COUNT_SENDRECEIVES",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose Send/Receive you want; -1, if you want to pass a TrackStateChunk instead",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the TrackStateChunk, whose hwouts you want to count; only when tracknumber=-1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1214] = {
  fname = "AddTrackHWOut",
  label = "US_AddTrackHWOut",
  run = "in/out",
  desc = "Adds a setting of the HWOUT-HW-destination, as set in the routing-matrix, as well as in the Destination \"Controls for Track\"-dialogue, of tracknumber.\
This function does not check the parameters for plausability, so check your settings twice!\
\
see [DB2MKVOL](#DB2MKVOL) to convert parameter volume from a dB-value\
\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it worked; false if it didn't",
    name = "RETVAL",
   },
   [2] = {
    type = "PARAMETER",
    desc = "an altered TrackStateChunk into which you added the new hwout-setting",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose HWOut you want. 0 for Master Track; -1, use parameter TrackStateChunk instead",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "outputchannel, with 1024+x the individual hw-outputchannels, 0,2,4,etc stereo output channels",
    name = "OUTPUTCHANNEL",
   },
   [3] = {
    type = "INTEGER",
    desc = "0-post-fader(post pan), 1-preFX, 3-pre-fader(Post-FX), as set in the Destination \"Controls for Track\"-dialogue",
    name = "POST_PRE_FADER",
   },
   [4] = {
    type = "NUMBER",
    desc = "volume, as set in the Destination \"Controls for Track\"-dialogue",
    name = "VOLUME",
   },
   [5] = {
    type = "NUMBER",
    desc = "pan, as set in the Destination \"Controls for Track\"-dialogue",
    name = "PAN",
   },
   [6] = {
    type = "INTEGER",
    desc = "mute, 1-on, 0-off, as set in the Destination \"Controls for Track\"-dialogue",
    name = "MUTE",
   },
   [7] = {
    type = "INTEGER",
    desc = "Phase, 1-on, 0-off, as set in the Destination \"Controls for Track\"-dialogue",
    name = "PHASE",
   },
   [8] = {
    type = "INTEGER",
    desc = "source, as set in the Destination \"Controls for Track\"-dialogue\
                                   -1 - None\
                                    0 - Stereo Source 1/2\
                                    4 - Stereo Source 5/6\
                                   12 - New Channels On Sending Track Stereo Source Channel 13/14\
                                   1024 - Mono Source 1\
                                   1029 - Mono Source 6\
                                   1030 - New Channels On Sending Track Mono Source Channel 7\
                                   1032 - New Channels On Sending Track Mono Source Channel 9\
                                   2048 - MultiChannel 4 Channels 1-4\
                                   2050 - Multichannel 4 Channels 3-6\
                                   3072 - Multichannel 6 Channels 1-6",
    name = "SOURCE",
   },
   [9] = {
    type = "NUMBER",
    desc = "pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB",
    name = "PAN_LAW",
   },
   [10] = {
    type = "INTEGER",
    desc = "automation mode, as set in the Destination \"Controls for Track\"-dialogue\
                                   -1 - Track Automation Mode\
                                    0 - Trim/Read\
                                    1 - Read\
                                    2 - Touch\
                                    3 - Write\
                                    4 - Latch\
                                    5 - Latch Preview",
    name = "AUTOMATIONMODE",
   },
   [11] = {
    type = "PARAMETER",
    desc = "a TrackStateChunk into which to add the hwout-setting; only available, when tracknumber=-1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1215] = {
  fname = "AddTrackAUXSendReceives",
  label = "US_AddTrackAUXSendReceives",
  run = "in/out",
  desc = "Adds a setting of Send/Receive, as set in the routing-matrix, as well as in the Destination \"Controls for Track\"-dialogue, of tracknumber. There can be more than one.\
Remember, if you want to set the sends of a track, you need to add it to the track, that shall receive, not the track that sends! Set recv_tracknumber in the track that receives with the tracknumber that sends, and you've set it successfully.\
\
Due to the complexity of send/receive-settings, this function does not check, whether the parameters are plausible. So check twice, whether the added sends/receives appear, as they might not appear!\
\
see [DB2MKVOL](#DB2MKVOL) to convert parameter volume from a dB-value\
\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true if it worked, false if it didn't.",
    name = "RETVAL",
   },
   [2] = {
    type = "PARAMETER",
    desc = "an altered TrackStateChunk into which you added a new receive/routing; only available, when tracknumber=-1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose Send/Receive you want; -1, if you want to use the parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "Tracknumber, from where to receive the audio from",
    name = "RECV_TRACKNUMBER",
   },
   [3] = {
    type = "INTEGER",
    desc = "0-PostFader, 1-PreFX, 3-Pre-Fader",
    name = "POST_PRE_FADER",
   },
   [4] = {
    type = "NUMBER",
    desc = "Volume",
    name = "VOLUME",
   },
   [5] = {
    type = "NUMBER",
    desc = "pan, as set in the Destination \"Controls for Track\"-dialogue; negative=left, positive=right, 0=center",
    name = "PAN",
   },
   [6] = {
    type = "INTEGER",
    desc = "Mute this send(1) or not(0)",
    name = "MUTE",
   },
   [7] = {
    type = "INTEGER",
    desc = "Mono(1), Stereo(0)",
    name = "MONO_STEREO",
   },
   [8] = {
    type = "INTEGER",
    desc = "Phase of this send on(1) or off(0)",
    name = "PHASE",
   },
   [9] = {
    type = "INTEGER",
    desc = "Audio-Channel Source\
                                      -1 - None\
                                       0 - Stereo Source 1/2\
                                       1 - Stereo Source 2/3\
                                       2 - Stereo Source 3/4\
                                       1024 - Mono Source 1\
                                       1025 - Mono Source 2\
                                       2048 - Multichannel Source 4 Channels 1-4",
    name = "CHAN_SRC",
   },
   [10] = {
    type = "INTEGER",
    desc = "send to channel\
                                       0 - Stereo 1/2\
                                       1 - Stereo 2/3\
                                       2 - Stereo 3/4\
                                       ...\
                                       1024 - Mono Channel 1\
                                       1025 - Mono Channel 2",
    name = "SND_CHAN",
   },
   [11] = {
    type = "NUMBER",
    desc = "pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB",
    name = "PAN_LAW",
   },
   [12] = {
    type = "INTEGER",
    desc = "0 - All Midi Tracks\
                                        1 to 16 - Midi Channel 1 to 16\
                                        32 - send to Midi Channel 1\
                                        64 - send to MIDI Channel 2\
                                        96 - send to MIDI Channel 3\
                                        ...\
                                        512 - send to MIDI Channel 16    \
                                        4194304 - send to MIDI-Bus B1\
                                        send to MIDI-Bus B1 + send to MIDI Channel nr = MIDIBus B1 1/nr:\
                                        16384 - BusB1\
                                        BusB1+1 to 16 - BusB1-Channel 1 to 16\
                                        32768 - BusB2\
                                        BusB2+1 to 16 - BusB2-Channel 1 to 16\
                                        49152 - BusB3\
                                        ...\
                                        BusB3+1 to 16 - BusB3-Channel 1 to 16\
                                        262144 - BusB16\
                                        BusB16+1 to 16 - BusB16-Channel 1 to 16\
\
                                        1024 - Add that value to switch MIDI On\
                                        4177951 - MIDI - None",
    name = "MIDICHANFLAG",
   },
   [13] = {
    type = "INTEGER",
    desc = "Automation Mode\
                                      -1 - Track Automation Mode\
                                       0 - Trim/Read\
                                       1 - Read\
                                       2 - Touch\
                                       3 - Write\
                                       4 - Latch\
                                       5 - Latch Preview",
    name = "AUTOMATION",
   },
   [14] = {
    type = "STRING",
    desc = "the TrackStateChunk, to which you want to add a new receive-routing",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1216] = {
  fname = "DeleteTrackHWOut",
  label = "US_DeleteTrackHWOut",
  run = "in/out",
  desc = "Deletes the idxth HWOut-Setting of tracknumber.\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true if it worked, false if it didn't.",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the altered TrackStateChunk, from which you deleted HWOut-entries; only available, when tracknumber=-1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose HWOUTs you want to delete. 0 for Master Track. -1, if you want to use the parameter TrackStateChunk instead",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the HWOut-setting, that you want to delete; -1, to delete all HWOuts from this track",
    name = "IDX",
   },
   [3] = {
    type = "STRING",
    desc = "the TrackStateChunk, from which you want to delete HWOut-entries",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1217] = {
  fname = "DeleteTrackAUXSendReceives",
  label = "US_DeleteTrackAUXSendReceives",
  run = "in/out",
  desc = "Deletes the idxth Send/Receive-Setting of tracknumber.\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true if it worked, false if it didn't.",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "an altered TrackStateChunk, from which you deleted a Send/Receive-entrie; only available, when tracknumber=-1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose Send/Receive you want; -1, if you want to use the parameter TrackStateChunk",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the send/receive-setting, that you want to delete; -1, deletes all AuxReceives on this track",
    name = "IDX",
   },
   [3] = {
    type = "STRING",
    desc = "a TrackStateChunk, from which you want to delete Send/Receive-entries; only available, when tracknumber=-1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1218] = {
  fname = "SetTrackHWOut",
  label = "US_SetTrackHWOut",
  run = "in/out",
  desc = "Sets a setting of the HWOUT-HW-destination, as set in the routing-matrix, as well as in the Destination \"Controls for Track\"-dialogue, of tracknumber. There can be more than one, so choose the one you want to change with idx.\
To retain old-settings, use nil with the accompanying parameters.\
This function does not check the parameters for plausability, so check your settings twice, or the HWOut-setting might disappear with faulty parameters!\
\
see [DB2MKVOL](#DB2MKVOL) to convert volume from a dB-value\
\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it worked; false if it didn't",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "an altered TrackStateChunk, in which you've set a send/receive-setting; only available when track=-1",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose HWOut you want. 0 for Master Track",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the HWOut-setting, you want to change",
    name = "IDX",
   },
   [3] = {
    type = "INTEGER",
    desc = "outputchannel, with 1024+x the individual hw-outputchannels, 0,2,4,etc stereo output channels",
    name = "OUTPUTCHANNEL",
   },
   [4] = {
    type = "INTEGER",
    desc = "0-post-fader(post pan), 1-preFX, 3-pre-fader(Post-FX), as set in the Destination \"Controls for Track\"-dialogue",
    name = "POST_PRE_FADER",
   },
   [5] = {
    type = "NUMBER",
    desc = "volume, as set in the Destination \"Controls for Track\"-dialogue",
    name = "VOLUME",
   },
   [6] = {
    type = "NUMBER",
    desc = "pan, as set in the Destination \"Controls for Track\"-dialogue",
    name = "PAN",
   },
   [7] = {
    type = "INTEGER",
    desc = "mute, 1-on, 0-off, as set in the Destination \"Controls for Track\"-dialogue",
    name = "MUTE",
   },
   [8] = {
    type = "INTEGER",
    desc = "Phase, 1-on, 0-off, as set in the Destination \"Controls for Track\"-dialogue",
    name = "PHASE",
   },
   [9] = {
    type = "INTEGER",
    desc = "source, as set in the Destination \"Controls for Track\"-dialogue\
                                   -1 - None\
                                    0 - Stereo Source 1/2\
                                    4 - Stereo Source 5/6\
                                   12 - New Channels On Sending Track Stereo Source Channel 13/14\
                                   1024 - Mono Source 1\
                                   1029 - Mono Source 6\
                                   1030 - New Channels On Sending Track Mono Source Channel 7\
                                   1032 - New Channels On Sending Track Mono Source Channel 9\
                                   2048 - MultiChannel 4 Channels 1-4\
                                   2050 - Multichannel 4 Channels 3-6\
                                   3072 - Multichannel 6 Channels 1-6",
    name = "SOURCE",
   },
   [10] = {
    type = "NUMBER",
    desc = "pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB",
    name = "PAN_LAW",
   },
   [11] = {
    type = "INTEGER",
    desc = "automation mode, as set in the Destination \"Controls for Track\"-dialogue\
                                   -1 - Track Automation Mode\
                                    0 - Trim/Read\
                                    1 - Read\
                                    2 - Touch\
                                    3 - Write\
                                    4 - Latch\
                                    5 - Latch Preview",
    name = "AUTOMATIONMODE",
   },
   [12] = {
    type = "STRING",
    desc = "sets an HWOUT-entry in a TrackStateChunk",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1219] = {
  fname = "SetTrackAUXSendReceives",
  label = "US_SetTrackAUXSendReceives",
  run = "in/out",
  desc = "Alters a setting of Send/Receive, as set in the routing-matrix, as well as in the Destination \"Controls for Track\"-dialogue, of tracknumber. There can be more than one, so choose the right one with idx.\
You can keep the old-setting by using nil as a parametervalue.\
Remember, if you want to set the sends of a track, you need to add it to the track, that shall receive, not the track that sends! Set recv_tracknumber in the track that receives with the tracknumber that sends, and you've set it successfully.\
\
Due to the complexity of send/receive-settings, this function does not check, whether the parameters are plausible. So check twice, whether the change sends/receives still appear, as they might disappear with faulty settings!\
\
see [DB2MKVOL](#DB2MKVOL) to convert parameter volume from a dB-value\
\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true if it worked, false if it didn't.",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "an altered TrackStateChunk, whose AUXRECV-entries you've altered",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track, whose Send/Receive you want",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the send/receive-setting, you want to set",
    name = "IDX",
   },
   [3] = {
    type = "INTEGER",
    desc = "Tracknumber, from where to receive the audio from",
    name = "RECV_TRACKNUMBER",
   },
   [4] = {
    type = "INTEGER",
    desc = "0-PostFader, 1-PreFX, 3-Pre-Fader",
    name = "POST_PRE_FADER",
   },
   [5] = {
    type = "NUMBER",
    desc = "Volume ",
    name = "VOLUME",
   },
   [6] = {
    type = "NUMBER",
    desc = "pan, as set in the Destination \"Controls for Track\"-dialogue; negative=left, positive=right, 0=center",
    name = "PAN",
   },
   [7] = {
    type = "INTEGER",
    desc = "Mute this send(1) or not(0)",
    name = "MUTE",
   },
   [8] = {
    type = "INTEGER",
    desc = "Mono(1), Stereo(0)",
    name = "MONO_STEREO",
   },
   [9] = {
    type = "INTEGER",
    desc = "Phase of this send on(1) or off(0)",
    name = "PHASE",
   },
   [10] = {
    type = "INTEGER",
    desc = "Audio-Channel Source\
                                       -1 - None\
                                       0 - Stereo Source 1/2\
                                       1 - Stereo Source 2/3\
                                       2 - Stereo Source 3/4\
                                       1024 - Mono Source 1\
                                       1025 - Mono Source 2\
                                       2048 - Multichannel Source 4 Channels 1-4",
    name = "CHAN_SRC",
   },
   [11] = {
    type = "INTEGER",
    desc = "send to channel\
                                       0 - Stereo 1/2\
                                       1 - Stereo 2/3\
                                       2 - Stereo 3/4\
                                       ...\
                                       1024 - Mono Channel 1\
                                       1025 - Mono Channel 2",
    name = "SND_CHAN",
   },
   [12] = {
    type = "NUMBER",
    desc = "pan-law, as set in the dialog that opens, when you right-click on the pan-slider in the routing-settings-dialog; default is -1 for +0.0dB",
    name = "PAN_LAW",
   },
   [13] = {
    type = "INTEGER",
    desc = "0 - All Midi Tracks\
                                        1 to 16 - Midi Channel 1 to 16\
                                        32 - send to Midi Channel 1\
                                        64 - send to MIDI Channel 2\
                                        96 - send to MIDI Channel 3\
                                        ...\
                                        512 - send to MIDI Channel 16\
                                        4194304 - send to MIDI-Bus B1\
                                        send to MIDI-Bus B1 + send to MIDI Channel nr = MIDIBus B1 1/nr:\
                                        16384 - BusB1\
                                        BusB1+1 to 16 - BusB1-Channel 1 to 16\
                                        32768 - BusB2\
                                        BusB2+1 to 16 - BusB2-Channel 1 to 16\
                                        49152 - BusB3\
                                        ...\
                                        BusB3+1 to 16 - BusB3-Channel 1 to 16\
                                        262144 - BusB16\
                                        BusB16+1 to 16 - BusB16-Channel 1 to 16\
\
                                        1024 - Add that value to switch MIDI On\
                                        4177951 - MIDI - None",
    name = "MIDICHANFLAG",
   },
   [14] = {
    type = "INTEGER",
    desc = "Automation Mode\
                                      -1 - Track Automation Mode\
                                       0 - Trim/Read\
                                       1 - Read\
                                       2 - Touch\
                                       3 - Write\
                                       4 - Latch\
                                       5 - Latch Preview",
    name = "AUTOMATION",
   },
   [15] = {
    type = "STRING",
    desc = "a TrackStateChunk, whose AUXRECV-entries you want to set",
    opt = {
     use = false,
    },
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1220] = {
  fname = "ClearRoutingMatrix",
  label = "US_ClearRoutingMatrix",
  run = "in/out",
  desc = "Clears all routing-matrix-settings or optionally part of them",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, clearing was successful; false, clearing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "nil or true, clear all HWOuts; false, keep the HWOuts intact",
    name = "CLEARHWOUTS",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "nil or true, clear all Send/Receive-settings; false, keep the Send/Receive-settings intact",
    name = "CLEARAUXRECVS",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "nil or true, clear all send to master-checkboxes; false, keep them intact",
    name = "CLEARTRACKMASTERSENDS",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "nil or true, include the Mastertrack as well; false, don't include it",
    name = "CLEARMASTERTRACK",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, set undo point; false or nil, don't set undo point",
    name = "UNDO",
   },
  },
  sp_api = "ultraschall",
 },
 [1221] = {
  fname = "ClearRoutingMatrix",
  label = "US_ClearRoutingMatrix",
  run = "in/out",
  desc = "Clears all routing-matrix-settings or optionally part of them",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, clearing was successful; false, clearing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "nil or true, clear all HWOuts; false, keep the HWOuts intact",
    name = "CLEARHWOUTS",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "nil or true, clear all Send/Receive-settings; false, keep the Send/Receive-settings intact",
    name = "CLEARAUXRECVS",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "nil or true, clear all send to master-checkboxes; false, keep them intact",
    name = "CLEARTRACKMASTERSENDS",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "nil or true, include the Mastertrack as well; false, don't include it",
    name = "CLEARMASTERTRACK",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, set undo point; false or nil, don't set undo point",
    name = "UNDO",
   },
  },
  sp_api = "ultraschall",
 },
 [1222] = {
  fname = "GetAllHWOuts",
  label = "US_GetAllHWOuts",
  run = "in/out",
  desc = "returns a table with all HWOut-settings of all tracks, including master-track(track index: 0)\
\
returned table is of structure:\
  table[\"HWOuts\"]=true                              - signals, this is a HWOuts-table; don't change that!  \
  table[\"number\\_of_tracks\"]                         - the number of tracks in this table, from track 0(master) to track n  \
  table[tracknumber][\"HWOut_count\"]                 - the number of HWOuts of tracknumber, beginning with 1  \
  table[tracknumber][\"TrackID\"]                     - the unique id of the track as guid; can be used to get the MediaTrack using reaper.BR_GetMediaTrackByGUID(0, guid)  \
  table[tracknumber][HWOutIndex][\"outputchannel\"]   - the number of outputchannels of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"post\\_pre_fader\"] - the setting of post-pre-fader of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"volume\"]          - the volume of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"pan\"]             - the panning of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"mute\"]            - the mute-setting of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"phase\"]           - the phase-setting of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"source\"]          - the source/input of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"pan\\_law\"]         - pan-law, default is -1  \
  table[tracknumber][HWOutIndex][\"automationmode\"]  - the automation-mode of this HWOutIndex of tracknumber    \
  \
  See [GetTrackHWOut](#GetTrackHWOut) for more details on the individual settings, stored in the entries.  ",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all HWOuts of the current project.",
    name = "ALLHWOUTS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of tracks in the AllMainSends-table",
    name = "NUMBER_OF_TRACKS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1223] = {
  fname = "ApplyAllHWOuts",
  label = "US_ApplyAllHWOuts",
  run = "in/out",
  desc = "Takes a table, as returned by [GetAllHWOuts](#GetAllHWOuts) with all HWOut-settings of all tracks and applies it to all tracks.\
\
When you set option to 2, the individual entries will be applied to the tracks, that have the guids stored in table\
table[tracknumber][\"TrackID\"], otherwise, this function will apply it to track0 to trackn, which is the same as table[\"number\\_of_tracks\"].\
That way, you can create RoutingSnapshots, that will stay in the right tracks, even if they are ordered differently or when tracks have been added/deleted.\
\
This influences the MasterTrack as well!\
\
expected table is of structure:\
  \
  table[\"HWOuts\"]=true                              - signals, this is a HWOuts-table; don't change that!  \
  table[\"number\\_of_tracks\"]                         - the number of tracks in this table, from track 0(master) to track n  \
  table[tracknumber][\"HWOut_count\"]                 - the number of HWOuts of tracknumber, beginning with 1  \
  table[tracknumber][\"TrackID\"]                     - the unique id of the track as guid; can be used to get the MediaTrack using reaper.BR_GetMediaTrackByGUID(0, guid)  \
  table[tracknumber][HWOutIndex][\"outputchannel\"]   - the number of outputchannels of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"post\\_pre_fader\"] - the setting of post-pre-fader of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"volume\"]          - the volume of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"pan\"]             - the panning of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"mute\"]            - the mute-setting of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"phase\"]           - the phase-setting of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"source\"]          - the source/input of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"pan\\_law\"]         - pan-law, default is -1  \
  table[tracknumber][HWOutIndex][\"automationmode\"]  - the automation-mode of this HWOutIndex of tracknumber   \
      \
  See [GetTrackHWOut](#GetTrackHWOut) for more details on the individual settings, stored in the entries.\
  \
  returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "a table with all AllHWOut-entries of the current project",
    name = "ALLHWOUTS",
   },
   [2] = {
    type = "INTEGER",
    desc = "nil or 1, HWOuts will be applied to Track 0(MasterTrack) to table[\"number_of_tracks\"]; 2, HWOuts will be applied to the tracks with the guid TrackID",
    opt = {
     use = false,
    },
    name = "OPTION",
   },
  },
  sp_api = "ultraschall",
 },
 [1224] = {
  fname = "GetAllAUXSendReceives",
  label = "US_GetAllAUXSendReceives",
  run = "in/out",
  desc = "returns a table with all AUX-SendReceive-settings of all tracks, excluding master-track\
\
returned table is of structure:\
  table[\"AllAUXSendReceive\"]=true                               - signals, this is an AllAUXSendReceive-table. Don't alter!  \
  table[\"number\\_of_tracks\"]                                     - the number of tracks in this table, from track 1 to track n  \
  table[tracknumber][\"AUXSendReceives_count\"]                   - the number of AUXSendReceives of tracknumber, beginning with 1  \
  table[tracknumber][\"TrackID\"]                                 - the unique id of the track as guid; can be used to get the MediaTrack using reaper.BR_GetMediaTrackByGUID(0, guid)  \
  table[tracknumber][AUXSendReceivesIndex][\"recv\\_tracknumber\"] - the track, from which to receive audio in this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"recv\\_track\\_guid\"] - the guid of the receive-track; with that, you can be sure to get the right receive-track, even if trackorder changes  \
  table[tracknumber][AUXSendReceivesIndex][\"post\\_pre_fader\"]   - the setting of post-pre-fader of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"volume\"]            - the volume of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"pan\"]               - the panning of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"mute\"]              - the mute-setting of this AUXSendReceivesIndex  of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"mono\\_stereo\"]      - the mono/stereo-button-setting of this AUXSendReceivesIndex  of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"phase\"]             - the phase-setting of this AUXSendReceivesIndex  of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"chan\\_src\"]         - the audiochannel-source of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"snd\\_src\"]          - the send-to-channel-target of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"pan\\_law\"]           - pan-law, default is -1  \
  table[tracknumber][AUXSendReceivesIndex][\"midichanflag\"]      - the Midi-channel of this AUXSendReceivesIndex of tracknumber, leave it 0  \
  table[tracknumber][AUXSendReceivesIndex][\"automation\"]        - the automation-mode of this AUXSendReceivesIndex  of tracknumber  \
  \
  See [GetTrackAUXSendReceives](#GetTrackAUXSendReceives) for more details on the individual settings, stored in the entries.",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all SendReceive-entries of the current project.",
    name = "ALLAUXSENDRECEIVES",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of tracks in the AllMainSends-table",
    name = "NUMBER_OF_TRACKS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1225] = {
  fname = "ApplyAllAUXSendReceives",
  label = "US_ApplyAllAUXSendReceives",
  run = "in/out",
  desc = "takes a table, as returned by [GetAllAUXSendReceive](#GetAllAUXSendReceive) with all AUXSendReceive-settings of all tracks and applies it to all tracks.\
\
When you set option to 2, the individual entries will be applied to the tracks, that have the guids stored in table\
table[tracknumber][\"TrackID\"], otherwise, this function will apply it to track1 to trackn, which is the same as table[\"number\\_of_tracks\"].\
That way, you can create RoutingSnapshots, that will stay in the right tracks, even if they are ordered differently or when tracks have been added/deleted.\
\
\
expected table is of structure:\
  table[\"AllAUXSendReceive\"]=true                               - signals, this is an AllAUXSendReceive-table. Don't alter!  \
  table[\"number\\_of_tracks\"]                                     - the number of tracks in this table, from track 1 to track n  \
  table[tracknumber][\"AUXSendReceives_count\"]                   - the number of AUXSendReceives of tracknumber, beginning with 1  \
  table[tracknumber][\"TrackID\"]                                 - the unique id of the track as guid; can be used to get the MediaTrack using reaper.BR_GetMediaTrackByGUID(0, guid)  \
  table[tracknumber][AUXSendReceivesIndex][\"recv\\_tracknumber\"] - the track, from which to receive audio in this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"recv\\_track\\_guid\"] - the guid of the receive-track; with that, you can be sure to get the right receive-track, even if trackorder changes  \
  table[tracknumber][AUXSendReceivesIndex][\"post\\_pre_fader\"]   - the setting of post-pre-fader of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"volume\"]            - the volume of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"pan\"]               - the panning of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"mute\"]              - the mute-setting of this AUXSendReceivesIndex  of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"mono\\_stereo\"]      - the mono/stereo-button-setting of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"phase\"]             - the phase-setting of this AUXSendReceivesIndex  of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"chan\\_src\"]         - the audiochannel-source of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"snd\\_src\"]          - the send-to-channel-target of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"pan\\_law\"]           - pan-law, default is -1  \
  table[tracknumber][AUXSendReceivesIndex][\"midichanflag\"]      - the Midi-channel of this AUXSendReceivesIndex of tracknumber, leave it 0  \
  table[tracknumber][AUXSendReceivesIndex][\"automation\"]        - the automation-mode of this AUXSendReceivesIndex  of tracknumber  \
  \
  See [GetTrackAUXSendReceives](#GetTrackAUXSendReceives) for more details on the individual settings, stored in the entries.\
  \
  returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "a table with all AllAUXSendReceive-entries of the current project",
    name = "ALLAUXSENDRECEIVES",
   },
   [2] = {
    type = "INTEGER",
    desc = "nil or 1, AUXRecvs will be applied to Track 1 to table[\"number_of_tracks\"]; 2, AUXRecvs will be applied to the tracks with the guid TrackID",
    opt = {
     use = false,
    },
    name = "OPTION",
   },
  },
  sp_api = "ultraschall",
 },
 [1226] = {
  fname = "GetAllMainSendStates",
  label = "US_GetAllMainSendStates",
  run = "in/out",
  desc = "returns a table with all MainSend-settings of all tracks, excluding master-track.\
\
The MainSend-settings are the settings, if a certain track sends it's signal to the Master Track\
\
returned table is of structure:\
  Table[\"number\\_of_tracks\"]            - The number of tracks in this table, from track 1 to track n  \
  Table[\"MainSend\"]=true               - signals, this is an AllMainSends-table  \
  table[tracknumber][\"TrackID\"]        - the unique id of the track as guid; can be used to get the MediaTrack using reaper.BR_GetMediaTrackByGUID(0, guid)  \
  Table[tracknumber][\"MainSendOn\"]     - Send to Master on(1) or off(1)  \
  Table[tracknumber][\"ParentChannels\"] - the parent channels of this track  \
  \
  See [GetTrackMainSendState](#GetTrackMainSendState) for more details on the individual settings, stored in the entries.",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all AllMainSends-entries of the current project.",
    name = "ALLMAINSENDS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of tracks in the AllMainSends-table",
    name = "NUMBER_OF_TRACKS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1227] = {
  fname = "ApplyAllMainSendStates",
  label = "US_ApplyAllMainSendStates",
  run = "in/out",
  desc = "takes a table, as returned by [GetAllMainSendStates](#GetAllMainSendStates) with all MainSend-settings of all tracks and applies it to all tracks.\
\
The MainSend-settings are the settings, if a certain track sends it's signal to the Master Track.\
\
When you set option to 2, the individual entries will be applied to the tracks, that have the guids stored in table\
table[tracknumber][\"TrackID\"], otherwise, this function will apply it to track0 to trackn, which is the same as table[\"number\\_of_tracks\"].\
That way, you can create RoutingSnapshots, that will stay in the right tracks, even if they are ordered differently or when tracks have been added/deleted.\
\
This influences the MasterTrack as well!\
\
expected table is of structure:\
  Table[\"number\\_of_tracks\"]            - The number of tracks in this table, from track 1 to track n  \
  Table[\"MainSend\"]=true               - signals, this is an AllMainSends-table  \
  table[tracknumber][\"TrackID\"]        - the unique id of the track as guid; can be used to get the MediaTrack using reaper.BR_GetMediaTrackByGUID(0, guid)  \
  Table[tracknumber][\"MainSendOn\"]     - Send to Master on(1) or off(1)  \
  Table[tracknumber][\"ParentChannels\"] - the parent channels of this track  \
  \
  See [GetTrackMainSendState](#GetTrackMainSendState) for more details on the individual settings, stored in the entries.\
  \
  returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "a table with all AllMainSends-entries of the current project",
    name = "ALLMAINSENDS",
   },
   [2] = {
    type = "INTEGER",
    desc = "nil or 1, MainSend-settings will be applied to Track 1 to table[\"number_of_tracks\"]; 2, MasterSends will be applied to the tracks with the guid stored in table[tracknumber][\"TrackID\"].",
    opt = {
     use = false,
    },
    name = "OPTION",
   },
  },
  sp_api = "ultraschall",
 },
 [1228] = {
  fname = "AreHWOutsTablesEqual",
  label = "US_AreHWOutsTablesEqual",
  run = "in/out",
  desc = "Compares two HWOuts-tables, as returned by [GetAllHWOuts](#GetAllHWOuts) or [GetAllHWOuts2](#GetAllHWOuts)\
\
if option=2 then it will also compare, if the stored track-guids are the equal. Otherwise, it will only check the individual settings, even if the guids are different between the two tables.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the two tables are equal HWOuts; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "a table with all HWOut-settings of all tracks",
    name = "ALLHWOUTS",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all HWOut-settings of all tracks, that you want to compare to AllHWOuts",
    name = "ALLHWOUTS2",
   },
   [3] = {
    type = "INTEGER",
    desc = "nil or 1, to compare everything, except the stored TrackGuids; 2, include comparing the stored TrackGuids as well",
    opt = {
     use = false,
    },
    name = "OPTION",
   },
  },
  sp_api = "ultraschall",
 },
 [1229] = {
  fname = "AreMainSendsTablesEqual",
  label = "US_AreMainSendsTablesEqual",
  run = "in/out",
  desc = "Compares two AllMainSends-tables, as returned by [GetAllMainSendStates](#GetAllMainSendStates) or [GetAllMainSendStates2](#GetAllMainSendStates2)\
\
if option=2 then it will also compare, if the stored track-guids are the equal. Otherwise, it will only check the individual settings, even if the guids are different between the two tables.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the two tables are equal AllMainSends; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "a table with all AllMainSends-settings of all tracks",
    name = "ALLMAINSENDS",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all AllMainSends-settings of all tracks, that you want to compare to AllMainSends",
    name = "ALLMAINSENDS2",
   },
   [3] = {
    type = "INTEGER",
    desc = "nil or 1, to compare everything, except the stored TrackGuids; 2, include comparing the stored TrackGuids as well",
    opt = {
     use = false,
    },
    name = "OPTION",
   },
  },
  sp_api = "ultraschall",
 },
 [1230] = {
  fname = "AreAUXSendReceivesTablesEqual",
  label = "US_AreAUXSendReceivesTablesEqual",
  run = "in/out",
  desc = "Compares two AllAUXSendReceives-tables, as returned by [GetAllAUXSendReceives](#GetAllAUXSendReceives) or [GetAllAUXSendReceives2](#GetAllAUXSendReceives2)\
\
if option=2 then it will also compare, if the stored track-guids are the equal. Otherwise, it will only check the individual settings, even if the guids are different between the two tables.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the two tables are equal AllMainSends; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TABLE",
    desc = "a table with all AllAUXSendReceives-settings of all tracks",
    name = "ALLAUXSENDRECEIVES",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all AllAUXSendReceives-settings of all tracks, that you want to compare to AllAUXSendReceives",
    name = "ALLAUXSENDRECEIVES2",
   },
   [3] = {
    type = "INTEGER",
    desc = "nil or 1, to compare everything, except the stored TrackGuids; 2, include comparing the stored TrackGuids as well",
    opt = {
     use = false,
    },
    name = "OPTION",
   },
  },
  sp_api = "ultraschall",
 },
 [1231] = {
  fname = "IsValidTrackString",
  label = "US_IsValidTrackString",
  run = "in/out",
  desc = "checks, whether a given trackstring is a valid one. Will also return all valid numbers, from trackstring, that can be used as tracknumbers, as an array.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, is a valid trackstring; false, is not a valid trackstring",
    name = "VALID",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of entries found in trackstring",
    name = "COUNT",
   },
   [3] = {
    type = "ARRAY",
    desc = "an array that contains all available tracknumbers",
    name = "INDIVIDUAL_TRACKNUMBERS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the trackstring to check, if it's a valid one",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1232] = {
  fname = "IsValidTrackStateChunk",
  label = "US_IsValidTrackStateChunk",
  run = "in/out",
  desc = "returns, if a TrackStateChunk is a valid statechunk\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if the string is a valid statechunk; false, if not a valid statechunk",
    name = "VALID",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string to check, if it's a valid TrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1233] = {
  fname = "CreateTrackString",
  label = "US_CreateTrackString",
  run = "in/out",
  desc = "returns a string with the all numbers from firstnumber to lastnumber, separated by a ,\
e.g. firstnumber=4, lastnumber=8 -> 4,5,6,7,8\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with all tracknumbers, separated by a ,",
    name = "TRACKSTRING",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number, with which the string starts",
    name = "FIRSTNUMBER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number, with which the string ends",
    name = "LASTNUMBER",
   },
   [3] = {
    type = "INTEGER",
    desc = "how many numbers shall be skipped inbetween. Can lead to a different lastnumber, when step is not 1! nil or invalid value=1",
    name = "STEP",
   },
  },
  sp_api = "ultraschall",
 },
 [1234] = {
  fname = "CreateTrackString_SelectedTracks",
  label = "US_CreateTrackString_SelectedTracks",
  run = "in/out",
  desc = "Creates a string with all numbers from selected tracks, separated by a ,\
\
Returns an empty string, if no tracks are selected.",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with the tracknumbers, separated by a string",
    name = "TRACKSTRING",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1235] = {
  fname = "InsertTrack_TrackStateChunk",
  label = "US_InsertTrack_TrackStateChunk",
  run = "in/out",
  desc = "Creates a new track at the end of the project and sets it's trackstate, using the parameter trackstatechunk.\
Returns true, if it succeeded and the newly created MediaTrack.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if creation succeeded, false if not",
    name = "RETVAL",
   },
   [2] = {
    type = "MEDIATRACK",
    desc = "the newly created track, as MediaItem-trackobject",
    name = "MEDIATRACK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the rpp-xml-Trackstate-Chunk, as created by reaper.GetTrackStateChunk or <a href=\"#GetProject_TrackStateChunk\">GetProject_TrackStateChunk</a>",
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1236] = {
  fname = "RemoveDuplicateTracksInTrackstring",
  label = "US_RemoveDuplicateTracksInTrackstring",
  run = "in/out",
  desc = "Sorts tracknumbers in trackstring and throws out duplicates. It also throws out entries, that are no numbers.\
Returns the \"cleared\" trackstring as string and as array, as well as the number of entries. \
\
Returns -1 in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the cleared trackstring, -1 in case of error",
    name = "TRACKSTRING",
   },
   [3] = {
    type = "ARRAY",
    desc = "the \"cleared\" trackstring as an array",
    name = "TRACKSTRINGARRAY",
   },
   [4] = {
    type = "INTEGER",
    desc = "the number of entries in the trackstring",
    name = "NUMBER_OF_ENTRIES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tracknumbers, separated by a comma",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1237] = {
  fname = "IsTrackObjectTracknumber",
  label = "US_IsTrackObjectTracknumber",
  run = "in/out",
  desc = "returns true, if MediaTrack has the tracknumber \"tracknumber\"; false if not.\
\
Returns nil in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true if track is tracknumber, false if not",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of track, so in case of false, you know it's number",
    name = "TRACKNUMBER",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack of which you want to check it's number",
    name = "TRACK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the tracknumber you want to check for",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1238] = {
  fname = "InverseTrackstring",
  label = "US_InverseTrackstring",
  run = "in/out",
  desc = "returns a newtrackstring with numbers, that are NOT in trackstring, in the range between 0 and limit\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the tracknumbers, that are NOT in the parameter trackstring, from 0 to limit",
    name = "INV_TRACKSTRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tracknumbers, separated with a ,",
    name = "TRACKSTRING",
   },
   [2] = {
    type = "INTEGER",
    desc = "the maximum tracknumber to include. Use reaper.CountTracks(0) function to use the maximum tracks in current project",
    name = "LIMIT",
   },
  },
  sp_api = "ultraschall",
 },
 [1239] = {
  fname = "CountItemsInTrackStateChunk",
  label = "US_CountItemsInTrackStateChunk",
  run = "in/out",
  desc = "returns the number of items in a trackstatechunk\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of items in the trackstatechunk",
    name = "COUNTITEMS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1240] = {
  fname = "GetItemStateChunkFromTrackStateChunk",
  label = "US_GetItemStateChunkFromTrackStateChunk",
  run = "in/out",
  desc = "Returns a mediaitemstatechunk of the idx'th item in trackstatechunk.\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success, false in case of error",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "number of items in the trackstatechunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the item you want to have returned as mediaitemstatechunk",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [1241] = {
  fname = "AddMediaItemStateChunk_To_TrackStateChunk",
  label = "US_AddMediaItemStateChunk_To_TrackStateChunk",
  run = "in/out",
  desc = "Adds the item mediaitemstatechunk into trackstatechunk and returns this altered trackstatechunk.\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the new trackstatechunk with mediaitemstatechunk added",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
   [2] = {
    type = "STRING",
    desc = "a mediaitemstatechunk, as returned by reaper's api function reaper.GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1242] = {
  fname = "RemoveMediaItem_TrackStateChunk",
  label = "US_RemoveMediaItem_TrackStateChunk",
  run = "in/out",
  desc = "Deletes the idx'th item from trackstatechunk and returns this altered trackstatechunk.\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success, false in case of error",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the new trackstatechunk with the idx'th item deleted",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the item you want to delete",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [1243] = {
  fname = "RemoveMediaItemByIGUID_TrackStateChunk",
  label = "US_RemoveMediaItemByIGUID_TrackStateChunk",
  run = "in/out",
  desc = "Deletes the item with the iguid IGUID from trackstatechunk and returns this altered trackstatechunk.\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success, false in case of error",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the new trackstatechunk with the IGUID-item deleted",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
   [2] = {
    type = "STRING",
    desc = "the IGUID of the item you want to delete",
    name = "IGUID",
   },
  },
  sp_api = "ultraschall",
 },
 [1244] = {
  fname = "RemoveMediaItemByGUID_TrackStateChunk",
  label = "US_RemoveMediaItemByGUID_TrackStateChunk",
  run = "in/out",
  desc = "Deletes the item with the guid GUID from trackstatechunk and returns this altered trackstatechunk.\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success, false in case of error",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the new trackstatechunk with the GUID-item deleted",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
   [2] = {
    type = "STRING",
    desc = "the GUID of the item you want to delete",
    name = "GUID",
   },
  },
  sp_api = "ultraschall",
 },
 [1245] = {
  fname = "OnlyTracksInBothTrackstrings",
  label = "US_OnlyTracksInBothTrackstrings",
  run = "in/out",
  desc = "returns a new trackstring, that contains only the tracknumbers, that are in trackstring1 and trackstring2.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the cleared trackstring, -1 in case of error",
    name = "TRACKSTRING",
   },
   [3] = {
    type = "ARRAY",
    desc = "the \"cleared\" trackstring as an array",
    name = "TRACKSTRINGARRAY",
   },
   [4] = {
    type = "INTEGER",
    desc = "the number of entries in the trackstring",
    name = "NUMBER_OF_ENTRIES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string with the tracknumbers, separated by commas",
    name = "TRACKSTRING1",
   },
   [2] = {
    type = "STRING",
    desc = "a string with the tracknumbers, separated by commas",
    name = "TRACKSTRING2",
   },
  },
  sp_api = "ultraschall",
 },
 [1246] = {
  fname = "OnlyTracksInOneTrackstring",
  label = "US_OnlyTracksInOneTrackstring",
  run = "in/out",
  desc = "returns a new trackstring, that contains only the tracknumbers, that are in either trackstring1 or trackstring2, NOT in both!\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1 in case of error, 1 in case of success",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the cleared trackstring, -1 in case of error",
    name = "TRACKSTRING",
   },
   [3] = {
    type = "ARRAY",
    desc = "the \"cleared\" trackstring as an array",
    name = "TRACKSTRINGARRAY",
   },
   [4] = {
    type = "INTEGER",
    desc = "the number of entries in the trackstring",
    name = "NUMBER_OF_ENTRIES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string with the tracknumbers, separated by commas",
    name = "TRACKSTRING1",
   },
   [2] = {
    type = "STRING",
    desc = "a string with the tracknumbers, separated by commas",
    name = "TRACKSTRING2",
   },
  },
  sp_api = "ultraschall",
 },
 [1247] = {
  fname = "SetMediaItemStateChunk_in_TrackStateChunk",
  label = "US_SetMediaItemStateChunk_in_TrackStateChunk",
  run = "in/out",
  desc = "Overwrites the idx'th item from trackstatechunk with mediaitemstatechunk and returns this altered trackstatechunk.\
\
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true in case of success, false in case of error",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the new trackstatechunk with the idx'th item replaced",
    name = "TRACKSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a trackstatechunk, as returned by reaper's api function reaper.GetTrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the item you want to delete",
    name = "IDX",
   },
   [3] = {
    type = "STRING",
    desc = "a mediaitemstatechunk, as returned by reaper's api function reaper.GetItemStateChunk",
    name = "MEDIAITEMSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1248] = {
  fname = "GetAllMediaItemsFromTrackStateChunk",
  label = "US_GetAllMediaItemsFromTrackStateChunk",
  run = "in/out",
  desc = "Returns a MediaItemStateChunkArray with all items in trackstatechunk.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of MediaItemStateChunks in the returned array. -1 in case of error",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array with all MediaItemStateChunks from trackstatechunk",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a trackstatechunk, as returned by functions like reaper.GetTrackStateChunk",
    name = "TRACKSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1249] = {
  fname = "CreateTrackString_AllTracks",
  label = "US_CreateTrackString_AllTracks",
  run = "in/out",
  desc = "Returns a trackstring with all tracknumbers from the current project.\
\
Returns an empty string, if no track is available.",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with all tracknumbers, separated by commas.",
    name = "TRACKSTRING",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1250] = {
  fname = "GetTrackLength",
  label = "US_GetTrackLength",
  run = "in/out",
  desc = "Returns the length of a track, that means, the end of the last item in track Tracknumber.\
Will return -1, in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the length of the track in seconds",
    name = "LENGTH",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber, whose length you want to know",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1251] = {
  fname = "GetLengthOfAllMediaItems_Track",
  label = "US_GetLengthOfAllMediaItems_Track",
  run = "in/out",
  desc = "Returns the length of all MediaItems in track, combined.\
Will return -1, in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the length of all MediaItems in the track combined, in seconds",
    name = "LENGTH",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber, whose length you want to know; 1, track 1; 2, track 2, etc",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1252] = {
  fname = "ApplyActionToTrack",
  label = "US_ApplyActionToTrack",
  run = "in/out",
  desc = "Applies action to the tracks, given by trackstring\
The action given must support applying itself to selected tracks.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, running action was successful; false, running the action was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string with all tracknumbers, separated by a comma; 1 for the first track, 2 for the second",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1253] = {
  fname = "InsertTrackAtIndex",
  label = "US_InsertTrackAtIndex",
  run = "in/out",
  desc = "Inserts one or more tracks at index.\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "a trackstring with all newly created tracknumbers",
    name = "TRACKSTRING",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of newly created tracks",
    name = "NEW_TRACK_COUNT",
   },
   [3] = {
    type = "ARRAY",
    desc = "an array with the MediaTrack-objects of all newly created tracks",
    name = "TRACKARRAY_NEWTRACKS",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index, at which to include the new tracks; 0, for including before the first track",
    name = "INDEX",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of tracks that you want to create; 0 for including before track 1; number of tracks+1, include new tracks after last track",
    name = "NUMBER_OF_TRACKS",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, set the tracks with default settings/fx/etc; false, create new track without any defaults",
    name = "WANTDEFAULTS",
   },
  },
  sp_api = "ultraschall",
 },
 [1254] = {
  fname = "MoveTracks",
  label = "US_MoveTracks",
  run = "in/out",
  desc = "Moves tracks in trackstring to position targetindex. You can also set, if the tracks shall become folders.\
Multiple tracks in trackstring will be put together, so track 2, 4, 6 would become 1, 2, 3, when moved above the first track!\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, moving was successful; false, moving wasn't successful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string with all tracknumbers of the tracks you want to move, separated by commas",
    name = "TRACKSTRING",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index, to which to move the tracks; 0, move tracks before track 1; number of tracks+1, move after the last track",
    name = "TARGETINDEX",
   },
   [3] = {
    type = "INTEGER",
    desc = "make tracks a folder or not\
0, for normal, \
1, as child of track preceding track specified by makepreviousfolder\
2, if track preceding track specified by makepreviousfolder is last track in folder, extend folder",
    name = "MAKEPREVIOUSFOLDER",
   },
  },
  sp_api = "ultraschall",
 },
 [1255] = {
  fname = "CreateTrackString_ArmedTracks",
  label = "US_CreateTrackString_ArmedTracks",
  run = "in/out",
  desc = "Gets a trackstring with tracknumbers of all armed tracks in it.\
\
Returns \"\" if no track is armed.",
  out = {
   [1] = {
    type = "STRING",
    desc = "a trackstring with the tracknumbers of all armed tracks as comma separated csv-string, eg: \"1,3,4,7\"",
    name = "TRACKSTRING",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1256] = {
  fname = "CreateTrackString_UnarmedTracks",
  label = "US_CreateTrackString_UnarmedTracks",
  run = "in/out",
  desc = "Gets a trackstring with tracknumbers of all unarmed tracks in it.\
\
Returns \"\" if all tracks are armed.",
  out = {
   [1] = {
    type = "STRING",
    desc = "a trackstring with the tracknumbers of all unarmed tracks as comma separated csv-string, eg: \"1,3,4,7\"",
    name = "TRACKSTRING",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1257] = {
  fname = "CreateTrackStringByGUID",
  label = "US_CreateTrackStringByGUID",
  run = "in/out",
  desc = "returns a trackstring with all tracks, as given by the GUIDs in the comma-separated-csv-string guid_csv_string.\
\
returns \"\" in case of an error, like no track available or an invalid string",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with all the tracknumbers of the tracks given as GUIDs in guid_csv_string",
    name = "TRACKSTRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a comma-separated csv-string, that includes all GUIDs of all track to be included in the trackstring.",
    name = "GUID_CSV_STRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1258] = {
  fname = "CreateTrackStringByTracknames",
  label = "US_CreateTrackStringByTracknames",
  run = "in/out",
  desc = "returns a trackstring with all tracks, as given by the tracknames in the newline(!)-separated-csv-string guid_csv_string.\
\
returns \"\" in case of an error, like no track available or an invalid string",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with all the tracknumbers of the tracks given as tracknames in tracknames_csv_string",
    name = "TRACKSTRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a newline(!)-separated csv-string, that includes all tracknames of all track to be included in the trackstring. Tracknames are case sensitive!",
    name = "TRACKNAMES_CSV_STRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1259] = {
  fname = "CreateTrackStringByMediaTracks",
  label = "US_CreateTrackStringByMediaTracks",
  run = "in/out",
  desc = "returns a trackstring with all tracks, as given in the array MediaTrackArray\
\
returns \"\" in case of an error, like no track available or an invalid string",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with all the tracknumbers of the MediaTrack-objects given in parameter MediaTrackArray",
    name = "TRACKSTRING",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "an array, that includes all MediaTrack-objects to be included in the trackstring; a nil-entry is seen as the end of the array",
    name = "MEDIATRACKARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [1260] = {
  fname = "GetTracknumberByGuid",
  label = "US_GetTracknumberByGuid",
  run = "in/out",
  desc = "returns the tracknumber and track of a guid. The track must be in the currently active project!\
\
Supports the returned guids by reaper.BR_GetMediaTrackGUID and reaper.GetTrackGUID.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the track; 0, for master track; 1, for track 1; 2, for track 2, etc. -1, in case of an error",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack-object of the requested track; nil, if no track is found",
    name = "TR",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the guid of the track, that you want to request",
    name = "GUI",
   },
  },
  sp_api = "ultraschall",
 },
 [1261] = {
  fname = "DeleteTracks_TrackString",
  label = "US_DeleteTracks_TrackString",
  run = "in/out",
  desc = "deletes all tracks in trackstring\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting it was successful; false, setting it was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string with all tracknumbers, separated by commas",
    name = "TRACKSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1262] = {
  fname = "AnyTrackMute",
  label = "US_AnyTrackMute",
  run = "in/out",
  desc = "returns true, if any track is muted, otherwise returns false.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if any track is muted; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, include the master-track as well; false, don't include master-track",
    opt = {
     use = false,
    },
    name = "MASTER",
   },
  },
  sp_api = "ultraschall",
 },
 [1263] = {
  fname = "AnyTrackRecarmed",
  label = "US_AnyTrackRecarmed",
  run = "in/out",
  desc = "Returns true, if any track is recarmed.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, at least one track is recarmed; false, no track is recarmed",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1264] = {
  fname = "AnyTrackPhased",
  label = "US_AnyTrackPhased",
  run = "in/out",
  desc = "Returns true, if any track has phase-invert activated.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, at least one track has an activated phase-invert; false, no track is phase-inverted",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1265] = {
  fname = "AnyTrackRecMonitored",
  label = "US_AnyTrackRecMonitored",
  run = "in/out",
  desc = "Returns true, if any track has monitoring of recinput activated.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, at least one track has an activated rec-monitoring; false, no track is rec-monitored",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1266] = {
  fname = "AnyTrackHiddenTCP",
  label = "US_AnyTrackHiddenTCP",
  run = "in/out",
  desc = "Returns true, if any track is hidden in Track Control Panel.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, at least one track is hidden in TCP; false, no track is hidden",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, include the master-track; false, don't include the master-track",
    opt = {
     use = false,
    },
    name = "MASTER",
   },
  },
  sp_api = "ultraschall",
 },
 [1267] = {
  fname = "AnyTrackHiddenMCP",
  label = "US_AnyTrackHiddenMCP",
  run = "in/out",
  desc = "Returns true, if any track is hidden in Mixer Control Panel.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, at least one track is hidden in MCP; false, no track is hidden",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, include the master-track; false, don't include the master-track",
    opt = {
     use = false,
    },
    name = "MASTER",
   },
  },
  sp_api = "ultraschall",
 },
 [1268] = {
  fname = "AnyTrackFreeItemPositioningMode",
  label = "US_AnyTrackFreeItemPositioningMode",
  run = "in/out",
  desc = "Returns true, if any track has free item positioning mode(freemode) activated.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, at least one track has freemode activated; false, no track has freemode-activated",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1269] = {
  fname = "AnyTrackFXBypass",
  label = "US_AnyTrackFXBypass",
  run = "in/out",
  desc = "Returns true, if any track has fx-bypass activated.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, at least one track has fx bypass activated; false, no track has fx-bypass activated",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, include the master-track; false, don't include the master-track",
    opt = {
     use = false,
    },
    name = "MASTER",
   },
  },
  sp_api = "ultraschall",
 },
 [1270] = {
  fname = "SetTrack_LastTouched",
  label = "US_SetTrack_LastTouched",
  run = "in/out",
  desc = "Sets a track to be last touched track.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was not successful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track, which you want to set as last touched track",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1271] = {
  fname = "GetTrackByTrackName",
  label = "US_GetTrackByTrackName",
  run = "in/out",
  desc = "returns all tracks with a certain name.\
\
You can set case-sensitivity, whether pattern-matchin is possible and whether the name shall be used strictly.\
For instance, if you want to look for a track named exactly \"JaM.-Enlightened\" you set case_sensitive=false and escaped_strict=2. That way, tracks names \"JaM.*Enlightened\" will be ignored.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found tracks",
    name = "NUMBER_OF_FOUND_TRACKS",
   },
   [2] = {
    type = "TABLE",
    desc = "the found tracks as table",
    name = "FOUND_TRACKS",
   },
   [3] = {
    type = "TABLE",
    desc = "the found tracknames",
    name = "FOUND_TRACKNAMES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the trackname to look for",
    name = "TRACKNAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, take care of case-sensitivity; false, don't take case-sensitivity into account",
    name = "CASE_SENSITIVE",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, use trackname as matching-pattern, will find all tracknames following the pattern(Ja.-m -> Jam, Jam123Police, JaABBAm)\
1, escape trackname off all magic characters, will find all tracknames with the escaped pattern in it (Ja.-m -> Ja.-m, Jam.-boree)\
2, strict, will only find tracks with the exact trackname-string in their name(Jam -> Jam)",
    name = "ESCAPED_STRICT",
   },
  },
  sp_api = "ultraschall",
 },
 [1272] = {
  fname = "CollapseTrackHeight",
  label = "US_CollapseTrackHeight",
  run = "in/out",
  desc = "Collapses the height of a track to the minimum height as set by the theme\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, collapsing was successful; false, collapsing was not successful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track, which you want to collapse in height",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1273] = {
  fname = "SetTrack_Trackheight_Force",
  label = "US_SetTrack_Trackheight_Force",
  run = "in/out",
  desc = "Sets the trackheight of a track. Forces trackheight beyond limits set by the theme.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, collapsing was successful; false, collapsing was not successful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track, which you want to set the height of",
    name = "TRACK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the trackheight in pixels, 0 and higher",
    name = "TRACKHEIGT",
   },
  },
  sp_api = "ultraschall",
 },
 [1274] = {
  fname = "GetAllVisibleTracks_Arrange",
  label = "US_GetAllVisibleTracks_Arrange",
  run = "in/out",
  desc = "returns a trackstring with all tracks currently visible in the arrange-view.\
\
Note: Item who start above and end below the visible arrangeview will be treated as not completely visible!\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "STRING",
    desc = "a string with holds all tracknumbers from all found tracks, separated by a comma; beginning with 1 for the first track",
    name = "TRACKSTRING",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of tracks found",
    name = "TRACKTABLE_COUNT",
   },
   [3] = {
    type = "TABLE",
    desc = "a table which holds all MediaTrack-objects",
    name = "TRACKTABLE",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "nil or true, check for visibility of the master-track; false, don't include the master-track",
    opt = {
     use = false,
    },
    name = "MASTER_TRACK",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "nil or false, all tracks including partially visible ones; true, only fully visible tracks",
    opt = {
     use = false,
    },
    name = "COMPLETELY_VISIBLE",
   },
  },
  sp_api = "ultraschall",
 },
 [1275] = {
  fname = "IsTrackVisible",
  label = "US_IsTrackVisible",
  run = "in/out",
  desc = "returns if a track is currently visible in arrangeview\
  \
returns nil in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, track is visible; false, track is not visible",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose visibility you want to query",
    name = "TRACK",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "false, all tracks including partially visible ones; true, only fully visible tracks",
    name = "COMPLETELY_VISIBLE",
   },
  },
  sp_api = "ultraschall",
 },
 [1276] = {
  fname = "EventManager_EnumerateStartupEvents",
  label = "US_EventManager_EnumerateStartupEvents",
  run = "in/out",
  desc = "Enumerates already existing startupevents, that shall be automatically run at startup of the Ultraschall Event Manager.\
\
That means, if you start the EventManager, it will be started automatically to the EventManager-checking-queue, without the need of registering it by hand.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the EventIdentifier of the startup-event",
    name = "EVENTIDENTIFIER",
   },
   [2] = {
    type = "STRING",
    desc = "a name for the startupevent",
    name = "EVENTNAME",
   },
   [3] = {
    type = "STRING",
    desc = "the ScriptIdentifier of the script, which added this event to the StartUpEvents",
    name = "CALLERSCRIPTIDENTIFIER",
   },
   [4] = {
    type = "INTEGER",
    desc = "only check all x seconds; 0, for constant checking\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    name = "CHECKALLXSECONDS",
   },
   [5] = {
    type = "INTEGER",
    desc = "only check for x seconds; 0, check until the event is removed\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    name = "CHECKFORXSECONDS",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "if the event occurred: \
   true, run the actions only once; \
   false, run until the CheckFunction returns false again",
    name = "STARTACTIONSONCEDURINGTRUE",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, the event shall be started as paused; false, the event shall be run immediately",
    name = "PAUSED",
   },
   [8] = {
    type = "FUNCTION",
    desc = "the function, which shall check if the event occurred",
    name = "CHECKFUNCTION",
   },
   [9] = {
    type = "INTEGER",
    desc = "the number of actions currently registered with this event",
    name = "NUMBEROFACTIONS",
   },
   [10] = {
    type = "TABLE",
    desc = "a table which holds all actions and their accompanying sections, who are run when the event occurred\
each entry of the table is of the format \"actioncommandid,section\", e.g.:\
\
Actions[1]=\"1007,0\"\
Actions[2]=\"1012,0\"",
    name = "ACTIONS",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the StartUp-event, whose attributes you want to get; 1 for the first, etc",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1277] = {
  fname = "EventManager_EnumerateStartupEvents2",
  label = "US_EventManager_EnumerateStartupEvents2",
  run = "in/out",
  desc = "Enumerates already existing startupevents by an EventIdentifier. \
\
StartupEvents are events, that shall be automatically run at startup of the Ultraschall Event Manager.\
That means, if you start the EventManager, it will be started automatically to the EventManager-checking-queue, without the need of registering it by hand.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the StartupEvent within all StartUpEvents",
    name = "INDEX",
   },
   [2] = {
    type = "STRING",
    desc = "the EventIdentifier of the startup-event",
    name = "EVENTIDENTIFIER",
   },
   [3] = {
    type = "STRING",
    desc = "a name for the startupevent",
    name = "EVENTNAME",
   },
   [4] = {
    type = "STRING",
    desc = "the ScriptIdentifier of the script, which added this event to the StartUpEvents",
    name = "CALLERSCRIPTIDENTIFIER",
   },
   [5] = {
    type = "INTEGER",
    desc = "only check all x seconds; 0, for constant checking\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    name = "CHECKALLXSECONDS",
   },
   [6] = {
    type = "INTEGER",
    desc = "only check for x seconds; 0, check until the event is removed\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    name = "CHECKFORXSECONDS",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "if the event occurred: \
   true, run the actions only once; \
   false, run until the CheckFunction returns false again",
    name = "STARTACTIONSONCEDURINGTRUE",
   },
   [8] = {
    type = "BOOLEAN",
    desc = "true, the event shall be started as paused; false, the event shall be run immediately",
    name = "PAUSED",
   },
   [9] = {
    type = "FUNCTION",
    desc = "the function, which shall check if the event occurred",
    name = "CHECKFUNCTION",
   },
   [10] = {
    type = "INTEGER",
    desc = "the number of actions currently registered with this event",
    name = "NUMBEROFACTIONS",
   },
   [11] = {
    type = "TABLE",
    desc = "a table which holds all actions and their accompanying sections, who are run when the event occurred\
each entry of the table is of the format \"actioncommandid,section\", e.g.:\
\
Actions[1]=\"1007,0\"\
Actions[2]=\"1012,0\"",
    name = "ACTIONS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the identifier of the StartupEvent, that you want to enumerate",
    name = "EVENTIDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1278] = {
  fname = "EventManager_AddEvent",
  label = "US_EventManager_AddEvent",
  run = "in/out",
  desc = "Adds a new event to the Ultraschall Event Manager-checking-queue.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the unique identifier for this registered event, which can be used later for setting, deleting, etc",
    name = "EVENT_IDENTIFIER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a name for the event, which you can choose freely; duplicated eventnames are allowed",
    name = "EVENTNAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "only check all x seconds; 0, for constant checking\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    name = "CHECKALLXSECONDS",
   },
   [3] = {
    type = "INTEGER",
    desc = "only check for x seconds; 0, check until the event is removed\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    name = "CHECKFORXSECONDS",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "if the event occurred: \
   true, run the actions only once; \
   false, run until the CheckFunction returns false again",
    name = "STARTACTIONSONCEDURINGTRUE",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "false, register the event and check for it immediately; true, register the event but don't check for it yet",
    name = "EVENTPAUSED",
   },
   [6] = {
    type = "FUNCTION",
    desc = "the function, which shall check if the event occurred\
this function must return true if the event occurred and false, if not\
No global variables allowed! Instead, the eventmanager will pass to it as first parameter a table which can be used for storing information",
    name = "CHECKFUNCTION",
   },
   [7] = {
    type = "TABLE",
    desc = "a table which holds all actions and their accompanying sections, who shall be run when the event occurred\
each entry of the table must be of the format \"actioncommandid,section\", e.g.:\
\
Actions[1]=\"1007,0\"\
Actions[2]=\"1012,0\"\
\
You can have as many actions as you like, but be aware, that running too many actions may delay further eventchecking!",
    name = "ACTIONS",
   },
  },
  sp_api = "ultraschall",
 },
 [1279] = {
  fname = "EventManager_IsValidEventIdentifier",
  label = "US_EventManager_IsValidEventIdentifier",
  run = "in/out",
  desc = "Checks, if a string is a valid EventIdentifier (valid) and currently registered with an event(valid_inuse) in the Ultraschall-EventManager-checking-queue.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, valid EventIdentifier; false, no valid EventIdentifier",
    name = "VALID",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, valid EventIdentifier, which is currently registered and in use by the EventManager; false, no currently registered EventIdentifier",
    name = "VALID_INUSE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the unique identifier of the registered event, that you want to check",
    name = "EVENT_IDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1280] = {
  fname = "EventManager_RemoveEvent",
  label = "US_EventManager_RemoveEvent",
  run = "in/out",
  desc = "Removes a new event to the Ultraschall Event Manager-checking-queue.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, removing was successful; false, removing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the unique identifier of the registered event, which you want to remove from the EventManager",
    name = "EVENT_IDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1281] = {
  fname = "EventManager_RemoveAllEvents_Script",
  label = "US_EventManager_RemoveAllEvents_Script",
  run = "in/out",
  desc = "Removes all registered events from a script with a certain ScriptIdentifier in the Ultraschall Event Manager-checking-queue.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, removing was successful; false, removing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the unique identifier of the registered event, which you want to remove from the EventManager",
    name = "SCRIPTIDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1282] = {
  fname = "EventManager_SetEvent",
  label = "US_EventManager_SetEvent",
  run = "in/out",
  desc = "Sets the attributes of an already added event in the Ultraschall Event Manager-checking-queue.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting wasn't successful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the EventIdentifier of the registered event, which you want to set",
    name = "EVENTIDENTIFIER",
   },
   [2] = {
    type = "STRING",
    desc = "a name for the event, which you can choose freely; duplicated eventnames are allowed; nil, keep the old name",
    opt = {
     use = false,
    },
    name = "EVENTNAME",
   },
   [3] = {
    type = "INTEGER",
    desc = "only check all x seconds; 0, for constant checking; nil, keep the old value\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    opt = {
     use = false,
    },
    name = "CHECKALLXSECONDS",
   },
   [4] = {
    type = "INTEGER",
    desc = "only check for x seconds; 0, check until the event is removed; nil, keep the old value\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    opt = {
     use = false,
    },
    name = "CHECKFORXSECONDS",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "if the event occurred: \
   true, run the actions only once; \
   false, run until the CheckFunction returns false again\
   nil, keep the old value",
    opt = {
     use = false,
    },
    name = "STARTACTIONSONCEDURINGTRUE",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "false, register the event and check for it immediately; true, register the event but don't check for it yet; nil, keep the old value",
    opt = {
     use = false,
    },
    name = "EVENTPAUSED",
   },
   [7] = {
    type = "FUNCTION",
    desc = "the function, which shall check if the event occurred; nil, keep the old function\
this function must return true if the event occurred and false, if not\
No global variables allowed! Instead, the eventmanager will pass to the function as first parameter a table which can be used for storing information",
    opt = {
     use = false,
    },
    name = "CHECKFUNCTION",
   },
   [8] = {
    type = "TABLE",
    desc = "a table which holds all actions and their accompanying sections, who shall be run when the event occurred; nil, keep the old actionlist\
each entry of the table must be of the format \"actioncommandid,section\", e.g.:\
\
Actions[1]=\"1007,0\"\
Actions[2]=\"1012,0\"\
\
You can have as many actions as you like, but be aware, that running too many actions may delay further eventchecking!",
    opt = {
     use = false,
    },
    name = "ACTIONS",
   },
  },
  sp_api = "ultraschall",
 },
 [1283] = {
  fname = "EventManager_EnumerateEvents",
  label = "US_EventManager_EnumerateEvents",
  run = "in/out",
  desc = "Gets the attributes of an already added event in the Ultraschall Event Manager-checking-queue.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the EventIdentifier of the registered event",
    name = "EVENTIDENTIFIER",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the event",
    name = "EVENTNAME",
   },
   [3] = {
    type = "STRING",
    desc = "the ScriptIdentifier of the script, who registered the event",
    name = "CALLERSCRIPTIDENTIFIER",
   },
   [4] = {
    type = "INTEGER",
    desc = "only check all x seconds; 0, for constant checking\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    name = "CHECKALLXSECONDS",
   },
   [5] = {
    type = "INTEGER",
    desc = "only check for x seconds; 0, check until the event is removed\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    name = "CHECKFORXSECONDS",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "if the event occurred: \
   true, run the actions only once\
   false, run until the CheckFunction returns false again",
    name = "STARTACTIONSONCEDURINGTRUE",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, eventcheck is currently paused; false, eventcheck is currently running",
    name = "EVENTPAUSED",
   },
   [8] = {
    type = "FUNCTION",
    desc = "the function, which shall check if the event occurred",
    name = "CHECKFUNCTION",
   },
   [9] = {
    type = "INTEGER",
    desc = "the number of actions currently registered with this event",
    name = "NUMBEROFACTIONS",
   },
   [10] = {
    type = "TABLE",
    desc = "a table which holds all actions and their accompanying sections, who are run when the event occurred\
each entry of the table is of the format \"actioncommandid,section\", e.g.:\
\
Actions[1]=\"1007,0\"\
Actions[2]=\"1012,0\"",
    name = "ACTIONS",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the id of the currently registered event, of which you want to have the attributes; starting with 1 for the first",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [1284] = {
  fname = "EventManager_EnumerateEvents2",
  label = "US_EventManager_EnumerateEvents2",
  run = "in/out",
  desc = "Gets the attributes of an already added event in the Ultraschall Event Manager-checking-queue.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the EventIdentifier of the registered event",
    name = "EVENTIDENTIFIER",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the event",
    name = "EVENTNAME",
   },
   [3] = {
    type = "STRING",
    desc = "the ScriptIdentifier of the script, who registered the event",
    name = "CALLERSCRIPTIDENTIFIER",
   },
   [4] = {
    type = "INTEGER",
    desc = "only check all x seconds; 0, for constant checking\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    name = "CHECKALLXSECONDS",
   },
   [5] = {
    type = "INTEGER",
    desc = "only check for x seconds; 0, check until the event is removed\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    name = "CHECKFORXSECONDS",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "if the event occurred: \
   true, run the actions only once\
   false, run until the CheckFunction returns false again",
    name = "STARTACTIONSONCEDURINGTRUE",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, eventcheck is currently paused; false, eventcheck is currently running",
    name = "EVENTPAUSED",
   },
   [8] = {
    type = "FUNCTION",
    desc = "the function, which shall check if the event occurred",
    name = "CHECKFUNCTION",
   },
   [9] = {
    type = "INTEGER",
    desc = "the number of actions currently registered with this event",
    name = "NUMBEROFACTIONS",
   },
   [10] = {
    type = "TABLE",
    desc = "a table which holds all actions and their accompanying sections, who are run when the event occurred\
each entry of the table is of the format \"actioncommandid,section\", e.g.:\
\
Actions[1]=\"1007,0\"\
Actions[2]=\"1012,0\"",
    name = "ACTIONS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the EventIdentifier of the currently registered event, of which you want to have the attributes",
    name = "EVENTIDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1285] = {
  fname = "EventManager_CountRegisteredEvents",
  label = "US_EventManager_CountRegisteredEvents",
  run = "in/out",
  desc = "Returns the number of currently registered events in the EventManager-checking-queue",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of currently registered events",
    name = "COUNT_OF_REGISTERED_EVENTS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1286] = {
  fname = "EventManager_GetLastUpdateTime",
  label = "US_EventManager_GetLastUpdateTime",
  run = "in/out",
  desc = "Returns the last time, the eventlist in the EventManager had been updated in any way.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the date and time of the last update, as returned by os.date()",
    name = "DATETIME",
   },
   [2] = {
    type = "NUMBER",
    desc = "the last update time as number, as returned by reaper.time_precise()",
    name = "PRECISE_TIME",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1287] = {
  fname = "EventManager_PauseEvent",
  label = "US_EventManager_PauseEvent",
  run = "in/out",
  desc = "Pauses a registered event in the Ultraschall Event Manager-checking-queue.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, pausing was successful; false, pausing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the unique identifier of the registered event, which you want to pause in the EventManager",
    name = "EVENT_IDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1288] = {
  fname = "EventManager_ResumeEvent",
  label = "US_EventManager_ResumeEvent",
  run = "in/out",
  desc = "Resumes a registered and paused event in the Ultraschall Event Manager-checking-queue.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, resuming was successful; false, resuming was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the unique identifier of the registered event, which you want to resume in the EventManager",
    name = "EVENT_IDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1289] = {
  fname = "EventManager_Start",
  label = "US_EventManager_Start",
  run = "in/out",
  desc = "Starts the Ultraschall-EventManager, if it has not been started yet.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, EventManager has been started successfully; false, EventManager couldn't be started",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1290] = {
  fname = "EventManager_Stop",
  label = "US_EventManager_Stop",
  run = "in/out",
  desc = "Unregisters the current script; will stop the EventManager if no scripts are registered anymore to the EventManager.\
\
You can use the parameter force to force stopping of the EventManager immediately.",
  out = {
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, stops the EventManager, even if other scripts have registered events to it; false or nil, don't force stop",
    opt = {
     use = false,
    },
    name = "FORCE",
   },
   [2] = {
    type = "STRING",
    desc = "if you want to unregister events from a different script, pass here the ScriptIdentifier of this script; nil, use the ScriptIdentifier of the current script",
    opt = {
     use = false,
    },
    name = "SCRIPTIDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1291] = {
  fname = "EventManager_AddStartupEvent",
  label = "US_EventManager_AddStartupEvent",
  run = "in/out",
  desc = "Adds a new event, that shall be automatically registered at startup of the Ultraschall Event Manager.\
\
That means, if you start the EventManager, it will be added automatically to the EventManager-checking-queue, without the need of registering it by hand.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the unique identifier for this registered event, which can be used later for setting, deleting, etc",
    name = "EVENT_IDENTIFIER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a name for the event, which you can choose freely; duplicated eventnames are allowed",
    name = "EVENTNAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "only check all x seconds; 0, for constant checking\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    name = "CHECKALLXSECONDS",
   },
   [3] = {
    type = "INTEGER",
    desc = "only check for x seconds; 0, check until the event is removed\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    name = "CHECKFORXSECONDS",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "if the event occurred: \
   true, run the actions only once; \
   false, run until the CheckFunction returns false again",
    name = "STARTACTIONSONCEDURINGTRUE",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "false, register the event and check for it immediately; true, register the event but don't check for it yet",
    name = "EVENTPAUSED",
   },
   [6] = {
    type = "FUNCTION",
    desc = "the function, which shall check if the event occurred\
this function must return true if the event occurred and false, if not\
No global variables allowed! Instead, the eventmanager will pass to the function as first parameter a table which can be used for storing information",
    name = "CHECKFUNCTION",
   },
   [7] = {
    type = "TABLE",
    desc = "a table which holds all actions and their accompanying sections, who shall be run when the event occurred\
each entry of the table must be of the format \"actioncommandid,section\", e.g.:\
\
Actions[1]=\"1007,0\"\
Actions[2]=\"1012,0\"\
\
You can have as many actions as you like, but be aware, that running too many actions may delay further eventchecking!",
    name = "ACTIONS",
   },
  },
  sp_api = "ultraschall",
 },
 [1292] = {
  fname = "EventManager_RemoveStartupEvent2",
  label = "US_EventManager_RemoveStartupEvent2",
  run = "in/out",
  desc = "Removes a startup-event from the config-file of the Ultraschall Event Manager.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, removing was successful; false, removing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the unique identifier of the startup event, which you want to remove from the EventManager-startup-procedure",
    name = "EVENT_IDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1293] = {
  fname = "EventManager_RemoveStartupEvent",
  label = "US_EventManager_RemoveStartupEvent",
  run = "in/out",
  desc = "Removes a startup-event from the config-file of the Ultraschall Event Manager.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, removing was successful; false, removing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the unique identifier of the startup event, which you want to remove from the EventManager-startup-procedure",
    name = "EVENT_IDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1294] = {
  fname = "EventManager_CountStartupEvents",
  label = "US_EventManager_CountStartupEvents",
  run = "in/out",
  desc = "Counts the currently available startup-events",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of currently available start-up-events for the EventManager",
    name = "COUNT_STARTUP_EVENTS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1295] = {
  fname = "EventManager_SetStartupEvent",
  label = "US_EventManager_SetStartupEvent",
  run = "in/out",
  desc = "Sets an already existing startupevent, that shall be automatically run at startup of the Ultraschall Event Manager.\
\
That means, if you start the EventManager, it will be started automatically to the EventManager-checking-queue, without the need of registering it by hand.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the unique identifier for this registered event, which can be used later for setting, deleting, etc",
    name = "EVENT_IDENTIFIER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the EventIdentifier of the startup-event, which you want to set",
    name = "EVENTIDENTIFIER",
   },
   [2] = {
    type = "STRING",
    desc = "a name for the event, which you can choose freely; duplicated eventnames are allowed; nil, to keep current name",
    opt = {
     use = false,
    },
    name = "EVENTNAME",
   },
   [3] = {
    type = "INTEGER",
    desc = "only check all x seconds; 0, for constant checking; nil, to keep current value\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    opt = {
     use = false,
    },
    name = "CHECKALLXSECONDS",
   },
   [4] = {
    type = "INTEGER",
    desc = "only check for x seconds; 0, check until the event is removed; nil, to keep current value\
this value will be used as approximate time, not necessarily exact. That means, 2 seconds given may be 2.5 in some cases!\
This is due general limitations with backgroundscripts.",
    opt = {
     use = false,
    },
    name = "CHECKFORXSECONDS",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "if the event occurred: \
   true, run the actions only once; \
   false, run until the CheckFunction returns false again\
   nil, to keep current value",
    opt = {
     use = false,
    },
    name = "STARTACTIONSONCEDURINGTRUE",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "false, register the event and check for it immediately; true, register the event but don't check for it yet; nil, to keep current value",
    opt = {
     use = false,
    },
    name = "EVENTPAUSED",
   },
   [7] = {
    type = "FUNCTION",
    desc = "the function, which shall check if the event occurred; nil, to keep current function\
this function must return true if the event occurred and false, if not\
No global variables allowed! Instead, the eventmanager will pass to the function as first parameter a table which can be used for storing information",
    opt = {
     use = false,
    },
    name = "CHECKFUNCTION",
   },
   [8] = {
    type = "TABLE",
    desc = "a table which holds all actions and their accompanying sections, who shall be run when the event occurred; nil, to keep current actionlist\
each entry of the table must be of the format \"actioncommandid,section\", e.g.:\
\
Actions[1]=\"1007,0\"\
Actions[2]=\"1012,0\"\
\
You can have as many actions as you like, but be aware, that running too many actions may delay further eventchecking!",
    opt = {
     use = false,
    },
    name = "ACTIONS",
   },
  },
  sp_api = "ultraschall",
 },
 [1296] = {
  fname = "EventManager_GetPausedState2",
  label = "US_EventManager_GetPausedState2",
  run = "in/out",
  desc = "returns, if a certain event, currently registered in the EventManager, is paused(true) or not(false).\
State is requested by EventIdentifier.\
\
returns nil in case of an error",
  out = {
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the identifier of the registered event, whose pause state you want to retrieve",
    name = "EVENTIDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1297] = {
  fname = "EventManager_GetPausedState",
  label = "US_EventManager_GetPausedState",
  run = "in/out",
  desc = "returns, if a certain event, currently registered in the EventManager, is paused(true) or not(false)\
State is requested by number-id, with 1 for the first event, 2 for the second, etc.\
\
returns nil in case of an error",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the id of the event, whose paused-state you want to retrieve; 1, the first event; 2, the second event, etc",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [1298] = {
  fname = "EventManager_GetEventIdentifier",
  label = "US_EventManager_GetEventIdentifier",
  run = "in/out",
  desc = "returns the EventIdentifier of a registered event, by id\
event is requested by number-id, with 1 for the first event, 2 for the second, etc.\
\
returns nil in case of an error",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the id of the event, whose EventIdenrifier you want to retrieve; 1, the first event; 2, the second event, etc",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [1299] = {
  fname = "EventManager_GetLastCheckfunctionState",
  label = "US_EventManager_GetLastCheckfunctionState",
  run = "in/out",
  desc = "returns the last state the eventcheck-function returned the last time it was called; of a certain registered event in the EventManager.\
State is requested by number-id, with 1 for the first event, 2 for the second, etc.\
\
returns nil in case of an error; nil and time, if the EventCheck-function didn't return a boolean",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the id of the event, whose eventcheckfunction-retval you want to retrieve; 1, the first event; 2, the second event, etc",
    name = "ID",
   },
  },
  sp_api = "ultraschall",
 },
 [1300] = {
  fname = "EventManager_GetRegisteredEventID",
  label = "US_EventManager_GetRegisteredEventID",
  run = "in/out",
  desc = "returns the id of a registered event, meaning 1, if it's the first event, 2 if it's the second, etc\
\
It is the position within all events currently registered within the EventManager.\
\
returns nil in case of an error",
  out = {
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the EventIdentifier of the event, whose id you want to retrieve",
    name = "EVENTIDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1301] = {
  fname = "EventManager_GetLastCheckfunctionState2",
  label = "US_EventManager_GetLastCheckfunctionState2",
  run = "in/out",
  desc = "returns the last state the eventcheck-function returned the last time it was called; of a certain registered event in the EventManager.\
State is requested by EventIdentifier\
\
returns nil in case of an error; nil and time, if the EventCheck-function didn't return a boolean",
  out = {
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the EventIdentifier of the event, whose last checkfunction-state you want to retrieve",
    name = "EVENTIDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1302] = {
  fname = "EventManager_DebugMode",
  label = "US_EventManager_DebugMode",
  run = "in/out",
  desc = "Starts Debugmode of the EventManager, which returns additional internal states.\
\
Allows you to get the contents of the UserSpace of a certain checkfunction of a registered event, see [EventManager\\_DebugMode\\_UserSpace](#EventManager_DebugMode_UserSpace).\
\
Note: Debugmode is not for productive usecases, as it costs resources. Please turn it off again, after you've finished debugging.",
  out = {
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, turn debugmode on; false, turn debugmode off",
    name = "TOGGLE",
   },
  },
  sp_api = "ultraschall",
 },
 [1303] = {
  fname = "EventManager_DebugMode_UserSpace",
  label = "US_EventManager_DebugMode_UserSpace",
  run = "in/out",
  desc = "Returns the current contents of the UserSpace, as stored by the checkfunction of a registered event in the EventManager.\
\
The table is of the format:\
    \
        userspace[index][\"index\"]    - the name of the index\
        userspace[index][\"datatype\"] - the datatype of the value in this userspace-index\
        userspace[index][\"value\"]    - the value in this userspace-index\
\
Note: Debugmode is not for productive usecases, as it costs resources. Please turn it off again, after you've finished debugging.\
See [EventManager\\_DebugMode](#EventManager_DebugMode) for more details on stopping DebugMode.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of values within the userspace",
    name = "USERSPACE_COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "the contents of the userspace as a handy table",
    name = "USERSPACE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the event, whose UserSpace you want to retrieve",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1304] = {
  fname = "EventManager_Debug_GetExecutionTime",
  label = "US_EventManager_Debug_GetExecutionTime",
  run = "in/out",
  desc = "Returns the numer of seconds it cost the last time all events were checked in the eventmanager.\
That way, you can benchmark, how much execution time the events need and optimise when needed.\
\
Needs DebugMode to be turned on.\
\
Note: Debugmode is not for productive usecases, as it costs resources. Please turn it off again, after you've finished debugging.\
\
return -1, if debugmode is off/eventmanager is not running",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the number of seconds it took, for all event-check functions to check in the last event-check-cycle",
    name = "SECONDS_EVENTCHECK_FUNCTIONS",
   },
   [2] = {
    type = "NUMBER",
    desc = "the time between two event-check-cycles, usually when other actions are run",
    name = "SECONDS_BETWEEN_EVENTCHECK_CYCLES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1305] = {
  fname = "EventManager_GetAllEventIdentifier",
  label = "US_EventManager_GetAllEventIdentifier",
  run = "in/out",
  desc = "Returns the paused-state of an registered event.\
\
Returns nil if no such event is registered.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, event is paused; false, event is not paused; nil, no such event",
    name = "PAUSED_STATE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1306] = {
  fname = "EventManager_GetAllEventNames",
  label = "US_EventManager_GetAllEventNames",
  run = "in/out",
  desc = "Returns a list of all event-names of all currently registered events.\
\
The order is the same as the event-identifier returned by EventManager_GetAllEventIdentifier",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all existing event-names",
    name = "EVENTIDENTIFIER",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1307] = {
  fname = "EventManager_Debug_GetAllActionRunStates",
  label = "US_EventManager_Debug_GetAllActionRunStates",
  run = "in/out",
  desc = "Returns a list of all events and if their actions have been run the last time the event was checked(true) or not(false).\
\
This way you can check, if the actions are properly executed.\
\
The order is the same as the event-identifier returned by EventManager_GetAllEventIdentifier\
\
Needs DebugMode to be turned on.\
\
Note: Debugmode is not for productive usecases, as it costs resources. Please turn it off again, after you've finished debugging.    \
\
return nil, if debug-mode is off",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all runstates of the actions of events, if they were run the last time(true) or not(false)",
    name = "RUNSTATES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1308] = {
  fname = "EventManager_GetAllEventIdentifier",
  label = "US_EventManager_GetAllEventIdentifier",
  run = "in/out",
  desc = "Returns the paused-state of an registered event.\
\
Returns nil if no such event is registered.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, event is paused; false, event is not paused; nil, no such event",
    name = "PAUSED_STATE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1309] = {
  fname = "GetDeferRunState",
  label = "US_GetDeferRunState",
  run = "in/out",
  desc = "returns the run-state of a Ultraschall-defer-loop in a specific scriptinstance\
\
You can either request the runstate of a [Defer](#Defer)-deferred-function(set parameter deferinstance to 0).\
\
returns nil in case of an error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, defer-instance is running; false, defer-instance isn't running",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "0, to use the parameter identifier",
    name = "DEFERINSTANCE",
   },
   [2] = {
    type = "STRING",
    desc = "when deferinstance=0 (when using the Defer-function): the identifier of the defer-cycle, you've started with Defer",
    opt = {
     use = false,
    },
    name = "IDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1310] = {
  fname = "StopDeferCycle",
  label = "US_StopDeferCycle",
  run = "in/out",
  desc = "Stops a running ultraschall.Defer-instance of a script-instance.\
      \
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, stopping this defer-cycle was successful; false, it wasn't successful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the identifier of the defer-cycle of a script-instance",
    name = "DEFER_IDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1311] = {
  fname = "Defer",
  label = "US_Defer",
  run = "in/out",
  desc = "runs a custom-defer-cycle, which can be individualized.\
\
You can set, how often this defer-cycle shall be run(every x defer-cycle or every x seconds) and even stop the defer-cycle from in- and outside of the script, using the defer\\_identifier you have given.\
\
To stop such a defer-cycle, use [StopDeferCycle](#StopDeferCycle), as long as parameter protected is not set to true!\
**Important:** make the deferidentifier as unique as possible(using guids or similar stuff) to avoid naming conflicts with other defer-cycles using the same identifier.\
           Otherwise, you risk stopping multiple such defer-loops, when using [StopDeferCycle](#StopDeferCycle)!\
           \
For the old Defer1 to Defer20-behavior, try ultraschall.ScriptIdentifier..\".defer_scriptXX\" as defer-identifier, where XX is a number.\
\
returns false in case of an error (e.g. already 1024 defer-cycles are running in the current script-instance)",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, running this defer-cycle was successful; false, it wasn't successful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "if running this defer-cycle was successful, this holds the defer-identifier you've chosen",
    opt = {
     use = false,
    },
    name = "DEFER_IDENTIFIER",
   },
  },
  ins = {
   [1] = {
    type = "FUNCTION",
    desc = "the function, you would love to defer to",
    name = "FUNC",
   },
   [2] = {
    type = "STRING",
    desc = "an identifier, under which you can access this defer-cycle; make it unique using guids in the name, to avoid name-conflicts!",
    name = "DEFERIDENTIFIER",
   },
   [3] = {
    type = "INTEGER",
    desc = "0 or nil, just run as regular defer-cycle\
1, run the defer-cycle only every timer_counter-cycle\
2, run the defer-cycle only every timer_counter-seconds",
    opt = {
     use = false,
    },
    name = "MODE",
   },
   [4] = {
    type = "NUMBER",
    desc = "the timer for the defer-cycle\
  mode=1: 1 and higher, the next defer-cycle that shall be used by function func. Use 1 for every cycle, 2 for every second cycle.\
              30 cycles are approximately 1 second.\
  mode=2: 0 and higher, the amount of seconds to wait, until the function func is run the next time.",
    opt = {
     use = false,
    },
    name = "TIMER_COUNTER",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, this defer-cycle is protected from being stopped by StopDeferCycle(); false or nil, you can stop this defer-cycle using StopDeferCycle()",
    opt = {
     use = false,
    },
    name = "PROTECTED",
   },
  },
  sp_api = "ultraschall",
 },
 [1312] = {
  fname = "SetDeferCycleSettings",
  label = "US_SetDeferCycleSettings",
  run = "in/out",
  desc = "Sets the mode and timing settings of a running ultraschall.Defer-instance. You can set its mode and the timer/counter-values, even from a script, which does not run the defer-instance!\
\
Returns false in case of failure.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "an identifier, under which you can access this defer-cycle; make it unique using guids in the name, to avoid name-conflicts! ",
    name = "DEFERIDENTIFIER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the timing mode, in which the defer-cycle runs\
nil, reset to the default-settings of the Defer-Cycle\
0, just run as regular defer-cycle\
1, run the defer-cycle only every timer_counter-cycle\
2, run the defer-cycle only every timer_counter-seconds ",
    opt = {
     use = false,
    },
    name = "MODE",
   },
   [3] = {
    type = "NUMBER",
    desc = "the timer for the defer-cycle\
mode=1: 1 and higher, the next defer-cycle that shall be used by function func. Use 1 for every cycle, 2 for every second cycle.\
             30 cycles are approximately 1 second.\
mode=2: 0 and higher, the amount of seconds to wait, until the function func is run the next time. ",
    opt = {
     use = false,
    },
    name = "TIMER_COUNTER",
   },
  },
  sp_api = "ultraschall",
 },
 [1313] = {
  fname = "GetDeferCycleSettings",
  label = "US_GetDeferCycleSettings",
  run = "in/out",
  desc = "Gets a the mode and timing-settings of a currently running ultraschall.Defer()-cycle\
\
Returns nil in case of failure.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the timing mode, in which the defer-cycle runs\
0, just run as regular defer-cycle\
1, run the defer-cycle only every timer_counter-cycle\
2, run the defer-cycle only every timer_counter-seconds ",
    name = "MODE",
   },
   [2] = {
    type = "NUMBER",
    desc = "the timer for the defer-cycle\
mode=1: 1 and higher, the next defer-cycle that shall be used by function func. Use 1 for every cycle, 2 for every second cycle.\
             30 cycles are approximately 1 second.\
mode=2: 0 and higher, the amount of seconds to wait, until the function func is run the next time. ",
    name = "TIMER_COUNTER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "an identifier, under which you can access this defer-cycle; make it unique using guids in the name, to avoid name-conflicts! ",
    name = "DEFERIDENTIFIER",
   },
  },
  sp_api = "ultraschall",
 },
 [1314] = {
  fname = "DeleteProjExtState_Section",
  label = "US_DeleteProjExtState_Section",
  run = "in/out",
  desc = "Deletes all key/values from a specific section.\
\
Returns -1 in case of an error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, in case of success; -1, in case of an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the section/extname, whose key/values shall be deleted",
    name = "SECTION",
   },
  },
  sp_api = "ultraschall",
 },
 [1315] = {
  fname = "DeleteProjExtState_Key",
  label = "US_DeleteProjExtState_Key",
  run = "in/out",
  desc = "Deletes the value from a specific section -> key.\
\
Returns -1 in case of an error.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, in case of success; -1, in case of an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the section/extname, from whom a key/value shall be deleted",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "the key, whose value shall be deleted",
    name = "KEY",
   },
  },
  sp_api = "ultraschall",
 },
 [1316] = {
  fname = "GetProjExtState_AllKeyValues",
  label = "US_GetProjExtState_AllKeyValues",
  run = "in/out",
  desc = "Returns the count of all key/values in a specific section, as well as an array with all keynames and their accompanying stored values.\
The array has the format:\
   AllValues[idx][1]=Key\
   AllValues[idx][2]=Value\
\
Returns -1 in case of an error or if no key exists in the given section",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, in case of success; -1, in case of an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the section/extname, from whom a key/value shall be deleted",
    name = "SECTION",
   },
  },
  sp_api = "ultraschall",
 },
 [1317] = {
  fname = "GetGuidExtState",
  label = "US_GetGuidExtState",
  run = "in/out",
  desc = "Gets an extension-state using a given guid. Good for storing additional metadata of objects like MediaTracks, MediaItems, MediaItem_Takes, etc(everything, that has a guid).\
The guid can have additional text, but must contain a valid guid somewhere in it!\
A valid guid is a string that follows the following pattern:\
{........-....-....-....-............}\
where . is a hexadecimal value(0-F)\
\
Returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the extstate(if a project extension state); 1, successful(with extension states), -1, unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the returned value from the extstate",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the guid of the object, for whom you want to get the key/value-pair; can have additional characters before and after the guid, but must contain a valid guid!",
    name = "GUID",
   },
   [2] = {
    type = "STRING",
    desc = "the key for this guid",
    name = "KEY",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, get as project extension state(from the currently opened project); 1, get as global extension state(when persist=true, from reaper-extstate.ini in the resourcesfolder)",
    name = "SAVELOCATION",
   },
  },
  sp_api = "ultraschall",
 },
 [1318] = {
  fname = "SetGuidExtState",
  label = "US_SetGuidExtState",
  run = "in/out",
  desc = "Sets an extension-state using a given guid. Good for storing additional metadata of objects like MediaTracks, MediaItems, MediaItem_Takes, etc(everything, that has a guid).\
The state can be saved as either global extension state or \"local\" extension-project-state(in the currently opened project)\
The guid can have additional text, but must contain a valid guid somewhere in it!\
A valid guid is a string that follows the following pattern:\
{........-....-....-....-............}\
where . is a hexadecimal value(0-F)\
\
Returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the idx of the extstate(if a project extension state); >=1 number of stored extension states(means successful), -1, unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the guid of the object, for whom you want to store a key/value-pair; can have additional characters before and after the guid, but must contain a valid guid!",
    name = "GUID",
   },
   [2] = {
    type = "STRING",
    desc = "the key for this guid; \"\", deletes all keys+values stored with this marker",
    name = "KEY",
   },
   [3] = {
    type = "STRING",
    desc = "the value to store into the key/value-store; \"\", deletes the value for this key",
    name = "VALUE",
   },
   [4] = {
    type = "INTEGER",
    desc = "0, store as project extension state(into the currently opened project); 1, store as global extension state(when persist=true, into reaper-extstate.ini in the resourcesfolder)",
    name = "SAVELOCATION",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, overwrite a previous given value; false, don't overwrite, if a value exists already",
    name = "OVERWRITE",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, make extension state persistent(available after Reaper-restart); false, don't make it persistent; Only with global extension states",
    name = "PERSISTS",
   },
  },
  sp_api = "ultraschall",
 },
 [1319] = {
  fname = "SetMarkerExtState",
  label = "US_SetMarkerExtState",
  run = "in/out",
  desc = "Stores an Extstate for a specific marker/region.\
\
The index is for all markers and regions, inclusive and 1-based\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1, in case of an error; >=1 number of stored extension states(means successful), -1, unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the marker/region-index, for which to store an extstate; starting with 1 for first marker/region, 2 for second marker/region",
    name = "INDEX",
   },
   [2] = {
    type = "STRING",
    desc = "the key, into which the marker-extstate shall be stored; \"\", deletes all keys+values stored with this marker",
    name = "KEY",
   },
   [3] = {
    type = "STRING",
    desc = "the value, which you want to store into the marker-extstate; \"\", deletes the value for this key",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1320] = {
  fname = "GetMarkerExtState",
  label = "US_GetMarkerExtState",
  run = "in/out",
  desc = "Retrieves an Extstate for a specific marker/region.\
\
The index is for all markers and regions, inclusive and 1-based\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value, that has been stored into the marker-extstate; nil, in case of an error",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the marker/region-index, for which an extstate has been stored; starting with 1 for first marker/region, 2 for second marker/region",
    name = "INDEX",
   },
   [2] = {
    type = "STRING",
    desc = "the key, in which the marker-extstate is stored",
    name = "KEY",
   },
  },
  sp_api = "ultraschall",
 },
 [1321] = {
  fname = "ProjExtState_CountAllKeys",
  label = "US_ProjExtState_CountAllKeys",
  run = "in/out",
  desc = "Counts all keys stored within a certain ProjExtState-section.\
\
Be aware: if you want to enumerate them using reaper.EnumProjExtState, the first key is indexed 0, the second 1, etc!\
\
returns -1 in case of an error ",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the section, of which you want to count all keys",
    name = "SECTION",
   },
  },
  sp_api = "ultraschall",
 },
 [1322] = {
  fname = "Metadata_ID3_GetSet",
  label = "US_Metadata_ID3_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored ID3-metadata-tag into the current project(for Wav or MP3).\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
Note: APIC_TYPE allows only specific values, as listed below!\
\
Supported tags are:\
  TIT2 - Title\
  TIT3 - Subtitle/Description\
  TPE2 - Album Artist\
  TPE1 - Artist\
  TCON - Genre\
  TKEY - Key      \
  TBPM - Tempo\
  TYER - Year, must be of the format yyyy, like 2020\
  TIME - Recording Time, like 22:15 or 08:21\
  COMM - Comment\
  TXXX - User defined(description=value)\
  TXXX:REAPER - Media Explorer Tags\
  TXXX:TIME_REFERENCE - Start Offset\
  TCOM - Composer\
  TIPL - Involved People\
  TEXT - Lyricist/Text Writer\
  TMCL - Musician Credits\
  TALB - Album\
  TRCK - Track\
  TIT1 - Content Group\
  TPOS - Part Number\
  TRCK - Track number\
  TSRC - International Standard Recording Code\
  TCOP - Copyright Message\
  COMM_LANG - Comment language, 3-character code like \"eng\"\
  APIC_TYPE - the type of the cover-image, which can be of the following:\
  \
    \"\", unset\
    0, Other\
    1, 32x32 pixel file icon (PNG only)\
    2, Other file icon\
    3, Cover (front)\
    4, Cover (back)\
    5, Leaflet page\
    6, Media\
    7, Lead artist/Lead Performer/Solo\
    8, Artist/Performer\
    9, Conductor\
    10, Band/Orchestra\
    11, Composer\
    12, Lyricist/Text writer\
    13, Recording location\
    14, During recording\
    15, During performance\
    16, Movie/video screen capture\
    17, A bright colored fish\
    18, Illustration\
    19, Band/Artist logotype\
    20, Publisher/Studiotype\
\
APIC_DESC - the description of the cover-image\
APIC_FILE - the filename+absolute path of the cover-image; must be either png or jpg\
\
Note: Chapters are added via marker with the name: \"CHAP=chaptername\"\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported ID3-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1323] = {
  fname = "Metadata_BWF_GetSet",
  label = "US_Metadata_BWF_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored BWF-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
  Description\
  OriginationDate\
  OriginationTime\
  Originator\
  OriginatorReference\
  ISRC - International Standard Recording Code\
  \
  Note: TimeReference is set by Reaper itself\
  \
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported BWF-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1324] = {
  fname = "Metadata_IXML_GetSet",
  label = "US_Metadata_IXML_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored IXML-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
  PROJECT - title\
  NOTE - comment\
  USER - user-defined \"Name=Value\"\
  USER:REAPER - Media Explorer Tags\
  SCENE - Scene\
  CIRCLED - Circled Take; either TRUE or FALSE\
  TAPE - Sound Roll\
  TAKE - Take ID\
  FILE_UID - unique identifier for the file\
  \
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported IXML-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1325] = {
  fname = "Metadata_INFO_GetSet",
  label = "US_Metadata_INFO_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored INFO-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
  INAM - Title\
  ISBJ - Description\
  IKEY - Keywords\
  IART - Artist\
  IGNR - Genre\
  ICRD - Creation Date, must be of the format yyyy-mm-dd like 2020-06-27\
  ICMT - Comment\
  IENG - Engineer\
  IPRD - Product(Album)\
  ISRC - Source\
  ICOP - Copyright message\
  \
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported INFO-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1326] = {
  fname = "Metadata_CART_GetSet",
  label = "US_Metadata_CART_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored CART-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
  Title - Title\
  Artist - the Artist\
  Category - the genre\
  StartDate - the start-date, must be of the following format, yyyy-mm-dd, like 2020-06-27\
  EndDate - the end-date, must be of the following format, yyyy-mm-dd, like 2020-06-27\
  TagText - Text\
  URL - URL\
  ClientID - Client\
  CutID - Cut\
  \
Note: INT1 is set by the INT1 marker; SEG1 is set by the SEG1-marker\
  \
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported CART-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1327] = {
  fname = "Metadata_AIFF_GetSet",
  label = "US_Metadata_AIFF_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored AIFF-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
    NAME - Title\
    ANNO - Description\
    AUTH - Artist\
    COPY - Copyright message\
  \
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported AIFF-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1328] = {
  fname = "Metadata_XMP_GetSet",
  label = "US_Metadata_XMP_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored XMP-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
    dc/title - title\
    dc/description - description\
    dm/artist - the artist\
    dm/genre - the genre\
    dm/key - the key\
    dm/tempo - the tempo\
    dm/timeSignature - the time-signature\
    dc/date - the date\
    dm/logComment - Comment\
    dm/composer - the composer\
    dc/creator - the creator\
    dm/engineer - the engineer\
    dm/album - the album\
    dm/scene - the scene\
    dm/copyright - the copyright message\
    dc/language - the language\
    \
  \
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported XMP-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1329] = {
  fname = "Metadata_VORBIS_GetSet",
  label = "US_Metadata_VORBIS_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored VORBIS-metadata-tag into the current project.\
This is for OPUS and OGG-VORBIS-files.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
  TITLE - title\
  DESCRIPTION - description\
  ALBUMARTIST - album artist\
  ARTIST - artist\
  PERFORMER - performer\
  GENRE - genre\
  KEY - key\
  BPM - tempo\
  DATE - date\
  COMMENT - comment\
  USER - user defined (Name=Value)\
  REAPER - Media Explorer Tags\
  ARRANGER - arranger\
  AUTHOR - author\
  COMPOSER - composer\
  CONDUCTOR - conductor\
  ENSEMBLE - ensemble\
  LYRICIST - lyricist\
  PRODUCER - producer\
  PUBLISHER - publisher\
  ALBUM - album\
  LABEL - label\
  DISCNUMBER - disc number\
  OPUS - number of work\
  PART - part\
  PARTNUMBER - partnumber\
  TRACKNUMBER - tracknumber\
  VERSION - version\
  EAN/UPN - barcode\
  LABELNO - catalog number\
  ISRC - isrc\
  COPYRIGHT - copyright holder\
  LICENSE - license\
  ENCODED-BY - encoded by\
  ENCODING - encoding settings\
  LANGUAGE - language, 3-character-code like \"eng\"\
  LOCATION - location\
  SOURCEMEDIA - original recording media\
  \
  \
  Note: Chapters are added via marker with the name: \"CHAP=chaptername\"\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported VORBIS-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1330] = {
  fname = "Metadata_CUE_GetSet",
  label = "US_Metadata_CUE_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored CUE-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
  DISC_TITLE - the title\
  DISC_PERFORMER - the performer\
  DISC_REM - Comment\
  DISC_SONGWRITER - the songwriter      \
  DISC_CATALOG - UPC/EAN Code of the disc\
\
  \
Note: TRACK_TITLE is added via render-settings, \
      TRACK_PERFORMER is added via a marker with a title of PERF=performername\
      TRACK_SONGWRITER is added via a marker with a title of WRIT=writername\
      TRACK_ISRC is added via a marker with a title of ISRC=code\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported CUE-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1331] = {
  fname = "Metadata_APE_GetSet",
  label = "US_Metadata_APE_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored APE-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
\
General:\
Title - Title\
Subtitle - Description\
Comment - Comment\
\
Artist:\
Artist - Artist\
\
Date:\
Record Date - Date\
Year - Date\
\
Musical:\
Genre - Genre\
Key - Key\
BPM - Tempo\
\
Personnel:\
Composer - Composer\
Conductor - Conductor\
Publisher - Publisher\
\
Project:\
Album - Album\
\
Parts:\
Track - Track Number\
\
Reaper:\
REAPER - Media Explorer Tags\
\
User:\
User Defined - User Defined\
\
Code:\
ISRC - ISRC\
Catalog - Catalog\
\
License:\
Copyright - Copyright Holder\
\
Technical:\
Language - Language\
Record Location - Recording Location\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported APE-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1332] = {
  fname = "Metadata_ASWG_GetSet",
  label = "US_Metadata_ASWG_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored ASWG-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
\
General:\
project - Title\
session - Description\
notes - Comment\
\
Artist:\
artist - Artist\
\
Musical:\
genre - Genre\
instrument - Instrument\
intensity - Intensity\
inKey - Key\
isLoop - Loop\
subGenre - Sub-Genre\
tempo - Tempo\
timeSig - Time Signature\
\
Performance:\
text - Transcript\
actorGender - Actor Gender\
actorName - Actor Name\
characterAge - Character Age\
characterGender - Character Gender\
characterName - Character Name\
characterRole - Character Role\
efforts - Dialogue Contains Efforts\
effortType - Dialogue Effort Type\
emotion - Dialogue Emotion\
accent - Dialogue Regional Accent\
timingRestriction - Dialogue Timing Restriction\
director - Director\
direction - Director's Notes\
\
Personnel:\
composer - Composer\
creatorId - Creator\
editor - Editor\
recEngineer - Engineer\
mixer - Mixer\
musicSup - Music Supervisor\
producer - Producer\
musicPublisher - Publisher\
isCinematic - Cinematic\
contentType - Content Type\
isFinal - Final\
isOst - Original\
originator - Originator\
originatorStudio - Originator Studio\
recStudio - Recording Studio\
songTitle - Song Title\
isSource - Source\
musicVersion - Version\
\
Part:\
orderRef - Part Number\
\
Code:\
isrcId - ISRC\
billingCode - Billing Code\
\
Licensed:\
isLicensed - License\
rightsOwner - Rights Owner\
isUnion - Union Contract\
usageRights - Usage Rights\
\
Technical:\
ambisonicChnOrder - Ambisonic Channel Order\
ambisonicFormat - Ambisonic Format\
ambisonicNorm - Ambisonic Normalization Method\
zeroCrossRate - Average Zero Cross Rate\
channelConfig - Channel Layout Text\
isDesigned - Designed Or Raw\
isDiegetic - Diegetic\
state - File State\
category - FX Category\
catId - FX Category ID\
fxChainName - FX Chain Name\
fxName - FX Name\
subCategory - FX Sub-Category\
fxUsed - FX Used\
language - Language\
loudnessRange - LRA Loudness Range\
loudness - LUFS-I Integrated Loudness\
maxPeak - Maximum Peak Value dBFS\
micConfig - Microphone Configuration\
micDistance - Microphone Distance\
micType - Microphone Type\
papr - Peak To Average Power Ratio\
impulseLocation - Recording Location\
recordingLoc - Recording Location\
rmsPower - RMS Power\
library - Sound Effects Library\
sourceId - Source ID\
specDensity - Spectral Density\
userCategory - User Category\
userData - User Data\
vendorCategory - Vendor Category\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported ASWG-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1333] = {
  fname = "Metadata_AXML_GetSet",
  label = "US_Metadata_AXML_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored ASWG-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
\
Code:\
ISRC - the ISRC-code\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported AXML-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1334] = {
  fname = "Metadata_CAFINFO_GetSet",
  label = "US_Metadata_CAFINFO_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored CAFINFO-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
\
General:\
title - Title\
comments - Comment\
\
Artist:\
artist - Artist\
\
Date:\
year - Date\
recorded date - Recording Time\
\
Musical:\
genre - Genre\
key signature - Key\
tempo - Tempo\
time signature - Time Signature\
\
Personnel:\
composer - Composer\
lyricist - Lyricist\
\
Project:\
album - Album\
\
Parts:\
track number - Track Number\
\
License:\
copyright - Copyright Message\
\
Technical:\
nominal bit rate - Bit Rate\
channel configuration - Channel Configuration\
channel layout - Channel Layout Text\
encoding application - Encoded By\
source encoder - Encoding Settings\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported CAFINFO-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1335] = {
  fname = "Metadata_FLACPIC_GetSet",
  label = "US_Metadata_FLACPIC_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored FLACPIC-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
\
Binary:\
APIC_TYPE - Image Type\
APIC_DESC - Image Description\
APIC_FILE - Image File\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported FLACPIC-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1336] = {
  fname = "Metadata_IFF_GetSet",
  label = "US_Metadata_IFF_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored IFF-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
\
General:\
NAME - Title\
ANNO - Description\
\
Artist:\
AUTH - Artist\
\
License:\
COPY - Copyright Message\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported IFF-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1337] = {
  fname = "Metadata_WAVEXT_GetSet",
  label = "US_Metadata_WAVEXT_GetSet",
  run = "in/out",
  desc = "Gets/Sets a stored WAVEXT-metadata-tag into the current project.\
\
To get a value, set parameter Value to nil; to set a value, set the parameter Value to the desired value\
\
Supported tags are:\
\
Technical:\
channel configuration - Channel Configuration\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value of the specific tag",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the tag, whose value you want to get/set; see description for a list of supported WAVEXT-Tags",
    name = "TAG",
   },
   [2] = {
    type = "STRING",
    desc = "nil, only get the current value; any other value, set the value",
    opt = {
     use = false,
    },
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1338] = {
  fname = "Metadata_GetMetaDataTable_Presets",
  label = "US_Metadata_GetMetaDataTable_Presets",
  run = "in/out",
  desc = "returns a table with all metadata from a metadata-preset.\
\
Metadata that is not set in the preset, will be set to \"\" in the table\
\
returns nil in case of an error of if reaper-metadata.ini isn't found in resource-folder",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all metadata-entries from a preset. Unset entries in the preset will be set to \"\"",
    name = "METADATATABLE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the preset, whose metadata you want",
    name = "PRESETNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1339] = {
  fname = "Metadata_GetAllPresetNames",
  label = "US_Metadata_GetAllPresetNames",
  run = "in/out",
  desc = "returns a table with all names of the metadata-presets\
\
returns nil in case of an error of if reaper-metadata.ini isn't found in resource-folder",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found metadata-presetnames",
    name = "COUNT_OF_PRESETS",
   },
   [2] = {
    type = "TABLE",
    desc = "all metadata-presetnames found",
    name = "PRESETNAMES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1340] = {
  fname = "MetaDataTable_Create",
  label = "US_MetaDataTable_Create",
  run = "in/out",
  desc = "Returns an empty MetaDataTable for all possible metadata, in which metadata can be set.",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all metadata-entries available in Reaper",
    name = "METADATATABLE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1341] = {
  fname = "MetaDataTable_GetProject",
  label = "US_MetaDataTable_GetProject",
  run = "in/out",
  desc = "Returns a MetaDataTable for all possible metadata, in which metadata can be set.\
\
All metadata currently set in the active project will be set in the MetaDataTable.",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all metadata-entries available in Reaper and set with all metadata of current project",
    name = "METADATATABLE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1342] = {
  fname = "ToggleScrollingDuringPlayback",
  label = "US_ToggleScrollingDuringPlayback",
  run = "in/out",
  desc = "Toggles scrolling during playback and recording. Let's you choose to put the edit-marker at the playposition, where you toggled scrolling.\
You can also move the view to the playcursor-position.\
\
It changes, if necessary, the state of the actions 41817, 40036 and 40262 to scroll or not to scroll; keep that in mind, if you use these actions otherwise as well!\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1, in case of an error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "1, on; 0, off",
    name = "SCROLLING_SWITCH",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "when scrolling stops, shall the editcursor be moved to current position of the playcursor(true) or not(false)",
    name = "MOVE_EDITCURSOR",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, move view to playcursor; false, don't move",
    name = "GOTO_PLAYCURSOR",
   },
  },
  sp_api = "ultraschall",
 },
 [1343] = {
  fname = "SetPlayCursor_WhenPlaying",
  label = "US_SetPlayCursor_WhenPlaying",
  run = "in/out",
  desc = "Changes position of the play-cursor, when playing. Changes view to new playposition. \
\
Has no effect during recording, when paused or stop and returns -1 in these cases!",
  out = {
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "in seconds",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1344] = {
  fname = "SetPlayAndEditCursor_WhenPlaying",
  label = "US_SetPlayAndEditCursor_WhenPlaying",
  run = "in/out",
  desc = "Changes position of the play and edit-cursor, when playing. Changes view to new playposition. \
\
Has no effect during recording, when paused or stop and returns -1 in these cases!",
  out = {
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "in seconds",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1345] = {
  fname = "JumpForwardBy",
  label = "US_JumpForwardBy",
  run = "in/out",
  desc = "Jumps editcursor forward by <i>seconds</i> seconds. \
\
Returns -1 if parameter is negative. During Recording: only the playcursor will be moved, the current recording-position is still at it's \"old\" position! If you want to move the current recording position as well, use <a href=\"#JumpForwardBy_Recording\">ultraschall.JumpForwardBy_Recording</a> instead.",
  out = {
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "jump forward by seconds",
    name = "SECONDS",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, move playcursor as well; false, don't move playcursor",
    name = "SEEKPLAY",
   },
  },
  sp_api = "ultraschall",
 },
 [1346] = {
  fname = "JumpBackwardBy",
  label = "US_JumpBackwardBy",
  run = "in/out",
  desc = "Jumps editcursor backward by <i>seconds</i> seconds. \
\
Returns -1 if parameter is negative. During Recording: only the playcursor will be moved, the current recording-position is still at it's \"old\" position! If you want to move the current recording position as well, use <a href=\"#JumpBackwardBy_Recording\">ultraschall.JumpBackwardBy_Recording</a> instead.",
  out = {
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "jump backwards by seconds",
    name = "SECONDS",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, move playcursor as well; false, leave playcursor at it's old position",
    name = "SEEKPLAY",
   },
  },
  sp_api = "ultraschall",
 },
 [1347] = {
  fname = "JumpForwardBy_Recording",
  label = "US_JumpForwardBy_Recording",
  run = "in/out",
  desc = "Stops recording, jumps forward by <i>seconds</i> seconds and restarts recording. Will keep paused-recording, if recording was paused. Has no effect during play,play/pause and stop.\
\
returns -1 in case of an error",
  out = {
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "restart recording forwards by seconds",
    name = "SECONDS",
   },
  },
  sp_api = "ultraschall",
 },
 [1348] = {
  fname = "JumpBackwardBy_Recording",
  label = "US_JumpBackwardBy_Recording",
  run = "in/out",
  desc = "Stops recording, jumps backward by <i>seconds</i> seconds and restarts recording. Will keep paused-recording, if recording was paused. Has no effect during play,play/pause and stop.\
\
returns -1 in case of an error",
  out = {
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "restart recording backwards by seconds",
    name = "SECONDS",
   },
  },
  sp_api = "ultraschall",
 },
 [1349] = {
  fname = "GetNextClosestItemEdge",
  label = "US_GetNextClosestItemEdge",
  run = "in/out",
  desc = "returns the position of the next closest item in seconds. It will return the position of the beginning or the end of that item, depending on what is closer.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the next closest item-edge in tracks in trackstring",
    name = "POSITION",
   },
   [2] = {
    type = "INTEGER",
    desc = "the itemnumber in the project",
    name = "ITEM_NUMBER",
   },
   [3] = {
    type = "STRING",
    desc = "\"beg\" for beginning of the item, \"end\" for the end of the item",
    name = "EDGETYPE",
   },
   [4] = {
    type = "MEDIAITEM",
    desc = "the next closest found MediaItem ",
    name = "FOUND_ITEM",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string with the numbers of tracks to check for closest items, separated by a comma (e.g. \"0,1,6\")",
    name = "TRACKSTRING",
   },
   [2] = {
    type = "INTEGER",
    desc = "next closest item related to the current position of 0 - Edit Cursor, 1 - Play Cursor, 2 - Mouse Cursor, 3 - Timeposition",
    name = "CURSOR_TYPE",
   },
   [3] = {
    type = "NUMBER",
    desc = "only, when cursor_type=3, a time position in seconds, from where to check for the next closest item. When omitted, it will take the current play(during play and rec) or edit-cursor-position.",
    opt = {
     use = false,
    },
    name = "TIME_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1350] = {
  fname = "GetPreviousClosestItemEdge",
  label = "US_GetPreviousClosestItemEdge",
  run = "in/out",
  desc = "returns the position of the previous closest item-edge in seconds. It will return the position of the beginning or the end of that item, depending on what is closer.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the previous closest item edge in tracks in trackstring",
    name = "POSITION",
   },
   [2] = {
    type = "INTEGER",
    desc = "the itemnumber in the project",
    name = "ITEM_NUMBER",
   },
   [3] = {
    type = "STRING",
    desc = "\"beg\" for beginning of the item, \"end\" for the end of the item",
    name = "EDGETYPE",
   },
   [4] = {
    type = "MEDIAITEM",
    desc = "the next closest found MediaItem ",
    name = "FOUND_ITEM",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string with the numbers of tracks to check for closest items, separated by a comma (e.g. \"0,1,6\")",
    name = "TRACKS",
   },
   [2] = {
    type = "INTEGER",
    desc = "previous closest item related to the current position of 0 - Edit Cursor, 1 - Play Cursor, 2 - Mouse Cursor, 3 - Timeposition",
    name = "CURSOR_TYPE",
   },
   [3] = {
    type = "OPTIONAL",
    desc = "only, when cursor_type=3, a time position in seconds, from where to check for the previous closest item. When omitted, it will take the current play(during play and rec) or edit-cursor-position.",
    opt = {
     use = false,
    },
    name = "TIME_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1351] = {
  fname = "GetClosestNextMarker",
  label = "US_GetClosestNextMarker",
  run = "in/out",
  desc = "returns the shown markerindex, the position in seconds, the name and the index within all markers of the next closest marker.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the next closest marker-index within all(!) markers and regions",
    name = "MARKERINDEX",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position of the next closest marker",
    name = "POSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the name of the next closest marker",
    name = "MARKERTITLE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the next closest shown markerindex     ",
    name = "MARKERINDEX_SHOWNNUMBER",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "previous closest marker related to the current position of 0 - Edit Cursor, 1 - Play Cursor, 2 - Mouse Cursor, 3 - Timeposition",
    name = "CURSOR_TYPE",
   },
   [2] = {
    type = "NUMBER",
    desc = "only, when cursor_type=3, a time position in seconds, from where to check for the next closest marker. When omitted, it will take the current play(during play and rec) or edit-cursor-position.",
    opt = {
     use = false,
    },
    name = "TIME_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1352] = {
  fname = "GetClosestPreviousMarker",
  label = "US_GetClosestPreviousMarker",
  run = "in/out",
  desc = "returns the markerindex, the position in seconds, the name and the index(counted from all markers) of the previous closest marker.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the previous closest marker-index within all(!) markers and regions",
    name = "MARKERINDEX",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position of the previous closest marker",
    name = "POSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the name of the previous closest marker",
    name = "MARKERTITLE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the previous closest shown number of the found marker",
    name = "MARKERINDEX_SHOWNNUMBER",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "previous closest marker related to the current position of 0 - Edit Cursor, 1 - Play Cursor, 2 - Mouse Cursor, 3 - Timeposition",
    name = "CURSOR_TYPE",
   },
   [2] = {
    type = "NUMBER",
    desc = "only, when cursor_type=3, a time position in seconds, from where to check for the previous closest marker. When omitted, it will take the current play(during play and rec) or edit-cursor-position.",
    opt = {
     use = false,
    },
    name = "TIME_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1353] = {
  fname = "GetClosestNextRegionEdge",
  label = "US_GetClosestNextRegionEdge",
  run = "in/out",
  desc = "returns the regionindex(counted from all markers and regions), the position and the name of the next closest regionstart/end(depending on which is closer to time_position) in seconds.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the next closest markerindex (of all(!) markers)",
    name = "MARKERINDEX",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position of the next closest region",
    name = "POSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the name of the next closest region",
    name = "MARKERTITLE",
   },
   [4] = {
    type = "STRING",
    desc = "the type of the edge of the region, either \"beg\" or \"end\"",
    name = "EDGE_TYPE",
   },
   [5] = {
    type = "INTEGER",
    desc = "the next closest shown number of the found region",
    name = "MARKERINDEX_SHOWNNUMBER",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "previous closest regionstart/end related to the current position of \
0, Edit Cursor, \
1, Play Cursor, \
2, Mouse Cursor, \
3, Timeposition",
    name = "CURSOR_TYPE",
   },
   [2] = {
    type = "ONLY NUMBER",
    desc = "only, when cursor_type=3, a time position in seconds, from where to check for the next closest regionstart/end. When omitted, it will take the current play(during play and rec) or edit-cursor-position.",
    name = "TIME_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1354] = {
  fname = "GetClosestPreviousRegionEdge",
  label = "US_GetClosestPreviousRegionEdge",
  run = "in/out",
  desc = "returns the regionindex(counted from all markers and regions), the position and the name of the previous closest regionstart/end(depending on which is closer to time_position) in seconds.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the previous closest markerindex (of all(!) markers)",
    name = "MARKERINDEX",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position of the previous closest marker",
    name = "POSITION",
   },
   [3] = {
    type = "STRING",
    desc = "the name of the previous closest marker",
    name = "MARKERTITLE",
   },
   [4] = {
    type = "STRING",
    desc = "the type of the edge of the region, either \"beg\" or \"end\"",
    name = "EDGE_TYPE",
   },
   [5] = {
    type = "INTEGER",
    desc = "the previous closest shown number of the found region",
    name = "MARKERINDEX_SHOWNNUMBER",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "previous closest regionstart/end related to the current position of 0 - Edit Cursor, 1 - Play Cursor, 2 - Mouse Cursor, 3 - Timeposition",
    name = "CURSOR_TYPE",
   },
   [2] = {
    type = "NUMBER",
    desc = "only, when cursor_type=3, a time position in seconds, from where to check for the previous closest regionstart/end. When omitted, it will take the current play(during play and rec) or edit-cursor-position.",
    opt = {
     use = false,
    },
    name = "TIME_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1355] = {
  fname = "GetClosestGoToPoints",
  label = "US_GetClosestGoToPoints",
  run = "in/out",
  desc = "returns, what are the closest markers/regions/item starts/itemends to position and within the chosen tracks.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "previous closest markers/regions/item starts/itemends",
    name = "ELEMENTPOSITION_PREV",
   },
   [2] = {
    type = "STRING",
    desc = "type of the previous closest markers/regions/item starts/itemends\
the type can be either Itembeg, Itemend, Marker: name, Region_beg: name; Region_end: name, ProjectStart, ProjectEnd; \"name\" is the name of the marker or region",
    name = "ELEMENTTYPE_PREV",
   },
   [3] = {
    type = "INTEGER",
    desc = "number of previous closest markers/regions/item starts/itemends",
    name = "NUMBER_PREV",
   },
   [4] = {
    type = "NUMBER",
    desc = "previous closest markers/regions/item starts/itemends",
    name = "ELEMENTPOSITION_NEXT",
   },
   [5] = {
    type = "STRING",
    desc = "type of the previous closest markers/regions/item starts/itemends\
the type can be either Itembeg, Itemend, Marker: name, Region_beg: name; Region_end: name, ProjectStart, ProjectEnd; \"name\" is the name of the marker or region",
    name = "ELEMENTTYPE_NEXT",
   },
   [6] = {
    type = "INTEGER",
    desc = "number of previous closest markers/regions/item starts/itemends",
    name = "NUMBER_NEXT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "tracknumbers, separated by a comma.",
    name = "TRACKSTRING",
   },
   [2] = {
    type = "NUMBER",
    desc = "a time position in seconds, from where to check for the next/previous closest items/markers/regions.\
-1, for editcursorposition; -2, for playcursor-position, -3, the mouse-cursor-position in seconds(where in the project the mousecursor hovers over)",
    name = "TIME_POSITION",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, look for itemedges as possible goto-points; false, do not",
    opt = {
     use = false,
    },
    name = "CHECK_ITEMEDGE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, look for markers as possible goto-points; false, do not",
    opt = {
     use = false,
    },
    name = "CHECK_MARKER",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, look for regions as possible goto-point; false, do not",
    opt = {
     use = false,
    },
    name = "CHECK_REGION",
   },
  },
  sp_api = "ultraschall",
 },
 [1356] = {
  fname = "CenterViewToCursor",
  label = "US_CenterViewToCursor",
  run = "in/out",
  desc = "centers the arrange-view around a given cursor\
\
returns nil in case of an error",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the cursortype to center\
1 - change arrangeview with edit-cursor centered\
2 - change arrangeview with play-cursor centered\
3 - change arrangeview with mouse-cursor-position centered\
4 - change arrangeview with optional parameter position centered",
    name = "CURSORTYPE",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position to center the arrangeview to; only used, when cursortype=4",
    opt = {
     use = false,
    },
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1357] = {
  fname = "GetLastCursorPosition",
  label = "US_GetLastCursorPosition",
  run = "in/out",
  desc = "Deprecated.\
  \
Returns the last and current editcursor-position. Needs Ultraschall-API-background-scripts started first, see [RunBackgroundHelperFeatures()](#RunBackgroundHelperFeatures).\
\
Has an issue, when editcursor-position was changed using a modifier, like alt+click or shift+click! Because of that, you should use this only in defer-scripts.\
\
returns -1, if Ultraschall-API-backgroundscripts weren't started yet.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the last cursorposition before the current one; -1, in case of an error",
    name = "LAST_EDITCURSOR_POSITION",
   },
   [2] = {
    type = "NUMBER",
    desc = "the new cursorposition; -1, in case of an error",
    name = "NEW_EDITCURSOR_POSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the time, when the state has changed the last time",
    name = "STATECHANGETIME",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1358] = {
  fname = "GetLastPlayState",
  label = "US_GetLastPlayState",
  run = "in/out",
  desc = "Deprecated\
\
Returns the last and current playstate. Needs Ultraschall-API-background-scripts started first, see [RunBackgroundHelperFeatures()](#RunBackgroundHelperFeatures).\
\
possible states are STOP, PLAY, PLAYPAUSE, REC, RECPAUSE\
\
returns -1, if Ultraschall-API-backgroundscripts weren't started yet.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the last playstate before the current one; -1, in case of an error",
    name = "LAST_PLAY_STATE",
   },
   [2] = {
    type = "STRING",
    desc = "the new playstate; -1, in case of an error",
    name = "NEW_PLAY_STATE",
   },
   [3] = {
    type = "NUMBER",
    desc = "the time, when the state has changed the last time",
    name = "STATECHANGETIME",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1359] = {
  fname = "GetLastLoopState",
  label = "US_GetLastLoopState",
  run = "in/out",
  desc = "Deprecated\
\
Returns the last and current loopstate. Needs Ultraschall-API-background-scripts started first, see [RunBackgroundHelperFeatures()](#RunBackgroundHelperFeatures).\
\
Possible states are LOOPED, UNLOOPED\
\
returns -1, if Ultraschall-API-backgroundscripts weren't started yet.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the last loopstate before the current one; -1, in case of an error",
    name = "LAST_LOOP_STATE",
   },
   [2] = {
    type = "STRING",
    desc = "the current loopstate; -1, in case of an error",
    name = "NEW_LOOP_STATE",
   },
   [3] = {
    type = "NUMBER",
    desc = "the time, when the state has changed the last time",
    name = "STATECHANGETIME",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1360] = {
  fname = "GetLoopState",
  label = "US_GetLoopState",
  run = "in/out",
  desc = "Returns the current loop-state",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, loop is on; 1, loop is off",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1361] = {
  fname = "SetLoopState",
  label = "US_SetLoopState",
  run = "in/out",
  desc = "Sets the current loop-state\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if setting was successful; false, if setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "0, loop is on; 1, loop is off",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [1362] = {
  fname = "Scrubbing_MoveCursor_GetToggleState",
  label = "US_Scrubbing_MoveCursor_GetToggleState",
  run = "in/out",
  desc = "Returns, if scrub is toggled on/off, for when moving editcursor via action or control surface, as set in Preferences -> Playback.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, scrub is on; false, scrub is off",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1363] = {
  fname = "Scrubbing_MoveCursor_Toggle",
  label = "US_Scrubbing_MoveCursor_Toggle",
  run = "in/out",
  desc = "Toggles scrub on/off, for when moving editcursor via action or control surface, as set in Preferences -> Playback.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, toggling was successful; false, toggling was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "this is the new value of the configvariable scrubmode, which is altered by this function",
    opt = {
     use = false,
    },
    name = "NEW_SCRUBMODE",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, toggles scrubbing on; false, toggles scrubbing off",
    name = "TOGGLE",
   },
  },
  sp_api = "ultraschall",
 },
 [1364] = {
  fname = "GetNextClosestItemStart",
  label = "US_GetNextClosestItemStart",
  run = "in/out",
  desc = "returns the next closest item-start in seconds and the corresponding item\
\
returns -1 and item==nil in case of error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the item-start",
    name = "POSITION",
   },
   [2] = {
    type = "MEDIAITEM",
    desc = "the MediaItem found",
    name = "ITEM",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "tracknumbers, separated by a comma.",
    name = "TRACKSTRING",
   },
   [2] = {
    type = "NUMBER",
    desc = "a time position in seconds, from where to check for the next closest item-start",
    name = "TIME_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1365] = {
  fname = "GetPreviousClosestItemStart",
  label = "US_GetPreviousClosestItemStart",
  run = "in/out",
  desc = "returns the previous closest item-start in seconds and the corresponding item\
\
returns -1 and item==nil in case of error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the item-start",
    name = "POSITION",
   },
   [2] = {
    type = "MEDIAITEM",
    desc = "the MediaItem found",
    name = "ITEM",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "tracknumbers, separated by a comma.",
    name = "TRACKSTRING",
   },
   [2] = {
    type = "NUMBER",
    desc = "a time position in seconds, from where to check for the previous closest item-start",
    name = "TIME_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1366] = {
  fname = "GetPreviousClosestItemEnd",
  label = "US_GetPreviousClosestItemEnd",
  run = "in/out",
  desc = "returns the previous closest item-end in seconds and the corresponding item\
\
returns -1 and item==nil in case of error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the item-start",
    name = "POSITION",
   },
   [2] = {
    type = "MEDIAITEM",
    desc = "the MediaItem found",
    name = "ITEM",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "tracknumbers, separated by a comma.",
    name = "TRACKSTRING",
   },
   [2] = {
    type = "NUMBER",
    desc = "a time position in seconds, from where to check for the previous closest item-end",
    name = "TIME_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1367] = {
  fname = "GetNextClosestItemEnd",
  label = "US_GetNextClosestItemEnd",
  run = "in/out",
  desc = "returns the next closest item-end in seconds and the corresponding item\
\
returns -1 and item==nil in case of error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the position of the item-start",
    name = "POSITION",
   },
   [2] = {
    type = "MEDIAITEM",
    desc = "the MediaItem found",
    name = "ITEM",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "tracknumbers, separated by a comma.",
    name = "TRACKSTRING",
   },
   [2] = {
    type = "NUMBER",
    desc = "a time position in seconds, from where to check for the next closest item-end",
    name = "TIME_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1368] = {
  fname = "GetSetConfigAcidImport",
  label = "US_GetSetConfigAcidImport",
  run = "in/out",
  desc = "Gets/Sets the value of \"When importing media\"-dropdownlist, as set in the Media with embedded tempo information-section in Preferences -> Video/REX/Misc\
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"acidimport\", as well as the reaper.ini-entry \"REAPER -> acidimport\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
-1, an error occured\
 0, Adjust media to project tempo\
 1, Import media at source tempo\
 2, Always prompt when importing media with embedded tempo",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
-1, an error occured\
 0, Adjust media to project tempo\
 1, Import media at source tempo\
 2, Always prompt when importing media with embedded tempo",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1369] = {
  fname = "GetSetConfigActionMenu",
  label = "US_GetSetConfigActionMenu",
  run = "in/out",
  desc = "Gets/Sets the value of \"Show recent actions\"-entry, as set in the Actions-menu.\
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"actionmenu\", as well as the reaper.ini-entry \"REAPER -> actionmenu\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, don't show recent actions - unchecked\
1, show recent actions - checked",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, don't show recent actions - unchecked\
1, show recent actions - checked",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1370] = {
  fname = "GetSetConfigAdjRecLat",
  label = "US_GetSetConfigAdjRecLat",
  run = "in/out",
  desc = "Gets/Sets the value of \"Use audio driver reported latency\"-checkbox, as set in Preferences -> Recording\
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"adjreclat\", as well as the reaper.ini-entry \"REAPER -> adjreclat\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, don't use audio driver reported latency(off) - unchecked\
1, don't use audio driver reported latency(on) - checked",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, don't use audio driver reported latency(off) - unchecked\
1, don't use audio driver reported latency(on) - checked",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1371] = {
  fname = "GetSetConfigAdjRecManLat",
  label = "US_GetSetConfigAdjRecManLat",
  run = "in/out",
  desc = "Gets/Sets the value of \"Output manual offset-samples\"-inputbox, as set in Preferences -> Recording\
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"adjrecmanlat\", as well as the reaper.ini-entry \"REAPER -> adjrecmanlat\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value; 0 to 2147483647; in samples",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value; 0 to 2147483647; in samples",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1372] = {
  fname = "GetSetConfigAfxCfg",
  label = "US_GetSetConfigAfxCfg",
  run = "in/out",
  desc = "Gets/Sets the value of the audioformat for \"Apply FX, Glue, Freeze, etc\", as set in the Project Settings->Media-dialog\
Only sets the format, not the individual format-settings(like bitrate, etc)!\
To keep the setting for new projects as standard-setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"afxcfg\", as well as the reaper.ini-entry \"REAPER -> afxcfg\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/newly set audioformat \
0, not set yet\
1179012432, Video (ffmpeg/libav encoder)\
1195984416, Video (GIF)\
1279477280, Video (LCF)\
1332176723, OGG Opus\
1634297446, AIFF\
1684303904, DDP\
1718378851, FLAC\
1769172768, Audio CD Image(CUE/BIN format)\
1836069740, MP3 (encoder by LAME project)\
1869047670, OGG Vorbis\
2002876005, WAV\
2004250731, WavPack lossless compressor",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new set audioformat\
1179012432, Video (ffmpeg/libav encoder)\
1195984416, Video (GIF)\
1279477280, Video (LCF)\
1332176723, OGG Opus\
1634297446, AIFF\
1684303904, DDP\
1718378851, FLAC\
1769172768, Audio CD Image(CUE/BIN format)\
1836069740, MP3 (encoder by LAME project)\
1869047670, OGG Vorbis\
2002876005, WAV\
2004250731, WavPack lossless compressor",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be standard-setting for new projects after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1373] = {
  fname = "GetSetConfigAllStereoPairs",
  label = "US_GetSetConfigAllStereoPairs",
  run = "in/out",
  desc = "Gets/Sets the value of \"Show non-standard stereo channel pairs(i.e Input2/Input3 etc)\"-checkbox in the Channel naming/mapping-section, as set in Preferences -> Audio\
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"allstereopairs\", as well as the reaper.ini-entry \"REAPER -> allstereopairs\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, don't show non standard stereo channel pairs(off) - unchecked\
1, show non standard stereo channel pairs(on) - checked",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, don't show non standard stereo channel pairs(off) - unchecked\
1, show non standard stereo channel pairs(on) - checked",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1374] = {
  fname = "GetSetConfigAlwaysAllowKB",
  label = "US_GetSetConfigAlwaysAllowKB",
  run = "in/out",
  desc = "Gets/Sets the value of \"Allow keyboard commands even when mouse-editing\"-checkbox, as set in Preferences -> General ->Advanced UI/system tweaks\
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"alwaysallowkb\", as well as the reaper.ini-entry \"REAPER -> alwaysallowkb\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value; 0(don't allow) to 1(allow)",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value; 0 to 1",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1375] = {
  fname = "GetSetConfigApplyFXTail",
  label = "US_GetSetConfigApplyFXTail",
  run = "in/out",
  desc = "Gets/Sets the value of \"Tail length when using Apply FX to items\"-inputbox in milliseconds, as set in Preferences -> Media\
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"applyfxtail\", as well as the reaper.ini-entry \"REAPER -> applyfxtail\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value; 0 to 2147483647",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value; 0 to 2147483647",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1376] = {
  fname = "GetSetConfigAdjRecManLatIn",
  label = "US_GetSetConfigAdjRecManLatIn",
  run = "in/out",
  desc = "Gets/Sets the value of \"Input manual offset-samples\"-inputbox, as set in Preferences -> Recording\
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"adjrecmanlatin\", as well as the reaper.ini-entry \"REAPER -> adjrecmanlatin\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1377] = {
  fname = "GetSetConfigAudioPrShift",
  label = "US_GetSetConfigAudioPrShift",
  run = "in/out",
  desc = "Gets/Sets the value of \"Preserve pitch in audio items when changing master playrate\", as set in the contextmenu of the master-playrate in the transport-area as well as toggled by action 40671(all sections)\
This is a project-setting. That means, setting persist to true will have an effect on new projects create, but only after you restarted Reaper!\
\
This alters the configuration-variable \"audioprshift\", as well as the reaper.ini-entry \"REAPER -> audioprshift\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, don't preserve pitch - unchecked\
1, preserve pitch - checked",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value\
0, don't preserve pitch - unchecked\
1, preserve pitch - checked",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept for new projects, but only after restart of Reaper; false, old standard-project-setting will be kept",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1378] = {
  fname = "GetSetConfigAudioCloseStop",
  label = "US_GetSetConfigAudioCloseStop",
  run = "in/out",
  desc = "Gets/Sets the value of \"Close audio device when stopped and active(less responsive)\"-checkbox, as set in Preferences -> Audio  \
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"audioclosestop\", as well as the reaper.ini-entry \"REAPER -> audioclosestop\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1379] = {
  fname = "GetSetConfigAudioThreadPr",
  label = "US_GetSetConfigAudioThreadPr",
  run = "in/out",
  desc = "Gets/Sets the value of \"Audio thread priority\"-dropdownlist, as set in Preferences -> Device  \
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"audiothreadpr\", as well as the reaper.ini-entry \"REAPER -> audiothreadpr\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
-1, ASIO Default / MMCSS Pro Audio / Time Critical  \
0, Normal  \
1, Above normal  \
2, Highest  \
3, Time Critical  \
4, MMCSS / Time Critical  ",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
-1, ASIO Default / MMCSS Pro Audio / Time Critical  \
0, Normal  \
1, Above normal  \
2, Highest  \
3, Time Critical  \
4, MMCSS / Time Critical  ",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1380] = {
  fname = "GetSetConfigAudioCloseTrackWnds",
  label = "US_GetSetConfigAudioCloseTrackWnds",
  run = "in/out",
  desc = "Gets/Sets the value of \"Allow snap grid/track envelope/routing windows to stay open\"-checkbox in Preferences -> General -> Advanced UI/system tweaks.  \
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"autoclosetrackwnds\", as well as the reaper.ini-entry \"REAPER -> autoclosetrackwnds\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, it is allowed(on) - checked  \
1, it is not allowed(off) - unchecked  ",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, it is allowed(on) - checked  \
1, it is not allowed(off) - unchecked  ",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1381] = {
  fname = "GetSetConfigAutoMute",
  label = "US_GetSetConfigAutoMute",
  run = "in/out",
  desc = "Gets/Sets the value of \"Automute-dropdownlist in the section Mute\"-settings, as set in Preferences -> Mute/Solo \
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"automute\", as well as the reaper.ini-entry \"REAPER -> automute\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, No automatic muting  \
1, Automatically mute master track  \
2, Automatically mute any track  ",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, No automatic muting  \
1, Automatically mute master track  \
2, Automatically mute any track  ",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1382] = {
  fname = "GetSetConfigAutoMuteFlags",
  label = "US_GetSetConfigAutoMuteFlags",
  run = "in/out",
  desc = "Sets the \"Reset on playback start\"-checkbox in section Mute-settings, as set in Preferences -> Mute/Solo  \
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"automuteflags\", as well as the reaper.ini-entry \"REAPER -> automuteflags\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, Reset on playback start(on) - checked  \
1, Reset on playback start(off) - unchecked  ",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, Reset on playback start(on) - checked  \
1, Reset on playback start(off) - unchecked  ",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1383] = {
  fname = "GetSetConfigAutoSaveInt",
  label = "US_GetSetConfigAutoSaveInt",
  run = "in/out",
  desc = "Sets the \"Every x minutes\"-inputbox from the Project saving-section, as set in Preferences -> Project. \
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"autosaveint\", as well as the reaper.ini-entry \"REAPER -> autosaveint\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0 to 2147483647; in seconds; higher values become negative",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0 to 2147483647 in seconds",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1384] = {
  fname = "GetSetConfigAutoSaveMode",
  label = "US_GetSetConfigAutoSaveMode",
  run = "in/out",
  desc = "Sets the \"Every x minutes\"-dropdownlist from the Project saving-section, as set in Preferences -> Project. \
To keep the setting after restart of Reaper, set persist=true\
\
This alters the configuration-variable \"autosavemode\", as well as the reaper.ini-entry \"REAPER -> autosavemode\"\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, when not recording  \
1, when stopped  \
2, any time  ",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set a new value; false, return the current value",
    name = "SET",
   },
   [2] = {
    type = "INTEGER",
    desc = "the current/new setting-value\
0, when not recording  \
1, when stopped  \
2, any time  ",
    name = "SETTING",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, this setting will be kept after restart of Reaper; false, setting will be lost after exiting Reaper",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1385] = {
  fname = "GetStartNewFileRecSizeState",
  label = "US_GetStartNewFileRecSizeState",
  run = "in/out",
  desc = "Returns, if Reaper shall start a file after a specified amount of MegaBytes as well, if the fileswitches shall be offset when multitrack-recording and the maximum filesize before starting a new file.\
\
see <a href=\"#SetStartNewFileRecSizeState\">SetStartNewFileRecSizeState</a> for setting the current settings.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, Reaper starts a new file, when a recorded file reaches max_rec_size; false, files are as long until recording stops",
    name = "START_NEW_FILES",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, When recording multiple tracks, offset file switches for better performance; false, don't offset file-switches",
    name = "OFFSET_FILE_SWITCHES",
   },
   [3] = {
    type = "INTEGER",
    desc = "the maximum length of a recorded file in MegaBytes, before Reaper shall start a new file; only applied when When recording multiple tracks, offset file switches for better performance=true",
    name = "MAX_REC_SIZE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1386] = {
  fname = "SetStartNewFileRecSizeState",
  label = "US_SetStartNewFileRecSizeState",
  run = "in/out",
  desc = "Sets, if Reaper shall start a file after a specified amount of MegaBytes as well, if the fileswitches shall be offset when multitrack-recording and the maximum filesize before starting a new file.\
\
see <a href=\"#GetStartNewFileRecSizeState\">GetStartNewFileRecSizeState</a> for getting the current settings.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, Reaper starts a new file, when a recorded file reaches max_rec_size; false, files are as long until recording stops",
    name = "START_NEW_FILES",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, When recording multiple tracks, offset file switches for better performance; false, don't offset file-switches",
    name = "OFFSET_FILE_SWITCHES",
   },
   [3] = {
    type = "INTEGER",
    desc = "the maximum length of a recorded file in MegaBytes, before Reaper shall start a new file; only applied when When recording multiple tracks, offset file switches for better performance=true",
    name = "MAX_REC_SIZE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, set the setting to reaper.ini so it persists after restarting Reaper; false, set it only for the time, until Reaper is restarted",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
 [1387] = {
  fname = "pause_follow_one_cycle",
  label = "US_pause_follow_one_cycle",
  run = "in/out",
  desc = "Skips auto-follow-off-checking-script for one cycle.\
FollowMode in Ultraschall turns on Autoscrolling in a useable way. In addition, under certain circumstances, followmode will be turned off automatically. \
If you experience this but want to avoid the follow-off-functionality, use this function.\
\
This function is only relevant, if you want to develop scripts that work perfectly within the Ultraschall.fm-extension.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1388] = {
  fname = "IsTrackSoundboard",
  label = "US_IsTrackSoundboard",
  run = "in/out",
  desc = "Returns, if this track is a soundboard-track, means, contains an Ultraschall-Soundboard-plugin.\
\
Only relevant in Ultraschall-installations\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, it is an Ultraschall-Soundboard-track; false, it is not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber to check for; 0, for master-track; 1, for track 1; n for track n",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1389] = {
  fname = "IsTrackStudioLink",
  label = "US_IsTrackStudioLink",
  run = "in/out",
  desc = "Returns, if this track is a StudioLink-track, means, contains a StudioLink-Plugin\
\
Only relevant in Ultraschall-installations\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, it is a StudioLink-track; false, it is not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber to check for; 0, for master-track; 1, for track 1; n for track n",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1390] = {
  fname = "IsTrackStudioLinkOnAir",
  label = "US_IsTrackStudioLinkOnAir",
  run = "in/out",
  desc = "Returns, if this track is a StudioLinkOnAir-track, means, contains a StudioLinkOnAir-Plugin\
\
Only relevant in Ultraschall-installations\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, it is a StudioLinkOnAir-track; false, it is not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber to check for; 0, for master-track; 1, for track 1; n for track n",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1391] = {
  fname = "GetTypeOfTrack",
  label = "US_GetTypeOfTrack",
  run = "in/out",
  desc = "Returns the tracktype of a specific track. Will return the type of the first valid SoundBoard, StudioLink, StudioLinkOnAir-plugin in the track-fx-chain.\
If there are multiple valid plugins and therefore types, the second retval multiple will be set to true, else to false.\
\
Only relevant in Ultraschall-installations\
\
returns \"\", false in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "Either \"StudioLink\", \"StudioLinkOnAir\", \"SoundBoard\" or \"Other\". \"\", in case of an error",
    name = "TYPE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, the track has other valid plugins as well; false, it is a \"pure typed\" track",
    name = "MULTIPLE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the tracknumber to check for; 0, for master-track; 1, for track 1; n for track n",
    name = "TRACKNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1392] = {
  fname = "GetAllAUXSendReceives2",
  label = "US_GetAllAUXSendReceives2",
  run = "in/out",
  desc = "returns a table with all AUX-SendReceive-settings of all tracks, excluding master-track\
\
like [GetAllAUXSendReceives](#GetAllAUXSendReceives), but returns the type of a track as well\
\
returned table is of structure:\
  table[\"AllAUXSendReceive\"]=true                               - signals, this is an AllAUXSendReceive-table. Don't alter!  \
  table[\"number\\_of_tracks\"]                                     - the number of tracks in this table, from track 1 to track n  \
  table[tracknumber][\"type\"]                                    - type of the track, SoundBoard, StudioLink, StudioLinkOnAir or Other  \
  table[tracknumber][\"AUXSendReceives_count\"]                   - the number of AUXSendReceives of tracknumber, beginning with 1  \
  table[tracknumber][AUXSendReceivesIndex][\"recv\\_tracknumber\"] - the track, from which to receive audio in this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"post\\_pre_fader\"]   - the setting of post-pre-fader of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"volume\"]            - the volume of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"pan\"]               - the panning of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"mute\"]              - the mute-setting of this AUXSendReceivesIndex  of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"mono\\_stereo\"]      - the mono/stereo-button-setting of this AUXSendReceivesIndex  of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"phase\"]             - the phase-setting of this AUXSendReceivesIndex  of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"chan\\_src\"]         - the audiochannel-source of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"snd\\_src\"]          - the send-to-channel-target of this AUXSendReceivesIndex of tracknumber  \
  table[tracknumber][AUXSendReceivesIndex][\"pan\\_law\"]           - pan-law, default is -1  \
  table[tracknumber][AUXSendReceivesIndex][\"midichanflag\"]      - the Midi-channel of this AUXSendReceivesIndex of tracknumber, leave it 0  \
  table[tracknumber][AUXSendReceivesIndex][\"automation\"]        - the automation-mode of this AUXSendReceivesIndex  of tracknumber  \
    \
  See [GetTrackAUXSendReceives](#GetTrackAUXSendReceives) for more details on the individual settings, stored in the entries.  ",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all SendReceive-entries of the current project.",
    name = "ALLAUXSENDRECEIVES",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of tracks in the AllMainSends-table",
    name = "NUMBER_OF_TRACKS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1393] = {
  fname = "GetAllHWOuts2",
  label = "US_GetAllHWOuts2",
  run = "in/out",
  desc = "returns a table with all HWOut-settings of all tracks, including master-track(track index: 0)\
\
like [GetAllHWOuts](#GetAllHWOuts) but includes the type of a track as well\
\
returned table is of structure:\
  table[\"HWOuts\"]=true                              - signals, this is a HWOuts-table; don't change that!  \
  table[\"number\\_of_tracks\"]                         - the number of tracks in this table, from track 0(master) to track n  \
  table[tracknumber][\"type\"]                        - type of the track, SoundBoard, StudioLink, StudioLinkOnAir or Other  \
  table[tracknumber][\"HWOut_count\"]                 - the number of HWOuts of tracknumber, beginning with 1  \
  table[tracknumber][HWOutIndex][\"outputchannel\"]   - the number of outputchannels of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"post\\_pre_fader\"] - the setting of post-pre-fader of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"volume\"]          - the volume of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"pan\"]             - the panning of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"mute\"]            - the mute-setting of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"phase\"]           - the phase-setting of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"source\"]          - the source/input of this HWOutIndex of tracknumber  \
  table[tracknumber][HWOutIndex][\"pan\\law\"]         - pan-law, default is -1  \
  table[tracknumber][HWOutIndex][\"automationmode\"]  - the automation-mode of this HWOutIndex of tracknumber    \
  \
  See [GetTrackHWOut](#GetTrackHWOut) for more details on the individual settings, stored in the entries.",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all HWOuts of the current project.",
    name = "ALLHWOUTS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of tracks in the AllMainSends-table",
    name = "NUMBER_OF_TRACKS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1394] = {
  fname = "GetAllMainSendStates2",
  label = "US_GetAllMainSendStates2",
  run = "in/out",
  desc = "returns a table with all MainSend-settings of all tracks, excluding master-track.\
\
like [GetAllMainSendStates](#GetAllMainSendStates), but includes the type of the track as well.\
\
The MainSend-settings are the settings, if a certain track sends it's signal to the Master Track\
\
returned table is of structure:\
  Table[\"number\\_of_tracks\"]            - The number of tracks in this table, from track 1 to track n  \
  Table[tracknumber][\"type\"]           - type of the track, SoundBoard, StudioLink, StudioLinkOnAir or Other  \
  Table[tracknumber][\"MainSend\"]       - Send to Master on(1) or off(1)  \
  Table[tracknumber][\"ParentChannels\"] - the parent channels of this track  \
  \
  See [GetTrackMainSendState](#GetTrackMainSendState) for more details on the individual settings, stored in the entries.",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all AllMainSends-entries of the current project.",
    name = "ALLMAINSENDS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of tracks in the AllMainSends-table",
    name = "NUMBER_OF_TRACKS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1395] = {
  fname = "SetUSExternalState",
  label = "US_SetUSExternalState",
  run = "in/out",
  desc = "stores values into ultraschall.ini. Returns true if successful, false if unsuccessful.\
\
unlike other Ultraschall-API-functions, this converts the values, that you pass as parameters, into strings, regardless of their type",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful, false if unsuccessful.",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "section within the ini-file",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "key within the section",
    name = "KEY",
   },
   [3] = {
    type = "STRING",
    desc = "the value itself",
    name = "VALUE",
   },
   [4] = {
    type = "STRING",
    desc = "set this to a filename, if you don't want to use ultraschall.ini; it will be stored into the resource-path of Reaper, so no path needed\
nil, uses ultraschall.ini",
    opt = {
     use = false,
    },
    name = "FILENAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1396] = {
  fname = "GetUSExternalState",
  label = "US_GetUSExternalState",
  run = "in/out",
  desc = "gets a value from ultraschall.ini. \
\
returns an empty string in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the value itself; empty string in case of an error or no such extstate",
    name = "VALUE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the section of the ultraschall.ini.",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "the key of which you want it's value.",
    name = "KEY",
   },
   [3] = {
    type = "STRING",
    desc = "set this to a filename, if you don't want to use ultraschall.ini; it will be stored into the resource-path of Reaper, so no path needed\
nil, uses ultraschall.ini",
    opt = {
     use = false,
    },
    name = "FILENAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1397] = {
  fname = "CountUSExternalState_sec",
  label = "US_CountUSExternalState_sec",
  run = "in/out",
  desc = "returns the number of [sections] in the ultraschall.ini",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of section in the ultraschall.ini",
    name = "SECTION_COUNT",
   },
   [2] = {
    type = "STRING",
    desc = "set this to a filename, if you don't want to use ultraschall.ini; it will be stored into the resource-path of Reaper, so no path needed\
nil, uses ultraschall.ini",
    opt = {
     use = false,
    },
    name = "FILENAME",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1398] = {
  fname = "CountUSExternalState_key",
  label = "US_CountUSExternalState_key",
  run = "in/out",
  desc = "returns the number of keys in the given [section] in ultraschall.ini\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of keys within an ultraschall.ini-section",
    name = "KEY_COUNT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the section of the ultraschall.ini, of which you want the number of keys.",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "set this to a filename, if you don't want to use ultraschall.ini; it will be stored into the resource-path of Reaper, so no path needed\
nil, uses ultraschall.ini",
    opt = {
     use = false,
    },
    name = "FILENAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1399] = {
  fname = "EnumerateUSExternalState_sec",
  label = "US_EnumerateUSExternalState_sec",
  run = "in/out",
  desc = "returns name of the numberth section in ultraschall.ini or nil if invalid",
  out = {
   [1] = {
    type = "STRING",
    desc = "the name of the numberth section within ultraschall.ini",
    name = "SECTION_NAME",
   },
   [2] = {
    type = "STRING",
    desc = "set this to a filename, if you don't want to use ultraschall.ini; it will be stored into the resource-path of Reaper, so no path needed\
nil, uses ultraschall.ini",
    opt = {
     use = false,
    },
    name = "FILENAME",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of section, whose name you want to know",
    name = "NUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1400] = {
  fname = "EnumerateUSExternalState_key",
  label = "US_EnumerateUSExternalState_key",
  run = "in/out",
  desc = "returns name of a numberth key within a section in ultraschall.ini or nil if invalid or not existing",
  out = {
   [1] = {
    type = "STRING",
    desc = "the name ob the numberth key in ultraschall.ini.",
    name = "KEY_NAME",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the section within ultraschall.ini, where the key is stored.",
    name = "SECTION",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the key, whose name you want to know; 1 for the first one",
    name = "NUMBER",
   },
   [3] = {
    type = "STRING",
    desc = "set this to a filename, if you don't want to use ultraschall.ini; it will be stored into the resource-path of Reaper, so no path needed\
nil, uses ultraschall.ini",
    opt = {
     use = false,
    },
    name = "FILENAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1401] = {
  fname = "DeleteUSExternalState",
  label = "US_DeleteUSExternalState",
  run = "in/out",
  desc = "Deletes an external state from the ultraschall.ini\
\
Returns false in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "false in case of error; true in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the section, in which the to be deleted-key is located",
    name = "SECTION",
   },
   [2] = {
    type = "STRING",
    desc = "the key to delete",
    name = "KEY",
   },
   [3] = {
    type = "STRING",
    desc = "set this to a filename, if you don't want to use ultraschall.ini; it will be stored into the resource-path of Reaper, so no path needed\
nil, uses ultraschall.ini",
    opt = {
     use = false,
    },
    name = "FILENAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1402] = {
  fname = "SoundBoard_StopAllSounds",
  label = "US_SoundBoard_StopAllSounds",
  run = "in/out",
  desc = "Stops all sounds currently playing in the Ultraschall-SoundBoard\
\
Needs ultraschall-Soundboard installed to be useable!\
\
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1403] = {
  fname = "SoundBoard_TogglePlayPause",
  label = "US_SoundBoard_TogglePlayPause",
  run = "in/out",
  desc = "Toggles between Play and Pause of a certain player in the Ultraschall-SoundBoard\
\
Needs ultraschall-Soundboard installed to be useable!\
\
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the player of the SoundBoard; from 1-24",
    name = "PLAYERINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1404] = {
  fname = "SoundBoard_TogglePlayStop",
  label = "US_SoundBoard_TogglePlayStop",
  run = "in/out",
  desc = "Toggles between Play and Stop of a certain player in the Ultraschall-SoundBoard\
\
Needs ultraschall-Soundboard installed to be useable!\
\
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the player of the SoundBoard; from 1-24",
    name = "PLAYERINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1405] = {
  fname = "SoundBoard_Play",
  label = "US_SoundBoard_Play",
  run = "in/out",
  desc = "Starts playing of a certain player in the Ultraschall-SoundBoard\
\
Needs ultraschall-Soundboard installed to be useable!\
\
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the player of the SoundBoard; from 1-24",
    name = "PLAYERINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1406] = {
  fname = "SoundBoard_Stop",
  label = "US_SoundBoard_Stop",
  run = "in/out",
  desc = "Stops playing of a certain player in the Ultraschall-SoundBoard\
\
Needs ultraschall-Soundboard installed to be useable!\
\
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the player of the SoundBoard; from 1-24",
    name = "PLAYERINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1407] = {
  fname = "SoundBoard_TogglePlay_FadeOutStop",
  label = "US_SoundBoard_TogglePlay_FadeOutStop",
  run = "in/out",
  desc = "Toggles between Play and FadeOut with Stop of a certain player in the Ultraschall-SoundBoard\
\
Needs ultraschall-Soundboard installed to be useable!\
\
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the player of the SoundBoard; from 1-24",
    name = "PLAYERINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1408] = {
  fname = "SoundBoard_PlayList_CurrentIndex",
  label = "US_SoundBoard_PlayList_CurrentIndex",
  run = "in/out",
  desc = "Returns the position within the playlist of the Ultraschall Soundboard.\
\
Playlist means, the player within all players of the Ultraschall-Soundboard.\
\
Needs ultraschall-Soundboard installed to be useable!\
\
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.\
\
For other playlist-related functions, see also [SoundBoard\\_PlayList\\_SetIndex](#SoundBoard_PlayList_SetIndex), [SoundBoard\\_PlayList\\_Next](#SoundBoard_PlayList_Next) and [SoundBoard\\_PlayList\\_Previous](#SoundBoard_PlayList_Previous)      ",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the position in the playlist",
    name = "CURRENT_PLAYLIST_POSITION",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1409] = {
  fname = "SoundBoard_PlayList_SetIndex",
  label = "US_SoundBoard_PlayList_SetIndex",
  run = "in/out",
  desc = "sets a new playerindex within the playlist of the Ultraschall-Soundboard.\
\
You can optionally start the player and stop all others currently playing.\
\
Needs ultraschall-Soundboard installed to be useable!\
\
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.\
\
For other playlist-related functions, see also [Soundboard\\_PlayList\\_CurrentIndex](#Soundboard_PlayList_CurrentIndex), [SoundBoard\\_PlayList\\_Next](#SoundBoard_PlayList_Next) and [SoundBoard\\_PlayList\\_Previous](#SoundBoard_PlayList_Previous) ",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the player of the SoundBoard; from 1-24",
    name = "PLAYERINDEX",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, start playing of this player immediately; nil or false, don't start playing",
    opt = {
     use = false,
    },
    name = "PLAY",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, stop all other players currently playing; nil or false, don't stop anything",
    opt = {
     use = false,
    },
    name = "STOP_ALL_OTHERS",
   },
  },
  sp_api = "ultraschall",
 },
 [1410] = {
  fname = "SoundBoard_PlayList_Next",
  label = "US_SoundBoard_PlayList_Next",
  run = "in/out",
  desc = "Stops current player and starts the next player within the playlist of the Ultraschall-Soundboard.\
\
Needs ultraschall-Soundboard installed to be useable!\
\
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.\
    \
For other playlist-related functions, see also [Soundboard\\_PlayList\\_CurrentIndex](#Soundboard_PlayList_CurrentIndex), [SoundBoard\\_PlayList\\_SetIndex](#SoundBoard_PlayList_SetIndex) and [SoundBoard\\_PlayList\\_Previous](#SoundBoard_PlayList_Previous)      ",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1411] = {
  fname = "SoundBoard_PlayList_Previous",
  label = "US_SoundBoard_PlayList_Previous",
  run = "in/out",
  desc = "Stops current player and starts the previous player within the playlist of the Ultraschall-Soundboard.\
\
When the previous would be before the first, it will not do anything.\
\
Needs ultraschall-Soundboard installed to be useable!\
\
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.\
\
For other playlist-related functions, see also [Soundboard\\_PlayList\\_CurrentIndex](#Soundboard_PlayList_CurrentIndex), [SoundBoard\\_PlayList\\_SetIndex](#SoundBoard_PlayList_SetIndex) and [SoundBoard\\_PlayList\\_Next](#SoundBoard_PlayList_Next).",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1412] = {
  fname = "Soundboard_PlayFadeIn",
  label = "US_Soundboard_PlayFadeIn",
  run = "in/out",
  desc = "Starts a sound with a fade-in of a certain player in the Ultraschall-SoundBoard\
\
Needs ultraschall-Soundboard installed to be useable!\
\
Track(s) who hold the soundboard must be recarmed and recinput set to MIDI or VKB.",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the player of the SoundBoard; from 1-24",
    name = "PLAYERINDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1413] = {
  fname = "LUFS_Metering_MatchGain",
  label = "US_LUFS_Metering_MatchGain",
  run = "in/out",
  desc = "Hits programmatically the \"Match Gain\"-Button of Ultraschall's LUFS Loudness Meter, when running(only available in Ultraschall-installations).",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1414] = {
  fname = "LUFS_Metering_Reset",
  label = "US_LUFS_Metering_Reset",
  run = "in/out",
  desc = "Hits programmatically the \"Reset\"-Button of Ultraschall's LUFS Loudness Meter, when running(only available in Ultraschall-installations).",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1415] = {
  fname = "LUFS_Metering_GetValues",
  label = "US_LUFS_Metering_GetValues",
  run = "in/out",
  desc = "Returns current LUFS-values of Ultraschall's LUFS Loudness Meter, when running(only available in Ultraschall-installations).",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the integral LUFS-value currently measured",
    name = "LUFS_INTEGRAL",
   },
   [2] = {
    type = "NUMBER",
    desc = "the LUFS-target currently set in the UI of the jsfx",
    name = "LUFS_TARGET",
   },
   [3] = {
    type = "NUMBER",
    desc = "the gain currently set in the UI of the effect in dB",
    name = "DB_GAIN",
   },
   [4] = {
    type = "INTEGER",
    desc = "0, the fx isn't active(usually when playback stopped); 1, the fx is active(during playback for instance)",
    name = "FX_ACTIVE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1416] = {
  fname = "LUFS_Metering_SetValues",
  label = "US_LUFS_Metering_SetValues",
  run = "in/out",
  desc = "Returns current LUFS-values of Ultraschall's LUFS Loudness Meter, when running(only available in Ultraschall-installations).",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the LUFS-target\
0, -14 LUFS (Spotify)\
1, -16 LUFS (Podcast)\
2, -18 LUFS\
3, -20 LUFS\
4, -23 LUFS (EBU R128)",
    opt = {
     use = false,
    },
    name = "LUFS_TARGET",
   },
   [2] = {
    type = "NUMBER",
    desc = "the gain of the effect in dB",
    opt = {
     use = false,
    },
    name = "DB_GAIN",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1417] = {
  fname = "LUFS_Metering_AddEffect",
  label = "US_LUFS_Metering_AddEffect",
  run = "in/out",
  desc = "Adds Ultraschall's LUFS Loudness Meter into the Master Track(only available in Ultraschall-installations).\
\
Parameter enabled is always working, even if the fx has already been added.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, fx has been added; false, fx hasn't been added as it was already present.",
    name = "ADDED",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, enable the fx; false, disable the fx",
    name = "ENABLED",
   },
  },
  sp_api = "ultraschall",
 },
 [1418] = {
  fname = "LUFS_Metering_ShowEffect",
  label = "US_LUFS_Metering_ShowEffect",
  run = "in/out",
  desc = "Shows Ultraschall's LUFS Loudness Meter in the Master Track(only available in Ultraschall-installations).",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1419] = {
  fname = "ConvertColor",
  label = "US_ConvertColor",
  run = "in/out",
  desc = "converts r, g, b-values to native-system-color. Works like reaper's ColorToNative, but doesn't need |0x1000000 added.\
\
returns color-value 0, and retval=false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the native-system-color; 0 to 33554431",
    name = "COLORVALUE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the red colorvalue",
    name = "R",
   },
   [2] = {
    type = "INTEGER",
    desc = "the green colorvalue",
    name = "G",
   },
   [3] = {
    type = "INTEGER",
    desc = "the blue colorvalue",
    name = "B",
   },
  },
  sp_api = "ultraschall",
 },
 [1420] = {
  fname = "ConvertColorReverse",
  label = "US_ConvertColorReverse",
  run = "in/out",
  desc = "converts a native-system-color to r, g, b-values.\
\
returns 0,0,0,false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the red colorvalue",
    name = "R",
   },
   [2] = {
    type = "INTEGER",
    desc = "the green colorvalue",
    name = "G",
   },
   [3] = {
    type = "INTEGER",
    desc = "the blue colorvalue",
    name = "B",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, color-conversion was successful; false, color-conversion was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the native-system-color; 0 to 33554431",
    name = "COLORVALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1421] = {
  fname = "RGB2Grayscale",
  label = "US_RGB2Grayscale",
  run = "in/out",
  desc = "converts rgb to a grayscale value. Works native on Mac as well on Windows, no color conversion needed.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the gray color-value, generated from red,blue and green.",
    name = "GRAYCOLOR",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "red-value between 0 and 255.",
    name = "RED",
   },
   [2] = {
    type = "INTEGER",
    desc = "red-value between 0 and 255.",
    name = "GREEN",
   },
   [3] = {
    type = "INTEGER",
    desc = "red-value between 0 and 255.",
    name = "BLUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1422] = {
  fname = "ConvertColorToGFX",
  label = "US_ConvertColorToGFX",
  run = "in/out",
  desc = "converts red,green,blue,alpha-values from 0-255 range to 0-1 range, so these values can be used by Reaper-Lua's gfx.functions().\
\
supports negative-values up from -255 to +255, so you can use the function as well for subtraction of colorvalues.\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the converted red-value between -1 and +1; nil in case of error",
    name = "R",
   },
   [2] = {
    type = "NUMBER",
    desc = "the converted green-value between -1 and +1",
    name = "G",
   },
   [3] = {
    type = "NUMBER",
    desc = "the converted blue-value between -1 and +1",
    name = "B",
   },
   [4] = {
    type = "NUMBER",
    desc = "the converted alpha-value between -1 and +1",
    name = "A",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the red-color-value between -255 and +255",
    name = "R",
   },
   [2] = {
    type = "INTEGER",
    desc = "the green-color-value between -255 and +255",
    name = "G",
   },
   [3] = {
    type = "INTEGER",
    desc = "the blue-color-value between -255 and +255",
    name = "B",
   },
   [4] = {
    type = "INTEGER",
    desc = "the alpha-color-value between -255 and +255",
    name = "A",
   },
  },
  sp_api = "ultraschall",
 },
 [1423] = {
  fname = "ConvertGFXToColor",
  label = "US_ConvertGFXToColor",
  run = "in/out",
  desc = "converts red,green,blue,alpha-values from 0-1 range to 0-255 range, so these values can be used by Reaper's normal color-value-functions.\
\
supports negative-values up from -1 to +1, so you can use the function as well for subtraction of colorvalues.\
\
returns nil in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the red-color-value between -255 and +255",
    name = "R",
   },
   [2] = {
    type = "INTEGER",
    desc = "the green-color-value between -255 and +255",
    name = "G",
   },
   [3] = {
    type = "INTEGER",
    desc = "the blue-color-value between -255 and +255",
    name = "B",
   },
   [4] = {
    type = "INTEGER",
    desc = "the alpha-color-value between -255 and +255",
    name = "A",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the converted red-value between -1 and +1; nil in case of error",
    name = "R",
   },
   [2] = {
    type = "NUMBER",
    desc = "the converted green-value between -1 and +1",
    name = "G",
   },
   [3] = {
    type = "NUMBER",
    desc = "the converted blue-value between -1 and +1",
    name = "B",
   },
   [4] = {
    type = "NUMBER",
    desc = "the converted alpha-value between -1 and +1",
    name = "A",
   },
  },
  sp_api = "ultraschall",
 },
 [1424] = {
  fname = "CreateColorTable",
  label = "US_CreateColorTable",
  run = "in/out",
  desc = "Returns a colortable to be used by color-graphics-functions.\
\
The colorvalue for start and end can be 0 to 255 or the other way round 255 to 0\
\
Can be used by [ApplyColorTableToTrackColors](#ApplyColorTableToTrackColors)\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "ARRAY",
    desc = "a colortable for the colors with the number of steps of your choice; \
each indexentry holds entries \"r\"(0-255), \"g\"(0-255), \"b\"(0-255), \"nativecolor\" and \"gfxr\"(0-1), \"gfxg\"(0-1), \"gfxb\"(0-1).",
    name = "COLORTABLE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "start redvalue, between 0 and 255",
    name = "STARTR",
   },
   [2] = {
    type = "INTEGER",
    desc = "start greenvalue, between 0 and 255 ",
    name = "STARTG",
   },
   [3] = {
    type = "INTEGER",
    desc = "start bluevalue, between 0 and 255",
    name = "STARTB",
   },
   [4] = {
    type = "INTEGER",
    desc = "end redvalue, between 0 and 255",
    name = "ENDR",
   },
   [5] = {
    type = "INTEGER",
    desc = "end greenvalue, between 0 and 255",
    name = "ENDG",
   },
   [6] = {
    type = "INTEGER",
    desc = "end bluevalue, between 0 and 255",
    name = "ENDB",
   },
   [7] = {
    type = "INTEGER",
    desc = "the number of steps from the lowest to the highest r,g,b-color start/end-values",
    name = "NUMBER_OF_STEPS",
   },
  },
  sp_api = "ultraschall",
 },
 [1425] = {
  fname = "CreateSonicRainboomColorTable",
  label = "US_CreateSonicRainboomColorTable",
  run = "in/out",
  desc = "Returns a colortable in Ultraschall's standard-trackcolor-setting \"Sonic Rainboom\"-style.\
\
Can be used by [ApplyColorTableToTrackColors](#ApplyColorTableToTrackColors)",
  out = {
   [1] = {
    type = "ARRAY",
    desc = "a colortable with all values for Ultraschall's track-color \"Sonic Rainboom\"",
    name = "COLORTABLE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1426] = {
  fname = "IsValidColorTable",
  label = "US_IsValidColorTable",
  run = "in/out",
  desc = "Checks for valid color-tables.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's a valid ColorTable; false, if it's not a valid ColorTable",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "a table to check for being a valid ColorTable",
    name = "COLORTABLE",
   },
  },
  sp_api = "ultraschall",
 },
 [1427] = {
  fname = "ApplyColorTableToTrackColors",
  label = "US_ApplyColorTableToTrackColors",
  run = "in/out",
  desc = "Apply a ColorTable to Tracks, to colorize MediaTracks\
\
ColorTables can be created by [CreateColorTable](#CreateColorTable)\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, adjusting track-colors was successful; false, adjusting track-colors was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "the ColorTable to apply to the MediaTrackColors",
    name = "COLORTABLE",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, apply ColorTable once; will return false, if fewer colors are in ColorTable available than tracks in the project\
nil or 1, repeat the colors from the ColorTable over and over again over the tracks; means: if you have 10 tracks and 5 colors, the colors will fill track 1 to 5 and then again track 6 to 10\
2, spread the colors from the ColorTable over all tracks equally",
    name = "SPREAD",
   },
   [3] = {
    type = "INTEGER",
    desc = "the first track to colorize; nil, to use the first track in project",
    name = "STARTTRACK",
   },
   [4] = {
    type = "INTEGER",
    desc = "the last track to colorize; nil, to use the last track in project",
    name = "ENDTRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1428] = {
  fname = "ApplyColorTableToItemColors",
  label = "US_ApplyColorTableToItemColors",
  run = "in/out",
  desc = "Apply a ColorTable to MediaItems in a MediaItemArray, to colorize MediaItems\
\
ColorTables can be created by [CreateColorTable](#CreateColorTable)\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, adjusting item-colors was successful; false, adjusting item-colors was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "the ColorTable to apply to the MediaItemColors",
    name = "COLORTABLE",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, apply ColorTable once; will return false, if fewer colors are in ColorTable available than items in the MediaItemArray\
nil or 1, repeat the colors from the ColorTable over and over again over the item; means: if you have 10 items and 5 colors, the colors will fill items 1 to 5 and then again items 6 to 10\
2, spread the colors from the ColorTable over all items equally",
    name = "SPREAD",
   },
   [3] = {
    type = "MEDIAITEMARRAY",
    desc = "an array with all the MediaItems to colorize",
    name = "MEDIAITEMARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [1429] = {
  fname = "ChangeColorBrightness",
  label = "US_ChangeColorBrightness",
  run = "in/out",
  desc = "Changes brightness of a colorvalue. If you only set bright_r without setting bright_g and bright_b, then the value for bright_r will affect g and b as well.\
\
If a color-value becomes >255 or <0, it will be set to 255 or 0 respectively.\
\
returns color-value 0,0,0 and retval=false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the new red-value",
    name = "RED",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new green-value",
    name = "GREEN",
   },
   [3] = {
    type = "INTEGER",
    desc = "the new blue-value",
    name = "BLUE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, color-calculation was successful; false, color-calculation was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the red-value to be changed",
    name = "R",
   },
   [2] = {
    type = "INTEGER",
    desc = "the green-value to be changed",
    name = "G",
   },
   [3] = {
    type = "INTEGER",
    desc = "the blue-value to be changed",
    name = "B",
   },
   [4] = {
    type = "INTEGER",
    desc = "the change in brightness for the red-color; positive, brighter; negative, darker",
    name = "BRIGHT_R",
   },
   [5] = {
    type = "INTEGER",
    desc = "the change in brightness for the green-color; positive, brighter; negative, darker; if nil, value in bright_r will be used",
    opt = {
     use = false,
    },
    name = "BRIGHT_G",
   },
   [6] = {
    type = "INTEGER",
    desc = "the change in brightness for the blue-color; positive, brighter; negative, darker; if nil, value in bright_r will be used",
    opt = {
     use = false,
    },
    name = "BRIGHT_B",
   },
  },
  sp_api = "ultraschall",
 },
 [1430] = {
  fname = "ChangeColorContrast",
  label = "US_ChangeColorContrast",
  run = "in/out",
  desc = "Changes contrast of a colorvalue.\
\
Minimum will set the new minimal, Maximum will set the new maximum-brightness-level.\
If you set Minimum to 0 and Maximum to 255, contrast will not change.\
\
The lower you set Minimum/Maximum, the darker it becomes; the higher, the brighter it becomes.\
The farther away Minimum is from Maximum, the stronger the contrast becomes; the closer Minimum is to Maximum, the weaker the contrast becomes.\
\
If you only set Minimum_r and Maximum_r, then these values will be applied to g and b too.\
\
If you omit/set to nil a Maximum-value; it's default value will be 255.\
\
If a color-value becomes >255 or <0, it will be set to 255 or 0 respectively.\
\
returns color-value 0,0,0 and retval=false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the new red-value",
    name = "RED",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new green-value",
    name = "GREEN",
   },
   [3] = {
    type = "INTEGER",
    desc = "the new blue-value",
    name = "BLUE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, color-calculation was successful; false, color-calculation was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the red-value to be changed",
    name = "R",
   },
   [2] = {
    type = "INTEGER",
    desc = "the green-value to be changed",
    name = "G",
   },
   [3] = {
    type = "INTEGER",
    desc = "the blue-value to be changed",
    name = "B",
   },
   [4] = {
    type = "INTEGER",
    desc = "the new minimum brightness of the contrast-range of the red-color",
    name = "MINIMUM_R",
   },
   [5] = {
    type = "INTEGER",
    desc = "the new maximum brightness of the contrast-range of the red-color; if nil, it will be seen as 255",
    opt = {
     use = false,
    },
    name = "MAXIMUM_R",
   },
   [6] = {
    type = "INTEGER",
    desc = "the new minimum brightness of the contrast-range of the green-color; if nil, it will use the value of Minimum_r",
    opt = {
     use = false,
    },
    name = "MINIMUM_G",
   },
   [7] = {
    type = "INTEGER",
    desc = "the new maximum brightness of the contrast-range of the green-color; if nil, it will be seen as 255",
    opt = {
     use = false,
    },
    name = "MAXIMUM_G",
   },
   [8] = {
    type = "INTEGER",
    desc = "the new minimum brightness of the contrast-range of the blue-color; if nil, it will use the value of Minimum_r",
    opt = {
     use = false,
    },
    name = "MINIMUM_B",
   },
   [9] = {
    type = "INTEGER",
    desc = "the new maximum brightness of the contrast-range of the blue-color; if nil, it will be seen as 255",
    opt = {
     use = false,
    },
    name = "MAXIMUM_B",
   },
  },
  sp_api = "ultraschall",
 },
 [1431] = {
  fname = "ChangeColorSaturation",
  label = "US_ChangeColorSaturation",
  run = "in/out",
  desc = "Changes saturation of a colorvalue by delta.\
\
If a color-value becomes >255 or <0, it will be set to 255 or 0 respectively.\
\
returns color-value 0,0,0 and retval=false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the new red-value",
    name = "RED",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new green-value",
    name = "GREEN",
   },
   [3] = {
    type = "INTEGER",
    desc = "the new blue-value",
    name = "BLUE",
   },
   [4] = {
    type = "NUMBER",
    desc = "the median-value, calculated from the the old red, green and blue, values (red+green+blue)/3, which is the basis for the brightness of the unsaturated value",
    name = "MEDIAN",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, color-calculation was successful; false, color-calculation was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the red-value to be changed",
    name = "R",
   },
   [2] = {
    type = "INTEGER",
    desc = "the green-value to be changed",
    name = "G",
   },
   [3] = {
    type = "INTEGER",
    desc = "the blue-value to be changed",
    name = "B",
   },
   [4] = {
    type = "INTEGER",
    desc = "the saturation/desaturation-value; negative, desaturates color; positive, saturates color",
    name = "DELTA",
   },
  },
  sp_api = "ultraschall",
 },
 [1432] = {
  fname = "ConvertColorToMac",
  label = "US_ConvertColorToMac",
  run = "in/out",
  desc = "Converts a colorvalue to the correct-native-colorvalue for Mac, no matter if you're using Mac, Windows or Linux.\
\
returns 0, false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the Mac-native-colorvalue",
    name = "MAC_COLORVALUE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if conversion succeeded; false, if conversion failed",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the red-value of the color",
    name = "RED",
   },
   [2] = {
    type = "INTEGER",
    desc = "the green-value of the color",
    name = "GREEN",
   },
   [3] = {
    type = "INTEGER",
    desc = "the blue-value of the color",
    name = "BLUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1433] = {
  fname = "ConvertColorToWin",
  label = "US_ConvertColorToWin",
  run = "in/out",
  desc = "Converts a colorvalue to the correct-native-colorvalue for Windows/Linux, no matter if you're using Mac, Windows or Linux.\
\
returns 0, false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the Windows/Linux-native-colorvalue",
    name = "WIN_LINUX_COLORVALUE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, if conversion succeeded; false, if conversion failed",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the red-value of the color",
    name = "RED",
   },
   [2] = {
    type = "INTEGER",
    desc = "the green-value of the color",
    name = "GREEN",
   },
   [3] = {
    type = "INTEGER",
    desc = "the blue-value of the color",
    name = "BLUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1434] = {
  fname = "ConvertColorFromMac",
  label = "US_ConvertColorFromMac",
  run = "in/out",
  desc = "Converts a native-colorvalue to the correct rgb-color-values for Mac, no matter if you're using Mac, Windows or Linux.\
\
returns 0, 0, 0, false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the red-value of the color",
    name = "RED",
   },
   [2] = {
    type = "INTEGER",
    desc = "the green-value of the color",
    name = "GREEN",
   },
   [3] = {
    type = "INTEGER",
    desc = "the blue-value of the color",
    name = "BLUE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, if conversion succeeded; false, if conversion failed",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the Mac-native-colorvalue",
    name = "MAC_COLORVALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1435] = {
  fname = "ConvertColorFromWin",
  label = "US_ConvertColorFromWin",
  run = "in/out",
  desc = "Converts a native-colorvalue to the correct rgb-color-values for Windows/Linux, no matter if you're using Mac, Windows or Linux.\
\
returns 0, 0, 0, false in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the red-value of the color",
    name = "RED",
   },
   [2] = {
    type = "INTEGER",
    desc = "the green-value of the color",
    name = "GREEN",
   },
   [3] = {
    type = "INTEGER",
    desc = "the blue-value of the color",
    name = "BLUE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, if conversion succeeded; false, if conversion failed",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the Windows/Linux-native-colorvalue",
    name = "WIN_COLORVALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1436] = {
  fname = "GetProjectFilename",
  label = "US_GetProjectFilename",
  run = "in/out",
  desc = "Returns the filename of a currently opened project(-tab)\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the filename of the project; \"\", project hasn't been saved yet; nil, in case of an error",
    name = "PROJECTFILENAME_WITH_PATH",
   },
  },
  ins = {
   [1] = {
    type = "REAPROJECT",
    desc = "a currently opened project, whose filename you want to know",
    name = "PROJ",
   },
  },
  sp_api = "ultraschall",
 },
 [1437] = {
  fname = "CheckForChangedProjectTabs",
  label = "US_CheckForChangedProjectTabs",
  run = "in/out",
  desc = "Returns if projecttabs have been changed due reordering, new projects or closed projects, since last calling this function.\
Set update=true to update Ultraschall's internal project-monitoring-list or it will only return the changes since starting the API in this script or since the last time you used this function with parameter update set to true!\
\
Returns false, -1 in case of error.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "false, no changes in the projecttabs at all; true, either order, newprojects or closed project-changes",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of reordered projects",
    name = "COUNTREORDEREDPROJ",
   },
   [3] = {
    type = "ARRAY",
    desc = "ReaProjects, who got reordered within the tabs",
    name = "REORDEREDPROJ",
   },
   [4] = {
    type = "INTEGER",
    desc = "the number of new projects",
    name = "COUNTNEWPROJ",
   },
   [5] = {
    type = "ARRAY",
    desc = "the new projects as ReaProjects",
    name = "NEWPROJ",
   },
   [6] = {
    type = "INTEGER",
    desc = "the number of closed projects",
    name = "COUNTCLOSEDPROJ",
   },
   [7] = {
    type = "ARRAY",
    desc = "the closed projects as ReaProjects",
    name = "CLOSEDPROJ",
   },
   [8] = {
    type = "INTEGER",
    desc = "the number of projects, who got renamed by either saving under a new filename or loading of another project",
    name = "COUNTRENAMEDPROJECTS",
   },
   [9] = {
    type = "ARRAY",
    desc = "the renamed projects, by loading a new project or saving the project under another filename",
    name = "RENAMESPROJECTS",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, update Ultraschall's internal projecttab-monitoring-list to the current state of all tabs\
false, don't update the internal projecttab-monitoring-list, so it will keep the \"old\" project-tab-state as checking-reference",
    name = "UPDATE",
   },
  },
  sp_api = "ultraschall",
 },
 [1438] = {
  fname = "IsValidProjectStateChunk",
  label = "US_IsValidProjectStateChunk",
  run = "in/out",
  desc = "Checks, whether ProjectStateChunk is a valid ProjectStateChunk",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it's a valid ProjectStateChunk; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string to check, if it's a valid ProjectStateChunk",
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1439] = {
  fname = "GetProjectStateChunk",
  label = "US_GetProjectStateChunk",
  run = "in/out",
  desc = "Gets the ProjectStateChunk of the current active project or a projectfile.\
\
Important: when calling it too often in a row, this might fail and result in a timeout-error. \
I tried to circumvent this, but best practice is to wait 2-3 seconds inbetween calling this function.\
\
Note: This function eats up a lot of resources, so be sparse with it in general!\
\
Works reliably from Reaper 6.20 onwards.\
\
returns nil if getting the ProjectStateChunk took too long",
  out = {
   [1] = {
    type = "STRING",
    desc = "the ProjectStateChunk of the current project; nil, if getting the ProjectStateChunk took too long",
    name = "PROJECTSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of an rpp-projectfile, that you want to load as ProjectStateChunk; nil, to get the ProjectStateChunk from the currently active project",
    opt = {
     use = false,
    },
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, keeps the QUEUED_RENDER_OUTFILE and QUEUED_RENDER_ORIGINAL_FILENAME entries in the ProjectStateChunk, if existing; false or nil, remove them",
    opt = {
     use = false,
    },
    name = "KEEPQRENDER",
   },
  },
  sp_api = "ultraschall",
 },
 [1440] = {
  fname = "EnumProjects",
  label = "US_EnumProjects",
  run = "in/out",
  desc = "returns, ReaProject-object and projectname of a requested, opened project.\
\
Returns nil in case of an error.",
  out = {
   [1] = {
    type = "REAPROJECT",
    desc = "a ReaProject-object of the project you requested; nil, if not existing",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "the path+filename.rpp of the project. returns \"\" if no filename exists",
    name = "PROJFN",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the project to request; 1(first project-tab) to n(last project-tab), 0 for current project; -1 for currently-rendering project",
    name = "IDX",
   },
  },
  sp_api = "ultraschall",
 },
 [1441] = {
  fname = "GetProjectLength",
  label = "US_GetProjectLength",
  run = "in/out",
  desc = "Returns the position of the last itemedge, regionend, marker, time-signature-marker in the project.\
\
It will return -1, if no such elements are found, means: last\\_markerpos=-1 if no marker has been found\
Exception when no items are found, it will return nil for last\\_itemedge\
\
You can optimise the speed of the function, by setting the appropriate parameters to false.\
So if you don't need the last itemedge, setting return\\_last\\_itemedge=false speeds up execution massively.\
\
If you want to have the full projectlength during recording, means, including items currently recorded, set include_rec=true\
\
To do the same for projectfiles, use: [GetProject\\_Length](#GetProject_Length)",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the overall length of the project, including markers, regions, itemedges and time-signature-markers",
    name = "LENGTH_OF_PROJECT",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position of the last itemedge in the project; nil, if not found",
    name = "LAST_ITEMEDGE",
   },
   [3] = {
    type = "NUMBER",
    desc = "the position of the last regionend in the project; -1, if not found",
    name = "LAST_REGIONEDGEPOS",
   },
   [4] = {
    type = "NUMBER",
    desc = "the position of the last marker in the project; -1, if not found ",
    name = "LAST_MARKERPOS",
   },
   [5] = {
    type = "NUMBER",
    desc = "the position of the last timesignature-marker in the project; -1, if not found",
    name = "LAST_TIMESIGMARKER",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true or nil, return the last itemedge; false, don't return it",
    opt = {
     use = false,
    },
    name = "RETURN_LAST_ITEMEDGE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true or nil, return the last marker/regionend-position; false, don't return it ",
    opt = {
     use = false,
    },
    name = "RETURN_LAST_MARKERPOS",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true or nil, return the last timesignature-marker-position; false, don't return it",
    opt = {
     use = false,
    },
    name = "RETURN_LAT_TIMESIGMARKERPOS",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, takes into account the projectlength during recording; nil or false, only the projectlength exluding currently recorded MediaItems",
    opt = {
     use = false,
    },
    name = "INCLUDE_REC",
   },
  },
  sp_api = "ultraschall",
 },
 [1442] = {
  fname = "GetRecentProjects",
  label = "US_GetRecentProjects",
  run = "in/out",
  desc = "returns all available recent projects, as listed in the File -> Recent projects-menu",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of available recent projects",
    name = "COUNT_OF_RECENTPROJECTS",
   },
   [2] = {
    type = "ARRAY",
    desc = "the filenames of the recent projects",
    name = "RECENTPROJECTSFILENAMESWITHPATH",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1443] = {
  fname = "IsValidProjectBayStateChunk",
  label = "US_IsValidProjectBayStateChunk",
  run = "in/out",
  desc = "checks, if ProjectBayStateChunk is a valid ProjectBayStateChunk\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, valid ProjectBayStateChunk; false, not a valid ProjectBayStateChunk",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string, that you want to check for being a valid ProjectBayStateChunk",
    name = "PROJECTBAYSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1444] = {
  fname = "GetAllMediaItems_FromProjectBayStateChunk",
  label = "US_GetAllMediaItems_FromProjectBayStateChunk",
  run = "in/out",
  desc = "returns all items from a ProjectBayStateChunk as MediaItemStateChunkArray\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of items found in the ProjectBayStateChunk",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "all items as ItemStateChunks in a handy array",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string, that you want to check for being a valid ProjectBayStateChunk",
    name = "PROJECTBAYSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1445] = {
  fname = "IsTimeSelectionActive",
  label = "US_IsTimeSelectionActive",
  run = "in/out",
  desc = "Returns, if there's a time-selection and its start and endposition in a project.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, there is a time-selection; false, there isn't a time-selection",
    name = "RETVAL",
   },
   [2] = {
    type = "NUMBER",
    desc = "start of the time-selection",
    opt = {
     use = false,
    },
    name = "START_OF_TIMESELECTION",
   },
   [3] = {
    type = "NUMBER",
    desc = "end of the time-selection",
    opt = {
     use = false,
    },
    name = "END_OF_TIMESELECTION",
   },
  },
  ins = {
   [1] = {
    type = "REAPROJECT",
    desc = "the project, whose time-selection-state you want to know; 0 or nil, the current project",
    opt = {
     use = false,
    },
    name = "PROJECT",
   },
  },
  sp_api = "ultraschall",
 },
 [1446] = {
  fname = "GetProject_Author",
  label = "US_GetProject_Author",
  run = "in/out",
  desc = "Returns the author from an RPP-Projectfile or a ProjectStateChunk.\
\
It's the entry \"  AUTHOR\"\
\
Returns nil in case of error or if no such entry exists.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the author of the project; \"\", if there's no author given",
    name = "AUTHOR",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "filename with path for the rpp-projectfile; nil, if you want to use parameter ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a ProjectStateChunk to use instead if a filename; only used, when projectfilename_with_path is nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1447] = {
  fname = "AutoSave_SetMinutes",
  label = "US_AutoSave_SetMinutes",
  run = "in/out",
  desc = "Sets the number of minutes, at which a new autosaved-project shall be saved.\
\
0 to turn it off\
\
Returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting worked; false, setting didn't work",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "0, turn off autosave; 1 to 2147483647, the number of minutes at which a new autosaved-project shall be saved",
    name = "MINUTES",
   },
  },
  sp_api = "ultraschall",
 },
 [1448] = {
  fname = "AutoSave_GetMinutes",
  label = "US_AutoSave_GetMinutes",
  run = "in/out",
  desc = "Gets the currently set amount of minutes, at which a new autosave-project shall be saved",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "0, autosave is turned off; 1 to 2147483647, the number of minutes at which a new autosaved-project shall be saved",
    name = "MINUTES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1449] = {
  fname = "AutoSave_SetOptions",
  label = "US_AutoSave_SetOptions",
  run = "in/out",
  desc = "Gets the current states of the Save to timestamped file in project directory and Save undo history (RPP-UNDO)(if enabled in general prefs)-settings.    ",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "Save to timestamped file in project directory; true, set to on; false, set to off; nil, keep current setting",
    opt = {
     use = false,
    },
    name = "TIMESTAMP_IN_PROJECT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "Save undo history (RPP-UNDO)(if enabled in general prefs); true, set to on; false, set to off; nil, keep current setting",
    opt = {
     use = false,
    },
    name = "SAVE_UNDO_HISTORY",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1450] = {
  fname = "AutoSave_GetOptions",
  label = "US_AutoSave_GetOptions",
  run = "in/out",
  desc = "Gets the current states of the Save to timestamped file in project directory and Save undo history (RPP-UNDO)(if enabled in general prefs)-settings.    ",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "Save to timestamped file in project directory; true, set to on; false, set to off",
    name = "TIMESTAMP_IN_PROJECT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "Save undo history (RPP-UNDO)(if enabled in general prefs); true, set to on; false, set to off",
    name = "SAVE_UNDO_HISTORY",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1451] = {
  fname = "Main_SaveProject",
  label = "US_Main_SaveProject",
  run = "in/out",
  desc = "Saves a project/project template as rpp-project file. Basically like Reaper's own Main_SaveProjectEx but \
gives hint if a file was saved and has more options.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, projectfile was saved; false, projectfile was not saved",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "REAPROJECT",
    desc = "the project, that you want to save as rpp-file",
    name = "PROJ",
   },
   [2] = {
    type = "STRING",
    desc = "the filename with path of the project",
    name = "FILENAME_WITH_PATH",
   },
   [3] = {
    type = "INTEGER",
    desc = "options to save with:\
&1, save selected tracks as track template\
&2, include media with track templates \
&4, include envelopes with track template",
    name = "OPTIONS",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, overwrite an already existing file; false, don't overwrite an already existing file",
    name = "OVERWRITE",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, make already existing project into a -bak-file; false, don't make backup file",
    name = "CREATE_BACKUP",
   },
  },
  sp_api = "ultraschall",
 },
 [1452] = {
  fname = "ToggleMute",
  label = "US_ToggleMute",
  run = "in/out",
  desc = "Sets mute within the mute-envelope-lane, by inserting the fitting envelope-points. Can be used to program coughbuttons. \
\
Note: If the user sets the track muted using the mute-button of the track, changes to the mute-envelope will be made but possibly ignored by Reaper by Reaper's design. So maybe taking care of this is neccessary in scripts.\
\
Returns -1, in case of an error\
\
Works like <a href=\"#ToggleMute_TrackObject\">ultraschall.ToggleMute_TrackObject</a> but uses a tracknumber instead of a trackobject as parameter.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "toggling was 0, success; -1, fail",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track-number, for where you want to set the mute-envelope-lane; 1, for the first track; 2, for the second",
    name = "TRACK",
   },
   [2] = {
    type = "NUMBER",
    desc = "position in seconds",
    name = "POSITION",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, for mute the track on this position; 1, for unmuting the track on this position",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [1453] = {
  fname = "ToggleMute_TrackObject",
  label = "US_ToggleMute_TrackObject",
  run = "in/out",
  desc = "Sets mute within the mute-envelope-lane, by inserting the fitting envelope-points. Can be used to program coughbuttons. \
\
Note: If the user sets the track muted using the mute-button of the track, changes to the mute-envelope will be made but possibly ignored by Reaper by Reaper's design. So maybe taking care of this is neccessary in scripts.\
\
Returns -1, if it fails.\
\
Works like <a href=\"#ToggleMute\">ultraschall.ToggleMute</a> but uses a trackobject instead of the tracknumber as parameter.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "toggling was 0, success; -1, fail",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track-object for the track, where you want to set the mute-envelope-lane. Refer <a href=\"Reaper_API_Lua.html#reaper.GetTrack\">GetTrack()</a> for more details.",
    name = "TRACKOBJECT",
   },
   [2] = {
    type = "NUMBER",
    desc = "position in seconds",
    name = "POSITION",
   },
   [3] = {
    type = "INTEGER",
    desc = "0, for mute the track on this position, 1, for unmuting the track on this position",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [1454] = {
  fname = "GetNextMuteState",
  label = "US_GetNextMuteState",
  run = "in/out",
  desc = "Returns the next mute-envelope-point-ID, it's value(0 or 1) and it's time. Envelope-Points numbering starts with 0! \
\
Returns -1 if not existing.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of the muteenvelope-point",
    name = "ENVIDX",
   },
   [2] = {
    type = "NUMBER",
    desc = "value of the muteenvelope-point (0 or 1)",
    name = "ENVVAL",
   },
   [3] = {
    type = "NUMBER",
    desc = "position of the muteenvelope-point in seconds",
    name = "ENVPOSITION",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track-number, for where you want to set the mute-envelope-lane, beginning with 1.",
    name = "TRACK",
   },
   [2] = {
    type = "NUMBER",
    desc = "position in seconds, from where to look for the next mute-envelope-point",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1455] = {
  fname = "GetPreviousMuteState",
  label = "US_GetPreviousMuteState",
  run = "in/out",
  desc = "Returns the previous mute-envelope-point-ID, it's value(0 or 1) and it's time. Envelope-Points numbering starts with 0! \
\
Returns -1 if not existing.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of the muteenvelope-point",
    name = "ENVIDX",
   },
   [2] = {
    type = "NUMBER",
    desc = "value of the muteenvelope-point (0 or 1)",
    name = "ENVVAL",
   },
   [3] = {
    type = "NUMBER",
    desc = "position of the muteenvelope-point in seconds",
    name = "ENVPOSITION",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track-number, for where you want to set the mute-envelope-lane, beginning with 1.",
    name = "TRACK",
   },
   [2] = {
    type = "NUMBER",
    desc = "position in seconds, from where to look for the previous mute-envelope-point",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1456] = {
  fname = "GetNextMuteState_TrackObject",
  label = "US_GetNextMuteState_TrackObject",
  run = "in/out",
  desc = "Returns the next mute-envelope-point-ID, it's value(0 or 1) and it's time. Envelope-Points numbering starts with 0! \
\
Returns -1 if not existing.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of the muteenvelope-point",
    name = "ENVIDX",
   },
   [2] = {
    type = "NUMBER",
    desc = "value of the muteenvelope-point (0 or 1)",
    name = "ENVVAL",
   },
   [3] = {
    type = "NUMBER",
    desc = "position of the muteenvelope-point in seconds",
    name = "ENVPOSITION",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack-object, for the track, where you want to set the mute-envelope-lane.",
    name = "TRACK",
   },
   [2] = {
    type = "NUMBER",
    desc = "position in seconds, from where to look for the next mute-envelope-point",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1457] = {
  fname = "GetPreviousMuteState_TrackObject",
  label = "US_GetPreviousMuteState_TrackObject",
  run = "in/out",
  desc = "Returns the previous mute-envelope-point-ID, it's value(0 or 1) and it's time. Envelope-Points numbering starts with 0! \
\
Returns -1 if not existing.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of the muteenvelope-point",
    name = "ENVIDX",
   },
   [2] = {
    type = "NUMBER",
    desc = "value of the muteenvelope-point (0 or 1)",
    name = "ENVVAL",
   },
   [3] = {
    type = "NUMBER",
    desc = "position of the muteenvelope-point in seconds",
    name = "ENVPOSITION",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack-object, for the track, where you want to set the mute-envelope-lane.",
    name = "TRACK",
   },
   [2] = {
    type = "NUMBER",
    desc = "position in seconds, from where to look for the previous mute-envelope-point",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1458] = {
  fname = "CountMuteEnvelopePoints",
  label = "US_CountMuteEnvelopePoints",
  run = "in/out",
  desc = "Returns the number of the envelope-points in the Mute-lane of track \"track\". \
\
Returns -1, if it fails.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "number of mute-envelope-points",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track-number, for which you want to count the mute-envelope-points, beginning with 1.",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1459] = {
  fname = "DeleteMuteState",
  label = "US_DeleteMuteState",
  run = "in/out",
  desc = "Deletes a mute-point in track tracknumber at position.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, deleting was successful; false, deleting wasn't successful.",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track in which to delete the mute-point; is 1-based, means 1 for track 1",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position of the mute-point to delete",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1460] = {
  fname = "DeleteMuteState_TrackObject",
  label = "US_DeleteMuteState_TrackObject",
  run = "in/out",
  desc = "Deletes a mute-point in a MediaTrack-object at position.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, deleting was successful; false, deleting wasn't successful.",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track in which to delete the mute-point",
    name = "MEDIATRACK",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position of the mute-point to delete",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1461] = {
  fname = "IsMuteAtPosition",
  label = "US_IsMuteAtPosition",
  run = "in/out",
  desc = "Returns true, if a mute-point exists in track tracknumber at position position.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if there is a mute-point; false, if there isn't one",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "if a mute-point is at position, this holds the index of the envelope-point",
    opt = {
     use = false,
    },
    name = "ENVIDX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the current set value of the mute-point",
    opt = {
     use = false,
    },
    name = "ENVVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track in which to check for a mute-point; is 1-based, means 1 for track 1",
    name = "TRACKNUMBER",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position to check for a mute-point",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1462] = {
  fname = "IsMuteAtPosition_TrackObject",
  label = "US_IsMuteAtPosition_TrackObject",
  run = "in/out",
  desc = "Returns true, if a mute-point exists in MediaTrack-object at position position.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if there is a mute-point; false, if there isn't one",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "if a mute-point is at position, this holds the index of the envelope-point",
    opt = {
     use = false,
    },
    name = "ENVIDX",
   },
   [3] = {
    type = "NUMBER",
    desc = "the current set value of the mute-point",
    opt = {
     use = false,
    },
    name = "ENVVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track in which to check for a mute-point",
    name = "MEDIATRACK",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position to check for a mute-point",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1463] = {
  fname = "ActivateMute",
  label = "US_ActivateMute",
  run = "in/out",
  desc = "activates a mute-envelope of a track\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activating was successful; false, activating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track, whose mute-envelope you want to activate; 1, for the first track",
    name = "TRACK",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, show the activated mute-envelope; false, don't show the activated mute-envelope",
    opt = {
     use = false,
    },
    name = "VISIBLE",
   },
  },
  sp_api = "ultraschall",
 },
 [1464] = {
  fname = "DeactivateMute",
  label = "US_DeactivateMute",
  run = "in/out",
  desc = "deactivates a mute-envelope of a track\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, deactivating was successful; false, deactivating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track, whose mute-envelope you want to deactivate; 1, for the first track",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1465] = {
  fname = "ActivateMute_TrackObject",
  label = "US_ActivateMute_TrackObject",
  run = "in/out",
  desc = "activates a mute-envelope of a MediaTrack-object\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, activating was successful; false, activating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose mute-envelope you want to activate",
    name = "TRACK",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, show the activated mute-envelope; false, don't show the activated mute-envelope",
    opt = {
     use = false,
    },
    name = "VISIBLE",
   },
  },
  sp_api = "ultraschall",
 },
 [1466] = {
  fname = "DeactivateMute_TrackObject",
  label = "US_DeactivateMute_TrackObject",
  run = "in/out",
  desc = "deactivates a mute-envelope of a MediaTrack-object\
  \
returns false in case of error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, deactivating was successful; false, deactivating was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the track, whose mute-envelope you want to deactivate",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1467] = {
  fname = "GetProject_AutomationItemStateChunk",
  label = "US_GetProject_AutomationItemStateChunk",
  run = "in/out",
  desc = "returns the idx'th automation-item from a ProjectStateChunk.\
\
It's the entry <POOLEDENV\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the statechunk of the idx'th automation-item",
    name = "AUTOMATIONITEMSTATECHUNK",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the automation-item-statechunk; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the requested automation-item from the ProjectStateChunk with 1 for the first AutomItem.",
    name = "IDX",
   },
   [3] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1468] = {
  fname = "GetProject_CountAutomationItems",
  label = "US_GetProject_CountAutomationItems",
  run = "in/out",
  desc = "returns the number of automation-items available in a ProjectStateChunk.\
\
It's the entry <POOLEDENV\
                        \
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of automation-items",
    name = "AUTOMATION_ITEMS_COUNT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the projectfile+path, from which to get the automation-item-count; nil to use ProjectStateChunk",
    name = "PROJECTFILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "a statechunk of a project, usually the contents of a rpp-project-file; only used, when projectfilename_with_path=nil",
    opt = {
     use = false,
    },
    name = "PROJECTSTATECHUNK",
   },
  },
  sp_api = "ultraschall",
 },
 [1469] = {
  fname = "AutomationItems_GetAll",
  label = "US_AutomationItems_GetAll",
  run = "in/out",
  desc = "Returns all automation items from the current project as a handy table\
\
The format of the table is as follows:\
    AutomationItems[automationitem_idx][\"Track\"] - the track, in which the automation item is located\
    AutomationItems[automationitem_idx][\"EnvelopeObject\"] - the envelope, in which the automationitem is located\
    AutomationItems[automationitem_idx][\"EnvelopeName\"] - the name of the envelope\
    AutomationItems[automationitem_idx][\"AutomationItem_Index\"] - the index of the automation with EnvelopeObject\
    AutomationItems[automationitem_idx][\"AutomationItem_PoolID\"] - the pool-Id of the automation item\
    AutomationItems[automationitem_idx][\"AutomationItem_Position\"] - the position of the automation item in seconds\
    AutomationItems[automationitem_idx][\"AutomationItem_Length\"] - the length of the automation item in seconds\
    AutomationItems[automationitem_idx][\"AutomationItem_Startoffset\"] - the startoffset of the automation item in seconds\
    AutomationItems[automationitem_idx][\"AutomationItem_Playrate\"]- the playrate of the automation item\
    AutomationItems[automationitem_idx][\"AutomationItem_Baseline\"]- the baseline of the automation item, between 0 and 1\
    AutomationItems[automationitem_idx][\"AutomationItem_Amplitude\"]- the amplitude of the automation item, between -1 and +1\
    AutomationItems[automationitem_idx][\"AutomationItem_LoopSource\"]- the loopsource-state of the automation item; 0, unlooped; 1, looped\
    AutomationItems[automationitem_idx][\"AutomationItem_UISelect\"]- the selection-state of the automation item; 0, unselected; nonzero, selected\
    AutomationItems[automationitem_idx][\"AutomationItem_Pool_QuarteNoteLength\"]- the quarternote-length",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of automation-items found in the current project",
    name = "NUMBER_OF_AUTOMATIONITEMS",
   },
   [2] = {
    type = "TABLE",
    desc = "all found automation-items as a handy table(see description for details)",
    name = "AUTOMATIONITEMS_TABLE",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1470] = {
  fname = "AutomationItem_Delete",
  label = "US_AutomationItem_Delete",
  run = "in/out",
  desc = "Deletes an Automation-Item, optionally preserves the points who are added to the underlying envelope.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, deleting was successful; false, deleting was not successful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, in which the automation-item to be deleted is located",
    name = "ENV",
   },
   [2] = {
    type = "INTEGER",
    desc = "the automationitem that shall be deleted; 0, for the first one",
    name = "AUTOMATIONITEM_IDX",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, keep the envelopepoints and add them to the underlying envelope; nil or false, just delete the AutomationItem",
    opt = {
     use = false,
    },
    name = "PRESERVEPOINTS",
   },
  },
  sp_api = "ultraschall",
 },
 [1471] = {
  fname = "AutomationItems_GetByTime",
  label = "US_AutomationItems_GetByTime",
  run = "in/out",
  desc = "returns all automation-items at a given position in an Envelope\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of automation-items found; -1, in case of an error",
    name = "FOUND_AUTOMATION_ITEMS",
   },
   [2] = {
    type = "TABLE",
    desc = "the indices of the found automation-items",
    name = "AUTOMATION_ITEM_INDICES",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, whose automation-items you want to get",
    name = "ENV",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position in seconds from wich you want to get the automation items",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1472] = {
  fname = "AutomationItem_Split",
  label = "US_AutomationItem_Split",
  run = "in/out",
  desc = "splits an automation-item at position in Env\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, splitting was successful; false, splitting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, whose automation-item you want to split",
    name = "ENV",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position in seconds at wich you want to split the automation item",
    name = "POSITION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index of the automation-item, that you want to split",
    name = "INDEX",
   },
   [4] = {
    type = "INTEGER",
    desc = "0, set the newly created automation item unselected\
1, set it selected\
2, use selection-state of the original automation-item",
    name = "SELECTED",
   },
  },
  sp_api = "ultraschall",
 },
 [1473] = {
  fname = "AutomationItem_DeselectAllInTrack",
  label = "US_AutomationItem_DeselectAllInTrack",
  run = "in/out",
  desc = "Deselects alls automation-items in a TrackEnvelope. Returns the previous selection-states of all automation-items in TrackEnvelope.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of automation-items that were deselected",
    name = "NUMBER_OF_AUTOMATIONITEMS",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all previous selection-states",
    name = "OLD_AUTOMATIONITEM_SELECTION",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, in which the automation-items shall be deselected",
    name = "ENV",
   },
  },
  sp_api = "ultraschall",
 },
 [1474] = {
  fname = "AutomationItem_GetSelectStates",
  label = "US_AutomationItem_GetSelectStates",
  run = "in/out",
  desc = "Returns the current selection-states of all automation-items in TrackEnvelope.\
\
You can use the returned table with ultraschall.AutomationItem_SelectMultiple() as well, to change selection-states.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of automation-items in TrackEnvelope",
    name = "NUMBER_OF_AUTOMATIONITEMS",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all current selection-states of automation-items in TrackEnvelope",
    name = "AUTOMATIONITEM_SELECTION",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, of whose automation-items you want to get the selection state",
    name = "ENV",
   },
  },
  sp_api = "ultraschall",
 },
 [1475] = {
  fname = "AutomationItem_SelectMultiple",
  label = "US_AutomationItem_SelectMultiple",
  run = "in/out",
  desc = "Sets the automation-item-selection state of AutomationItems in a TrackEnvelope.\
\
You provide a table with each index being either 0(deselected) or 1(selected) for the AutomationItem in question.\
You can omit entries by setting them to nil to retain current selection state.\
Format is: \
    automationitem_selected_table[automation-item-index]=selection_state\
\
Example for automationitem_selected_table, that sets selection-state for automation-item 1,3 and 4\
    automationitem_selected_table[1]=0\
    automationitem_selected_table[3]=1\
    automationitem_selected_table[4]=0\
\
Keep in mind, that the index is 1-based, with index 1 for automation-item 1.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, of whose automation-items you want to get the selection state",
    name = "ENV",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all the selection-states to set",
    name = "AUTOMATIONITEM_SELECTION",
   },
  },
  sp_api = "ultraschall",
 },
 [1476] = {
  fname = "AutomationItem_GetAllSelectStates",
  label = "US_AutomationItem_GetAllSelectStates",
  run = "in/out",
  desc = "Returns the current selection-states of all automation-items in all TrackEnvelope.\
\
The returned table is of the format:\
    automationitem_selection[envelope_index][1]=envelope\
    automationitem_selection[envelope_index][2]=automationitem_selection(like the one returned by AutomationItem_GetSelectStates)\
\
You can omit a TrackEnvelope to not get its automation-item-selections.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "a table with all selection-states of all automation-items in all TrackEnvelopes",
    name = "AUTOMATIONITEM_SELECTION",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, whose automation-items you DON'T want to get; nil, to get all",
    opt = {
     use = false,
    },
    name = "OMIT_ENVELOPE",
   },
  },
  sp_api = "ultraschall",
 },
 [1477] = {
  fname = "AutomationItem_DeselectAllSelectStates",
  label = "US_AutomationItem_DeselectAllSelectStates",
  run = "in/out",
  desc = "Deselects all automation-items in all TrackEnvelopes.\
\
You can omit a TrackEnvelope, whose automation-items will not be deselected\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, deselecting was successful; false, deselection was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, whose automation-items you DON'T want to deselect; nil, to deselect all",
    opt = {
     use = false,
    },
    name = "OMIT_ENVELOPE",
   },
  },
  sp_api = "ultraschall",
 },
 [1478] = {
  fname = "ResizePNG",
  label = "US_ResizePNG",
  run = "in/out",
  desc = "resizes a png-file. It will stretch/shrink the picture by that. That means you can't crop or enhance pngs with this function.\
\
If you set aspectratio=true, then the image will be resized with correct aspect-ratio. However, it will use the value from parameter width as maximum size for each side of the picture.\
So if the height of the png is bigger than the width, the height will get the size and width will be shrinked accordingly.\
\
When making pngs bigger, pixelation will occur. No pixel-filtering within this function!\
\
returns false in case of an error ",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, resizing was successful; false, resizing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the png-file, that you want to resize",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the output-file, where to store the resized png",
    name = "OUTPUTFILENAME_WITH_PATH",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, keep aspect-ratio(use size of param width as base); false, don't keep aspect-ratio",
    name = "ASPECTRATIO",
   },
   [4] = {
    type = "INTEGER",
    desc = "the width of the newly created png in pixels",
    name = "WIDTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the height of the newly created png in pixels",
    name = "HEIGHT",
   },
  },
  sp_api = "ultraschall",
 },
 [1479] = {
  fname = "CaptureScreenAreaAsPNG",
  label = "US_CaptureScreenAreaAsPNG",
  run = "in/out",
  desc = "captures an area of the screen and writes it as png-file.\
\
Note for Mac-users: it doesn't seem to work under certain circumstances, which are still under investigation.\
\
returns false in case of an error ",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, capturing was successful; false, capturing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename with path of the png-file to write",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "INTEGER",
    desc = "the x-position of the area to capture",
    name = "X",
   },
   [3] = {
    type = "INTEGER",
    desc = "the y-position of the area to capture",
    name = "Y",
   },
   [4] = {
    type = "INTEGER",
    desc = "the width of the area to capture",
    name = "W",
   },
   [5] = {
    type = "INTEGER",
    desc = "the height of the area to capture",
    name = "H",
   },
  },
  sp_api = "ultraschall",
 },
 [1480] = {
  fname = "CaptureWindowAsPNG",
  label = "US_CaptureWindowAsPNG",
  run = "in/out",
  desc = "captures a window and stores it as png-file.\
\
Note for Windows-users with no Windows 10:\
Keep in mind, that even if you choose a dedicated window, if it's located behind other windows, these might be captured as well.\
\
Note for Mac-users: it doesn't seem to work under certain circumstances, which are still under investigation.\
\
returns false in case of an error ",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, capturing was successful; false, capturing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "IDENTIFIER",
    desc = "either a hwnd or the exact windowtitle of the window, which you want to capture",
    name = "WINDOW_OR_WINDOWTITLE",
   },
   [2] = {
    type = "STRING",
    desc = "the filename with path of the output-file",
    name = "FILENAME_WITH_PATH",
   },
   [3] = {
    type = "INTEGER",
    desc = "the x-position within the window to capture; nil, to use the left side of the window",
    name = "X",
   },
   [4] = {
    type = "INTEGER",
    desc = "the y-position within the window to capture; nil, to use the top side of the window",
    name = "Y",
   },
   [5] = {
    type = "INTEGER",
    desc = "the width of the capture-area; nil, to use the width of the window",
    name = "W",
   },
   [6] = {
    type = "INTEGER",
    desc = "the height of the capture-area; nil, to use the height of the window",
    name = "H",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, use the workaround for invisible window-borders on windows 10; false, just capture the window",
    name = "WIN10",
   },
  },
  sp_api = "ultraschall",
 },
 [1481] = {
  fname = "ResizeJPG",
  label = "US_ResizeJPG",
  run = "in/out",
  desc = "resizes a jpg-file. It will stretch/shrink the picture by that. That means you can't crop or enhance jpgs with this function.\
\
If you set aspectratio=true, then the image will be resized with correct aspect-ratio. However, it will use the value from parameter width as maximum size for each side of the picture.\
So if the height of the jpgis bigger than the width, the height will get the size and width will be shrinked accordingly.\
\
When making jpg bigger, pixelation will occur. No pixel-filtering within this function!\
\
returns false in case of an error ",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, resizing was successful; false, resizing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the jpg-file, that you want to resize",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the output-file, where to store the resized jpg",
    name = "OUTPUTFILENAME_WITH_PATH",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, keep aspect-ratio(use size of param width as base); false, don't keep aspect-ratio",
    name = "ASPECTRATIO",
   },
   [4] = {
    type = "INTEGER",
    desc = "the width of the newly created jpg in pixels",
    name = "WIDTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the height of the newly created jpg in pixels",
    name = "HEIGHT",
   },
   [6] = {
    type = "INTEGER",
    desc = "the quality of the jpg in percent; 1 to 100",
    name = "QUALITY",
   },
  },
  sp_api = "ultraschall",
 },
 [1482] = {
  fname = "ConvertPNG2JPG",
  label = "US_ConvertPNG2JPG",
  run = "in/out",
  desc = "Converts a png to a jpg-imagefile.\
\
returns false in case of an error ",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, converting was successful; false, converting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the png-file, that you want to convert into jpg",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the output-file, where to store the jpg",
    name = "OUTPUTFILENAME_WITH_PATH",
   },
   [3] = {
    type = "INTEGER",
    desc = "the quality of the jpg in percent; 1 to 100",
    name = "QUALITY",
   },
  },
  sp_api = "ultraschall",
 },
 [1483] = {
  fname = "ConvertJPG2PNG",
  label = "US_ConvertJPG2PNG",
  run = "in/out",
  desc = "Converts a jpg to a png-imagefile.\
\
returns false in case of an error ",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, converting was successful; false, converting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the jpg-file, that you want to store as png",
    name = "FILENAME_WITH_PATH",
   },
   [2] = {
    type = "STRING",
    desc = "the output-file, where to store the png-file",
    name = "OUTPUTFILENAME_WITH_PATH",
   },
  },
  sp_api = "ultraschall",
 },
 [1484] = {
  fname = "ZoomVertical_MidiEditor",
  label = "US_ZoomVertical_MidiEditor",
  run = "in/out",
  desc = "Zooms within the Midi-Editor vertically.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if zooming was successful; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the zoom-factor; positive values, zoom in; negative values, zoom out",
    name = "ZOOMAMT",
   },
   [2] = {
    type = "HWND",
    desc = "the HWND of the MIDI-Editor, in which you want to zoom; nil, uses active MIDI-Editor",
    opt = {
     use = false,
    },
    name = "MIDIEDITOR_HWND",
   },
  },
  sp_api = "ultraschall",
 },
 [1485] = {
  fname = "ZoomHorizontal_MidiEditor",
  label = "US_ZoomHorizontal_MidiEditor",
  run = "in/out",
  desc = "Zooms within the Midi-Editor horizontally.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if zooming was successful; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the zoom-factor; positive values, zoom in; negative values, zoom out",
    name = "ZOOMAMT",
   },
   [2] = {
    type = "HWND",
    desc = "the HWND of the MIDI-Editor, in which you want to zoom; nil, uses active MIDI-Editor",
    opt = {
     use = false,
    },
    name = "MIDIEDITOR_HWND",
   },
  },
  sp_api = "ultraschall",
 },
 [1486] = {
  fname = "OpenItemInMidiEditor",
  label = "US_OpenItemInMidiEditor",
  run = "in/out",
  desc = "opens a given MediaItem in the MIDI-Editor\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if opening was successful; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEM",
    desc = "the MediaItem to be opened in the MIDI-Editor",
    name = "MEDIAITEM",
   },
  },
  sp_api = "ultraschall",
 },
 [1487] = {
  fname = "MIDI_SendMidiNote",
  label = "US_MIDI_SendMidiNote",
  run = "in/out",
  desc = "Sends a MIDI-note to a specific channel with a specific velocity.",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the channel, to which the Midi-note shall be sent; 1-16",
    name = "CHANNEL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the note to be played; 0-127",
    name = "NOTE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the velocity of the note; 0-255",
    name = "VELOCITY",
   },
   [4] = {
    type = "INTEGER",
    desc = "0 for VKB\
1 for control (actions map etc)\
2 for VKB-on-current-channel\
16 for external MIDI device 0, 17 for external MIDI device 1, etc",
    opt = {
     use = false,
    },
    name = "MODE",
   },
  },
  sp_api = "ultraschall",
 },
 [1488] = {
  fname = "MIDI_SendMidiCC",
  label = "US_MIDI_SendMidiCC",
  run = "in/out",
  desc = "Sends a MIDI-CC-message to a specific channel with a specific velocity.",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the channel, to which the Midi-note shall be sent; 1-16",
    name = "CHANNEL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the note to be played; 0-127",
    name = "NOTE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the velocity of the note; 0-255",
    name = "VELOCITY",
   },
   [4] = {
    type = "INTEGER",
    desc = "0 for VKB\
1 for control (actions map etc)\
2 for VKB-on-current-channel\
16 for external MIDI device 0, 17 for external MIDI device 1, etc",
    opt = {
     use = false,
    },
    name = "MODE",
   },
  },
  sp_api = "ultraschall",
 },
 [1489] = {
  fname = "MIDI_SendMidiPC",
  label = "US_MIDI_SendMidiPC",
  run = "in/out",
  desc = "Sends a MIDI-PC-message to a specific channel with a specific velocity.",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the channel, to which the Midi-note shall be sent; 1-16",
    name = "CHANNEL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the note to be played; 0-127",
    name = "NOTE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the velocity of the note; 0-255",
    name = "VELOCITY",
   },
   [4] = {
    type = "INTEGER",
    desc = "0 for VKB\
1 for control (actions map etc)\
2 for VKB-on-current-channel\
16 for external MIDI device 0, 17 for external MIDI device 1, etc",
    opt = {
     use = false,
    },
    name = "MODE",
   },
  },
  sp_api = "ultraschall",
 },
 [1490] = {
  fname = "MIDI_SendMidiPitch",
  label = "US_MIDI_SendMidiPitch",
  run = "in/out",
  desc = "Sends a MIDI-Pitch-message to a specific channel with a specific velocity.",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the channel, to which the Midi-pitch shall be sent; 1-16",
    name = "CHANNEL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the pitchbend of the note; 0-127",
    name = "PITCH",
   },
   [3] = {
    type = "INTEGER",
    desc = "0 for VKB\
1 for control (actions map etc)\
2 for VKB-on-current-channel\
16 for external MIDI device 0, 17 for external MIDI device 1, etc",
    opt = {
     use = false,
    },
    name = "MODE",
   },
  },
  sp_api = "ultraschall",
 },
 [1491] = {
  fname = "QueryMIDIMessageNameByID",
  label = "US_QueryMIDIMessageNameByID",
  run = "in/out",
  desc = "Returns the name of the MIDI-message, as used by Reaper's function StuffMIDIMessage.\
\
Just pass over the first and second value. The last one is always velocity, which is ~=0 for it to be accepted.\
However, some codes don't have a name associated. In that case, this function returns \"-1\"\
\
Only returns the names for mode 1 and english on Windows!\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the actual name of the midi-message, like \"A\" or \"F1\" or \"Ctrl+Alt+Shift+Win+PgUp\".",
    name = "MIDIMESSAGE_NAME",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the modifier value, which is the second parameter of StuffMIDIMessage",
    name = "MODIFIER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the key value, which is the third parameter of StuffMIDIMessage",
    name = "KEY",
   },
  },
  sp_api = "ultraschall",
 },
 [1492] = {
  fname = "MidiEditor_SetFixOverlapState",
  label = "US_MidiEditor_SetFixOverlapState",
  run = "in/out",
  desc = "Sets the Automatically Correct Overlapping Notes-option, as set in the Midi-Editor -> Options-menu\
\
Note: For API-limitations, this will flash up shortly a new Midi-Editor, if none is opened yet!\
\
Returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "the new state of the toggled option",
    name = "NEWSTATE",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set the option checked; false, set the option unchecked",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [1493] = {
  fname = "MidiEditor_GetFixOverlapState",
  label = "US_MidiEditor_GetFixOverlapState",
  run = "in/out",
  desc = "Gets the Automatically Correct Overlapping Notes-option, as set in the Midi-Editor -> Options-menu\
\
Note: For API-limitations, this will flash up shortly a new Midi-Editor, if none is opened yet!",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "the new state of the toggled option",
    name = "NEWSTATE",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, set the option checked; false, set the option unchecked; nil, toggle option",
    opt = {
     use = false,
    },
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [1494] = {
  fname = "Localize_UseFile",
  label = "US_Localize_UseFile",
  run = "in/out",
  desc = "Sets the localize-file and the section to use in the localize-file.\
If file cannot be found, the function will also look into resource-path/LangPack/ as well to find it.\
\
The file is of the format:\
;comment\
;another comment\
[section]\
original text=translated text\
More Text with\\nNewlines and %s - substitution=Translated Text with\\nNewlines and %s - substitution\
A third\\=example with escaped equal\\=in it = translated text with escaped\\=equaltext\
\
see [specs for more information](../misc/ultraschall_translation_file_format.USLangPack).\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, translation-file has been found and set successfully; false, translation-file hasn't been found",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename with path to the translationfile; if no path is given, it will look in resource-folder/LangPack for the translation-file",
    name = "FILENAME",
   },
   [2] = {
    type = "STRING",
    desc = "the section of the translation-file, from which to read the translated strings",
    name = "SECTION",
   },
   [3] = {
    type = "STRING",
    desc = "the language, which will be put after filename and before extension, like mylangpack_de.USLangPack; \
us, usenglish\
es, spanish\
fr, french\
de, german\
jp, japanese\
etc",
    name = "LANGUAGE",
   },
  },
  sp_api = "ultraschall",
 },
 [1495] = {
  fname = "Localize",
  label = "US_Localize",
  run = "in/out",
  desc = "Translates the string original_string into its translated version, as stored in a translation-file.\
\
To set a translationfile, see [Localize_UseFile](#Localize_UseFile).\
\
If the string contains %s, the optional parameters \"...\" will replace them. The order of the parameters is the order of the replacement of the %s in the string.\
    \
If no translation is available, it returns the original string. In that case, %s in the string could be replaced by optional parameters ...\
\
This function can be used with or without ultraschall. at the beginning, for your convenience.\
\
see [specs for more information](../misc/ultraschall_translation_file_format.USLangPack).\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the translated string; will be the original_string(with optional substitution), if translation is not possible",
    name = "TRANSLATED_STRING",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, translation-was successful; false, translation wasn't successful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the original string, that you want to translate",
    name = "ORIGINAL_STRING",
   },
   [2] = {
    type = "...",
    desc = "optional parameters, who will be used to substitute %s in the returned string; order of the optional parameters reflects order of %s in the string",
    name = "RETVAL",
   },
  },
  sp_api = "ultraschall",
 },
 [1496] = {
  fname = "Localize_RefreshFile",
  label = "US_Localize_RefreshFile",
  run = "in/out",
  desc = "Reloads the translation-file, that has been set using [Localize_UseFile](#Localize_UseFile).\
\
see [specs for more information](../misc/ultraschall_translation_file_format.USLangPack).\
",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, translation-file has been found and set successfully; false, translation-file hasn't been found",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1497] = {
  fname = "TrackManager_ClearFilter",
  label = "US_TrackManager_ClearFilter",
  run = "in/out",
  desc = "clears the filter of the trackmanager, if the window is opened.\
\
returns false if Track Manager is closed",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, clearing was successful; false, clearing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1498] = {
  fname = "TrackManager_ShowAll",
  label = "US_TrackManager_ShowAll",
  run = "in/out",
  desc = "shows all tracks, if the window is opened.\
\
returns false if Track Manager is closed",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, showall was successful; false, showall was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1499] = {
  fname = "TrackManager_SelectionFromProject",
  label = "US_TrackManager_SelectionFromProject",
  run = "in/out",
  desc = "sets trackselection in trackmanager to the trackselection from the project, if the trackmanager-window is opened.\
\
returns false if Track Manager is closed",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting selection was successful; false, setting selection was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1500] = {
  fname = "TrackManager_SelectionFromList",
  label = "US_TrackManager_SelectionFromList",
  run = "in/out",
  desc = "sets trackselection from trackmanager into the trackselection of the project, if the trackmanager-window is opened.\
\
returns false if Track Manager is closed",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting selection was successful; false, setting selection was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1501] = {
  fname = "TrackManager_SetFilter",
  label = "US_TrackManager_SetFilter",
  run = "in/out",
  desc = "sets filter of the trackmanager, if the trackmanager-window is opened.\
\
returns false if Track Manager is closed",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting filter was successful; false, setting filter was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the new filter-phrase to be set ",
    name = "FILTER",
   },
  },
  sp_api = "ultraschall",
 },
 [1502] = {
  fname = "TrackManager_OpenClose",
  label = "US_TrackManager_OpenClose",
  run = "in/out",
  desc = "opens/closes the trackmanager\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, opening/closing was successful; false, there was an error",
    name = "RETVAL",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, track manager is opened; false, track manager is closed",
    opt = {
     use = false,
    },
    name = "NEW_TOGGLE_STATE",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, open the track manager; false, close the track manager; nil, just toggle open/close of the trackmanager",
    opt = {
     use = false,
    },
    name = "TOGGLE",
   },
  },
  sp_api = "ultraschall",
 },
 [1503] = {
  fname = "GetMediaItemsFromClipboard",
  label = "US_GetMediaItemsFromClipboard",
  run = "in/out",
  desc = "Returns the number of mediaitems and a MediaItemStateChunkArray of the mediaitems, as stored in the clipboard.\
\
It does it by pasting the items at the end of the project, getting them and deleting them again.\
\
Use sparsely and with care, as it uses a lot of resources!",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of items in the clipboard",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the mediaitem-statechunks of the items in the clipboard. One entry for each mediaitem-statechunk.",
    name = "MEDIAITEMSTATECHUNKARRAY",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1504] = {
  fname = "GetStringFromClipboard_SWS",
  label = "US_GetStringFromClipboard_SWS",
  run = "in/out",
  desc = "Returns the content of the clipboard as a string. Uses the SWS-function reaper.CF_GetClipboard, but does everything for you, that is needed for proper use of this function.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the content of the clipboard as a string",
    name = "CLIPBOARD_STRING",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1505] = {
  fname = "PutMediaItemsToClipboard_MediaItemArray",
  label = "US_PutMediaItemsToClipboard_MediaItemArray",
  run = "in/out",
  desc = "Puts the items in MediaItemArray into the clipboard.\
\
Returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if successful; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIAITEMARRAY",
    desc = "an array with all MediaItems, that shall be put into the clipboard",
    name = "MEDIAITEMARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [1506] = {
  fname = "RazorEdit_ProjectHasRazorEdit",
  label = "US_RazorEdit_ProjectHasRazorEdit",
  run = "in/out",
  desc = "Returns, if the project has any razor-edits available.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, project has razor-edits; false, project has no razor-edits",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1507] = {
  fname = "RazorEdit_GetAllRazorEdits",
  label = "US_RazorEdit_GetAllRazorEdits",
  run = "in/out",
  desc = "Returns the number of Razor Edits available and all its entries as a handy table.\
\
The table is of the following format(index is the index of all available razor-edits):        \
\
    RazorEditTable[index][\"Start\"] - the startposition of the RazorEdit in seconds\
    RazorEditTable[index][\"End\"] - the endposition of the RazorEdit in seconds\
    RazorEditTable[index][\"IsTrack\"] - true, it's a track-RazorEdit; false, it's RazorEdit for an envelope\
    RazorEditTable[index][\"Tracknumber\"] - the number of the track, in which the RazorEdit happens\
    RazorEditTable[index][\"Track\"] - the trackobject of the track, in which the RazorEdit happens\
    RazorEditTable[index][\"Envelope_guid\"] - the guid of the envelope, in which the RazorEdit happens; \"\" if it's for the entire track\
    \
The following are optional entries:\
    RazorEdit[index][\"Envelope\"] - the TrackEnvelope-object, when RazorEdit is for an envelope; nil, otherwise\
    RazorEdit[index][\"Envelope_name\"] - the name of the envelope, when RazorEdit is for an envelope; nil, otherwise    ",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of razor_edits available in the current project; 0, if none",
    name = "NUMBER_RAZOR_EDITS",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all attributes of all Razor-Edits available",
    name = "RAZOREDITTABLE",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, exclude the envelope-razor-edit-areas from the list; false or nil, include envelope-razor-edit-areas",
    opt = {
     use = false,
    },
    name = "EXCLUDE_ENVELOPE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, exclude the track-razor-edit-areas from the list; false or nil, include track-razor-edit-areas",
    opt = {
     use = false,
    },
    name = "EXCLUDE_TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1508] = {
  fname = "RazorEdit_GetRazorEdits_Track",
  label = "US_RazorEdit_GetRazorEdits_Track",
  run = "in/out",
  desc = "Returns the number of Razor Edits of a track and all its entries as a handy table.\
\
The table is of the following format(index is the index of all available razor-edits):        \
\
    RazorEditTable[index][\"Start\"] - the startposition of the RazorEdit in seconds\
    RazorEditTable[index][\"End\"] - the endposition of the RazorEdit in seconds\
    RazorEditTable[index][\"IsTrack\"] - true, it's a track-RazorEdit; false, it's RazorEdit for an envelope\
    RazorEditTable[index][\"Tracknumber\"] - the number of the track, in which the RazorEdit happens\
    RazorEditTable[index][\"Track\"] - the trackobject of the track, in which the RazorEdit happens\
    RazorEditTable[index][\"Envelope_guid\"] - the guid of the envelope, in which the RazorEdit happens; \"\" if it's for the entire track\
    \
The following are optional entries:\
    RazorEdit[index][\"Envelope\"] - the TrackEnvelope-object, when RazorEdit is for an envelope; nil, otherwise\
    RazorEdit[index][\"Envelope_name\"] - the name of the envelope, when RazorEdit is for an envelope; nil, otherwise    \
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of razor_edits available in the track; 0, if none",
    name = "NUMBER_RAZOR_EDITS",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all attributes of all track-Razor-Edits available",
    name = "RAZOREDITTABLE",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, exclude the envelope-razor-edit-areas from the list; false or nil, include envelope-razor-edit-areas",
    opt = {
     use = false,
    },
    name = "EXCLUDE_ENVELOPE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, exclude the track-razor-edit-areas from the list; false or nil, include track-razor-edit-areas",
    opt = {
     use = false,
    },
    name = "EXCLUDE_TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1509] = {
  fname = "RazorEdit_Nudge_Track",
  label = "US_RazorEdit_Nudge_Track",
  run = "in/out",
  desc = "Nudges razor-edits of a track, leaving the envelopes untouched.\
\
To nudge razor-edit-areas of a specific TrackEnvelope, use RazorEdit_Nudge_Envelope instead.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, nudging was successful; false, nudging was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose razor-edits you want to nudge",
    name = "TRACK",
   },
   [2] = {
    type = "NUMBER",
    desc = "the amount to nudge the razor-edit-areas, negative, left; positive, right",
    name = "NUDGE_DELTA",
   },
   [3] = {
    type = "INTEGER",
    desc = "allows to nudge only the n-th razor-edit-area in the track; nil, to nudge all in the track(except envelope)",
    opt = {
     use = false,
    },
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1510] = {
  fname = "RazorEdit_Nudge_Envelope",
  label = "US_RazorEdit_Nudge_Envelope",
  run = "in/out",
  desc = "Nudges razor-edits of a specific TrackEnvelope\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, nudging was successful; false, nudging was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, whose razor-edit-areas you want to nudge",
    name = "TRACKENVELOPE",
   },
   [2] = {
    type = "NUMBER",
    desc = "the amount to nudge the razor-edit-areas, negative, left; positive, right",
    name = "NUDGE_DELTA",
   },
   [3] = {
    type = "INTEGER",
    desc = "allows to nudge only the n-th razor-edit-area in the envelope; nil, to nudge all in the envelope",
    opt = {
     use = false,
    },
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1511] = {
  fname = "RazorEdit_RemoveAllFromTrack",
  label = "US_RazorEdit_RemoveAllFromTrack",
  run = "in/out",
  desc = "removes all Razor Edits from a MediaTrack(leaves razor-edit-areas of envelopes untouched!)\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, removing was successful; false, removing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose razor-edits you want to remove",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1512] = {
  fname = "RazorEdit_RemoveAllFromEnvelope",
  label = "US_RazorEdit_RemoveAllFromEnvelope",
  run = "in/out",
  desc = "removes all Razor Edits from a TrackEnvelope\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, removing was successful; false, removing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, whose razor-edits you want to remove",
    name = "TRACKENVELOPE",
   },
  },
  sp_api = "ultraschall",
 },
 [1513] = {
  fname = "RazorEdit_RemoveAllFromTrackAndEnvelope",
  label = "US_RazorEdit_RemoveAllFromTrackAndEnvelope",
  run = "in/out",
  desc = "removes all Razor Edits from a MediaTrack including its envelopes.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, removing was successful; false, removing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose razor-edits you want to remove(including its envelopes)",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1514] = {
  fname = "RazorEdit_Add_Track",
  label = "US_RazorEdit_Add_Track",
  run = "in/out",
  desc = "adds razor-edit-areas to a track(leaves all of its envelopes untouched)\
\
added razor-edit-areas might be combined into other ones, so this function returns the changed razor-edit-string for later reference\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered razor-edit-areas that are now stored in the track, as used by GetSetMediaTrackInfo_String",
    name = "ALTERED_RAZOR_EDIT_STRING",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, to which you want to add razor-edits",
    name = "TRACK",
   },
   [2] = {
    type = "NUMBER",
    desc = "the start-position, from which to add the razor-edit",
    name = "START_POSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the end-position, to which to add the razor-edit",
    name = "END_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1515] = {
  fname = "RazorEdit_Add_Envelope",
  label = "US_RazorEdit_Add_Envelope",
  run = "in/out",
  desc = "adds razor-edit-areas to a TrackEnvelope only\
\
added razor-edit-areas might be combined into other ones, so this function returns the changed razor-edit-string for later reference\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered razor-edit-areas that are now stored in the track, as used by GetSetMediaTrackInfo_String",
    name = "ALTERED_RAZOR_EDIT_STRING",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, to which you want to add razor-edits",
    name = "ENVELOPE",
   },
   [2] = {
    type = "NUMBER",
    desc = "the start-position, from which to add the razor-edit",
    name = "START_POSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the end-position, to which to add the razor-edit",
    name = "END_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1516] = {
  fname = "RazorEdit_Remove_Track",
  label = "US_RazorEdit_Remove_Track",
  run = "in/out",
  desc = "removes razor-edit-areas from a track(leaves all of its envelopes untouched)\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered razor-edit-areas that are now stored in the track, as used by GetSetMediaTrackInfo_String",
    name = "ALTERED_RAZOR_EDIT_STRING",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, from which you want to remove razor-edit-areas",
    name = "TRACK",
   },
   [2] = {
    type = "NUMBER",
    desc = "the start-position, from which to remove razor-edit-areas",
    name = "START_POSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the end-position, to which to which to remove the razor-edit-areas",
    name = "END_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1517] = {
  fname = "RazorEdit_Remove_Envelope",
  label = "US_RazorEdit_Remove_Envelope",
  run = "in/out",
  desc = "removes razor-edit-areas from a TrackEnvelope only\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered razor-edit-areas that are now stored in the track, as used by GetSetMediaTrackInfo_String",
    name = "ALTERED_RAZOR_EDIT_STRING",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, from which you want to remove razor-edit-areas",
    name = "ENVELOPE",
   },
   [2] = {
    type = "NUMBER",
    desc = "the start-position, from which to remove razor-edit-areas",
    name = "START_POSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the end-position, to which to remove the razor-edit-areas",
    name = "END_POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1518] = {
  fname = "RazorEdit_CountAreas_Envelope",
  label = "US_RazorEdit_CountAreas_Envelope",
  run = "in/out",
  desc = "Counts razor-edit-areas of a specific TrackEnvelope\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of razor-edit-areas in this envelope; -1, in case of an error",
    name = "RAZOR_EDIT_AREA_COUNT",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, whose razor-edit-areas you want to count",
    name = "TRACKENVELOPE",
   },
  },
  sp_api = "ultraschall",
 },
 [1519] = {
  fname = "RazorEdit_CountAreas_Track",
  label = "US_RazorEdit_CountAreas_Track",
  run = "in/out",
  desc = "Counts razor-edit-areas of a track(excluding envelopes).\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of razor-edit-areas in this track; -1, in case of an error",
    name = "RAZOR_EDIT_AREA_COUNT",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose razor-edit-areas you want to count",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1520] = {
  fname = "RazorEdit_Remove",
  label = "US_RazorEdit_Remove",
  run = "in/out",
  desc = "removes all Razor Edits from a MediaTrack including its envelopes.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, removing was successful; false, removing was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose razor-edits you want to remove(including its envelopes)",
    name = "TRACK",
   },
  },
  sp_api = "ultraschall",
 },
 [1521] = {
  fname = "RazorEdit_GetFromPoint",
  label = "US_RazorEdit_GetFromPoint",
  run = "in/out",
  desc = "gets a razor-edit area by coordinate in pixels\
\
returns -1 in case of an error with no additional return-values returned",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the found razor-edit area; -1, if it's a gap within razor-edits",
    name = "RAZOR_EDIT_INDEX",
   },
   [2] = {
    type = "NUMBER",
    desc = "the start-position of the razor-edit-area/gap",
    name = "START_POSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the end-position of the razor-edit-area/gap",
    name = "END_POSITION",
   },
   [4] = {
    type = "MEDIATRACK",
    desc = "the track, in which the razor-edit-area has been found",
    name = "TRACK",
   },
   [5] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, in which a razor-edit-area has been found; nil, if not in an envelope but rather in the track",
    opt = {
     use = false,
    },
    name = "ENVELOPE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the x-position in pixels, at which to look for razor-edit-areas",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "the y-position in pixels, at which to look for razor-edit-areas",
    name = "Y",
   },
  },
  sp_api = "ultraschall",
 },
 [1522] = {
  fname = "RazorEdit_RemoveByIndex_Track",
  label = "US_RazorEdit_RemoveByIndex_Track",
  run = "in/out",
  desc = "removes razor-edit-areas from a track by its index(leaves all of its envelopes untouched)\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered razor-edit-areas that are now stored in the track, as used by GetSetMediaTrackInfo_String",
    name = "ALTERED_RAZOR_EDIT_STRING",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, from which you want to remove razor-edit-areas",
    name = "TRACK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the razor-edit-area that you want to remove",
    name = "RAZOR_EDIT_AREA_INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1523] = {
  fname = "RazorEdit_RemoveByIndex_Envelope",
  label = "US_RazorEdit_RemoveByIndex_Envelope",
  run = "in/out",
  desc = "removes razor-edit-areas from a track by its index(leaves all of its envelopes untouched)\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the altered razor-edit-areas that are now stored in the track, as used by GetSetMediaTrackInfo_String",
    name = "ALTERED_RAZOR_EDIT_STRING",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, from which you want to remove razor-edit-areas",
    name = "ENVELOPE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the razor-edit-area that you want to remove",
    name = "RAZOR_EDIT_AREA_INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1524] = {
  fname = "RazorEdit_IsAtPosition_Track",
  label = "US_RazorEdit_IsAtPosition_Track",
  run = "in/out",
  desc = "returns, if there's a razor-edit in a track at a given position or if there's a gap.\
\
It also returns the start/end-position of the razor-edit or razor-edit-gap.\
\
Gaps will be seen as either within two razor-edit-areas or from project-start to first razoredit or from last razor-edit to end of project.\
\
If the position is before 0, the function will only return false\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, there's a razor-edit at position; false, there's no razor-edit at position; nil, an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "NUMBER",
    desc = "the start of the razor-edit or razor-edit gap; nil if position is before 0 or after project-length",
    opt = {
     use = false,
    },
    name = "START_POS",
   },
   [3] = {
    type = "NUMBER",
    desc = "the end of the razor-edit or razor-edit gap; nil if position is before 0 or after project-length",
    opt = {
     use = false,
    },
    name = "END_POS",
   },
   [4] = {
    type = "INTEGER",
    desc = "the index of the found razor-edit-area; 1-based; -1, if it's a gap",
    opt = {
     use = false,
    },
    name = "RAZOR_AREA_INDEX",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the track, whose razor-edit-areas/gaps you want to check for",
    name = "TRACK",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position, at which to look for a razor-edit-area or a gap of it",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1525] = {
  fname = "RazorEdit_IsAtPosition_Envelope",
  label = "US_RazorEdit_IsAtPosition_Envelope",
  run = "in/out",
  desc = "returns, if there's a razor-edit in a TrackEnvelope at a given position or if there's a gap.\
\
It also returns the start/end-position of the razor-edit or razor-edit-gap.\
\
Gaps will be seen as either within two razor-edit-areas or from project-start to first razoredit or from last razor-edit to end of project.\
\
If the position is before 0, the function will only return false\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, there's a razor-edit at position; false, there's no razor-edit at position; nil, an error occurred",
    name = "RETVAL",
   },
   [2] = {
    type = "NUMBER",
    desc = "the start of the razor-edit or razor-edit gap; nil if position is before 0",
    opt = {
     use = false,
    },
    name = "START_POS",
   },
   [3] = {
    type = "NUMBER",
    desc = "the end of the razor-edit or razor-edit gap; nil if position is before 0",
    opt = {
     use = false,
    },
    name = "END_POS",
   },
   [4] = {
    type = "INTEGER",
    desc = "the index of the found razor-edit-area; 1-based; -1, if it's a gap",
    opt = {
     use = false,
    },
    name = "RAZOR_AREA_INDEX",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the envelope, whose razor-edit-areas/gaps you want to check for",
    name = "ENVELOPE",
   },
   [2] = {
    type = "NUMBER",
    desc = "the position, at which to look for a razor-edit-area or a gap of it",
    name = "POSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1526] = {
  fname = "RazorEdit_CheckForPossibleOverlap_Track",
  label = "US_RazorEdit_CheckForPossibleOverlap_Track",
  run = "in/out",
  desc = "Checks, whether an area overlaps with already existing razor-edit-areas of a MediaTrack.\
\
It returns the first razor-edit-area, that creates overlap. That means, if start-position overlaps with razor-edit-area #1 and endposition with razor-edit-area #4, it will only return razor-edit-area #1\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, there's an overlap; false, there's no overlap",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "\"startposition\", the startposition overlaps; \"endposition\", the endposition overlaps; \"start/endposition\", it overlaps with both",
    name = "POSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the startposition of the razor-edit-area, where it overlaps",
    name = "START_POSITION",
   },
   [4] = {
    type = "NUMBER",
    desc = "the endposition of the razor-edit-area, where it overlaps",
    name = "END_POSITION",
   },
  },
  ins = {
   [1] = {
    type = "MEDIATRACK",
    desc = "the MediaTrack, where you want to check, if start-position and end-position overlap with any existing razor-edits",
    name = "TRACK",
   },
   [2] = {
    type = "NUMBER",
    desc = "the start-position, to check, whether it overlaps",
    name = "STARTPOSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the end-position to check, whether it overlaps",
    name = "ENDPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1527] = {
  fname = "RazorEdit_CheckForPossibleOverlap_Envelope",
  label = "US_RazorEdit_CheckForPossibleOverlap_Envelope",
  run = "in/out",
  desc = "Checks, whether an area overlaps with already existing razor-edit-areas of an envelope\
\
It returns the first razor-edit-area, that creates overlap. That means, if start-position overlaps with razor-edit-area #1 and endposition with razor-edit-area #4, it will only return razor-edit-area #1\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, there's an overlap; false, there's no overlap",
    name = "RETVAL",
   },
   [2] = {
    type = "STRING",
    desc = "\"startposition\", the startposition overlaps; \"endposition\", the endposition overlaps; \"start/endposition\", it overlaps with both",
    name = "POSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the startposition of the razor-edit-area, where it overlaps",
    name = "START_POSITION",
   },
   [4] = {
    type = "NUMBER",
    desc = "the endposition of the razor-edit-area, where it overlaps",
    name = "END_POSITION",
   },
  },
  ins = {
   [1] = {
    type = "TRACKENVELOPE",
    desc = "the TrackEnvelope, where you want to check, if start-position and end-position overlap with any existing razor-edits",
    name = "ENVELOPE",
   },
   [2] = {
    type = "NUMBER",
    desc = "the start-position, to check, whether it overlaps",
    name = "STARTPOSITION",
   },
   [3] = {
    type = "NUMBER",
    desc = "the end-position to check, whether it overlaps",
    name = "ENDPOSITION",
   },
  },
  sp_api = "ultraschall",
 },
 [1528] = {
  fname = "GetHWInputs_Aliasnames",
  label = "US_GetHWInputs_Aliasnames",
  run = "in/out",
  desc = "Returns the aliasnames and their associated channels of the currently selected audio-device.\
\
The returned table is of the format\
  table[index][1] - the name of the alias\
  table[index][2] - the hardware-input-channel, associated to this aliasname",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of aliases available",
    name = "NUMBER_OF_ALIASES",
   },
   [2] = {
    type = "TABLE",
    desc = "a table, that contains all alias-names and their associated Hardware-Input-channels",
    name = "ALIASES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1529] = {
  fname = "GetHWOutputs_Aliasnames",
  label = "US_GetHWOutputs_Aliasnames",
  run = "in/out",
  desc = "Returns the aliasnames and their associated channels of the currently selected audio-device.\
\
The returned table is of the format\
  table[index][1] - the name of the alias\
  table[index][2] - the hardware-output-channel, associated to this aliasname",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of aliases available",
    name = "NUMBER_OF_ALIASES",
   },
   [2] = {
    type = "TABLE",
    desc = "a table, that contains all alias-names and their associated Hardware-Output-channels",
    name = "ALIASES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1530] = {
  fname = "WebInterface_GetInstalledInterfaces",
  label = "US_WebInterface_GetInstalledInterfaces",
  run = "in/out",
  desc = "Returns the currently installed web-interface-pages.\
\
Will return Reaper's default ones(resources-folder/Plugins/reaper_www_root/) as well as your customized ones(resources-folder/reaper_www_root/)",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of factory-default webinterfaces, installed by Reaper",
    name = "REAPERS_WEBINTERFACE_COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the filenames with path of the webinterfaces(can be .htm or .html)",
    name = "REAPERS_WEBINTERFACE_FILENAMES",
   },
   [3] = {
    type = "ARRAY",
    desc = "the titles of the webinterfaces, as shown in the titlebar of the browser",
    name = "REAPERS_WEBINTERFACE_TITLES",
   },
   [4] = {
    type = "INTEGER",
    desc = "the number of user-customized webinterfaces",
    name = "USERS_WEBINTERFACE_COUNT",
   },
   [5] = {
    type = "ARRAY",
    desc = "the filenames with path of the webinterfaces(can be .htm or .html)",
    name = "USERS_WEBINTERFACE_FILENAMES",
   },
   [6] = {
    type = "ARRAY",
    desc = "the titles of the webinterfaces, as shown in the titlebar of the browser",
    name = "USERS_WEBINTERFACE_TITLES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1531] = {
  fname = "AutoSearchReaMoteClients",
  label = "US_AutoSearchReaMoteClients",
  run = "in/out",
  desc = "Auto-searches for new ReaMote-clients",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1532] = {
  fname = "Docs_ConvertPlainTextToHTML",
  label = "US_Docs_ConvertPlainTextToHTML",
  run = "in/out",
  desc = "Converts a plaintext into HTML.\
\
Converts newlines to <br>, Double Spaces to &nbsp;&nbsp; and Tabs to &nbsp;&nbsp;&nbsp;&nbsp;\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the html-version of the text",
    name = "HTML_TEXT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the text, which shall be converted to html",
    name = "TEXT",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, keep tabs and whitespaces as they are; false or nil, replace tabs with &nbsp;&nbsp;&nbsp;&nbsp; and two whitespaces in a row with two &nbsp;&nbsp;",
    opt = {
     use = false,
    },
    name = "NOBSP",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, do not insert <br> between lines using <pre> and </pre>; false or nil; always end each line with <br>",
    opt = {
     use = false,
    },
    name = "IGNORE_PRE",
   },
  },
  sp_api = "ultraschall",
 },
 [1533] = {
  fname = "Docs_RemoveIndent",
  label = "US_Docs_RemoveIndent",
  run = "in/out",
  desc = "unindents an indented text from a US_DocBloc.\
\
There are different styles of unindentation:\
  as_typed - keeps the text, as it is\
  minus_starts_line - will throw away everything from start of the line until(and including) the firt - in it\
  preceding_spaces - will remove all spaces/tabs in the beginning of each line\
  default - will take the indentation of the first line and apply it to each of the following lines\
            that means, indentation relative to the first line is kept\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the string, from which the indentation was removed",
    name = "UNINDENTED_TEXT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string, which shall be unindented",
    name = "STRING",
   },
   [2] = {
    type = "STRING",
    desc = "the type of indentation you want to remove\
  as_typed - keeps the text, as it is\
  minus_starts_line - will throw away everything from start of the line until(and including) the first - in it\
  preceding_spaces - will remove all spaces/tabs in the beginning of each line\
  default - will take the indentation of the first line and apply it to each of the following lines\
That means, indentation relative to the first line is kept.",
    name = "INDENTTYPE",
   },
  },
  sp_api = "ultraschall",
 },
 [1534] = {
  fname = "Docs_GetAllUSDocBlocsFromString",
  label = "US_Docs_GetAllUSDocBlocsFromString",
  run = "in/out",
  desc = "returns all US_DocBloc-elements from a string.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found US_DocBlocs in the string",
    name = "FOUND_USDOCBLOCS",
   },
   [2] = {
    type = "ARRAY",
    desc = "the individual US_DocBlocs found in the string",
    name = "ALL_FOUND_USDOCBLOCS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string, from which to retrieve the US_DocBlocs",
    name = "STRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1535] = {
  fname = "Docs_GetUSDocBloc_Slug",
  label = "US_Docs_GetUSDocBloc_Slug",
  run = "in/out",
  desc = "returns the slug from an US_DocBloc-element\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the slug, as stored in the USDocBloc",
    name = "SLUG",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the slug from",
    name = "STRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1536] = {
  fname = "Docs_GetUSDocBloc_Title",
  label = "US_Docs_GetUSDocBloc_Title",
  run = "in/out",
  desc = "returns the title from an US_DocBloc-element.\
There can be multiple titles, e.g. in multiple languages\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the title, as stored in the USDocBloc",
    name = "TITLE",
   },
   [2] = {
    type = "STRING",
    desc = "the language, in which the title is stored",
    name = "SPOK_LANG",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the title from",
    name = "STRING",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the title to get, starting with 1 for the first title",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1537] = {
  fname = "Docs_GetUSDocBloc_Description",
  label = "US_Docs_GetUSDocBloc_Description",
  run = "in/out",
  desc = "returns the description-text from an US_DocBloc-element.\
There can be multiple descriptions, e.g. in multiple languages\
\
It will remove automatically indentation(as requested by the description-tag of the US_DocBloc), if unindent_description==true.\
If no indentation is requested by the description-tag, it will assume default(the indentation of the first line will be applied to all other lines).\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the description-text found in the USDocBloc in the string",
    name = "DESCRIPTION",
   },
   [2] = {
    type = "STRING",
    desc = "the markup-type the description is written in",
    name = "MARKUP_TYPE",
   },
   [3] = {
    type = "STRING",
    desc = "the version of the markup-language, in which the description is written in",
    name = "MARKUP_VERSION",
   },
   [4] = {
    type = "STRING",
    desc = "the indentation of the text; can be either\
  as_typed - keeps the text, as it is\
  minus_starts_line - will throw away everything from start of the line until(and including) the first - in it\
  preceding_spaces - will remove all spaces/tabs in the beginning of each line\
  default - will take the indentation of the first line and apply it to each of the following lines",
    name = "INDENT",
   },
   [5] = {
    type = "STRING",
    desc = "the language, in which the description is written in; \"\", if not set",
    name = "LANGUAGE",
   },
   [6] = {
    type = "STRING",
    desc = "the programming-language, in which the description is written in; \", if not set",
    name = "PROG_LANG",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the description from",
    name = "STRING",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, will remove indentation as given in the description-tag; false, return the text as it is",
    name = "UNINDENT_DESCRIPTION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index of the description to get, starting with 1 for the first description",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1538] = {
  fname = "Docs_GetUSDocBloc_TargetDocument",
  label = "US_Docs_GetUSDocBloc_TargetDocument",
  run = "in/out",
  desc = "returns the target-document from an US_DocBloc-element.\
The target-document is the document, into which the converted DocBloc shall be stored into.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the target-document, into which the converted US_DocBloc shall be stored into",
    name = "TARGET_DOCUMENT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the target-document-entry from",
    name = "STRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1539] = {
  fname = "Docs_GetUSDocBloc_SourceDocument",
  label = "US_Docs_GetUSDocBloc_SourceDocument",
  run = "in/out",
  desc = "returns the source-document from an US_DocBloc-element.\
The source-document is the document, into which the converted DocBloc shall be stored into.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the source-document, into which the converted US_DocBloc shall be stored into",
    name = "SOURCE_DOCUMENT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the source-document-entry from",
    name = "STRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1540] = {
  fname = "Docs_GetUSDocBloc_ChapterContext",
  label = "US_Docs_GetUSDocBloc_ChapterContext",
  run = "in/out",
  desc = "returns the chapters and subchapters, in which the US_DocBloc shall be stored into\
A US_DocBloc can have multiple chapter-entries, e.g. for multiple languages.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of chapters found",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the chapternames as an array",
    name = "CHAPTERS",
   },
   [3] = {
    type = "STRING",
    desc = "the language of the chapters; \"\", if no language is given",
    name = "SPOK_LANG",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the source-document-entry from",
    name = "STRING",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the chapter-entries, starting with 1 for the first",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1541] = {
  fname = "Docs_GetUSDocBloc_Tags",
  label = "US_Docs_GetUSDocBloc_Tags",
  run = "in/out",
  desc = "returns the tags of an US_DocBloc-entry\
A US_DocBloc can have multiple tag-entries, e.g. for multiple languages.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of tags found",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the tags as an array",
    name = "TAGS",
   },
   [3] = {
    type = "STRING",
    desc = "the language of the tags; \"\" if no language is given",
    name = "SPOK_LANG",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the tags-entry from",
    name = "STRING",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the tags-entries, starting with 1 for the first",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1542] = {
  fname = "Docs_GetUSDocBloc_Params",
  label = "US_Docs_GetUSDocBloc_Params",
  run = "in/out",
  desc = "returns the parameters of an US_DocBloc-entry\
A US_DocBloc can have multiple parameter-entries, e.g. for multiple languages.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of parameters found",
    name = "PARMCOUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "all parameters found, as an array\
  Params[index][1] - parametername\
  Params[index][2] - parameterdescription",
    name = "PARAMS",
   },
   [3] = {
    type = "STRING",
    desc = "the markuptype found; if no markuptype is given, it returns \"plaintext\"",
    name = "MARKUPTYPE",
   },
   [4] = {
    type = "STRING",
    desc = "the version of the markuptype found; \"\", if not given",
    name = "MARKUPVERSION",
   },
   [5] = {
    type = "STRING",
    desc = "the programming-language used in these parameters; \"\", if not given",
    name = "PROG_LANG",
   },
   [6] = {
    type = "STRING",
    desc = "the spoken-language used in these parameters; \"\", if not given",
    name = "SPOK_LANG",
   },
   [7] = {
    type = "STRING",
    desc = "the type of indentation you want to remove\
  as_typed - keeps the text, as it is\
  minus_starts_line - will throw away everything from start of the line until(and including) the first - in it\
  preceding_spaces - will remove all spaces/tabs in the beginning of each line\
  default - will take the indentation of the first line and apply it to each of the following lines\
That means, indentation relative to the first line is kept.",
    name = "INDENT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the parameter-entry from",
    name = "STRING",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, will remove indentation as given in the parameter-tag; false, return the text as it is",
    name = "UNINDENT_DESCRIPTION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index of the parameter-entries, starting with 1 for the first",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1543] = {
  fname = "Docs_GetUSDocBloc_Retvals",
  label = "US_Docs_GetUSDocBloc_Retvals",
  run = "in/out",
  desc = "returns the retvals of an US_DocBloc-entry\
A US_DocBloc can have multiple retvals-entries, e.g. for multiple languages.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of retvals found",
    name = "RETVALSCOUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "all retvals found, as an array\
  retvals[index][1] - retvalsname\
  retvals[index][2] - retvalsdescription",
    name = "RETVALS",
   },
   [3] = {
    type = "STRING",
    desc = "the markuptype found; if no markuptype is given, it returns \"plaintext\"",
    name = "MARKUPTYPE",
   },
   [4] = {
    type = "STRING",
    desc = "the version of the markuptype found; \"\", if not given",
    name = "MARKUPVERSION",
   },
   [5] = {
    type = "STRING",
    desc = "the programming-language used in these retvals; \"\", if not given",
    name = "PROG_LANG",
   },
   [6] = {
    type = "STRING",
    desc = "the spoken-language used in these retvals; \"\", if not given",
    name = "SPOK_LANG",
   },
   [7] = {
    type = "STRING",
    desc = "the type of indentation you want to remove\
  as_typed - keeps the text, as it is\
  minus_starts_line - will throw away everything from start of the line until(and including) the first - in it\
  preceding_spaces - will remove all spaces/tabs in the beginning of each line\
  default - will take the indentation of the first line and apply it to each of the following lines\
That means, indentation relative to the first line is kept.",
    name = "INDENT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the retvals-entry from",
    name = "STRING",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, will remove indentation as given in the retvals-tag; false, return the text as it is",
    name = "UNINDENT_DESCRIPTION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index of the retvals-entries, starting with 1 for the first",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1544] = {
  fname = "Docs_GetUSDocBloc_Functioncall",
  label = "US_Docs_GetUSDocBloc_Functioncall",
  run = "in/out",
  desc = "returns the functioncall-entries from an US_DocBloc-element\
\
There can be multiple functioncall-entries, e.g. for multiple programming-languages\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the functioncall, as stored in the USDocBloc",
    name = "FUNCTIONCALL",
   },
   [2] = {
    type = "STRING",
    desc = "the used programming language",
    name = "PROG_LANG",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the functioncall-entry from",
    name = "STRING",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the functioncall, if there are multiple ones; beginning with 1",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1545] = {
  fname = "Docs_GetUSDocBloc_Requires",
  label = "US_Docs_GetUSDocBloc_Requires",
  run = "in/out",
  desc = "returns the requires-entries from an US_DocBloc-element\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of required elements found in the require-tag",
    name = "COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "the requires found; of the format element=versionnumber, e.g. \"Reaper=5.978\"",
    name = "REQUIRES",
   },
   [3] = {
    type = "ARRAY",
    desc = "like requires, but the index is the required element, while the value is the versionnumber, e.g requires_alt[\"Reaper\"]=\"5.978\"",
    name = "REQUIRES_ALT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the requires-entry from",
    name = "STRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1546] = {
  fname = "Docs_GetUSDocBloc_PreviousChapter",
  label = "US_Docs_GetUSDocBloc_PreviousChapter",
  run = "in/out",
  desc = "returns the slug of the previous chapter of an US_DocBloc-element\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the slug of the previous-chapter, as stored in the USDocBloc",
    name = "PREVIOUS_CHAPTER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the slug of the previous chapter from",
    name = "STRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1547] = {
  fname = "Docs_GetUSDocBloc_NextChapter",
  label = "US_Docs_GetUSDocBloc_NextChapter",
  run = "in/out",
  desc = "returns the slug of the next chapter of an US_DocBloc-element\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the slug of the next-chapter, as stored in the USDocBloc",
    name = "NEXT_CHAPTER",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the slug of the next chapter from",
    name = "STRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1548] = {
  fname = "Docs_GetUSDocBloc_Changelog",
  label = "US_Docs_GetUSDocBloc_Changelog",
  run = "in/out",
  desc = "returns the changelog-entries of an US_DocBloc-entry\
\
this returns the version-number of the software and the changes introduced in that version inside a table.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of changelog-entries found",
    name = "CHANGELOGSCOUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "all changelogs found, as an array\
  changelogs[index][1] - software-version of the introduction of the change, like \"Reaper 6.23\" or \"US_API 4.2.006\"\
  changelogs[index][2] - a description of the change",
    name = "CHANGELOGS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the changelog-entry from",
    name = "STRING",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, will remove indentation as given in the changelog-tag; false, return the text as it is",
    name = "UNINDENT_DESCRIPTION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index of the changelog-entries, starting with 1 for the first",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1549] = {
  fname = "Docs_GetUSDocBloc_LinkedTo",
  label = "US_Docs_GetUSDocBloc_LinkedTo",
  run = "in/out",
  desc = "returns the linked_to-tags of an US_DocBloc-entry\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of linked_to-entries found",
    name = "LINKED_TO_COUNT",
   },
   [2] = {
    type = "ARRAY",
    desc = "all links found, as an array\
  links[index][\"location\"] - the location of the link, either inline(for slugs inside the same document) or url(for links/urls/uris outside of it)\
  links[index][\"link\"] - the slug to the element inside the document/the url or uri linking outside of the document\
  links[index][\"description\"] - a description for this link",
    name = "LINKS",
   },
   [3] = {
    type = "STRING",
    desc = "a description for this linked_to-tag",
    name = "DESCRIPTION",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the linked_to-entry from",
    name = "STRING",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, will remove indentation as given in the changelog-tag; false, return the text as it is",
    name = "UNINDENT_DESCRIPTION",
   },
   [3] = {
    type = "INTEGER",
    desc = "the index of the linked_to-entries, starting with 1 for the first",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1550] = {
  fname = "Docs_GetUSDocBloc_Deprecated",
  label = "US_Docs_GetUSDocBloc_Deprecated",
  run = "in/out",
  desc = "returns the deprecated-tag of an US-DocBloc, which holds the information about, is a function is deprecated and what to use alternatively.\
\
returns nil in case of an error or if no such deprecated-tag exists for this US_DocBloc",
  out = {
   [1] = {
    type = "STRING",
    desc = "which software deprecated the function \"Reaper\" or \"SWS\" or \"JS\", etc",
    name = "WHAT",
   },
   [2] = {
    type = "STRING",
    desc = "since which version is this function deprecated",
    name = "WHEN",
   },
   [3] = {
    type = "STRING",
    desc = "what is a possible alternative to this function, if existing",
    name = "ALTERNATIVE",
   },
   [4] = {
    type = "STRING",
    desc = "function got removed",
    name = "REMOVED",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "a string which hold a US_DocBloc to retrieve the deprecated-tag-attributes from",
    name = "US_DOCBLOC",
   },
  },
  sp_api = "ultraschall",
 },
 [1551] = {
  fname = "Docs_GetReaperApiFunction_Description",
  label = "US_Docs_GetReaperApiFunction_Description",
  run = "in/out",
  desc = "(re-)loads the api-docblocs from the documentation, used by all Docs_GetReaperApi-functions",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1552] = {
  fname = "Docs_GetReaperApiFunction_Call",
  label = "US_Docs_GetReaperApiFunction_Call",
  run = "in/out",
  desc = "returns the functioncall of an Ultraschall-API-function from the documentation    \
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the functioncall of the function",
    name = "FUNCTIONCALL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose description you want to get",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1553] = {
  fname = "Docs_GetReaperApiFunction_Description",
  label = "US_Docs_GetReaperApiFunction_Description",
  run = "in/out",
  desc = "(re-)loads the api-docblocs from the documentation, used by all Docs_GetReaperApi-functions",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1554] = {
  fname = "Docs_FindReaperApiFunction_Pattern",
  label = "US_Docs_FindReaperApiFunction_Pattern",
  run = "in/out",
  desc = "searches for functionnames in the docs, that follow a certain searchpattern(supports Lua patternmatching).\
\
You can also check for case-sensitivity and if you want to search descriptions and tags as well.\
\
the returned tables found_functions is of the format:\
  found_functions_desc[function_index][\"functionname\"] - the name of the function\
  found_functions_desc[function_index][\"description\"] - the entire description\
  found_functions_desc[function_index][\"description_snippet\"] - a snippet of the description that features the found pattern with 10 characters before and after it\
  found_functions_desc[function_index][\"desc_startoffset\"] - the startoffset of the found pattern; -1 if pattern not found in description\
  found_functions_desc[function_index][\"desc_endoffset\"] - the endoffset of the found pattern; -1 if pattern not found in description\
  found_functions_desc[function_index][\"extension\"] - the extension used, like Reaper, SWS, JS, ReaImGui, Osara, etc\
  found_functions_desc[function_index][\"extension_version\"] - the version of the extension\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found functions that follow the search-pattern",
    name = "FOUND_FUNCTIONS_COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all found functions that follow the search pattern",
    name = "FOUND_FUNCTIONS",
   },
   [3] = {
    type = "TABLE",
    desc = "a table with all found matches within descriptions, including offset. \
Index follows the index of found_functions",
    name = "FOUND_FUNCTIONS_DESC",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the search-pattern to look for a function",
    name = "PATTERN",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, search pattern is case-sensitive; false, search-pattern is case-insensitive",
    name = "CASE_SENSITIVE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, search in descriptions; false, don't search in descriptions",
    opt = {
     use = false,
    },
    name = "INCLUDE_DESCRIPTIONS",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, search in tags; false, don't search in tags",
    opt = {
     use = false,
    },
    name = "INCLUDE_TAGS",
   },
  },
  sp_api = "ultraschall",
 },
 [1555] = {
  fname = "Docs_GetReaperApiFunction_Retvals",
  label = "US_Docs_GetReaperApiFunction_Retvals",
  run = "in/out",
  desc = "returns the returnvalues of a function from the documentation\
\
Note: for gfx-functions, add gfx. before the functionname\
\
Table retvals is of the following structure:\
  retvals[retvalindex][\"datatype\"] - the datatype of this retval\
  retvals[retvalindex][\"name\"] - the name of this retval\
  retvals[retvalindex][\"description\"] - the description for this retval\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found returnvalues",
    name = "RETVALSCOUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all return-values",
    name = "RETVALS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose retvals you want to get",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1556] = {
  fname = "Docs_GetReaperApiFunction_Params",
  label = "US_Docs_GetReaperApiFunction_Params",
  run = "in/out",
  desc = "returns the parameters of a function from the documentation\
\
Note: for gfx-functions, add gfx. before the functionname\
\
Table params is of the following structure:\
  params[paramsindex][\"datatype\"] - the datatype of this parameter\
  params[paramsindex][\"name\"] - the name of this parameter\
  params[paramsindex][\"description\"] - the description for this parameter\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found parameters",
    name = "PARAMSCOUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all parameters",
    name = "PARAMS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose parameter you want to get",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1557] = {
  fname = "Docs_GetReaperApiFunction_Tags",
  label = "US_Docs_GetReaperApiFunction_Tags",
  run = "in/out",
  desc = "returns the tags of a function from the documentation\
\
Note: for gfx-functions, add gfx. before the functionname\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of tags for this function",
    name = "TAGS_COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "the tags of this function",
    name = "TAGS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose tags you want to get",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1558] = {
  fname = "Docs_GetReaperApiFunction_Requires",
  label = "US_Docs_GetReaperApiFunction_Requires",
  run = "in/out",
  desc = "returns the requires of a function from the documentation\
\
The requires usually mean dependencies of extensions with a specific version or specific Reaper-versions\
\
Note: for gfx-functions, add gfx. before the functionname\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of requires for this function",
    name = "REQUIRES_COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "the requires of this function",
    name = "REQUIRES",
   },
   [3] = {
    type = "TABLE",
    desc = "like requires but has the require name as index, like Reaper or SWS",
    name = "REQUIRES_ALT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose requires you want to get",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1559] = {
  fname = "Docs_GetAllReaperApiFunctionnames",
  label = "US_Docs_GetAllReaperApiFunctionnames",
  run = "in/out",
  desc = "returns tables with all slugs and all titles of all Reaper-API-functions(usually the functionnames)",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1560] = {
  fname = "Docs_LoadReaperConfigVarsDocBlocs",
  label = "US_Docs_LoadReaperConfigVarsDocBlocs",
  run = "in/out",
  desc = "(re-)loads the config-var api-docblocs from the documentation, used by all Docs_GetReaperApi-functions",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1561] = {
  fname = "Docs_FindReaperConfigVar_Pattern",
  label = "US_Docs_FindReaperConfigVar_Pattern",
  run = "in/out",
  desc = "searches for configvariables in the docs, that follow a certain searchpattern(supports Lua patternmatching).\
\
You can also check for case-sensitivity and if you want to search descriptions and tags as well.\
\
the returned table found_config_vars_desc is of the format: \
  found_config_vars_desc[configvar_index][\"configvar\"] - the name of the found config variable\
  found_config_vars_desc[configvar_index][\"description\"] - the entire description\
  found_config_vars_desc[configvar_index][\"description_snippet\"] - a snippet of the description that features the found pattern with 10 characters before and after it\
  found_config_vars_desc[configvar_index][\"desc_startoffset\"] - the startoffset of the found pattern; -1, if pattern not found in description\
  found_config_vars_desc[configvar_index][\"desc_endoffset\"] - the endoffset of the found pattern; -1, if pattern not found in description\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found config variables that follow the search-pattern",
    name = "FOUND_CONFIGVAR_COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all found config variables that follow the search pattern",
    name = "FOUND_CONFIGVARS",
   },
   [3] = {
    type = "TABLE",
    desc = "a table with all found matches within descriptions, including offset. \
Index follows the index of found_functions\
table will be nil if include_descriptions=false",
    name = "FOUND_CONFIG_VARS_DESC",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the search-pattern to look for a config variable",
    name = "PATTERN",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, search pattern is case-sensitive; false, search-pattern is case-insensitive",
    name = "CASE_SENSITIVE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, search in descriptions; false, don't search in descriptions",
    opt = {
     use = false,
    },
    name = "INCLUDE_DESCRIPTIONS",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, search in tags; false, don't search in tags",
    opt = {
     use = false,
    },
    name = "INCLUDE_TAGS",
   },
  },
  sp_api = "ultraschall",
 },
 [1562] = {
  fname = "Docs_LoadUltraschallAPIDocBlocs",
  label = "US_Docs_LoadUltraschallAPIDocBlocs",
  run = "in/out",
  desc = "(re-)loads the Ultraschall-API-api-docblocs from the documentation, used by all Docs_GetReaperApi-functions",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1563] = {
  fname = "Docs_GetReaperApiFunction_Call",
  label = "US_Docs_GetReaperApiFunction_Call",
  run = "in/out",
  desc = "returns the functioncall of an Ultraschall-API-function from the documentation    \
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the functioncall of the function",
    name = "FUNCTIONCALL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose description you want to get",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1564] = {
  fname = "Docs_GetUltraschallApiFunction_Description",
  label = "US_Docs_GetUltraschallApiFunction_Description",
  run = "in/out",
  desc = "returns the description of an Ultraschall-API function from the documentation\
  \
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the description of the function",
    name = "DESCRIPTION",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose description you want to get",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1565] = {
  fname = "Docs_FindUltraschallApiFunction_Pattern",
  label = "US_Docs_FindUltraschallApiFunction_Pattern",
  run = "in/out",
  desc = "searches for Ultraschall-API functionnames in the docs, that follow a certain searchpattern(supports Lua patternmatching).\
\
You can also check for case-sensitivity and if you want to search descriptions and tags as well.\
\
the returned tables found_functions is of the format:\
  found_functions_desc[function_index][\"functionname\"] - the name of the function\
  found_functions_desc[function_index][\"description\"] - the entire description\
  found_functions_desc[function_index][\"description_snippet\"] - a snippet of the description that features the found pattern with 10 characters before and after it\
  found_functions_desc[function_index][\"desc_startoffset\"] - the startoffset of the found pattern; -1 if pattern not found in description\
  found_functions_desc[function_index][\"desc_endoffset\"] - the endoffset of the found pattern; -1 if pattern not found in description\
  found_functions_desc[function_index][\"extension\"] - the extension used, like Reaper, SWS, JS, ReaImGui, Osara, etc\
  found_functions_desc[function_index][\"extension_version\"] - the version of the extension\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found functions that follow the search-pattern",
    name = "FOUND_FUNCTIONS_COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all found functions that follow the search pattern",
    name = "FOUND_FUNCTIONS",
   },
   [3] = {
    type = "TABLE",
    desc = "a table with all found matches within descriptions, including offset. \
Index follows the index of found_functions",
    name = "FOUND_FUNCTIONS_DESC",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the search-pattern to look for a function",
    name = "PATTERN",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, search pattern is case-sensitive; false, search-pattern is case-insensitive",
    name = "CASE_SENSITIVE",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, search in descriptions; false, don't search in descriptions",
    opt = {
     use = false,
    },
    name = "INCLUDE_DESCRIPTIONS",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, search in tags; false, don't search in tags",
    opt = {
     use = false,
    },
    name = "INCLUDE_TAGS",
   },
  },
  sp_api = "ultraschall",
 },
 [1566] = {
  fname = "Docs_GetUltraschallApiFunction_Retvals",
  label = "US_Docs_GetUltraschallApiFunction_Retvals",
  run = "in/out",
  desc = "returns the returnvalues of an Ultraschall API function from the documentation\
\
Table retvals is of the following structure:\
  retvals[retvalindex][\"datatype\"] - the datatype of this retval\
  retvals[retvalindex][\"name\"] - the name of this retval\
  retvals[retvalindex][\"description\"] - the description for this retval\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found returnvalues",
    name = "RETVALSCOUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all return-values",
    name = "RETVALS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose retvals you want to get",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1567] = {
  fname = "Docs_GetUltraschallApiFunction_Params",
  label = "US_Docs_GetUltraschallApiFunction_Params",
  run = "in/out",
  desc = "returns the parameters of an Ultraschall-API function from the documentation\
\
Table params is of the following structure:\
  params[paramsindex][\"datatype\"] - the datatype of this parameter\
  params[paramsindex][\"name\"] - the name of this parameter\
  params[paramsindex][\"description\"] - the description for this parameter\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found parameters",
    name = "PARAMSCOUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "a table with all parameters",
    name = "PARAMS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose parameter you want to get",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1568] = {
  fname = "Docs_GetUltraschallApiFunction_Tags",
  label = "US_Docs_GetUltraschallApiFunction_Tags",
  run = "in/out",
  desc = "returns the tags of an Ultraschall-API function from the documentation\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of tags for this function",
    name = "TAGS_COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "the tags of this function",
    name = "TAGS",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose tags you want to get",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1569] = {
  fname = "Docs_GetUltraschallApiFunction_Requires",
  label = "US_Docs_GetUltraschallApiFunction_Requires",
  run = "in/out",
  desc = "returns the requires of an Ultraschall-API function from the documentation\
\
The requires usually mean dependencies of extensions with a specific version or specific Reaper-versions\
  \
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of requires for this function",
    name = "REQUIRES_COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "the requires of this function",
    name = "REQUIRES",
   },
   [3] = {
    type = "TABLE",
    desc = "like requires but has the require name as index, like Reaper or SWS",
    name = "REQUIRES_ALT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose requires you want to get",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1570] = {
  fname = "Docs_GetAllUltraschallApiFunctionnames",
  label = "US_Docs_GetAllUltraschallApiFunctionnames",
  run = "in/out",
  desc = "returns tables with all slugs of all Ultraschall-API-functions and variables",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1571] = {
  fname = "Docs_GetReaperApiFunction_Categories",
  label = "US_Docs_GetReaperApiFunction_Categories",
  run = "in/out",
  desc = "returns the categories of a function from the documentation\
\
Note: for gfx-functions, add gfx. before the functionname\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of categories for this function",
    name = "CATEGORIES_COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "the categories of this function",
    name = "CATEGORIES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose categories you want to get",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1572] = {
  fname = "Docs_GetUltraschallApiFunction_Categories",
  label = "US_Docs_GetUltraschallApiFunction_Categories",
  run = "in/out",
  desc = "returns the categories of an Ultraschall-API function from the documentation\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of categories for this function",
    name = "CATEGORIES_COUNT",
   },
   [2] = {
    type = "TABLE",
    desc = "the categories of this function",
    name = "CATEGORIES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose categories you want to get",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1573] = {
  fname = "CountProjectTabs",
  label = "US_CountProjectTabs",
  run = "in/out",
  desc = "Counts the number of opened project tabs.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of projecttabs currently opened",
    name = "NUMBER_OF_PROJECTTABS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1574] = {
  fname = "GetProject_Tabs",
  label = "US_GetProject_Tabs",
  run = "in/out",
  desc = "Returns the ReaProject-objects, as well as the filenames of all opened project-tabs.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of projecttabs currently opened",
    name = "NUMBER_OF_PROJECTTABS",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array, that holds all ReaProjects as well as the projectfilenames\
projecttablist[idx][1] = ReaProject\
projecttablist[idx][2] = projectfilename with path",
    name = "PROJECTTABLIST",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1575] = {
  fname = "GetApiVersion",
  label = "US_GetApiVersion",
  run = "in/out",
  desc = "returns the version, release-date and if it's a beta-version plus the currently installed hotfix",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "a number, that you can use for comparisons like, \"if requestedversion>versionnumber then\"",
    name = "VERSIONNUMBER",
   },
   [2] = {
    type = "STRING",
    desc = "the current Api-major-version",
    name = "MAJORVERSION",
   },
   [3] = {
    type = "STRING",
    desc = "the release date of this api-version",
    name = "DATE",
   },
   [4] = {
    type = "STRING",
    desc = "a subversion-number of a major-version",
    name = "SUBVERSION",
   },
   [5] = {
    type = "STRING",
    desc = "the tagline of the current release",
    name = "TAGLINE",
   },
   [6] = {
    type = "STRING",
    desc = "the release-date of the currently installed hotfix ($ResourceFolder/ultraschall_api/ultraschall_hotfixes.lua); XX_XXX_XXXX if no hotfix is installed currently",
    name = "HOTFIX_DATE",
   },
   [7] = {
    type = "STRING",
    desc = "the build-number of the current release",
    name = "BUILDNUMBER",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1576] = {
  fname = "SuppressErrorMessages",
  label = "US_SuppressErrorMessages",
  run = "in/out",
  desc = "Allows you to suppress error-messages.\
If you pass true, all error messages will be suppressed, until you run the function again passing false.\
\
Note: You should supress error-messages only temprarily and \"unsuppress\" them again, after your critical stuff is finished.\
Otherwise, someone using your functions will have no error-messages to debug with.\
\
Returns false, if parameter isn't boolean. Unlike most other function, this will never create an error-message!",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, you didn't pass a boolean as parameter",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, suppress error-messages; false, don't suppress error-messages",
    name = "FLAG",
   },
  },
  sp_api = "ultraschall",
 },
 [1577] = {
  fname = "AddErrorMessage",
  label = "US_AddErrorMessage",
  run = "in/out",
  desc = "Adds a new errormessage to the Ultraschall-Api-Error-messagesystem. Returns the number of the errormessage.\
Intended for your own 3rd party-functions for the API, to give the user more feedback about errors than just a cryptic errorcode.\
\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it worked; false if it didn't",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of the errormessage within the Ultraschall-Api-Error-messagesystem; nil, if errormessages are suppressed currently",
    name = "ERRORCOUNT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the function, where the error happened",
    name = "FUNCTIONNAME",
   },
   [2] = {
    type = "STRING",
    desc = "the parameter, that caused the problem",
    name = "PARAMETERNAME",
   },
   [3] = {
    type = "STRING",
    desc = "a longer description of what cause the problem and a hint to a possible solution",
    name = "ERRORMESSAGE",
   },
   [4] = {
    type = "INTEGER",
    desc = "a number, that represents the error-message. Will be -1 by default, if not given.",
    name = "ERRORCODE",
   },
  },
  sp_api = "ultraschall",
 },
 [1578] = {
  fname = "StartTime",
  label = "US_StartTime",
  run = "in/out",
  desc = "Contains the correct starting time of the current instance of the Ultraschall-Framework, which probably means your script, that embeds the framework.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1579] = {
  fname = "API_TempPath",
  label = "US_API_TempPath",
  run = "in/out",
  desc = "Contains the path to the temp-folder of the Ultraschall-API.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1580] = {
  fname = "Euro",
  label = "US_Euro",
  run = "in/out",
  desc = "Holds the Euro-currency-symbol, which is hard to type in Reaper's own IDE.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1581] = {
  fname = "ApiTest",
  label = "US_ApiTest",
  run = "in/out",
  desc = "Displays a message to show, which parts of the Ultraschall-API are turned on and which are turned off.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1582] = {
  fname = "ToggleIDE_Errormessages",
  label = "US_ToggleIDE_Errormessages",
  run = "in/out",
  desc = "Toggles or sets, if the error-messaging system shall output it's errors to Reaper's IDE(true) or not(false).\
When set true, it will show the errormessages at the bottom of the IDE, as you are used by Reaper's own functions.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if errors will be shown at the bottom of the IDE; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if errormessages shall be shown at the bottom of the IDE, false if not. If omitted, it toggles what was set before.",
    opt = {
     use = false,
    },
    name = "TOGGLEVALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1583] = {
  fname = "ReadErrorMessage",
  label = "US_ReadErrorMessage",
  run = "in/out",
  desc = "Reads an error-message within the Ultraschall-ErrorMessagesystem.\
Returns a boolean value, the functionname, the errormessage, the \"you've already read this message\"-status, the date and a timestamp of the creation of the errormessage.\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it worked; false if it didn't",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the errorcode of this message, as set by the function that created this errormessage; -1 is default value",
    name = "ERRCODE",
   },
   [3] = {
    type = "STRING",
    desc = "the name of the function, where the problem happened",
    name = "FUNCTIONNAME",
   },
   [4] = {
    type = "STRING",
    desc = "the parameter, that was used wrong by the programmer; \"\" if no parameter was involved in this error",
    name = "PARMNAME",
   },
   [5] = {
    type = "STRING",
    desc = "the message of the problem with a possible hint to a solution",
    name = "ERRORMESSAGE",
   },
   [6] = {
    type = "STRING",
    desc = "\"unread\" if the message hasn't been read yet or a date_time from when the message has been read already",
    name = "READSTATUS",
   },
   [7] = {
    type = "STRING",
    desc = "the date_time of when the error-message was created",
    name = "ERR_CREATION_DATE",
   },
   [8] = {
    type = "STRING",
    desc = "the timestamp of when the error-message was created. Usually seconds, since system got started",
    name = "ERR_CREATION_TIMESTAMP",
   },
   [9] = {
    type = "STRING",
    desc = "the function, in which AddErrorMessage was called",
    name = "CONTEXT_FUNCTION",
   },
   [10] = {
    type = "STRING",
    desc = "the sourcefile, in which AddErrorMessage was called",
    name = "CONTEXT_SOURCEFILE",
   },
   [11] = {
    type = "STRING",
    desc = "the line in the sourcefile, in which AddErrorMessage was called",
    name = "CONTEXT_SOURCELINE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the error, beginning with 1. Use <a href=\"#CountErrorMessages\">CountErrorMessages</a> to get the current number of error-messages.",
    name = "ERRORNUMBER",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, keeps the message unread; false or nil, sets the readstate of the message",
    opt = {
     use = false,
    },
    name = "KEEP_UNREAD",
   },
  },
  sp_api = "ultraschall",
 },
 [1584] = {
  fname = "DeleteErrorMessage",
  label = "US_DeleteErrorMessage",
  run = "in/out",
  desc = "Deletes an error-message within the Ultraschall-ErrorMessagesystem.\
\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if such an error exists; false if it didn't",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the error to delete, beginning with 1. Use <a href=\"#CountErrorMessages\">CountErrorMessages</a> to get the current number of error-messages.",
    name = "ERRORNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1585] = {
  fname = "GetLastErrorMessage",
  label = "US_GetLastErrorMessage",
  run = "in/out",
  desc = "Reads the last error-message stored in the Ultraschall-ErrorMessagesystem.\
Returns a boolean value, the functionname, the errormessage, the date and a timestamp of the creation of the errormessage, the unread-status as well as the error-message-number.\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it worked; false if it didn't",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the errorcode of this message, as set by the function that created this errormessage; -1 is default value",
    name = "ERRCODE",
   },
   [3] = {
    type = "STRING",
    desc = "the name of the function, where the problem happened",
    name = "FUNCTIONNAME",
   },
   [4] = {
    type = "STRING",
    desc = "the parameter, that was used wrong by the programmer; \"\" if no parameter was involved in this error",
    name = "PARMNAME",
   },
   [5] = {
    type = "STRING",
    desc = "the message of the problem with a possible hint to a solution",
    name = "ERRORMESSAGE",
   },
   [6] = {
    type = "STRING",
    desc = "\"unread\" if the message hasn't been read yet or a date_time from when the message has been read already",
    name = "READSTATUS",
   },
   [7] = {
    type = "STRING",
    desc = "the date_time of when the error-message was created",
    name = "ERR_CREATION_DATE",
   },
   [8] = {
    type = "STRING",
    desc = "the timestamp of when the error-message was created. Usually seconds, since system got started",
    name = "ERR_CREATION_TIMESTAMP",
   },
   [9] = {
    type = "INTEGER",
    desc = "the error-message-number within the Ultraschall-Error-Message-System",
    name = "ERRORCOUNTER",
   },
   [10] = {
    type = "STRING",
    desc = "the function, in which AddErrorMessage was called",
    name = "CONTEXT_FUNCTION",
   },
   [11] = {
    type = "STRING",
    desc = "the sourcefile, in which AddErrorMessage was called",
    name = "CONTEXT_SOURCEFILE",
   },
   [12] = {
    type = "STRING",
    desc = "the line in the sourcefile, in which AddErrorMessage was called",
    name = "CONTEXT_SOURCELINE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the error, beginning with 1. Use <a href=\"#CountErrorMessages\">CountErrorMessages</a> to get the current number of error-messages.",
    name = "ERRORNUMBER",
   },
  },
  sp_api = "ultraschall",
 },
 [1586] = {
  fname = "DeleteLastErrorMessage",
  label = "US_DeleteLastErrorMessage",
  run = "in/out",
  desc = "Deletes the last error-message and returns a boolean value.\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it worked; false if it didn't",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1587] = {
  fname = "DeleteAllErrorMessages",
  label = "US_DeleteAllErrorMessages",
  run = "in/out",
  desc = "Deletes all error-messages and returns a boolean value.\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it worked; false if it didn't",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1588] = {
  fname = "DAEM",
  label = "US_DAEM",
  run = "in/out",
  desc = "Deletes all error-messages and returns a boolean value.\
\
this is like ultraschall.DeleteAllErrorMessages(), just shorter\
\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it worked; false if it didn't",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1589] = {
  fname = "GetLastErrorMessage2",
  label = "US_GetLastErrorMessage2",
  run = "in/out",
  desc = "Returns an array with the last \"count\" errormessages. 1 for the last, 2 for the last 2, etc.\
Set setread to false, if you want to retain the unread status of the error-messages.\
returns false in case of failure",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if it worked; false if it didn't",
    name = "RETVAL",
   },
   [2] = {
    type = "ARRAY",
    desc = "an array, that contains all values for the chosen number of errormessages.\
The fields are ErrorMessages[errornumber][x], where x stands for\
\"errcode\" - the errorcode of this function, default is -1 \
\"funcname\" - functionname\
\"parmname\" - name of the parameter, that caused the error\
\"errmsg\" - errormessage\
\"readstate\" - readstatus\
\"date\" - errorcreation date_time\
\"time\" - errorcreation timestamp in seconds, usually seconds since computer has been started",
    name = "ERRORMESSAGES",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the last few errors, you want to get returned. Use <a href=\"#CountErrorMessages\">CountErrorMessages</a> to get the current number of error-messages.",
    name = "COUNT",
   },
  },
  sp_api = "ultraschall",
 },
 [1590] = {
  fname = "CountErrorMessages",
  label = "US_CountErrorMessages",
  run = "in/out",
  desc = "Returns the current count of errormessages in the system available.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of errormessages currently available in the error-message-system. Includes read and unread ones.",
    name = "ERRORCOUNTER",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1591] = {
  fname = "ShowLastErrorMessage",
  label = "US_ShowLastErrorMessage",
  run = "in/out",
  desc = "Displays the last error message in a messagebox, the ReaScript-Console, the clipboard, if error is existing and unread.",
  out = {
   [1] = {
    type = "REQUESTED_ERROR_MESSAGE",
    desc = "the errormessage requested; ",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "allows to index the last x'ish message to be returned; nil or 0, the last one; 1, the one before the last one, etc.",
    opt = {
     use = false,
    },
    name = "DUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the target, where the error-message shall be output to\
0 or nil, target is a message box\
1, target is the ReaScript-Console\
2, target is the clipboard\
3, target is a returned string",
    opt = {
     use = false,
    },
    name = "TARGET",
   },
   [3] = {
    type = "INTEGER",
    desc = "if target is set to 3, you can set, which part of the error-messageshall be returned as returnvalue\
nil or 1, returns true, if error has happened, false, if error didn't happen\
2, returns the errcode\
3, returns the functionname which caused the error\
4, returns the parmname which caused the error\
5, returns the errormessage\
6, returns the lastreadtime\
7, returns the err_creation_date\
8, returns the err_creation_timestamp      ",
    opt = {
     use = false,
    },
    name = "MESSAGE_TYPE",
   },
  },
  sp_api = "ultraschall",
 },
 [1592] = {
  fname = "SLEM",
  label = "US_SLEM",
  run = "in/out",
  desc = "Displays the last error message in a messagebox, the ReaScript-Console, the clipboard, if error is existing and unread.\
\
Like ultraschall.ShowLastErrorMessage() but this is easier to type.\
Note: written without ultraschall. in the beginning!",
  out = {
   [1] = {
    type = "REQUESTED_ERROR_MESSAGE",
    desc = "the errormessage requested; ",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "allows to index the last x'ish message to be returned; nil or 0, the last one; 1, the one before the last one, etc.",
    opt = {
     use = false,
    },
    name = "DUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the target, where the error-message shall be output to\
0 or nil, target is a message box\
1, target is the ReaScript-Console\
2, target is the clipboard\
3, target is a returned string",
    opt = {
     use = false,
    },
    name = "TARGET",
   },
   [3] = {
    type = "INTEGER",
    desc = "if target is set to 3, you can set, which part of the error-messageshall be returned as returnvalue\
nil or 1, returns true, if error has happened, false, if error didn't happen\
2, returns the errcode\
3, returns the functionname which caused the error\
4, returns the parmname which caused the error\
5, returns the errormessage\
6, returns the lastreadtime\
7, returns the err_creation_date\
8, returns the err_creation_timestamp      ",
    opt = {
     use = false,
    },
    name = "MESSAGE_TYPE",
   },
  },
  sp_api = "ultraschall",
 },
 [1593] = {
  fname = "Separator",
  label = "US_Separator",
  run = "in/out",
  desc = "Contains the correct separator for your system. / on Mac, \\ on Windows. Use them, if you want to create windows and mac-compliant scripts that have file operations.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1594] = {
  fname = "Api_Path",
  label = "US_Api_Path",
  run = "in/out",
  desc = "Contains the current path of the Ultraschall-Api-folder ResourcePath/UserPlugins/ultraschall_api/",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1595] = {
  fname = "Api_InstallPath",
  label = "US_Api_InstallPath",
  run = "in/out",
  desc = "Contains the current path to the installation folder of the Ultraschall-Api(usually Resourcesfolder/UserPlugins)",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1596] = {
  fname = "GetLastErrorMessage_Funcname",
  label = "US_GetLastErrorMessage_Funcname",
  run = "in/out",
  desc = "Returns the last errormessage, a certain function added to the Error-Messaging-System.\
Sets read-state of the error-message to the date-time of accessing it.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the error within the Error-Messaging-System",
    name = "ERRORINDEX",
   },
   [2] = {
    type = "STRING",
    desc = "the parameter that produced the problem, or \"\" if no parameter was involved",
    name = "PARAMETERNAME",
   },
   [3] = {
    type = "STRING",
    desc = "the errormessage",
    name = "ERRORMESSAGE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the errorcode the error has",
    name = "ERRORCODE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose last error message you want to retrieve",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1597] = {
  fname = "CountErrorMessage_Funcname",
  label = "US_CountErrorMessage_Funcname",
  run = "in/out",
  desc = "Returns the number of available errormessages for functionname, existing in the Error-Messaging-System.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of errormessages functionname has left in the Error-Messaging-System",
    name = "NUMBER_OF_ERRORMESSAGES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose error messages you want to count",
    name = "FUNCTIONNAME",
   },
  },
  sp_api = "ultraschall",
 },
 [1598] = {
  fname = "GetErrorMessage_Funcname",
  label = "US_GetErrorMessage_Funcname",
  run = "in/out",
  desc = "Returns a specific errormessage specified by index, functionname added to the Error-Messaging-System.\
Sets read-state of the error-message to the date-time of accessing it.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the index of the error within the Error-Messaging-System",
    name = "ERRORINDEX",
   },
   [2] = {
    type = "STRING",
    desc = "the parameter that produced the problem, or \"\" if no parameter was involved",
    name = "PARAMETERNAME",
   },
   [3] = {
    type = "STRING",
    desc = "the errormessage",
    name = "ERRORMESSAGE",
   },
   [4] = {
    type = "INTEGER",
    desc = "the errorcode the error has",
    name = "ERRORCODE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, whose last error message you want to retrieve",
    name = "FUNCTIONNAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the index of the error-message for functionname",
    name = "INDEX",
   },
  },
  sp_api = "ultraschall",
 },
 [1599] = {
  fname = "ShowErrorMessagesInReascriptConsole",
  label = "US_ShowErrorMessagesInReascriptConsole",
  run = "in/out",
  desc = "Sets, if errormessages shall be shown in the ReaScript-Console immediately, when they happen.\
\
Will show functionname, parametername, errorcode plus errormessage and the time the error has happened.",
  out = {
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, show error-messages in the ReaScript-Console when they happen; false, don't show errormessages",
    name = "STATE",
   },
  },
  sp_api = "ultraschall",
 },
 [1600] = {
  fname = "WinterlySnowflakes",
  label = "US_WinterlySnowflakes",
  run = "in/out",
  desc = "Exchanges the gfx.update()-function with a variant, that displays falling snowflakes everytime it is called.\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "returns -1 in case of a'JS_Window_ListFind' n error; 1, in case of success",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, toggles falling snow on; false, toggles falling snow off",
    name = "TOGGLE",
   },
   [2] = {
    type = "NUMBER",
    desc = "the falling speed of the snowflakes, 1.3 is recommended",
    name = "FALLING_SPEED",
   },
   [3] = {
    type = "INTEGER",
    desc = "the number of falling snowflakes at the same time on screen; 2000 is recommended",
    name = "NUMBER_SNOWFLAKES",
   },
  },
  sp_api = "ultraschall",
 },
 [1601] = {
  fname = "PingMe",
  label = "US_PingMe",
  run = "in/out",
  desc = "Shows the current script and line of script-execution, optionally with a message.\
\
This is for debugging-purposes. For instance, if you want to know, if an if-statement is working as you expect it, just add\
PingMe() into that if-statement.\
It will show a message including linenumbers, when the if-statement is going through.\
\
You can also choose, whether to output the message into ReaConsole, Messagebox or clipboard(including culminating options)",
  out = {
   [1] = {
    type = "STRING",
    desc = "returns the pingmessage",
    name = "PINGMESSAGE",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "an optional message shown",
    opt = {
     use = false,
    },
    name = "MESSAGE",
   },
   [2] = {
    type = "INTEGER",
    desc = "0, don't show a message\
1, output the pingme-message into ReaScript-console\
2 or nil, show a messagebox\
3, output it into the clipboard\
4, add it to the end of the contents of the clipboard\
5, add it to the beginning of the contents of the clipboard",
    opt = {
     use = false,
    },
    name = "OUTPUTTARGET",
   },
  },
  sp_api = "ultraschall",
 },
 [1602] = {
  fname = "print2",
  label = "US_print2",
  run = "in/out",
  desc = "replaces Lua's own print-function. \
\
shows \\0-characters as .\
\
Converts all parametes given into string using tostring() and displays them as a MessageBox, separated by two spaces.",
  out = {
  },
  ins = {
   [1] = {
    type = "PARAMETER_1 TO",
    desc = "the parameters, that you want to have printed out",
    name = "PARAMETER_N",
   },
  },
  sp_api = "ultraschall",
 },
 [1603] = {
  fname = "print_alt",
  label = "US_print_alt",
  run = "in/out",
  desc = "replaces Lua's own print-function, that is quite useless in Reaper.\
\
shows \\0-characters as .\
\
like [print](#print), but separates the entries by a two spaced, not a newline",
  out = {
  },
  ins = {
   [1] = {
    type = "PARAMETER_1 TO",
    desc = "the parameters, that you want to have printed out",
    name = "PARAMETER_N",
   },
  },
  sp_api = "ultraschall",
 },
 [1604] = {
  fname = "print",
  label = "US_print",
  run = "in/out",
  desc = "replaces Lua's own print-function, that is quite useless in Reaper.\
\
displays \\0-characters as .\
\
Converts all parametes given into string using tostring() and displays them in the ReaScript-console, separated by a newline and ending with a newline.",
  out = {
  },
  ins = {
   [1] = {
    type = "PARAMETER_1 TO",
    desc = "the parameters, that you want to have printed out",
    name = "PARAMETER_N",
   },
  },
  sp_api = "ultraschall",
 },
 [1605] = {
  fname = "toboolean",
  label = "US_toboolean",
  run = "in/out",
  desc = "Converts the string \"value\" to a boolean, if applicable; means: if it contains either true or false in it.\
If it contains both or other characters(except spaces or tabs), it will not convert.\
Works basially like Lua's own tostring() or tonumber()-functions.\
\
Returns nil, if conversion isn't possible.\
\
Note: Unlike other ultraschall-api-functions, toboolean() has no ultraschall. in it's functionname!",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true or false, depending on the input variable value",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the value to be converted to a boolean. True and false can be upper-, lower and camelcase.",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1606] = {
  fname = "print3",
  label = "US_print3",
  run = "in/out",
  desc = "like [print](#print), but puts the parameters into the clipboard.\
\
Converts all parametes given into string using tostring() and puts them into the clipboard, with each parameter separated by two spaces.    \
Unlike print and print2, this does NOT end with a newline!\
\
Note: \\0-characters will be seen as string-termination, so strings may be truncated. Please replace \\0 with string.gsub, if you need to have the full string with all nil-values included.",
  out = {
  },
  ins = {
   [1] = {
    type = "PARAMETER_1 TO",
    desc = "the parameters, that you want to have put into the clipboard",
    name = "PARAMETER_N",
   },
  },
  sp_api = "ultraschall",
 },
 [1607] = {
  fname = "print_update",
  label = "US_print_update",
  run = "in/out",
  desc = "replaces Lua's own print-function, that is quite useless in Reaper.\
\
Converts all parametes given into string using tostring() and displays them in the ReaScript-console, separated by two spaces, ending with a newline.\
\
Shows \\0-characters as .\
\
This is like [print](#print), but clears console everytime before displaying the values. Good for status-display, that shall not scroll.",
  out = {
  },
  ins = {
   [1] = {
    type = "PARAMETER_1 TO",
    desc = "the parameters, that you want to have printed out",
    name = "PARAMETER_N",
   },
  },
  sp_api = "ultraschall",
 },
 [1608] = {
  fname = "CheckActionCommandIDFormat",
  label = "US_CheckActionCommandIDFormat",
  run = "in/out",
  desc = "Checks, whether an action command id is a valid commandid(which is a number) or a valid _action_command_id (which is a string with an _underscore in the beginning).\
\
Does not check, whether this action_command_id is a useable one, only if it's \"syntax\" is correct!\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, valid action_command_id; false, not a valid action_command_id",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "ACTIONCOMMAND_ID",
    desc = "the ActionCommandID you want to check; either a number or an action_command_id with an underscore at the beginning",
    name = "RETVAL",
   },
  },
  sp_api = "ultraschall",
 },
 [1609] = {
  fname = "RunCommand",
  label = "US_RunCommand",
  run = "in/out",
  desc = "runs a command by its ActionCommandID(instead of the CommandID-number)\
\
returns -1 in case of error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "-1, in case of error",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the ActionCommandID of the Command/Script/Action you want to run; must be either a number or the ActionCommandID beginning with an underscore _",
    name = "ACTIONCOMMAND_ID",
   },
  },
  sp_api = "ultraschall",
 },
 [1610] = {
  fname = "ConvertStringToBits",
  label = "US_ConvertStringToBits",
  run = "in/out",
  desc = "converts a string into its bit-representation and returns that as a handy table\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of bits in the string, -1, in case of an error",
    name = "NUMBER_OF_BITS",
   },
   [2] = {
    type = "ARRAY",
    desc = "the individual bits as a handy table",
    name = "BITARRAY",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string, which you want to convert into its bit representation",
    name = "MESSAGE",
   },
  },
  sp_api = "ultraschall",
 },
 [1611] = {
  fname = "ConvertBitsToString",
  label = "US_ConvertBitsToString",
  run = "in/out",
  desc = "converts a table of bit-representation into a string\
\
Every entry in the table must be either 0 or 1. If there are too few bits to fill up a byte, the missing bits will be seen as trailing 0-bits.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the converted bits as string-representation",
    name = "MESSAGE",
   },
  },
  ins = {
   [1] = {
    type = "ARRAY",
    desc = "the individual bits in a table, which will be converted into a string-representation\
each entry in the table must be either 0 or 1; missing bits at the end(usually nil) will be seen as 0",
    name = "BITARRAY",
   },
  },
  sp_api = "ultraschall",
 },
 [1612] = {
  fname = "deprecated",
  label = "US_deprecated",
  run = "in/out",
  desc = "If you have a 3rd-party function added to Ultraschall-API, which you want to deprecate, use this \
function to show a warning message, if that function is used.\
\
It will be shown once when running the script, after (re-)start of Reaper.\
\
That way, you can tell scripters, whether they need to update their scripts using newer/better functions.\
This is probably shown first to the user, who knows that way a potential problem and can tell the scripter about that.\
\
If there is a line \"Author: authorname\" in the file(as usual for ReaPack-compatible scripts), it will show the scripter's name in the dialog.\
",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, defer-instance is running; false, defer-instance isn't running",
    name = "RETVAL",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1613] = {
  fname = "FloatCompare",
  label = "US_FloatCompare",
  run = "in/out",
  desc = "Compares two floatvalues and allows to set the precision to copmare against.\
\
So, if you want to compare 5.1 and 5.2, using precision=0.2 returns true(is equal), precision=0.1 returns false(isn't equal).\
\
Returns nil in case of failure.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, numbers are equal; false, numbers aren't equal",
    name = "RETVAL",
   },
   [2] = {
    type = "NUMBER",
    desc = "the difference between numbers a and b",
    name = "DIFF",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the first float-number to compare",
    name = "A",
   },
   [2] = {
    type = "NUMBER",
    desc = "the second float-number to compare",
    name = "B",
   },
   [3] = {
    type = "NUMBER",
    desc = "the precision of the fraction, like 0.1 or 0.0063",
    name = "PRECISION",
   },
  },
  sp_api = "ultraschall",
 },
 [1614] = {
  fname = "ToClip",
  label = "US_ToClip",
  run = "in/out",
  desc = "Puts a string into clipboard.\
\
\\0-characters will be seen as string-termination, so if you want to put strings into clipboard containing them, you need to replace them first or your string might be truncated",
  out = {
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string, which you want to put into the clipboard",
    name = "TOCLIPSTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1615] = {
  fname = "FromClip",
  label = "US_FromClip",
  run = "in/out",
  desc = "Gets a string from clipboard.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the string-content from the clipboard",
    name = "CLIPBOARD_STRING",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1616] = {
  fname = "EscapeMagicCharacters_String",
  label = "US_EscapeMagicCharacters_String",
  run = "in/out",
  desc = "Escapes the magic characters(needed for pattern matching), so the string can be fed as is into string.match-functions.\
\9That way, characters like . or - or * etc do not trigger pattern-matching behavior but are used as regular . or - or * etc.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "STRING",
    desc = "the string with all magic characters escaped",
    name = "ESCAPED_STRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string, whose magic characters you want to escape for future use",
    name = "SOURCESTRING",
   },
  },
  sp_api = "ultraschall",
 },
 [1617] = {
  fname = "ActionsList_GetSelectedActions",
  label = "US_ActionsList_GetSelectedActions",
  run = "in/out",
  desc = "returns the selected entries from the actionlist, when opened.\
\
The order of the tables of found actions, ActionCommandIDs and ToggleStates is the same in all of the three tables.\
They also reflect the order of userselection in the ActionList itself from top to bottom of the ActionList.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of selected actions; -1, if not opened",
    name = "NUM_FOUND_ACTIONS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the section, from which the selected actions are from",
    name = "SECTIONID",
   },
   [3] = {
    type = "STRING",
    desc = "the name of the selected section",
    name = "SECTIONNAME",
   },
   [4] = {
    type = "TABLE",
    desc = "the texts of the found actions as a handy table",
    name = "SELECTED_ACTIONS",
   },
   [5] = {
    type = "TABLE",
    desc = "the ActionCommandIDs of the found actions as a handy table; all of them are strings, even the numbers, but can be converted using Reaper's own function reaper.NamedCommandLookup",
    name = "CMDIDS",
   },
   [6] = {
    type = "TABLE",
    desc = "the current toggle-states of the selected actions; 1, on; 0, off; -1, no such toggle state available",
    name = "TOGGLESTATES",
   },
   [7] = {
    type = "TABLE",
    desc = "the shortcuts of the action as a handy table; separated by \", \"",
    name = "SHORTCUTS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1618] = {
  fname = "Gmem_GetCurrentAttachedName",
  label = "US_Gmem_GetCurrentAttachedName",
  run = "in/out",
  desc = "returns nil if no gmem had been attached since addition of Ultraschall-API to the current script",
  out = {
   [1] = {
    type = "STRING",
    desc = "the name of the currently attached gmem",
    name = "CURRENT_GMEM_ATTACHNAME",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1619] = {
  fname = "ActionsList_GetAllActions",
  label = "US_ActionsList_GetAllActions",
  run = "in/out",
  desc = "returns the all actions from the actionlist, when opened.\
\
The order of the tables of found actions, ActionCommandIDs and ToggleStates is the same in all of the three tables.\
They also reflect the order of userselection in the ActionList itself from top to bottom of the ActionList.\
\
returns -1 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the number of found actions; -1, if not opened",
    name = "NUM_FOUND_ACTIONS",
   },
   [2] = {
    type = "INTEGER",
    desc = "the id of the section, from which the found actions are from",
    name = "SECTIONID",
   },
   [3] = {
    type = "STRING",
    desc = "the name of the found section",
    name = "SECTIONNAME",
   },
   [4] = {
    type = "TABLE",
    desc = "the texts of the found actions as a handy table",
    name = "ACTIONS",
   },
   [5] = {
    type = "TABLE",
    desc = "the ActionCommandIDs of the found actions as a handy table; all of them are strings, even the numbers, but can be converted using Reaper's own function reaper.NamedCommandLookup",
    name = "CMDIDS",
   },
   [6] = {
    type = "TABLE",
    desc = "the current toggle-states of the found actions; 1, on; 0, off; -1, no such toggle state available",
    name = "TOGGLESTATES",
   },
   [7] = {
    type = "TABLE",
    desc = "the shortcuts of the action as a handy table; separated by \", \"",
    name = "SHORTCUTS",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1620] = {
  fname = "BringReaScriptConsoleToFront",
  label = "US_BringReaScriptConsoleToFront",
  run = "in/out",
  desc = "Brings Reaper's ReaScriptConsole-window to the front, when it's opened.",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1621] = {
  fname = "EditReaScript",
  label = "US_EditReaScript",
  run = "in/out",
  desc = "Opens a script in Reaper's ReaScript-IDE.\
\
If the file does not exist yet, it will try to create it. If parameter filename doesn't contain a valid directory, it will try to create the script in the Scripts-folder of Reaper.\
\
Setting filename=nil will open the last one edited using this function.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, opening was successful; false, opening was unsuccessful",
    name = "RETVAL",
   },
   [2] = {
    type = "INTEGER",
    desc = "the command-id of the script, when it gets newly created; nil, if script wasn't added",
    opt = {
     use = false,
    },
    name = "COMMAND_ID",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, a new script had been created; false, the script already existed",
    name = "CREATED_NEW_SCRIPT",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the filename of the new reascript-file to create(add .lua or .py or .eel to select the language).\
nil, opens the last ReaScript-file you opened with this function",
    opt = {
     use = false,
    },
    name = "FILENAME",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, add Ultraschall-API-call into the script(only in newly created ones!); false or nil, just open a blank script",
    opt = {
     use = false,
    },
    name = "ADD_ULTRASCHALL_API",
   },
   [3] = {
    type = "INTEGER",
    desc = "the section, into which you want to add the script\
nil, don't add, only open the script in IDE\
0, Main\
100, Main (alt recording) Note: If you already added to main(section 0), this function automatically adds the script to Main(alt) as well.\
32060, MIDI Editor\
32061, MIDI Event List Editor\
32062, MIDI Inline Editor\
32063, Media Explorer",
    opt = {
     use = false,
    },
    name = "ADD_TO_ACTIONLIST_SECTION",
   },
   [4] = {
    type = "INTEGER",
    desc = "x-position of the ide-window in pixels; nil, use the last one used",
    opt = {
     use = false,
    },
    name = "X_POS",
   },
   [5] = {
    type = "INTEGER",
    desc = "y-position of the ide-window in pixels; nil, use the last one used",
    opt = {
     use = false,
    },
    name = "Y_POS",
   },
   [6] = {
    type = "INTEGER",
    desc = "width of the ide-window in pixels; nil, use the last one used",
    opt = {
     use = false,
    },
    name = "WIDTH",
   },
   [7] = {
    type = "INTEGER",
    desc = "height of the ide-window in pixels; nil, use the last one used",
    opt = {
     use = false,
    },
    name = "HEIGHT",
   },
   [8] = {
    type = "BOOLEAN",
    desc = "nil, use last used settings\
0, show regularly\
1, dock the window",
    opt = {
     use = false,
    },
    name = "SHOWSTATE",
   },
   [9] = {
    type = "INTEGER",
    desc = "sets the size of the watchlist, from 80 to screenwidth-80",
    opt = {
     use = false,
    },
    name = "WATCHLIST_SIZE",
   },
   [10] = {
    type = "INTEGER",
    desc = "sets the size of the Name-row in the watchlist",
    opt = {
     use = false,
    },
    name = "WATCHLIST_SIZE_ROW1",
   },
   [11] = {
    type = "INTEGER",
    desc = "sets the size of the Value-row in the watchlist",
    opt = {
     use = false,
    },
    name = "WATCHLIST_SIZE_ROW2",
   },
   [12] = {
    type = "STRING",
    desc = "a string that shall be added to the beginning of the new script, when a script is newly created",
    opt = {
     use = false,
    },
    name = "DEFAULT_SCRIPT_CONTENT",
   },
  },
  sp_api = "ultraschall",
 },
 [1622] = {
  fname = "SFEM",
  label = "US_SFEM",
  run = "in/out",
  desc = "Displays the first error message in a messagebox, the ReaScript-Console, the clipboard, if error is existing and unread.",
  out = {
   [1] = {
    type = "REQUESTED_ERROR_MESSAGE",
    desc = "the errormessage requested; ",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "allows to index the last x'ish message to be returned; nil or 0, the last one; 1, the one before the last one, etc.",
    opt = {
     use = false,
    },
    name = "DUNK",
   },
   [2] = {
    type = "INTEGER",
    desc = "the target, where the error-message shall be output to\
0 or nil, target is a message box\
1, target is the ReaScript-Console\
2, target is the clipboard\
3, target is a returned string",
    opt = {
     use = false,
    },
    name = "TARGET",
   },
   [3] = {
    type = "INTEGER",
    desc = "if target is set to 3, you can set, which part of the error-messageshall be returned as returnvalue\
nil or 1, returns true, if error has happened, false, if error didn't happen\
2, returns the errcode\
3, returns the functionname which caused the error\
4, returns the parmname which caused the error\
5, returns the errormessage\
6, returns the lastreadtime\
7, returns the err_creation_date\
8, returns the err_creation_timestamp      ",
    opt = {
     use = false,
    },
    name = "MESSAGE_TYPE",
   },
  },
  sp_api = "ultraschall",
 },
 [1623] = {
  fname = "RFR",
  label = "US_RFR",
  run = "in/out",
  desc = "returns only the first x return-values, as given by length.\
\
You can put the return-values of another function and just get the first x ones. So if the function returns 10 returnvalues, \
but you only need the first two, set length=2 and add the function(with the 10 returnvalues) after it as second parameter.\
  \
For example:\
\
integer r, integer g, integer b = reaper.ColorFromNative(integer col)\
\
returns three colorvalues. If you only want the first one(r), use it this way:\
\
r=RFR(1, reaper.ColorFromNative(12739))\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "VARIOUS",
    desc = "the requested first-n returnvalues",
    name = "...",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the first return-values to return",
    name = "LENGTH",
   },
   [2] = {
    type = "VARIOUS",
    desc = "further parameters, which can be multiple values or just the return-values of another function.",
    name = "...",
   },
  },
  sp_api = "ultraschall",
 },
 [1624] = {
  fname = "RLR",
  label = "US_RLR",
  run = "in/out",
  desc = "returns only the last x return-values, as given by length.\
\
You can put the return-values of another function and just get the last x ones. So if the function returns 10 returnvalues, \
but you only need the last two, set length=2 and add the function(with the 10 returnvalues) after it as second parameter.\
\
For example:\
\
integer r, integer g, integer b = reaper.ColorFromNative(integer col)\
\
returns three colorvalues. If you only want the last one(b), use it this way:\
\
b=RLR(1, reaper.ColorFromNative(12739))\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "VARIOUS",
    desc = "the requested last-n returnvalues",
    name = "...",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the number of the last return-values to return",
    name = "LENGTH",
   },
   [2] = {
    type = "VARIOUS",
    desc = "further parameters, which can be multiple values or just the return-values of another function.",
    name = "...",
   },
  },
  sp_api = "ultraschall",
 },
 [1625] = {
  fname = "RRR",
  label = "US_RRR",
  run = "in/out",
  desc = "returns only the x return-values between position and position+length.\
\
You can put the return-values of another function and just get the ones between position and position+length. So if the function returns 10 returnvalues, \
but you only need the third through the fifth, set position=3 and length=3 and add the function(with the 10 returnvalues) after it as third parameter.\
\
For example:\
\
integer r, integer g, integer b = reaper.ColorFromNative(integer col)\
\
returns three colorvalues. If you only want the middle one(g), use it this way:\
\
g=RRR(2, 1, reaper.ColorFromNative(12739))\
   \
returns nil in case of an error",
  out = {
   [1] = {
    type = "VARIOUS",
    desc = "the requested n returnvalues between position and length+position",
    name = "...",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the first return-value to return",
    name = "POSITION",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of return-values to return(position+length)",
    name = "LENGTH",
   },
   [3] = {
    type = "VARIOUS",
    desc = "further parameters, which can be multiple values or just the return-values of another function.",
    name = "...",
   },
  },
  sp_api = "ultraschall",
 },
 [1626] = {
  fname = "has_control",
  label = "US_has_control",
  run = "in/out",
  desc = "returns, if a string has control-characters",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if yes; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the value to check for control-characters",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1627] = {
  fname = "has_alphanumeric",
  label = "US_has_alphanumeric",
  run = "in/out",
  desc = "returns, if a string has alphanumeric-characters",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if yes; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the value to check for alphanumeric-characters",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1628] = {
  fname = "has_letter",
  label = "US_has_letter",
  run = "in/out",
  desc = "returns, if a string has letter-characters",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if yes; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the value to check for letter-characters",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1629] = {
  fname = "has_digits",
  label = "US_has_digits",
  run = "in/out",
  desc = "returns, if a string has digit-characters",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if yes; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the value to check for digit-characters",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1630] = {
  fname = "has_printables",
  label = "US_has_printables",
  run = "in/out",
  desc = "returns, if a string has printable-characters",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if yes; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the value to check for printable-characters",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1631] = {
  fname = "has_uppercase",
  label = "US_has_uppercase",
  run = "in/out",
  desc = "returns, if a string has uppercase-characters",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if yes; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the value to check for uppercase-characters",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1632] = {
  fname = "has_lowercase",
  label = "US_has_lowercase",
  run = "in/out",
  desc = "returns, if a string has lowercase-characters",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if yes; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the value to check for lowercase-characters",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1633] = {
  fname = "has_space",
  label = "US_has_space",
  run = "in/out",
  desc = "returns, if a string has space-characters, like tab or space",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if yes; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the value to check for space-characters",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1634] = {
  fname = "has_hex",
  label = "US_has_hex",
  run = "in/out",
  desc = "returns, if a string has hex-characters",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, if yes; false, if not",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the value to check for hex-characters",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1635] = {
  fname = "utf8_sub",
  label = "US_utf8_sub",
  run = "in/out",
  desc = "returns a subset of a utf8-encoded-string.\
\
if startoffset and/or endoffset are negative, it is counted from the end of the string.\
\
Works basically like string.sub()",
  out = {
   [1] = {
    type = "STRING",
    desc = "the returned string",
    name = "RET_STRING",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the value to get the utf8-substring from",
    name = "VALUE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the startoffset, from which to return the substring; negative offset counts from the end of the string",
    name = "STARTOFFSET",
   },
   [3] = {
    type = "INTEGER",
    desc = "the endoffset, to which to return the substring; negative offset counts from the end of the string",
    name = "ENDOFFSET",
   },
  },
  sp_api = "ultraschall",
 },
 [1636] = {
  fname = "utf8_len",
  label = "US_utf8_len",
  run = "in/out",
  desc = "returns the length of an utf8-encoded string\
\
Works basically like string.len()",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the length of the utf8-encoded string",
    name = "LENGTH",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the value to get the length of the utf8-encoded-string",
    name = "VALUE",
   },
  },
  sp_api = "ultraschall",
 },
 [1637] = {
  fname = "Debug_ShowCurrentContext",
  label = "US_Debug_ShowCurrentContext",
  run = "in/out",
  desc = "When called, this function returns, in which function, sourcefile and linenumber it was called.\
Good for debugging purposes.",
  out = {
   [1] = {
    type = "STRING",
    desc = "the name of the function, in which Debug_ShowCurrentContext was called",
    name = "FUNCTIONNAME",
   },
   [2] = {
    type = "INTEGER",
    desc = "the linenumber, in which Debug_ShowCurrentContext was called",
    name = "LINENUMBER",
   },
   [3] = {
    type = "STRING",
    desc = "the filename, in which Debug_ShowCurrentContext was called",
    name = "SOURCEFILENAME_WITH_PATH",
   },
   [4] = {
    type = "NUMBER",
    desc = "precise timestamp to differentiate between two Debug_ShowCurrentContext-calls",
    name = "TIMESTAMP",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "0, don't show context; 1, show context as messagebox; 2, show context in console; 3, clear console and show context in console",
    name = "SHOW",
   },
  },
  sp_api = "ultraschall",
 },
 [1638] = {
  fname = "ConvertIniStringToTable",
  label = "US_ConvertIniStringToTable",
  run = "in/out",
  desc = "this converts a string in ini-format into a table\
\
the table is in the format:\
    ini_entries[\"sectionname\"][\"keyname\"]=value\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "TABLE",
    desc = "the entries of the ini-file as a table",
    name = "INI_ENTRIES",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the string that contains an ini-file-contents",
    name = "INI_STRING",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, convert values who are valid numbers to numbers; false or nil, keep all values as strings",
    name = "CONVERT_NUMBERS_TO_NUMBERS",
   },
  },
  sp_api = "ultraschall",
 },
 [1639] = {
  fname = "GFX_DrawThickRoundRect",
  label = "US_GFX_DrawThickRoundRect",
  run = "in/out",
  desc = "draws a round-rectangle with a custom thickness.\
\
You shouldn't redraw with it too often, as it eats many ressources\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, drawing was successful; false, drawing wasn't successful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the x position of the rectangle",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "the y position of the rectangle",
    name = "Y",
   },
   [3] = {
    type = "INTEGER",
    desc = "the width of the rectangle",
    name = "W",
   },
   [4] = {
    type = "INTEGER",
    desc = "the height of the rectangle",
    name = "H",
   },
   [5] = {
    type = "NUMBER",
    desc = "the thickness of the rectangle's edges",
    name = "THICKNESS",
   },
   [6] = {
    type = "NUMBER",
    desc = "the angle of the rectangle's corners",
    name = "ROUNDNESS",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, draw antialiased; false, simply draw aliased",
    name = "ANTIALIAS",
   },
  },
  sp_api = "ultraschall",
 },
 [1640] = {
  fname = "GFX_BlitFramebuffer",
  label = "US_GFX_BlitFramebuffer",
  run = "in/out",
  desc = "blits a framebuffer at position 0,0. If the gfx-window is smaller than the contents of the framebuffer, it will resize it before blitting to window size, retaining the correct aspect-ratio.\
\
Mostly intended for debugging-purposes, when you want to track, if a certain framebuffer contains, what you expect it to contain.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, drawing was successful; false, drawing wasn't successful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the indexnumber of the framebuffer to blit; 0 to 1023; -1 is the displaying framebuffer",
    name = "FRAMEBUFFERIDX",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, displays the id-number of the framebuffer in the top-left corner; false, does not display framebuffer-idx",
    opt = {
     use = false,
    },
    name = "SHOWIDX",
   },
  },
  sp_api = "ultraschall",
 },
 [1641] = {
  fname = "GFX_Init",
  label = "US_GFX_Init",
  run = "in/out",
  desc = "Opens a new graphics window and returns its HWND-windowhandler object.",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "1.0, if window is opened",
    name = "RETVAL",
   },
   [2] = {
    type = "HWND",
    desc = "the window-handler of the newly created window; can be used with JS_Window_xxx-functions of the JS-extension-plugin",
    name = "HWND",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the name of the window, which will be shown in the title of the window",
    name = "\"NAME\"",
   },
   [2] = {
    type = "INTEGER",
    desc = "the width of the window; minmum is 50",
    opt = {
     use = false,
    },
    name = "WIDTH",
   },
   [3] = {
    type = "INTEGER",
    desc = "the height of the window; minimum is 16",
    opt = {
     use = false,
    },
    name = "HEIGHT",
   },
   [4] = {
    type = "INTEGER",
    desc = "&1=0, undocked; &1=1, docked",
    opt = {
     use = false,
    },
    name = "DOCKSTATE",
   },
   [5] = {
    type = "INTEGER",
    desc = "x-position of the window in pixels; minimum is -80; nil, to center it horizontally",
    opt = {
     use = false,
    },
    name = "XPOS",
   },
   [6] = {
    type = "INTEGER",
    desc = "y-position of the window in pixels; minimum is -15; nil, to center it vertically",
    opt = {
     use = false,
    },
    name = "YPOS",
   },
  },
  sp_api = "ultraschall",
 },
 [1642] = {
  fname = "GFX_GetWindowHWND",
  label = "US_GFX_GetWindowHWND",
  run = "in/out",
  desc = "Returns the HWND of the currently opened gfx-window. You need to use ultraschall.GFX_Init(), otherwise \
it will contain the message \"Please, use ultraschall.GFX_Init() for window-creation, not gfx.init(!), to retrieve the HWND of the gfx-window.\"",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the opened gfx-window; will contain a helpermessage, if you didn't use ultraschall.GFX_Init() for window creation.",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1643] = {
  fname = "GFX_GetMouseCap",
  label = "US_GFX_GetMouseCap",
  run = "in/out",
  desc = "Checks clickstates and mouseclick/wheel-behavior, since last time calling this function and returns their states.\
Allows you to get click, doubleclick, dragging, including the appropriate coordinates and mousewheel-states.\
\
Much more convenient, than fiddling around with gfx.mouse_cap\
\
Note: After doubleclicked, this will not return mouse-clicked-states, until the mouse-button is released. So any mouse-clicks during that can be only gotten from the retval mouse_cap.\
      This is to prevent automatic mouse-dragging after double-clicks.",
  out = {
   [1] = {
    type = "STRING",
    desc = "\"\", if not clicked, \"CLK\" for clicked and \"FirstCLK\", if the click is a first-click.",
    name = "CLICKSTATE",
   },
   [2] = {
    type = "STRING",
    desc = "either \"\" for not clicked, \"CLK\" for clicked, \"DBLCLK\" for doubleclick or \"DRAG\" for dragging",
    name = "SPECIFIC_CLICKSTATE",
   },
   [3] = {
    type = "INTEGER",
    desc = "the mouse_cap, a bitfield of mouse and keyboard modifier states\
  1: left mouse button\
  2: right mouse button\
  4: Control key\
  8: Shift key\
  16: Alt key\
  32: Windows key\
  64: middle mouse button",
    name = "MOUSE_CAP",
   },
   [4] = {
    type = "INTEGER",
    desc = "the x position, when the mouse has been clicked the last time",
    name = "CLICK_X",
   },
   [5] = {
    type = "INTEGER",
    desc = "the y position, when the mouse has been clicked the last time",
    name = "CLICK_Y",
   },
   [6] = {
    type = "INTEGER",
    desc = "the x-position of the mouse-dragging-coordinate; is like click_x for non-dragging mousestates",
    name = "DRAG_X",
   },
   [7] = {
    type = "INTEGER",
    desc = "the y-position of the mouse-dragging-coordinate; is like click_y for non-dragging mousestates",
    name = "DRAG_Y",
   },
   [8] = {
    type = "INTEGER",
    desc = "the mouse_wheel-delta, since the last time calling this function",
    name = "MOUSE_WHEEL",
   },
   [9] = {
    type = "INTEGER",
    desc = "the mouse_horizontal-wheel-delta, since the last time calling this function",
    name = "MOUSE_HWHEEL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the timeframe, in which a second click is recognized as double-click, in defer-cycles. 30 is approximately 1 second; nil, will use 15(default)",
    opt = {
     use = false,
    },
    name = "DOUBLECLICK_WAIT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the timeframe, after which a mouseclick without moving the mouse is recognized as dragging, in defer-cycles. 30 is approximately 1 second; nil, will use 5(default)",
    opt = {
     use = false,
    },
    name = "DRAG_WAIT",
   },
  },
  sp_api = "ultraschall",
 },
 [1644] = {
  fname = "GFX_SetFont",
  label = "US_GFX_SetFont",
  run = "in/out",
  desc = "Sets the font of the gfx-window.\
\
As Mac and Windows have different visible font-sizes for the same font-size, this function adapts the font-size correctly(unlike Reaper's own native gfx.setfont-function).\
\
returns false in case of an error",
  out = {
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the font-id; idx=0 for default bitmapped font, no configuration is possible for this font. idx=1..16 for a configurable font",
    name = "FONTINDEX",
   },
   [2] = {
    type = "STRING",
    desc = "the name of the font",
    name = "FONT",
   },
   [3] = {
    type = "INTEGER",
    desc = "the size of the font",
    name = "SIZE",
   },
   [4] = {
    type = "STRING",
    desc = "a string, which holds the desired font-styles. You can combine multiple ones, up to 4.\
The following are valid:\
B - bold\
i - italic\
o - white outline\
r - blurred\
s - sharpen\
u - underline\
v - inverse",
    name = "FLAGSTR",
   },
  },
  sp_api = "ultraschall",
 },
 [1645] = {
  fname = "GFX_BlitImageCentered",
  label = "US_GFX_BlitImageCentered",
  run = "in/out",
  desc = "Blits a centered image at the position given by parameter x and y. That means, the center of the image will be at x and y.\
\
All the rest basically works like the regular gfx.blit-function.\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, blitting was successful; false, blitting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the source-image/framebuffer to blit; -1 to 1023; -1 for the currently displayed framebuffer.",
    name = "SOURCE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the x-position of the center of the image",
    name = "X",
   },
   [3] = {
    type = "INTEGER",
    desc = "the y-position of the center of the image",
    name = "Y",
   },
   [4] = {
    type = "NUMBER",
    desc = "the scale-factor; 1, for normal size; smaller or bigger than 1 make image smaller or bigger\
has no effect, when destx, desty, destw, desth are given",
    name = "SCALE",
   },
   [5] = {
    type = "NUMBER",
    desc = "the rotation-factor; 0 to 6.28; 3.14 for 180 degrees.",
    name = "ROTATION",
   },
   [6] = {
    type = "NUMBER",
    desc = "the x-coordinate-offset in the source-image",
    opt = {
     use = false,
    },
    name = "SRCX",
   },
   [7] = {
    type = "NUMBER",
    desc = "the y-coordinate-offset in the source-image",
    opt = {
     use = false,
    },
    name = "SRCY",
   },
   [8] = {
    type = "NUMBER",
    desc = "the width-offset in the source-image",
    opt = {
     use = false,
    },
    name = "SRCW",
   },
   [9] = {
    type = "NUMBER",
    desc = "the height-offset in the source-image",
    opt = {
     use = false,
    },
    name = "SRCH",
   },
   [10] = {
    type = "INTEGER",
    desc = "the x-coordinate of the blitting destination",
    opt = {
     use = false,
    },
    name = "DESTX",
   },
   [11] = {
    type = "INTEGER",
    desc = "the y-coordinate of the blitting destination",
    opt = {
     use = false,
    },
    name = "DESTY",
   },
   [12] = {
    type = "INTEGER",
    desc = "the width of the blitting destination; may lead to stretched images",
    opt = {
     use = false,
    },
    name = "DESTW",
   },
   [13] = {
    type = "INTEGER",
    desc = "the height of the blitting destination; may lead to stretched images",
    opt = {
     use = false,
    },
    name = "DESTH",
   },
   [14] = {
    type = "NUMBER",
    desc = "influences rotation",
    opt = {
     use = false,
    },
    name = "ROTXOFFS",
   },
   [15] = {
    type = "NUMBER",
    desc = "influences rotation",
    opt = {
     use = false,
    },
    name = "ROTYOFFS",
   },
  },
  sp_api = "ultraschall",
 },
 [1646] = {
  fname = "GFX_GetDropFile",
  label = "US_GFX_GetDropFile",
  run = "in/out",
  desc = "returns the files drag'n'dropped into a gfx-window, including the mouseposition within the gfx-window, where the files have been dropped.\
\
if changed==true, then the filelist is updated, otherwise this function returns the last dropped files again.\
Note: when the same files will be dropped, changed==true will also be dropped with only the mouse-position updated.\
That way, dropping the same files in differen places is recognised by this function.\
\
Call repeatedly in every defer-cycle to get the latest files and coordinates.\
\
Important: Don't use Reaper's own gfx.dropfile while using this, as this could intefere with this function.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, new files have been dropped since last time calling this function; false, no new files have been dropped",
    name = "CHANGED",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of dropped files; -1, if no files have beend dropped at all",
    name = "NUM_DROPPED_FILES",
   },
   [3] = {
    type = "ARRAY",
    desc = "an array with all filenames+path of the dropped files",
    name = "DROPPED_FILES",
   },
   [4] = {
    type = "INTEGER",
    desc = "the x-mouseposition within the gfx-window, where the files have been dropped; -10000, if no files have been dropped yet",
    name = "DROP_MOUSEPOSITION_X",
   },
   [5] = {
    type = "INTEGER",
    desc = "the y-mouseposition within the gfx-window, where the files have been dropped; -10000, if no files have been dropped yet",
    name = "DROP_MOUSEPOSITION_Y",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1647] = {
  fname = "Lokasenna_LoadGuiLib_v2",
  label = "US_Lokasenna_LoadGuiLib_v2",
  run = "in/out",
  desc = "loads Lokasenna's Gui Lib v2 into the current script, so you can make your own guis.\
\
This prevents the need to use dofile, require, loadfile to load Lokasenna's Gui Lib, so you can code the actual Gui right after calling this function.\
\
It gives you access to all classes immediately.\
\
It uses a version of Lokasenna's Gui Lib v2 included with Ultraschall-API, so it doesn't get into conflict with other installed versions on your system.\
\
You can find the documentation for it <a href=\"../3rd_party_modules/Lokasenna_GUI%20v2/Developer%20Tools/Documentation.html\">at this location.</a>",
  out = {
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1648] = {
  fname = "GFX_DrawEmbossedSquare",
  label = "US_GFX_DrawEmbossedSquare",
  run = "in/out",
  desc = "draws an embossed rectangle, optionally with a background-color\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, drawing was successful; false, drawing wasn't successful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the x position of the rectangle",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "the y position of the rectangle",
    name = "Y",
   },
   [3] = {
    type = "INTEGER",
    desc = "the width of the rectangle",
    name = "W",
   },
   [4] = {
    type = "INTEGER",
    desc = "the height of the rectangle",
    name = "H",
   },
   [5] = {
    type = "INTEGER",
    desc = "the red-color of the background-rectangle; set to nil for no background-color",
    opt = {
     use = false,
    },
    name = "RGB",
   },
   [6] = {
    type = "INTEGER",
    desc = "the green-color of the background-rectangle; set to nil for no background-color/uses rbg if gbg and bbg are set to nil",
    opt = {
     use = false,
    },
    name = "GBG",
   },
   [7] = {
    type = "INTEGER",
    desc = "the blue-color of the background-rectangle; set to nil for no background-color/uses rbg if gbg and bbg are set to nil",
    opt = {
     use = false,
    },
    name = "BBG",
   },
   [8] = {
    type = "INTEGER",
    desc = "the red-color of the embossed-rectangle; nil, to use 1",
    opt = {
     use = false,
    },
    name = "R",
   },
   [9] = {
    type = "INTEGER",
    desc = "the green-color of the embossed-rectangle; nil, to use 1",
    opt = {
     use = false,
    },
    name = "G",
   },
   [10] = {
    type = "INTEGER",
    desc = "the blue-color of the embossed-rectangle; nil, to use 1",
    opt = {
     use = false,
    },
    name = "B",
   },
  },
  sp_api = "ultraschall",
 },
 [1649] = {
  fname = "GFX_GetChar",
  label = "US_GFX_GetChar",
  run = "in/out",
  desc = "gets all characters from the keyboard-queue of gfx.getchar as a handy table.\
\
the returned table character_queue is of the following format:\
\
    character_queue[index][\"Code\"] - the character-code\
    character_queue[index][\"Ansi\"] - the character-code converted into Ansi\
    character_queue[index][\"UTF8\"] - the character-code converted into UTF8\
  \
When readable_characters=true, the entries of the character_queue for Ansi and UTF8 will hold readable strings for non-printable characters, like:\
  \"ins \", \"del \", \"home\", \"F1  \"-\"F12 \", \"tab \", \"esc \", \"pgup\", \"pgdn\", \"up  \", \"down\", \"left\", \"rght\", \"bspc\", \"ente\"\
  \
You can optionally let this function manage clipboard. So hitting Ctrl+V will get put the content of the clipboard into the character_queue of Ansi/UTF8 in the specific position of the character-queue,\
while hitting Ctrl+C will put the contents of the parameter to_clipboard into the clipboard in this case.\
\
Retval first_typed_character behaves basically like the returned character of Reaper's native function gfx.getchar()\
\
returns -2 in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the character-code of the first character found",
    name = "FIRST_TYPED_CHARACTER",
   },
   [2] = {
    type = "INTEGER",
    desc = "the number of characters in the queue",
    name = "NUM_CHARACTERS",
   },
   [3] = {
    type = "TABLE",
    desc = "the characters in the queue, within a table(see description for more details)",
    name = "CHARACTER_QUEUE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "a specific character-code to check for(will ignore all other keys)\
65536 queries special flags, like: &amp;1 (supported in this script), &amp;2=window has focus, &amp;4=window is visible  ",
    opt = {
     use = false,
    },
    name = "CHARACTER",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, when user hits ctrl+v/cmd+v the character-queue will hold clipboard-contents in this position\
false, treat ctrl+v/cmd+v as regular typed character",
    opt = {
     use = false,
    },
    name = "MANAGE_CLIPBOARD",
   },
   [3] = {
    type = "STRING",
    desc = "if get_paste_from_clipboard=true and user hits ctrl+c/cmd+c, the contents of this variable will be put into the clipboard",
    opt = {
     use = false,
    },
    name = "TO_CLIPBOARD",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, make non-printable characters readable; false, keep them in original state",
    opt = {
     use = false,
    },
    name = "READABLE_CHARACTERS",
   },
  },
  sp_api = "ultraschall",
 },
 [1650] = {
  fname = "GFX_GetTextLayout",
  label = "US_GFX_GetTextLayout",
  run = "in/out",
  desc = "Returns a font_layout-value that can be used for the parameter flags for the function gfx.drawstr.\
\
Note: as per limitation of Reaper, you can only have up to 4 font_layout-parameters at the same time.\
\
Some combinations do not work together, so you need to experiment.",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the returned value you can use for gfx.drawstr for its flags-parameter",
    name = "FONT_LAYOUT",
   },
  },
  ins = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, sets the font_layout to bold; false, no boldness",
    opt = {
     use = false,
    },
    name = "BOLD",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, sets the font_layout to italic; false, no italic",
    opt = {
     use = false,
    },
    name = "ITALIC",
   },
   [3] = {
    type = "BOOLEAN",
    desc = "true, sets the font_layout to underline; false, no underlining",
    opt = {
     use = false,
    },
    name = "UNDERLINE",
   },
   [4] = {
    type = "BOOLEAN",
    desc = "true, sets the font_layout to outline; false, no outline",
    opt = {
     use = false,
    },
    name = "OUTLINE",
   },
   [5] = {
    type = "BOOLEAN",
    desc = "true, sets the font_layout to aliased; false, keep it antialiased",
    opt = {
     use = false,
    },
    name = "NONALIASED",
   },
   [6] = {
    type = "BOOLEAN",
    desc = "true, sets the font_layout to inverse; false, not inversed",
    opt = {
     use = false,
    },
    name = "INVERSE",
   },
   [7] = {
    type = "BOOLEAN",
    desc = "true, sets the font_layout to rotate the font clockwise; false, don't rotate",
    opt = {
     use = false,
    },
    name = "ROTATE",
   },
   [8] = {
    type = "BOOLEAN",
    desc = "true, sets the font_layout to rotate the font counterclockwise; false, don't rotate",
    opt = {
     use = false,
    },
    name = "ROTATE2",
   },
  },
  sp_api = "ultraschall",
 },
 [1651] = {
  fname = "GFX_ResizeImageKeepAspectRatio",
  label = "US_GFX_ResizeImageKeepAspectRatio",
  run = "in/out",
  desc = "Resizes an image, keeping its aspect-ratio. You can set a background-color for non rectangular-images.\
\
Resizing upwards will probably cause artifacts!\
\
Note: this uses image 1023 as temporary buffer so don't use image 1023, when using this function!",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, blitting was successful; false, blitting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "an image between 0 and 1022, that you want to resize",
    name = "IMAGE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the new width of the image",
    name = "NEWW",
   },
   [3] = {
    type = "INTEGER",
    desc = "the new height of the image",
    name = "NEWH",
   },
   [4] = {
    type = "NUMBER",
    desc = "the red-value of the background-color",
    opt = {
     use = false,
    },
    name = "R",
   },
   [5] = {
    type = "NUMBER",
    desc = "the green-value of the background-color",
    opt = {
     use = false,
    },
    name = "G",
   },
   [6] = {
    type = "NUMBER",
    desc = "the blue-value of the background-color",
    opt = {
     use = false,
    },
    name = "B",
   },
  },
  sp_api = "ultraschall",
 },
 [1652] = {
  fname = "GFX_BlitText_AdaptLineLength",
  label = "US_GFX_BlitText_AdaptLineLength",
  run = "in/out",
  desc = "This draws text to x and y and adapts the line-lengths to fit into width and height.",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, text-blitting was successful; false, text-blitting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "STRING",
    desc = "the text to be shown",
    name = "TEXT",
   },
   [2] = {
    type = "INTEGER",
    desc = "the x-position of the text",
    name = "X",
   },
   [3] = {
    type = "INTEGER",
    desc = "the y-position of the text",
    name = "Y",
   },
   [4] = {
    type = "INTEGER",
    desc = "the maximum width of a line in pixels; text after this will be put into the next line",
    name = "WIDTH",
   },
   [5] = {
    type = "INTEGER",
    desc = "the maximum height the text shall be shown in pixels; everything after this will be truncated",
    opt = {
     use = false,
    },
    name = "HEIGHT",
   },
   [6] = {
    type = "INTEGER",
    desc = "0 or nil, left aligned text; 1, center text",
    opt = {
     use = false,
    },
    name = "ALIGN",
   },
  },
  sp_api = "ultraschall",
 },
 [1653] = {
  fname = "GetVideoHWND",
  label = "US_GetVideoHWND",
  run = "in/out",
  desc = "returns the HWND of the Video window, if the window is opened.\
\
returns nil if the Video Window is closed",
  out = {
   [1] = {
    type = "HWND",
    desc = "the window-handler of the Video Window",
    name = "HWND",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1654] = {
  fname = "VID_VideoUIStateCoords2Pixels",
  label = "US_VID_VideoUIStateCoords2Pixels",
  run = "in/out",
  desc = "converts the ui_state-coordinates of the Video-Processor into pixel-coordinates within the Video Window\
\
You should add x and y-position of the Video-Processor-window, to get the actual screen-coordinates.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the converted x-coordinate",
    name = "X_COORDINATE",
   },
   [2] = {
    type = "INTEGER",
    desc = "the converted y-coordinate",
    name = "Y_COORDINATE",
   },
  },
  ins = {
   [1] = {
    type = "NUMBER",
    desc = "the x-coordinate, that the function ui_get_state within the videoprocessor returns",
    name = "UISTATE_X",
   },
   [2] = {
    type = "NUMBER",
    desc = "the y-coordinate, that the function ui_get_state within the videoprocessor returns",
    name = "UISTATE_Y",
   },
   [3] = {
    type = "INTEGER",
    desc = "the current width of the Video Window",
    name = "VIDEOWINDOW_WIDTH",
   },
   [4] = {
    type = "INTEGER",
    desc = "the current height of the Video Window",
    name = "VIDEOWINDOW_HEIGHT",
   },
  },
  sp_api = "ultraschall",
 },
 [1655] = {
  fname = "VID_Pixels2VideoUIStateCoords",
  label = "US_VID_Pixels2VideoUIStateCoords",
  run = "in/out",
  desc = "converts the ui_state-coordinates of the Video-Processor into pixel-coordinates within the Video Window\
\
You should add x and y-position of the Video-Processor-window, to get the actual screen-coordinates.\
\
returns nil in case of an error",
  out = {
   [1] = {
    type = "NUMBER",
    desc = "the converted x-coordinate, that reflects the values within the video-processor function ui_get_state",
    name = "X_COORDINATE",
   },
   [2] = {
    type = "NUMBER",
    desc = "the converted y-coordinate, that reflects the values within the video-processor function ui_get_state",
    name = "Y_COORDINATE",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the x-coordinate within the Video-Window",
    name = "X",
   },
   [2] = {
    type = "INTEGER",
    desc = "the y-coordinate within the Video-Window",
    name = "Y",
   },
   [3] = {
    type = "INTEGER",
    desc = "the current width of the Video Window",
    name = "VIDEOWINDOW_WIDTH",
   },
   [4] = {
    type = "INTEGER",
    desc = "the current height of the Video Window",
    name = "VIDEOWINDOW_HEIGHT",
   },
  },
  sp_api = "ultraschall",
 },
 [1656] = {
  fname = "ProjectSettings_GetVideoFramerate",
  label = "US_ProjectSettings_GetVideoFramerate",
  run = "in/out",
  desc = "returns the video-framerate of the current project",
  out = {
   [1] = {
    type = "INTEGER",
    desc = "the framerate in fps from 1 to 999999999",
    name = "FRAMERATE",
   },
   [2] = {
    type = "STRING",
    desc = "either \"DF\", \"ND\" or \"\"",
    name = "ADDNOTES",
   },
  },
  ins = {
  },
  sp_api = "ultraschall",
 },
 [1657] = {
  fname = "ProjectSettings_SetVideoFramerate",
  label = "US_ProjectSettings_SetVideoFramerate",
  run = "in/out",
  desc = "sets the video-framerate of the current project and optionally the default video-framerate for new projects\
\
returns false in case of an error",
  out = {
   [1] = {
    type = "BOOLEAN",
    desc = "true, setting was successful; false, setting was unsuccessful",
    name = "RETVAL",
   },
  },
  ins = {
   [1] = {
    type = "INTEGER",
    desc = "the framerate in fps from 1 to 999999999;\
0, 29.97 fps DF\
-1, 23.976 fp\
-2, 29.97 fps ND",
    name = "FRAMERATE",
   },
   [2] = {
    type = "BOOLEAN",
    desc = "true, set these values as default for new projects; false, don't set these values as defaults for ",
    name = "PERSIST",
   },
  },
  sp_api = "ultraschall",
 },
}