<!DOCTYPE html>
<html lang="en">

<head>

  <meta charset="utf-8">
  <!-- https://stackoverflow.com/questions/44679794/position-fixed-on-chrome-mobile-causing-element-to-move-on-scroll-up-down-->
  <meta name="viewport" content="height=device-height, width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no, target-densitydpi=device-dpi">
  <meta name="description" content="Searchable and easy-to-read list of REAPER ReaScript API functions with common extensions support.">
  <meta name="author" content="X-Raym">

  <!-- Og Metas -->
  <meta property="og:title" content="ReaScript API Documentation - by X-Raym">
  <meta property="og:site_name" content="ExtremRaym">
  <meta property="og:url" content="https://www.extremraym.com">
  <meta property="og:description" content="Searchable and easy-to-read list of REAPER ReaScript API functions with common extensions support.">
  <meta property="og:type" content="website">
  <meta property="og:image" content="https://www.extremraym.com/cloud/reascript-doc/images/xr-reascript-doc-ogimage.png">

  <title>ReaScript API — Documentation</title>

  <!-- CSS -->
  <link href="css/styles.css" rel="stylesheet">

  <link rel="icon" type="image/x-icon" href="images/logo.png">

</head>

<body id="body">

  <!-- Sidebar -->
  <aside id="sidebar-wrapper">
    <h2 class="sidebar-brand">ReaScript API Doc</h2>

    <ul class="displayMenu">
      <li id="displayEEL">Display <strong>EEL</strong> only</li>
      <li id="displayLua">Display <strong>Lua</strong> only</li>
      <li id="displayC">Display <strong>C++</strong> only</li>
      <li id="displayPython">Display <strong>Python</strong> only</li>
      <li id="displayAll">Display <strong>All</strong></li>
    </ul>

    <div class="search-box">
      <input id="search-box-input" placeholder="Search Functions" maxlength="150">
    </div>

    <!-- NOTE: List -->
    <ul id="sidebar-nav-list" class="sidebar-nav list">
      <li><a class="language e_doc" href="#e_funcs">EEL Functions</a></li>
      <li><a class="language l_doc" href="#l_funcs">Lua Functions</a></li>
      <li><a class="language p_doc" href="#p_funcs">Python Functions</a></li>
        <li><a href="#AddMediaItemToTrack">AddMediaItemToTrack</a></li>
        <li><a href="#AddProjectMarker">AddProjectMarker</a></li>
        <li><a href="#AddProjectMarker2">AddProjectMarker2</a></li>
        <li><a href="#AddRemoveReaScript">AddRemoveReaScript</a></li>
        <li><a href="#AddTakeToMediaItem">AddTakeToMediaItem</a></li>
        <li><a href="#AddTempoTimeSigMarker">AddTempoTimeSigMarker</a></li>
        <li><a href="#adjustZoom">adjustZoom</a></li>
        <li><a href="#AnyTrackSolo">AnyTrackSolo</a></li>
        <li><a href="#APIExists">APIExists</a></li>
        <li><a href="#APITest">APITest</a></li>
        <li><a href="#ApplyNudge">ApplyNudge</a></li>
        <li><a href="#ArmCommand">ArmCommand</a></li>
        <li><a href="#Audio_Init">Audio_Init</a></li>
        <li><a href="#Audio_IsPreBuffer">Audio_IsPreBuffer</a></li>
        <li><a href="#Audio_IsRunning">Audio_IsRunning</a></li>
        <li><a href="#Audio_Quit">Audio_Quit</a></li>
        <li><a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a></li>
        <li><a href="#AudioAccessorUpdate">AudioAccessorUpdate</a></li>
        <li><a href="#AudioAccessorValidateState">AudioAccessorValidateState</a></li>
        <li><a href="#BypassFxAllTracks">BypassFxAllTracks</a></li>
        <li><a href="#CalcMediaSrcLoudness">CalcMediaSrcLoudness</a></li>
        <li><a href="#CalculateNormalization">CalculateNormalization</a></li>
        <li><a href="#ClearAllRecArmed">ClearAllRecArmed</a></li>
        <li><a href="#ClearConsole">ClearConsole</a></li>
        <li><a href="#ClearPeakCache">ClearPeakCache</a></li>
        <li><a href="#ColorFromNative">ColorFromNative</a></li>
        <li><a href="#ColorToNative">ColorToNative</a></li>
        <li><a href="#CountActionShortcuts">CountActionShortcuts</a></li>
        <li><a href="#CountAutomationItems">CountAutomationItems</a></li>
        <li><a href="#CountEnvelopePoints">CountEnvelopePoints</a></li>
        <li><a href="#CountEnvelopePointsEx">CountEnvelopePointsEx</a></li>
        <li><a href="#CountMediaItems">CountMediaItems</a></li>
        <li><a href="#CountProjectMarkers">CountProjectMarkers</a></li>
        <li><a href="#CountSelectedMediaItems">CountSelectedMediaItems</a></li>
        <li><a href="#CountSelectedTracks">CountSelectedTracks</a></li>
        <li><a href="#CountSelectedTracks2">CountSelectedTracks2</a></li>
        <li><a href="#CountTakeEnvelopes">CountTakeEnvelopes</a></li>
        <li><a href="#CountTakes">CountTakes</a></li>
        <li><a href="#CountTCPFXParms">CountTCPFXParms</a></li>
        <li><a href="#CountTempoTimeSigMarkers">CountTempoTimeSigMarkers</a></li>
        <li><a href="#CountTrackEnvelopes">CountTrackEnvelopes</a></li>
        <li><a href="#CountTrackMediaItems">CountTrackMediaItems</a></li>
        <li><a href="#CountTracks">CountTracks</a></li>
        <li><a href="#CreateNewMIDIItemInProj">CreateNewMIDIItemInProj</a></li>
        <li><a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a></li>
        <li><a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a></li>
        <li><a href="#CreateTrackSend">CreateTrackSend</a></li>
        <li><a href="#CSurf_FlushUndo">CSurf_FlushUndo</a></li>
        <li><a href="#CSurf_GetTouchState">CSurf_GetTouchState</a></li>
        <li><a href="#CSurf_GoEnd">CSurf_GoEnd</a></li>
        <li><a href="#CSurf_GoStart">CSurf_GoStart</a></li>
        <li><a href="#CSurf_NumTracks">CSurf_NumTracks</a></li>
        <li><a href="#CSurf_OnArrow">CSurf_OnArrow</a></li>
        <li><a href="#CSurf_OnFwd">CSurf_OnFwd</a></li>
        <li><a href="#CSurf_OnFXChange">CSurf_OnFXChange</a></li>
        <li><a href="#CSurf_OnInputMonitorChange">CSurf_OnInputMonitorChange</a></li>
        <li><a href="#CSurf_OnInputMonitorChangeEx">CSurf_OnInputMonitorChangeEx</a></li>
        <li><a href="#CSurf_OnMuteChange">CSurf_OnMuteChange</a></li>
        <li><a href="#CSurf_OnMuteChangeEx">CSurf_OnMuteChangeEx</a></li>
        <li><a href="#CSurf_OnPanChange">CSurf_OnPanChange</a></li>
        <li><a href="#CSurf_OnPanChangeEx">CSurf_OnPanChangeEx</a></li>
        <li><a href="#CSurf_OnPause">CSurf_OnPause</a></li>
        <li><a href="#CSurf_OnPlay">CSurf_OnPlay</a></li>
        <li><a href="#CSurf_OnPlayRateChange">CSurf_OnPlayRateChange</a></li>
        <li><a href="#CSurf_OnRecArmChange">CSurf_OnRecArmChange</a></li>
        <li><a href="#CSurf_OnRecArmChangeEx">CSurf_OnRecArmChangeEx</a></li>
        <li><a href="#CSurf_OnRecord">CSurf_OnRecord</a></li>
        <li><a href="#CSurf_OnRecvPanChange">CSurf_OnRecvPanChange</a></li>
        <li><a href="#CSurf_OnRecvVolumeChange">CSurf_OnRecvVolumeChange</a></li>
        <li><a href="#CSurf_OnRew">CSurf_OnRew</a></li>
        <li><a href="#CSurf_OnRewFwd">CSurf_OnRewFwd</a></li>
        <li><a href="#CSurf_OnScroll">CSurf_OnScroll</a></li>
        <li><a href="#CSurf_OnSelectedChange">CSurf_OnSelectedChange</a></li>
        <li><a href="#CSurf_OnSendPanChange">CSurf_OnSendPanChange</a></li>
        <li><a href="#CSurf_OnSendVolumeChange">CSurf_OnSendVolumeChange</a></li>
        <li><a href="#CSurf_OnSoloChange">CSurf_OnSoloChange</a></li>
        <li><a href="#CSurf_OnSoloChangeEx">CSurf_OnSoloChangeEx</a></li>
        <li><a href="#CSurf_OnStop">CSurf_OnStop</a></li>
        <li><a href="#CSurf_OnTempoChange">CSurf_OnTempoChange</a></li>
        <li><a href="#CSurf_OnTrackSelection">CSurf_OnTrackSelection</a></li>
        <li><a href="#CSurf_OnVolumeChange">CSurf_OnVolumeChange</a></li>
        <li><a href="#CSurf_OnVolumeChangeEx">CSurf_OnVolumeChangeEx</a></li>
        <li><a href="#CSurf_OnWidthChange">CSurf_OnWidthChange</a></li>
        <li><a href="#CSurf_OnWidthChangeEx">CSurf_OnWidthChangeEx</a></li>
        <li><a href="#CSurf_OnZoom">CSurf_OnZoom</a></li>
        <li><a href="#CSurf_ResetAllCachedVolPanStates">CSurf_ResetAllCachedVolPanStates</a></li>
        <li><a href="#CSurf_ScrubAmt">CSurf_ScrubAmt</a></li>
        <li><a href="#CSurf_SetAutoMode">CSurf_SetAutoMode</a></li>
        <li><a href="#CSurf_SetPlayState">CSurf_SetPlayState</a></li>
        <li><a href="#CSurf_SetRepeatState">CSurf_SetRepeatState</a></li>
        <li><a href="#CSurf_SetSurfaceMute">CSurf_SetSurfaceMute</a></li>
        <li><a href="#CSurf_SetSurfacePan">CSurf_SetSurfacePan</a></li>
        <li><a href="#CSurf_SetSurfaceRecArm">CSurf_SetSurfaceRecArm</a></li>
        <li><a href="#CSurf_SetSurfaceSelected">CSurf_SetSurfaceSelected</a></li>
        <li><a href="#CSurf_SetSurfaceSolo">CSurf_SetSurfaceSolo</a></li>
        <li><a href="#CSurf_SetSurfaceVolume">CSurf_SetSurfaceVolume</a></li>
        <li><a href="#CSurf_SetTrackListChange">CSurf_SetTrackListChange</a></li>
        <li><a href="#CSurf_TrackFromID">CSurf_TrackFromID</a></li>
        <li><a href="#CSurf_TrackToID">CSurf_TrackToID</a></li>
        <li><a href="#DB2SLIDER">DB2SLIDER</a></li>
        <li><a href="#DeleteActionShortcut">DeleteActionShortcut</a></li>
        <li><a href="#DeleteEnvelopePointEx">DeleteEnvelopePointEx</a></li>
        <li><a href="#DeleteEnvelopePointRange">DeleteEnvelopePointRange</a></li>
        <li><a href="#DeleteEnvelopePointRangeEx">DeleteEnvelopePointRangeEx</a></li>
        <li><a href="#DeleteExtState">DeleteExtState</a></li>
        <li><a href="#DeleteProjectMarker">DeleteProjectMarker</a></li>
        <li><a href="#DeleteProjectMarkerByIndex">DeleteProjectMarkerByIndex</a></li>
        <li><a href="#DeleteTakeMarker">DeleteTakeMarker</a></li>
        <li><a href="#DeleteTakeStretchMarkers">DeleteTakeStretchMarkers</a></li>
        <li><a href="#DeleteTempoTimeSigMarker">DeleteTempoTimeSigMarker</a></li>
        <li><a href="#DeleteTrack">DeleteTrack</a></li>
        <li><a href="#DeleteTrackMediaItem">DeleteTrackMediaItem</a></li>
        <li><a href="#DestroyAudioAccessor">DestroyAudioAccessor</a></li>
        <li><a href="#DoActionShortcutDialog">DoActionShortcutDialog</a></li>
        <li><a href="#Dock_UpdateDockID">Dock_UpdateDockID</a></li>
        <li><a href="#DockGetPosition">DockGetPosition</a></li>
        <li><a href="#DockIsChildOfDock">DockIsChildOfDock</a></li>
        <li><a href="#DockWindowActivate">DockWindowActivate</a></li>
        <li><a href="#DockWindowAdd">DockWindowAdd</a></li>
        <li><a href="#DockWindowAddEx">DockWindowAddEx</a></li>
        <li><a href="#DockWindowRefresh">DockWindowRefresh</a></li>
        <li><a href="#DockWindowRefreshForHWND">DockWindowRefreshForHWND</a></li>
        <li><a href="#DockWindowRemove">DockWindowRemove</a></li>
        <li><a href="#EditTempoTimeSigMarker">EditTempoTimeSigMarker</a></li>
        <li><a href="#EnsureNotCompletelyOffscreen">EnsureNotCompletelyOffscreen</a></li>
        <li><a href="#EnumerateFiles">EnumerateFiles</a></li>
        <li><a href="#EnumerateSubdirectories">EnumerateSubdirectories</a></li>
        <li><a href="#EnumPitchShiftModes">EnumPitchShiftModes</a></li>
        <li><a href="#EnumPitchShiftSubModes">EnumPitchShiftSubModes</a></li>
        <li><a href="#EnumProjectMarkers">EnumProjectMarkers</a></li>
        <li><a href="#EnumProjectMarkers2">EnumProjectMarkers2</a></li>
        <li><a href="#EnumProjectMarkers3">EnumProjectMarkers3</a></li>
        <li><a href="#EnumProjects">EnumProjects</a></li>
        <li><a href="#EnumProjExtState">EnumProjExtState</a></li>
        <li><a href="#EnumRegionRenderMatrix">EnumRegionRenderMatrix</a></li>
        <li><a href="#EnumTrackMIDIProgramNames">EnumTrackMIDIProgramNames</a></li>
        <li><a href="#EnumTrackMIDIProgramNamesEx">EnumTrackMIDIProgramNamesEx</a></li>
        <li><a href="#Envelope_Evaluate">Envelope_Evaluate</a></li>
        <li><a href="#Envelope_FormatValue">Envelope_FormatValue</a></li>
        <li><a href="#Envelope_GetParentTake">Envelope_GetParentTake</a></li>
        <li><a href="#Envelope_GetParentTrack">Envelope_GetParentTrack</a></li>
        <li><a href="#Envelope_SortPoints">Envelope_SortPoints</a></li>
        <li><a href="#Envelope_SortPointsEx">Envelope_SortPointsEx</a></li>
        <li><a href="#ExecProcess">ExecProcess</a></li>
        <li><a href="#file_exists">file_exists</a></li>
        <li><a href="#FindTempoTimeSigMarker">FindTempoTimeSigMarker</a></li>
        <li><a href="#format_timestr">format_timestr</a></li>
        <li><a href="#format_timestr_len">format_timestr_len</a></li>
        <li><a href="#format_timestr_pos">format_timestr_pos</a></li>
        <li><a href="#genGuid">genGuid</a></li>
        <li><a href="#get_config_var_string">get_config_var_string</a></li>
        <li><a href="#get_ini_file">get_ini_file</a></li>
        <li><a href="#GetActionShortcutDesc">GetActionShortcutDesc</a></li>
        <li><a href="#GetActiveTake">GetActiveTake</a></li>
        <li><a href="#GetAllProjectPlayStates">GetAllProjectPlayStates</a></li>
        <li><a href="#GetAppVersion">GetAppVersion</a></li>
        <li><a href="#GetArmedCommand">GetArmedCommand</a></li>
        <li><a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a></li>
        <li><a href="#GetAudioAccessorHash">GetAudioAccessorHash</a></li>
        <li><a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a></li>
        <li><a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a></li>
        <li><a href="#GetAudioDeviceInfo">GetAudioDeviceInfo</a></li>
        <li><a href="#GetConfigWantsDock">GetConfigWantsDock</a></li>
        <li><a href="#GetCurrentProjectInLoadSave">GetCurrentProjectInLoadSave</a></li>
        <li><a href="#GetCursorContext">GetCursorContext</a></li>
        <li><a href="#GetCursorContext2">GetCursorContext2</a></li>
        <li><a href="#GetCursorPosition">GetCursorPosition</a></li>
        <li><a href="#GetCursorPositionEx">GetCursorPositionEx</a></li>
        <li><a href="#GetDisplayedMediaItemColor">GetDisplayedMediaItemColor</a></li>
        <li><a href="#GetDisplayedMediaItemColor2">GetDisplayedMediaItemColor2</a></li>
        <li><a href="#GetEnvelopeInfo_Value">GetEnvelopeInfo_Value</a></li>
        <li><a href="#GetEnvelopeName">GetEnvelopeName</a></li>
        <li><a href="#GetEnvelopePoint">GetEnvelopePoint</a></li>
        <li><a href="#GetEnvelopePointByTime">GetEnvelopePointByTime</a></li>
        <li><a href="#GetEnvelopePointByTimeEx">GetEnvelopePointByTimeEx</a></li>
        <li><a href="#GetEnvelopePointEx">GetEnvelopePointEx</a></li>
        <li><a href="#GetEnvelopeScalingMode">GetEnvelopeScalingMode</a></li>
        <li><a href="#GetEnvelopeStateChunk">GetEnvelopeStateChunk</a></li>
        <li><a href="#GetEnvelopeUIState">GetEnvelopeUIState</a></li>
        <li><a href="#GetExePath">GetExePath</a></li>
        <li><a href="#GetExtState">GetExtState</a></li>
        <li><a href="#GetFocusedFX">GetFocusedFX</a></li>
        <li><a href="#GetFocusedFX2">GetFocusedFX2</a></li>
        <li><a href="#GetFreeDiskSpaceForRecordPath">GetFreeDiskSpaceForRecordPath</a></li>
        <li><a href="#GetFXEnvelope">GetFXEnvelope</a></li>
        <li><a href="#GetGlobalAutomationOverride">GetGlobalAutomationOverride</a></li>
        <li><a href="#GetHZoomLevel">GetHZoomLevel</a></li>
        <li><a href="#GetInputActivityLevel">GetInputActivityLevel</a></li>
        <li><a href="#GetInputChannelName">GetInputChannelName</a></li>
        <li><a href="#GetInputOutputLatency">GetInputOutputLatency</a></li>
        <li><a href="#GetItemEditingTime2">GetItemEditingTime2</a></li>
        <li><a href="#GetItemFromPoint">GetItemFromPoint</a></li>
        <li><a href="#GetItemProjectContext">GetItemProjectContext</a></li>
        <li><a href="#GetItemStateChunk">GetItemStateChunk</a></li>
        <li><a href="#GetLastColorThemeFile">GetLastColorThemeFile</a></li>
        <li><a href="#GetLastMarkerAndCurRegion">GetLastMarkerAndCurRegion</a></li>
        <li><a href="#GetLastTouchedFX">GetLastTouchedFX</a></li>
        <li><a href="#GetLastTouchedTrack">GetLastTouchedTrack</a></li>
        <li><a href="#GetMainHwnd">GetMainHwnd</a></li>
        <li><a href="#GetMasterMuteSoloFlags">GetMasterMuteSoloFlags</a></li>
        <li><a href="#GetMasterTrack">GetMasterTrack</a></li>
        <li><a href="#GetMasterTrackVisibility">GetMasterTrackVisibility</a></li>
        <li><a href="#GetMaxMidiInputs">GetMaxMidiInputs</a></li>
        <li><a href="#GetMaxMidiOutputs">GetMaxMidiOutputs</a></li>
        <li><a href="#GetMediaFileMetadata">GetMediaFileMetadata</a></li>
        <li><a href="#GetMediaItem">GetMediaItem</a></li>
        <li><a href="#GetMediaItem_Track">GetMediaItem_Track</a></li>
        <li><a href="#GetMediaItemInfo_Value">GetMediaItemInfo_Value</a></li>
        <li><a href="#GetMediaItemNumTakes">GetMediaItemNumTakes</a></li>
        <li><a href="#GetMediaItemTake">GetMediaItemTake</a></li>
        <li><a href="#GetMediaItemTake_Item">GetMediaItemTake_Item</a></li>
        <li><a href="#GetMediaItemTake_Peaks">GetMediaItemTake_Peaks</a></li>
        <li><a href="#GetMediaItemTake_Source">GetMediaItemTake_Source</a></li>
        <li><a href="#GetMediaItemTake_Track">GetMediaItemTake_Track</a></li>
        <li><a href="#GetMediaItemTakeByGUID">GetMediaItemTakeByGUID</a></li>
        <li><a href="#GetMediaItemTakeInfo_Value">GetMediaItemTakeInfo_Value</a></li>
        <li><a href="#GetMediaItemTrack">GetMediaItemTrack</a></li>
        <li><a href="#GetMediaSourceFileName">GetMediaSourceFileName</a></li>
        <li><a href="#GetMediaSourceLength">GetMediaSourceLength</a></li>
        <li><a href="#GetMediaSourceNumChannels">GetMediaSourceNumChannels</a></li>
        <li><a href="#GetMediaSourceParent">GetMediaSourceParent</a></li>
        <li><a href="#GetMediaSourceSampleRate">GetMediaSourceSampleRate</a></li>
        <li><a href="#GetMediaSourceType">GetMediaSourceType</a></li>
        <li><a href="#GetMediaTrackInfo_Value">GetMediaTrackInfo_Value</a></li>
        <li><a href="#GetMIDIInputName">GetMIDIInputName</a></li>
        <li><a href="#GetMIDIOutputName">GetMIDIOutputName</a></li>
        <li><a href="#GetMixerScroll">GetMixerScroll</a></li>
        <li><a href="#GetMouseModifier">GetMouseModifier</a></li>
        <li><a href="#GetMousePosition">GetMousePosition</a></li>
        <li><a href="#GetNumAudioInputs">GetNumAudioInputs</a></li>
        <li><a href="#GetNumAudioOutputs">GetNumAudioOutputs</a></li>
        <li><a href="#GetNumMIDIInputs">GetNumMIDIInputs</a></li>
        <li><a href="#GetNumMIDIOutputs">GetNumMIDIOutputs</a></li>
        <li><a href="#GetNumTakeMarkers">GetNumTakeMarkers</a></li>
        <li><a href="#GetNumTracks">GetNumTracks</a></li>
        <li><a href="#GetOS">GetOS</a></li>
        <li><a href="#GetOutputChannelName">GetOutputChannelName</a></li>
        <li><a href="#GetOutputLatency">GetOutputLatency</a></li>
        <li><a href="#GetParentTrack">GetParentTrack</a></li>
        <li><a href="#GetPeakFileName">GetPeakFileName</a></li>
        <li><a href="#GetPeakFileNameEx">GetPeakFileNameEx</a></li>
        <li><a href="#GetPeakFileNameEx2">GetPeakFileNameEx2</a></li>
        <li><a href="#GetPlayPosition">GetPlayPosition</a></li>
        <li><a href="#GetPlayPosition2">GetPlayPosition2</a></li>
        <li><a href="#GetPlayPosition2Ex">GetPlayPosition2Ex</a></li>
        <li><a href="#GetPlayPositionEx">GetPlayPositionEx</a></li>
        <li><a href="#GetPlayState">GetPlayState</a></li>
        <li><a href="#GetPlayStateEx">GetPlayStateEx</a></li>
        <li><a href="#GetProjectLength">GetProjectLength</a></li>
        <li><a href="#GetProjectName">GetProjectName</a></li>
        <li><a href="#GetProjectPath">GetProjectPath</a></li>
        <li><a href="#GetProjectPathEx">GetProjectPathEx</a></li>
        <li><a href="#GetProjectStateChangeCount">GetProjectStateChangeCount</a></li>
        <li><a href="#GetProjectTimeOffset">GetProjectTimeOffset</a></li>
        <li><a href="#GetProjectTimeSignature">GetProjectTimeSignature</a></li>
        <li><a href="#GetProjectTimeSignature2">GetProjectTimeSignature2</a></li>
        <li><a href="#GetProjExtState">GetProjExtState</a></li>
        <li><a href="#GetResourcePath">GetResourcePath</a></li>
        <li><a href="#GetSelectedEnvelope">GetSelectedEnvelope</a></li>
        <li><a href="#GetSelectedMediaItem">GetSelectedMediaItem</a></li>
        <li><a href="#GetSelectedTrack">GetSelectedTrack</a></li>
        <li><a href="#GetSelectedTrack2">GetSelectedTrack2</a></li>
        <li><a href="#GetSelectedTrackEnvelope">GetSelectedTrackEnvelope</a></li>
        <li><a href="#GetSet_ArrangeView2">GetSet_ArrangeView2</a></li>
        <li><a href="#GetSet_LoopTimeRange">GetSet_LoopTimeRange</a></li>
        <li><a href="#GetSet_LoopTimeRange2">GetSet_LoopTimeRange2</a></li>
        <li><a href="#GetSetAutomationItemInfo">GetSetAutomationItemInfo</a></li>
        <li><a href="#GetSetAutomationItemInfo_String">GetSetAutomationItemInfo_String</a></li>
        <li><a href="#GetSetEnvelopeInfo_String">GetSetEnvelopeInfo_String</a></li>
        <li><a href="#GetSetEnvelopeState">GetSetEnvelopeState</a></li>
        <li><a href="#GetSetEnvelopeState2">GetSetEnvelopeState2</a></li>
        <li><a href="#GetSetItemState">GetSetItemState</a></li>
        <li><a href="#GetSetItemState2">GetSetItemState2</a></li>
        <li><a href="#GetSetMediaItemInfo_String">GetSetMediaItemInfo_String</a></li>
        <li><a href="#GetSetMediaItemTakeInfo_String">GetSetMediaItemTakeInfo_String</a></li>
        <li><a href="#GetSetMediaTrackInfo_String">GetSetMediaTrackInfo_String</a></li>
        <li><a href="#GetSetProjectAuthor">GetSetProjectAuthor</a></li>
        <li><a href="#GetSetProjectGrid">GetSetProjectGrid</a></li>
        <li><a href="#GetSetProjectInfo">GetSetProjectInfo</a></li>
        <li><a href="#GetSetProjectInfo_String">GetSetProjectInfo_String</a></li>
        <li><a href="#GetSetProjectNotes">GetSetProjectNotes</a></li>
        <li><a href="#GetSetRepeat">GetSetRepeat</a></li>
        <li><a href="#GetSetRepeatEx">GetSetRepeatEx</a></li>
        <li><a href="#GetSetTrackGroupMembership">GetSetTrackGroupMembership</a></li>
        <li><a href="#GetSetTrackGroupMembershipHigh">GetSetTrackGroupMembershipHigh</a></li>
        <li><a href="#GetSetTrackSendInfo_String">GetSetTrackSendInfo_String</a></li>
        <li><a href="#GetSetTrackState">GetSetTrackState</a></li>
        <li><a href="#GetSetTrackState2">GetSetTrackState2</a></li>
        <li><a href="#GetSubProjectFromSource">GetSubProjectFromSource</a></li>
        <li><a href="#GetTake">GetTake</a></li>
        <li><a href="#GetTakeEnvelope">GetTakeEnvelope</a></li>
        <li><a href="#GetTakeEnvelopeByName">GetTakeEnvelopeByName</a></li>
        <li><a href="#GetTakeMarker">GetTakeMarker</a></li>
        <li><a href="#GetTakeName">GetTakeName</a></li>
        <li><a href="#GetTakeNumStretchMarkers">GetTakeNumStretchMarkers</a></li>
        <li><a href="#GetTakeStretchMarker">GetTakeStretchMarker</a></li>
        <li><a href="#GetTakeStretchMarkerSlope">GetTakeStretchMarkerSlope</a></li>
        <li><a href="#GetTCPFXParm">GetTCPFXParm</a></li>
        <li><a href="#GetTempoMatchPlayRate">GetTempoMatchPlayRate</a></li>
        <li><a href="#GetTempoTimeSigMarker">GetTempoTimeSigMarker</a></li>
        <li><a href="#GetThemeColor">GetThemeColor</a></li>
        <li><a href="#GetThingFromPoint">GetThingFromPoint</a></li>
        <li><a href="#GetToggleCommandState">GetToggleCommandState</a></li>
        <li><a href="#GetToggleCommandStateEx">GetToggleCommandStateEx</a></li>
        <li><a href="#GetTooltipWindow">GetTooltipWindow</a></li>
        <li><a href="#GetTrack">GetTrack</a></li>
        <li><a href="#GetTrackAutomationMode">GetTrackAutomationMode</a></li>
        <li><a href="#GetTrackColor">GetTrackColor</a></li>
        <li><a href="#GetTrackDepth">GetTrackDepth</a></li>
        <li><a href="#GetTrackEnvelope">GetTrackEnvelope</a></li>
        <li><a href="#GetTrackEnvelopeByChunkName">GetTrackEnvelopeByChunkName</a></li>
        <li><a href="#GetTrackEnvelopeByName">GetTrackEnvelopeByName</a></li>
        <li><a href="#GetTrackFromPoint">GetTrackFromPoint</a></li>
        <li><a href="#GetTrackGUID">GetTrackGUID</a></li>
        <li><a href="#GetTrackMediaItem">GetTrackMediaItem</a></li>
        <li><a href="#GetTrackMIDILyrics">GetTrackMIDILyrics</a></li>
        <li><a href="#GetTrackMIDINoteName">GetTrackMIDINoteName</a></li>
        <li><a href="#GetTrackMIDINoteNameEx">GetTrackMIDINoteNameEx</a></li>
        <li><a href="#GetTrackMIDINoteRange">GetTrackMIDINoteRange</a></li>
        <li><a href="#GetTrackName">GetTrackName</a></li>
        <li><a href="#GetTrackNumMediaItems">GetTrackNumMediaItems</a></li>
        <li><a href="#GetTrackNumSends">GetTrackNumSends</a></li>
        <li><a href="#GetTrackReceiveName">GetTrackReceiveName</a></li>
        <li><a href="#GetTrackReceiveUIMute">GetTrackReceiveUIMute</a></li>
        <li><a href="#GetTrackReceiveUIVolPan">GetTrackReceiveUIVolPan</a></li>
        <li><a href="#GetTrackSendInfo_Value">GetTrackSendInfo_Value</a></li>
        <li><a href="#GetTrackSendName">GetTrackSendName</a></li>
        <li><a href="#GetTrackSendUIMute">GetTrackSendUIMute</a></li>
        <li><a href="#GetTrackSendUIVolPan">GetTrackSendUIVolPan</a></li>
        <li><a href="#GetTrackState">GetTrackState</a></li>
        <li><a href="#GetTrackStateChunk">GetTrackStateChunk</a></li>
        <li><a href="#GetTrackUIMute">GetTrackUIMute</a></li>
        <li><a href="#GetTrackUIPan">GetTrackUIPan</a></li>
        <li><a href="#GetTrackUIVolPan">GetTrackUIVolPan</a></li>
        <li><a href="#GetUnderrunTime">GetUnderrunTime</a></li>
        <li><a href="#GetUserFileNameForRead">GetUserFileNameForRead</a></li>
        <li><a href="#GetUserInputs">GetUserInputs</a></li>
        <li><a href="#GoToMarker">GoToMarker</a></li>
        <li><a href="#GoToRegion">GoToRegion</a></li>
        <li><a href="#GR_SelectColor">GR_SelectColor</a></li>
        <li><a href="#GSC_mainwnd">GSC_mainwnd</a></li>
        <li><a href="#guidToString">guidToString</a></li>
        <li><a href="#HasExtState">HasExtState</a></li>
        <li><a href="#HasTrackMIDIPrograms">HasTrackMIDIPrograms</a></li>
        <li><a href="#HasTrackMIDIProgramsEx">HasTrackMIDIProgramsEx</a></li>
        <li><a href="#Help_Set">Help_Set</a></li>
        <li><a href="#image_resolve_fn">image_resolve_fn</a></li>
        <li><a href="#InsertAutomationItem">InsertAutomationItem</a></li>
        <li><a href="#InsertEnvelopePoint">InsertEnvelopePoint</a></li>
        <li><a href="#InsertEnvelopePointEx">InsertEnvelopePointEx</a></li>
        <li><a href="#InsertMedia">InsertMedia</a></li>
        <li><a href="#InsertMediaSection">InsertMediaSection</a></li>
        <li><a href="#InsertTrackAtIndex">InsertTrackAtIndex</a></li>
        <li><a href="#IsMediaExtension">IsMediaExtension</a></li>
        <li><a href="#IsMediaItemSelected">IsMediaItemSelected</a></li>
        <li><a href="#IsProjectDirty">IsProjectDirty</a></li>
        <li><a href="#IsTrackSelected">IsTrackSelected</a></li>
        <li><a href="#IsTrackVisible">IsTrackVisible</a></li>
        <li><a href="#joystick_create">joystick_create</a></li>
        <li><a href="#joystick_destroy">joystick_destroy</a></li>
        <li><a href="#joystick_enum">joystick_enum</a></li>
        <li><a href="#joystick_getaxis">joystick_getaxis</a></li>
        <li><a href="#joystick_getbuttonmask">joystick_getbuttonmask</a></li>
        <li><a href="#joystick_getinfo">joystick_getinfo</a></li>
        <li><a href="#joystick_getpov">joystick_getpov</a></li>
        <li><a href="#joystick_update">joystick_update</a></li>
        <li><a href="#kbd_enumerateActions">kbd_enumerateActions</a></li>
        <li><a href="#kbd_getTextFromCmd">kbd_getTextFromCmd</a></li>
        <li><a href="#LICE_ClipLine">LICE_ClipLine</a></li>
        <li><a href="#LocalizeString">LocalizeString</a></li>
        <li><a href="#Loop_OnArrow">Loop_OnArrow</a></li>
        <li><a href="#Main_OnCommand">Main_OnCommand</a></li>
        <li><a href="#Main_OnCommandEx">Main_OnCommandEx</a></li>
        <li><a href="#Main_openProject">Main_openProject</a></li>
        <li><a href="#Main_SaveProject">Main_SaveProject</a></li>
        <li><a href="#Main_SaveProjectEx">Main_SaveProjectEx</a></li>
        <li><a href="#Main_UpdateLoopInfo">Main_UpdateLoopInfo</a></li>
        <li><a href="#MarkProjectDirty">MarkProjectDirty</a></li>
        <li><a href="#MarkTrackItemsDirty">MarkTrackItemsDirty</a></li>
        <li><a href="#Master_GetPlayRate">Master_GetPlayRate</a></li>
        <li><a href="#Master_GetPlayRateAtTime">Master_GetPlayRateAtTime</a></li>
        <li><a href="#Master_GetTempo">Master_GetTempo</a></li>
        <li><a href="#Master_NormalizePlayRate">Master_NormalizePlayRate</a></li>
        <li><a href="#Master_NormalizeTempo">Master_NormalizeTempo</a></li>
        <li><a href="#MB">MB</a></li>
        <li><a href="#MediaItemDescendsFromTrack">MediaItemDescendsFromTrack</a></li>
        <li><a href="#MIDI_CountEvts">MIDI_CountEvts</a></li>
        <li><a href="#MIDI_DeleteCC">MIDI_DeleteCC</a></li>
        <li><a href="#MIDI_DeleteEvt">MIDI_DeleteEvt</a></li>
        <li><a href="#MIDI_DeleteNote">MIDI_DeleteNote</a></li>
        <li><a href="#MIDI_DeleteTextSysexEvt">MIDI_DeleteTextSysexEvt</a></li>
        <li><a href="#MIDI_DisableSort">MIDI_DisableSort</a></li>
        <li><a href="#MIDI_EnumSelCC">MIDI_EnumSelCC</a></li>
        <li><a href="#MIDI_EnumSelEvts">MIDI_EnumSelEvts</a></li>
        <li><a href="#MIDI_EnumSelNotes">MIDI_EnumSelNotes</a></li>
        <li><a href="#MIDI_EnumSelTextSysexEvts">MIDI_EnumSelTextSysexEvts</a></li>
        <li><a href="#MIDI_GetAllEvts">MIDI_GetAllEvts</a></li>
        <li><a href="#MIDI_GetCC">MIDI_GetCC</a></li>
        <li><a href="#MIDI_GetCCShape">MIDI_GetCCShape</a></li>
        <li><a href="#MIDI_GetEvt">MIDI_GetEvt</a></li>
        <li><a href="#MIDI_GetGrid">MIDI_GetGrid</a></li>
        <li><a href="#MIDI_GetHash">MIDI_GetHash</a></li>
        <li><a href="#MIDI_GetNote">MIDI_GetNote</a></li>
        <li><a href="#MIDI_GetPPQPos_EndOfMeasure">MIDI_GetPPQPos_EndOfMeasure</a></li>
        <li><a href="#MIDI_GetPPQPos_StartOfMeasure">MIDI_GetPPQPos_StartOfMeasure</a></li>
        <li><a href="#MIDI_GetPPQPosFromProjQN">MIDI_GetPPQPosFromProjQN</a></li>
        <li><a href="#MIDI_GetPPQPosFromProjTime">MIDI_GetPPQPosFromProjTime</a></li>
        <li><a href="#MIDI_GetProjQNFromPPQPos">MIDI_GetProjQNFromPPQPos</a></li>
        <li><a href="#MIDI_GetProjTimeFromPPQPos">MIDI_GetProjTimeFromPPQPos</a></li>
        <li><a href="#MIDI_GetRecentInputEvent">MIDI_GetRecentInputEvent</a></li>
        <li><a href="#MIDI_GetScale">MIDI_GetScale</a></li>
        <li><a href="#MIDI_GetTextSysexEvt">MIDI_GetTextSysexEvt</a></li>
        <li><a href="#MIDI_GetTrackHash">MIDI_GetTrackHash</a></li>
        <li><a href="#midi_init">midi_init</a></li>
        <li><a href="#MIDI_InsertCC">MIDI_InsertCC</a></li>
        <li><a href="#MIDI_InsertEvt">MIDI_InsertEvt</a></li>
        <li><a href="#MIDI_InsertNote">MIDI_InsertNote</a></li>
        <li><a href="#MIDI_InsertTextSysexEvt">MIDI_InsertTextSysexEvt</a></li>
        <li><a href="#midi_reinit">midi_reinit</a></li>
        <li><a href="#MIDI_SelectAll">MIDI_SelectAll</a></li>
        <li><a href="#MIDI_SetAllEvts">MIDI_SetAllEvts</a></li>
        <li><a href="#MIDI_SetCC">MIDI_SetCC</a></li>
        <li><a href="#MIDI_SetCCShape">MIDI_SetCCShape</a></li>
        <li><a href="#MIDI_SetEvt">MIDI_SetEvt</a></li>
        <li><a href="#MIDI_SetItemExtents">MIDI_SetItemExtents</a></li>
        <li><a href="#MIDI_SetNote">MIDI_SetNote</a></li>
        <li><a href="#MIDI_SetTextSysexEvt">MIDI_SetTextSysexEvt</a></li>
        <li><a href="#MIDI_Sort">MIDI_Sort</a></li>
        <li><a href="#MIDIEditor_EnumTakes">MIDIEditor_EnumTakes</a></li>
        <li><a href="#MIDIEditor_GetActive">MIDIEditor_GetActive</a></li>
        <li><a href="#MIDIEditor_GetMode">MIDIEditor_GetMode</a></li>
        <li><a href="#MIDIEditor_GetSetting_int">MIDIEditor_GetSetting_int</a></li>
        <li><a href="#MIDIEditor_GetSetting_str">MIDIEditor_GetSetting_str</a></li>
        <li><a href="#MIDIEditor_GetTake">MIDIEditor_GetTake</a></li>
        <li><a href="#MIDIEditor_LastFocused_OnCommand">MIDIEditor_LastFocused_OnCommand</a></li>
        <li><a href="#MIDIEditor_OnCommand">MIDIEditor_OnCommand</a></li>
        <li><a href="#MIDIEditor_SetSetting_int">MIDIEditor_SetSetting_int</a></li>
        <li><a href="#mkpanstr">mkpanstr</a></li>
        <li><a href="#mkvolpanstr">mkvolpanstr</a></li>
        <li><a href="#mkvolstr">mkvolstr</a></li>
        <li><a href="#MoveEditCursor">MoveEditCursor</a></li>
        <li><a href="#MoveMediaItemToTrack">MoveMediaItemToTrack</a></li>
        <li><a href="#MuteAllTracks">MuteAllTracks</a></li>
        <li><a href="#my_getViewport">my_getViewport</a></li>
        <li><a href="#NamedCommandLookup">NamedCommandLookup</a></li>
        <li><a href="#OnPauseButton">OnPauseButton</a></li>
        <li><a href="#OnPauseButtonEx">OnPauseButtonEx</a></li>
        <li><a href="#OnPlayButton">OnPlayButton</a></li>
        <li><a href="#OnPlayButtonEx">OnPlayButtonEx</a></li>
        <li><a href="#OnStopButton">OnStopButton</a></li>
        <li><a href="#OnStopButtonEx">OnStopButtonEx</a></li>
        <li><a href="#OpenColorThemeFile">OpenColorThemeFile</a></li>
        <li><a href="#OpenMediaExplorer">OpenMediaExplorer</a></li>
        <li><a href="#OscLocalMessageToHost">OscLocalMessageToHost</a></li>
        <li><a href="#parse_timestr">parse_timestr</a></li>
        <li><a href="#parse_timestr_len">parse_timestr_len</a></li>
        <li><a href="#parse_timestr_pos">parse_timestr_pos</a></li>
        <li><a href="#parsepanstr">parsepanstr</a></li>
        <li><a href="#PCM_Sink_Enum">PCM_Sink_Enum</a></li>
        <li><a href="#PCM_Sink_GetExtension">PCM_Sink_GetExtension</a></li>
        <li><a href="#PCM_Sink_ShowConfig">PCM_Sink_ShowConfig</a></li>
        <li><a href="#PCM_Source_BuildPeaks">PCM_Source_BuildPeaks</a></li>
        <li><a href="#PCM_Source_CreateFromFile">PCM_Source_CreateFromFile</a></li>
        <li><a href="#PCM_Source_CreateFromFileEx">PCM_Source_CreateFromFileEx</a></li>
        <li><a href="#PCM_Source_CreateFromType">PCM_Source_CreateFromType</a></li>
        <li><a href="#PCM_Source_Destroy">PCM_Source_Destroy</a></li>
        <li><a href="#PCM_Source_GetPeaks">PCM_Source_GetPeaks</a></li>
        <li><a href="#PCM_Source_GetSectionInfo">PCM_Source_GetSectionInfo</a></li>
        <li><a href="#PluginWantsAlwaysRunFx">PluginWantsAlwaysRunFx</a></li>
        <li><a href="#PreventUIRefresh">PreventUIRefresh</a></li>
        <li><a href="#PromptForAction">PromptForAction</a></li>
        <li><a href="#ReaScriptError">ReaScriptError</a></li>
        <li><a href="#RecursiveCreateDirectory">RecursiveCreateDirectory</a></li>
        <li><a href="#reduce_open_files">reduce_open_files</a></li>
        <li><a href="#RefreshToolbar">RefreshToolbar</a></li>
        <li><a href="#RefreshToolbar2">RefreshToolbar2</a></li>
        <li><a href="#relative_fn">relative_fn</a></li>
        <li><a href="#RemoveTrackSend">RemoveTrackSend</a></li>
        <li><a href="#RenderFileSection">RenderFileSection</a></li>
        <li><a href="#ReorderSelectedTracks">ReorderSelectedTracks</a></li>
        <li><a href="#Resample_EnumModes">Resample_EnumModes</a></li>
        <li><a href="#resolve_fn">resolve_fn</a></li>
        <li><a href="#resolve_fn2">resolve_fn2</a></li>
        <li><a href="#ReverseNamedCommandLookup">ReverseNamedCommandLookup</a></li>
        <li><a href="#ScaleFromEnvelopeMode">ScaleFromEnvelopeMode</a></li>
        <li><a href="#ScaleToEnvelopeMode">ScaleToEnvelopeMode</a></li>
        <li><a href="#SectionFromUniqueID">SectionFromUniqueID</a></li>
        <li><a href="#SelectAllMediaItems">SelectAllMediaItems</a></li>
        <li><a href="#SelectProjectInstance">SelectProjectInstance</a></li>
        <li><a href="#SendMIDIMessageToHardware">SendMIDIMessageToHardware</a></li>
        <li><a href="#SetActiveTake">SetActiveTake</a></li>
        <li><a href="#SetAutomationMode">SetAutomationMode</a></li>
        <li><a href="#SetCurrentBPM">SetCurrentBPM</a></li>
        <li><a href="#SetCursorContext">SetCursorContext</a></li>
        <li><a href="#SetEditCurPos">SetEditCurPos</a></li>
        <li><a href="#SetEditCurPos2">SetEditCurPos2</a></li>
        <li><a href="#SetEnvelopePoint">SetEnvelopePoint</a></li>
        <li><a href="#SetEnvelopePointEx">SetEnvelopePointEx</a></li>
        <li><a href="#SetEnvelopeStateChunk">SetEnvelopeStateChunk</a></li>
        <li><a href="#SetExtState">SetExtState</a></li>
        <li><a href="#SetGlobalAutomationOverride">SetGlobalAutomationOverride</a></li>
        <li><a href="#SetItemStateChunk">SetItemStateChunk</a></li>
        <li><a href="#SetMasterTrackVisibility">SetMasterTrackVisibility</a></li>
        <li><a href="#SetMediaItemInfo_Value">SetMediaItemInfo_Value</a></li>
        <li><a href="#SetMediaItemLength">SetMediaItemLength</a></li>
        <li><a href="#SetMediaItemPosition">SetMediaItemPosition</a></li>
        <li><a href="#SetMediaItemSelected">SetMediaItemSelected</a></li>
        <li><a href="#SetMediaItemTake_Source">SetMediaItemTake_Source</a></li>
        <li><a href="#SetMediaItemTakeInfo_Value">SetMediaItemTakeInfo_Value</a></li>
        <li><a href="#SetMediaTrackInfo_Value">SetMediaTrackInfo_Value</a></li>
        <li><a href="#SetMIDIEditorGrid">SetMIDIEditorGrid</a></li>
        <li><a href="#SetMixerScroll">SetMixerScroll</a></li>
        <li><a href="#SetMouseModifier">SetMouseModifier</a></li>
        <li><a href="#SetOnlyTrackSelected">SetOnlyTrackSelected</a></li>
        <li><a href="#SetProjectGrid">SetProjectGrid</a></li>
        <li><a href="#SetProjectMarker">SetProjectMarker</a></li>
        <li><a href="#SetProjectMarker2">SetProjectMarker2</a></li>
        <li><a href="#SetProjectMarker3">SetProjectMarker3</a></li>
        <li><a href="#SetProjectMarker4">SetProjectMarker4</a></li>
        <li><a href="#SetProjectMarkerByIndex">SetProjectMarkerByIndex</a></li>
        <li><a href="#SetProjectMarkerByIndex2">SetProjectMarkerByIndex2</a></li>
        <li><a href="#SetProjExtState">SetProjExtState</a></li>
        <li><a href="#SetRegionRenderMatrix">SetRegionRenderMatrix</a></li>
        <li><a href="#SetTakeMarker">SetTakeMarker</a></li>
        <li><a href="#SetTakeStretchMarker">SetTakeStretchMarker</a></li>
        <li><a href="#SetTakeStretchMarkerSlope">SetTakeStretchMarkerSlope</a></li>
        <li><a href="#SetTempoTimeSigMarker">SetTempoTimeSigMarker</a></li>
        <li><a href="#SetThemeColor">SetThemeColor</a></li>
        <li><a href="#SetToggleCommandState">SetToggleCommandState</a></li>
        <li><a href="#SetTrackAutomationMode">SetTrackAutomationMode</a></li>
        <li><a href="#SetTrackColor">SetTrackColor</a></li>
        <li><a href="#SetTrackMIDILyrics">SetTrackMIDILyrics</a></li>
        <li><a href="#SetTrackMIDINoteName">SetTrackMIDINoteName</a></li>
        <li><a href="#SetTrackMIDINoteNameEx">SetTrackMIDINoteNameEx</a></li>
        <li><a href="#SetTrackSelected">SetTrackSelected</a></li>
        <li><a href="#SetTrackSendInfo_Value">SetTrackSendInfo_Value</a></li>
        <li><a href="#SetTrackSendUIPan">SetTrackSendUIPan</a></li>
        <li><a href="#SetTrackSendUIVol">SetTrackSendUIVol</a></li>
        <li><a href="#SetTrackStateChunk">SetTrackStateChunk</a></li>
        <li><a href="#SetTrackUIInputMonitor">SetTrackUIInputMonitor</a></li>
        <li><a href="#SetTrackUIMute">SetTrackUIMute</a></li>
        <li><a href="#SetTrackUIPan">SetTrackUIPan</a></li>
        <li><a href="#SetTrackUIPolarity">SetTrackUIPolarity</a></li>
        <li><a href="#SetTrackUIRecArm">SetTrackUIRecArm</a></li>
        <li><a href="#SetTrackUISolo">SetTrackUISolo</a></li>
        <li><a href="#SetTrackUIVolume">SetTrackUIVolume</a></li>
        <li><a href="#SetTrackUIWidth">SetTrackUIWidth</a></li>
        <li><a href="#ShowActionList">ShowActionList</a></li>
        <li><a href="#ShowConsoleMsg">ShowConsoleMsg</a></li>
        <li><a href="#ShowMessageBox">ShowMessageBox</a></li>
        <li><a href="#ShowPopupMenu">ShowPopupMenu</a></li>
        <li><a href="#SLIDER2DB">SLIDER2DB</a></li>
        <li><a href="#SnapToGrid">SnapToGrid</a></li>
        <li><a href="#SoloAllTracks">SoloAllTracks</a></li>
        <li><a href="#Splash_GetWnd">Splash_GetWnd</a></li>
        <li><a href="#SplitMediaItem">SplitMediaItem</a></li>
        <li><a href="#stringToGuid">stringToGuid</a></li>
        <li><a href="#StuffMIDIMessage">StuffMIDIMessage</a></li>
        <li><a href="#TakeFX_AddByName">TakeFX_AddByName</a></li>
        <li><a href="#TakeFX_CopyToTake">TakeFX_CopyToTake</a></li>
        <li><a href="#TakeFX_CopyToTrack">TakeFX_CopyToTrack</a></li>
        <li><a href="#TakeFX_Delete">TakeFX_Delete</a></li>
        <li><a href="#TakeFX_EndParamEdit">TakeFX_EndParamEdit</a></li>
        <li><a href="#TakeFX_FormatParamValue">TakeFX_FormatParamValue</a></li>
        <li><a href="#TakeFX_FormatParamValueNormalized">TakeFX_FormatParamValueNormalized</a></li>
        <li><a href="#TakeFX_GetChainVisible">TakeFX_GetChainVisible</a></li>
        <li><a href="#TakeFX_GetCount">TakeFX_GetCount</a></li>
        <li><a href="#TakeFX_GetEnabled">TakeFX_GetEnabled</a></li>
        <li><a href="#TakeFX_GetEnvelope">TakeFX_GetEnvelope</a></li>
        <li><a href="#TakeFX_GetFloatingWindow">TakeFX_GetFloatingWindow</a></li>
        <li><a href="#TakeFX_GetFormattedParamValue">TakeFX_GetFormattedParamValue</a></li>
        <li><a href="#TakeFX_GetFXGUID">TakeFX_GetFXGUID</a></li>
        <li><a href="#TakeFX_GetFXName">TakeFX_GetFXName</a></li>
        <li><a href="#TakeFX_GetIOSize">TakeFX_GetIOSize</a></li>
        <li><a href="#TakeFX_GetNamedConfigParm">TakeFX_GetNamedConfigParm</a></li>
        <li><a href="#TakeFX_GetNumParams">TakeFX_GetNumParams</a></li>
        <li><a href="#TakeFX_GetOffline">TakeFX_GetOffline</a></li>
        <li><a href="#TakeFX_GetOpen">TakeFX_GetOpen</a></li>
        <li><a href="#TakeFX_GetParam">TakeFX_GetParam</a></li>
        <li><a href="#TakeFX_GetParameterStepSizes">TakeFX_GetParameterStepSizes</a></li>
        <li><a href="#TakeFX_GetParamEx">TakeFX_GetParamEx</a></li>
        <li><a href="#TakeFX_GetParamFromIdent">TakeFX_GetParamFromIdent</a></li>
        <li><a href="#TakeFX_GetParamIdent">TakeFX_GetParamIdent</a></li>
        <li><a href="#TakeFX_GetParamName">TakeFX_GetParamName</a></li>
        <li><a href="#TakeFX_GetParamNormalized">TakeFX_GetParamNormalized</a></li>
        <li><a href="#TakeFX_GetPinMappings">TakeFX_GetPinMappings</a></li>
        <li><a href="#TakeFX_GetPreset">TakeFX_GetPreset</a></li>
        <li><a href="#TakeFX_GetPresetIndex">TakeFX_GetPresetIndex</a></li>
        <li><a href="#TakeFX_GetUserPresetFilename">TakeFX_GetUserPresetFilename</a></li>
        <li><a href="#TakeFX_NavigatePresets">TakeFX_NavigatePresets</a></li>
        <li><a href="#TakeFX_SetEnabled">TakeFX_SetEnabled</a></li>
        <li><a href="#TakeFX_SetNamedConfigParm">TakeFX_SetNamedConfigParm</a></li>
        <li><a href="#TakeFX_SetOffline">TakeFX_SetOffline</a></li>
        <li><a href="#TakeFX_SetOpen">TakeFX_SetOpen</a></li>
        <li><a href="#TakeFX_SetParam">TakeFX_SetParam</a></li>
        <li><a href="#TakeFX_SetParamNormalized">TakeFX_SetParamNormalized</a></li>
        <li><a href="#TakeFX_SetPinMappings">TakeFX_SetPinMappings</a></li>
        <li><a href="#TakeFX_SetPreset">TakeFX_SetPreset</a></li>
        <li><a href="#TakeFX_SetPresetByIndex">TakeFX_SetPresetByIndex</a></li>
        <li><a href="#TakeFX_Show">TakeFX_Show</a></li>
        <li><a href="#TakeIsMIDI">TakeIsMIDI</a></li>
        <li><a href="#ThemeLayout_GetLayout">ThemeLayout_GetLayout</a></li>
        <li><a href="#ThemeLayout_GetParameter">ThemeLayout_GetParameter</a></li>
        <li><a href="#ThemeLayout_RefreshAll">ThemeLayout_RefreshAll</a></li>
        <li><a href="#ThemeLayout_SetLayout">ThemeLayout_SetLayout</a></li>
        <li><a href="#ThemeLayout_SetParameter">ThemeLayout_SetParameter</a></li>
        <li><a href="#time_precise">time_precise</a></li>
        <li><a href="#TimeMap2_beatsToTime">TimeMap2_beatsToTime</a></li>
        <li><a href="#TimeMap2_GetDividedBpmAtTime">TimeMap2_GetDividedBpmAtTime</a></li>
        <li><a href="#TimeMap2_GetNextChangeTime">TimeMap2_GetNextChangeTime</a></li>
        <li><a href="#TimeMap2_QNToTime">TimeMap2_QNToTime</a></li>
        <li><a href="#TimeMap2_timeToBeats">TimeMap2_timeToBeats</a></li>
        <li><a href="#TimeMap2_timeToQN">TimeMap2_timeToQN</a></li>
        <li><a href="#TimeMap_curFrameRate">TimeMap_curFrameRate</a></li>
        <li><a href="#TimeMap_GetDividedBpmAtTime">TimeMap_GetDividedBpmAtTime</a></li>
        <li><a href="#TimeMap_GetMeasureInfo">TimeMap_GetMeasureInfo</a></li>
        <li><a href="#TimeMap_GetMetronomePattern">TimeMap_GetMetronomePattern</a></li>
        <li><a href="#TimeMap_GetTimeSigAtTime">TimeMap_GetTimeSigAtTime</a></li>
        <li><a href="#TimeMap_QNToMeasures">TimeMap_QNToMeasures</a></li>
        <li><a href="#TimeMap_QNToTime">TimeMap_QNToTime</a></li>
        <li><a href="#TimeMap_QNToTime_abs">TimeMap_QNToTime_abs</a></li>
        <li><a href="#TimeMap_timeToQN">TimeMap_timeToQN</a></li>
        <li><a href="#TimeMap_timeToQN_abs">TimeMap_timeToQN_abs</a></li>
        <li><a href="#ToggleTrackSendUIMute">ToggleTrackSendUIMute</a></li>
        <li><a href="#Track_GetPeakHoldDB">Track_GetPeakHoldDB</a></li>
        <li><a href="#Track_GetPeakInfo">Track_GetPeakInfo</a></li>
        <li><a href="#TrackCtl_SetToolTip">TrackCtl_SetToolTip</a></li>
        <li><a href="#TrackFX_AddByName">TrackFX_AddByName</a></li>
        <li><a href="#TrackFX_CopyToTake">TrackFX_CopyToTake</a></li>
        <li><a href="#TrackFX_CopyToTrack">TrackFX_CopyToTrack</a></li>
        <li><a href="#TrackFX_Delete">TrackFX_Delete</a></li>
        <li><a href="#TrackFX_EndParamEdit">TrackFX_EndParamEdit</a></li>
        <li><a href="#TrackFX_FormatParamValue">TrackFX_FormatParamValue</a></li>
        <li><a href="#TrackFX_FormatParamValueNormalized">TrackFX_FormatParamValueNormalized</a></li>
        <li><a href="#TrackFX_GetByName">TrackFX_GetByName</a></li>
        <li><a href="#TrackFX_GetChainVisible">TrackFX_GetChainVisible</a></li>
        <li><a href="#TrackFX_GetCount">TrackFX_GetCount</a></li>
        <li><a href="#TrackFX_GetEnabled">TrackFX_GetEnabled</a></li>
        <li><a href="#TrackFX_GetEQ">TrackFX_GetEQ</a></li>
        <li><a href="#TrackFX_GetEQBandEnabled">TrackFX_GetEQBandEnabled</a></li>
        <li><a href="#TrackFX_GetEQParam">TrackFX_GetEQParam</a></li>
        <li><a href="#TrackFX_GetFloatingWindow">TrackFX_GetFloatingWindow</a></li>
        <li><a href="#TrackFX_GetFormattedParamValue">TrackFX_GetFormattedParamValue</a></li>
        <li><a href="#TrackFX_GetFXGUID">TrackFX_GetFXGUID</a></li>
        <li><a href="#TrackFX_GetFXName">TrackFX_GetFXName</a></li>
        <li><a href="#TrackFX_GetInstrument">TrackFX_GetInstrument</a></li>
        <li><a href="#TrackFX_GetIOSize">TrackFX_GetIOSize</a></li>
        <li><a href="#TrackFX_GetNamedConfigParm">TrackFX_GetNamedConfigParm</a></li>
        <li><a href="#TrackFX_GetNumParams">TrackFX_GetNumParams</a></li>
        <li><a href="#TrackFX_GetOffline">TrackFX_GetOffline</a></li>
        <li><a href="#TrackFX_GetOpen">TrackFX_GetOpen</a></li>
        <li><a href="#TrackFX_GetParam">TrackFX_GetParam</a></li>
        <li><a href="#TrackFX_GetParameterStepSizes">TrackFX_GetParameterStepSizes</a></li>
        <li><a href="#TrackFX_GetParamEx">TrackFX_GetParamEx</a></li>
        <li><a href="#TrackFX_GetParamFromIdent">TrackFX_GetParamFromIdent</a></li>
        <li><a href="#TrackFX_GetParamIdent">TrackFX_GetParamIdent</a></li>
        <li><a href="#TrackFX_GetParamName">TrackFX_GetParamName</a></li>
        <li><a href="#TrackFX_GetParamNormalized">TrackFX_GetParamNormalized</a></li>
        <li><a href="#TrackFX_GetPinMappings">TrackFX_GetPinMappings</a></li>
        <li><a href="#TrackFX_GetPreset">TrackFX_GetPreset</a></li>
        <li><a href="#TrackFX_GetPresetIndex">TrackFX_GetPresetIndex</a></li>
        <li><a href="#TrackFX_GetRecChainVisible">TrackFX_GetRecChainVisible</a></li>
        <li><a href="#TrackFX_GetRecCount">TrackFX_GetRecCount</a></li>
        <li><a href="#TrackFX_GetUserPresetFilename">TrackFX_GetUserPresetFilename</a></li>
        <li><a href="#TrackFX_NavigatePresets">TrackFX_NavigatePresets</a></li>
        <li><a href="#TrackFX_SetEnabled">TrackFX_SetEnabled</a></li>
        <li><a href="#TrackFX_SetEQBandEnabled">TrackFX_SetEQBandEnabled</a></li>
        <li><a href="#TrackFX_SetEQParam">TrackFX_SetEQParam</a></li>
        <li><a href="#TrackFX_SetNamedConfigParm">TrackFX_SetNamedConfigParm</a></li>
        <li><a href="#TrackFX_SetOffline">TrackFX_SetOffline</a></li>
        <li><a href="#TrackFX_SetOpen">TrackFX_SetOpen</a></li>
        <li><a href="#TrackFX_SetParam">TrackFX_SetParam</a></li>
        <li><a href="#TrackFX_SetParamNormalized">TrackFX_SetParamNormalized</a></li>
        <li><a href="#TrackFX_SetPinMappings">TrackFX_SetPinMappings</a></li>
        <li><a href="#TrackFX_SetPreset">TrackFX_SetPreset</a></li>
        <li><a href="#TrackFX_SetPresetByIndex">TrackFX_SetPresetByIndex</a></li>
        <li><a href="#TrackFX_Show">TrackFX_Show</a></li>
        <li><a href="#TrackList_AdjustWindows">TrackList_AdjustWindows</a></li>
        <li><a href="#TrackList_UpdateAllExternalSurfaces">TrackList_UpdateAllExternalSurfaces</a></li>
        <li><a href="#Undo_BeginBlock">Undo_BeginBlock</a></li>
        <li><a href="#Undo_BeginBlock2">Undo_BeginBlock2</a></li>
        <li><a href="#Undo_CanRedo2">Undo_CanRedo2</a></li>
        <li><a href="#Undo_CanUndo2">Undo_CanUndo2</a></li>
        <li><a href="#Undo_DoRedo2">Undo_DoRedo2</a></li>
        <li><a href="#Undo_DoUndo2">Undo_DoUndo2</a></li>
        <li><a href="#Undo_EndBlock">Undo_EndBlock</a></li>
        <li><a href="#Undo_EndBlock2">Undo_EndBlock2</a></li>
        <li><a href="#Undo_OnStateChange">Undo_OnStateChange</a></li>
        <li><a href="#Undo_OnStateChange2">Undo_OnStateChange2</a></li>
        <li><a href="#Undo_OnStateChange_Item">Undo_OnStateChange_Item</a></li>
        <li><a href="#Undo_OnStateChangeEx">Undo_OnStateChangeEx</a></li>
        <li><a href="#Undo_OnStateChangeEx2">Undo_OnStateChangeEx2</a></li>
        <li><a href="#UpdateArrange">UpdateArrange</a></li>
        <li><a href="#UpdateItemInProject">UpdateItemInProject</a></li>
        <li><a href="#UpdateTimeline">UpdateTimeline</a></li>
        <li><a href="#ValidatePtr">ValidatePtr</a></li>
        <li><a href="#ValidatePtr2">ValidatePtr2</a></li>
        <li><a href="#ViewPrefs">ViewPrefs</a></li>
        <li><a href="#BR_EnvAlloc">BR_EnvAlloc</a></li>
        <li><a href="#BR_EnvCountPoints">BR_EnvCountPoints</a></li>
        <li><a href="#BR_EnvDeletePoint">BR_EnvDeletePoint</a></li>
        <li><a href="#BR_EnvFind">BR_EnvFind</a></li>
        <li><a href="#BR_EnvFindNext">BR_EnvFindNext</a></li>
        <li><a href="#BR_EnvFindPrevious">BR_EnvFindPrevious</a></li>
        <li><a href="#BR_EnvFree">BR_EnvFree</a></li>
        <li><a href="#BR_EnvGetParentTake">BR_EnvGetParentTake</a></li>
        <li><a href="#BR_EnvGetParentTrack">BR_EnvGetParentTrack</a></li>
        <li><a href="#BR_EnvGetPoint">BR_EnvGetPoint</a></li>
        <li><a href="#BR_EnvGetProperties">BR_EnvGetProperties</a></li>
        <li><a href="#BR_EnvSetPoint">BR_EnvSetPoint</a></li>
        <li><a href="#BR_EnvSetProperties">BR_EnvSetProperties</a></li>
        <li><a href="#BR_EnvSortPoints">BR_EnvSortPoints</a></li>
        <li><a href="#BR_EnvValueAtPos">BR_EnvValueAtPos</a></li>
        <li><a href="#BR_GetArrangeView">BR_GetArrangeView</a></li>
        <li><a href="#BR_GetClosestGridDivision">BR_GetClosestGridDivision</a></li>
        <li><a href="#BR_GetCurrentTheme">BR_GetCurrentTheme</a></li>
        <li><a href="#BR_GetMediaItemByGUID">BR_GetMediaItemByGUID</a></li>
        <li><a href="#BR_GetMediaItemGUID">BR_GetMediaItemGUID</a></li>
        <li><a href="#BR_GetMediaItemImageResource">BR_GetMediaItemImageResource</a></li>
        <li><a href="#BR_GetMediaItemTakeGUID">BR_GetMediaItemTakeGUID</a></li>
        <li><a href="#BR_GetMediaSourceProperties">BR_GetMediaSourceProperties</a></li>
        <li><a href="#BR_GetMediaTrackByGUID">BR_GetMediaTrackByGUID</a></li>
        <li><a href="#BR_GetMediaTrackFreezeCount">BR_GetMediaTrackFreezeCount</a></li>
        <li><a href="#BR_GetMediaTrackGUID">BR_GetMediaTrackGUID</a></li>
        <li><a href="#BR_GetMediaTrackLayouts">BR_GetMediaTrackLayouts</a></li>
        <li><a href="#BR_GetMediaTrackSendInfo_Envelope">BR_GetMediaTrackSendInfo_Envelope</a></li>
        <li><a href="#BR_GetMediaTrackSendInfo_Track">BR_GetMediaTrackSendInfo_Track</a></li>
        <li><a href="#BR_GetMidiSourceLenPPQ">BR_GetMidiSourceLenPPQ</a></li>
        <li><a href="#BR_GetMidiTakePoolGUID">BR_GetMidiTakePoolGUID</a></li>
        <li><a href="#BR_GetMidiTakeTempoInfo">BR_GetMidiTakeTempoInfo</a></li>
        <li><a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a></li>
        <li><a href="#BR_GetMouseCursorContext_Envelope">BR_GetMouseCursorContext_Envelope</a></li>
        <li><a href="#BR_GetMouseCursorContext_Item">BR_GetMouseCursorContext_Item</a></li>
        <li><a href="#BR_GetMouseCursorContext_MIDI">BR_GetMouseCursorContext_MIDI</a></li>
        <li><a href="#BR_GetMouseCursorContext_Position">BR_GetMouseCursorContext_Position</a></li>
        <li><a href="#BR_GetMouseCursorContext_StretchMarker">BR_GetMouseCursorContext_StretchMarker</a></li>
        <li><a href="#BR_GetMouseCursorContext_Take">BR_GetMouseCursorContext_Take</a></li>
        <li><a href="#BR_GetMouseCursorContext_Track">BR_GetMouseCursorContext_Track</a></li>
        <li><a href="#BR_GetNextGridDivision">BR_GetNextGridDivision</a></li>
        <li><a href="#BR_GetPrevGridDivision">BR_GetPrevGridDivision</a></li>
        <li><a href="#BR_GetSetTrackSendInfo">BR_GetSetTrackSendInfo</a></li>
        <li><a href="#BR_GetTakeFXCount">BR_GetTakeFXCount</a></li>
        <li><a href="#BR_IsMidiOpenInInlineEditor">BR_IsMidiOpenInInlineEditor</a></li>
        <li><a href="#BR_IsTakeMidi">BR_IsTakeMidi</a></li>
        <li><a href="#BR_ItemAtMouseCursor">BR_ItemAtMouseCursor</a></li>
        <li><a href="#BR_MIDI_CCLaneRemove">BR_MIDI_CCLaneRemove</a></li>
        <li><a href="#BR_MIDI_CCLaneReplace">BR_MIDI_CCLaneReplace</a></li>
        <li><a href="#BR_PositionAtMouseCursor">BR_PositionAtMouseCursor</a></li>
        <li><a href="#BR_SetArrangeView">BR_SetArrangeView</a></li>
        <li><a href="#BR_SetItemEdges">BR_SetItemEdges</a></li>
        <li><a href="#BR_SetMediaItemImageResource">BR_SetMediaItemImageResource</a></li>
        <li><a href="#BR_SetMediaSourceProperties">BR_SetMediaSourceProperties</a></li>
        <li><a href="#BR_SetMediaTrackLayouts">BR_SetMediaTrackLayouts</a></li>
        <li><a href="#BR_SetMidiTakeTempoInfo">BR_SetMidiTakeTempoInfo</a></li>
        <li><a href="#BR_SetTakeSourceFromFile">BR_SetTakeSourceFromFile</a></li>
        <li><a href="#BR_SetTakeSourceFromFile2">BR_SetTakeSourceFromFile2</a></li>
        <li><a href="#BR_TakeAtMouseCursor">BR_TakeAtMouseCursor</a></li>
        <li><a href="#BR_TrackAtMouseCursor">BR_TrackAtMouseCursor</a></li>
        <li><a href="#BR_TrackFX_GetFXModuleName">BR_TrackFX_GetFXModuleName</a></li>
        <li><a href="#BR_Win32_CB_FindString">BR_Win32_CB_FindString</a></li>
        <li><a href="#BR_Win32_CB_FindStringExact">BR_Win32_CB_FindStringExact</a></li>
        <li><a href="#BR_Win32_ClientToScreen">BR_Win32_ClientToScreen</a></li>
        <li><a href="#BR_Win32_FindWindowEx">BR_Win32_FindWindowEx</a></li>
        <li><a href="#BR_Win32_GET_X_LPARAM">BR_Win32_GET_X_LPARAM</a></li>
        <li><a href="#BR_Win32_GET_Y_LPARAM">BR_Win32_GET_Y_LPARAM</a></li>
        <li><a href="#BR_Win32_GetConstant">BR_Win32_GetConstant</a></li>
        <li><a href="#BR_Win32_GetCursorPos">BR_Win32_GetCursorPos</a></li>
        <li><a href="#BR_Win32_GetFocus">BR_Win32_GetFocus</a></li>
        <li><a href="#BR_Win32_GetForegroundWindow">BR_Win32_GetForegroundWindow</a></li>
        <li><a href="#BR_Win32_GetMainHwnd">BR_Win32_GetMainHwnd</a></li>
        <li><a href="#BR_Win32_GetMixerHwnd">BR_Win32_GetMixerHwnd</a></li>
        <li><a href="#BR_Win32_GetMonitorRectFromRect">BR_Win32_GetMonitorRectFromRect</a></li>
        <li><a href="#BR_Win32_GetParent">BR_Win32_GetParent</a></li>
        <li><a href="#BR_Win32_GetPrivateProfileString">BR_Win32_GetPrivateProfileString</a></li>
        <li><a href="#BR_Win32_GetWindow">BR_Win32_GetWindow</a></li>
        <li><a href="#BR_Win32_GetWindowLong">BR_Win32_GetWindowLong</a></li>
        <li><a href="#BR_Win32_GetWindowRect">BR_Win32_GetWindowRect</a></li>
        <li><a href="#BR_Win32_GetWindowText">BR_Win32_GetWindowText</a></li>
        <li><a href="#BR_Win32_HIBYTE">BR_Win32_HIBYTE</a></li>
        <li><a href="#BR_Win32_HIWORD">BR_Win32_HIWORD</a></li>
        <li><a href="#BR_Win32_HwndToString">BR_Win32_HwndToString</a></li>
        <li><a href="#BR_Win32_IsWindow">BR_Win32_IsWindow</a></li>
        <li><a href="#BR_Win32_IsWindowVisible">BR_Win32_IsWindowVisible</a></li>
        <li><a href="#BR_Win32_LOBYTE">BR_Win32_LOBYTE</a></li>
        <li><a href="#BR_Win32_LOWORD">BR_Win32_LOWORD</a></li>
        <li><a href="#BR_Win32_MAKELONG">BR_Win32_MAKELONG</a></li>
        <li><a href="#BR_Win32_MAKELPARAM">BR_Win32_MAKELPARAM</a></li>
        <li><a href="#BR_Win32_MAKELRESULT">BR_Win32_MAKELRESULT</a></li>
        <li><a href="#BR_Win32_MAKEWORD">BR_Win32_MAKEWORD</a></li>
        <li><a href="#BR_Win32_MAKEWPARAM">BR_Win32_MAKEWPARAM</a></li>
        <li><a href="#BR_Win32_MIDIEditor_GetActive">BR_Win32_MIDIEditor_GetActive</a></li>
        <li><a href="#BR_Win32_ScreenToClient">BR_Win32_ScreenToClient</a></li>
        <li><a href="#BR_Win32_SendMessage">BR_Win32_SendMessage</a></li>
        <li><a href="#BR_Win32_SetFocus">BR_Win32_SetFocus</a></li>
        <li><a href="#BR_Win32_SetForegroundWindow">BR_Win32_SetForegroundWindow</a></li>
        <li><a href="#BR_Win32_SetWindowLong">BR_Win32_SetWindowLong</a></li>
        <li><a href="#BR_Win32_SetWindowPos">BR_Win32_SetWindowPos</a></li>
        <li><a href="#BR_Win32_ShellExecute">BR_Win32_ShellExecute</a></li>
        <li><a href="#BR_Win32_ShowWindow">BR_Win32_ShowWindow</a></li>
        <li><a href="#BR_Win32_StringToHwnd">BR_Win32_StringToHwnd</a></li>
        <li><a href="#BR_Win32_WindowFromPoint">BR_Win32_WindowFromPoint</a></li>
        <li><a href="#BR_Win32_WritePrivateProfileString">BR_Win32_WritePrivateProfileString</a></li>
        <li><a href="#Blink_GetBeatAtTime">Blink_GetBeatAtTime</a></li>
        <li><a href="#Blink_GetClockNow">Blink_GetClockNow</a></li>
        <li><a href="#Blink_GetEnabled">Blink_GetEnabled</a></li>
        <li><a href="#Blink_GetMaster">Blink_GetMaster</a></li>
        <li><a href="#Blink_GetNumPeers">Blink_GetNumPeers</a></li>
        <li><a href="#Blink_GetPhaseAtTime">Blink_GetPhaseAtTime</a></li>
        <li><a href="#Blink_GetPlaying">Blink_GetPlaying</a></li>
        <li><a href="#Blink_GetPuppet">Blink_GetPuppet</a></li>
        <li><a href="#Blink_GetQuantum">Blink_GetQuantum</a></li>
        <li><a href="#Blink_GetStartStopSyncEnabled">Blink_GetStartStopSyncEnabled</a></li>
        <li><a href="#Blink_GetTempo">Blink_GetTempo</a></li>
        <li><a href="#Blink_GetTimeAtBeat">Blink_GetTimeAtBeat</a></li>
        <li><a href="#Blink_GetTimeForPlaying">Blink_GetTimeForPlaying</a></li>
        <li><a href="#Blink_GetVersion">Blink_GetVersion</a></li>
        <li><a href="#Blink_SetBeatAtStartPlayingTimeRequest">Blink_SetBeatAtStartPlayingTimeRequest</a></li>
        <li><a href="#Blink_SetBeatAtTimeForce">Blink_SetBeatAtTimeForce</a></li>
        <li><a href="#Blink_SetBeatAtTimeRequest">Blink_SetBeatAtTimeRequest</a></li>
        <li><a href="#Blink_SetCaptureTransportCommands">Blink_SetCaptureTransportCommands</a></li>
        <li><a href="#Blink_SetEnabled">Blink_SetEnabled</a></li>
        <li><a href="#Blink_SetMaster">Blink_SetMaster</a></li>
        <li><a href="#Blink_SetPlaying">Blink_SetPlaying</a></li>
        <li><a href="#Blink_SetPlayingAndBeatAtTimeRequest">Blink_SetPlayingAndBeatAtTimeRequest</a></li>
        <li><a href="#Blink_SetPuppet">Blink_SetPuppet</a></li>
        <li><a href="#Blink_SetQuantum">Blink_SetQuantum</a></li>
        <li><a href="#Blink_SetStartStopSyncEnabled">Blink_SetStartStopSyncEnabled</a></li>
        <li><a href="#Blink_SetTempo">Blink_SetTempo</a></li>
        <li><a href="#Blink_SetTempoAtTime">Blink_SetTempoAtTime</a></li>
        <li><a href="#Blink_StartStop">Blink_StartStop</a></li>
        <li><a href="#CF_CreatePreview">CF_CreatePreview</a></li>
        <li><a href="#CF_EnumMediaSourceCues">CF_EnumMediaSourceCues</a></li>
        <li><a href="#CF_EnumSelectedFX">CF_EnumSelectedFX</a></li>
        <li><a href="#CF_EnumerateActions">CF_EnumerateActions</a></li>
        <li><a href="#CF_ExportMediaSource">CF_ExportMediaSource</a></li>
        <li><a href="#CF_GetClipboard">CF_GetClipboard</a></li>
        <li><a href="#CF_GetClipboardBig">CF_GetClipboardBig</a></li>
        <li><a href="#CF_GetCommandText">CF_GetCommandText</a></li>
        <li><a href="#CF_GetCustomColor">CF_GetCustomColor</a></li>
        <li><a href="#CF_GetFocusedFXChain">CF_GetFocusedFXChain</a></li>
        <li><a href="#CF_GetMediaSourceBitDepth">CF_GetMediaSourceBitDepth</a></li>
        <li><a href="#CF_GetMediaSourceBitRate">CF_GetMediaSourceBitRate</a></li>
        <li><a href="#CF_GetMediaSourceMetadata">CF_GetMediaSourceMetadata</a></li>
        <li><a href="#CF_GetMediaSourceOnline">CF_GetMediaSourceOnline</a></li>
        <li><a href="#CF_GetMediaSourceRPP">CF_GetMediaSourceRPP</a></li>
        <li><a href="#CF_GetSWSVersion">CF_GetSWSVersion</a></li>
        <li><a href="#CF_GetTakeFXChain">CF_GetTakeFXChain</a></li>
        <li><a href="#CF_GetTrackFXChain">CF_GetTrackFXChain</a></li>
        <li><a href="#CF_GetTrackFXChainEx">CF_GetTrackFXChainEx</a></li>
        <li><a href="#CF_LocateInExplorer">CF_LocateInExplorer</a></li>
        <li><a href="#CF_PCM_Source_SetSectionInfo">CF_PCM_Source_SetSectionInfo</a></li>
        <li><a href="#CF_Preview_GetPeak">CF_Preview_GetPeak</a></li>
        <li><a href="#CF_Preview_GetValue">CF_Preview_GetValue</a></li>
        <li><a href="#CF_Preview_Play">CF_Preview_Play</a></li>
        <li><a href="#CF_Preview_SetOutputTrack">CF_Preview_SetOutputTrack</a></li>
        <li><a href="#CF_Preview_SetValue">CF_Preview_SetValue</a></li>
        <li><a href="#CF_Preview_Stop">CF_Preview_Stop</a></li>
        <li><a href="#CF_Preview_StopAll">CF_Preview_StopAll</a></li>
        <li><a href="#CF_SelectTrackFX">CF_SelectTrackFX</a></li>
        <li><a href="#CF_SetClipboard">CF_SetClipboard</a></li>
        <li><a href="#CF_SetCustomColor">CF_SetCustomColor</a></li>
        <li><a href="#CF_SetMediaSourceOnline">CF_SetMediaSourceOnline</a></li>
        <li><a href="#CF_ShellExecute">CF_ShellExecute</a></li>
        <li><a href="#FNG_AddMidiNote">FNG_AddMidiNote</a></li>
        <li><a href="#FNG_AllocMidiTake">FNG_AllocMidiTake</a></li>
        <li><a href="#FNG_CountMidiNotes">FNG_CountMidiNotes</a></li>
        <li><a href="#FNG_FreeMidiTake">FNG_FreeMidiTake</a></li>
        <li><a href="#FNG_GetMidiNote">FNG_GetMidiNote</a></li>
        <li><a href="#FNG_GetMidiNoteIntProperty">FNG_GetMidiNoteIntProperty</a></li>
        <li><a href="#FNG_SetMidiNoteIntProperty">FNG_SetMidiNoteIntProperty</a></li>
        <li><a href="#Fab_Clear">Fab_Clear</a></li>
        <li><a href="#Fab_Do">Fab_Do</a></li>
        <li><a href="#Fab_Dump">Fab_Dump</a></li>
        <li><a href="#Fab_Get">Fab_Get</a></li>
        <li><a href="#Fab_Map">Fab_Map</a></li>
        <li><a href="#ImGui_AcceptDragDropPayload">ImGui_AcceptDragDropPayload</a></li>
        <li><a href="#ImGui_AcceptDragDropPayloadFiles">ImGui_AcceptDragDropPayloadFiles</a></li>
        <li><a href="#ImGui_AcceptDragDropPayloadRGB">ImGui_AcceptDragDropPayloadRGB</a></li>
        <li><a href="#ImGui_AcceptDragDropPayloadRGBA">ImGui_AcceptDragDropPayloadRGBA</a></li>
        <li><a href="#ImGui_AlignTextToFramePadding">ImGui_AlignTextToFramePadding</a></li>
        <li><a href="#ImGui_ArrowButton">ImGui_ArrowButton</a></li>
        <li><a href="#ImGui_Attach">ImGui_Attach</a></li>
        <li><a href="#ImGui_Begin">ImGui_Begin</a></li>
        <li><a href="#ImGui_BeginChild">ImGui_BeginChild</a></li>
        <li><a href="#ImGui_BeginChildFrame">ImGui_BeginChildFrame</a></li>
        <li><a href="#ImGui_BeginCombo">ImGui_BeginCombo</a></li>
        <li><a href="#ImGui_BeginDisabled">ImGui_BeginDisabled</a></li>
        <li><a href="#ImGui_BeginDragDropSource">ImGui_BeginDragDropSource</a></li>
        <li><a href="#ImGui_BeginDragDropTarget">ImGui_BeginDragDropTarget</a></li>
        <li><a href="#ImGui_BeginGroup">ImGui_BeginGroup</a></li>
        <li><a href="#ImGui_BeginListBox">ImGui_BeginListBox</a></li>
        <li><a href="#ImGui_BeginMenu">ImGui_BeginMenu</a></li>
        <li><a href="#ImGui_BeginMenuBar">ImGui_BeginMenuBar</a></li>
        <li><a href="#ImGui_BeginPopup">ImGui_BeginPopup</a></li>
        <li><a href="#ImGui_BeginPopupContextItem">ImGui_BeginPopupContextItem</a></li>
        <li><a href="#ImGui_BeginPopupContextWindow">ImGui_BeginPopupContextWindow</a></li>
        <li><a href="#ImGui_BeginPopupModal">ImGui_BeginPopupModal</a></li>
        <li><a href="#ImGui_BeginTabBar">ImGui_BeginTabBar</a></li>
        <li><a href="#ImGui_BeginTabItem">ImGui_BeginTabItem</a></li>
        <li><a href="#ImGui_BeginTable">ImGui_BeginTable</a></li>
        <li><a href="#ImGui_BeginTooltip">ImGui_BeginTooltip</a></li>
        <li><a href="#ImGui_Bullet">ImGui_Bullet</a></li>
        <li><a href="#ImGui_BulletText">ImGui_BulletText</a></li>
        <li><a href="#ImGui_Button">ImGui_Button</a></li>
        <li><a href="#ImGui_ButtonFlags_MouseButtonLeft">ImGui_ButtonFlags_MouseButtonLeft</a></li>
        <li><a href="#ImGui_ButtonFlags_MouseButtonMiddle">ImGui_ButtonFlags_MouseButtonMiddle</a></li>
        <li><a href="#ImGui_ButtonFlags_MouseButtonRight">ImGui_ButtonFlags_MouseButtonRight</a></li>
        <li><a href="#ImGui_ButtonFlags_None">ImGui_ButtonFlags_None</a></li>
        <li><a href="#ImGui_CalcItemWidth">ImGui_CalcItemWidth</a></li>
        <li><a href="#ImGui_CalcTextSize">ImGui_CalcTextSize</a></li>
        <li><a href="#ImGui_Checkbox">ImGui_Checkbox</a></li>
        <li><a href="#ImGui_CheckboxFlags">ImGui_CheckboxFlags</a></li>
        <li><a href="#ImGui_CloseCurrentPopup">ImGui_CloseCurrentPopup</a></li>
        <li><a href="#ImGui_Col_Border">ImGui_Col_Border</a></li>
        <li><a href="#ImGui_Col_BorderShadow">ImGui_Col_BorderShadow</a></li>
        <li><a href="#ImGui_Col_Button">ImGui_Col_Button</a></li>
        <li><a href="#ImGui_Col_ButtonActive">ImGui_Col_ButtonActive</a></li>
        <li><a href="#ImGui_Col_ButtonHovered">ImGui_Col_ButtonHovered</a></li>
        <li><a href="#ImGui_Col_CheckMark">ImGui_Col_CheckMark</a></li>
        <li><a href="#ImGui_Col_ChildBg">ImGui_Col_ChildBg</a></li>
        <li><a href="#ImGui_Col_DockingEmptyBg">ImGui_Col_DockingEmptyBg</a></li>
        <li><a href="#ImGui_Col_DockingPreview">ImGui_Col_DockingPreview</a></li>
        <li><a href="#ImGui_Col_DragDropTarget">ImGui_Col_DragDropTarget</a></li>
        <li><a href="#ImGui_Col_FrameBg">ImGui_Col_FrameBg</a></li>
        <li><a href="#ImGui_Col_FrameBgActive">ImGui_Col_FrameBgActive</a></li>
        <li><a href="#ImGui_Col_FrameBgHovered">ImGui_Col_FrameBgHovered</a></li>
        <li><a href="#ImGui_Col_Header">ImGui_Col_Header</a></li>
        <li><a href="#ImGui_Col_HeaderActive">ImGui_Col_HeaderActive</a></li>
        <li><a href="#ImGui_Col_HeaderHovered">ImGui_Col_HeaderHovered</a></li>
        <li><a href="#ImGui_Col_MenuBarBg">ImGui_Col_MenuBarBg</a></li>
        <li><a href="#ImGui_Col_ModalWindowDimBg">ImGui_Col_ModalWindowDimBg</a></li>
        <li><a href="#ImGui_Col_NavHighlight">ImGui_Col_NavHighlight</a></li>
        <li><a href="#ImGui_Col_NavWindowingDimBg">ImGui_Col_NavWindowingDimBg</a></li>
        <li><a href="#ImGui_Col_NavWindowingHighlight">ImGui_Col_NavWindowingHighlight</a></li>
        <li><a href="#ImGui_Col_PlotHistogram">ImGui_Col_PlotHistogram</a></li>
        <li><a href="#ImGui_Col_PlotHistogramHovered">ImGui_Col_PlotHistogramHovered</a></li>
        <li><a href="#ImGui_Col_PlotLines">ImGui_Col_PlotLines</a></li>
        <li><a href="#ImGui_Col_PlotLinesHovered">ImGui_Col_PlotLinesHovered</a></li>
        <li><a href="#ImGui_Col_PopupBg">ImGui_Col_PopupBg</a></li>
        <li><a href="#ImGui_Col_ResizeGrip">ImGui_Col_ResizeGrip</a></li>
        <li><a href="#ImGui_Col_ResizeGripActive">ImGui_Col_ResizeGripActive</a></li>
        <li><a href="#ImGui_Col_ResizeGripHovered">ImGui_Col_ResizeGripHovered</a></li>
        <li><a href="#ImGui_Col_ScrollbarBg">ImGui_Col_ScrollbarBg</a></li>
        <li><a href="#ImGui_Col_ScrollbarGrab">ImGui_Col_ScrollbarGrab</a></li>
        <li><a href="#ImGui_Col_ScrollbarGrabActive">ImGui_Col_ScrollbarGrabActive</a></li>
        <li><a href="#ImGui_Col_ScrollbarGrabHovered">ImGui_Col_ScrollbarGrabHovered</a></li>
        <li><a href="#ImGui_Col_Separator">ImGui_Col_Separator</a></li>
        <li><a href="#ImGui_Col_SeparatorActive">ImGui_Col_SeparatorActive</a></li>
        <li><a href="#ImGui_Col_SeparatorHovered">ImGui_Col_SeparatorHovered</a></li>
        <li><a href="#ImGui_Col_SliderGrab">ImGui_Col_SliderGrab</a></li>
        <li><a href="#ImGui_Col_SliderGrabActive">ImGui_Col_SliderGrabActive</a></li>
        <li><a href="#ImGui_Col_Tab">ImGui_Col_Tab</a></li>
        <li><a href="#ImGui_Col_TabActive">ImGui_Col_TabActive</a></li>
        <li><a href="#ImGui_Col_TabHovered">ImGui_Col_TabHovered</a></li>
        <li><a href="#ImGui_Col_TabUnfocused">ImGui_Col_TabUnfocused</a></li>
        <li><a href="#ImGui_Col_TabUnfocusedActive">ImGui_Col_TabUnfocusedActive</a></li>
        <li><a href="#ImGui_Col_TableBorderLight">ImGui_Col_TableBorderLight</a></li>
        <li><a href="#ImGui_Col_TableBorderStrong">ImGui_Col_TableBorderStrong</a></li>
        <li><a href="#ImGui_Col_TableHeaderBg">ImGui_Col_TableHeaderBg</a></li>
        <li><a href="#ImGui_Col_TableRowBg">ImGui_Col_TableRowBg</a></li>
        <li><a href="#ImGui_Col_TableRowBgAlt">ImGui_Col_TableRowBgAlt</a></li>
        <li><a href="#ImGui_Col_Text">ImGui_Col_Text</a></li>
        <li><a href="#ImGui_Col_TextDisabled">ImGui_Col_TextDisabled</a></li>
        <li><a href="#ImGui_Col_TextSelectedBg">ImGui_Col_TextSelectedBg</a></li>
        <li><a href="#ImGui_Col_TitleBg">ImGui_Col_TitleBg</a></li>
        <li><a href="#ImGui_Col_TitleBgActive">ImGui_Col_TitleBgActive</a></li>
        <li><a href="#ImGui_Col_TitleBgCollapsed">ImGui_Col_TitleBgCollapsed</a></li>
        <li><a href="#ImGui_Col_WindowBg">ImGui_Col_WindowBg</a></li>
        <li><a href="#ImGui_CollapsingHeader">ImGui_CollapsingHeader</a></li>
        <li><a href="#ImGui_ColorButton">ImGui_ColorButton</a></li>
        <li><a href="#ImGui_ColorConvertDouble4ToU32">ImGui_ColorConvertDouble4ToU32</a></li>
        <li><a href="#ImGui_ColorConvertHSVtoRGB">ImGui_ColorConvertHSVtoRGB</a></li>
        <li><a href="#ImGui_ColorConvertNative">ImGui_ColorConvertNative</a></li>
        <li><a href="#ImGui_ColorConvertRGBtoHSV">ImGui_ColorConvertRGBtoHSV</a></li>
        <li><a href="#ImGui_ColorConvertU32ToDouble4">ImGui_ColorConvertU32ToDouble4</a></li>
        <li><a href="#ImGui_ColorEdit3">ImGui_ColorEdit3</a></li>
        <li><a href="#ImGui_ColorEdit4">ImGui_ColorEdit4</a></li>
        <li><a href="#ImGui_ColorEditFlags_AlphaBar">ImGui_ColorEditFlags_AlphaBar</a></li>
        <li><a href="#ImGui_ColorEditFlags_AlphaPreview">ImGui_ColorEditFlags_AlphaPreview</a></li>
        <li><a href="#ImGui_ColorEditFlags_AlphaPreviewHalf">ImGui_ColorEditFlags_AlphaPreviewHalf</a></li>
        <li><a href="#ImGui_ColorEditFlags_DisplayHSV">ImGui_ColorEditFlags_DisplayHSV</a></li>
        <li><a href="#ImGui_ColorEditFlags_DisplayHex">ImGui_ColorEditFlags_DisplayHex</a></li>
        <li><a href="#ImGui_ColorEditFlags_DisplayRGB">ImGui_ColorEditFlags_DisplayRGB</a></li>
        <li><a href="#ImGui_ColorEditFlags_Float">ImGui_ColorEditFlags_Float</a></li>
        <li><a href="#ImGui_ColorEditFlags_InputHSV">ImGui_ColorEditFlags_InputHSV</a></li>
        <li><a href="#ImGui_ColorEditFlags_InputRGB">ImGui_ColorEditFlags_InputRGB</a></li>
        <li><a href="#ImGui_ColorEditFlags_NoAlpha">ImGui_ColorEditFlags_NoAlpha</a></li>
        <li><a href="#ImGui_ColorEditFlags_NoBorder">ImGui_ColorEditFlags_NoBorder</a></li>
        <li><a href="#ImGui_ColorEditFlags_NoDragDrop">ImGui_ColorEditFlags_NoDragDrop</a></li>
        <li><a href="#ImGui_ColorEditFlags_NoInputs">ImGui_ColorEditFlags_NoInputs</a></li>
        <li><a href="#ImGui_ColorEditFlags_NoLabel">ImGui_ColorEditFlags_NoLabel</a></li>
        <li><a href="#ImGui_ColorEditFlags_NoOptions">ImGui_ColorEditFlags_NoOptions</a></li>
        <li><a href="#ImGui_ColorEditFlags_NoPicker">ImGui_ColorEditFlags_NoPicker</a></li>
        <li><a href="#ImGui_ColorEditFlags_NoSidePreview">ImGui_ColorEditFlags_NoSidePreview</a></li>
        <li><a href="#ImGui_ColorEditFlags_NoSmallPreview">ImGui_ColorEditFlags_NoSmallPreview</a></li>
        <li><a href="#ImGui_ColorEditFlags_NoTooltip">ImGui_ColorEditFlags_NoTooltip</a></li>
        <li><a href="#ImGui_ColorEditFlags_None">ImGui_ColorEditFlags_None</a></li>
        <li><a href="#ImGui_ColorEditFlags_PickerHueBar">ImGui_ColorEditFlags_PickerHueBar</a></li>
        <li><a href="#ImGui_ColorEditFlags_PickerHueWheel">ImGui_ColorEditFlags_PickerHueWheel</a></li>
        <li><a href="#ImGui_ColorEditFlags_Uint8">ImGui_ColorEditFlags_Uint8</a></li>
        <li><a href="#ImGui_ColorPicker3">ImGui_ColorPicker3</a></li>
        <li><a href="#ImGui_ColorPicker4">ImGui_ColorPicker4</a></li>
        <li><a href="#ImGui_Combo">ImGui_Combo</a></li>
        <li><a href="#ImGui_ComboFlags_HeightLarge">ImGui_ComboFlags_HeightLarge</a></li>
        <li><a href="#ImGui_ComboFlags_HeightLargest">ImGui_ComboFlags_HeightLargest</a></li>
        <li><a href="#ImGui_ComboFlags_HeightRegular">ImGui_ComboFlags_HeightRegular</a></li>
        <li><a href="#ImGui_ComboFlags_HeightSmall">ImGui_ComboFlags_HeightSmall</a></li>
        <li><a href="#ImGui_ComboFlags_NoArrowButton">ImGui_ComboFlags_NoArrowButton</a></li>
        <li><a href="#ImGui_ComboFlags_NoPreview">ImGui_ComboFlags_NoPreview</a></li>
        <li><a href="#ImGui_ComboFlags_None">ImGui_ComboFlags_None</a></li>
        <li><a href="#ImGui_ComboFlags_PopupAlignLeft">ImGui_ComboFlags_PopupAlignLeft</a></li>
        <li><a href="#ImGui_Cond_Always">ImGui_Cond_Always</a></li>
        <li><a href="#ImGui_Cond_Appearing">ImGui_Cond_Appearing</a></li>
        <li><a href="#ImGui_Cond_FirstUseEver">ImGui_Cond_FirstUseEver</a></li>
        <li><a href="#ImGui_Cond_Once">ImGui_Cond_Once</a></li>
        <li><a href="#ImGui_ConfigFlags_DockingEnable">ImGui_ConfigFlags_DockingEnable</a></li>
        <li><a href="#ImGui_ConfigFlags_NavEnableKeyboard">ImGui_ConfigFlags_NavEnableKeyboard</a></li>
        <li><a href="#ImGui_ConfigFlags_NavEnableSetMousePos">ImGui_ConfigFlags_NavEnableSetMousePos</a></li>
        <li><a href="#ImGui_ConfigFlags_NavNoCaptureKeyboard">ImGui_ConfigFlags_NavNoCaptureKeyboard</a></li>
        <li><a href="#ImGui_ConfigFlags_NoMouse">ImGui_ConfigFlags_NoMouse</a></li>
        <li><a href="#ImGui_ConfigFlags_NoMouseCursorChange">ImGui_ConfigFlags_NoMouseCursorChange</a></li>
        <li><a href="#ImGui_ConfigFlags_NoSavedSettings">ImGui_ConfigFlags_NoSavedSettings</a></li>
        <li><a href="#ImGui_ConfigFlags_None">ImGui_ConfigFlags_None</a></li>
        <li><a href="#ImGui_ConfigVar_DebugBeginReturnValueLoop">ImGui_ConfigVar_DebugBeginReturnValueLoop</a></li>
        <li><a href="#ImGui_ConfigVar_DebugBeginReturnValueOnce">ImGui_ConfigVar_DebugBeginReturnValueOnce</a></li>
        <li><a href="#ImGui_ConfigVar_DockingNoSplit">ImGui_ConfigVar_DockingNoSplit</a></li>
        <li><a href="#ImGui_ConfigVar_DockingTransparentPayload">ImGui_ConfigVar_DockingTransparentPayload</a></li>
        <li><a href="#ImGui_ConfigVar_DockingWithShift">ImGui_ConfigVar_DockingWithShift</a></li>
        <li><a href="#ImGui_ConfigVar_DragClickToInputText">ImGui_ConfigVar_DragClickToInputText</a></li>
        <li><a href="#ImGui_ConfigVar_Flags">ImGui_ConfigVar_Flags</a></li>
        <li><a href="#ImGui_ConfigVar_HoverDelayNormal">ImGui_ConfigVar_HoverDelayNormal</a></li>
        <li><a href="#ImGui_ConfigVar_HoverDelayShort">ImGui_ConfigVar_HoverDelayShort</a></li>
        <li><a href="#ImGui_ConfigVar_InputTextCursorBlink">ImGui_ConfigVar_InputTextCursorBlink</a></li>
        <li><a href="#ImGui_ConfigVar_InputTextEnterKeepActive">ImGui_ConfigVar_InputTextEnterKeepActive</a></li>
        <li><a href="#ImGui_ConfigVar_InputTrickleEventQueue">ImGui_ConfigVar_InputTrickleEventQueue</a></li>
        <li><a href="#ImGui_ConfigVar_KeyRepeatDelay">ImGui_ConfigVar_KeyRepeatDelay</a></li>
        <li><a href="#ImGui_ConfigVar_KeyRepeatRate">ImGui_ConfigVar_KeyRepeatRate</a></li>
        <li><a href="#ImGui_ConfigVar_MacOSXBehaviors">ImGui_ConfigVar_MacOSXBehaviors</a></li>
        <li><a href="#ImGui_ConfigVar_MouseDoubleClickMaxDist">ImGui_ConfigVar_MouseDoubleClickMaxDist</a></li>
        <li><a href="#ImGui_ConfigVar_MouseDoubleClickTime">ImGui_ConfigVar_MouseDoubleClickTime</a></li>
        <li><a href="#ImGui_ConfigVar_MouseDragThreshold">ImGui_ConfigVar_MouseDragThreshold</a></li>
        <li><a href="#ImGui_ConfigVar_ViewportsNoDecoration">ImGui_ConfigVar_ViewportsNoDecoration</a></li>
        <li><a href="#ImGui_ConfigVar_WindowsMoveFromTitleBarOnly">ImGui_ConfigVar_WindowsMoveFromTitleBarOnly</a></li>
        <li><a href="#ImGui_ConfigVar_WindowsResizeFromEdges">ImGui_ConfigVar_WindowsResizeFromEdges</a></li>
        <li><a href="#ImGui_CreateContext">ImGui_CreateContext</a></li>
        <li><a href="#ImGui_CreateDrawListSplitter">ImGui_CreateDrawListSplitter</a></li>
        <li><a href="#ImGui_CreateFont">ImGui_CreateFont</a></li>
        <li><a href="#ImGui_CreateFunctionFromEEL">ImGui_CreateFunctionFromEEL</a></li>
        <li><a href="#ImGui_CreateImage">ImGui_CreateImage</a></li>
        <li><a href="#ImGui_CreateImageFromMem">ImGui_CreateImageFromMem</a></li>
        <li><a href="#ImGui_CreateImageSet">ImGui_CreateImageSet</a></li>
        <li><a href="#ImGui_CreateListClipper">ImGui_CreateListClipper</a></li>
        <li><a href="#ImGui_CreateTextFilter">ImGui_CreateTextFilter</a></li>
        <li><a href="#ImGui_DebugTextEncoding">ImGui_DebugTextEncoding</a></li>
        <li><a href="#ImGui_DestroyContext">ImGui_DestroyContext</a></li>
        <li><a href="#ImGui_Detach">ImGui_Detach</a></li>
        <li><a href="#ImGui_Dir_Down">ImGui_Dir_Down</a></li>
        <li><a href="#ImGui_Dir_Left">ImGui_Dir_Left</a></li>
        <li><a href="#ImGui_Dir_None">ImGui_Dir_None</a></li>
        <li><a href="#ImGui_Dir_Right">ImGui_Dir_Right</a></li>
        <li><a href="#ImGui_Dir_Up">ImGui_Dir_Up</a></li>
        <li><a href="#ImGui_DragDouble">ImGui_DragDouble</a></li>
        <li><a href="#ImGui_DragDouble2">ImGui_DragDouble2</a></li>
        <li><a href="#ImGui_DragDouble3">ImGui_DragDouble3</a></li>
        <li><a href="#ImGui_DragDouble4">ImGui_DragDouble4</a></li>
        <li><a href="#ImGui_DragDoubleN">ImGui_DragDoubleN</a></li>
        <li><a href="#ImGui_DragDropFlags_AcceptBeforeDelivery">ImGui_DragDropFlags_AcceptBeforeDelivery</a></li>
        <li><a href="#ImGui_DragDropFlags_AcceptNoDrawDefaultRect">ImGui_DragDropFlags_AcceptNoDrawDefaultRect</a></li>
        <li><a href="#ImGui_DragDropFlags_AcceptNoPreviewTooltip">ImGui_DragDropFlags_AcceptNoPreviewTooltip</a></li>
        <li><a href="#ImGui_DragDropFlags_AcceptPeekOnly">ImGui_DragDropFlags_AcceptPeekOnly</a></li>
        <li><a href="#ImGui_DragDropFlags_None">ImGui_DragDropFlags_None</a></li>
        <li><a href="#ImGui_DragDropFlags_SourceAllowNullID">ImGui_DragDropFlags_SourceAllowNullID</a></li>
        <li><a href="#ImGui_DragDropFlags_SourceAutoExpirePayload">ImGui_DragDropFlags_SourceAutoExpirePayload</a></li>
        <li><a href="#ImGui_DragDropFlags_SourceExtern">ImGui_DragDropFlags_SourceExtern</a></li>
        <li><a href="#ImGui_DragDropFlags_SourceNoDisableHover">ImGui_DragDropFlags_SourceNoDisableHover</a></li>
        <li><a href="#ImGui_DragDropFlags_SourceNoHoldToOpenOthers">ImGui_DragDropFlags_SourceNoHoldToOpenOthers</a></li>
        <li><a href="#ImGui_DragDropFlags_SourceNoPreviewTooltip">ImGui_DragDropFlags_SourceNoPreviewTooltip</a></li>
        <li><a href="#ImGui_DragFloatRange2">ImGui_DragFloatRange2</a></li>
        <li><a href="#ImGui_DragInt">ImGui_DragInt</a></li>
        <li><a href="#ImGui_DragInt2">ImGui_DragInt2</a></li>
        <li><a href="#ImGui_DragInt3">ImGui_DragInt3</a></li>
        <li><a href="#ImGui_DragInt4">ImGui_DragInt4</a></li>
        <li><a href="#ImGui_DragIntRange2">ImGui_DragIntRange2</a></li>
        <li><a href="#ImGui_DrawFlags_Closed">ImGui_DrawFlags_Closed</a></li>
        <li><a href="#ImGui_DrawFlags_None">ImGui_DrawFlags_None</a></li>
        <li><a href="#ImGui_DrawFlags_RoundCornersAll">ImGui_DrawFlags_RoundCornersAll</a></li>
        <li><a href="#ImGui_DrawFlags_RoundCornersBottom">ImGui_DrawFlags_RoundCornersBottom</a></li>
        <li><a href="#ImGui_DrawFlags_RoundCornersBottomLeft">ImGui_DrawFlags_RoundCornersBottomLeft</a></li>
        <li><a href="#ImGui_DrawFlags_RoundCornersBottomRight">ImGui_DrawFlags_RoundCornersBottomRight</a></li>
        <li><a href="#ImGui_DrawFlags_RoundCornersLeft">ImGui_DrawFlags_RoundCornersLeft</a></li>
        <li><a href="#ImGui_DrawFlags_RoundCornersNone">ImGui_DrawFlags_RoundCornersNone</a></li>
        <li><a href="#ImGui_DrawFlags_RoundCornersRight">ImGui_DrawFlags_RoundCornersRight</a></li>
        <li><a href="#ImGui_DrawFlags_RoundCornersTop">ImGui_DrawFlags_RoundCornersTop</a></li>
        <li><a href="#ImGui_DrawFlags_RoundCornersTopLeft">ImGui_DrawFlags_RoundCornersTopLeft</a></li>
        <li><a href="#ImGui_DrawFlags_RoundCornersTopRight">ImGui_DrawFlags_RoundCornersTopRight</a></li>
        <li><a href="#ImGui_DrawListSplitter_Clear">ImGui_DrawListSplitter_Clear</a></li>
        <li><a href="#ImGui_DrawListSplitter_Merge">ImGui_DrawListSplitter_Merge</a></li>
        <li><a href="#ImGui_DrawListSplitter_SetCurrentChannel">ImGui_DrawListSplitter_SetCurrentChannel</a></li>
        <li><a href="#ImGui_DrawListSplitter_Split">ImGui_DrawListSplitter_Split</a></li>
        <li><a href="#ImGui_DrawList_AddBezierCubic">ImGui_DrawList_AddBezierCubic</a></li>
        <li><a href="#ImGui_DrawList_AddBezierQuadratic">ImGui_DrawList_AddBezierQuadratic</a></li>
        <li><a href="#ImGui_DrawList_AddCircle">ImGui_DrawList_AddCircle</a></li>
        <li><a href="#ImGui_DrawList_AddCircleFilled">ImGui_DrawList_AddCircleFilled</a></li>
        <li><a href="#ImGui_DrawList_AddConvexPolyFilled">ImGui_DrawList_AddConvexPolyFilled</a></li>
        <li><a href="#ImGui_DrawList_AddImage">ImGui_DrawList_AddImage</a></li>
        <li><a href="#ImGui_DrawList_AddImageQuad">ImGui_DrawList_AddImageQuad</a></li>
        <li><a href="#ImGui_DrawList_AddImageRounded">ImGui_DrawList_AddImageRounded</a></li>
        <li><a href="#ImGui_DrawList_AddLine">ImGui_DrawList_AddLine</a></li>
        <li><a href="#ImGui_DrawList_AddNgon">ImGui_DrawList_AddNgon</a></li>
        <li><a href="#ImGui_DrawList_AddNgonFilled">ImGui_DrawList_AddNgonFilled</a></li>
        <li><a href="#ImGui_DrawList_AddPolyline">ImGui_DrawList_AddPolyline</a></li>
        <li><a href="#ImGui_DrawList_AddQuad">ImGui_DrawList_AddQuad</a></li>
        <li><a href="#ImGui_DrawList_AddQuadFilled">ImGui_DrawList_AddQuadFilled</a></li>
        <li><a href="#ImGui_DrawList_AddRect">ImGui_DrawList_AddRect</a></li>
        <li><a href="#ImGui_DrawList_AddRectFilled">ImGui_DrawList_AddRectFilled</a></li>
        <li><a href="#ImGui_DrawList_AddRectFilledMultiColor">ImGui_DrawList_AddRectFilledMultiColor</a></li>
        <li><a href="#ImGui_DrawList_AddText">ImGui_DrawList_AddText</a></li>
        <li><a href="#ImGui_DrawList_AddTextEx">ImGui_DrawList_AddTextEx</a></li>
        <li><a href="#ImGui_DrawList_AddTriangle">ImGui_DrawList_AddTriangle</a></li>
        <li><a href="#ImGui_DrawList_AddTriangleFilled">ImGui_DrawList_AddTriangleFilled</a></li>
        <li><a href="#ImGui_DrawList_PathArcTo">ImGui_DrawList_PathArcTo</a></li>
        <li><a href="#ImGui_DrawList_PathArcToFast">ImGui_DrawList_PathArcToFast</a></li>
        <li><a href="#ImGui_DrawList_PathBezierCubicCurveTo">ImGui_DrawList_PathBezierCubicCurveTo</a></li>
        <li><a href="#ImGui_DrawList_PathBezierQuadraticCurveTo">ImGui_DrawList_PathBezierQuadraticCurveTo</a></li>
        <li><a href="#ImGui_DrawList_PathClear">ImGui_DrawList_PathClear</a></li>
        <li><a href="#ImGui_DrawList_PathFillConvex">ImGui_DrawList_PathFillConvex</a></li>
        <li><a href="#ImGui_DrawList_PathLineTo">ImGui_DrawList_PathLineTo</a></li>
        <li><a href="#ImGui_DrawList_PathRect">ImGui_DrawList_PathRect</a></li>
        <li><a href="#ImGui_DrawList_PathStroke">ImGui_DrawList_PathStroke</a></li>
        <li><a href="#ImGui_DrawList_PopClipRect">ImGui_DrawList_PopClipRect</a></li>
        <li><a href="#ImGui_DrawList_PushClipRect">ImGui_DrawList_PushClipRect</a></li>
        <li><a href="#ImGui_DrawList_PushClipRectFullScreen">ImGui_DrawList_PushClipRectFullScreen</a></li>
        <li><a href="#ImGui_Dummy">ImGui_Dummy</a></li>
        <li><a href="#ImGui_End">ImGui_End</a></li>
        <li><a href="#ImGui_EndChild">ImGui_EndChild</a></li>
        <li><a href="#ImGui_EndChildFrame">ImGui_EndChildFrame</a></li>
        <li><a href="#ImGui_EndCombo">ImGui_EndCombo</a></li>
        <li><a href="#ImGui_EndDisabled">ImGui_EndDisabled</a></li>
        <li><a href="#ImGui_EndDragDropSource">ImGui_EndDragDropSource</a></li>
        <li><a href="#ImGui_EndDragDropTarget">ImGui_EndDragDropTarget</a></li>
        <li><a href="#ImGui_EndGroup">ImGui_EndGroup</a></li>
        <li><a href="#ImGui_EndListBox">ImGui_EndListBox</a></li>
        <li><a href="#ImGui_EndMenu">ImGui_EndMenu</a></li>
        <li><a href="#ImGui_EndMenuBar">ImGui_EndMenuBar</a></li>
        <li><a href="#ImGui_EndPopup">ImGui_EndPopup</a></li>
        <li><a href="#ImGui_EndTabBar">ImGui_EndTabBar</a></li>
        <li><a href="#ImGui_EndTabItem">ImGui_EndTabItem</a></li>
        <li><a href="#ImGui_EndTable">ImGui_EndTable</a></li>
        <li><a href="#ImGui_EndTooltip">ImGui_EndTooltip</a></li>
        <li><a href="#ImGui_FocusedFlags_AnyWindow">ImGui_FocusedFlags_AnyWindow</a></li>
        <li><a href="#ImGui_FocusedFlags_ChildWindows">ImGui_FocusedFlags_ChildWindows</a></li>
        <li><a href="#ImGui_FocusedFlags_DockHierarchy">ImGui_FocusedFlags_DockHierarchy</a></li>
        <li><a href="#ImGui_FocusedFlags_NoPopupHierarchy">ImGui_FocusedFlags_NoPopupHierarchy</a></li>
        <li><a href="#ImGui_FocusedFlags_None">ImGui_FocusedFlags_None</a></li>
        <li><a href="#ImGui_FocusedFlags_RootAndChildWindows">ImGui_FocusedFlags_RootAndChildWindows</a></li>
        <li><a href="#ImGui_FocusedFlags_RootWindow">ImGui_FocusedFlags_RootWindow</a></li>
        <li><a href="#ImGui_FontFlags_Bold">ImGui_FontFlags_Bold</a></li>
        <li><a href="#ImGui_FontFlags_Italic">ImGui_FontFlags_Italic</a></li>
        <li><a href="#ImGui_FontFlags_None">ImGui_FontFlags_None</a></li>
        <li><a href="#ImGui_Function_Execute">ImGui_Function_Execute</a></li>
        <li><a href="#ImGui_Function_GetValue">ImGui_Function_GetValue</a></li>
        <li><a href="#ImGui_Function_GetValue_Array">ImGui_Function_GetValue_Array</a></li>
        <li><a href="#ImGui_Function_GetValue_String">ImGui_Function_GetValue_String</a></li>
        <li><a href="#ImGui_Function_SetValue">ImGui_Function_SetValue</a></li>
        <li><a href="#ImGui_Function_SetValue_Array">ImGui_Function_SetValue_Array</a></li>
        <li><a href="#ImGui_Function_SetValue_String">ImGui_Function_SetValue_String</a></li>
        <li><a href="#ImGui_GetBackgroundDrawList">ImGui_GetBackgroundDrawList</a></li>
        <li><a href="#ImGui_GetClipboardText">ImGui_GetClipboardText</a></li>
        <li><a href="#ImGui_GetColor">ImGui_GetColor</a></li>
        <li><a href="#ImGui_GetColorEx">ImGui_GetColorEx</a></li>
        <li><a href="#ImGui_GetConfigVar">ImGui_GetConfigVar</a></li>
        <li><a href="#ImGui_GetContentRegionAvail">ImGui_GetContentRegionAvail</a></li>
        <li><a href="#ImGui_GetContentRegionMax">ImGui_GetContentRegionMax</a></li>
        <li><a href="#ImGui_GetCursorPos">ImGui_GetCursorPos</a></li>
        <li><a href="#ImGui_GetCursorPosX">ImGui_GetCursorPosX</a></li>
        <li><a href="#ImGui_GetCursorPosY">ImGui_GetCursorPosY</a></li>
        <li><a href="#ImGui_GetCursorScreenPos">ImGui_GetCursorScreenPos</a></li>
        <li><a href="#ImGui_GetCursorStartPos">ImGui_GetCursorStartPos</a></li>
        <li><a href="#ImGui_GetDeltaTime">ImGui_GetDeltaTime</a></li>
        <li><a href="#ImGui_GetDragDropPayload">ImGui_GetDragDropPayload</a></li>
        <li><a href="#ImGui_GetDragDropPayloadFile">ImGui_GetDragDropPayloadFile</a></li>
        <li><a href="#ImGui_GetFont">ImGui_GetFont</a></li>
        <li><a href="#ImGui_GetFontSize">ImGui_GetFontSize</a></li>
        <li><a href="#ImGui_GetForegroundDrawList">ImGui_GetForegroundDrawList</a></li>
        <li><a href="#ImGui_GetFrameCount">ImGui_GetFrameCount</a></li>
        <li><a href="#ImGui_GetFrameHeight">ImGui_GetFrameHeight</a></li>
        <li><a href="#ImGui_GetFrameHeightWithSpacing">ImGui_GetFrameHeightWithSpacing</a></li>
        <li><a href="#ImGui_GetFramerate">ImGui_GetFramerate</a></li>
        <li><a href="#ImGui_GetInputQueueCharacter">ImGui_GetInputQueueCharacter</a></li>
        <li><a href="#ImGui_GetItemRectMax">ImGui_GetItemRectMax</a></li>
        <li><a href="#ImGui_GetItemRectMin">ImGui_GetItemRectMin</a></li>
        <li><a href="#ImGui_GetItemRectSize">ImGui_GetItemRectSize</a></li>
        <li><a href="#ImGui_GetKeyDownDuration">ImGui_GetKeyDownDuration</a></li>
        <li><a href="#ImGui_GetKeyMods">ImGui_GetKeyMods</a></li>
        <li><a href="#ImGui_GetKeyPressedAmount">ImGui_GetKeyPressedAmount</a></li>
        <li><a href="#ImGui_GetMainViewport">ImGui_GetMainViewport</a></li>
        <li><a href="#ImGui_GetMouseClickedCount">ImGui_GetMouseClickedCount</a></li>
        <li><a href="#ImGui_GetMouseClickedPos">ImGui_GetMouseClickedPos</a></li>
        <li><a href="#ImGui_GetMouseCursor">ImGui_GetMouseCursor</a></li>
        <li><a href="#ImGui_GetMouseDelta">ImGui_GetMouseDelta</a></li>
        <li><a href="#ImGui_GetMouseDownDuration">ImGui_GetMouseDownDuration</a></li>
        <li><a href="#ImGui_GetMouseDragDelta">ImGui_GetMouseDragDelta</a></li>
        <li><a href="#ImGui_GetMousePos">ImGui_GetMousePos</a></li>
        <li><a href="#ImGui_GetMousePosOnOpeningCurrentPopup">ImGui_GetMousePosOnOpeningCurrentPopup</a></li>
        <li><a href="#ImGui_GetMouseWheel">ImGui_GetMouseWheel</a></li>
        <li><a href="#ImGui_GetScrollMaxX">ImGui_GetScrollMaxX</a></li>
        <li><a href="#ImGui_GetScrollMaxY">ImGui_GetScrollMaxY</a></li>
        <li><a href="#ImGui_GetScrollX">ImGui_GetScrollX</a></li>
        <li><a href="#ImGui_GetScrollY">ImGui_GetScrollY</a></li>
        <li><a href="#ImGui_GetStyleColor">ImGui_GetStyleColor</a></li>
        <li><a href="#ImGui_GetStyleVar">ImGui_GetStyleVar</a></li>
        <li><a href="#ImGui_GetTextLineHeight">ImGui_GetTextLineHeight</a></li>
        <li><a href="#ImGui_GetTextLineHeightWithSpacing">ImGui_GetTextLineHeightWithSpacing</a></li>
        <li><a href="#ImGui_GetTime">ImGui_GetTime</a></li>
        <li><a href="#ImGui_GetTreeNodeToLabelSpacing">ImGui_GetTreeNodeToLabelSpacing</a></li>
        <li><a href="#ImGui_GetVersion">ImGui_GetVersion</a></li>
        <li><a href="#ImGui_GetWindowContentRegionMax">ImGui_GetWindowContentRegionMax</a></li>
        <li><a href="#ImGui_GetWindowContentRegionMin">ImGui_GetWindowContentRegionMin</a></li>
        <li><a href="#ImGui_GetWindowDockID">ImGui_GetWindowDockID</a></li>
        <li><a href="#ImGui_GetWindowDpiScale">ImGui_GetWindowDpiScale</a></li>
        <li><a href="#ImGui_GetWindowDrawList">ImGui_GetWindowDrawList</a></li>
        <li><a href="#ImGui_GetWindowHeight">ImGui_GetWindowHeight</a></li>
        <li><a href="#ImGui_GetWindowPos">ImGui_GetWindowPos</a></li>
        <li><a href="#ImGui_GetWindowSize">ImGui_GetWindowSize</a></li>
        <li><a href="#ImGui_GetWindowViewport">ImGui_GetWindowViewport</a></li>
        <li><a href="#ImGui_GetWindowWidth">ImGui_GetWindowWidth</a></li>
        <li><a href="#ImGui_HoveredFlags_AllowWhenBlockedByActiveItem">ImGui_HoveredFlags_AllowWhenBlockedByActiveItem</a></li>
        <li><a href="#ImGui_HoveredFlags_AllowWhenBlockedByPopup">ImGui_HoveredFlags_AllowWhenBlockedByPopup</a></li>
        <li><a href="#ImGui_HoveredFlags_AllowWhenDisabled">ImGui_HoveredFlags_AllowWhenDisabled</a></li>
        <li><a href="#ImGui_HoveredFlags_AllowWhenOverlapped">ImGui_HoveredFlags_AllowWhenOverlapped</a></li>
        <li><a href="#ImGui_HoveredFlags_AnyWindow">ImGui_HoveredFlags_AnyWindow</a></li>
        <li><a href="#ImGui_HoveredFlags_ChildWindows">ImGui_HoveredFlags_ChildWindows</a></li>
        <li><a href="#ImGui_HoveredFlags_DelayNormal">ImGui_HoveredFlags_DelayNormal</a></li>
        <li><a href="#ImGui_HoveredFlags_DelayShort">ImGui_HoveredFlags_DelayShort</a></li>
        <li><a href="#ImGui_HoveredFlags_DockHierarchy">ImGui_HoveredFlags_DockHierarchy</a></li>
        <li><a href="#ImGui_HoveredFlags_NoNavOverride">ImGui_HoveredFlags_NoNavOverride</a></li>
        <li><a href="#ImGui_HoveredFlags_NoPopupHierarchy">ImGui_HoveredFlags_NoPopupHierarchy</a></li>
        <li><a href="#ImGui_HoveredFlags_NoSharedDelay">ImGui_HoveredFlags_NoSharedDelay</a></li>
        <li><a href="#ImGui_HoveredFlags_None">ImGui_HoveredFlags_None</a></li>
        <li><a href="#ImGui_HoveredFlags_RectOnly">ImGui_HoveredFlags_RectOnly</a></li>
        <li><a href="#ImGui_HoveredFlags_RootAndChildWindows">ImGui_HoveredFlags_RootAndChildWindows</a></li>
        <li><a href="#ImGui_HoveredFlags_RootWindow">ImGui_HoveredFlags_RootWindow</a></li>
        <li><a href="#ImGui_Image">ImGui_Image</a></li>
        <li><a href="#ImGui_ImageButton">ImGui_ImageButton</a></li>
        <li><a href="#ImGui_ImageSet_Add">ImGui_ImageSet_Add</a></li>
        <li><a href="#ImGui_Image_GetSize">ImGui_Image_GetSize</a></li>
        <li><a href="#ImGui_Indent">ImGui_Indent</a></li>
        <li><a href="#ImGui_InputDouble">ImGui_InputDouble</a></li>
        <li><a href="#ImGui_InputDouble2">ImGui_InputDouble2</a></li>
        <li><a href="#ImGui_InputDouble3">ImGui_InputDouble3</a></li>
        <li><a href="#ImGui_InputDouble4">ImGui_InputDouble4</a></li>
        <li><a href="#ImGui_InputDoubleN">ImGui_InputDoubleN</a></li>
        <li><a href="#ImGui_InputInt">ImGui_InputInt</a></li>
        <li><a href="#ImGui_InputInt2">ImGui_InputInt2</a></li>
        <li><a href="#ImGui_InputInt3">ImGui_InputInt3</a></li>
        <li><a href="#ImGui_InputInt4">ImGui_InputInt4</a></li>
        <li><a href="#ImGui_InputText">ImGui_InputText</a></li>
        <li><a href="#ImGui_InputTextFlags_AllowTabInput">ImGui_InputTextFlags_AllowTabInput</a></li>
        <li><a href="#ImGui_InputTextFlags_AlwaysOverwrite">ImGui_InputTextFlags_AlwaysOverwrite</a></li>
        <li><a href="#ImGui_InputTextFlags_AutoSelectAll">ImGui_InputTextFlags_AutoSelectAll</a></li>
        <li><a href="#ImGui_InputTextFlags_CallbackAlways">ImGui_InputTextFlags_CallbackAlways</a></li>
        <li><a href="#ImGui_InputTextFlags_CallbackCharFilter">ImGui_InputTextFlags_CallbackCharFilter</a></li>
        <li><a href="#ImGui_InputTextFlags_CallbackCompletion">ImGui_InputTextFlags_CallbackCompletion</a></li>
        <li><a href="#ImGui_InputTextFlags_CallbackEdit">ImGui_InputTextFlags_CallbackEdit</a></li>
        <li><a href="#ImGui_InputTextFlags_CallbackHistory">ImGui_InputTextFlags_CallbackHistory</a></li>
        <li><a href="#ImGui_InputTextFlags_CharsDecimal">ImGui_InputTextFlags_CharsDecimal</a></li>
        <li><a href="#ImGui_InputTextFlags_CharsHexadecimal">ImGui_InputTextFlags_CharsHexadecimal</a></li>
        <li><a href="#ImGui_InputTextFlags_CharsNoBlank">ImGui_InputTextFlags_CharsNoBlank</a></li>
        <li><a href="#ImGui_InputTextFlags_CharsScientific">ImGui_InputTextFlags_CharsScientific</a></li>
        <li><a href="#ImGui_InputTextFlags_CharsUppercase">ImGui_InputTextFlags_CharsUppercase</a></li>
        <li><a href="#ImGui_InputTextFlags_CtrlEnterForNewLine">ImGui_InputTextFlags_CtrlEnterForNewLine</a></li>
        <li><a href="#ImGui_InputTextFlags_EnterReturnsTrue">ImGui_InputTextFlags_EnterReturnsTrue</a></li>
        <li><a href="#ImGui_InputTextFlags_EscapeClearsAll">ImGui_InputTextFlags_EscapeClearsAll</a></li>
        <li><a href="#ImGui_InputTextFlags_NoHorizontalScroll">ImGui_InputTextFlags_NoHorizontalScroll</a></li>
        <li><a href="#ImGui_InputTextFlags_NoUndoRedo">ImGui_InputTextFlags_NoUndoRedo</a></li>
        <li><a href="#ImGui_InputTextFlags_None">ImGui_InputTextFlags_None</a></li>
        <li><a href="#ImGui_InputTextFlags_Password">ImGui_InputTextFlags_Password</a></li>
        <li><a href="#ImGui_InputTextFlags_ReadOnly">ImGui_InputTextFlags_ReadOnly</a></li>
        <li><a href="#ImGui_InputTextMultiline">ImGui_InputTextMultiline</a></li>
        <li><a href="#ImGui_InputTextWithHint">ImGui_InputTextWithHint</a></li>
        <li><a href="#ImGui_InvisibleButton">ImGui_InvisibleButton</a></li>
        <li><a href="#ImGui_IsAnyItemActive">ImGui_IsAnyItemActive</a></li>
        <li><a href="#ImGui_IsAnyItemFocused">ImGui_IsAnyItemFocused</a></li>
        <li><a href="#ImGui_IsAnyItemHovered">ImGui_IsAnyItemHovered</a></li>
        <li><a href="#ImGui_IsAnyMouseDown">ImGui_IsAnyMouseDown</a></li>
        <li><a href="#ImGui_IsItemActivated">ImGui_IsItemActivated</a></li>
        <li><a href="#ImGui_IsItemActive">ImGui_IsItemActive</a></li>
        <li><a href="#ImGui_IsItemClicked">ImGui_IsItemClicked</a></li>
        <li><a href="#ImGui_IsItemDeactivated">ImGui_IsItemDeactivated</a></li>
        <li><a href="#ImGui_IsItemDeactivatedAfterEdit">ImGui_IsItemDeactivatedAfterEdit</a></li>
        <li><a href="#ImGui_IsItemEdited">ImGui_IsItemEdited</a></li>
        <li><a href="#ImGui_IsItemFocused">ImGui_IsItemFocused</a></li>
        <li><a href="#ImGui_IsItemHovered">ImGui_IsItemHovered</a></li>
        <li><a href="#ImGui_IsItemToggledOpen">ImGui_IsItemToggledOpen</a></li>
        <li><a href="#ImGui_IsItemVisible">ImGui_IsItemVisible</a></li>
        <li><a href="#ImGui_IsKeyDown">ImGui_IsKeyDown</a></li>
        <li><a href="#ImGui_IsKeyPressed">ImGui_IsKeyPressed</a></li>
        <li><a href="#ImGui_IsKeyReleased">ImGui_IsKeyReleased</a></li>
        <li><a href="#ImGui_IsMouseClicked">ImGui_IsMouseClicked</a></li>
        <li><a href="#ImGui_IsMouseDoubleClicked">ImGui_IsMouseDoubleClicked</a></li>
        <li><a href="#ImGui_IsMouseDown">ImGui_IsMouseDown</a></li>
        <li><a href="#ImGui_IsMouseDragging">ImGui_IsMouseDragging</a></li>
        <li><a href="#ImGui_IsMouseHoveringRect">ImGui_IsMouseHoveringRect</a></li>
        <li><a href="#ImGui_IsMousePosValid">ImGui_IsMousePosValid</a></li>
        <li><a href="#ImGui_IsMouseReleased">ImGui_IsMouseReleased</a></li>
        <li><a href="#ImGui_IsPopupOpen">ImGui_IsPopupOpen</a></li>
        <li><a href="#ImGui_IsRectVisible">ImGui_IsRectVisible</a></li>
        <li><a href="#ImGui_IsRectVisibleEx">ImGui_IsRectVisibleEx</a></li>
        <li><a href="#ImGui_IsWindowAppearing">ImGui_IsWindowAppearing</a></li>
        <li><a href="#ImGui_IsWindowDocked">ImGui_IsWindowDocked</a></li>
        <li><a href="#ImGui_IsWindowFocused">ImGui_IsWindowFocused</a></li>
        <li><a href="#ImGui_IsWindowHovered">ImGui_IsWindowHovered</a></li>
        <li><a href="#ImGui_Key_0">ImGui_Key_0</a></li>
        <li><a href="#ImGui_Key_1">ImGui_Key_1</a></li>
        <li><a href="#ImGui_Key_2">ImGui_Key_2</a></li>
        <li><a href="#ImGui_Key_3">ImGui_Key_3</a></li>
        <li><a href="#ImGui_Key_4">ImGui_Key_4</a></li>
        <li><a href="#ImGui_Key_5">ImGui_Key_5</a></li>
        <li><a href="#ImGui_Key_6">ImGui_Key_6</a></li>
        <li><a href="#ImGui_Key_7">ImGui_Key_7</a></li>
        <li><a href="#ImGui_Key_8">ImGui_Key_8</a></li>
        <li><a href="#ImGui_Key_9">ImGui_Key_9</a></li>
        <li><a href="#ImGui_Key_A">ImGui_Key_A</a></li>
        <li><a href="#ImGui_Key_Apostrophe">ImGui_Key_Apostrophe</a></li>
        <li><a href="#ImGui_Key_B">ImGui_Key_B</a></li>
        <li><a href="#ImGui_Key_Backslash">ImGui_Key_Backslash</a></li>
        <li><a href="#ImGui_Key_Backspace">ImGui_Key_Backspace</a></li>
        <li><a href="#ImGui_Key_C">ImGui_Key_C</a></li>
        <li><a href="#ImGui_Key_CapsLock">ImGui_Key_CapsLock</a></li>
        <li><a href="#ImGui_Key_Comma">ImGui_Key_Comma</a></li>
        <li><a href="#ImGui_Key_D">ImGui_Key_D</a></li>
        <li><a href="#ImGui_Key_Delete">ImGui_Key_Delete</a></li>
        <li><a href="#ImGui_Key_DownArrow">ImGui_Key_DownArrow</a></li>
        <li><a href="#ImGui_Key_E">ImGui_Key_E</a></li>
        <li><a href="#ImGui_Key_End">ImGui_Key_End</a></li>
        <li><a href="#ImGui_Key_Enter">ImGui_Key_Enter</a></li>
        <li><a href="#ImGui_Key_Equal">ImGui_Key_Equal</a></li>
        <li><a href="#ImGui_Key_Escape">ImGui_Key_Escape</a></li>
        <li><a href="#ImGui_Key_F">ImGui_Key_F</a></li>
        <li><a href="#ImGui_Key_F1">ImGui_Key_F1</a></li>
        <li><a href="#ImGui_Key_F10">ImGui_Key_F10</a></li>
        <li><a href="#ImGui_Key_F11">ImGui_Key_F11</a></li>
        <li><a href="#ImGui_Key_F12">ImGui_Key_F12</a></li>
        <li><a href="#ImGui_Key_F2">ImGui_Key_F2</a></li>
        <li><a href="#ImGui_Key_F3">ImGui_Key_F3</a></li>
        <li><a href="#ImGui_Key_F4">ImGui_Key_F4</a></li>
        <li><a href="#ImGui_Key_F5">ImGui_Key_F5</a></li>
        <li><a href="#ImGui_Key_F6">ImGui_Key_F6</a></li>
        <li><a href="#ImGui_Key_F7">ImGui_Key_F7</a></li>
        <li><a href="#ImGui_Key_F8">ImGui_Key_F8</a></li>
        <li><a href="#ImGui_Key_F9">ImGui_Key_F9</a></li>
        <li><a href="#ImGui_Key_G">ImGui_Key_G</a></li>
        <li><a href="#ImGui_Key_GraveAccent">ImGui_Key_GraveAccent</a></li>
        <li><a href="#ImGui_Key_H">ImGui_Key_H</a></li>
        <li><a href="#ImGui_Key_Home">ImGui_Key_Home</a></li>
        <li><a href="#ImGui_Key_I">ImGui_Key_I</a></li>
        <li><a href="#ImGui_Key_Insert">ImGui_Key_Insert</a></li>
        <li><a href="#ImGui_Key_J">ImGui_Key_J</a></li>
        <li><a href="#ImGui_Key_K">ImGui_Key_K</a></li>
        <li><a href="#ImGui_Key_Keypad0">ImGui_Key_Keypad0</a></li>
        <li><a href="#ImGui_Key_Keypad1">ImGui_Key_Keypad1</a></li>
        <li><a href="#ImGui_Key_Keypad2">ImGui_Key_Keypad2</a></li>
        <li><a href="#ImGui_Key_Keypad3">ImGui_Key_Keypad3</a></li>
        <li><a href="#ImGui_Key_Keypad4">ImGui_Key_Keypad4</a></li>
        <li><a href="#ImGui_Key_Keypad5">ImGui_Key_Keypad5</a></li>
        <li><a href="#ImGui_Key_Keypad6">ImGui_Key_Keypad6</a></li>
        <li><a href="#ImGui_Key_Keypad7">ImGui_Key_Keypad7</a></li>
        <li><a href="#ImGui_Key_Keypad8">ImGui_Key_Keypad8</a></li>
        <li><a href="#ImGui_Key_Keypad9">ImGui_Key_Keypad9</a></li>
        <li><a href="#ImGui_Key_KeypadAdd">ImGui_Key_KeypadAdd</a></li>
        <li><a href="#ImGui_Key_KeypadDecimal">ImGui_Key_KeypadDecimal</a></li>
        <li><a href="#ImGui_Key_KeypadDivide">ImGui_Key_KeypadDivide</a></li>
        <li><a href="#ImGui_Key_KeypadEnter">ImGui_Key_KeypadEnter</a></li>
        <li><a href="#ImGui_Key_KeypadEqual">ImGui_Key_KeypadEqual</a></li>
        <li><a href="#ImGui_Key_KeypadMultiply">ImGui_Key_KeypadMultiply</a></li>
        <li><a href="#ImGui_Key_KeypadSubtract">ImGui_Key_KeypadSubtract</a></li>
        <li><a href="#ImGui_Key_L">ImGui_Key_L</a></li>
        <li><a href="#ImGui_Key_LeftAlt">ImGui_Key_LeftAlt</a></li>
        <li><a href="#ImGui_Key_LeftArrow">ImGui_Key_LeftArrow</a></li>
        <li><a href="#ImGui_Key_LeftBracket">ImGui_Key_LeftBracket</a></li>
        <li><a href="#ImGui_Key_LeftCtrl">ImGui_Key_LeftCtrl</a></li>
        <li><a href="#ImGui_Key_LeftShift">ImGui_Key_LeftShift</a></li>
        <li><a href="#ImGui_Key_LeftSuper">ImGui_Key_LeftSuper</a></li>
        <li><a href="#ImGui_Key_M">ImGui_Key_M</a></li>
        <li><a href="#ImGui_Key_Menu">ImGui_Key_Menu</a></li>
        <li><a href="#ImGui_Key_Minus">ImGui_Key_Minus</a></li>
        <li><a href="#ImGui_Key_MouseLeft">ImGui_Key_MouseLeft</a></li>
        <li><a href="#ImGui_Key_MouseMiddle">ImGui_Key_MouseMiddle</a></li>
        <li><a href="#ImGui_Key_MouseRight">ImGui_Key_MouseRight</a></li>
        <li><a href="#ImGui_Key_MouseWheelX">ImGui_Key_MouseWheelX</a></li>
        <li><a href="#ImGui_Key_MouseWheelY">ImGui_Key_MouseWheelY</a></li>
        <li><a href="#ImGui_Key_MouseX1">ImGui_Key_MouseX1</a></li>
        <li><a href="#ImGui_Key_MouseX2">ImGui_Key_MouseX2</a></li>
        <li><a href="#ImGui_Key_N">ImGui_Key_N</a></li>
        <li><a href="#ImGui_Key_NumLock">ImGui_Key_NumLock</a></li>
        <li><a href="#ImGui_Key_O">ImGui_Key_O</a></li>
        <li><a href="#ImGui_Key_P">ImGui_Key_P</a></li>
        <li><a href="#ImGui_Key_PageDown">ImGui_Key_PageDown</a></li>
        <li><a href="#ImGui_Key_PageUp">ImGui_Key_PageUp</a></li>
        <li><a href="#ImGui_Key_Pause">ImGui_Key_Pause</a></li>
        <li><a href="#ImGui_Key_Period">ImGui_Key_Period</a></li>
        <li><a href="#ImGui_Key_PrintScreen">ImGui_Key_PrintScreen</a></li>
        <li><a href="#ImGui_Key_Q">ImGui_Key_Q</a></li>
        <li><a href="#ImGui_Key_R">ImGui_Key_R</a></li>
        <li><a href="#ImGui_Key_RightAlt">ImGui_Key_RightAlt</a></li>
        <li><a href="#ImGui_Key_RightArrow">ImGui_Key_RightArrow</a></li>
        <li><a href="#ImGui_Key_RightBracket">ImGui_Key_RightBracket</a></li>
        <li><a href="#ImGui_Key_RightCtrl">ImGui_Key_RightCtrl</a></li>
        <li><a href="#ImGui_Key_RightShift">ImGui_Key_RightShift</a></li>
        <li><a href="#ImGui_Key_RightSuper">ImGui_Key_RightSuper</a></li>
        <li><a href="#ImGui_Key_S">ImGui_Key_S</a></li>
        <li><a href="#ImGui_Key_ScrollLock">ImGui_Key_ScrollLock</a></li>
        <li><a href="#ImGui_Key_Semicolon">ImGui_Key_Semicolon</a></li>
        <li><a href="#ImGui_Key_Slash">ImGui_Key_Slash</a></li>
        <li><a href="#ImGui_Key_Space">ImGui_Key_Space</a></li>
        <li><a href="#ImGui_Key_T">ImGui_Key_T</a></li>
        <li><a href="#ImGui_Key_Tab">ImGui_Key_Tab</a></li>
        <li><a href="#ImGui_Key_U">ImGui_Key_U</a></li>
        <li><a href="#ImGui_Key_UpArrow">ImGui_Key_UpArrow</a></li>
        <li><a href="#ImGui_Key_V">ImGui_Key_V</a></li>
        <li><a href="#ImGui_Key_W">ImGui_Key_W</a></li>
        <li><a href="#ImGui_Key_X">ImGui_Key_X</a></li>
        <li><a href="#ImGui_Key_Y">ImGui_Key_Y</a></li>
        <li><a href="#ImGui_Key_Z">ImGui_Key_Z</a></li>
        <li><a href="#ImGui_LabelText">ImGui_LabelText</a></li>
        <li><a href="#ImGui_ListBox">ImGui_ListBox</a></li>
        <li><a href="#ImGui_ListClipper_Begin">ImGui_ListClipper_Begin</a></li>
        <li><a href="#ImGui_ListClipper_End">ImGui_ListClipper_End</a></li>
        <li><a href="#ImGui_ListClipper_ForceDisplayRangeByIndices">ImGui_ListClipper_ForceDisplayRangeByIndices</a></li>
        <li><a href="#ImGui_ListClipper_GetDisplayRange">ImGui_ListClipper_GetDisplayRange</a></li>
        <li><a href="#ImGui_ListClipper_Step">ImGui_ListClipper_Step</a></li>
        <li><a href="#ImGui_LogFinish">ImGui_LogFinish</a></li>
        <li><a href="#ImGui_LogText">ImGui_LogText</a></li>
        <li><a href="#ImGui_LogToClipboard">ImGui_LogToClipboard</a></li>
        <li><a href="#ImGui_LogToFile">ImGui_LogToFile</a></li>
        <li><a href="#ImGui_LogToTTY">ImGui_LogToTTY</a></li>
        <li><a href="#ImGui_MenuItem">ImGui_MenuItem</a></li>
        <li><a href="#ImGui_Mod_Alt">ImGui_Mod_Alt</a></li>
        <li><a href="#ImGui_Mod_Ctrl">ImGui_Mod_Ctrl</a></li>
        <li><a href="#ImGui_Mod_None">ImGui_Mod_None</a></li>
        <li><a href="#ImGui_Mod_Shift">ImGui_Mod_Shift</a></li>
        <li><a href="#ImGui_Mod_Shortcut">ImGui_Mod_Shortcut</a></li>
        <li><a href="#ImGui_Mod_Super">ImGui_Mod_Super</a></li>
        <li><a href="#ImGui_MouseButton_Left">ImGui_MouseButton_Left</a></li>
        <li><a href="#ImGui_MouseButton_Middle">ImGui_MouseButton_Middle</a></li>
        <li><a href="#ImGui_MouseButton_Right">ImGui_MouseButton_Right</a></li>
        <li><a href="#ImGui_MouseCursor_Arrow">ImGui_MouseCursor_Arrow</a></li>
        <li><a href="#ImGui_MouseCursor_Hand">ImGui_MouseCursor_Hand</a></li>
        <li><a href="#ImGui_MouseCursor_None">ImGui_MouseCursor_None</a></li>
        <li><a href="#ImGui_MouseCursor_NotAllowed">ImGui_MouseCursor_NotAllowed</a></li>
        <li><a href="#ImGui_MouseCursor_ResizeAll">ImGui_MouseCursor_ResizeAll</a></li>
        <li><a href="#ImGui_MouseCursor_ResizeEW">ImGui_MouseCursor_ResizeEW</a></li>
        <li><a href="#ImGui_MouseCursor_ResizeNESW">ImGui_MouseCursor_ResizeNESW</a></li>
        <li><a href="#ImGui_MouseCursor_ResizeNS">ImGui_MouseCursor_ResizeNS</a></li>
        <li><a href="#ImGui_MouseCursor_ResizeNWSE">ImGui_MouseCursor_ResizeNWSE</a></li>
        <li><a href="#ImGui_MouseCursor_TextInput">ImGui_MouseCursor_TextInput</a></li>
        <li><a href="#ImGui_NewLine">ImGui_NewLine</a></li>
        <li><a href="#ImGui_NumericLimits_Double">ImGui_NumericLimits_Double</a></li>
        <li><a href="#ImGui_NumericLimits_Float">ImGui_NumericLimits_Float</a></li>
        <li><a href="#ImGui_NumericLimits_Int">ImGui_NumericLimits_Int</a></li>
        <li><a href="#ImGui_OpenPopup">ImGui_OpenPopup</a></li>
        <li><a href="#ImGui_OpenPopupOnItemClick">ImGui_OpenPopupOnItemClick</a></li>
        <li><a href="#ImGui_PlotHistogram">ImGui_PlotHistogram</a></li>
        <li><a href="#ImGui_PlotLines">ImGui_PlotLines</a></li>
        <li><a href="#ImGui_PointConvertNative">ImGui_PointConvertNative</a></li>
        <li><a href="#ImGui_PopButtonRepeat">ImGui_PopButtonRepeat</a></li>
        <li><a href="#ImGui_PopClipRect">ImGui_PopClipRect</a></li>
        <li><a href="#ImGui_PopFont">ImGui_PopFont</a></li>
        <li><a href="#ImGui_PopID">ImGui_PopID</a></li>
        <li><a href="#ImGui_PopItemWidth">ImGui_PopItemWidth</a></li>
        <li><a href="#ImGui_PopStyleColor">ImGui_PopStyleColor</a></li>
        <li><a href="#ImGui_PopStyleVar">ImGui_PopStyleVar</a></li>
        <li><a href="#ImGui_PopTabStop">ImGui_PopTabStop</a></li>
        <li><a href="#ImGui_PopTextWrapPos">ImGui_PopTextWrapPos</a></li>
        <li><a href="#ImGui_PopupFlags_AnyPopup">ImGui_PopupFlags_AnyPopup</a></li>
        <li><a href="#ImGui_PopupFlags_AnyPopupId">ImGui_PopupFlags_AnyPopupId</a></li>
        <li><a href="#ImGui_PopupFlags_AnyPopupLevel">ImGui_PopupFlags_AnyPopupLevel</a></li>
        <li><a href="#ImGui_PopupFlags_MouseButtonLeft">ImGui_PopupFlags_MouseButtonLeft</a></li>
        <li><a href="#ImGui_PopupFlags_MouseButtonMiddle">ImGui_PopupFlags_MouseButtonMiddle</a></li>
        <li><a href="#ImGui_PopupFlags_MouseButtonRight">ImGui_PopupFlags_MouseButtonRight</a></li>
        <li><a href="#ImGui_PopupFlags_NoOpenOverExistingPopup">ImGui_PopupFlags_NoOpenOverExistingPopup</a></li>
        <li><a href="#ImGui_PopupFlags_NoOpenOverItems">ImGui_PopupFlags_NoOpenOverItems</a></li>
        <li><a href="#ImGui_PopupFlags_None">ImGui_PopupFlags_None</a></li>
        <li><a href="#ImGui_ProgressBar">ImGui_ProgressBar</a></li>
        <li><a href="#ImGui_PushButtonRepeat">ImGui_PushButtonRepeat</a></li>
        <li><a href="#ImGui_PushClipRect">ImGui_PushClipRect</a></li>
        <li><a href="#ImGui_PushFont">ImGui_PushFont</a></li>
        <li><a href="#ImGui_PushID">ImGui_PushID</a></li>
        <li><a href="#ImGui_PushItemWidth">ImGui_PushItemWidth</a></li>
        <li><a href="#ImGui_PushStyleColor">ImGui_PushStyleColor</a></li>
        <li><a href="#ImGui_PushStyleVar">ImGui_PushStyleVar</a></li>
        <li><a href="#ImGui_PushTabStop">ImGui_PushTabStop</a></li>
        <li><a href="#ImGui_PushTextWrapPos">ImGui_PushTextWrapPos</a></li>
        <li><a href="#ImGui_RadioButton">ImGui_RadioButton</a></li>
        <li><a href="#ImGui_RadioButtonEx">ImGui_RadioButtonEx</a></li>
        <li><a href="#ImGui_ResetMouseDragDelta">ImGui_ResetMouseDragDelta</a></li>
        <li><a href="#ImGui_SameLine">ImGui_SameLine</a></li>
        <li><a href="#ImGui_Selectable">ImGui_Selectable</a></li>
        <li><a href="#ImGui_SelectableFlags_AllowDoubleClick">ImGui_SelectableFlags_AllowDoubleClick</a></li>
        <li><a href="#ImGui_SelectableFlags_AllowItemOverlap">ImGui_SelectableFlags_AllowItemOverlap</a></li>
        <li><a href="#ImGui_SelectableFlags_Disabled">ImGui_SelectableFlags_Disabled</a></li>
        <li><a href="#ImGui_SelectableFlags_DontClosePopups">ImGui_SelectableFlags_DontClosePopups</a></li>
        <li><a href="#ImGui_SelectableFlags_None">ImGui_SelectableFlags_None</a></li>
        <li><a href="#ImGui_SelectableFlags_SpanAllColumns">ImGui_SelectableFlags_SpanAllColumns</a></li>
        <li><a href="#ImGui_Separator">ImGui_Separator</a></li>
        <li><a href="#ImGui_SeparatorText">ImGui_SeparatorText</a></li>
        <li><a href="#ImGui_SetClipboardText">ImGui_SetClipboardText</a></li>
        <li><a href="#ImGui_SetColorEditOptions">ImGui_SetColorEditOptions</a></li>
        <li><a href="#ImGui_SetConfigVar">ImGui_SetConfigVar</a></li>
        <li><a href="#ImGui_SetCursorPos">ImGui_SetCursorPos</a></li>
        <li><a href="#ImGui_SetCursorPosX">ImGui_SetCursorPosX</a></li>
        <li><a href="#ImGui_SetCursorPosY">ImGui_SetCursorPosY</a></li>
        <li><a href="#ImGui_SetCursorScreenPos">ImGui_SetCursorScreenPos</a></li>
        <li><a href="#ImGui_SetDragDropPayload">ImGui_SetDragDropPayload</a></li>
        <li><a href="#ImGui_SetItemAllowOverlap">ImGui_SetItemAllowOverlap</a></li>
        <li><a href="#ImGui_SetItemDefaultFocus">ImGui_SetItemDefaultFocus</a></li>
        <li><a href="#ImGui_SetKeyboardFocusHere">ImGui_SetKeyboardFocusHere</a></li>
        <li><a href="#ImGui_SetMouseCursor">ImGui_SetMouseCursor</a></li>
        <li><a href="#ImGui_SetNextFrameWantCaptureKeyboard">ImGui_SetNextFrameWantCaptureKeyboard</a></li>
        <li><a href="#ImGui_SetNextItemOpen">ImGui_SetNextItemOpen</a></li>
        <li><a href="#ImGui_SetNextItemWidth">ImGui_SetNextItemWidth</a></li>
        <li><a href="#ImGui_SetNextWindowBgAlpha">ImGui_SetNextWindowBgAlpha</a></li>
        <li><a href="#ImGui_SetNextWindowCollapsed">ImGui_SetNextWindowCollapsed</a></li>
        <li><a href="#ImGui_SetNextWindowContentSize">ImGui_SetNextWindowContentSize</a></li>
        <li><a href="#ImGui_SetNextWindowDockID">ImGui_SetNextWindowDockID</a></li>
        <li><a href="#ImGui_SetNextWindowFocus">ImGui_SetNextWindowFocus</a></li>
        <li><a href="#ImGui_SetNextWindowPos">ImGui_SetNextWindowPos</a></li>
        <li><a href="#ImGui_SetNextWindowScroll">ImGui_SetNextWindowScroll</a></li>
        <li><a href="#ImGui_SetNextWindowSize">ImGui_SetNextWindowSize</a></li>
        <li><a href="#ImGui_SetNextWindowSizeConstraints">ImGui_SetNextWindowSizeConstraints</a></li>
        <li><a href="#ImGui_SetScrollFromPosX">ImGui_SetScrollFromPosX</a></li>
        <li><a href="#ImGui_SetScrollFromPosY">ImGui_SetScrollFromPosY</a></li>
        <li><a href="#ImGui_SetScrollHereX">ImGui_SetScrollHereX</a></li>
        <li><a href="#ImGui_SetScrollHereY">ImGui_SetScrollHereY</a></li>
        <li><a href="#ImGui_SetScrollX">ImGui_SetScrollX</a></li>
        <li><a href="#ImGui_SetScrollY">ImGui_SetScrollY</a></li>
        <li><a href="#ImGui_SetTabItemClosed">ImGui_SetTabItemClosed</a></li>
        <li><a href="#ImGui_SetTooltip">ImGui_SetTooltip</a></li>
        <li><a href="#ImGui_SetWindowCollapsed">ImGui_SetWindowCollapsed</a></li>
        <li><a href="#ImGui_SetWindowCollapsedEx">ImGui_SetWindowCollapsedEx</a></li>
        <li><a href="#ImGui_SetWindowFocus">ImGui_SetWindowFocus</a></li>
        <li><a href="#ImGui_SetWindowFocusEx">ImGui_SetWindowFocusEx</a></li>
        <li><a href="#ImGui_SetWindowPos">ImGui_SetWindowPos</a></li>
        <li><a href="#ImGui_SetWindowPosEx">ImGui_SetWindowPosEx</a></li>
        <li><a href="#ImGui_SetWindowSize">ImGui_SetWindowSize</a></li>
        <li><a href="#ImGui_SetWindowSizeEx">ImGui_SetWindowSizeEx</a></li>
        <li><a href="#ImGui_ShowAboutWindow">ImGui_ShowAboutWindow</a></li>
        <li><a href="#ImGui_ShowDebugLogWindow">ImGui_ShowDebugLogWindow</a></li>
        <li><a href="#ImGui_ShowMetricsWindow">ImGui_ShowMetricsWindow</a></li>
        <li><a href="#ImGui_ShowStackToolWindow">ImGui_ShowStackToolWindow</a></li>
        <li><a href="#ImGui_SliderAngle">ImGui_SliderAngle</a></li>
        <li><a href="#ImGui_SliderDouble">ImGui_SliderDouble</a></li>
        <li><a href="#ImGui_SliderDouble2">ImGui_SliderDouble2</a></li>
        <li><a href="#ImGui_SliderDouble3">ImGui_SliderDouble3</a></li>
        <li><a href="#ImGui_SliderDouble4">ImGui_SliderDouble4</a></li>
        <li><a href="#ImGui_SliderDoubleN">ImGui_SliderDoubleN</a></li>
        <li><a href="#ImGui_SliderFlags_AlwaysClamp">ImGui_SliderFlags_AlwaysClamp</a></li>
        <li><a href="#ImGui_SliderFlags_Logarithmic">ImGui_SliderFlags_Logarithmic</a></li>
        <li><a href="#ImGui_SliderFlags_NoInput">ImGui_SliderFlags_NoInput</a></li>
        <li><a href="#ImGui_SliderFlags_NoRoundToFormat">ImGui_SliderFlags_NoRoundToFormat</a></li>
        <li><a href="#ImGui_SliderFlags_None">ImGui_SliderFlags_None</a></li>
        <li><a href="#ImGui_SliderInt">ImGui_SliderInt</a></li>
        <li><a href="#ImGui_SliderInt2">ImGui_SliderInt2</a></li>
        <li><a href="#ImGui_SliderInt3">ImGui_SliderInt3</a></li>
        <li><a href="#ImGui_SliderInt4">ImGui_SliderInt4</a></li>
        <li><a href="#ImGui_SmallButton">ImGui_SmallButton</a></li>
        <li><a href="#ImGui_SortDirection_Ascending">ImGui_SortDirection_Ascending</a></li>
        <li><a href="#ImGui_SortDirection_Descending">ImGui_SortDirection_Descending</a></li>
        <li><a href="#ImGui_SortDirection_None">ImGui_SortDirection_None</a></li>
        <li><a href="#ImGui_Spacing">ImGui_Spacing</a></li>
        <li><a href="#ImGui_StyleVar_Alpha">ImGui_StyleVar_Alpha</a></li>
        <li><a href="#ImGui_StyleVar_ButtonTextAlign">ImGui_StyleVar_ButtonTextAlign</a></li>
        <li><a href="#ImGui_StyleVar_CellPadding">ImGui_StyleVar_CellPadding</a></li>
        <li><a href="#ImGui_StyleVar_ChildBorderSize">ImGui_StyleVar_ChildBorderSize</a></li>
        <li><a href="#ImGui_StyleVar_ChildRounding">ImGui_StyleVar_ChildRounding</a></li>
        <li><a href="#ImGui_StyleVar_DisabledAlpha">ImGui_StyleVar_DisabledAlpha</a></li>
        <li><a href="#ImGui_StyleVar_FrameBorderSize">ImGui_StyleVar_FrameBorderSize</a></li>
        <li><a href="#ImGui_StyleVar_FramePadding">ImGui_StyleVar_FramePadding</a></li>
        <li><a href="#ImGui_StyleVar_FrameRounding">ImGui_StyleVar_FrameRounding</a></li>
        <li><a href="#ImGui_StyleVar_GrabMinSize">ImGui_StyleVar_GrabMinSize</a></li>
        <li><a href="#ImGui_StyleVar_GrabRounding">ImGui_StyleVar_GrabRounding</a></li>
        <li><a href="#ImGui_StyleVar_IndentSpacing">ImGui_StyleVar_IndentSpacing</a></li>
        <li><a href="#ImGui_StyleVar_ItemInnerSpacing">ImGui_StyleVar_ItemInnerSpacing</a></li>
        <li><a href="#ImGui_StyleVar_ItemSpacing">ImGui_StyleVar_ItemSpacing</a></li>
        <li><a href="#ImGui_StyleVar_PopupBorderSize">ImGui_StyleVar_PopupBorderSize</a></li>
        <li><a href="#ImGui_StyleVar_PopupRounding">ImGui_StyleVar_PopupRounding</a></li>
        <li><a href="#ImGui_StyleVar_ScrollbarRounding">ImGui_StyleVar_ScrollbarRounding</a></li>
        <li><a href="#ImGui_StyleVar_ScrollbarSize">ImGui_StyleVar_ScrollbarSize</a></li>
        <li><a href="#ImGui_StyleVar_SelectableTextAlign">ImGui_StyleVar_SelectableTextAlign</a></li>
        <li><a href="#ImGui_StyleVar_SeparatorTextAlign">ImGui_StyleVar_SeparatorTextAlign</a></li>
        <li><a href="#ImGui_StyleVar_SeparatorTextBorderSize">ImGui_StyleVar_SeparatorTextBorderSize</a></li>
        <li><a href="#ImGui_StyleVar_SeparatorTextPadding">ImGui_StyleVar_SeparatorTextPadding</a></li>
        <li><a href="#ImGui_StyleVar_TabRounding">ImGui_StyleVar_TabRounding</a></li>
        <li><a href="#ImGui_StyleVar_WindowBorderSize">ImGui_StyleVar_WindowBorderSize</a></li>
        <li><a href="#ImGui_StyleVar_WindowMinSize">ImGui_StyleVar_WindowMinSize</a></li>
        <li><a href="#ImGui_StyleVar_WindowPadding">ImGui_StyleVar_WindowPadding</a></li>
        <li><a href="#ImGui_StyleVar_WindowRounding">ImGui_StyleVar_WindowRounding</a></li>
        <li><a href="#ImGui_StyleVar_WindowTitleAlign">ImGui_StyleVar_WindowTitleAlign</a></li>
        <li><a href="#ImGui_TabBarFlags_AutoSelectNewTabs">ImGui_TabBarFlags_AutoSelectNewTabs</a></li>
        <li><a href="#ImGui_TabBarFlags_FittingPolicyResizeDown">ImGui_TabBarFlags_FittingPolicyResizeDown</a></li>
        <li><a href="#ImGui_TabBarFlags_FittingPolicyScroll">ImGui_TabBarFlags_FittingPolicyScroll</a></li>
        <li><a href="#ImGui_TabBarFlags_NoCloseWithMiddleMouseButton">ImGui_TabBarFlags_NoCloseWithMiddleMouseButton</a></li>
        <li><a href="#ImGui_TabBarFlags_NoTabListScrollingButtons">ImGui_TabBarFlags_NoTabListScrollingButtons</a></li>
        <li><a href="#ImGui_TabBarFlags_NoTooltip">ImGui_TabBarFlags_NoTooltip</a></li>
        <li><a href="#ImGui_TabBarFlags_None">ImGui_TabBarFlags_None</a></li>
        <li><a href="#ImGui_TabBarFlags_Reorderable">ImGui_TabBarFlags_Reorderable</a></li>
        <li><a href="#ImGui_TabBarFlags_TabListPopupButton">ImGui_TabBarFlags_TabListPopupButton</a></li>
        <li><a href="#ImGui_TabItemButton">ImGui_TabItemButton</a></li>
        <li><a href="#ImGui_TabItemFlags_Leading">ImGui_TabItemFlags_Leading</a></li>
        <li><a href="#ImGui_TabItemFlags_NoCloseWithMiddleMouseButton">ImGui_TabItemFlags_NoCloseWithMiddleMouseButton</a></li>
        <li><a href="#ImGui_TabItemFlags_NoPushId">ImGui_TabItemFlags_NoPushId</a></li>
        <li><a href="#ImGui_TabItemFlags_NoReorder">ImGui_TabItemFlags_NoReorder</a></li>
        <li><a href="#ImGui_TabItemFlags_NoTooltip">ImGui_TabItemFlags_NoTooltip</a></li>
        <li><a href="#ImGui_TabItemFlags_None">ImGui_TabItemFlags_None</a></li>
        <li><a href="#ImGui_TabItemFlags_SetSelected">ImGui_TabItemFlags_SetSelected</a></li>
        <li><a href="#ImGui_TabItemFlags_Trailing">ImGui_TabItemFlags_Trailing</a></li>
        <li><a href="#ImGui_TabItemFlags_UnsavedDocument">ImGui_TabItemFlags_UnsavedDocument</a></li>
        <li><a href="#ImGui_TableBgTarget_CellBg">ImGui_TableBgTarget_CellBg</a></li>
        <li><a href="#ImGui_TableBgTarget_None">ImGui_TableBgTarget_None</a></li>
        <li><a href="#ImGui_TableBgTarget_RowBg0">ImGui_TableBgTarget_RowBg0</a></li>
        <li><a href="#ImGui_TableBgTarget_RowBg1">ImGui_TableBgTarget_RowBg1</a></li>
        <li><a href="#ImGui_TableColumnFlags_DefaultHide">ImGui_TableColumnFlags_DefaultHide</a></li>
        <li><a href="#ImGui_TableColumnFlags_DefaultSort">ImGui_TableColumnFlags_DefaultSort</a></li>
        <li><a href="#ImGui_TableColumnFlags_Disabled">ImGui_TableColumnFlags_Disabled</a></li>
        <li><a href="#ImGui_TableColumnFlags_IndentDisable">ImGui_TableColumnFlags_IndentDisable</a></li>
        <li><a href="#ImGui_TableColumnFlags_IndentEnable">ImGui_TableColumnFlags_IndentEnable</a></li>
        <li><a href="#ImGui_TableColumnFlags_IsEnabled">ImGui_TableColumnFlags_IsEnabled</a></li>
        <li><a href="#ImGui_TableColumnFlags_IsHovered">ImGui_TableColumnFlags_IsHovered</a></li>
        <li><a href="#ImGui_TableColumnFlags_IsSorted">ImGui_TableColumnFlags_IsSorted</a></li>
        <li><a href="#ImGui_TableColumnFlags_IsVisible">ImGui_TableColumnFlags_IsVisible</a></li>
        <li><a href="#ImGui_TableColumnFlags_NoClip">ImGui_TableColumnFlags_NoClip</a></li>
        <li><a href="#ImGui_TableColumnFlags_NoHeaderLabel">ImGui_TableColumnFlags_NoHeaderLabel</a></li>
        <li><a href="#ImGui_TableColumnFlags_NoHeaderWidth">ImGui_TableColumnFlags_NoHeaderWidth</a></li>
        <li><a href="#ImGui_TableColumnFlags_NoHide">ImGui_TableColumnFlags_NoHide</a></li>
        <li><a href="#ImGui_TableColumnFlags_NoReorder">ImGui_TableColumnFlags_NoReorder</a></li>
        <li><a href="#ImGui_TableColumnFlags_NoResize">ImGui_TableColumnFlags_NoResize</a></li>
        <li><a href="#ImGui_TableColumnFlags_NoSort">ImGui_TableColumnFlags_NoSort</a></li>
        <li><a href="#ImGui_TableColumnFlags_NoSortAscending">ImGui_TableColumnFlags_NoSortAscending</a></li>
        <li><a href="#ImGui_TableColumnFlags_NoSortDescending">ImGui_TableColumnFlags_NoSortDescending</a></li>
        <li><a href="#ImGui_TableColumnFlags_None">ImGui_TableColumnFlags_None</a></li>
        <li><a href="#ImGui_TableColumnFlags_PreferSortAscending">ImGui_TableColumnFlags_PreferSortAscending</a></li>
        <li><a href="#ImGui_TableColumnFlags_PreferSortDescending">ImGui_TableColumnFlags_PreferSortDescending</a></li>
        <li><a href="#ImGui_TableColumnFlags_WidthFixed">ImGui_TableColumnFlags_WidthFixed</a></li>
        <li><a href="#ImGui_TableColumnFlags_WidthStretch">ImGui_TableColumnFlags_WidthStretch</a></li>
        <li><a href="#ImGui_TableFlags_Borders">ImGui_TableFlags_Borders</a></li>
        <li><a href="#ImGui_TableFlags_BordersH">ImGui_TableFlags_BordersH</a></li>
        <li><a href="#ImGui_TableFlags_BordersInner">ImGui_TableFlags_BordersInner</a></li>
        <li><a href="#ImGui_TableFlags_BordersInnerH">ImGui_TableFlags_BordersInnerH</a></li>
        <li><a href="#ImGui_TableFlags_BordersInnerV">ImGui_TableFlags_BordersInnerV</a></li>
        <li><a href="#ImGui_TableFlags_BordersOuter">ImGui_TableFlags_BordersOuter</a></li>
        <li><a href="#ImGui_TableFlags_BordersOuterH">ImGui_TableFlags_BordersOuterH</a></li>
        <li><a href="#ImGui_TableFlags_BordersOuterV">ImGui_TableFlags_BordersOuterV</a></li>
        <li><a href="#ImGui_TableFlags_BordersV">ImGui_TableFlags_BordersV</a></li>
        <li><a href="#ImGui_TableFlags_ContextMenuInBody">ImGui_TableFlags_ContextMenuInBody</a></li>
        <li><a href="#ImGui_TableFlags_Hideable">ImGui_TableFlags_Hideable</a></li>
        <li><a href="#ImGui_TableFlags_NoClip">ImGui_TableFlags_NoClip</a></li>
        <li><a href="#ImGui_TableFlags_NoHostExtendX">ImGui_TableFlags_NoHostExtendX</a></li>
        <li><a href="#ImGui_TableFlags_NoHostExtendY">ImGui_TableFlags_NoHostExtendY</a></li>
        <li><a href="#ImGui_TableFlags_NoKeepColumnsVisible">ImGui_TableFlags_NoKeepColumnsVisible</a></li>
        <li><a href="#ImGui_TableFlags_NoPadInnerX">ImGui_TableFlags_NoPadInnerX</a></li>
        <li><a href="#ImGui_TableFlags_NoPadOuterX">ImGui_TableFlags_NoPadOuterX</a></li>
        <li><a href="#ImGui_TableFlags_NoSavedSettings">ImGui_TableFlags_NoSavedSettings</a></li>
        <li><a href="#ImGui_TableFlags_None">ImGui_TableFlags_None</a></li>
        <li><a href="#ImGui_TableFlags_PadOuterX">ImGui_TableFlags_PadOuterX</a></li>
        <li><a href="#ImGui_TableFlags_PreciseWidths">ImGui_TableFlags_PreciseWidths</a></li>
        <li><a href="#ImGui_TableFlags_Reorderable">ImGui_TableFlags_Reorderable</a></li>
        <li><a href="#ImGui_TableFlags_Resizable">ImGui_TableFlags_Resizable</a></li>
        <li><a href="#ImGui_TableFlags_RowBg">ImGui_TableFlags_RowBg</a></li>
        <li><a href="#ImGui_TableFlags_ScrollX">ImGui_TableFlags_ScrollX</a></li>
        <li><a href="#ImGui_TableFlags_ScrollY">ImGui_TableFlags_ScrollY</a></li>
        <li><a href="#ImGui_TableFlags_SizingFixedFit">ImGui_TableFlags_SizingFixedFit</a></li>
        <li><a href="#ImGui_TableFlags_SizingFixedSame">ImGui_TableFlags_SizingFixedSame</a></li>
        <li><a href="#ImGui_TableFlags_SizingStretchProp">ImGui_TableFlags_SizingStretchProp</a></li>
        <li><a href="#ImGui_TableFlags_SizingStretchSame">ImGui_TableFlags_SizingStretchSame</a></li>
        <li><a href="#ImGui_TableFlags_SortMulti">ImGui_TableFlags_SortMulti</a></li>
        <li><a href="#ImGui_TableFlags_SortTristate">ImGui_TableFlags_SortTristate</a></li>
        <li><a href="#ImGui_TableFlags_Sortable">ImGui_TableFlags_Sortable</a></li>
        <li><a href="#ImGui_TableGetColumnCount">ImGui_TableGetColumnCount</a></li>
        <li><a href="#ImGui_TableGetColumnFlags">ImGui_TableGetColumnFlags</a></li>
        <li><a href="#ImGui_TableGetColumnIndex">ImGui_TableGetColumnIndex</a></li>
        <li><a href="#ImGui_TableGetColumnName">ImGui_TableGetColumnName</a></li>
        <li><a href="#ImGui_TableGetColumnSortSpecs">ImGui_TableGetColumnSortSpecs</a></li>
        <li><a href="#ImGui_TableGetRowIndex">ImGui_TableGetRowIndex</a></li>
        <li><a href="#ImGui_TableHeader">ImGui_TableHeader</a></li>
        <li><a href="#ImGui_TableHeadersRow">ImGui_TableHeadersRow</a></li>
        <li><a href="#ImGui_TableNeedSort">ImGui_TableNeedSort</a></li>
        <li><a href="#ImGui_TableNextColumn">ImGui_TableNextColumn</a></li>
        <li><a href="#ImGui_TableNextRow">ImGui_TableNextRow</a></li>
        <li><a href="#ImGui_TableRowFlags_Headers">ImGui_TableRowFlags_Headers</a></li>
        <li><a href="#ImGui_TableRowFlags_None">ImGui_TableRowFlags_None</a></li>
        <li><a href="#ImGui_TableSetBgColor">ImGui_TableSetBgColor</a></li>
        <li><a href="#ImGui_TableSetColumnEnabled">ImGui_TableSetColumnEnabled</a></li>
        <li><a href="#ImGui_TableSetColumnIndex">ImGui_TableSetColumnIndex</a></li>
        <li><a href="#ImGui_TableSetupColumn">ImGui_TableSetupColumn</a></li>
        <li><a href="#ImGui_TableSetupScrollFreeze">ImGui_TableSetupScrollFreeze</a></li>
        <li><a href="#ImGui_Text">ImGui_Text</a></li>
        <li><a href="#ImGui_TextColored">ImGui_TextColored</a></li>
        <li><a href="#ImGui_TextDisabled">ImGui_TextDisabled</a></li>
        <li><a href="#ImGui_TextFilter_Clear">ImGui_TextFilter_Clear</a></li>
        <li><a href="#ImGui_TextFilter_Draw">ImGui_TextFilter_Draw</a></li>
        <li><a href="#ImGui_TextFilter_Get">ImGui_TextFilter_Get</a></li>
        <li><a href="#ImGui_TextFilter_IsActive">ImGui_TextFilter_IsActive</a></li>
        <li><a href="#ImGui_TextFilter_PassFilter">ImGui_TextFilter_PassFilter</a></li>
        <li><a href="#ImGui_TextFilter_Set">ImGui_TextFilter_Set</a></li>
        <li><a href="#ImGui_TextWrapped">ImGui_TextWrapped</a></li>
        <li><a href="#ImGui_TreeNode">ImGui_TreeNode</a></li>
        <li><a href="#ImGui_TreeNodeEx">ImGui_TreeNodeEx</a></li>
        <li><a href="#ImGui_TreeNodeFlags_AllowItemOverlap">ImGui_TreeNodeFlags_AllowItemOverlap</a></li>
        <li><a href="#ImGui_TreeNodeFlags_Bullet">ImGui_TreeNodeFlags_Bullet</a></li>
        <li><a href="#ImGui_TreeNodeFlags_CollapsingHeader">ImGui_TreeNodeFlags_CollapsingHeader</a></li>
        <li><a href="#ImGui_TreeNodeFlags_DefaultOpen">ImGui_TreeNodeFlags_DefaultOpen</a></li>
        <li><a href="#ImGui_TreeNodeFlags_FramePadding">ImGui_TreeNodeFlags_FramePadding</a></li>
        <li><a href="#ImGui_TreeNodeFlags_Framed">ImGui_TreeNodeFlags_Framed</a></li>
        <li><a href="#ImGui_TreeNodeFlags_Leaf">ImGui_TreeNodeFlags_Leaf</a></li>
        <li><a href="#ImGui_TreeNodeFlags_NoAutoOpenOnLog">ImGui_TreeNodeFlags_NoAutoOpenOnLog</a></li>
        <li><a href="#ImGui_TreeNodeFlags_NoTreePushOnOpen">ImGui_TreeNodeFlags_NoTreePushOnOpen</a></li>
        <li><a href="#ImGui_TreeNodeFlags_None">ImGui_TreeNodeFlags_None</a></li>
        <li><a href="#ImGui_TreeNodeFlags_OpenOnArrow">ImGui_TreeNodeFlags_OpenOnArrow</a></li>
        <li><a href="#ImGui_TreeNodeFlags_OpenOnDoubleClick">ImGui_TreeNodeFlags_OpenOnDoubleClick</a></li>
        <li><a href="#ImGui_TreeNodeFlags_Selected">ImGui_TreeNodeFlags_Selected</a></li>
        <li><a href="#ImGui_TreeNodeFlags_SpanAvailWidth">ImGui_TreeNodeFlags_SpanAvailWidth</a></li>
        <li><a href="#ImGui_TreeNodeFlags_SpanFullWidth">ImGui_TreeNodeFlags_SpanFullWidth</a></li>
        <li><a href="#ImGui_TreePop">ImGui_TreePop</a></li>
        <li><a href="#ImGui_TreePush">ImGui_TreePush</a></li>
        <li><a href="#ImGui_Unindent">ImGui_Unindent</a></li>
        <li><a href="#ImGui_VSliderDouble">ImGui_VSliderDouble</a></li>
        <li><a href="#ImGui_VSliderInt">ImGui_VSliderInt</a></li>
        <li><a href="#ImGui_ValidatePtr">ImGui_ValidatePtr</a></li>
        <li><a href="#ImGui_Viewport_GetCenter">ImGui_Viewport_GetCenter</a></li>
        <li><a href="#ImGui_Viewport_GetPos">ImGui_Viewport_GetPos</a></li>
        <li><a href="#ImGui_Viewport_GetSize">ImGui_Viewport_GetSize</a></li>
        <li><a href="#ImGui_Viewport_GetWorkCenter">ImGui_Viewport_GetWorkCenter</a></li>
        <li><a href="#ImGui_Viewport_GetWorkPos">ImGui_Viewport_GetWorkPos</a></li>
        <li><a href="#ImGui_Viewport_GetWorkSize">ImGui_Viewport_GetWorkSize</a></li>
        <li><a href="#ImGui_WindowFlags_AlwaysAutoResize">ImGui_WindowFlags_AlwaysAutoResize</a></li>
        <li><a href="#ImGui_WindowFlags_AlwaysHorizontalScrollbar">ImGui_WindowFlags_AlwaysHorizontalScrollbar</a></li>
        <li><a href="#ImGui_WindowFlags_AlwaysUseWindowPadding">ImGui_WindowFlags_AlwaysUseWindowPadding</a></li>
        <li><a href="#ImGui_WindowFlags_AlwaysVerticalScrollbar">ImGui_WindowFlags_AlwaysVerticalScrollbar</a></li>
        <li><a href="#ImGui_WindowFlags_HorizontalScrollbar">ImGui_WindowFlags_HorizontalScrollbar</a></li>
        <li><a href="#ImGui_WindowFlags_MenuBar">ImGui_WindowFlags_MenuBar</a></li>
        <li><a href="#ImGui_WindowFlags_NoBackground">ImGui_WindowFlags_NoBackground</a></li>
        <li><a href="#ImGui_WindowFlags_NoCollapse">ImGui_WindowFlags_NoCollapse</a></li>
        <li><a href="#ImGui_WindowFlags_NoDecoration">ImGui_WindowFlags_NoDecoration</a></li>
        <li><a href="#ImGui_WindowFlags_NoDocking">ImGui_WindowFlags_NoDocking</a></li>
        <li><a href="#ImGui_WindowFlags_NoFocusOnAppearing">ImGui_WindowFlags_NoFocusOnAppearing</a></li>
        <li><a href="#ImGui_WindowFlags_NoInputs">ImGui_WindowFlags_NoInputs</a></li>
        <li><a href="#ImGui_WindowFlags_NoMouseInputs">ImGui_WindowFlags_NoMouseInputs</a></li>
        <li><a href="#ImGui_WindowFlags_NoMove">ImGui_WindowFlags_NoMove</a></li>
        <li><a href="#ImGui_WindowFlags_NoNav">ImGui_WindowFlags_NoNav</a></li>
        <li><a href="#ImGui_WindowFlags_NoNavFocus">ImGui_WindowFlags_NoNavFocus</a></li>
        <li><a href="#ImGui_WindowFlags_NoNavInputs">ImGui_WindowFlags_NoNavInputs</a></li>
        <li><a href="#ImGui_WindowFlags_NoResize">ImGui_WindowFlags_NoResize</a></li>
        <li><a href="#ImGui_WindowFlags_NoSavedSettings">ImGui_WindowFlags_NoSavedSettings</a></li>
        <li><a href="#ImGui_WindowFlags_NoScrollWithMouse">ImGui_WindowFlags_NoScrollWithMouse</a></li>
        <li><a href="#ImGui_WindowFlags_NoScrollbar">ImGui_WindowFlags_NoScrollbar</a></li>
        <li><a href="#ImGui_WindowFlags_NoTitleBar">ImGui_WindowFlags_NoTitleBar</a></li>
        <li><a href="#ImGui_WindowFlags_None">ImGui_WindowFlags_None</a></li>
        <li><a href="#ImGui_WindowFlags_TopMost">ImGui_WindowFlags_TopMost</a></li>
        <li><a href="#ImGui_WindowFlags_UnsavedDocument">ImGui_WindowFlags_UnsavedDocument</a></li>
        <li><a href="#JS_Actions_CountShortcuts">JS_Actions_CountShortcuts</a></li>
        <li><a href="#JS_Actions_DeleteShortcut">JS_Actions_DeleteShortcut</a></li>
        <li><a href="#JS_Actions_DoShortcutDialog">JS_Actions_DoShortcutDialog</a></li>
        <li><a href="#JS_Actions_GetShortcutDesc">JS_Actions_GetShortcutDesc</a></li>
        <li><a href="#JS_Byte">JS_Byte</a></li>
        <li><a href="#JS_Composite">JS_Composite</a></li>
        <li><a href="#JS_Composite_Delay">JS_Composite_Delay</a></li>
        <li><a href="#JS_Composite_ListBitmaps">JS_Composite_ListBitmaps</a></li>
        <li><a href="#JS_Composite_Unlink">JS_Composite_Unlink</a></li>
        <li><a href="#JS_Dialog_BrowseForFolder">JS_Dialog_BrowseForFolder</a></li>
        <li><a href="#JS_Dialog_BrowseForOpenFiles">JS_Dialog_BrowseForOpenFiles</a></li>
        <li><a href="#JS_Dialog_BrowseForSaveFile">JS_Dialog_BrowseForSaveFile</a></li>
        <li><a href="#JS_Double">JS_Double</a></li>
        <li><a href="#JS_File_Stat">JS_File_Stat</a></li>
        <li><a href="#JS_GDI_Blit">JS_GDI_Blit</a></li>
        <li><a href="#JS_GDI_CreateFillBrush">JS_GDI_CreateFillBrush</a></li>
        <li><a href="#JS_GDI_CreateFont">JS_GDI_CreateFont</a></li>
        <li><a href="#JS_GDI_CreatePen">JS_GDI_CreatePen</a></li>
        <li><a href="#JS_GDI_DeleteObject">JS_GDI_DeleteObject</a></li>
        <li><a href="#JS_GDI_DrawText">JS_GDI_DrawText</a></li>
        <li><a href="#JS_GDI_FillEllipse">JS_GDI_FillEllipse</a></li>
        <li><a href="#JS_GDI_FillPolygon">JS_GDI_FillPolygon</a></li>
        <li><a href="#JS_GDI_FillRect">JS_GDI_FillRect</a></li>
        <li><a href="#JS_GDI_FillRoundRect">JS_GDI_FillRoundRect</a></li>
        <li><a href="#JS_GDI_GetClientDC">JS_GDI_GetClientDC</a></li>
        <li><a href="#JS_GDI_GetScreenDC">JS_GDI_GetScreenDC</a></li>
        <li><a href="#JS_GDI_GetSysColor">JS_GDI_GetSysColor</a></li>
        <li><a href="#JS_GDI_GetTextColor">JS_GDI_GetTextColor</a></li>
        <li><a href="#JS_GDI_GetWindowDC">JS_GDI_GetWindowDC</a></li>
        <li><a href="#JS_GDI_Line">JS_GDI_Line</a></li>
        <li><a href="#JS_GDI_Polyline">JS_GDI_Polyline</a></li>
        <li><a href="#JS_GDI_ReleaseDC">JS_GDI_ReleaseDC</a></li>
        <li><a href="#JS_GDI_SelectObject">JS_GDI_SelectObject</a></li>
        <li><a href="#JS_GDI_SetPixel">JS_GDI_SetPixel</a></li>
        <li><a href="#JS_GDI_SetTextBkColor">JS_GDI_SetTextBkColor</a></li>
        <li><a href="#JS_GDI_SetTextBkMode">JS_GDI_SetTextBkMode</a></li>
        <li><a href="#JS_GDI_SetTextColor">JS_GDI_SetTextColor</a></li>
        <li><a href="#JS_GDI_StretchBlit">JS_GDI_StretchBlit</a></li>
        <li><a href="#JS_Header_GetItemCount">JS_Header_GetItemCount</a></li>
        <li><a href="#JS_Int">JS_Int</a></li>
        <li><a href="#JS_LICE_AlterBitmapHSV">JS_LICE_AlterBitmapHSV</a></li>
        <li><a href="#JS_LICE_AlterRectHSV">JS_LICE_AlterRectHSV</a></li>
        <li><a href="#JS_LICE_Arc">JS_LICE_Arc</a></li>
        <li><a href="#JS_LICE_ArrayAllBitmaps">JS_LICE_ArrayAllBitmaps</a></li>
        <li><a href="#JS_LICE_Bezier">JS_LICE_Bezier</a></li>
        <li><a href="#JS_LICE_Blit">JS_LICE_Blit</a></li>
        <li><a href="#JS_LICE_Circle">JS_LICE_Circle</a></li>
        <li><a href="#JS_LICE_Clear">JS_LICE_Clear</a></li>
        <li><a href="#JS_LICE_CreateBitmap">JS_LICE_CreateBitmap</a></li>
        <li><a href="#JS_LICE_CreateFont">JS_LICE_CreateFont</a></li>
        <li><a href="#JS_LICE_DestroyBitmap">JS_LICE_DestroyBitmap</a></li>
        <li><a href="#JS_LICE_DestroyFont">JS_LICE_DestroyFont</a></li>
        <li><a href="#JS_LICE_DrawChar">JS_LICE_DrawChar</a></li>
        <li><a href="#JS_LICE_DrawText">JS_LICE_DrawText</a></li>
        <li><a href="#JS_LICE_FillCircle">JS_LICE_FillCircle</a></li>
        <li><a href="#JS_LICE_FillPolygon">JS_LICE_FillPolygon</a></li>
        <li><a href="#JS_LICE_FillRect">JS_LICE_FillRect</a></li>
        <li><a href="#JS_LICE_FillTriangle">JS_LICE_FillTriangle</a></li>
        <li><a href="#JS_LICE_GetDC">JS_LICE_GetDC</a></li>
        <li><a href="#JS_LICE_GetHeight">JS_LICE_GetHeight</a></li>
        <li><a href="#JS_LICE_GetPixel">JS_LICE_GetPixel</a></li>
        <li><a href="#JS_LICE_GetWidth">JS_LICE_GetWidth</a></li>
        <li><a href="#JS_LICE_GradRect">JS_LICE_GradRect</a></li>
        <li><a href="#JS_LICE_IsFlipped">JS_LICE_IsFlipped</a></li>
        <li><a href="#JS_LICE_Line">JS_LICE_Line</a></li>
        <li><a href="#JS_LICE_ListAllBitmaps">JS_LICE_ListAllBitmaps</a></li>
        <li><a href="#JS_LICE_LoadJPG">JS_LICE_LoadJPG</a></li>
        <li><a href="#JS_LICE_LoadJPGFromMemory">JS_LICE_LoadJPGFromMemory</a></li>
        <li><a href="#JS_LICE_LoadPNG">JS_LICE_LoadPNG</a></li>
        <li><a href="#JS_LICE_LoadPNGFromMemory">JS_LICE_LoadPNGFromMemory</a></li>
        <li><a href="#JS_LICE_MeasureText">JS_LICE_MeasureText</a></li>
        <li><a href="#JS_LICE_ProcessRect">JS_LICE_ProcessRect</a></li>
        <li><a href="#JS_LICE_PutPixel">JS_LICE_PutPixel</a></li>
        <li><a href="#JS_LICE_Resize">JS_LICE_Resize</a></li>
        <li><a href="#JS_LICE_RotatedBlit">JS_LICE_RotatedBlit</a></li>
        <li><a href="#JS_LICE_RoundRect">JS_LICE_RoundRect</a></li>
        <li><a href="#JS_LICE_ScaledBlit">JS_LICE_ScaledBlit</a></li>
        <li><a href="#JS_LICE_SetAlphaFromColorMask">JS_LICE_SetAlphaFromColorMask</a></li>
        <li><a href="#JS_LICE_SetFontBkColor">JS_LICE_SetFontBkColor</a></li>
        <li><a href="#JS_LICE_SetFontColor">JS_LICE_SetFontColor</a></li>
        <li><a href="#JS_LICE_SetFontFXColor">JS_LICE_SetFontFXColor</a></li>
        <li><a href="#JS_LICE_SetFontFromGDI">JS_LICE_SetFontFromGDI</a></li>
        <li><a href="#JS_LICE_WriteJPG">JS_LICE_WriteJPG</a></li>
        <li><a href="#JS_LICE_WritePNG">JS_LICE_WritePNG</a></li>
        <li><a href="#JS_ListView_EnsureVisible">JS_ListView_EnsureVisible</a></li>
        <li><a href="#JS_ListView_EnumSelItems">JS_ListView_EnumSelItems</a></li>
        <li><a href="#JS_ListView_GetFocusedItem">JS_ListView_GetFocusedItem</a></li>
        <li><a href="#JS_ListView_GetHeader">JS_ListView_GetHeader</a></li>
        <li><a href="#JS_ListView_GetItem">JS_ListView_GetItem</a></li>
        <li><a href="#JS_ListView_GetItemCount">JS_ListView_GetItemCount</a></li>
        <li><a href="#JS_ListView_GetItemRect">JS_ListView_GetItemRect</a></li>
        <li><a href="#JS_ListView_GetItemState">JS_ListView_GetItemState</a></li>
        <li><a href="#JS_ListView_GetItemText">JS_ListView_GetItemText</a></li>
        <li><a href="#JS_ListView_GetSelectedCount">JS_ListView_GetSelectedCount</a></li>
        <li><a href="#JS_ListView_GetTopIndex">JS_ListView_GetTopIndex</a></li>
        <li><a href="#JS_ListView_HitTest">JS_ListView_HitTest</a></li>
        <li><a href="#JS_ListView_ListAllSelItems">JS_ListView_ListAllSelItems</a></li>
        <li><a href="#JS_ListView_SetItemState">JS_ListView_SetItemState</a></li>
        <li><a href="#JS_ListView_SetItemText">JS_ListView_SetItemText</a></li>
        <li><a href="#JS_Localize">JS_Localize</a></li>
        <li><a href="#JS_MIDIEditor_ArrayAll">JS_MIDIEditor_ArrayAll</a></li>
        <li><a href="#JS_MIDIEditor_ListAll">JS_MIDIEditor_ListAll</a></li>
        <li><a href="#JS_Mem_Alloc">JS_Mem_Alloc</a></li>
        <li><a href="#JS_Mem_Free">JS_Mem_Free</a></li>
        <li><a href="#JS_Mem_FromString">JS_Mem_FromString</a></li>
        <li><a href="#JS_Mouse_GetCursor">JS_Mouse_GetCursor</a></li>
        <li><a href="#JS_Mouse_GetState">JS_Mouse_GetState</a></li>
        <li><a href="#JS_Mouse_LoadCursor">JS_Mouse_LoadCursor</a></li>
        <li><a href="#JS_Mouse_LoadCursorFromFile">JS_Mouse_LoadCursorFromFile</a></li>
        <li><a href="#JS_Mouse_SetCursor">JS_Mouse_SetCursor</a></li>
        <li><a href="#JS_Mouse_SetPosition">JS_Mouse_SetPosition</a></li>
        <li><a href="#JS_ReaScriptAPI_Version">JS_ReaScriptAPI_Version</a></li>
        <li><a href="#JS_String">JS_String</a></li>
        <li><a href="#JS_VKeys_GetDown">JS_VKeys_GetDown</a></li>
        <li><a href="#JS_VKeys_GetState">JS_VKeys_GetState</a></li>
        <li><a href="#JS_VKeys_GetUp">JS_VKeys_GetUp</a></li>
        <li><a href="#JS_VKeys_Intercept">JS_VKeys_Intercept</a></li>
        <li><a href="#JS_WindowMessage_Intercept">JS_WindowMessage_Intercept</a></li>
        <li><a href="#JS_WindowMessage_InterceptList">JS_WindowMessage_InterceptList</a></li>
        <li><a href="#JS_WindowMessage_ListIntercepts">JS_WindowMessage_ListIntercepts</a></li>
        <li><a href="#JS_WindowMessage_PassThrough">JS_WindowMessage_PassThrough</a></li>
        <li><a href="#JS_WindowMessage_Peek">JS_WindowMessage_Peek</a></li>
        <li><a href="#JS_WindowMessage_Post">JS_WindowMessage_Post</a></li>
        <li><a href="#JS_WindowMessage_Release">JS_WindowMessage_Release</a></li>
        <li><a href="#JS_WindowMessage_ReleaseAll">JS_WindowMessage_ReleaseAll</a></li>
        <li><a href="#JS_WindowMessage_ReleaseWindow">JS_WindowMessage_ReleaseWindow</a></li>
        <li><a href="#JS_WindowMessage_Send">JS_WindowMessage_Send</a></li>
        <li><a href="#JS_Window_AddressFromHandle">JS_Window_AddressFromHandle</a></li>
        <li><a href="#JS_Window_ArrayAllChild">JS_Window_ArrayAllChild</a></li>
        <li><a href="#JS_Window_ArrayAllTop">JS_Window_ArrayAllTop</a></li>
        <li><a href="#JS_Window_ArrayFind">JS_Window_ArrayFind</a></li>
        <li><a href="#JS_Window_AttachResizeGrip">JS_Window_AttachResizeGrip</a></li>
        <li><a href="#JS_Window_AttachTopmostPin">JS_Window_AttachTopmostPin</a></li>
        <li><a href="#JS_Window_ClientToScreen">JS_Window_ClientToScreen</a></li>
        <li><a href="#JS_Window_Create">JS_Window_Create</a></li>
        <li><a href="#JS_Window_Destroy">JS_Window_Destroy</a></li>
        <li><a href="#JS_Window_Enable">JS_Window_Enable</a></li>
        <li><a href="#JS_Window_EnableMetal">JS_Window_EnableMetal</a></li>
        <li><a href="#JS_Window_Find">JS_Window_Find</a></li>
        <li><a href="#JS_Window_FindChild">JS_Window_FindChild</a></li>
        <li><a href="#JS_Window_FindChildByID">JS_Window_FindChildByID</a></li>
        <li><a href="#JS_Window_FindEx">JS_Window_FindEx</a></li>
        <li><a href="#JS_Window_FindTop">JS_Window_FindTop</a></li>
        <li><a href="#JS_Window_FromPoint">JS_Window_FromPoint</a></li>
        <li><a href="#JS_Window_GetClassName">JS_Window_GetClassName</a></li>
        <li><a href="#JS_Window_GetClientRect">JS_Window_GetClientRect</a></li>
        <li><a href="#JS_Window_GetClientSize">JS_Window_GetClientSize</a></li>
        <li><a href="#JS_Window_GetFocus">JS_Window_GetFocus</a></li>
        <li><a href="#JS_Window_GetForeground">JS_Window_GetForeground</a></li>
        <li><a href="#JS_Window_GetLong">JS_Window_GetLong</a></li>
        <li><a href="#JS_Window_GetLongPtr">JS_Window_GetLongPtr</a></li>
        <li><a href="#JS_Window_GetParent">JS_Window_GetParent</a></li>
        <li><a href="#JS_Window_GetRect">JS_Window_GetRect</a></li>
        <li><a href="#JS_Window_GetRelated">JS_Window_GetRelated</a></li>
        <li><a href="#JS_Window_GetScrollInfo">JS_Window_GetScrollInfo</a></li>
        <li><a href="#JS_Window_GetTitle">JS_Window_GetTitle</a></li>
        <li><a href="#JS_Window_GetViewportFromRect">JS_Window_GetViewportFromRect</a></li>
        <li><a href="#JS_Window_HandleFromAddress">JS_Window_HandleFromAddress</a></li>
        <li><a href="#JS_Window_InvalidateRect">JS_Window_InvalidateRect</a></li>
        <li><a href="#JS_Window_IsChild">JS_Window_IsChild</a></li>
        <li><a href="#JS_Window_IsVisible">JS_Window_IsVisible</a></li>
        <li><a href="#JS_Window_IsWindow">JS_Window_IsWindow</a></li>
        <li><a href="#JS_Window_ListAllChild">JS_Window_ListAllChild</a></li>
        <li><a href="#JS_Window_ListAllTop">JS_Window_ListAllTop</a></li>
        <li><a href="#JS_Window_ListFind">JS_Window_ListFind</a></li>
        <li><a href="#JS_Window_MonitorFromRect">JS_Window_MonitorFromRect</a></li>
        <li><a href="#JS_Window_Move">JS_Window_Move</a></li>
        <li><a href="#JS_Window_OnCommand">JS_Window_OnCommand</a></li>
        <li><a href="#JS_Window_Resize">JS_Window_Resize</a></li>
        <li><a href="#JS_Window_ScreenToClient">JS_Window_ScreenToClient</a></li>
        <li><a href="#JS_Window_SetFocus">JS_Window_SetFocus</a></li>
        <li><a href="#JS_Window_SetForeground">JS_Window_SetForeground</a></li>
        <li><a href="#JS_Window_SetLong">JS_Window_SetLong</a></li>
        <li><a href="#JS_Window_SetOpacity">JS_Window_SetOpacity</a></li>
        <li><a href="#JS_Window_SetParent">JS_Window_SetParent</a></li>
        <li><a href="#JS_Window_SetPosition">JS_Window_SetPosition</a></li>
        <li><a href="#JS_Window_SetScrollPos">JS_Window_SetScrollPos</a></li>
        <li><a href="#JS_Window_SetStyle">JS_Window_SetStyle</a></li>
        <li><a href="#JS_Window_SetTitle">JS_Window_SetTitle</a></li>
        <li><a href="#JS_Window_SetZOrder">JS_Window_SetZOrder</a></li>
        <li><a href="#JS_Window_Show">JS_Window_Show</a></li>
        <li><a href="#JS_Window_Update">JS_Window_Update</a></li>
        <li><a href="#JS_Zip_Close">JS_Zip_Close</a></li>
        <li><a href="#JS_Zip_CountEntries">JS_Zip_CountEntries</a></li>
        <li><a href="#JS_Zip_DeleteEntries">JS_Zip_DeleteEntries</a></li>
        <li><a href="#JS_Zip_Entry_Close">JS_Zip_Entry_Close</a></li>
        <li><a href="#JS_Zip_Entry_CompressFile">JS_Zip_Entry_CompressFile</a></li>
        <li><a href="#JS_Zip_Entry_CompressMemory">JS_Zip_Entry_CompressMemory</a></li>
        <li><a href="#JS_Zip_Entry_ExtractToFile">JS_Zip_Entry_ExtractToFile</a></li>
        <li><a href="#JS_Zip_Entry_ExtractToMemory">JS_Zip_Entry_ExtractToMemory</a></li>
        <li><a href="#JS_Zip_Entry_Info">JS_Zip_Entry_Info</a></li>
        <li><a href="#JS_Zip_Entry_OpenByIndex">JS_Zip_Entry_OpenByIndex</a></li>
        <li><a href="#JS_Zip_Entry_OpenByName">JS_Zip_Entry_OpenByName</a></li>
        <li><a href="#JS_Zip_ErrorString">JS_Zip_ErrorString</a></li>
        <li><a href="#JS_Zip_Extract">JS_Zip_Extract</a></li>
        <li><a href="#JS_Zip_ListAllEntries">JS_Zip_ListAllEntries</a></li>
        <li><a href="#JS_Zip_Open">JS_Zip_Open</a></li>
        <li><a href="#Llm_Do">Llm_Do</a></li>
        <li><a href="#Llm_Get">Llm_Get</a></li>
        <li><a href="#Llm_Set">Llm_Set</a></li>
        <li><a href="#MRP_CalculateEnvelopeHash">MRP_CalculateEnvelopeHash</a></li>
        <li><a href="#MRP_CastDoubleToInt">MRP_CastDoubleToInt</a></li>
        <li><a href="#MRP_CreateArray">MRP_CreateArray</a></li>
        <li><a href="#MRP_CreateWindow">MRP_CreateWindow</a></li>
        <li><a href="#MRP_DestroyArray">MRP_DestroyArray</a></li>
        <li><a href="#MRP_DestroyWindow">MRP_DestroyWindow</a></li>
        <li><a href="#MRP_DoNothing">MRP_DoNothing</a></li>
        <li><a href="#MRP_DoublePointer">MRP_DoublePointer</a></li>
        <li><a href="#MRP_DoublePointerAsInt">MRP_DoublePointerAsInt</a></li>
        <li><a href="#MRP_GenerateSine">MRP_GenerateSine</a></li>
        <li><a href="#MRP_GetArrayValue">MRP_GetArrayValue</a></li>
        <li><a href="#MRP_GetControlFloatNumber">MRP_GetControlFloatNumber</a></li>
        <li><a href="#MRP_GetControlIntNumber">MRP_GetControlIntNumber</a></li>
        <li><a href="#MRP_GetWindowDirty">MRP_GetWindowDirty</a></li>
        <li><a href="#MRP_GetWindowPosSizeValue">MRP_GetWindowPosSizeValue</a></li>
        <li><a href="#MRP_IntPointer">MRP_IntPointer</a></li>
        <li><a href="#MRP_MultiplyArrays">MRP_MultiplyArrays</a></li>
        <li><a href="#MRP_MultiplyArraysMT">MRP_MultiplyArraysMT</a></li>
        <li><a href="#MRP_ReturnMediaItem">MRP_ReturnMediaItem</a></li>
        <li><a href="#MRP_SendCommandString">MRP_SendCommandString</a></li>
        <li><a href="#MRP_SetArrayValue">MRP_SetArrayValue</a></li>
        <li><a href="#MRP_SetControlBounds">MRP_SetControlBounds</a></li>
        <li><a href="#MRP_SetControlFloatNumber">MRP_SetControlFloatNumber</a></li>
        <li><a href="#MRP_SetControlIntNumber">MRP_SetControlIntNumber</a></li>
        <li><a href="#MRP_SetControlString">MRP_SetControlString</a></li>
        <li><a href="#MRP_SetWindowDirty">MRP_SetWindowDirty</a></li>
        <li><a href="#MRP_WindowAddControl">MRP_WindowAddControl</a></li>
        <li><a href="#MRP_WindowClearDirtyControls">MRP_WindowClearDirtyControls</a></li>
        <li><a href="#MRP_WindowIsClosed">MRP_WindowIsClosed</a></li>
        <li><a href="#MRP_WindowIsDirtyControl">MRP_WindowIsDirtyControl</a></li>
        <li><a href="#MRP_WindowSetTitle">MRP_WindowSetTitle</a></li>
        <li><a href="#MRP_WriteArrayToFile">MRP_WriteArrayToFile</a></li>
        <li><a href="#NF_AnalyzeMediaItemPeakAndRMS">NF_AnalyzeMediaItemPeakAndRMS</a></li>
        <li><a href="#NF_AnalyzeTakeLoudness">NF_AnalyzeTakeLoudness</a></li>
        <li><a href="#NF_AnalyzeTakeLoudness2">NF_AnalyzeTakeLoudness2</a></li>
        <li><a href="#NF_AnalyzeTakeLoudness_IntegratedOnly">NF_AnalyzeTakeLoudness_IntegratedOnly</a></li>
        <li><a href="#NF_Base64_Decode">NF_Base64_Decode</a></li>
        <li><a href="#NF_Base64_Encode">NF_Base64_Encode</a></li>
        <li><a href="#NF_ClearGlobalStartupAction">NF_ClearGlobalStartupAction</a></li>
        <li><a href="#NF_ClearProjectStartupAction">NF_ClearProjectStartupAction</a></li>
        <li><a href="#NF_ClearProjectTrackSelectionAction">NF_ClearProjectTrackSelectionAction</a></li>
        <li><a href="#NF_DeleteTakeFromItem">NF_DeleteTakeFromItem</a></li>
        <li><a href="#NF_GetGlobalStartupAction">NF_GetGlobalStartupAction</a></li>
        <li><a href="#NF_GetMediaItemAverageRMS">NF_GetMediaItemAverageRMS</a></li>
        <li><a href="#NF_GetMediaItemMaxPeak">NF_GetMediaItemMaxPeak</a></li>
        <li><a href="#NF_GetMediaItemMaxPeakAndMaxPeakPos">NF_GetMediaItemMaxPeakAndMaxPeakPos</a></li>
        <li><a href="#NF_GetMediaItemPeakRMS_NonWindowed">NF_GetMediaItemPeakRMS_NonWindowed</a></li>
        <li><a href="#NF_GetMediaItemPeakRMS_Windowed">NF_GetMediaItemPeakRMS_Windowed</a></li>
        <li><a href="#NF_GetProjectStartupAction">NF_GetProjectStartupAction</a></li>
        <li><a href="#NF_GetProjectTrackSelectionAction">NF_GetProjectTrackSelectionAction</a></li>
        <li><a href="#NF_GetSWSMarkerRegionSub">NF_GetSWSMarkerRegionSub</a></li>
        <li><a href="#NF_GetSWSTrackNotes">NF_GetSWSTrackNotes</a></li>
        <li><a href="#NF_GetSWS_RMSoptions">NF_GetSWS_RMSoptions</a></li>
        <li><a href="#NF_ReadAudioFileBitrate">NF_ReadAudioFileBitrate</a></li>
        <li><a href="#NF_ScrollHorizontallyByPercentage">NF_ScrollHorizontallyByPercentage</a></li>
        <li><a href="#NF_SetGlobalStartupAction">NF_SetGlobalStartupAction</a></li>
        <li><a href="#NF_SetProjectStartupAction">NF_SetProjectStartupAction</a></li>
        <li><a href="#NF_SetProjectTrackSelectionAction">NF_SetProjectTrackSelectionAction</a></li>
        <li><a href="#NF_SetSWSMarkerRegionSub">NF_SetSWSMarkerRegionSub</a></li>
        <li><a href="#NF_SetSWSTrackNotes">NF_SetSWSTrackNotes</a></li>
        <li><a href="#NF_SetSWS_RMSoptions">NF_SetSWS_RMSoptions</a></li>
        <li><a href="#NF_TakeFX_GetFXModuleName">NF_TakeFX_GetFXModuleName</a></li>
        <li><a href="#NF_UpdateSWSMarkerRegionSubWindow">NF_UpdateSWSMarkerRegionSubWindow</a></li>
        <li><a href="#NF_Win32_GetSystemMetrics">NF_Win32_GetSystemMetrics</a></li>
        <li><a href="#RDNA_GetMediaSourceMetadata">RDNA_GetMediaSourceMetadata</a></li>
        <li><a href="#ReaPack_AboutInstalledPackage">ReaPack_AboutInstalledPackage</a></li>
        <li><a href="#ReaPack_AboutRepository">ReaPack_AboutRepository</a></li>
        <li><a href="#ReaPack_AddSetRepository">ReaPack_AddSetRepository</a></li>
        <li><a href="#ReaPack_BrowsePackages">ReaPack_BrowsePackages</a></li>
        <li><a href="#ReaPack_CompareVersions">ReaPack_CompareVersions</a></li>
        <li><a href="#ReaPack_EnumOwnedFiles">ReaPack_EnumOwnedFiles</a></li>
        <li><a href="#ReaPack_FreeEntry">ReaPack_FreeEntry</a></li>
        <li><a href="#ReaPack_GetEntryInfo">ReaPack_GetEntryInfo</a></li>
        <li><a href="#ReaPack_GetOwner">ReaPack_GetOwner</a></li>
        <li><a href="#ReaPack_GetRepositoryInfo">ReaPack_GetRepositoryInfo</a></li>
        <li><a href="#ReaPack_ProcessQueue">ReaPack_ProcessQueue</a></li>
        <li><a href="#SNM_AddReceive">SNM_AddReceive</a></li>
        <li><a href="#SNM_AddTCPFXParm">SNM_AddTCPFXParm</a></li>
        <li><a href="#SNM_CreateFastString">SNM_CreateFastString</a></li>
        <li><a href="#SNM_DeleteFastString">SNM_DeleteFastString</a></li>
        <li><a href="#SNM_GetDoubleConfigVar">SNM_GetDoubleConfigVar</a></li>
        <li><a href="#SNM_GetFastString">SNM_GetFastString</a></li>
        <li><a href="#SNM_GetFastStringLength">SNM_GetFastStringLength</a></li>
        <li><a href="#SNM_GetIntConfigVar">SNM_GetIntConfigVar</a></li>
        <li><a href="#SNM_GetLongConfigVar">SNM_GetLongConfigVar</a></li>
        <li><a href="#SNM_GetMediaItemTakeByGUID">SNM_GetMediaItemTakeByGUID</a></li>
        <li><a href="#SNM_GetProjectMarkerName">SNM_GetProjectMarkerName</a></li>
        <li><a href="#SNM_GetSetObjectState">SNM_GetSetObjectState</a></li>
        <li><a href="#SNM_GetSetSourceState">SNM_GetSetSourceState</a></li>
        <li><a href="#SNM_GetSetSourceState2">SNM_GetSetSourceState2</a></li>
        <li><a href="#SNM_GetSourceType">SNM_GetSourceType</a></li>
        <li><a href="#SNM_MoveOrRemoveTrackFX">SNM_MoveOrRemoveTrackFX</a></li>
        <li><a href="#SNM_ReadMediaFileTag">SNM_ReadMediaFileTag</a></li>
        <li><a href="#SNM_RemoveReceive">SNM_RemoveReceive</a></li>
        <li><a href="#SNM_RemoveReceivesFrom">SNM_RemoveReceivesFrom</a></li>
        <li><a href="#SNM_SelectResourceBookmark">SNM_SelectResourceBookmark</a></li>
        <li><a href="#SNM_SetDoubleConfigVar">SNM_SetDoubleConfigVar</a></li>
        <li><a href="#SNM_SetFastString">SNM_SetFastString</a></li>
        <li><a href="#SNM_SetIntConfigVar">SNM_SetIntConfigVar</a></li>
        <li><a href="#SNM_SetLongConfigVar">SNM_SetLongConfigVar</a></li>
        <li><a href="#SNM_SetProjectMarker">SNM_SetProjectMarker</a></li>
        <li><a href="#SNM_SetStringConfigVar">SNM_SetStringConfigVar</a></li>
        <li><a href="#SNM_TagMediaFile">SNM_TagMediaFile</a></li>
        <li><a href="#SNM_TieResourceSlotActions">SNM_TieResourceSlotActions</a></li>
        <li><a href="#SN_FocusMIDIEditor">SN_FocusMIDIEditor</a></li>
        <li><a href="#ULT_GetMediaItemNote">ULT_GetMediaItemNote</a></li>
        <li><a href="#ULT_SetMediaItemNote">ULT_SetMediaItemNote</a></li>
        <li><a href="#Xen_AudioWriter_Create">Xen_AudioWriter_Create</a></li>
        <li><a href="#Xen_AudioWriter_Destroy">Xen_AudioWriter_Destroy</a></li>
        <li><a href="#Xen_AudioWriter_Write">Xen_AudioWriter_Write</a></li>
        <li><a href="#Xen_GetMediaSourceSamples">Xen_GetMediaSourceSamples</a></li>
        <li><a href="#Xen_StartSourcePreview">Xen_StartSourcePreview</a></li>
        <li><a href="#Xen_StopSourcePreview">Xen_StopSourcePreview</a></li>
        <li><a class="e_doc" href="#eel_abs">eel_abs</a></li>
        <li><a class="e_doc" href="#eel_acos">eel_acos</a></li>
        <li><a class="e_doc" href="#eel_asin">eel_asin</a></li>
        <li><a class="e_doc" href="#eel_atan">eel_atan</a></li>
        <li><a class="e_doc" href="#eel_atan2">eel_atan2</a></li>
        <li><a class="e_doc" href="#eel_atexit">eel_atexit</a></li>
        <li><a class="e_doc" href="#eel_ceil">eel_ceil</a></li>
        <li><a class="e_doc" href="#eel_convolve_c">eel_convolve_c</a></li>
        <li><a class="e_doc" href="#eel_cos">eel_cos</a></li>
        <li><a class="e_doc" href="#eel_defer">eel_defer</a></li>
        <li><a class="e_doc" href="#eel_eval">eel_eval</a></li>
        <li><a class="e_doc" href="#eel_exp">eel_exp</a></li>
        <li><a class="e_doc" href="#eel_extension_api">eel_extension_api</a></li>
        <li><a class="e_doc" href="#eel_fclose">eel_fclose</a></li>
        <li><a class="e_doc" href="#eel_feof">eel_feof</a></li>
        <li><a class="e_doc" href="#eel_fflush">eel_fflush</a></li>
        <li><a class="e_doc" href="#eel_fft">eel_fft</a></li>
        <li><a class="e_doc" href="#eel_fft_ipermute">eel_fft_ipermute</a></li>
        <li><a class="e_doc" href="#eel_fft_permute">eel_fft_permute</a></li>
        <li><a class="e_doc" href="#eel_fft_real">eel_fft_real</a></li>
        <li><a class="e_doc" href="#eel_fgetc">eel_fgetc</a></li>
        <li><a class="e_doc" href="#eel_fgets">eel_fgets</a></li>
        <li><a class="e_doc" href="#eel_floor">eel_floor</a></li>
        <li><a class="e_doc" href="#eel_fopen">eel_fopen</a></li>
        <li><a class="e_doc" href="#eel_fprintf">eel_fprintf</a></li>
        <li><a class="e_doc" href="#eel_fread">eel_fread</a></li>
        <li><a class="e_doc" href="#eel_freembuf">eel_freembuf</a></li>
        <li><a class="e_doc" href="#eel_fseek">eel_fseek</a></li>
        <li><a class="e_doc" href="#eel_ftell">eel_ftell</a></li>
        <li><a class="e_doc" href="#eel_fwrite">eel_fwrite</a></li>
        <li><a class="e_doc" href="#eel_get_action_context">eel_get_action_context</a></li>
        <li><a class="e_doc" href="#eel_gfx_variables">eel_gfx_variables</a></li>
        <li><a class="e_doc" href="#eel_gfx_arc">eel_gfx_arc</a></li>
        <li><a class="e_doc" href="#eel_gfx_blit">eel_gfx_blit</a></li>
        <li><a class="e_doc" href="#eel_gfx_blitext">eel_gfx_blitext</a></li>
        <li><a class="e_doc" href="#eel_gfx_blurto">eel_gfx_blurto</a></li>
        <li><a class="e_doc" href="#eel_gfx_circle">eel_gfx_circle</a></li>
        <li><a class="e_doc" href="#eel_gfx_clienttoscreen">eel_gfx_clienttoscreen</a></li>
        <li><a class="e_doc" href="#eel_gfx_deltablit">eel_gfx_deltablit</a></li>
        <li><a class="e_doc" href="#eel_gfx_dock">eel_gfx_dock</a></li>
        <li><a class="e_doc" href="#eel_gfx_drawchar">eel_gfx_drawchar</a></li>
        <li><a class="e_doc" href="#eel_gfx_drawnumber">eel_gfx_drawnumber</a></li>
        <li><a class="e_doc" href="#eel_gfx_drawstr">eel_gfx_drawstr</a></li>
        <li><a class="e_doc" href="#eel_gfx_getchar">eel_gfx_getchar</a></li>
        <li><a class="e_doc" href="#eel_gfx_getdropfile">eel_gfx_getdropfile</a></li>
        <li><a class="e_doc" href="#eel_gfx_getfont">eel_gfx_getfont</a></li>
        <li><a class="e_doc" href="#eel_gfx_getimgdim">eel_gfx_getimgdim</a></li>
        <li><a class="e_doc" href="#eel_gfx_getpixel">eel_gfx_getpixel</a></li>
        <li><a class="e_doc" href="#eel_gfx_gradrect">eel_gfx_gradrect</a></li>
        <li><a class="e_doc" href="#eel_gfx_init">eel_gfx_init</a></li>
        <li><a class="e_doc" href="#eel_gfx_line">eel_gfx_line</a></li>
        <li><a class="e_doc" href="#eel_gfx_lineto">eel_gfx_lineto</a></li>
        <li><a class="e_doc" href="#eel_gfx_loadimg">eel_gfx_loadimg</a></li>
        <li><a class="e_doc" href="#eel_gfx_measurechar">eel_gfx_measurechar</a></li>
        <li><a class="e_doc" href="#eel_gfx_measurestr">eel_gfx_measurestr</a></li>
        <li><a class="e_doc" href="#eel_gfx_muladdrect">eel_gfx_muladdrect</a></li>
        <li><a class="e_doc" href="#eel_gfx_printf">eel_gfx_printf</a></li>
        <li><a class="e_doc" href="#eel_gfx_quit">eel_gfx_quit</a></li>
        <li><a class="e_doc" href="#eel_gfx_rect">eel_gfx_rect</a></li>
        <li><a class="e_doc" href="#eel_gfx_rectto">eel_gfx_rectto</a></li>
        <li><a class="e_doc" href="#eel_gfx_roundrect">eel_gfx_roundrect</a></li>
        <li><a class="e_doc" href="#eel_gfx_screentoclient">eel_gfx_screentoclient</a></li>
        <li><a class="e_doc" href="#eel_gfx_set">eel_gfx_set</a></li>
        <li><a class="e_doc" href="#eel_gfx_setcursor">eel_gfx_setcursor</a></li>
        <li><a class="e_doc" href="#eel_gfx_setfont">eel_gfx_setfont</a></li>
        <li><a class="e_doc" href="#eel_gfx_setimgdim">eel_gfx_setimgdim</a></li>
        <li><a class="e_doc" href="#eel_gfx_setpixel">eel_gfx_setpixel</a></li>
        <li><a class="e_doc" href="#eel_gfx_showmenu">eel_gfx_showmenu</a></li>
        <li><a class="e_doc" href="#eel_gfx_transformblit">eel_gfx_transformblit</a></li>
        <li><a class="e_doc" href="#eel_gfx_triangle">eel_gfx_triangle</a></li>
        <li><a class="e_doc" href="#eel_gfx_update">eel_gfx_update</a></li>
        <li><a class="e_doc" href="#eel_ifft">eel_ifft</a></li>
        <li><a class="e_doc" href="#eel_ifft_real">eel_ifft_real</a></li>
        <li><a class="e_doc" href="#eel_invsqrt">eel_invsqrt</a></li>
        <li><a class="e_doc" href="#eel_log">eel_log</a></li>
        <li><a class="e_doc" href="#eel_log10">eel_log10</a></li>
        <li><a class="e_doc" href="#eel_loop">eel_loop</a></li>
        <li><a class="e_doc" href="#eel_match">eel_match</a></li>
        <li><a class="e_doc" href="#eel_matchi">eel_matchi</a></li>
        <li><a class="e_doc" href="#eel_max">eel_max</a></li>
        <li><a class="e_doc" href="#eel_mem_get_values">eel_mem_get_values</a></li>
        <li><a class="e_doc" href="#eel_mem_insert_shuffle">eel_mem_insert_shuffle</a></li>
        <li><a class="e_doc" href="#eel_mem_multiply_sum">eel_mem_multiply_sum</a></li>
        <li><a class="e_doc" href="#eel_mem_set_values">eel_mem_set_values</a></li>
        <li><a class="e_doc" href="#eel_memcpy">eel_memcpy</a></li>
        <li><a class="e_doc" href="#eel_memset">eel_memset</a></li>
        <li><a class="e_doc" href="#eel_min">eel_min</a></li>
        <li><a class="e_doc" href="#eel_printf">eel_printf</a></li>
        <li><a class="e_doc" href="#eel_rand">eel_rand</a></li>
        <li><a class="e_doc" href="#eel_runloop">eel_runloop</a></li>
        <li><a class="e_doc" href="#eel_sign">eel_sign</a></li>
        <li><a class="e_doc" href="#eel_sin">eel_sin</a></li>
        <li><a class="e_doc" href="#eel_sleep">eel_sleep</a></li>
        <li><a class="e_doc" href="#eel_sprintf">eel_sprintf</a></li>
        <li><a class="e_doc" href="#eel_sqr">eel_sqr</a></li>
        <li><a class="e_doc" href="#eel_sqrt">eel_sqrt</a></li>
        <li><a class="e_doc" href="#eel_stack_exch">eel_stack_exch</a></li>
        <li><a class="e_doc" href="#eel_stack_peek">eel_stack_peek</a></li>
        <li><a class="e_doc" href="#eel_stack_pop">eel_stack_pop</a></li>
        <li><a class="e_doc" href="#eel_stack_push">eel_stack_push</a></li>
        <li><a class="e_doc" href="#eel_str_delsub">eel_str_delsub</a></li>
        <li><a class="e_doc" href="#eel_str_getchar">eel_str_getchar</a></li>
        <li><a class="e_doc" href="#eel_str_insert">eel_str_insert</a></li>
        <li><a class="e_doc" href="#eel_str_setchar">eel_str_setchar</a></li>
        <li><a class="e_doc" href="#eel_str_setlen">eel_str_setlen</a></li>
        <li><a class="e_doc" href="#eel_strcat">eel_strcat</a></li>
        <li><a class="e_doc" href="#eel_strcmp">eel_strcmp</a></li>
        <li><a class="e_doc" href="#eel_strcpy">eel_strcpy</a></li>
        <li><a class="e_doc" href="#eel_strcpy_from">eel_strcpy_from</a></li>
        <li><a class="e_doc" href="#eel_strcpy_substr">eel_strcpy_substr</a></li>
        <li><a class="e_doc" href="#eel_stricmp">eel_stricmp</a></li>
        <li><a class="e_doc" href="#eel_strlen">eel_strlen</a></li>
        <li><a class="e_doc" href="#eel_strncat">eel_strncat</a></li>
        <li><a class="e_doc" href="#eel_strncmp">eel_strncmp</a></li>
        <li><a class="e_doc" href="#eel_strncpy">eel_strncpy</a></li>
        <li><a class="e_doc" href="#eel_strnicmp">eel_strnicmp</a></li>
        <li><a class="e_doc" href="#eel_tan">eel_tan</a></li>
        <li><a class="e_doc" href="#eel_tcp_close">eel_tcp_close</a></li>
        <li><a class="e_doc" href="#eel_tcp_connect">eel_tcp_connect</a></li>
        <li><a class="e_doc" href="#eel_tcp_listen">eel_tcp_listen</a></li>
        <li><a class="e_doc" href="#eel_tcp_listen_end">eel_tcp_listen_end</a></li>
        <li><a class="e_doc" href="#eel_tcp_recv">eel_tcp_recv</a></li>
        <li><a class="e_doc" href="#eel_tcp_send">eel_tcp_send</a></li>
        <li><a class="e_doc" href="#eel_tcp_set_block">eel_tcp_set_block</a></li>
        <li><a class="e_doc" href="#eel_time">eel_time</a></li>
        <li><a class="e_doc" href="#eel_time_precise">eel_time_precise</a></li>
        <li><a class="e_doc" href="#eel_while">eel_while</a></li>
        <li><a class="l_doc" href="#lua_atexit">lua_atexit</a></li>
        <li><a class="l_doc" href="#lua_defer">lua_defer</a></li>
        <li><a class="l_doc" href="#lua_get_action_context">lua_get_action_context</a></li>
        <li><a class="l_doc" href="#lua_gfx_variables">lua_gfx_variables</a></li>
        <li><a class="l_doc" href="#lua_gfx.arc">lua_gfx.arc</a></li>
        <li><a class="l_doc" href="#lua_gfx.blit">lua_gfx.blit</a></li>
        <li><a class="l_doc" href="#lua_gfx.blitext">lua_gfx.blitext</a></li>
        <li><a class="l_doc" href="#lua_gfx.blurto">lua_gfx.blurto</a></li>
        <li><a class="l_doc" href="#lua_gfx.circle">lua_gfx.circle</a></li>
        <li><a class="l_doc" href="#lua_gfx.clienttoscreen">lua_gfx.clienttoscreen</a></li>
        <li><a class="l_doc" href="#lua_gfx.deltablit">lua_gfx.deltablit</a></li>
        <li><a class="l_doc" href="#lua_gfx.dock">lua_gfx.dock</a></li>
        <li><a class="l_doc" href="#lua_gfx.drawchar">lua_gfx.drawchar</a></li>
        <li><a class="l_doc" href="#lua_gfx.drawnumber">lua_gfx.drawnumber</a></li>
        <li><a class="l_doc" href="#lua_gfx.drawstr">lua_gfx.drawstr</a></li>
        <li><a class="l_doc" href="#lua_gfx.getchar">lua_gfx.getchar</a></li>
        <li><a class="l_doc" href="#lua_gfx.getdropfile">lua_gfx.getdropfile</a></li>
        <li><a class="l_doc" href="#lua_gfx.getfont">lua_gfx.getfont</a></li>
        <li><a class="l_doc" href="#lua_gfx.getimgdim">lua_gfx.getimgdim</a></li>
        <li><a class="l_doc" href="#lua_gfx.getpixel">lua_gfx.getpixel</a></li>
        <li><a class="l_doc" href="#lua_gfx.gradrect">lua_gfx.gradrect</a></li>
        <li><a class="l_doc" href="#lua_gfx.init">lua_gfx.init</a></li>
        <li><a class="l_doc" href="#lua_gfx.line">lua_gfx.line</a></li>
        <li><a class="l_doc" href="#lua_gfx.lineto">lua_gfx.lineto</a></li>
        <li><a class="l_doc" href="#lua_gfx.loadimg">lua_gfx.loadimg</a></li>
        <li><a class="l_doc" href="#lua_gfx.measurechar">lua_gfx.measurechar</a></li>
        <li><a class="l_doc" href="#lua_gfx.measurestr">lua_gfx.measurestr</a></li>
        <li><a class="l_doc" href="#lua_gfx.muladdrect">lua_gfx.muladdrect</a></li>
        <li><a class="l_doc" href="#lua_gfx.printf">lua_gfx.printf</a></li>
        <li><a class="l_doc" href="#lua_gfx.quit">lua_gfx.quit</a></li>
        <li><a class="l_doc" href="#lua_gfx.rect">lua_gfx.rect</a></li>
        <li><a class="l_doc" href="#lua_gfx.rectto">lua_gfx.rectto</a></li>
        <li><a class="l_doc" href="#lua_gfx.roundrect">lua_gfx.roundrect</a></li>
        <li><a class="l_doc" href="#lua_gfx.screentoclient">lua_gfx.screentoclient</a></li>
        <li><a class="l_doc" href="#lua_gfx.set">lua_gfx.set</a></li>
        <li><a class="l_doc" href="#lua_gfx.setcursor">lua_gfx.setcursor</a></li>
        <li><a class="l_doc" href="#lua_gfx.setfont">lua_gfx.setfont</a></li>
        <li><a class="l_doc" href="#lua_gfx.setimgdim">lua_gfx.setimgdim</a></li>
        <li><a class="l_doc" href="#lua_gfx.setpixel">lua_gfx.setpixel</a></li>
        <li><a class="l_doc" href="#lua_gfx.showmenu">lua_gfx.showmenu</a></li>
        <li><a class="l_doc" href="#lua_gfx.transformblit">lua_gfx.transformblit</a></li>
        <li><a class="l_doc" href="#lua_gfx.triangle">lua_gfx.triangle</a></li>
        <li><a class="l_doc" href="#lua_gfx.update">lua_gfx.update</a></li>
        <li><a class="l_doc" href="#lua_gmem_attach">lua_gmem_attach</a></li>
        <li><a class="l_doc" href="#lua_gmem_read">lua_gmem_read</a></li>
        <li><a class="l_doc" href="#lua_gmem_write">lua_gmem_write</a></li>
        <li><a class="l_doc" href="#lua_new_array">lua_new_array</a></li>
        <li><a class="l_doc" href="#lua_runloop">lua_runloop</a></li>
        <li><a class="l_doc" href="#lua_{reaper.array}.clear">lua_{reaper.array}.clear</a></li>
        <li><a class="l_doc" href="#lua_{reaper.array}.convolve">lua_{reaper.array}.convolve</a></li>
        <li><a class="l_doc" href="#lua_{reaper.array}.copy">lua_{reaper.array}.copy</a></li>
        <li><a class="l_doc" href="#lua_{reaper.array}.fft">lua_{reaper.array}.fft</a></li>
        <li><a class="l_doc" href="#lua_{reaper.array}.fft_real">lua_{reaper.array}.fft_real</a></li>
        <li><a class="l_doc" href="#lua_{reaper.array}.get_alloc">lua_{reaper.array}.get_alloc</a></li>
        <li><a class="l_doc" href="#lua_{reaper.array}.ifft">lua_{reaper.array}.ifft</a></li>
        <li><a class="l_doc" href="#lua_{reaper.array}.ifft_real">lua_{reaper.array}.ifft_real</a></li>
        <li><a class="l_doc" href="#lua_{reaper.array}.multiply">lua_{reaper.array}.multiply</a></li>
        <li><a class="l_doc" href="#lua_{reaper.array}.resize">lua_{reaper.array}.resize</a></li>
        <li><a class="l_doc" href="#lua_{reaper.array}.table">lua_{reaper.array}.table</a></li>
        <li><a class="p_doc" href="#python_atexit">python_atexit</a></li>
        <li><a class="p_doc" href="#python_defer">python_defer</a></li>
        <li><a class="p_doc" href="#python_runloop">python_runloop</a></li>
    </ul>
  </aside>
  <!-- /#sidebar-wrapper -->

  <!-- Page Content -->
  <div id="page-content-wrapper">

    <section id="intro">
      <h1>ReaScript API — Documentation</h1>
      
      <div class="versions">
        <ul id="versions">
          <li>Last update: <time id="last-update">2023-04-27 20:51</time></li>
          <li><a href="https://www.reaper.fm">REAPER v6.79+dev0427</a></li>
<li><a href="https://www.sws-extension.org">SWS v2.13.2.0</a></li>
<li><a href="https://www.reapack.com">Reapack v1.2.4.3</a></li>
<li><a href="https://github.com/ReaTeam/Extensions">JS_ReaScript API v1.310</a></li>
<li><a href="https://github.com/cfillion/reaimgui/">ReaImgui v0.8.6.1</a></li>
<li><a href="https://forum.cockos.com/showthread.php?t=245445">ReaLlm v0.4.3</a></li>
        </ul>
      </div>
      
      <div class="notes"><p>Searchable and easy-to-read list of <a href="https://www.reaper.fm">REAPER</a> <a href="https://www.reaper.fm/sdk/reascript/reascript.php">ReaScript API</a> functions with common extensions support.<br>Generated from <em>reascript.html</em> file by <a href="https://www.extremraym.com">X-Raym</a>.<br>More infos about it on Cockos forum: <a href="http://forum.cockos.com/showthread.php?t=155671">Documentation: Reascripthelp with Styles and Filtering Tables</a>.</p><p>Thank you for considering making a <a href="https://www.paypal.com/paypalme/extremraym">donation</a> to support this free work! ❤️</p></div>

      <div class="flex">
        <div class="infos">
          <p>Other docs:</p>
          <ul>
            <li><a href="https://github.com/ReaTeam/Doc">ReaTeam Doc Repository</a>: various docs</li>
            <li><a href="https://forum.cockos.com/showthread.php?t=207635">Reaper Internals - DevDocs & Tutorials about the secret internal life of Reaper</a>: Cockos forum post with links to various docs.</li>
            <li><a href="https://mespotin.uber.space/Ultraschall/Reaper_Api_Documentation.html">UltraShall REAPER API Doc</a>: ReaScript API in a different display.</li>
            <li><a href="https://api.codetabs.com/v1/proxy/?quest=https://github.com/cfillion/reaimgui/releases/latest/download/reaper_imgui_doc.html">ReaImGui Doc</a>: ReaImGui Extension official doc</li>
            <li><a href="https://github.com/cfillion/reapack-index/wiki">ReaPack Index wiki</a></li>
          </ul>
        </div>

        <div class="infos">
          <p>Tutorials:</p>
          <ul>
            <li><a href="https://www.youtube.com/watch?v=0Dwonn3Pe2Q&list=PL7M70tQL6s1IOYycGilaHLs5G4vOcyLF8">X-Raym's YouTube ReaScript Course</a></li>
            <li><a href="https://www.admiralbumblebee.com/music/2018/09/22/Reascript-Tutorial.html">AdmiralBumbleBee ReaScript Tutorials</a></li>
            <li><a href="https://adamtcroft.com/home/introduction-to-reascript-tutorial/">Adam Crost ReaScript Introduction articles</a></li>
            <li><a href="https://www.youtube.com/watch?v=TseWlyVZEM4">IDDQS Sound's Let's Learn ReaScript YouTube Series</a></li>
          </ul>
        </div>
      </div>

      <!--<h2>Introduction</h2>
      <div id="introduction">
        $intro
      </div>--><!-- id="introduction" -->
    </section><!-- id="intro" -->

    <section class="functions_all" id="all_funcs">
      <h2>Functions Definitions</h2>

<div class="function_definition" id="AddMediaItemToTrack">
	<div class="c_func"><code>MediaItem* AddMediaItemToTrack(MediaTrack* tr)</code></div>
	<div class="e_func"><code><em>MediaItem</em>  AddMediaItemToTrack(<em>MediaTrack</em> tr)</code></div>
	<div class="l_func"><code><em>MediaItem</em> reaper.AddMediaItemToTrack(<em>MediaTrack</em> tr)</code></div>
	<div class="p_func"><code><em>MediaItem</em>  RPR_AddMediaItemToTrack(<em>MediaTrack</em> tr)</code></div>
	<p>creates a new media item.</p>
</div>

<div class="function_definition" id="AddProjectMarker">
	<div class="c_func"><code>int AddProjectMarker(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx)</code></div>
	<div class="e_func"><code><em>int </em> AddProjectMarker(<em>ReaProject</em> proj, <em>bool </em>isrgn, pos, rgnend, "name", <em>int </em>wantidx)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.AddProjectMarker(<em>ReaProject</em> proj, <em>boolean</em> isrgn, <em>number</em> pos, <em>number</em> rgnend, <em>string</em> name, <em>integer</em> wantidx)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_AddProjectMarker(<em>ReaProject</em> proj, <em>Boolean</em> isrgn, <em>Float</em> pos, <em>Float</em> rgnend, <em>String</em> name, <em>Int</em> wantidx)</code></div>
	<p>Returns the index of the created marker/region, or -1 on failure. Supply wantidx&gt;=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.</p>
</div>

<div class="function_definition" id="AddProjectMarker2">
	<div class="c_func"><code>int AddProjectMarker2(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx, int color)</code></div>
	<div class="e_func"><code><em>int </em> AddProjectMarker2(<em>ReaProject</em> proj, <em>bool </em>isrgn, pos, rgnend, "name", <em>int </em>wantidx, <em>int </em>color)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.AddProjectMarker2(<em>ReaProject</em> proj, <em>boolean</em> isrgn, <em>number</em> pos, <em>number</em> rgnend, <em>string</em> name, <em>integer</em> wantidx, <em>integer</em> color)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_AddProjectMarker2(<em>ReaProject</em> proj, <em>Boolean</em> isrgn, <em>Float</em> pos, <em>Float</em> rgnend, <em>String</em> name, <em>Int</em> wantidx, <em>Int</em> color)</code></div>
	<p>Returns the index of the created marker/region, or -1 on failure. Supply wantidx&gt;=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000</p>
</div>

<div class="function_definition" id="AddRemoveReaScript">
	<div class="c_func"><code>int AddRemoveReaScript(bool add, int sectionID, const char* scriptfn, bool commit)</code></div>
	<div class="e_func"><code><em>int </em> AddRemoveReaScript(<em>bool </em>add, <em>int </em>sectionID, "scriptfn", <em>bool </em>commit)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.AddRemoveReaScript(<em>boolean</em> add, <em>integer</em> sectionID, <em>string</em> scriptfn, <em>boolean</em> commit)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_AddRemoveReaScript(<em>Boolean</em> add, <em>Int</em> sectionID, <em>String</em> scriptfn, <em>Boolean</em> commit)</code></div>
	<p>Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return &gt;0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.</p>
</div>

<div class="function_definition" id="AddTakeToMediaItem">
	<div class="c_func"><code>MediaItem_Take* AddTakeToMediaItem(MediaItem* item)</code></div>
	<div class="e_func"><code><em>MediaItem_Take</em>  AddTakeToMediaItem(<em>MediaItem</em> item)</code></div>
	<div class="l_func"><code><em>MediaItem_Take</em> reaper.AddTakeToMediaItem(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>MediaItem_Take</em>  RPR_AddTakeToMediaItem(<em>MediaItem</em> item)</code></div>
	<p>creates a new take in an item</p>
</div>

<div class="function_definition" id="AddTempoTimeSigMarker">
	<div class="c_func"><code>bool AddTempoTimeSigMarker(ReaProject* proj, double timepos, double bpm, int timesig_num, int timesig_denom, bool lineartempochange)</code></div>
	<div class="e_func"><code><em>bool </em> AddTempoTimeSigMarker(<em>ReaProject</em> proj, timepos, bpm, <em>int </em>timesig_num, <em>int </em>timesig_denom, <em>bool </em>lineartempochange)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.AddTempoTimeSigMarker(<em>ReaProject</em> proj, <em>number</em> timepos, <em>number</em> bpm, <em>integer</em> timesig_num, <em>integer</em> timesig_denom, <em>boolean</em> lineartempochange)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_AddTempoTimeSigMarker(<em>ReaProject</em> proj, <em>Float</em> timepos, <em>Float</em> bpm, <em>Int</em> timesig_num, <em>Int</em> timesig_denom, <em>Boolean</em> lineartempochange)</code></div>
	<p>Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.</p>
</div>

<div class="function_definition" id="adjustZoom">
	<div class="c_func"><code>void adjustZoom(double amt, int forceset, bool doupd, int centermode)</code></div>
	<div class="e_func"><code>adjustZoom(amt, <em>int </em>forceset, <em>bool </em>doupd, <em>int </em>centermode)</code></div>
	<div class="l_func"><code>reaper.adjustZoom(<em>number</em> amt, <em>integer</em> forceset, <em>boolean</em> doupd, <em>integer</em> centermode)</code></div>
	<div class="p_func"><code>RPR_adjustZoom(<em>Float</em> amt, <em>Int</em> forceset, <em>Boolean</em> doupd, <em>Int</em> centermode)</code></div>
	<p>forceset=0,doupd=true,centermode=-1 for default</p>
</div>

<div class="function_definition" id="AnyTrackSolo">
	<div class="c_func"><code>bool AnyTrackSolo(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>bool </em> AnyTrackSolo(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.AnyTrackSolo(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_AnyTrackSolo(<em>ReaProject</em> proj)</code></div>
</div>

<div class="function_definition" id="APIExists">
	<div class="c_func"><code>bool APIExists(const char* function_name)</code></div>
	<div class="e_func"><code><em>bool </em> APIExists("function_name")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.APIExists(<em>string</em> function_name)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_APIExists(<em>String</em> function_name)</code></div>
	<p>Returns true if function_name exists in the REAPER API</p>
</div>

<div class="function_definition" id="APITest">
	<div class="c_func"><code>void APITest()</code></div>
	<div class="e_func"><code>APITest()</code></div>
	<div class="l_func"><code>reaper.APITest()</code></div>
	<div class="p_func"><code>RPR_APITest()</code></div>
	<p>Displays a message window if the API was successfully called.</p>
</div>

<div class="function_definition" id="ApplyNudge">
	<div class="c_func"><code>bool ApplyNudge(ReaProject* project, int nudgeflag, int nudgewhat, int nudgeunits, double value, bool reverse, int copies)</code></div>
	<div class="e_func"><code><em>bool </em> ApplyNudge(<em>ReaProject</em> project, <em>int </em>nudgeflag, <em>int </em>nudgewhat, <em>int </em>nudgeunits, value, <em>bool </em>reverse, <em>int </em>copies)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.ApplyNudge(<em>ReaProject</em> project, <em>integer</em> nudgeflag, <em>integer</em> nudgewhat, <em>integer</em> nudgeunits, <em>number</em> value, <em>boolean</em> reverse, <em>integer</em> copies)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_ApplyNudge(<em>ReaProject</em> project, <em>Int</em> nudgeflag, <em>Int</em> nudgewhat, <em>Int</em> nudgeunits, <em>Float</em> value, <em>Boolean</em> reverse, <em>Int</em> copies)</code></div>
	<p>nudgeflag: &amp;1=set to value (otherwise nudge by value), &amp;2=snap<br>
nudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor<br>
nudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections<br>
value: amount to nudge by, or value to set to<br>
reverse: in nudge mode, nudges left (otherwise ignored)<br>
copies: in nudge duplicate mode, number of copies (otherwise ignored)</p>
</div>

<div class="function_definition" id="ArmCommand">
	<div class="c_func"><code>void ArmCommand(int cmd, const char* sectionname)</code></div>
	<div class="e_func"><code>ArmCommand(<em>int </em>cmd, "sectionname")</code></div>
	<div class="l_func"><code>reaper.ArmCommand(<em>integer</em> cmd, <em>string</em> sectionname)</code></div>
	<div class="p_func"><code>RPR_ArmCommand(<em>Int</em> cmd, <em>String</em> sectionname)</code></div>
	<p>arms a command (or disarms if 0 passed) in section sectionname (empty string for main)</p>
</div>

<div class="function_definition" id="Audio_Init">
	<div class="c_func"><code>void Audio_Init()</code></div>
	<div class="e_func"><code>Audio_Init()</code></div>
	<div class="l_func"><code>reaper.Audio_Init()</code></div>
	<div class="p_func"><code>RPR_Audio_Init()</code></div>
	<p>open all audio and MIDI devices, if not open</p>
</div>

<div class="function_definition" id="Audio_IsPreBuffer">
	<div class="c_func"><code>int Audio_IsPreBuffer()</code></div>
	<div class="e_func"><code><em>int </em> Audio_IsPreBuffer()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.Audio_IsPreBuffer()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_Audio_IsPreBuffer()</code></div>
	<p>is in pre-buffer? threadsafe</p>
</div>

<div class="function_definition" id="Audio_IsRunning">
	<div class="c_func"><code>int Audio_IsRunning()</code></div>
	<div class="e_func"><code><em>int </em> Audio_IsRunning()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.Audio_IsRunning()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_Audio_IsRunning()</code></div>
	<p>is audio running at all? threadsafe</p>
</div>

<div class="function_definition" id="Audio_Quit">
	<div class="c_func"><code>void Audio_Quit()</code></div>
	<div class="e_func"><code>Audio_Quit()</code></div>
	<div class="l_func"><code>reaper.Audio_Quit()</code></div>
	<div class="p_func"><code>RPR_Audio_Quit()</code></div>
	<p>close all audio and MIDI devices, if open</p>
</div>

<div class="function_definition" id="AudioAccessorStateChanged">
	<div class="c_func"><code>bool AudioAccessorStateChanged(AudioAccessor* accessor)</code></div>
	<div class="e_func"><code><em>bool </em> AudioAccessorStateChanged(<em>AudioAccessor</em> accessor)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.AudioAccessorStateChanged(<em>AudioAccessor</em> accessor)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_AudioAccessorStateChanged(<em>AudioAccessor</em> accessor)</code></div>
	<p>Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>
</div>

<div class="function_definition" id="AudioAccessorUpdate">
	<div class="c_func"><code>void AudioAccessorUpdate(AudioAccessor* accessor)</code></div>
	<div class="e_func"><code>AudioAccessorUpdate(<em>AudioAccessor</em> accessor)</code></div>
	<div class="l_func"><code>reaper.AudioAccessorUpdate(<em>AudioAccessor</em> accessor)</code></div>
	<div class="p_func"><code>RPR_AudioAccessorUpdate(<em>AudioAccessor</em> accessor)</code></div>
	<p>Force the accessor to reload its state from the underlying track or media item take. See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>
</div>

<div class="function_definition" id="AudioAccessorValidateState">
	<div class="c_func"><code>bool AudioAccessorValidateState(AudioAccessor* accessor)</code></div>
	<div class="e_func"><code><em>bool </em> AudioAccessorValidateState(<em>AudioAccessor</em> accessor)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.AudioAccessorValidateState(<em>AudioAccessor</em> accessor)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_AudioAccessorValidateState(<em>AudioAccessor</em> accessor)</code></div>
	<p>Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.</p>
</div>

<div class="function_definition" id="BypassFxAllTracks">
	<div class="c_func"><code>void BypassFxAllTracks(int bypass)</code></div>
	<div class="e_func"><code>BypassFxAllTracks(<em>int </em>bypass)</code></div>
	<div class="l_func"><code>reaper.BypassFxAllTracks(<em>integer</em> bypass)</code></div>
	<div class="p_func"><code>RPR_BypassFxAllTracks(<em>Int</em> bypass)</code></div>
	<p>-1 = bypass all if not all bypassed,otherwise unbypass all</p>
</div>

<div class="function_definition" id="CalcMediaSrcLoudness">
	<div class="c_func"><code>int CalcMediaSrcLoudness(PCM_source* mediasource)</code></div>
	<div class="e_func"><code><em>int </em> CalcMediaSrcLoudness(<em>PCM_source</em> mediasource)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CalcMediaSrcLoudness(<em>PCM_source</em> mediasource)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CalcMediaSrcLoudness(<em>PCM_source</em> mediasource)</code></div>
	<p>Calculates loudness statistics of media via dry run render. Statistics will be displayed to the user; call GetSetProjectInfo_String("RENDER_STATS") to retrieve via API. Returns 1 if loudness was calculated successfully, -1 if user canceled the dry run render.</p>
</div>

<div class="function_definition" id="CalculateNormalization">
	<div class="c_func"><code>double CalculateNormalization(PCM_source* source, int normalizeTo, double normalizeTarget, double normalizeStart, double normalizeEnd)</code></div>
	<div class="e_func"><code><em>double </em> CalculateNormalization(<em>PCM_source</em> source, <em>int </em>normalizeTo, normalizeTarget, normalizeStart, normalizeEnd)</code></div>
	<div class="l_func"><code><em>number</em> reaper.CalculateNormalization(<em>PCM_source</em> source, <em>integer</em> normalizeTo, <em>number</em> normalizeTarget, <em>number</em> normalizeStart, <em>number</em> normalizeEnd)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_CalculateNormalization(<em>PCM_source</em> source, <em>Int</em> normalizeTo, <em>Float</em> normalizeTarget, <em>Float</em> normalizeStart, <em>Float</em> normalizeEnd)</code></div>
	<p>Calculate normalize adjustment for source media. normalizeTo: 0=LUFS-I, 1=RMS-I, 2=peak, 3=true peak, 4=LUFS-M max, 5=LUFS-S max. normalizeTarget: dBFS or LUFS value. normalizeStart, normalizeEnd: time bounds within source media for normalization calculation. If normalizationStart=0 and normalizationEnd=0, the full duration of the media will be used for the calculation.</p>
</div>

<div class="function_definition" id="ClearAllRecArmed">
	<div class="c_func"><code>void ClearAllRecArmed()</code></div>
	<div class="e_func"><code>ClearAllRecArmed()</code></div>
	<div class="l_func"><code>reaper.ClearAllRecArmed()</code></div>
	<div class="p_func"><code>RPR_ClearAllRecArmed()</code></div>
</div>

<div class="function_definition" id="ClearConsole">
	<div class="c_func"><code>void ClearConsole()</code></div>
	<div class="e_func"><code>ClearConsole()</code></div>
	<div class="l_func"><code>reaper.ClearConsole()</code></div>
	<div class="p_func"><code>RPR_ClearConsole()</code></div>
	<p>Clear the ReaScript console. See <a href="#ShowConsoleMsg">ShowConsoleMsg</a></p>
</div>

<div class="function_definition" id="ClearPeakCache">
	<div class="c_func"><code>void ClearPeakCache()</code></div>
	<div class="e_func"><code>ClearPeakCache()</code></div>
	<div class="l_func"><code>reaper.ClearPeakCache()</code></div>
	<div class="p_func"><code>RPR_ClearPeakCache()</code></div>
	<p>resets the global peak caches</p>
</div>

<div class="function_definition" id="ColorFromNative">
	<div class="c_func"><code>void ColorFromNative(int col, int* rOut, int* gOut, int* bOut)</code></div>
	<div class="e_func"><code>ColorFromNative(<em>int </em>col, <em>int &amp;</em>r, <em>int &amp;</em>g, <em>int &amp;</em>b)</code></div>
	<div class="l_func"><code><em>integer </em>r, <em>integer </em>g, <em>integer </em>b = reaper.ColorFromNative(<em>integer</em> col)</code></div>
	<div class="p_func"><code>(<em>Int</em> col, <em>Int</em> rOut, <em>Int</em> gOut, <em>Int</em> bOut) = RPR_ColorFromNative(col, rOut, gOut, bOut)</code></div>
	<p>Extract RGB values from an OS dependent color. See <a href="#ColorToNative">ColorToNative</a>.</p>
</div>

<div class="function_definition" id="ColorToNative">
	<div class="c_func"><code>int ColorToNative(int r, int g, int b)</code></div>
	<div class="e_func"><code><em>int </em> ColorToNative(<em>int </em>r, <em>int </em>g, <em>int </em>b)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.ColorToNative(<em>integer</em> r, <em>integer</em> g, <em>integer</em> b)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_ColorToNative(<em>Int</em> r, <em>Int</em> g, <em>Int</em> b)</code></div>
	<p>Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See <a href="#ColorFromNative">ColorFromNative</a>.</p>
</div>

<div class="function_definition" id="CountActionShortcuts">
	<div class="c_func"><code>int CountActionShortcuts(KbdSectionInfo* section, int cmdID)</code></div>
	<div class="e_func"><code><em>int </em> CountActionShortcuts(<em>KbdSectionInfo</em> section, <em>int </em>cmdID)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountActionShortcuts(<em>KbdSectionInfo</em> section, <em>integer</em> cmdID)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountActionShortcuts(<em>KbdSectionInfo</em> section, <em>Int</em> cmdID)</code></div>
	<p>Returns the number of shortcuts that exist for the given command ID.<br>
see <a href="#GetActionShortcutDesc">GetActionShortcutDesc</a>, <a href="#DeleteActionShortcut">DeleteActionShortcut</a>, <a href="#DoActionShortcutDialog">DoActionShortcutDialog</a>.</p>
</div>

<div class="function_definition" id="CountAutomationItems">
	<div class="c_func"><code>int CountAutomationItems(TrackEnvelope* env)</code></div>
	<div class="e_func"><code><em>int </em> CountAutomationItems(<em>TrackEnvelope</em> env)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountAutomationItems(<em>TrackEnvelope</em> env)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountAutomationItems(<em>TrackEnvelope</em> env)</code></div>
	<p>Returns the number of automation items on this envelope. See <a href="#GetSetAutomationItemInfo">GetSetAutomationItemInfo</a></p>
</div>

<div class="function_definition" id="CountEnvelopePoints">
	<div class="c_func"><code>int CountEnvelopePoints(TrackEnvelope* envelope)</code></div>
	<div class="e_func"><code><em>int </em> CountEnvelopePoints(<em>TrackEnvelope</em> envelope)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountEnvelopePoints(<em>TrackEnvelope</em> envelope)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountEnvelopePoints(<em>TrackEnvelope</em> envelope)</code></div>
	<p>Returns the number of points in the envelope. See <a href="#CountEnvelopePointsEx">CountEnvelopePointsEx</a>.</p>
</div>

<div class="function_definition" id="CountEnvelopePointsEx">
	<div class="c_func"><code>int CountEnvelopePointsEx(TrackEnvelope* envelope, int autoitem_idx)</code></div>
	<div class="e_func"><code><em>int </em> CountEnvelopePointsEx(<em>TrackEnvelope</em> envelope, <em>int </em>autoitem_idx)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountEnvelopePointsEx(<em>TrackEnvelope</em> envelope, <em>integer</em> autoitem_idx)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountEnvelopePointsEx(<em>TrackEnvelope</em> envelope, <em>Int</em> autoitem_idx)</code></div>
	<p>Returns the number of points in the envelope.<br>
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.<br>
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,<br>
even if the automation item is trimmed so that not all points are visible.<br>
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.<br>
See <a href="#GetEnvelopePointEx">GetEnvelopePointEx</a>, <a href="#SetEnvelopePointEx">SetEnvelopePointEx</a>, <a href="#InsertEnvelopePointEx">InsertEnvelopePointEx</a>, <a href="#DeleteEnvelopePointEx">DeleteEnvelopePointEx</a>.</p>
</div>

<div class="function_definition" id="CountMediaItems">
	<div class="c_func"><code>int CountMediaItems(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>int </em> CountMediaItems(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountMediaItems(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountMediaItems(<em>ReaProject</em> proj)</code></div>
	<p>count the number of items in the project (proj=0 for active project)</p>
</div>

<div class="function_definition" id="CountProjectMarkers">
	<div class="c_func"><code>int CountProjectMarkers(ReaProject* proj, int* num_markersOut, int* num_regionsOut)</code></div>
	<div class="e_func"><code><em>int </em> CountProjectMarkers(<em>ReaProject</em> proj, <em>int &amp;</em>num_markers, <em>int &amp;</em>num_regions)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>integer </em>num_markers, <em>integer </em>num_regions = reaper.CountProjectMarkers(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>ReaProject</em> proj, <em>Int</em> num_markersOut, <em>Int</em> num_regionsOut) = RPR_CountProjectMarkers(proj, num_markersOut, num_regionsOut)</code></div>
	<p>num_markersOut and num_regionsOut may be NULL.</p>
</div>

<div class="function_definition" id="CountSelectedMediaItems">
	<div class="c_func"><code>int CountSelectedMediaItems(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>int </em> CountSelectedMediaItems(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountSelectedMediaItems(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountSelectedMediaItems(<em>ReaProject</em> proj)</code></div>
	<p>count the number of selected items in the project (proj=0 for active project)</p>
</div>

<div class="function_definition" id="CountSelectedTracks">
	<div class="c_func"><code>int CountSelectedTracks(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>int </em> CountSelectedTracks(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountSelectedTracks(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountSelectedTracks(<em>ReaProject</em> proj)</code></div>
	<p>Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see <a href="#CountSelectedTracks2">CountSelectedTracks2</a>.</p>
</div>

<div class="function_definition" id="CountSelectedTracks2">
	<div class="c_func"><code>int CountSelectedTracks2(ReaProject* proj, bool wantmaster)</code></div>
	<div class="e_func"><code><em>int </em> CountSelectedTracks2(<em>ReaProject</em> proj, <em>bool </em>wantmaster)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountSelectedTracks2(<em>ReaProject</em> proj, <em>boolean</em> wantmaster)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountSelectedTracks2(<em>ReaProject</em> proj, <em>Boolean</em> wantmaster)</code></div>
	<p>Count the number of selected tracks in the project (proj=0 for active project).</p>
</div>

<div class="function_definition" id="CountTakeEnvelopes">
	<div class="c_func"><code>int CountTakeEnvelopes(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>int </em> CountTakeEnvelopes(<em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountTakeEnvelopes(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountTakeEnvelopes(<em>MediaItem_Take</em> take)</code></div>
	<p>See <a href="#GetTakeEnvelope">GetTakeEnvelope</a></p>
</div>

<div class="function_definition" id="CountTakes">
	<div class="c_func"><code>int CountTakes(MediaItem* item)</code></div>
	<div class="e_func"><code><em>int </em> CountTakes(<em>MediaItem</em> item)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountTakes(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountTakes(<em>MediaItem</em> item)</code></div>
	<p>count the number of takes in the item</p>
</div>

<div class="function_definition" id="CountTCPFXParms">
	<div class="c_func"><code>int CountTCPFXParms(ReaProject* project, MediaTrack* track)</code></div>
	<div class="e_func"><code><em>int </em> CountTCPFXParms(<em>ReaProject</em> project, <em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountTCPFXParms(<em>ReaProject</em> project, <em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountTCPFXParms(<em>ReaProject</em> project, <em>MediaTrack</em> track)</code></div>
	<p>Count the number of FX parameter knobs displayed on the track control panel.</p>
</div>

<div class="function_definition" id="CountTempoTimeSigMarkers">
	<div class="c_func"><code>int CountTempoTimeSigMarkers(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>int </em> CountTempoTimeSigMarkers(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountTempoTimeSigMarkers(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountTempoTimeSigMarkers(<em>ReaProject</em> proj)</code></div>
	<p>Count the number of tempo/time signature markers in the project. See <a href="#GetTempoTimeSigMarker">GetTempoTimeSigMarker</a>, <a href="#SetTempoTimeSigMarker">SetTempoTimeSigMarker</a>, <a href="#AddTempoTimeSigMarker">AddTempoTimeSigMarker</a>.</p>
</div>

<div class="function_definition" id="CountTrackEnvelopes">
	<div class="c_func"><code>int CountTrackEnvelopes(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>int </em> CountTrackEnvelopes(<em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountTrackEnvelopes(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountTrackEnvelopes(<em>MediaTrack</em> track)</code></div>
	<p>see <a href="#GetTrackEnvelope">GetTrackEnvelope</a></p>
</div>

<div class="function_definition" id="CountTrackMediaItems">
	<div class="c_func"><code>int CountTrackMediaItems(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>int </em> CountTrackMediaItems(<em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountTrackMediaItems(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountTrackMediaItems(<em>MediaTrack</em> track)</code></div>
	<p>count the number of items in the track</p>
</div>

<div class="function_definition" id="CountTracks">
	<div class="c_func"><code>int CountTracks(ReaProject* projOptional)</code></div>
	<div class="e_func"><code><em>int </em> CountTracks(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CountTracks(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CountTracks(<em>ReaProject</em> projOptional)</code></div>
	<p>count the number of tracks in the project (proj=0 for active project)</p>
</div>

<div class="function_definition" id="CreateNewMIDIItemInProj">
	<div class="c_func"><code>MediaItem* CreateNewMIDIItemInProj(MediaTrack* track, double starttime, double endtime, const bool* qnInOptional)</code></div>
	<div class="e_func"><code><em>MediaItem</em>  CreateNewMIDIItemInProj(<em>MediaTrack</em> track, starttime, endtime, <em>optional bool</em> qnIn)</code></div>
	<div class="l_func"><code><em>MediaItem</em> reaper.CreateNewMIDIItemInProj(<em>MediaTrack</em> track, <em>number</em> starttime, <em>number</em> endtime, <em>optional boolean</em> qnIn)</code></div>
	<div class="p_func"><code><em>MediaItem</em>  RPR_CreateNewMIDIItemInProj(<em>MediaTrack</em> track, <em>Float</em> starttime, <em>Float</em> endtime, <em>const bool</em> qnInOptional)</code></div>
	<p>Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.</p>
</div>

<div class="function_definition" id="CreateTakeAudioAccessor">
	<div class="c_func"><code>AudioAccessor* CreateTakeAudioAccessor(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>AudioAccessor</em>  CreateTakeAudioAccessor(<em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code><em>AudioAccessor</em> reaper.CreateTakeAudioAccessor(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>AudioAccessor</em>  RPR_CreateTakeAudioAccessor(<em>MediaItem_Take</em> take)</code></div>
	<p>Create an audio accessor object for this take. Must only call from the main thread. See <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>
</div>

<div class="function_definition" id="CreateTrackAudioAccessor">
	<div class="c_func"><code>AudioAccessor* CreateTrackAudioAccessor(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>AudioAccessor</em>  CreateTrackAudioAccessor(<em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>AudioAccessor</em> reaper.CreateTrackAudioAccessor(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>AudioAccessor</em>  RPR_CreateTrackAudioAccessor(<em>MediaTrack</em> track)</code></div>
	<p>Create an audio accessor object for this track. Must only call from the main thread. See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>
</div>

<div class="function_definition" id="CreateTrackSend">
	<div class="c_func"><code>int CreateTrackSend(MediaTrack* tr, MediaTrack* desttrInOptional)</code></div>
	<div class="e_func"><code><em>int </em> CreateTrackSend(<em>MediaTrack</em> tr, <em>MediaTrack</em> desttrIn)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CreateTrackSend(<em>MediaTrack</em> tr, <em>MediaTrack</em> desttrIn)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CreateTrackSend(<em>MediaTrack</em> tr, <em>MediaTrack</em> desttrInOptional)</code></div>
	<p>Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return &gt;=0 on success (== new send/receive index). See <a href="#RemoveTrackSend">RemoveTrackSend</a>, <a href="#GetSetTrackSendInfo">GetSetTrackSendInfo</a>, <a href="#GetTrackSendInfo_Value">GetTrackSendInfo_Value</a>, <a href="#SetTrackSendInfo_Value">SetTrackSendInfo_Value</a>.</p>
</div>

<div class="function_definition" id="CSurf_FlushUndo">
	<div class="c_func"><code>void CSurf_FlushUndo(bool force)</code></div>
	<div class="e_func"><code>CSurf_FlushUndo(<em>bool </em>force)</code></div>
	<div class="l_func"><code>reaper.CSurf_FlushUndo(<em>boolean</em> force)</code></div>
	<div class="p_func"><code>RPR_CSurf_FlushUndo(<em>Boolean</em> force)</code></div>
	<p>call this to force flushing of the undo states after using CSurf_On*Change()</p>
</div>

<div class="function_definition" id="CSurf_GetTouchState">
	<div class="c_func"><code>bool CSurf_GetTouchState(MediaTrack* trackid, int isPan)</code></div>
	<div class="e_func"><code><em>bool </em> CSurf_GetTouchState(<em>MediaTrack</em> trackid, <em>int </em>isPan)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.CSurf_GetTouchState(<em>MediaTrack</em> trackid, <em>integer</em> isPan)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_CSurf_GetTouchState(<em>MediaTrack</em> trackid, <em>Int</em> isPan)</code></div>
</div>

<div class="function_definition" id="CSurf_GoEnd">
	<div class="c_func"><code>void CSurf_GoEnd()</code></div>
	<div class="e_func"><code>CSurf_GoEnd()</code></div>
	<div class="l_func"><code>reaper.CSurf_GoEnd()</code></div>
	<div class="p_func"><code>RPR_CSurf_GoEnd()</code></div>
</div>

<div class="function_definition" id="CSurf_GoStart">
	<div class="c_func"><code>void CSurf_GoStart()</code></div>
	<div class="e_func"><code>CSurf_GoStart()</code></div>
	<div class="l_func"><code>reaper.CSurf_GoStart()</code></div>
	<div class="p_func"><code>RPR_CSurf_GoStart()</code></div>
</div>

<div class="function_definition" id="CSurf_NumTracks">
	<div class="c_func"><code>int CSurf_NumTracks(bool mcpView)</code></div>
	<div class="e_func"><code><em>int </em> CSurf_NumTracks(<em>bool </em>mcpView)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CSurf_NumTracks(<em>boolean</em> mcpView)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CSurf_NumTracks(<em>Boolean</em> mcpView)</code></div>
</div>

<div class="function_definition" id="CSurf_OnArrow">
	<div class="c_func"><code>void CSurf_OnArrow(int whichdir, bool wantzoom)</code></div>
	<div class="e_func"><code>CSurf_OnArrow(<em>int </em>whichdir, <em>bool </em>wantzoom)</code></div>
	<div class="l_func"><code>reaper.CSurf_OnArrow(<em>integer</em> whichdir, <em>boolean</em> wantzoom)</code></div>
	<div class="p_func"><code>RPR_CSurf_OnArrow(<em>Int</em> whichdir, <em>Boolean</em> wantzoom)</code></div>
</div>

<div class="function_definition" id="CSurf_OnFwd">
	<div class="c_func"><code>void CSurf_OnFwd(int seekplay)</code></div>
	<div class="e_func"><code>CSurf_OnFwd(<em>int </em>seekplay)</code></div>
	<div class="l_func"><code>reaper.CSurf_OnFwd(<em>integer</em> seekplay)</code></div>
	<div class="p_func"><code>RPR_CSurf_OnFwd(<em>Int</em> seekplay)</code></div>
</div>

<div class="function_definition" id="CSurf_OnFXChange">
	<div class="c_func"><code>bool CSurf_OnFXChange(MediaTrack* trackid, int en)</code></div>
	<div class="e_func"><code><em>bool </em> CSurf_OnFXChange(<em>MediaTrack</em> trackid, <em>int </em>en)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.CSurf_OnFXChange(<em>MediaTrack</em> trackid, <em>integer</em> en)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_CSurf_OnFXChange(<em>MediaTrack</em> trackid, <em>Int</em> en)</code></div>
</div>

<div class="function_definition" id="CSurf_OnInputMonitorChange">
	<div class="c_func"><code>int CSurf_OnInputMonitorChange(MediaTrack* trackid, int monitor)</code></div>
	<div class="e_func"><code><em>int </em> CSurf_OnInputMonitorChange(<em>MediaTrack</em> trackid, <em>int </em>monitor)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CSurf_OnInputMonitorChange(<em>MediaTrack</em> trackid, <em>integer</em> monitor)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CSurf_OnInputMonitorChange(<em>MediaTrack</em> trackid, <em>Int</em> monitor)</code></div>
</div>

<div class="function_definition" id="CSurf_OnInputMonitorChangeEx">
	<div class="c_func"><code>int CSurf_OnInputMonitorChangeEx(MediaTrack* trackid, int monitor, bool allowgang)</code></div>
	<div class="e_func"><code><em>int </em> CSurf_OnInputMonitorChangeEx(<em>MediaTrack</em> trackid, <em>int </em>monitor, <em>bool </em>allowgang)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CSurf_OnInputMonitorChangeEx(<em>MediaTrack</em> trackid, <em>integer</em> monitor, <em>boolean</em> allowgang)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CSurf_OnInputMonitorChangeEx(<em>MediaTrack</em> trackid, <em>Int</em> monitor, <em>Boolean</em> allowgang)</code></div>
</div>

<div class="function_definition" id="CSurf_OnMuteChange">
	<div class="c_func"><code>bool CSurf_OnMuteChange(MediaTrack* trackid, int mute)</code></div>
	<div class="e_func"><code><em>bool </em> CSurf_OnMuteChange(<em>MediaTrack</em> trackid, <em>int </em>mute)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.CSurf_OnMuteChange(<em>MediaTrack</em> trackid, <em>integer</em> mute)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_CSurf_OnMuteChange(<em>MediaTrack</em> trackid, <em>Int</em> mute)</code></div>
</div>

<div class="function_definition" id="CSurf_OnMuteChangeEx">
	<div class="c_func"><code>bool CSurf_OnMuteChangeEx(MediaTrack* trackid, int mute, bool allowgang)</code></div>
	<div class="e_func"><code><em>bool </em> CSurf_OnMuteChangeEx(<em>MediaTrack</em> trackid, <em>int </em>mute, <em>bool </em>allowgang)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.CSurf_OnMuteChangeEx(<em>MediaTrack</em> trackid, <em>integer</em> mute, <em>boolean</em> allowgang)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_CSurf_OnMuteChangeEx(<em>MediaTrack</em> trackid, <em>Int</em> mute, <em>Boolean</em> allowgang)</code></div>
</div>

<div class="function_definition" id="CSurf_OnPanChange">
	<div class="c_func"><code>double CSurf_OnPanChange(MediaTrack* trackid, double pan, bool relative)</code></div>
	<div class="e_func"><code><em>double </em> CSurf_OnPanChange(<em>MediaTrack</em> trackid, pan, <em>bool </em>relative)</code></div>
	<div class="l_func"><code><em>number</em> reaper.CSurf_OnPanChange(<em>MediaTrack</em> trackid, <em>number</em> pan, <em>boolean</em> relative)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_CSurf_OnPanChange(<em>MediaTrack</em> trackid, <em>Float</em> pan, <em>Boolean</em> relative)</code></div>
</div>

<div class="function_definition" id="CSurf_OnPanChangeEx">
	<div class="c_func"><code>double CSurf_OnPanChangeEx(MediaTrack* trackid, double pan, bool relative, bool allowGang)</code></div>
	<div class="e_func"><code><em>double </em> CSurf_OnPanChangeEx(<em>MediaTrack</em> trackid, pan, <em>bool </em>relative, <em>bool </em>allowGang)</code></div>
	<div class="l_func"><code><em>number</em> reaper.CSurf_OnPanChangeEx(<em>MediaTrack</em> trackid, <em>number</em> pan, <em>boolean</em> relative, <em>boolean</em> allowGang)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_CSurf_OnPanChangeEx(<em>MediaTrack</em> trackid, <em>Float</em> pan, <em>Boolean</em> relative, <em>Boolean</em> allowGang)</code></div>
</div>

<div class="function_definition" id="CSurf_OnPause">
	<div class="c_func"><code>void CSurf_OnPause()</code></div>
	<div class="e_func"><code>CSurf_OnPause()</code></div>
	<div class="l_func"><code>reaper.CSurf_OnPause()</code></div>
	<div class="p_func"><code>RPR_CSurf_OnPause()</code></div>
</div>

<div class="function_definition" id="CSurf_OnPlay">
	<div class="c_func"><code>void CSurf_OnPlay()</code></div>
	<div class="e_func"><code>CSurf_OnPlay()</code></div>
	<div class="l_func"><code>reaper.CSurf_OnPlay()</code></div>
	<div class="p_func"><code>RPR_CSurf_OnPlay()</code></div>
</div>

<div class="function_definition" id="CSurf_OnPlayRateChange">
	<div class="c_func"><code>void CSurf_OnPlayRateChange(double playrate)</code></div>
	<div class="e_func"><code>CSurf_OnPlayRateChange(playrate)</code></div>
	<div class="l_func"><code>reaper.CSurf_OnPlayRateChange(<em>number</em> playrate)</code></div>
	<div class="p_func"><code>RPR_CSurf_OnPlayRateChange(<em>Float</em> playrate)</code></div>
</div>

<div class="function_definition" id="CSurf_OnRecArmChange">
	<div class="c_func"><code>bool CSurf_OnRecArmChange(MediaTrack* trackid, int recarm)</code></div>
	<div class="e_func"><code><em>bool </em> CSurf_OnRecArmChange(<em>MediaTrack</em> trackid, <em>int </em>recarm)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.CSurf_OnRecArmChange(<em>MediaTrack</em> trackid, <em>integer</em> recarm)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_CSurf_OnRecArmChange(<em>MediaTrack</em> trackid, <em>Int</em> recarm)</code></div>
</div>

<div class="function_definition" id="CSurf_OnRecArmChangeEx">
	<div class="c_func"><code>bool CSurf_OnRecArmChangeEx(MediaTrack* trackid, int recarm, bool allowgang)</code></div>
	<div class="e_func"><code><em>bool </em> CSurf_OnRecArmChangeEx(<em>MediaTrack</em> trackid, <em>int </em>recarm, <em>bool </em>allowgang)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.CSurf_OnRecArmChangeEx(<em>MediaTrack</em> trackid, <em>integer</em> recarm, <em>boolean</em> allowgang)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_CSurf_OnRecArmChangeEx(<em>MediaTrack</em> trackid, <em>Int</em> recarm, <em>Boolean</em> allowgang)</code></div>
</div>

<div class="function_definition" id="CSurf_OnRecord">
	<div class="c_func"><code>void CSurf_OnRecord()</code></div>
	<div class="e_func"><code>CSurf_OnRecord()</code></div>
	<div class="l_func"><code>reaper.CSurf_OnRecord()</code></div>
	<div class="p_func"><code>RPR_CSurf_OnRecord()</code></div>
</div>

<div class="function_definition" id="CSurf_OnRecvPanChange">
	<div class="c_func"><code>double CSurf_OnRecvPanChange(MediaTrack* trackid, int recv_index, double pan, bool relative)</code></div>
	<div class="e_func"><code><em>double </em> CSurf_OnRecvPanChange(<em>MediaTrack</em> trackid, <em>int </em>recv_index, pan, <em>bool </em>relative)</code></div>
	<div class="l_func"><code><em>number</em> reaper.CSurf_OnRecvPanChange(<em>MediaTrack</em> trackid, <em>integer</em> recv_index, <em>number</em> pan, <em>boolean</em> relative)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_CSurf_OnRecvPanChange(<em>MediaTrack</em> trackid, <em>Int</em> recv_index, <em>Float</em> pan, <em>Boolean</em> relative)</code></div>
</div>

<div class="function_definition" id="CSurf_OnRecvVolumeChange">
	<div class="c_func"><code>double CSurf_OnRecvVolumeChange(MediaTrack* trackid, int recv_index, double volume, bool relative)</code></div>
	<div class="e_func"><code><em>double </em> CSurf_OnRecvVolumeChange(<em>MediaTrack</em> trackid, <em>int </em>recv_index, volume, <em>bool </em>relative)</code></div>
	<div class="l_func"><code><em>number</em> reaper.CSurf_OnRecvVolumeChange(<em>MediaTrack</em> trackid, <em>integer</em> recv_index, <em>number</em> volume, <em>boolean</em> relative)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_CSurf_OnRecvVolumeChange(<em>MediaTrack</em> trackid, <em>Int</em> recv_index, <em>Float</em> volume, <em>Boolean</em> relative)</code></div>
</div>

<div class="function_definition" id="CSurf_OnRew">
	<div class="c_func"><code>void CSurf_OnRew(int seekplay)</code></div>
	<div class="e_func"><code>CSurf_OnRew(<em>int </em>seekplay)</code></div>
	<div class="l_func"><code>reaper.CSurf_OnRew(<em>integer</em> seekplay)</code></div>
	<div class="p_func"><code>RPR_CSurf_OnRew(<em>Int</em> seekplay)</code></div>
</div>

<div class="function_definition" id="CSurf_OnRewFwd">
	<div class="c_func"><code>void CSurf_OnRewFwd(int seekplay, int dir)</code></div>
	<div class="e_func"><code>CSurf_OnRewFwd(<em>int </em>seekplay, <em>int </em>dir)</code></div>
	<div class="l_func"><code>reaper.CSurf_OnRewFwd(<em>integer</em> seekplay, <em>integer</em> dir)</code></div>
	<div class="p_func"><code>RPR_CSurf_OnRewFwd(<em>Int</em> seekplay, <em>Int</em> dir)</code></div>
</div>

<div class="function_definition" id="CSurf_OnScroll">
	<div class="c_func"><code>void CSurf_OnScroll(int xdir, int ydir)</code></div>
	<div class="e_func"><code>CSurf_OnScroll(<em>int </em>xdir, <em>int </em>ydir)</code></div>
	<div class="l_func"><code>reaper.CSurf_OnScroll(<em>integer</em> xdir, <em>integer</em> ydir)</code></div>
	<div class="p_func"><code>RPR_CSurf_OnScroll(<em>Int</em> xdir, <em>Int</em> ydir)</code></div>
</div>

<div class="function_definition" id="CSurf_OnSelectedChange">
	<div class="c_func"><code>bool CSurf_OnSelectedChange(MediaTrack* trackid, int selected)</code></div>
	<div class="e_func"><code><em>bool </em> CSurf_OnSelectedChange(<em>MediaTrack</em> trackid, <em>int </em>selected)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.CSurf_OnSelectedChange(<em>MediaTrack</em> trackid, <em>integer</em> selected)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_CSurf_OnSelectedChange(<em>MediaTrack</em> trackid, <em>Int</em> selected)</code></div>
</div>

<div class="function_definition" id="CSurf_OnSendPanChange">
	<div class="c_func"><code>double CSurf_OnSendPanChange(MediaTrack* trackid, int send_index, double pan, bool relative)</code></div>
	<div class="e_func"><code><em>double </em> CSurf_OnSendPanChange(<em>MediaTrack</em> trackid, <em>int </em>send_index, pan, <em>bool </em>relative)</code></div>
	<div class="l_func"><code><em>number</em> reaper.CSurf_OnSendPanChange(<em>MediaTrack</em> trackid, <em>integer</em> send_index, <em>number</em> pan, <em>boolean</em> relative)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_CSurf_OnSendPanChange(<em>MediaTrack</em> trackid, <em>Int</em> send_index, <em>Float</em> pan, <em>Boolean</em> relative)</code></div>
</div>

<div class="function_definition" id="CSurf_OnSendVolumeChange">
	<div class="c_func"><code>double CSurf_OnSendVolumeChange(MediaTrack* trackid, int send_index, double volume, bool relative)</code></div>
	<div class="e_func"><code><em>double </em> CSurf_OnSendVolumeChange(<em>MediaTrack</em> trackid, <em>int </em>send_index, volume, <em>bool </em>relative)</code></div>
	<div class="l_func"><code><em>number</em> reaper.CSurf_OnSendVolumeChange(<em>MediaTrack</em> trackid, <em>integer</em> send_index, <em>number</em> volume, <em>boolean</em> relative)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_CSurf_OnSendVolumeChange(<em>MediaTrack</em> trackid, <em>Int</em> send_index, <em>Float</em> volume, <em>Boolean</em> relative)</code></div>
</div>

<div class="function_definition" id="CSurf_OnSoloChange">
	<div class="c_func"><code>bool CSurf_OnSoloChange(MediaTrack* trackid, int solo)</code></div>
	<div class="e_func"><code><em>bool </em> CSurf_OnSoloChange(<em>MediaTrack</em> trackid, <em>int </em>solo)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.CSurf_OnSoloChange(<em>MediaTrack</em> trackid, <em>integer</em> solo)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_CSurf_OnSoloChange(<em>MediaTrack</em> trackid, <em>Int</em> solo)</code></div>
</div>

<div class="function_definition" id="CSurf_OnSoloChangeEx">
	<div class="c_func"><code>bool CSurf_OnSoloChangeEx(MediaTrack* trackid, int solo, bool allowgang)</code></div>
	<div class="e_func"><code><em>bool </em> CSurf_OnSoloChangeEx(<em>MediaTrack</em> trackid, <em>int </em>solo, <em>bool </em>allowgang)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.CSurf_OnSoloChangeEx(<em>MediaTrack</em> trackid, <em>integer</em> solo, <em>boolean</em> allowgang)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_CSurf_OnSoloChangeEx(<em>MediaTrack</em> trackid, <em>Int</em> solo, <em>Boolean</em> allowgang)</code></div>
</div>

<div class="function_definition" id="CSurf_OnStop">
	<div class="c_func"><code>void CSurf_OnStop()</code></div>
	<div class="e_func"><code>CSurf_OnStop()</code></div>
	<div class="l_func"><code>reaper.CSurf_OnStop()</code></div>
	<div class="p_func"><code>RPR_CSurf_OnStop()</code></div>
</div>

<div class="function_definition" id="CSurf_OnTempoChange">
	<div class="c_func"><code>void CSurf_OnTempoChange(double bpm)</code></div>
	<div class="e_func"><code>CSurf_OnTempoChange(bpm)</code></div>
	<div class="l_func"><code>reaper.CSurf_OnTempoChange(<em>number</em> bpm)</code></div>
	<div class="p_func"><code>RPR_CSurf_OnTempoChange(<em>Float</em> bpm)</code></div>
</div>

<div class="function_definition" id="CSurf_OnTrackSelection">
	<div class="c_func"><code>void CSurf_OnTrackSelection(MediaTrack* trackid)</code></div>
	<div class="e_func"><code>CSurf_OnTrackSelection(<em>MediaTrack</em> trackid)</code></div>
	<div class="l_func"><code>reaper.CSurf_OnTrackSelection(<em>MediaTrack</em> trackid)</code></div>
	<div class="p_func"><code>RPR_CSurf_OnTrackSelection(<em>MediaTrack</em> trackid)</code></div>
</div>

<div class="function_definition" id="CSurf_OnVolumeChange">
	<div class="c_func"><code>double CSurf_OnVolumeChange(MediaTrack* trackid, double volume, bool relative)</code></div>
	<div class="e_func"><code><em>double </em> CSurf_OnVolumeChange(<em>MediaTrack</em> trackid, volume, <em>bool </em>relative)</code></div>
	<div class="l_func"><code><em>number</em> reaper.CSurf_OnVolumeChange(<em>MediaTrack</em> trackid, <em>number</em> volume, <em>boolean</em> relative)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_CSurf_OnVolumeChange(<em>MediaTrack</em> trackid, <em>Float</em> volume, <em>Boolean</em> relative)</code></div>
</div>

<div class="function_definition" id="CSurf_OnVolumeChangeEx">
	<div class="c_func"><code>double CSurf_OnVolumeChangeEx(MediaTrack* trackid, double volume, bool relative, bool allowGang)</code></div>
	<div class="e_func"><code><em>double </em> CSurf_OnVolumeChangeEx(<em>MediaTrack</em> trackid, volume, <em>bool </em>relative, <em>bool </em>allowGang)</code></div>
	<div class="l_func"><code><em>number</em> reaper.CSurf_OnVolumeChangeEx(<em>MediaTrack</em> trackid, <em>number</em> volume, <em>boolean</em> relative, <em>boolean</em> allowGang)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_CSurf_OnVolumeChangeEx(<em>MediaTrack</em> trackid, <em>Float</em> volume, <em>Boolean</em> relative, <em>Boolean</em> allowGang)</code></div>
</div>

<div class="function_definition" id="CSurf_OnWidthChange">
	<div class="c_func"><code>double CSurf_OnWidthChange(MediaTrack* trackid, double width, bool relative)</code></div>
	<div class="e_func"><code><em>double </em> CSurf_OnWidthChange(<em>MediaTrack</em> trackid, width, <em>bool </em>relative)</code></div>
	<div class="l_func"><code><em>number</em> reaper.CSurf_OnWidthChange(<em>MediaTrack</em> trackid, <em>number</em> width, <em>boolean</em> relative)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_CSurf_OnWidthChange(<em>MediaTrack</em> trackid, <em>Float</em> width, <em>Boolean</em> relative)</code></div>
</div>

<div class="function_definition" id="CSurf_OnWidthChangeEx">
	<div class="c_func"><code>double CSurf_OnWidthChangeEx(MediaTrack* trackid, double width, bool relative, bool allowGang)</code></div>
	<div class="e_func"><code><em>double </em> CSurf_OnWidthChangeEx(<em>MediaTrack</em> trackid, width, <em>bool </em>relative, <em>bool </em>allowGang)</code></div>
	<div class="l_func"><code><em>number</em> reaper.CSurf_OnWidthChangeEx(<em>MediaTrack</em> trackid, <em>number</em> width, <em>boolean</em> relative, <em>boolean</em> allowGang)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_CSurf_OnWidthChangeEx(<em>MediaTrack</em> trackid, <em>Float</em> width, <em>Boolean</em> relative, <em>Boolean</em> allowGang)</code></div>
</div>

<div class="function_definition" id="CSurf_OnZoom">
	<div class="c_func"><code>void CSurf_OnZoom(int xdir, int ydir)</code></div>
	<div class="e_func"><code>CSurf_OnZoom(<em>int </em>xdir, <em>int </em>ydir)</code></div>
	<div class="l_func"><code>reaper.CSurf_OnZoom(<em>integer</em> xdir, <em>integer</em> ydir)</code></div>
	<div class="p_func"><code>RPR_CSurf_OnZoom(<em>Int</em> xdir, <em>Int</em> ydir)</code></div>
</div>

<div class="function_definition" id="CSurf_ResetAllCachedVolPanStates">
	<div class="c_func"><code>void CSurf_ResetAllCachedVolPanStates()</code></div>
	<div class="e_func"><code>CSurf_ResetAllCachedVolPanStates()</code></div>
	<div class="l_func"><code>reaper.CSurf_ResetAllCachedVolPanStates()</code></div>
	<div class="p_func"><code>RPR_CSurf_ResetAllCachedVolPanStates()</code></div>
</div>

<div class="function_definition" id="CSurf_ScrubAmt">
	<div class="c_func"><code>void CSurf_ScrubAmt(double amt)</code></div>
	<div class="e_func"><code>CSurf_ScrubAmt(amt)</code></div>
	<div class="l_func"><code>reaper.CSurf_ScrubAmt(<em>number</em> amt)</code></div>
	<div class="p_func"><code>RPR_CSurf_ScrubAmt(<em>Float</em> amt)</code></div>
</div>

<div class="function_definition" id="CSurf_SetAutoMode">
	<div class="c_func"><code>void CSurf_SetAutoMode(int mode, IReaperControlSurface* ignoresurf)</code></div>
	<div class="e_func"><code>CSurf_SetAutoMode(<em>int </em>mode, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="l_func"><code>reaper.CSurf_SetAutoMode(<em>integer</em> mode, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="p_func"><code>RPR_CSurf_SetAutoMode(<em>Int</em> mode, <em>IReaperControlSurface</em> ignoresurf)</code></div>
</div>

<div class="function_definition" id="CSurf_SetPlayState">
	<div class="c_func"><code>void CSurf_SetPlayState(bool play, bool pause, bool rec, IReaperControlSurface* ignoresurf)</code></div>
	<div class="e_func"><code>CSurf_SetPlayState(<em>bool </em>play, <em>bool </em>pause, <em>bool </em>rec, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="l_func"><code>reaper.CSurf_SetPlayState(<em>boolean</em> play, <em>boolean</em> pause, <em>boolean</em> rec, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="p_func"><code>RPR_CSurf_SetPlayState(<em>Boolean</em> play, <em>Boolean</em> pause, <em>Boolean</em> rec, <em>IReaperControlSurface</em> ignoresurf)</code></div>
</div>

<div class="function_definition" id="CSurf_SetRepeatState">
	<div class="c_func"><code>void CSurf_SetRepeatState(bool rep, IReaperControlSurface* ignoresurf)</code></div>
	<div class="e_func"><code>CSurf_SetRepeatState(<em>bool </em>rep, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="l_func"><code>reaper.CSurf_SetRepeatState(<em>boolean</em> rep, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="p_func"><code>RPR_CSurf_SetRepeatState(<em>Boolean</em> rep, <em>IReaperControlSurface</em> ignoresurf)</code></div>
</div>

<div class="function_definition" id="CSurf_SetSurfaceMute">
	<div class="c_func"><code>void CSurf_SetSurfaceMute(MediaTrack* trackid, bool mute, IReaperControlSurface* ignoresurf)</code></div>
	<div class="e_func"><code>CSurf_SetSurfaceMute(<em>MediaTrack</em> trackid, <em>bool </em>mute, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="l_func"><code>reaper.CSurf_SetSurfaceMute(<em>MediaTrack</em> trackid, <em>boolean</em> mute, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="p_func"><code>RPR_CSurf_SetSurfaceMute(<em>MediaTrack</em> trackid, <em>Boolean</em> mute, <em>IReaperControlSurface</em> ignoresurf)</code></div>
</div>

<div class="function_definition" id="CSurf_SetSurfacePan">
	<div class="c_func"><code>void CSurf_SetSurfacePan(MediaTrack* trackid, double pan, IReaperControlSurface* ignoresurf)</code></div>
	<div class="e_func"><code>CSurf_SetSurfacePan(<em>MediaTrack</em> trackid, pan, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="l_func"><code>reaper.CSurf_SetSurfacePan(<em>MediaTrack</em> trackid, <em>number</em> pan, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="p_func"><code>RPR_CSurf_SetSurfacePan(<em>MediaTrack</em> trackid, <em>Float</em> pan, <em>IReaperControlSurface</em> ignoresurf)</code></div>
</div>

<div class="function_definition" id="CSurf_SetSurfaceRecArm">
	<div class="c_func"><code>void CSurf_SetSurfaceRecArm(MediaTrack* trackid, bool recarm, IReaperControlSurface* ignoresurf)</code></div>
	<div class="e_func"><code>CSurf_SetSurfaceRecArm(<em>MediaTrack</em> trackid, <em>bool </em>recarm, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="l_func"><code>reaper.CSurf_SetSurfaceRecArm(<em>MediaTrack</em> trackid, <em>boolean</em> recarm, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="p_func"><code>RPR_CSurf_SetSurfaceRecArm(<em>MediaTrack</em> trackid, <em>Boolean</em> recarm, <em>IReaperControlSurface</em> ignoresurf)</code></div>
</div>

<div class="function_definition" id="CSurf_SetSurfaceSelected">
	<div class="c_func"><code>void CSurf_SetSurfaceSelected(MediaTrack* trackid, bool selected, IReaperControlSurface* ignoresurf)</code></div>
	<div class="e_func"><code>CSurf_SetSurfaceSelected(<em>MediaTrack</em> trackid, <em>bool </em>selected, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="l_func"><code>reaper.CSurf_SetSurfaceSelected(<em>MediaTrack</em> trackid, <em>boolean</em> selected, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="p_func"><code>RPR_CSurf_SetSurfaceSelected(<em>MediaTrack</em> trackid, <em>Boolean</em> selected, <em>IReaperControlSurface</em> ignoresurf)</code></div>
</div>

<div class="function_definition" id="CSurf_SetSurfaceSolo">
	<div class="c_func"><code>void CSurf_SetSurfaceSolo(MediaTrack* trackid, bool solo, IReaperControlSurface* ignoresurf)</code></div>
	<div class="e_func"><code>CSurf_SetSurfaceSolo(<em>MediaTrack</em> trackid, <em>bool </em>solo, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="l_func"><code>reaper.CSurf_SetSurfaceSolo(<em>MediaTrack</em> trackid, <em>boolean</em> solo, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="p_func"><code>RPR_CSurf_SetSurfaceSolo(<em>MediaTrack</em> trackid, <em>Boolean</em> solo, <em>IReaperControlSurface</em> ignoresurf)</code></div>
</div>

<div class="function_definition" id="CSurf_SetSurfaceVolume">
	<div class="c_func"><code>void CSurf_SetSurfaceVolume(MediaTrack* trackid, double volume, IReaperControlSurface* ignoresurf)</code></div>
	<div class="e_func"><code>CSurf_SetSurfaceVolume(<em>MediaTrack</em> trackid, volume, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="l_func"><code>reaper.CSurf_SetSurfaceVolume(<em>MediaTrack</em> trackid, <em>number</em> volume, <em>IReaperControlSurface</em> ignoresurf)</code></div>
	<div class="p_func"><code>RPR_CSurf_SetSurfaceVolume(<em>MediaTrack</em> trackid, <em>Float</em> volume, <em>IReaperControlSurface</em> ignoresurf)</code></div>
</div>

<div class="function_definition" id="CSurf_SetTrackListChange">
	<div class="c_func"><code>void CSurf_SetTrackListChange()</code></div>
	<div class="e_func"><code>CSurf_SetTrackListChange()</code></div>
	<div class="l_func"><code>reaper.CSurf_SetTrackListChange()</code></div>
	<div class="p_func"><code>RPR_CSurf_SetTrackListChange()</code></div>
</div>

<div class="function_definition" id="CSurf_TrackFromID">
	<div class="c_func"><code>MediaTrack* CSurf_TrackFromID(int idx, bool mcpView)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  CSurf_TrackFromID(<em>int </em>idx, <em>bool </em>mcpView)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.CSurf_TrackFromID(<em>integer</em> idx, <em>boolean</em> mcpView)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  RPR_CSurf_TrackFromID(<em>Int</em> idx, <em>Boolean</em> mcpView)</code></div>
</div>

<div class="function_definition" id="CSurf_TrackToID">
	<div class="c_func"><code>int CSurf_TrackToID(MediaTrack* track, bool mcpView)</code></div>
	<div class="e_func"><code><em>int </em> CSurf_TrackToID(<em>MediaTrack</em> track, <em>bool </em>mcpView)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.CSurf_TrackToID(<em>MediaTrack</em> track, <em>boolean</em> mcpView)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_CSurf_TrackToID(<em>MediaTrack</em> track, <em>Boolean</em> mcpView)</code></div>
</div>

<div class="function_definition" id="DB2SLIDER">
	<div class="c_func"><code>double DB2SLIDER(double x)</code></div>
	<div class="e_func"><code><em>double </em> DB2SLIDER(x)</code></div>
	<div class="l_func"><code><em>number</em> reaper.DB2SLIDER(<em>number</em> x)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_DB2SLIDER(<em>Float</em> x)</code></div>
</div>

<div class="function_definition" id="DeleteActionShortcut">
	<div class="c_func"><code>bool DeleteActionShortcut(KbdSectionInfo* section, int cmdID, int shortcutidx)</code></div>
	<div class="e_func"><code><em>bool </em> DeleteActionShortcut(<em>KbdSectionInfo</em> section, <em>int </em>cmdID, <em>int </em>shortcutidx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.DeleteActionShortcut(<em>KbdSectionInfo</em> section, <em>integer</em> cmdID, <em>integer</em> shortcutidx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_DeleteActionShortcut(<em>KbdSectionInfo</em> section, <em>Int</em> cmdID, <em>Int</em> shortcutidx)</code></div>
	<p>Delete the specific shortcut for the given command ID.<br>
See <a href="#CountActionShortcuts">CountActionShortcuts</a>, <a href="#GetActionShortcutDesc">GetActionShortcutDesc</a>, <a href="#DoActionShortcutDialog">DoActionShortcutDialog</a>.</p>
</div>

<div class="function_definition" id="DeleteEnvelopePointEx">
	<div class="c_func"><code>bool DeleteEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx)</code></div>
	<div class="e_func"><code><em>bool </em> DeleteEnvelopePointEx(<em>TrackEnvelope</em> envelope, <em>int </em>autoitem_idx, <em>int </em>ptidx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.DeleteEnvelopePointEx(<em>TrackEnvelope</em> envelope, <em>integer</em> autoitem_idx, <em>integer</em> ptidx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_DeleteEnvelopePointEx(<em>TrackEnvelope</em> envelope, <em>Int</em> autoitem_idx, <em>Int</em> ptidx)</code></div>
	<p>Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.<br>
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.<br>
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,<br>
even if the automation item is trimmed so that not all points are visible.<br>
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.<br>
See <a href="#CountEnvelopePointsEx">CountEnvelopePointsEx</a>, <a href="#GetEnvelopePointEx">GetEnvelopePointEx</a>, <a href="#SetEnvelopePointEx">SetEnvelopePointEx</a>, <a href="#InsertEnvelopePointEx">InsertEnvelopePointEx</a>.</p>
</div>

<div class="function_definition" id="DeleteEnvelopePointRange">
	<div class="c_func"><code>bool DeleteEnvelopePointRange(TrackEnvelope* envelope, double time_start, double time_end)</code></div>
	<div class="e_func"><code><em>bool </em> DeleteEnvelopePointRange(<em>TrackEnvelope</em> envelope, time_start, time_end)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.DeleteEnvelopePointRange(<em>TrackEnvelope</em> envelope, <em>number</em> time_start, <em>number</em> time_end)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_DeleteEnvelopePointRange(<em>TrackEnvelope</em> envelope, <em>Float</em> time_start, <em>Float</em> time_end)</code></div>
	<p>Delete a range of envelope points. See <a href="#DeleteEnvelopePointRangeEx">DeleteEnvelopePointRangeEx</a>, <a href="#DeleteEnvelopePointEx">DeleteEnvelopePointEx</a>.</p>
</div>

<div class="function_definition" id="DeleteEnvelopePointRangeEx">
	<div class="c_func"><code>bool DeleteEnvelopePointRangeEx(TrackEnvelope* envelope, int autoitem_idx, double time_start, double time_end)</code></div>
	<div class="e_func"><code><em>bool </em> DeleteEnvelopePointRangeEx(<em>TrackEnvelope</em> envelope, <em>int </em>autoitem_idx, time_start, time_end)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.DeleteEnvelopePointRangeEx(<em>TrackEnvelope</em> envelope, <em>integer</em> autoitem_idx, <em>number</em> time_start, <em>number</em> time_end)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_DeleteEnvelopePointRangeEx(<em>TrackEnvelope</em> envelope, <em>Int</em> autoitem_idx, <em>Float</em> time_start, <em>Float</em> time_end)</code></div>
	<p>Delete a range of envelope points. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.</p>
</div>

<div class="function_definition" id="DeleteExtState">
	<div class="c_func"><code>void DeleteExtState(const char* section, const char* key, bool persist)</code></div>
	<div class="e_func"><code>DeleteExtState("section", "key", <em>bool </em>persist)</code></div>
	<div class="l_func"><code>reaper.DeleteExtState(<em>string</em> section, <em>string</em> key, <em>boolean</em> persist)</code></div>
	<div class="p_func"><code>RPR_DeleteExtState(<em>String</em> section, <em>String</em> key, <em>Boolean</em> persist)</code></div>
	<p>Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See <a href="#SetExtState">SetExtState</a>, <a href="#GetExtState">GetExtState</a>, <a href="#HasExtState">HasExtState</a>.</p>
</div>

<div class="function_definition" id="DeleteProjectMarker">
	<div class="c_func"><code>bool DeleteProjectMarker(ReaProject* proj, int markrgnindexnumber, bool isrgn)</code></div>
	<div class="e_func"><code><em>bool </em> DeleteProjectMarker(<em>ReaProject</em> proj, <em>int </em>markrgnindexnumber, <em>bool </em>isrgn)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.DeleteProjectMarker(<em>ReaProject</em> proj, <em>integer</em> markrgnindexnumber, <em>boolean</em> isrgn)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_DeleteProjectMarker(<em>ReaProject</em> proj, <em>Int</em> markrgnindexnumber, <em>Boolean</em> isrgn)</code></div>
	<p>Delete a marker.  proj==NULL for the active project.</p>
</div>

<div class="function_definition" id="DeleteProjectMarkerByIndex">
	<div class="c_func"><code>bool DeleteProjectMarkerByIndex(ReaProject* proj, int markrgnidx)</code></div>
	<div class="e_func"><code><em>bool </em> DeleteProjectMarkerByIndex(<em>ReaProject</em> proj, <em>int </em>markrgnidx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.DeleteProjectMarkerByIndex(<em>ReaProject</em> proj, <em>integer</em> markrgnidx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_DeleteProjectMarkerByIndex(<em>ReaProject</em> proj, <em>Int</em> markrgnidx)</code></div>
	<p>Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see <a href="#EnumProjectMarkers3">EnumProjectMarkers3</a>), rather than representing the displayed marker/region ID number (see <a href="#SetProjectMarker4">SetProjectMarker4</a>).</p>
</div>

<div class="function_definition" id="DeleteTakeMarker">
	<div class="c_func"><code>bool DeleteTakeMarker(MediaItem_Take* take, int idx)</code></div>
	<div class="e_func"><code><em>bool </em> DeleteTakeMarker(<em>MediaItem_Take</em> take, <em>int </em>idx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.DeleteTakeMarker(<em>MediaItem_Take</em> take, <em>integer</em> idx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_DeleteTakeMarker(<em>MediaItem_Take</em> take, <em>Int</em> idx)</code></div>
	<p>Delete a take marker. Note that idx will change for all following take markers. See <a href="#GetNumTakeMarkers">GetNumTakeMarkers</a>, <a href="#GetTakeMarker">GetTakeMarker</a>, <a href="#SetTakeMarker">SetTakeMarker</a></p>
</div>

<div class="function_definition" id="DeleteTakeStretchMarkers">
	<div class="c_func"><code>int DeleteTakeStretchMarkers(MediaItem_Take* take, int idx, const int* countInOptional)</code></div>
	<div class="e_func"><code><em>int </em> DeleteTakeStretchMarkers(<em>MediaItem_Take</em> take, <em>int </em>idx, <em>optional int</em> countIn)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.DeleteTakeStretchMarkers(<em>MediaItem_Take</em> take, <em>integer</em> idx, <em>optional integer</em> countIn)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_DeleteTakeStretchMarkers(<em>MediaItem_Take</em> take, <em>Int</em> idx, <em>const int</em> countInOptional)</code></div>
	<p>Deletes one or more stretch markers. Returns number of stretch markers deleted.</p>
</div>

<div class="function_definition" id="DeleteTempoTimeSigMarker">
	<div class="c_func"><code>bool DeleteTempoTimeSigMarker(ReaProject* project, int markerindex)</code></div>
	<div class="e_func"><code><em>bool </em> DeleteTempoTimeSigMarker(<em>ReaProject</em> project, <em>int </em>markerindex)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.DeleteTempoTimeSigMarker(<em>ReaProject</em> project, <em>integer</em> markerindex)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_DeleteTempoTimeSigMarker(<em>ReaProject</em> project, <em>Int</em> markerindex)</code></div>
	<p>Delete a tempo/time signature marker.</p>
</div>

<div class="function_definition" id="DeleteTrack">
	<div class="c_func"><code>void DeleteTrack(MediaTrack* tr)</code></div>
	<div class="e_func"><code>DeleteTrack(<em>MediaTrack</em> tr)</code></div>
	<div class="l_func"><code>reaper.DeleteTrack(<em>MediaTrack</em> tr)</code></div>
	<div class="p_func"><code>RPR_DeleteTrack(<em>MediaTrack</em> tr)</code></div>
	<p>deletes a track</p>
</div>

<div class="function_definition" id="DeleteTrackMediaItem">
	<div class="c_func"><code>bool DeleteTrackMediaItem(MediaTrack* tr, MediaItem* it)</code></div>
	<div class="e_func"><code><em>bool </em> DeleteTrackMediaItem(<em>MediaTrack</em> tr, <em>MediaItem</em> it)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.DeleteTrackMediaItem(<em>MediaTrack</em> tr, <em>MediaItem</em> it)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_DeleteTrackMediaItem(<em>MediaTrack</em> tr, <em>MediaItem</em> it)</code></div>
</div>

<div class="function_definition" id="DestroyAudioAccessor">
	<div class="c_func"><code>void DestroyAudioAccessor(AudioAccessor* accessor)</code></div>
	<div class="e_func"><code>DestroyAudioAccessor(<em>AudioAccessor</em> accessor)</code></div>
	<div class="l_func"><code>reaper.DestroyAudioAccessor(<em>AudioAccessor</em> accessor)</code></div>
	<div class="p_func"><code>RPR_DestroyAudioAccessor(<em>AudioAccessor</em> accessor)</code></div>
	<p>Destroy an audio accessor. Must only call from the main thread. See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>. </p>
</div>

<div class="function_definition" id="DoActionShortcutDialog">
	<div class="c_func"><code>bool DoActionShortcutDialog(HWND hwnd, KbdSectionInfo* section, int cmdID, int shortcutidx)</code></div>
	<div class="e_func"><code><em>bool </em> DoActionShortcutDialog(<em>HWND</em> hwnd, <em>KbdSectionInfo</em> section, <em>int </em>cmdID, <em>int </em>shortcutidx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.DoActionShortcutDialog(<em>HWND</em> hwnd, <em>KbdSectionInfo</em> section, <em>integer</em> cmdID, <em>integer</em> shortcutidx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_DoActionShortcutDialog(<em>HWND</em> hwnd, <em>KbdSectionInfo</em> section, <em>Int</em> cmdID, <em>Int</em> shortcutidx)</code></div>
	<p>Open the action shortcut dialog to edit or add a shortcut for the given command ID. If (shortcutidx &gt;= 0 &amp;&amp; shortcutidx &lt; CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added.<br>
See <a href="#CountActionShortcuts">CountActionShortcuts</a>, <a href="#GetActionShortcutDesc">GetActionShortcutDesc</a>, <a href="#DeleteActionShortcut">DeleteActionShortcut</a>.</p>
</div>

<div class="function_definition" id="Dock_UpdateDockID">
	<div class="c_func"><code>void Dock_UpdateDockID(const char* ident_str, int whichDock)</code></div>
	<div class="e_func"><code>Dock_UpdateDockID("ident_str", <em>int </em>whichDock)</code></div>
	<div class="l_func"><code>reaper.Dock_UpdateDockID(<em>string</em> ident_str, <em>integer</em> whichDock)</code></div>
	<div class="p_func"><code>RPR_Dock_UpdateDockID(<em>String</em> ident_str, <em>Int</em> whichDock)</code></div>
	<p>updates preference for docker window ident_str to be in dock whichDock on next open</p>
</div>

<div class="function_definition" id="DockGetPosition">
	<div class="c_func"><code>int DockGetPosition(int whichDock)</code></div>
	<div class="e_func"><code><em>int </em> DockGetPosition(<em>int </em>whichDock)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.DockGetPosition(<em>integer</em> whichDock)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_DockGetPosition(<em>Int</em> whichDock)</code></div>
	<p>-1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating</p>
</div>

<div class="function_definition" id="DockIsChildOfDock">
	<div class="c_func"><code>int DockIsChildOfDock(HWND hwnd, bool* isFloatingDockerOut)</code></div>
	<div class="e_func"><code><em>int </em> DockIsChildOfDock(<em>HWND</em> hwnd, <em>bool &amp;</em>isFloatingDocker)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>boolean </em>isFloatingDocker = reaper.DockIsChildOfDock(<em>HWND</em> hwnd)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>HWND</em> hwnd, <em>Boolean</em> isFloatingDockerOut) = RPR_DockIsChildOfDock(hwnd, isFloatingDockerOut)</code></div>
	<p>returns dock index that contains hwnd, or -1</p>
</div>

<div class="function_definition" id="DockWindowActivate">
	<div class="c_func"><code>void DockWindowActivate(HWND hwnd)</code></div>
	<div class="e_func"><code>DockWindowActivate(<em>HWND</em> hwnd)</code></div>
	<div class="l_func"><code>reaper.DockWindowActivate(<em>HWND</em> hwnd)</code></div>
	<div class="p_func"><code>RPR_DockWindowActivate(<em>HWND</em> hwnd)</code></div>
</div>

<div class="function_definition" id="DockWindowAdd">
	<div class="c_func"><code>void DockWindowAdd(HWND hwnd, const char* name, int pos, bool allowShow)</code></div>
	<div class="e_func"><code>DockWindowAdd(<em>HWND</em> hwnd, "name", <em>int </em>pos, <em>bool </em>allowShow)</code></div>
	<div class="l_func"><code>reaper.DockWindowAdd(<em>HWND</em> hwnd, <em>string</em> name, <em>integer</em> pos, <em>boolean</em> allowShow)</code></div>
	<div class="p_func"><code>RPR_DockWindowAdd(<em>HWND</em> hwnd, <em>String</em> name, <em>Int</em> pos, <em>Boolean</em> allowShow)</code></div>
</div>

<div class="function_definition" id="DockWindowAddEx">
	<div class="c_func"><code>void DockWindowAddEx(HWND hwnd, const char* name, const char* identstr, bool allowShow)</code></div>
	<div class="e_func"><code>DockWindowAddEx(<em>HWND</em> hwnd, "name", "identstr", <em>bool </em>allowShow)</code></div>
	<div class="l_func"><code>reaper.DockWindowAddEx(<em>HWND</em> hwnd, <em>string</em> name, <em>string</em> identstr, <em>boolean</em> allowShow)</code></div>
	<div class="p_func"><code>RPR_DockWindowAddEx(<em>HWND</em> hwnd, <em>String</em> name, <em>String</em> identstr, <em>Boolean</em> allowShow)</code></div>
</div>

<div class="function_definition" id="DockWindowRefresh">
	<div class="c_func"><code>void DockWindowRefresh()</code></div>
	<div class="e_func"><code>DockWindowRefresh()</code></div>
	<div class="l_func"><code>reaper.DockWindowRefresh()</code></div>
	<div class="p_func"><code>RPR_DockWindowRefresh()</code></div>
</div>

<div class="function_definition" id="DockWindowRefreshForHWND">
	<div class="c_func"><code>void DockWindowRefreshForHWND(HWND hwnd)</code></div>
	<div class="e_func"><code>DockWindowRefreshForHWND(<em>HWND</em> hwnd)</code></div>
	<div class="l_func"><code>reaper.DockWindowRefreshForHWND(<em>HWND</em> hwnd)</code></div>
	<div class="p_func"><code>RPR_DockWindowRefreshForHWND(<em>HWND</em> hwnd)</code></div>
</div>

<div class="function_definition" id="DockWindowRemove">
	<div class="c_func"><code>void DockWindowRemove(HWND hwnd)</code></div>
	<div class="e_func"><code>DockWindowRemove(<em>HWND</em> hwnd)</code></div>
	<div class="l_func"><code>reaper.DockWindowRemove(<em>HWND</em> hwnd)</code></div>
	<div class="p_func"><code>RPR_DockWindowRemove(<em>HWND</em> hwnd)</code></div>
</div>

<div class="function_definition" id="EditTempoTimeSigMarker">
	<div class="c_func"><code>bool EditTempoTimeSigMarker(ReaProject* project, int markerindex)</code></div>
	<div class="e_func"><code><em>bool </em> EditTempoTimeSigMarker(<em>ReaProject</em> project, <em>int </em>markerindex)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.EditTempoTimeSigMarker(<em>ReaProject</em> project, <em>integer</em> markerindex)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_EditTempoTimeSigMarker(<em>ReaProject</em> project, <em>Int</em> markerindex)</code></div>
	<p>Open the tempo/time signature marker editor dialog.</p>
</div>

<div class="function_definition" id="EnsureNotCompletelyOffscreen">
	<div class="c_func"><code>void EnsureNotCompletelyOffscreen(RECT* rInOut)</code></div>
	<div class="e_func"><code>EnsureNotCompletelyOffscreen(<em>int &</em>r.left, <em>int &</em>r.top, <em>int &</em>r.right, <em>int &</em>r.bot)</code></div>
	<div class="l_func"><code><em>integer</em>r.left, <em>integer</em>r.top, <em>integer</em>r.right, <em>integer</em>r.bot = reaper.EnsureNotCompletelyOffscreen(<em>integer</em>r.left, <em>integer</em>r.top, <em>integer</em>r.right, <em>integer</em>r.bot)</code></div>
	<div class="p_func"><code>RPR_EnsureNotCompletelyOffscreen(<em>RECT</em> rInOut)</code></div>
	<p>call with a saved window rect for your window and it'll correct any positioning info.</p>
</div>

<div class="function_definition" id="EnumerateFiles">
	<div class="c_func"><code>const char* EnumerateFiles(const char* path, int fileindex)</code></div>
	<div class="e_func"><code>bool  EnumerateFiles(#retval, "path", <em>int </em>fileindex)</code></div>
	<div class="l_func"><code><em>string</em> reaper.EnumerateFiles(<em>string</em> path, <em>integer</em> fileindex)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_EnumerateFiles(<em>String</em> path, <em>Int</em> fileindex)</code></div>
	<p>List the files in the "path" directory. Returns NULL/nil when all files have been listed. Use fileindex = -1 to force re-read of directory (invalidate cache). See <a href="#EnumerateSubdirectories">EnumerateSubdirectories</a></p>
</div>

<div class="function_definition" id="EnumerateSubdirectories">
	<div class="c_func"><code>const char* EnumerateSubdirectories(const char* path, int subdirindex)</code></div>
	<div class="e_func"><code>bool  EnumerateSubdirectories(#retval, "path", <em>int </em>subdirindex)</code></div>
	<div class="l_func"><code><em>string</em> reaper.EnumerateSubdirectories(<em>string</em> path, <em>integer</em> subdirindex)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_EnumerateSubdirectories(<em>String</em> path, <em>Int</em> subdirindex)</code></div>
	<p>List the subdirectories in the "path" directory. Use subdirindex = -1 to force re-read of directory (invalidate cache). Returns NULL/nil when all subdirectories have been listed. See <a href="#EnumerateFiles">EnumerateFiles</a></p>
</div>

<div class="function_definition" id="EnumPitchShiftModes">
	<div class="c_func"><code>bool EnumPitchShiftModes(int mode, const char** strOut)</code></div>
	<div class="e_func"><code><em>bool </em> EnumPitchShiftModes(<em>int </em>mode, #str)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>str = reaper.EnumPitchShiftModes(<em>integer</em> mode)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_EnumPitchShiftModes(<em>Int</em> mode, <em>String</em> strOut)</code></div>
	<p>Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported</p>
</div>

<div class="function_definition" id="EnumPitchShiftSubModes">
	<div class="c_func"><code>const char* EnumPitchShiftSubModes(int mode, int submode)</code></div>
	<div class="e_func"><code>bool  EnumPitchShiftSubModes(#retval, <em>int </em>mode, <em>int </em>submode)</code></div>
	<div class="l_func"><code><em>string</em> reaper.EnumPitchShiftSubModes(<em>integer</em> mode, <em>integer</em> submode)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_EnumPitchShiftSubModes(<em>Int</em> mode, <em>Int</em> submode)</code></div>
	<p>Returns submode name, or NULL</p>
</div>

<div class="function_definition" id="EnumProjectMarkers">
	<div class="c_func"><code>int EnumProjectMarkers(int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)</code></div>
	<div class="e_func"><code><em>int </em> EnumProjectMarkers(<em>int </em>idx, <em>bool &amp;</em>isrgn, <em>&amp;</em>pos, <em>&amp;</em>rgnend, #name, <em>int &amp;</em>markrgnindexnumber)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>boolean </em>isrgn, <em>number </em>pos, <em>number </em>rgnend, <em>string </em>name, <em>integer </em>markrgnindexnumber = reaper.EnumProjectMarkers(<em>integer</em> idx)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>Int</em> idx, <em>Boolean</em> isrgnOut, <em>Float</em> posOut, <em>Float</em> rgnendOut, <em>String</em> nameOut, <em>Int</em> markrgnindexnumberOut) = RPR_EnumProjectMarkers(idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)</code></div>
</div>

<div class="function_definition" id="EnumProjectMarkers2">
	<div class="c_func"><code>int EnumProjectMarkers2(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)</code></div>
	<div class="e_func"><code><em>int </em> EnumProjectMarkers2(<em>ReaProject</em> proj, <em>int </em>idx, <em>bool &amp;</em>isrgn, <em>&amp;</em>pos, <em>&amp;</em>rgnend, #name, <em>int &amp;</em>markrgnindexnumber)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>boolean </em>isrgn, <em>number </em>pos, <em>number </em>rgnend, <em>string </em>name, <em>integer </em>markrgnindexnumber = reaper.EnumProjectMarkers2(<em>ReaProject</em> proj, <em>integer</em> idx)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>ReaProject</em> proj, <em>Int</em> idx, <em>Boolean</em> isrgnOut, <em>Float</em> posOut, <em>Float</em> rgnendOut, <em>String</em> nameOut, <em>Int</em> markrgnindexnumberOut) = RPR_EnumProjectMarkers2(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)</code></div>
</div>

<div class="function_definition" id="EnumProjectMarkers3">
	<div class="c_func"><code>int EnumProjectMarkers3(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut, int* colorOut)</code></div>
	<div class="e_func"><code><em>int </em> EnumProjectMarkers3(<em>ReaProject</em> proj, <em>int </em>idx, <em>bool &amp;</em>isrgn, <em>&amp;</em>pos, <em>&amp;</em>rgnend, #name, <em>int &amp;</em>markrgnindexnumber, <em>int &amp;</em>color)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>boolean </em>isrgn, <em>number </em>pos, <em>number </em>rgnend, <em>string </em>name, <em>integer </em>markrgnindexnumber, <em>integer </em>color = reaper.EnumProjectMarkers3(<em>ReaProject</em> proj, <em>integer</em> idx)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>ReaProject</em> proj, <em>Int</em> idx, <em>Boolean</em> isrgnOut, <em>Float</em> posOut, <em>Float</em> rgnendOut, <em>String</em> nameOut, <em>Int</em> markrgnindexnumberOut, <em>Int</em> colorOut) = RPR_EnumProjectMarkers3(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut, colorOut)</code></div>
</div>

<div class="function_definition" id="EnumProjects">
	<div class="c_func"><code>ReaProject* EnumProjects(int idx, char* projfnOutOptional, int projfnOutOptional_sz)</code></div>
	<div class="e_func"><code><em>ReaProject</em>  EnumProjects(<em>int </em>idx, <em>optional </em>#projfn)</code></div>
	<div class="l_func"><code><em>ReaProject</em> retval, <em>optional </em><em>string </em>projfn = reaper.EnumProjects(<em>integer</em> idx)</code></div>
	<div class="p_func"><code>(<em>ReaProject</em> retval, <em>Int</em> idx, <em>String</em> projfnOutOptional, <em>Int</em> projfnOutOptional_sz) = RPR_EnumProjects(idx, projfnOutOptional, projfnOutOptional_sz)</code></div>
	<p>idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.</p>
</div>

<div class="function_definition" id="EnumProjExtState">
	<div class="c_func"><code>bool EnumProjExtState(ReaProject* proj, const char* extname, int idx, char* keyOutOptional, int keyOutOptional_sz, char* valOutOptional, int valOutOptional_sz)</code></div>
	<div class="e_func"><code><em>bool </em> EnumProjExtState(<em>ReaProject</em> proj, "extname", <em>int </em>idx, <em>optional </em>#key, <em>optional </em>#val)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>optional </em><em>string </em>key, <em>optional </em><em>string </em>val = reaper.EnumProjExtState(<em>ReaProject</em> proj, <em>string</em> extname, <em>integer</em> idx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ReaProject</em> proj, <em>String</em> extname, <em>Int</em> idx, <em>String</em> keyOutOptional, <em>Int</em> keyOutOptional_sz, <em>String</em> valOutOptional, <em>Int</em> valOutOptional_sz) = RPR_EnumProjExtState(proj, extname, idx, keyOutOptional, keyOutOptional_sz, valOutOptional, valOutOptional_sz)</code></div>
	<p>Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See <a href="#SetProjExtState">SetProjExtState</a>, <a href="#GetProjExtState">GetProjExtState</a>.</p>
</div>

<div class="function_definition" id="EnumRegionRenderMatrix">
	<div class="c_func"><code>MediaTrack* EnumRegionRenderMatrix(ReaProject* proj, int regionindex, int rendertrack)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  EnumRegionRenderMatrix(<em>ReaProject</em> proj, <em>int </em>regionindex, <em>int </em>rendertrack)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.EnumRegionRenderMatrix(<em>ReaProject</em> proj, <em>integer</em> regionindex, <em>integer</em> rendertrack)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  RPR_EnumRegionRenderMatrix(<em>ReaProject</em> proj, <em>Int</em> regionindex, <em>Int</em> rendertrack)</code></div>
	<p>Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.</p>
</div>

<div class="function_definition" id="EnumTrackMIDIProgramNames">
	<div class="c_func"><code>bool EnumTrackMIDIProgramNames(int track, int programNumber, char* programName, int programName_sz)</code></div>
	<div class="e_func"><code><em>bool </em> EnumTrackMIDIProgramNames(<em>int </em>track, <em>int </em>programNumber, #programName)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>programName = reaper.EnumTrackMIDIProgramNames(<em>integer</em> track, <em>integer</em> programNumber, <em>string </em>programName)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>Int</em> track, <em>Int</em> programNumber, <em>String</em> programName, <em>Int</em> programName_sz) = RPR_EnumTrackMIDIProgramNames(track, programNumber, programName, programName_sz)</code></div>
	<p>returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated</p>
</div>

<div class="function_definition" id="EnumTrackMIDIProgramNamesEx">
	<div class="c_func"><code>bool EnumTrackMIDIProgramNamesEx(ReaProject* proj, MediaTrack* track, int programNumber, char* programName, int programName_sz)</code></div>
	<div class="e_func"><code><em>bool </em> EnumTrackMIDIProgramNamesEx(<em>ReaProject</em> proj, <em>MediaTrack</em> track, <em>int </em>programNumber, #programName)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>programName = reaper.EnumTrackMIDIProgramNamesEx(<em>ReaProject</em> proj, <em>MediaTrack</em> track, <em>integer</em> programNumber, <em>string </em>programName)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ReaProject</em> proj, <em>MediaTrack</em> track, <em>Int</em> programNumber, <em>String</em> programName, <em>Int</em> programName_sz) = RPR_EnumTrackMIDIProgramNamesEx(proj, track, programNumber, programName, programName_sz)</code></div>
	<p>returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated</p>
</div>

<div class="function_definition" id="Envelope_Evaluate">
	<div class="c_func"><code>int Envelope_Evaluate(TrackEnvelope* envelope, double time, double samplerate, int samplesRequested, double* valueOut, double* dVdSOut, double* ddVdSOut, double* dddVdSOut)</code></div>
	<div class="e_func"><code><em>int </em> Envelope_Evaluate(<em>TrackEnvelope</em> envelope, time, samplerate, <em>int </em>samplesRequested, <em>&amp;</em>value, <em>&amp;</em>dVdS, <em>&amp;</em>ddVdS, <em>&amp;</em>dddVdS)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>number </em>value, <em>number </em>dVdS, <em>number </em>ddVdS, <em>number </em>dddVdS = reaper.Envelope_Evaluate(<em>TrackEnvelope</em> envelope, <em>number</em> time, <em>number</em> samplerate, <em>integer</em> samplesRequested)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>TrackEnvelope</em> envelope, <em>Float</em> time, <em>Float</em> samplerate, <em>Int</em> samplesRequested, <em>Float</em> valueOut, <em>Float</em> dVdSOut, <em>Float</em> ddVdSOut, <em>Float</em> dddVdSOut) = RPR_Envelope_Evaluate(envelope, time, samplerate, samplesRequested, valueOut, dVdSOut, ddVdSOut, dddVdSOut)</code></div>
	<p>Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the second derivative, dddVdS is the third derivative. See <a href="#GetEnvelopeScalingMode">GetEnvelopeScalingMode</a>.</p>
</div>

<div class="function_definition" id="Envelope_FormatValue">
	<div class="c_func"><code>void Envelope_FormatValue(TrackEnvelope* env, double value, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code>Envelope_FormatValue(<em>TrackEnvelope</em> env, value, #buf)</code></div>
	<div class="l_func"><code><em>string </em>buf = reaper.Envelope_FormatValue(<em>TrackEnvelope</em> env, <em>number</em> value)</code></div>
	<div class="p_func"><code>(<em>TrackEnvelope</em> env, <em>Float</em> value, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_Envelope_FormatValue(env, value, bufOut, bufOut_sz)</code></div>
	<p>Formats the value of an envelope to a user-readable form</p>
</div>

<div class="function_definition" id="Envelope_GetParentTake">
	<div class="c_func"><code>MediaItem_Take* Envelope_GetParentTake(TrackEnvelope* env, int* indexOut, int* index2Out)</code></div>
	<div class="e_func"><code><em>MediaItem_Take</em>  Envelope_GetParentTake(<em>TrackEnvelope</em> env, <em>int &amp;</em>index, <em>int &amp;</em>index2)</code></div>
	<div class="l_func"><code><em>MediaItem_Take</em> retval, <em>integer </em>index, <em>integer </em>index2 = reaper.Envelope_GetParentTake(<em>TrackEnvelope</em> env)</code></div>
	<div class="p_func"><code>(<em>MediaItem_Take</em> retval, <em>TrackEnvelope</em> env, <em>Int</em> indexOut, <em>Int</em> index2Out) = RPR_Envelope_GetParentTake(env, indexOut, index2Out)</code></div>
	<p>If take envelope, gets the take from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.</p>
</div>

<div class="function_definition" id="Envelope_GetParentTrack">
	<div class="c_func"><code>MediaTrack* Envelope_GetParentTrack(TrackEnvelope* env, int* indexOut, int* index2Out)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  Envelope_GetParentTrack(<em>TrackEnvelope</em> env, <em>int &amp;</em>index, <em>int &amp;</em>index2)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> retval, <em>integer </em>index, <em>integer </em>index2 = reaper.Envelope_GetParentTrack(<em>TrackEnvelope</em> env)</code></div>
	<div class="p_func"><code>(<em>MediaTrack</em> retval, <em>TrackEnvelope</em> env, <em>Int</em> indexOut, <em>Int</em> index2Out) = RPR_Envelope_GetParentTrack(env, indexOut, index2Out)</code></div>
	<p>If track envelope, gets the track from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.</p>
</div>

<div class="function_definition" id="Envelope_SortPoints">
	<div class="c_func"><code>bool Envelope_SortPoints(TrackEnvelope* envelope)</code></div>
	<div class="e_func"><code><em>bool </em> Envelope_SortPoints(<em>TrackEnvelope</em> envelope)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.Envelope_SortPoints(<em>TrackEnvelope</em> envelope)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_Envelope_SortPoints(<em>TrackEnvelope</em> envelope)</code></div>
	<p>Sort envelope points by time. See <a href="#SetEnvelopePoint">SetEnvelopePoint</a>, <a href="#InsertEnvelopePoint">InsertEnvelopePoint</a>.</p>
</div>

<div class="function_definition" id="Envelope_SortPointsEx">
	<div class="c_func"><code>bool Envelope_SortPointsEx(TrackEnvelope* envelope, int autoitem_idx)</code></div>
	<div class="e_func"><code><em>bool </em> Envelope_SortPointsEx(<em>TrackEnvelope</em> envelope, <em>int </em>autoitem_idx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.Envelope_SortPointsEx(<em>TrackEnvelope</em> envelope, <em>integer</em> autoitem_idx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_Envelope_SortPointsEx(<em>TrackEnvelope</em> envelope, <em>Int</em> autoitem_idx)</code></div>
	<p>Sort envelope points by time. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See <a href="#SetEnvelopePoint">SetEnvelopePoint</a>, <a href="#InsertEnvelopePoint">InsertEnvelopePoint</a>.</p>
</div>

<div class="function_definition" id="ExecProcess">
	<div class="c_func"><code>const char* ExecProcess(const char* cmdline, int timeoutmsec)</code></div>
	<div class="e_func"><code>bool  ExecProcess(#retval, "cmdline", <em>int </em>timeoutmsec)</code></div>
	<div class="l_func"><code><em>string</em> reaper.ExecProcess(<em>string</em> cmdline, <em>integer</em> timeoutmsec)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_ExecProcess(<em>String</em> cmdline, <em>Int</em> timeoutmsec)</code></div>
	<p>Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize</p>
</div>

<div class="function_definition" id="file_exists">
	<div class="c_func"><code>bool file_exists(const char* path)</code></div>
	<div class="e_func"><code><em>bool </em> file_exists("path")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.file_exists(<em>string</em> path)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_file_exists(<em>String</em> path)</code></div>
	<p>returns true if path points to a valid, readable file</p>
</div>

<div class="function_definition" id="FindTempoTimeSigMarker">
	<div class="c_func"><code>int FindTempoTimeSigMarker(ReaProject* project, double time)</code></div>
	<div class="e_func"><code><em>int </em> FindTempoTimeSigMarker(<em>ReaProject</em> project, time)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.FindTempoTimeSigMarker(<em>ReaProject</em> project, <em>number</em> time)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_FindTempoTimeSigMarker(<em>ReaProject</em> project, <em>Float</em> time)</code></div>
	<p>Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).</p>
</div>

<div class="function_definition" id="format_timestr">
	<div class="c_func"><code>void format_timestr(double tpos, char* buf, int buf_sz)</code></div>
	<div class="e_func"><code>format_timestr(tpos, #buf)</code></div>
	<div class="l_func"><code><em>string </em>buf = reaper.format_timestr(<em>number</em> tpos, <em>string </em>buf)</code></div>
	<div class="p_func"><code>(<em>Float</em> tpos, <em>String</em> buf, <em>Int</em> buf_sz) = RPR_format_timestr(tpos, buf, buf_sz)</code></div>
	<p>Format tpos (which is time in seconds) as hh:mm:ss.sss. See <a href="#format_timestr_pos">format_timestr_pos</a>, <a href="#format_timestr_len">format_timestr_len</a>.</p>
</div>

<div class="function_definition" id="format_timestr_len">
	<div class="c_func"><code>void format_timestr_len(double tpos, char* buf, int buf_sz, double offset, int modeoverride)</code></div>
	<div class="e_func"><code>format_timestr_len(tpos, #buf, offset, <em>int </em>modeoverride)</code></div>
	<div class="l_func"><code><em>string </em>buf = reaper.format_timestr_len(<em>number</em> tpos, <em>string </em>buf, <em>number</em> offset, <em>integer</em> modeoverride)</code></div>
	<div class="p_func"><code>(<em>Float</em> tpos, <em>String</em> buf, <em>Int</em> buf_sz, <em>Float</em> offset, <em>Int</em> modeoverride) = RPR_format_timestr_len(tpos, buf, buf_sz, offset, modeoverride)</code></div>
	<p>time formatting mode overrides: -1=proj default.<br>
0=time<br>
1=measures.beats + time<br>
2=measures.beats<br>
3=seconds<br>
4=samples<br>
5=h:m:s:f<br>
offset is start of where the length will be calculated from</p>
</div>

<div class="function_definition" id="format_timestr_pos">
	<div class="c_func"><code>void format_timestr_pos(double tpos, char* buf, int buf_sz, int modeoverride)</code></div>
	<div class="e_func"><code>format_timestr_pos(tpos, #buf, <em>int </em>modeoverride)</code></div>
	<div class="l_func"><code><em>string </em>buf = reaper.format_timestr_pos(<em>number</em> tpos, <em>string </em>buf, <em>integer</em> modeoverride)</code></div>
	<div class="p_func"><code>(<em>Float</em> tpos, <em>String</em> buf, <em>Int</em> buf_sz, <em>Int</em> modeoverride) = RPR_format_timestr_pos(tpos, buf, buf_sz, modeoverride)</code></div>
	<p>time formatting mode overrides: -1=proj default.<br>
0=time<br>
1=measures.beats + time<br>
2=measures.beats<br>
3=seconds<br>
4=samples<br>
5=h:m:s:f<br>
</p>
</div>

<div class="function_definition" id="genGuid">
	<div class="c_func"><code>void genGuid(GUID* g)</code></div>
	<div class="e_func"><code>genGuid(#gGUID)</code></div>
	<div class="l_func"><code><em>string </em>gGUID = reaper.genGuid(<em>string </em>gGUID)</code></div>
	<div class="p_func"><code>RPR_genGuid(<em>GUID</em> g)</code></div>
</div>

<div class="function_definition" id="get_config_var_string">
	<div class="c_func"><code>bool get_config_var_string(const char* name, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> get_config_var_string("name", #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.get_config_var_string(<em>string</em> name)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> name, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_get_config_var_string(name, bufOut, bufOut_sz)</code></div>
	<p>gets ini configuration variable value as string</p>
</div>

<div class="function_definition" id="get_ini_file">
	<div class="c_func"><code>const char* get_ini_file()</code></div>
	<div class="e_func"><code>bool  get_ini_file(#retval)</code></div>
	<div class="l_func"><code><em>string</em> reaper.get_ini_file()</code></div>
	<div class="p_func"><code><em>String</em>  RPR_get_ini_file()</code></div>
	<p>Get reaper.ini full filename.</p>
</div>

<div class="function_definition" id="GetActionShortcutDesc">
	<div class="c_func"><code>bool GetActionShortcutDesc(KbdSectionInfo* section, int cmdID, int shortcutidx, char* descOut, int descOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> GetActionShortcutDesc(<em>KbdSectionInfo</em> section, <em>int </em>cmdID, <em>int </em>shortcutidx, #desc)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>desc = reaper.GetActionShortcutDesc(<em>KbdSectionInfo</em> section, <em>integer</em> cmdID, <em>integer</em> shortcutidx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>KbdSectionInfo</em> section, <em>Int</em> cmdID, <em>Int</em> shortcutidx, <em>String</em> descOut, <em>Int</em> descOut_sz) = RPR_GetActionShortcutDesc(section, cmdID, shortcutidx, descOut, descOut_sz)</code></div>
	<p>Get the text description of a specific shortcut for the given command ID.<br>
See <a href="#CountActionShortcuts">CountActionShortcuts</a>,<a href="#DeleteActionShortcut">DeleteActionShortcut</a>,<a href="#DoActionShortcutDialog">DoActionShortcutDialog</a>.</p>
</div>

<div class="function_definition" id="GetActiveTake">
	<div class="c_func"><code>MediaItem_Take* GetActiveTake(MediaItem* item)</code></div>
	<div class="e_func"><code><em>MediaItem_Take</em>  GetActiveTake(<em>MediaItem</em> item)</code></div>
	<div class="l_func"><code><em>MediaItem_Take</em> reaper.GetActiveTake(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>MediaItem_Take</em>  RPR_GetActiveTake(<em>MediaItem</em> item)</code></div>
	<p>get the active take in this item</p>
</div>

<div class="function_definition" id="GetAllProjectPlayStates">
	<div class="c_func"><code>int GetAllProjectPlayStates(ReaProject* ignoreProject)</code></div>
	<div class="e_func"><code><em>int </em> GetAllProjectPlayStates(<em>ReaProject</em> ignoreProject)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetAllProjectPlayStates(<em>ReaProject</em> ignoreProject)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetAllProjectPlayStates(<em>ReaProject</em> ignoreProject)</code></div>
	<p>returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)</p>
</div>

<div class="function_definition" id="GetAppVersion">
	<div class="c_func"><code>const char* GetAppVersion()</code></div>
	<div class="e_func"><code>bool  GetAppVersion(#retval)</code></div>
	<div class="l_func"><code><em>string</em> reaper.GetAppVersion()</code></div>
	<div class="p_func"><code><em>String</em>  RPR_GetAppVersion()</code></div>
	<p>Returns app version which may include an OS/arch signifier, such as: "6.17" (windows 32-bit), "6.17/x64" (windows 64-bit), "6.17/OSX64" (macOS 64-bit Intel), "6.17/OSX" (macOS 32-bit), "6.17/macOS-arm64", "6.17/linux-x86_64", "6.17/linux-i686", "6.17/linux-aarch64", "6.17/linux-armv7l", etc</p>
</div>

<div class="function_definition" id="GetArmedCommand">
	<div class="c_func"><code>int GetArmedCommand(char* secOut, int secOut_sz)</code></div>
	<div class="e_func"><code><em>int </em> GetArmedCommand(#sec)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>sec = reaper.GetArmedCommand()</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>String</em> secOut, <em>Int</em> secOut_sz) = RPR_GetArmedCommand(secOut, secOut_sz)</code></div>
	<p>gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.</p>
</div>

<div class="function_definition" id="GetAudioAccessorEndTime">
	<div class="c_func"><code>double GetAudioAccessorEndTime(AudioAccessor* accessor)</code></div>
	<div class="e_func"><code><em>double </em> GetAudioAccessorEndTime(<em>AudioAccessor</em> accessor)</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetAudioAccessorEndTime(<em>AudioAccessor</em> accessor)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetAudioAccessorEndTime(<em>AudioAccessor</em> accessor)</code></div>
	<p>Get the end time of the audio that can be returned from this accessor. See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>
</div>

<div class="function_definition" id="GetAudioAccessorHash">
	<div class="c_func"><code>void GetAudioAccessorHash(AudioAccessor* accessor, char* hashNeed128)</code></div>
	<div class="e_func"><code>GetAudioAccessorHash(<em>AudioAccessor</em> accessor, #hashNeed128)</code></div>
	<div class="l_func"><code><em>string </em>hashNeed128 = reaper.GetAudioAccessorHash(<em>AudioAccessor</em> accessor, <em>string </em>hashNeed128)</code></div>
	<div class="p_func"><code>(<em>AudioAccessor</em> accessor, <em>String</em> hashNeed128) = RPR_GetAudioAccessorHash(accessor, hashNeed128)</code></div>
	<p>Deprecated. See <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a> instead.</p>
</div>

<div class="function_definition" id="GetAudioAccessorSamples">
	<div class="c_func"><code>int GetAudioAccessorSamples(AudioAccessor* accessor, int samplerate, int numchannels, double starttime_sec, int numsamplesperchannel, double* samplebuffer)</code></div>
	<div class="e_func"><code><em>int </em> GetAudioAccessorSamples(<em>AudioAccessor</em> accessor, <em>int </em>samplerate, <em>int </em>numchannels, starttime_sec, <em>int </em>numsamplesperchannel, <em>buffer_ptr </em>samplebuffer)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetAudioAccessorSamples(<em>AudioAccessor</em> accessor, <em>integer</em> samplerate, <em>integer</em> numchannels, <em>number</em> starttime_sec, <em>integer</em> numsamplesperchannel, <em>reaper.array </em>samplebuffer)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>AudioAccessor</em> accessor, <em>Int</em> samplerate, <em>Int</em> numchannels, <em>Float</em> starttime_sec, <em>Int</em> numsamplesperchannel, <em>Float</em> samplebuffer) = RPR_GetAudioAccessorSamples(accessor, samplerate, numchannels, starttime_sec, numsamplesperchannel, samplebuffer)</code></div>
	<p>Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorStartTime">GetAudioAccessorStartTime</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>.<br>
</p><p>
This function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:<br>
</p>
<p><code>RPR_GetTrack(0, 0)<br>
aa = RPR_CreateTrackAudioAccessor(tr)<br>
buf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero<br>
pos = 0.0<br>
(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)<br>
# buf now holds the first 2*1024 audio samples from the track.<br>
# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.<br>
</code></p>
</div>

<div class="function_definition" id="GetAudioAccessorStartTime">
	<div class="c_func"><code>double GetAudioAccessorStartTime(AudioAccessor* accessor)</code></div>
	<div class="e_func"><code><em>double </em> GetAudioAccessorStartTime(<em>AudioAccessor</em> accessor)</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetAudioAccessorStartTime(<em>AudioAccessor</em> accessor)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetAudioAccessorStartTime(<em>AudioAccessor</em> accessor)</code></div>
	<p>Get the start time of the audio that can be returned from this accessor. See <a href="#CreateTakeAudioAccessor">CreateTakeAudioAccessor</a>, <a href="#CreateTrackAudioAccessor">CreateTrackAudioAccessor</a>, <a href="#DestroyAudioAccessor">DestroyAudioAccessor</a>, <a href="#AudioAccessorStateChanged">AudioAccessorStateChanged</a>, <a href="#GetAudioAccessorEndTime">GetAudioAccessorEndTime</a>, <a href="#GetAudioAccessorSamples">GetAudioAccessorSamples</a>.</p>
</div>

<div class="function_definition" id="GetAudioDeviceInfo">
	<div class="c_func"><code>bool GetAudioDeviceInfo(const char* attribute, char* descOut, int descOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> GetAudioDeviceInfo("attribute", #desc)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>desc = reaper.GetAudioDeviceInfo(<em>string</em> attribute)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> attribute, <em>String</em> descOut, <em>Int</em> descOut_sz) = RPR_GetAudioDeviceInfo(attribute, descOut, descOut_sz)</code></div>
	<p>get information about the currently open audio device. attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown attribute or device not open.</p>
</div>

<div class="function_definition" id="GetConfigWantsDock">
	<div class="c_func"><code>int GetConfigWantsDock(const char* ident_str)</code></div>
	<div class="e_func"><code><em>int </em> GetConfigWantsDock("ident_str")</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetConfigWantsDock(<em>string</em> ident_str)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetConfigWantsDock(<em>String</em> ident_str)</code></div>
	<p>gets the dock ID desired by ident_str, if any</p>
</div>

<div class="function_definition" id="GetCurrentProjectInLoadSave">
	<div class="c_func"><code>ReaProject* GetCurrentProjectInLoadSave()</code></div>
	<div class="e_func"><code><em>ReaProject</em>  GetCurrentProjectInLoadSave()</code></div>
	<div class="l_func"><code><em>ReaProject</em> reaper.GetCurrentProjectInLoadSave()</code></div>
	<div class="p_func"><code><em>ReaProject</em>  RPR_GetCurrentProjectInLoadSave()</code></div>
	<p>returns current project if in load/save (usually only used from project_config_extension_t)</p>
</div>

<div class="function_definition" id="GetCursorContext">
	<div class="c_func"><code>int GetCursorContext()</code></div>
	<div class="e_func"><code><em>int </em> GetCursorContext()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetCursorContext()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetCursorContext()</code></div>
	<p>return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown</p>
</div>

<div class="function_definition" id="GetCursorContext2">
	<div class="c_func"><code>int GetCursorContext2(bool want_last_valid)</code></div>
	<div class="e_func"><code><em>int </em> GetCursorContext2(<em>bool </em>want_last_valid)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetCursorContext2(<em>boolean</em> want_last_valid)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetCursorContext2(<em>Boolean</em> want_last_valid)</code></div>
	<p>0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)</p>
</div>

<div class="function_definition" id="GetCursorPosition">
	<div class="c_func"><code>double GetCursorPosition()</code></div>
	<div class="e_func"><code><em>double </em> GetCursorPosition()</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetCursorPosition()</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetCursorPosition()</code></div>
	<p>edit cursor position</p>
</div>

<div class="function_definition" id="GetCursorPositionEx">
	<div class="c_func"><code>double GetCursorPositionEx(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>double </em> GetCursorPositionEx(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetCursorPositionEx(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetCursorPositionEx(<em>ReaProject</em> proj)</code></div>
	<p>edit cursor position</p>
</div>

<div class="function_definition" id="GetDisplayedMediaItemColor">
	<div class="c_func"><code>int GetDisplayedMediaItemColor(MediaItem* item)</code></div>
	<div class="e_func"><code><em>int </em> GetDisplayedMediaItemColor(<em>MediaItem</em> item)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetDisplayedMediaItemColor(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetDisplayedMediaItemColor(<em>MediaItem</em> item)</code></div>
	<p>see <a href="#GetDisplayedMediaItemColor2">GetDisplayedMediaItemColor2</a>.</p>
</div>

<div class="function_definition" id="GetDisplayedMediaItemColor2">
	<div class="c_func"><code>int GetDisplayedMediaItemColor2(MediaItem* item, MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>int </em> GetDisplayedMediaItemColor2(<em>MediaItem</em> item, <em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetDisplayedMediaItemColor2(<em>MediaItem</em> item, <em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetDisplayedMediaItemColor2(<em>MediaItem</em> item, <em>MediaItem_Take</em> take)</code></div>
	<p>Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means "no color", not black.</p>
</div>

<div class="function_definition" id="GetEnvelopeInfo_Value">
	<div class="c_func"><code>double GetEnvelopeInfo_Value(TrackEnvelope* env, const char* parmname)</code></div>
	<div class="e_func"><code><em>double </em> GetEnvelopeInfo_Value(<em>TrackEnvelope</em> env, "parmname")</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetEnvelopeInfo_Value(<em>TrackEnvelope</em> env, <em>string</em> parmname)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetEnvelopeInfo_Value(<em>TrackEnvelope</em> env, <em>String</em> parmname)</code></div>
	<p>Gets an envelope numerical-value attribute:<br>
I_TCPY : int : Y offset of envelope relative to parent track (may be separate lane or overlap with track contents)<br>
I_TCPH : int : visible height of envelope<br>
I_TCPY_USED : int : Y offset of envelope relative to parent track, exclusive of padding<br>
I_TCPH_USED : int : visible height of envelope, exclusive of padding<br>
P_TRACK : MediaTrack * : parent track pointer (if any)<br>
P_DESTTRACK : MediaTrack * : destination track pointer, if on a send<br>
P_ITEM : MediaItem * : parent item pointer (if any)<br>
P_TAKE : MediaItem_Take * : parent take pointer (if any)<br>
I_SEND_IDX : int : 1-based index of send in P_TRACK, or 0 if not a send<br>
I_HWOUT_IDX : int : 1-based index of hardware output in P_TRACK or 0 if not a hardware output<br>
I_RECV_IDX : int : 1-based index of receive in P_DESTTRACK or 0 if not a send/receive<br>
</p>
</div>

<div class="function_definition" id="GetEnvelopeName">
	<div class="c_func"><code>bool GetEnvelopeName(TrackEnvelope* env, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> GetEnvelopeName(<em>TrackEnvelope</em> env, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.GetEnvelopeName(<em>TrackEnvelope</em> env)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>TrackEnvelope</em> env, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_GetEnvelopeName(env, bufOut, bufOut_sz)</code></div>
</div>

<div class="function_definition" id="GetEnvelopePoint">
	<div class="c_func"><code>bool GetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeOut, double* valueOut, int* shapeOut, double* tensionOut, bool* selectedOut)</code></div>
	<div class="e_func"><code><em>bool </em> GetEnvelopePoint(<em>TrackEnvelope</em> envelope, <em>int </em>ptidx, <em>&amp;</em>time, <em>&amp;</em>value, <em>int &amp;</em>shape, <em>&amp;</em>tension, <em>bool &amp;</em>selected)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>time, <em>number </em>value, <em>integer </em>shape, <em>number </em>tension, <em>boolean </em>selected = reaper.GetEnvelopePoint(<em>TrackEnvelope</em> envelope, <em>integer</em> ptidx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>TrackEnvelope</em> envelope, <em>Int</em> ptidx, <em>Float</em> timeOut, <em>Float</em> valueOut, <em>Int</em> shapeOut, <em>Float</em> tensionOut, <em>Boolean</em> selectedOut) = RPR_GetEnvelopePoint(envelope, ptidx, timeOut, valueOut, shapeOut, tensionOut, selectedOut)</code></div>
	<p>Get the attributes of an envelope point. See <a href="#GetEnvelopePointEx">GetEnvelopePointEx</a>.</p>
</div>

<div class="function_definition" id="GetEnvelopePointByTime">
	<div class="c_func"><code>int GetEnvelopePointByTime(TrackEnvelope* envelope, double time)</code></div>
	<div class="e_func"><code><em>int </em> GetEnvelopePointByTime(<em>TrackEnvelope</em> envelope, time)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetEnvelopePointByTime(<em>TrackEnvelope</em> envelope, <em>number</em> time)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetEnvelopePointByTime(<em>TrackEnvelope</em> envelope, <em>Float</em> time)</code></div>
	<p>Returns the envelope point at or immediately prior to the given time position. See <a href="#GetEnvelopePointByTimeEx">GetEnvelopePointByTimeEx</a>.</p>
</div>

<div class="function_definition" id="GetEnvelopePointByTimeEx">
	<div class="c_func"><code>int GetEnvelopePointByTimeEx(TrackEnvelope* envelope, int autoitem_idx, double time)</code></div>
	<div class="e_func"><code><em>int </em> GetEnvelopePointByTimeEx(<em>TrackEnvelope</em> envelope, <em>int </em>autoitem_idx, time)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetEnvelopePointByTimeEx(<em>TrackEnvelope</em> envelope, <em>integer</em> autoitem_idx, <em>number</em> time)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetEnvelopePointByTimeEx(<em>TrackEnvelope</em> envelope, <em>Int</em> autoitem_idx, <em>Float</em> time)</code></div>
	<p>Returns the envelope point at or immediately prior to the given time position.<br>
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.<br>
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,<br>
even if the automation item is trimmed so that not all points are visible.<br>
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.<br>
See <a href="#GetEnvelopePointEx">GetEnvelopePointEx</a>, <a href="#SetEnvelopePointEx">SetEnvelopePointEx</a>, <a href="#InsertEnvelopePointEx">InsertEnvelopePointEx</a>, <a href="#DeleteEnvelopePointEx">DeleteEnvelopePointEx</a>.</p>
</div>

<div class="function_definition" id="GetEnvelopePointEx">
	<div class="c_func"><code>bool GetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeOut, double* valueOut, int* shapeOut, double* tensionOut, bool* selectedOut)</code></div>
	<div class="e_func"><code><em>bool </em> GetEnvelopePointEx(<em>TrackEnvelope</em> envelope, <em>int </em>autoitem_idx, <em>int </em>ptidx, <em>&amp;</em>time, <em>&amp;</em>value, <em>int &amp;</em>shape, <em>&amp;</em>tension, <em>bool &amp;</em>selected)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>time, <em>number </em>value, <em>integer </em>shape, <em>number </em>tension, <em>boolean </em>selected = reaper.GetEnvelopePointEx(<em>TrackEnvelope</em> envelope, <em>integer</em> autoitem_idx, <em>integer</em> ptidx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>TrackEnvelope</em> envelope, <em>Int</em> autoitem_idx, <em>Int</em> ptidx, <em>Float</em> timeOut, <em>Float</em> valueOut, <em>Int</em> shapeOut, <em>Float</em> tensionOut, <em>Boolean</em> selectedOut) = RPR_GetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeOut, valueOut, shapeOut, tensionOut, selectedOut)</code></div>
	<p>Get the attributes of an envelope point.<br>
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.<br>
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,<br>
even if the automation item is trimmed so that not all points are visible.<br>
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.<br>
See <a href="#CountEnvelopePointsEx">CountEnvelopePointsEx</a>, <a href="#SetEnvelopePointEx">SetEnvelopePointEx</a>, <a href="#InsertEnvelopePointEx">InsertEnvelopePointEx</a>, <a href="#DeleteEnvelopePointEx">DeleteEnvelopePointEx</a>.</p>
</div>

<div class="function_definition" id="GetEnvelopeScalingMode">
	<div class="c_func"><code>int GetEnvelopeScalingMode(TrackEnvelope* env)</code></div>
	<div class="e_func"><code><em>int </em> GetEnvelopeScalingMode(<em>TrackEnvelope</em> env)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetEnvelopeScalingMode(<em>TrackEnvelope</em> env)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetEnvelopeScalingMode(<em>TrackEnvelope</em> env)</code></div>
	<p>Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see <a href="#ScaleFromEnvelopeMode">ScaleFromEnvelopeMode</a>, <a href="#ScaleToEnvelopeMode">ScaleToEnvelopeMode</a>.</p>
</div>

<div class="function_definition" id="GetEnvelopeStateChunk">
	<div class="c_func"><code>bool GetEnvelopeStateChunk(TrackEnvelope* env, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</code></div>
	<div class="e_func"><code><em>bool </em> GetEnvelopeStateChunk(<em>TrackEnvelope</em> env, #str, <em>bool </em>isundo)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>str = reaper.GetEnvelopeStateChunk(<em>TrackEnvelope</em> env, <em>string </em>str, <em>boolean</em> isundo)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>TrackEnvelope</em> env, <em>String</em> strNeedBig, <em>Int</em> strNeedBig_sz, <em>Boolean</em> isundoOptional) = RPR_GetEnvelopeStateChunk(env, strNeedBig, strNeedBig_sz, isundoOptional)</code></div>
	<p>Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.</p>
</div>

<div class="function_definition" id="GetEnvelopeUIState">
	<div class="c_func"><code>int GetEnvelopeUIState(TrackEnvelope* env)</code></div>
	<div class="e_func"><code><em>int </em> GetEnvelopeUIState(<em>TrackEnvelope</em> env)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetEnvelopeUIState(<em>TrackEnvelope</em> env)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetEnvelopeUIState(<em>TrackEnvelope</em> env)</code></div>
	<p>gets information on the UI state of an envelope: returns &amp;1 if automation/modulation is playing back, &amp;2 if automation is being actively written, &amp;4 if the envelope recently had an effective automation mode change</p>
</div>

<div class="function_definition" id="GetExePath">
	<div class="c_func"><code>const char* GetExePath()</code></div>
	<div class="e_func"><code>bool  GetExePath(#retval)</code></div>
	<div class="l_func"><code><em>string</em> reaper.GetExePath()</code></div>
	<div class="p_func"><code><em>String</em>  RPR_GetExePath()</code></div>
	<p>returns path of REAPER.exe (not including EXE), i.e. C:\Program Files\REAPER</p>
</div>

<div class="function_definition" id="GetExtState">
	<div class="c_func"><code>const char* GetExtState(const char* section, const char* key)</code></div>
	<div class="e_func"><code>bool  GetExtState(#retval, "section", "key")</code></div>
	<div class="l_func"><code><em>string</em> reaper.GetExtState(<em>string</em> section, <em>string</em> key)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_GetExtState(<em>String</em> section, <em>String</em> key)</code></div>
	<p>Get the extended state value for a specific section and key. See <a href="#SetExtState">SetExtState</a>, <a href="#DeleteExtState">DeleteExtState</a>, <a href="#HasExtState">HasExtState</a>.</p>
</div>

<div class="function_definition" id="GetFocusedFX">
	<div class="c_func"><code>int GetFocusedFX(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut)</code></div>
	<div class="e_func"><code><em>int </em> GetFocusedFX(<em>int &amp;</em>tracknumber, <em>int &amp;</em>itemnumber, <em>int &amp;</em>fxnumber)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>integer </em>tracknumber, <em>integer </em>itemnumber, <em>integer </em>fxnumber = reaper.GetFocusedFX()</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>Int</em> tracknumberOut, <em>Int</em> itemnumberOut, <em>Int</em> fxnumberOut) = RPR_GetFocusedFX(tracknumberOut, itemnumberOut, fxnumberOut)</code></div>
	<p>This function is deprecated (returns GetFocusedFX2()&amp;3), see <a href="#GetFocusedFX2">GetFocusedFX2</a>.</p>
</div>

<div class="function_definition" id="GetFocusedFX2">
	<div class="c_func"><code>int GetFocusedFX2(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut)</code></div>
	<div class="e_func"><code><em>int </em> GetFocusedFX2(<em>int &amp;</em>tracknumber, <em>int &amp;</em>itemnumber, <em>int &amp;</em>fxnumber)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>integer </em>tracknumber, <em>integer </em>itemnumber, <em>integer </em>fxnumber = reaper.GetFocusedFX2()</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>Int</em> tracknumberOut, <em>Int</em> itemnumberOut, <em>Int</em> fxnumberOut) = RPR_GetFocusedFX2(tracknumberOut, itemnumberOut, fxnumberOut)</code></div>
	<p>Return value has 1 set if track FX, 2 if take/item FX, 4 set if FX is no longer focused but still open. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber is zero-based (or -1 if not an item). For interpretation of fxnumber, see <a href="#GetLastTouchedFX">GetLastTouchedFX</a>.</p>
</div>

<div class="function_definition" id="GetFreeDiskSpaceForRecordPath">
	<div class="c_func"><code>int GetFreeDiskSpaceForRecordPath(ReaProject* proj, int pathidx)</code></div>
	<div class="e_func"><code><em>int </em> GetFreeDiskSpaceForRecordPath(<em>ReaProject</em> proj, <em>int </em>pathidx)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetFreeDiskSpaceForRecordPath(<em>ReaProject</em> proj, <em>integer</em> pathidx)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetFreeDiskSpaceForRecordPath(<em>ReaProject</em> proj, <em>Int</em> pathidx)</code></div>
	<p>returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.</p>
</div>

<div class="function_definition" id="GetFXEnvelope">
	<div class="c_func"><code>TrackEnvelope* GetFXEnvelope(MediaTrack* track, int fxindex, int parameterindex, bool create)</code></div>
	<div class="e_func"><code><em>TrackEnvelope</em>  GetFXEnvelope(<em>MediaTrack</em> track, <em>int </em>fxindex, <em>int </em>parameterindex, <em>bool </em>create)</code></div>
	<div class="l_func"><code><em>TrackEnvelope</em> reaper.GetFXEnvelope(<em>MediaTrack</em> track, <em>integer</em> fxindex, <em>integer</em> parameterindex, <em>boolean</em> create)</code></div>
	<div class="p_func"><code><em>TrackEnvelope</em>  RPR_GetFXEnvelope(<em>MediaTrack</em> track, <em>Int</em> fxindex, <em>Int</em> parameterindex, <em>Boolean</em> create)</code></div>
	<p>Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.</p>
</div>

<div class="function_definition" id="GetGlobalAutomationOverride">
	<div class="c_func"><code>int GetGlobalAutomationOverride()</code></div>
	<div class="e_func"><code><em>int </em> GetGlobalAutomationOverride()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetGlobalAutomationOverride()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetGlobalAutomationOverride()</code></div>
	<p>return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass</p>
</div>

<div class="function_definition" id="GetHZoomLevel">
	<div class="c_func"><code>double GetHZoomLevel()</code></div>
	<div class="e_func"><code><em>double </em> GetHZoomLevel()</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetHZoomLevel()</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetHZoomLevel()</code></div>
	<p>returns pixels/second</p>
</div>

<div class="function_definition" id="GetInputActivityLevel">
	<div class="c_func"><code>double GetInputActivityLevel(int input_id)</code></div>
	<div class="e_func"><code><em>double </em> GetInputActivityLevel(<em>int </em>input_id)</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetInputActivityLevel(<em>integer</em> input_id)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetInputActivityLevel(<em>Int</em> input_id)</code></div>
	<p>returns approximate input level if available, 0-511 mono inputs, |1024 for stereo pairs, 4096+devidx*32 for MIDI devices</p>
</div>

<div class="function_definition" id="GetInputChannelName">
	<div class="c_func"><code>const char* GetInputChannelName(int channelIndex)</code></div>
	<div class="e_func"><code>bool  GetInputChannelName(#retval, <em>int </em>channelIndex)</code></div>
	<div class="l_func"><code><em>string</em> reaper.GetInputChannelName(<em>integer</em> channelIndex)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_GetInputChannelName(<em>Int</em> channelIndex)</code></div>
</div>

<div class="function_definition" id="GetInputOutputLatency">
	<div class="c_func"><code>void GetInputOutputLatency(int* inputlatencyOut, int* outputLatencyOut)</code></div>
	<div class="e_func"><code>GetInputOutputLatency(<em>int &amp;</em>inputlatency, <em>int &amp;</em>outputLatency)</code></div>
	<div class="l_func"><code><em>integer </em>inputlatency, <em>integer </em>outputLatency = reaper.GetInputOutputLatency()</code></div>
	<div class="p_func"><code>(<em>Int</em> inputlatencyOut, <em>Int</em> outputLatencyOut) = RPR_GetInputOutputLatency(inputlatencyOut, outputLatencyOut)</code></div>
	<p>Gets the audio device input/output latency in samples</p>
</div>

<div class="function_definition" id="GetItemEditingTime2">
	<div class="c_func"><code>double GetItemEditingTime2(PCM_source** which_itemOut, int* flagsOut)</code></div>
	<div class="e_func"><code><em>double </em> GetItemEditingTime2(<em>PCM_source &amp;</em>which_item, <em>int &amp;</em>flags)</code></div>
	<div class="l_func"><code><em>number</em>, <em>PCM_source</em> which_item, <em>integer </em>flags = reaper.GetItemEditingTime2()</code></div>
	<div class="p_func"><code>(<em>Float</em> retval, <em>PCM_source*</em> which_itemOut, <em>Int</em> flagsOut) = RPR_GetItemEditingTime2(which_itemOut, flagsOut)</code></div>
	<p>returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)</p>
</div>

<div class="function_definition" id="GetItemFromPoint">
	<div class="c_func"><code>MediaItem* GetItemFromPoint(int screen_x, int screen_y, bool allow_locked, MediaItem_Take** takeOutOptional)</code></div>
	<div class="e_func"><code><em>MediaItem</em>  GetItemFromPoint(<em>int </em>screen_x, <em>int </em>screen_y, <em>bool </em>allow_locked, <em>MediaItem_Take &amp;</em>take)</code></div>
	<div class="l_func"><code><em>MediaItem</em>, <em>MediaItem_Take</em> take = reaper.GetItemFromPoint(<em>integer</em> screen_x, <em>integer</em> screen_y, <em>boolean</em> allow_locked)</code></div>
	<div class="p_func"><code><em>MediaItem</em>  RPR_GetItemFromPoint(<em>Int</em> screen_x, <em>Int</em> screen_y, <em>Boolean</em> allow_locked, <em>MediaItem_Take*</em> takeOutOptional)</code></div>
	<p>Returns the first item at the screen coordinates specified. If allow_locked is false, locked items are ignored. If takeOutOptional specified, returns the take hit. See <a href="#GetThingFromPoint">GetThingFromPoint</a>.</p>
</div>

<div class="function_definition" id="GetItemProjectContext">
	<div class="c_func"><code>ReaProject* GetItemProjectContext(MediaItem* item)</code></div>
	<div class="e_func"><code><em>ReaProject</em>  GetItemProjectContext(<em>MediaItem</em> item)</code></div>
	<div class="l_func"><code><em>ReaProject</em> reaper.GetItemProjectContext(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>ReaProject</em>  RPR_GetItemProjectContext(<em>MediaItem</em> item)</code></div>
</div>

<div class="function_definition" id="GetItemStateChunk">
	<div class="c_func"><code>bool GetItemStateChunk(MediaItem* item, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</code></div>
	<div class="e_func"><code><em>bool </em> GetItemStateChunk(<em>MediaItem</em> item, #str, <em>bool </em>isundo)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>str = reaper.GetItemStateChunk(<em>MediaItem</em> item, <em>string </em>str, <em>boolean</em> isundo)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem</em> item, <em>String</em> strNeedBig, <em>Int</em> strNeedBig_sz, <em>Boolean</em> isundoOptional) = RPR_GetItemStateChunk(item, strNeedBig, strNeedBig_sz, isundoOptional)</code></div>
	<p>Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.</p>
</div>

<div class="function_definition" id="GetLastColorThemeFile">
	<div class="c_func"><code>const char* GetLastColorThemeFile()</code></div>
	<div class="e_func"><code>bool  GetLastColorThemeFile(#retval)</code></div>
	<div class="l_func"><code><em>string</em> reaper.GetLastColorThemeFile()</code></div>
	<div class="p_func"><code><em>String</em>  RPR_GetLastColorThemeFile()</code></div>
</div>

<div class="function_definition" id="GetLastMarkerAndCurRegion">
	<div class="c_func"><code>void GetLastMarkerAndCurRegion(ReaProject* proj, double time, int* markeridxOut, int* regionidxOut)</code></div>
	<div class="e_func"><code>GetLastMarkerAndCurRegion(<em>ReaProject</em> proj, time, <em>int &amp;</em>markeridx, <em>int &amp;</em>regionidx)</code></div>
	<div class="l_func"><code><em>integer </em>markeridx, <em>integer </em>regionidx = reaper.GetLastMarkerAndCurRegion(<em>ReaProject</em> proj, <em>number</em> time)</code></div>
	<div class="p_func"><code>(<em>ReaProject</em> proj, <em>Float</em> time, <em>Int</em> markeridxOut, <em>Int</em> regionidxOut) = RPR_GetLastMarkerAndCurRegion(proj, time, markeridxOut, regionidxOut)</code></div>
	<p>Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See <a href="#EnumProjectMarkers">EnumProjectMarkers</a>.</p>
</div>

<div class="function_definition" id="GetLastTouchedFX">
	<div class="c_func"><code>bool GetLastTouchedFX(int* tracknumberOut, int* fxnumberOut, int* paramnumberOut)</code></div>
	<div class="e_func"><code><em>bool </em> GetLastTouchedFX(<em>int &amp;</em>tracknumber, <em>int &amp;</em>fxnumber, <em>int &amp;</em>paramnumber)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>tracknumber, <em>integer </em>fxnumber, <em>integer </em>paramnumber = reaper.GetLastTouchedFX()</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>Int</em> tracknumberOut, <em>Int</em> fxnumberOut, <em>Int</em> paramnumberOut) = RPR_GetLastTouchedFX(tracknumberOut, fxnumberOut, paramnumberOut)</code></div>
	<p>Returns true if the last touched FX parameter is valid, false otherwise. The low word of tracknumber is the 1-based track index -- 0 means the master track, 1 means track 1, etc. If the high word of tracknumber is nonzero, it refers to the 1-based item index (1 is the first item on the track, etc). For track FX, the low 24 bits of fxnumber refer to the FX index in the chain, and if the next 8 bits are 01, then the FX is record FX. For item FX, the low word defines the FX index in the chain, and the high word defines the take number.</p>
</div>

<div class="function_definition" id="GetLastTouchedTrack">
	<div class="c_func"><code>MediaTrack* GetLastTouchedTrack()</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  GetLastTouchedTrack()</code></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.GetLastTouchedTrack()</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  RPR_GetLastTouchedTrack()</code></div>
</div>

<div class="function_definition" id="GetMainHwnd">
	<div class="c_func"><code>HWND GetMainHwnd()</code></div>
	<div class="e_func"><code><em>HWND</em>  GetMainHwnd()</code></div>
	<div class="l_func"><code><em>HWND</em> reaper.GetMainHwnd()</code></div>
	<div class="p_func"><code><em>HWND</em>  RPR_GetMainHwnd()</code></div>
</div>

<div class="function_definition" id="GetMasterMuteSoloFlags">
	<div class="c_func"><code>int GetMasterMuteSoloFlags()</code></div>
	<div class="e_func"><code><em>int </em> GetMasterMuteSoloFlags()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetMasterMuteSoloFlags()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetMasterMuteSoloFlags()</code></div>
	<p>&amp;1=master mute,&amp;2=master solo. This is deprecated as you can just query the master track as well.</p>
</div>

<div class="function_definition" id="GetMasterTrack">
	<div class="c_func"><code>MediaTrack* GetMasterTrack(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  GetMasterTrack(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.GetMasterTrack(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  RPR_GetMasterTrack(<em>ReaProject</em> proj)</code></div>
</div>

<div class="function_definition" id="GetMasterTrackVisibility">
	<div class="c_func"><code>int GetMasterTrackVisibility()</code></div>
	<div class="e_func"><code><em>int </em> GetMasterTrackVisibility()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetMasterTrackVisibility()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetMasterTrackVisibility()</code></div>
	<p>returns &amp;1 if the master track is visible in the TCP, &amp;2 if NOT visible in the mixer. See <a href="#SetMasterTrackVisibility">SetMasterTrackVisibility</a>.</p>
</div>

<div class="function_definition" id="GetMaxMidiInputs">
	<div class="c_func"><code>int GetMaxMidiInputs()</code></div>
	<div class="e_func"><code><em>int </em> GetMaxMidiInputs()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetMaxMidiInputs()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetMaxMidiInputs()</code></div>
	<p>returns max dev for midi inputs/outputs</p>
</div>

<div class="function_definition" id="GetMaxMidiOutputs">
	<div class="c_func"><code>int GetMaxMidiOutputs()</code></div>
	<div class="e_func"><code><em>int </em> GetMaxMidiOutputs()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetMaxMidiOutputs()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetMaxMidiOutputs()</code></div>
</div>

<div class="function_definition" id="GetMediaFileMetadata">
	<div class="c_func"><code>int GetMediaFileMetadata(PCM_source* mediaSource, const char* identifier, char* bufOutNeedBig, int bufOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> GetMediaFileMetadata(<em>PCM_source</em> mediaSource, "identifier", #buf)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>buf = reaper.GetMediaFileMetadata(<em>PCM_source</em> mediaSource, <em>string</em> identifier)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>PCM_source</em> mediaSource, <em>String</em> identifier, <em>String</em> bufOutNeedBig, <em>Int</em> bufOutNeedBig_sz) = RPR_GetMediaFileMetadata(mediaSource, identifier, bufOutNeedBig, bufOutNeedBig_sz)</code></div>
	<p>Get text-based metadata from a media file for a given identifier. Call with identifier="" to list all identifiers contained in the file, separated by newlines. May return "[Binary data]" for metadata that REAPER doesn't handle.</p>
</div>

<div class="function_definition" id="GetMediaItem">
	<div class="c_func"><code>MediaItem* GetMediaItem(ReaProject* proj, int itemidx)</code></div>
	<div class="e_func"><code><em>MediaItem</em>  GetMediaItem(<em>ReaProject</em> proj, <em>int </em>itemidx)</code></div>
	<div class="l_func"><code><em>MediaItem</em> reaper.GetMediaItem(<em>ReaProject</em> proj, <em>integer</em> itemidx)</code></div>
	<div class="p_func"><code><em>MediaItem</em>  RPR_GetMediaItem(<em>ReaProject</em> proj, <em>Int</em> itemidx)</code></div>
	<p>get an item from a project by item count (zero-based) (proj=0 for active project)</p>
</div>

<div class="function_definition" id="GetMediaItem_Track">
	<div class="c_func"><code>MediaTrack* GetMediaItem_Track(MediaItem* item)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  GetMediaItem_Track(<em>MediaItem</em> item)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.GetMediaItem_Track(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  RPR_GetMediaItem_Track(<em>MediaItem</em> item)</code></div>
	<p>Get parent track of media item</p>
</div>

<div class="function_definition" id="GetMediaItemInfo_Value">
	<div class="c_func"><code>double GetMediaItemInfo_Value(MediaItem* item, const char* parmname)</code></div>
	<div class="e_func"><code><em>double </em> GetMediaItemInfo_Value(<em>MediaItem</em> item, "parmname")</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetMediaItemInfo_Value(<em>MediaItem</em> item, <em>string</em> parmname)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetMediaItemInfo_Value(<em>MediaItem</em> item, <em>String</em> parmname)</code></div>
	<p>Get media item numerical-value attributes.<br>
B_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.<br>
B_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.<br>
C_LANEPLAYS : char * : in fixed lane tracks, 0=this item lane does not play, 1=this item lane plays exclusively, 2=this item lane plays and other lane also play. (read-only)<br>
C_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.<br>
B_LOOPSRC : bool * : loop source<br>
B_ALLTAKESPLAY : bool * : all takes play<br>
B_UISEL : bool * : selected in arrange view<br>
C_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1<br>
C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1<br>
C_LOCK : char * : locked, &amp;1=locked<br>
D_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc<br>
D_POSITION : double * : item position in seconds<br>
D_LENGTH : double * : item length in seconds<br>
D_SNAPOFFSET : double * : item snap offset in seconds<br>
D_FADEINLEN : double * : item manual fadein length in seconds<br>
D_FADEOUTLEN : double * : item manual fadeout length in seconds<br>
D_FADEINDIR : double * : item fadein curvature, -1..1<br>
D_FADEOUTDIR : double * : item fadeout curvature, -1..1<br>
D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein<br>
D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout<br>
C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear<br>
C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear<br>
I_GROUPID : int * : group ID, 0=no group<br>
I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)<br>
I_LASTH : int * : height in pixels (read-only)<br>
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color<br>
I_CURTAKE : int * : active take number<br>
IP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)<br>
F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)<br>
F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)<br>
P_TRACK : MediaTrack * : (read-only)<br>
</p>
</div>

<div class="function_definition" id="GetMediaItemNumTakes">
	<div class="c_func"><code>int GetMediaItemNumTakes(MediaItem* item)</code></div>
	<div class="e_func"><code><em>int </em> GetMediaItemNumTakes(<em>MediaItem</em> item)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetMediaItemNumTakes(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetMediaItemNumTakes(<em>MediaItem</em> item)</code></div>
</div>

<div class="function_definition" id="GetMediaItemTake">
	<div class="c_func"><code>MediaItem_Take* GetMediaItemTake(MediaItem* item, int tk)</code></div>
	<div class="e_func"><code><em>MediaItem_Take</em>  GetMediaItemTake(<em>MediaItem</em> item, <em>int </em>tk)</code></div>
	<div class="l_func"><code><em>MediaItem_Take</em> reaper.GetMediaItemTake(<em>MediaItem</em> item, <em>integer</em> tk)</code></div>
	<div class="p_func"><code><em>MediaItem_Take</em>  RPR_GetMediaItemTake(<em>MediaItem</em> item, <em>Int</em> tk)</code></div>
</div>

<div class="function_definition" id="GetMediaItemTake_Item">
	<div class="c_func"><code>MediaItem* GetMediaItemTake_Item(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>MediaItem</em>  GetMediaItemTake_Item(<em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code><em>MediaItem</em> reaper.GetMediaItemTake_Item(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>MediaItem</em>  RPR_GetMediaItemTake_Item(<em>MediaItem_Take</em> take)</code></div>
	<p>Get parent item of media item take</p>
</div>

<div class="function_definition" id="GetMediaItemTake_Peaks">
	<div class="c_func"><code>int GetMediaItemTake_Peaks(MediaItem_Take* take, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)</code></div>
	<div class="e_func"><code><em>int </em> GetMediaItemTake_Peaks(<em>MediaItem_Take</em> take, peakrate, starttime, <em>int </em>numchannels, <em>int </em>numsamplesperchannel, <em>int </em>want_extra_type, <em>buffer_ptr </em>buf)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetMediaItemTake_Peaks(<em>MediaItem_Take</em> take, <em>number</em> peakrate, <em>number</em> starttime, <em>integer</em> numchannels, <em>integer</em> numsamplesperchannel, <em>integer</em> want_extra_type, <em>reaper.array </em>buf)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>MediaItem_Take</em> take, <em>Float</em> peakrate, <em>Float</em> starttime, <em>Int</em> numchannels, <em>Int</em> numsamplesperchannel, <em>Int</em> want_extra_type, <em>Float</em> buf) = RPR_GetMediaItemTake_Peaks(take, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)</code></div>
	<p>Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.</p>
</div>

<div class="function_definition" id="GetMediaItemTake_Source">
	<div class="c_func"><code>PCM_source* GetMediaItemTake_Source(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>PCM_source</em>  GetMediaItemTake_Source(<em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code><em>PCM_source</em> reaper.GetMediaItemTake_Source(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>PCM_source</em>  RPR_GetMediaItemTake_Source(<em>MediaItem_Take</em> take)</code></div>
	<p>Get media source of media item take</p>
</div>

<div class="function_definition" id="GetMediaItemTake_Track">
	<div class="c_func"><code>MediaTrack* GetMediaItemTake_Track(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  GetMediaItemTake_Track(<em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.GetMediaItemTake_Track(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  RPR_GetMediaItemTake_Track(<em>MediaItem_Take</em> take)</code></div>
	<p>Get parent track of media item take</p>
</div>

<div class="function_definition" id="GetMediaItemTakeByGUID">
	<div class="c_func"><code>MediaItem_Take* GetMediaItemTakeByGUID(ReaProject* project, const GUID* guid)</code></div>
	<div class="e_func"><code><em>MediaItem_Take</em>  GetMediaItemTakeByGUID(<em>ReaProject</em> project, "guidGUID")</code></div>
	<div class="l_func"><code><em>MediaItem_Take</em> reaper.GetMediaItemTakeByGUID(<em>ReaProject</em> project, <em>string</em> guidGUID)</code></div>
	<div class="p_func"><code><em>MediaItem_Take</em>  RPR_GetMediaItemTakeByGUID(<em>ReaProject</em> project, <em>const GUID</em> guid)</code></div>
</div>

<div class="function_definition" id="GetMediaItemTakeInfo_Value">
	<div class="c_func"><code>double GetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname)</code></div>
	<div class="e_func"><code><em>double </em> GetMediaItemTakeInfo_Value(<em>MediaItem_Take</em> take, "parmname")</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetMediaItemTakeInfo_Value(<em>MediaItem_Take</em> take, <em>string</em> parmname)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetMediaItemTakeInfo_Value(<em>MediaItem_Take</em> take, <em>String</em> parmname)</code></div>
	<p>Get media item take numerical-value attributes.<br>
D_STARTOFFS : double * : start offset in source media, in seconds<br>
D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped<br>
D_PAN : double * : take pan, -1..1<br>
D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc<br>
D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc<br>
D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc<br>
B_PPITCH : bool * : preserve pitch when changing playback rate<br>
I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)<br>
I_LASTH : int * : height in pixels (read-only)<br>
I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right<br>
I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter<br>
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color<br>
IP_TAKENUMBER : int : take number (read-only, returns the take number directly)<br>
P_TRACK : pointer to MediaTrack (read-only)<br>
P_ITEM : pointer to MediaItem (read-only)<br>
P_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.<br>
</p>
</div>

<div class="function_definition" id="GetMediaItemTrack">
	<div class="c_func"><code>MediaTrack* GetMediaItemTrack(MediaItem* item)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  GetMediaItemTrack(<em>MediaItem</em> item)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.GetMediaItemTrack(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  RPR_GetMediaItemTrack(<em>MediaItem</em> item)</code></div>
</div>

<div class="function_definition" id="GetMediaSourceFileName">
	<div class="c_func"><code>void GetMediaSourceFileName(PCM_source* source, char* filenamebufOut, int filenamebufOut_sz)</code></div>
	<div class="e_func"><code>GetMediaSourceFileName(<em>PCM_source</em> source, #filenamebuf)</code></div>
	<div class="l_func"><code><em>string </em>filenamebuf = reaper.GetMediaSourceFileName(<em>PCM_source</em> source)</code></div>
	<div class="p_func"><code>(<em>PCM_source</em> source, <em>String</em> filenamebufOut, <em>Int</em> filenamebufOut_sz) = RPR_GetMediaSourceFileName(source, filenamebufOut, filenamebufOut_sz)</code></div>
	<p>Copies the media source filename to filenamebuf. Note that in-project MIDI media sources have no associated filename. See <a href="#GetMediaSourceParent">GetMediaSourceParent</a>.</p>
</div>

<div class="function_definition" id="GetMediaSourceLength">
	<div class="c_func"><code>double GetMediaSourceLength(PCM_source* source, bool* lengthIsQNOut)</code></div>
	<div class="e_func"><code><em>double </em> GetMediaSourceLength(<em>PCM_source</em> source, <em>bool &amp;</em>lengthIsQN)</code></div>
	<div class="l_func"><code><em>number</em> retval, <em>boolean </em>lengthIsQN = reaper.GetMediaSourceLength(<em>PCM_source</em> source)</code></div>
	<div class="p_func"><code>(<em>Float</em> retval, <em>PCM_source</em> source, <em>Boolean</em> lengthIsQNOut) = RPR_GetMediaSourceLength(source, lengthIsQNOut)</code></div>
	<p>Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.</p>
</div>

<div class="function_definition" id="GetMediaSourceNumChannels">
	<div class="c_func"><code>int GetMediaSourceNumChannels(PCM_source* source)</code></div>
	<div class="e_func"><code><em>int </em> GetMediaSourceNumChannels(<em>PCM_source</em> source)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetMediaSourceNumChannels(<em>PCM_source</em> source)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetMediaSourceNumChannels(<em>PCM_source</em> source)</code></div>
	<p>Returns the number of channels in the source media.</p>
</div>

<div class="function_definition" id="GetMediaSourceParent">
	<div class="c_func"><code>PCM_source* GetMediaSourceParent(PCM_source* src)</code></div>
	<div class="e_func"><code><em>PCM_source</em>  GetMediaSourceParent(<em>PCM_source</em> src)</code></div>
	<div class="l_func"><code><em>PCM_source</em> reaper.GetMediaSourceParent(<em>PCM_source</em> src)</code></div>
	<div class="p_func"><code><em>PCM_source</em>  RPR_GetMediaSourceParent(<em>PCM_source</em> src)</code></div>
	<p>Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.</p>
</div>

<div class="function_definition" id="GetMediaSourceSampleRate">
	<div class="c_func"><code>int GetMediaSourceSampleRate(PCM_source* source)</code></div>
	<div class="e_func"><code><em>int </em> GetMediaSourceSampleRate(<em>PCM_source</em> source)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetMediaSourceSampleRate(<em>PCM_source</em> source)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetMediaSourceSampleRate(<em>PCM_source</em> source)</code></div>
	<p>Returns the sample rate. MIDI source media will return zero.</p>
</div>

<div class="function_definition" id="GetMediaSourceType">
	<div class="c_func"><code>void GetMediaSourceType(PCM_source* source, char* typebufOut, int typebufOut_sz)</code></div>
	<div class="e_func"><code>GetMediaSourceType(<em>PCM_source</em> source, #typebuf)</code></div>
	<div class="l_func"><code><em>string </em>typebuf = reaper.GetMediaSourceType(<em>PCM_source</em> source)</code></div>
	<div class="p_func"><code>(<em>PCM_source</em> source, <em>String</em> typebufOut, <em>Int</em> typebufOut_sz) = RPR_GetMediaSourceType(source, typebufOut, typebufOut_sz)</code></div>
	<p>copies the media source type ("WAV", "MIDI", etc) to typebuf</p>
</div>

<div class="function_definition" id="GetMediaTrackInfo_Value">
	<div class="c_func"><code>double GetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname)</code></div>
	<div class="e_func"><code><em>double </em> GetMediaTrackInfo_Value(<em>MediaTrack</em> tr, "parmname")</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetMediaTrackInfo_Value(<em>MediaTrack</em> tr, <em>string</em> parmname)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetMediaTrackInfo_Value(<em>MediaTrack</em> tr, <em>String</em> parmname)</code></div>
	<p>Get track numerical-value attributes.<br>
B_MUTE : bool * : muted<br>
B_PHASE : bool * : track phase inverted<br>
B_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)<br>
IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)<br>
I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place<br>
B_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed<br>
I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active<br>
I_RECARM : int * : record armed, 0=not record armed, 1=record armed<br>
I_RECINPUT : int * : record input, &lt;0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.<br>
I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace<br>
I_RECMODE_FLAGS : int * : record mode flags, &amp;3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)<br>
I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)<br>
I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on<br>
B_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)<br>
I_VUMODE : int * : track vu mode, &amp;1:disabled, &amp;30==0:stereo peaks, &amp;30==2:multichannel peaks, &amp;30==4:stereo RMS, &amp;30==8:combined RMS, &amp;30==12:LUFS-M, &amp;30==16:LUFS-S (readout=max), &amp;30==20:LUFS-S (readout=current), &amp;32:LUFS calculation on channels 1+2 only<br>
I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch<br>
I_NCHAN : int * : number of track channels, 2-128, even numbers only<br>
I_SELECTED : int * : track selected, 0=unselected, 1=selected<br>
I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)<br>
I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)<br>
I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)<br>
I_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)<br>
I_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)<br>
I_MCPW : int * : current MCP width in pixels (read-only)<br>
I_MCPH : int * : current MCP height in pixels (read-only)<br>
I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc<br>
I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children<br>
I_MIDIHWOUT : int * : track midi hardware output index, &lt;0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)<br>
I_PERFFLAGS : int * : track performance flags, &amp;1=no media buffering, &amp;2=no anticipative FX<br>
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color<br>
I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels<br>
I_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)<br>
D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc<br>
D_PAN : double * : trim pan of track, -1..1<br>
D_WIDTH : double * : width of track, -1..1<br>
D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6<br>
D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6<br>
I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan<br>
D_PANLAW : double * : pan law of track, &lt;0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc<br>
I_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper<br>
P_ENV:&lt;envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be &lt;VOLENV, &lt;PANENV, etc; GUID is the stringified envelope GUID.<br>
B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)<br>
B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)<br>
B_MAINSEND : bool * : track sends audio to parent<br>
C_MAINSEND_OFFS : char * : channel offset of track send to parent<br>
C_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)<br>
I_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)<br>
C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)<br>
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)<br>
F_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)<br>
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)<br>
F_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)<br>
I_PLAY_OFFSET_FLAG : int * : track media playback offset state, &amp;1=bypassed, &amp;2=offset value is measured in samples (otherwise measured in seconds)<br>
D_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG<br>
P_PARTRACK : MediaTrack * : parent track (read-only)<br>
P_PROJECT : ReaProject * : parent project (read-only)<br>
</p>
</div>

<div class="function_definition" id="GetMIDIInputName">
	<div class="c_func"><code>bool GetMIDIInputName(int dev, char* nameout, int nameout_sz)</code></div>
	<div class="e_func"><code><em>bool </em> GetMIDIInputName(<em>int </em>dev, #nameout)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>nameout = reaper.GetMIDIInputName(<em>integer</em> dev, <em>string </em>nameout)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>Int</em> dev, <em>String</em> nameout, <em>Int</em> nameout_sz) = RPR_GetMIDIInputName(dev, nameout, nameout_sz)</code></div>
	<p>returns true if device present</p>
</div>

<div class="function_definition" id="GetMIDIOutputName">
	<div class="c_func"><code>bool GetMIDIOutputName(int dev, char* nameout, int nameout_sz)</code></div>
	<div class="e_func"><code><em>bool </em> GetMIDIOutputName(<em>int </em>dev, #nameout)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>nameout = reaper.GetMIDIOutputName(<em>integer</em> dev, <em>string </em>nameout)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>Int</em> dev, <em>String</em> nameout, <em>Int</em> nameout_sz) = RPR_GetMIDIOutputName(dev, nameout, nameout_sz)</code></div>
	<p>returns true if device present</p>
</div>

<div class="function_definition" id="GetMixerScroll">
	<div class="c_func"><code>MediaTrack* GetMixerScroll()</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  GetMixerScroll()</code></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.GetMixerScroll()</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  RPR_GetMixerScroll()</code></div>
	<p>Get the leftmost track visible in the mixer</p>
</div>

<div class="function_definition" id="GetMouseModifier">
	<div class="c_func"><code>void GetMouseModifier(const char* context, int modifier_flag, char* actionOut, int actionOut_sz)</code></div>
	<div class="e_func"><code>GetMouseModifier("context", <em>int </em>modifier_flag, #action)</code></div>
	<div class="l_func"><code><em>string </em>action = reaper.GetMouseModifier(<em>string</em> context, <em>integer</em> modifier_flag)</code></div>
	<div class="p_func"><code>(<em>String</em> context, <em>Int</em> modifier_flag, <em>String</em> actionOut, <em>Int</em> actionOut_sz) = RPR_GetMouseModifier(context, modifier_flag, actionOut, actionOut_sz)</code></div>
	<p>Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.<br>
action will be filled in with the command ID number for a built-in mouse modifier<br>
or built-in REAPER command ID, or the custom action ID string.<br>
Note: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.<br>
See <a href="#SetMouseModifier">SetMouseModifier</a> for more information.<br>
</p>
</div>

<div class="function_definition" id="GetMousePosition">
	<div class="c_func"><code>void GetMousePosition(int* xOut, int* yOut)</code></div>
	<div class="e_func"><code>GetMousePosition(<em>int &amp;</em>x, <em>int &amp;</em>y)</code></div>
	<div class="l_func"><code><em>integer </em>x, <em>integer </em>y = reaper.GetMousePosition()</code></div>
	<div class="p_func"><code>(<em>Int</em> xOut, <em>Int</em> yOut) = RPR_GetMousePosition(xOut, yOut)</code></div>
	<p>get mouse position in screen coordinates</p>
</div>

<div class="function_definition" id="GetNumAudioInputs">
	<div class="c_func"><code>int GetNumAudioInputs()</code></div>
	<div class="e_func"><code><em>int </em> GetNumAudioInputs()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetNumAudioInputs()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetNumAudioInputs()</code></div>
	<p>Return number of normal audio hardware inputs available</p>
</div>

<div class="function_definition" id="GetNumAudioOutputs">
	<div class="c_func"><code>int GetNumAudioOutputs()</code></div>
	<div class="e_func"><code><em>int </em> GetNumAudioOutputs()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetNumAudioOutputs()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetNumAudioOutputs()</code></div>
	<p>Return number of normal audio hardware outputs available</p>
</div>

<div class="function_definition" id="GetNumMIDIInputs">
	<div class="c_func"><code>int GetNumMIDIInputs()</code></div>
	<div class="e_func"><code><em>int </em> GetNumMIDIInputs()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetNumMIDIInputs()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetNumMIDIInputs()</code></div>
	<p>returns max number of real midi hardware inputs</p>
</div>

<div class="function_definition" id="GetNumMIDIOutputs">
	<div class="c_func"><code>int GetNumMIDIOutputs()</code></div>
	<div class="e_func"><code><em>int </em> GetNumMIDIOutputs()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetNumMIDIOutputs()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetNumMIDIOutputs()</code></div>
	<p>returns max number of real midi hardware outputs</p>
</div>

<div class="function_definition" id="GetNumTakeMarkers">
	<div class="c_func"><code>int GetNumTakeMarkers(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>int </em> GetNumTakeMarkers(<em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetNumTakeMarkers(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetNumTakeMarkers(<em>MediaItem_Take</em> take)</code></div>
	<p>Returns number of take markers. See <a href="#GetTakeMarker">GetTakeMarker</a>, <a href="#SetTakeMarker">SetTakeMarker</a>, <a href="#DeleteTakeMarker">DeleteTakeMarker</a></p>
</div>

<div class="function_definition" id="GetNumTracks">
	<div class="c_func"><code>int GetNumTracks()</code></div>
	<div class="e_func"><code><em>int </em> GetNumTracks()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetNumTracks()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetNumTracks()</code></div>
</div>

<div class="function_definition" id="GetOS">
	<div class="c_func"><code>const char* GetOS()</code></div>
	<div class="e_func"><code>bool  GetOS(#retval)</code></div>
	<div class="l_func"><code><em>string</em> reaper.GetOS()</code></div>
	<div class="p_func"><code><em>String</em>  RPR_GetOS()</code></div>
	<p>Returns "Win32", "Win64", "OSX32", "OSX64", "macOS-arm64", or "Other".</p>
</div>

<div class="function_definition" id="GetOutputChannelName">
	<div class="c_func"><code>const char* GetOutputChannelName(int channelIndex)</code></div>
	<div class="e_func"><code>bool  GetOutputChannelName(#retval, <em>int </em>channelIndex)</code></div>
	<div class="l_func"><code><em>string</em> reaper.GetOutputChannelName(<em>integer</em> channelIndex)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_GetOutputChannelName(<em>Int</em> channelIndex)</code></div>
</div>

<div class="function_definition" id="GetOutputLatency">
	<div class="c_func"><code>double GetOutputLatency()</code></div>
	<div class="e_func"><code><em>double </em> GetOutputLatency()</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetOutputLatency()</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetOutputLatency()</code></div>
	<p>returns output latency in seconds</p>
</div>

<div class="function_definition" id="GetParentTrack">
	<div class="c_func"><code>MediaTrack* GetParentTrack(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  GetParentTrack(<em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.GetParentTrack(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  RPR_GetParentTrack(<em>MediaTrack</em> track)</code></div>
</div>

<div class="function_definition" id="GetPeakFileName">
	<div class="c_func"><code>void GetPeakFileName(const char* fn, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code>GetPeakFileName("fn", #buf)</code></div>
	<div class="l_func"><code><em>string </em>buf = reaper.GetPeakFileName(<em>string</em> fn)</code></div>
	<div class="p_func"><code>(<em>String</em> fn, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_GetPeakFileName(fn, bufOut, bufOut_sz)</code></div>
	<p>get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)</p>
</div>

<div class="function_definition" id="GetPeakFileNameEx">
	<div class="c_func"><code>void GetPeakFileNameEx(const char* fn, char* buf, int buf_sz, bool forWrite)</code></div>
	<div class="e_func"><code>GetPeakFileNameEx("fn", #buf, <em>bool </em>forWrite)</code></div>
	<div class="l_func"><code><em>string </em>buf = reaper.GetPeakFileNameEx(<em>string</em> fn, <em>string </em>buf, <em>boolean</em> forWrite)</code></div>
	<div class="p_func"><code>(<em>String</em> fn, <em>String</em> buf, <em>Int</em> buf_sz, <em>Boolean</em> forWrite) = RPR_GetPeakFileNameEx(fn, buf, buf_sz, forWrite)</code></div>
	<p>get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)</p>
</div>

<div class="function_definition" id="GetPeakFileNameEx2">
	<div class="c_func"><code>void GetPeakFileNameEx2(const char* fn, char* buf, int buf_sz, bool forWrite, const char* peaksfileextension)</code></div>
	<div class="e_func"><code>GetPeakFileNameEx2("fn", #buf, <em>bool </em>forWrite, "peaksfileextension")</code></div>
	<div class="l_func"><code><em>string </em>buf = reaper.GetPeakFileNameEx2(<em>string</em> fn, <em>string </em>buf, <em>boolean</em> forWrite, <em>string</em> peaksfileextension)</code></div>
	<div class="p_func"><code>(<em>String</em> fn, <em>String</em> buf, <em>Int</em> buf_sz, <em>Boolean</em> forWrite, <em>String</em> peaksfileextension) = RPR_GetPeakFileNameEx2(fn, buf, buf_sz, forWrite, peaksfileextension)</code></div>
	<p>Like GetPeakFileNameEx, but you can specify peaksfileextension such as ".reapeaks"</p>
</div>

<div class="function_definition" id="GetPlayPosition">
	<div class="c_func"><code>double GetPlayPosition()</code></div>
	<div class="e_func"><code><em>double </em> GetPlayPosition()</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetPlayPosition()</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetPlayPosition()</code></div>
	<p>returns latency-compensated actual-what-you-hear position</p>
</div>

<div class="function_definition" id="GetPlayPosition2">
	<div class="c_func"><code>double GetPlayPosition2()</code></div>
	<div class="e_func"><code><em>double </em> GetPlayPosition2()</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetPlayPosition2()</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetPlayPosition2()</code></div>
	<p>returns position of next audio block being processed</p>
</div>

<div class="function_definition" id="GetPlayPosition2Ex">
	<div class="c_func"><code>double GetPlayPosition2Ex(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>double </em> GetPlayPosition2Ex(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetPlayPosition2Ex(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetPlayPosition2Ex(<em>ReaProject</em> proj)</code></div>
	<p>returns position of next audio block being processed</p>
</div>

<div class="function_definition" id="GetPlayPositionEx">
	<div class="c_func"><code>double GetPlayPositionEx(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>double </em> GetPlayPositionEx(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetPlayPositionEx(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetPlayPositionEx(<em>ReaProject</em> proj)</code></div>
	<p>returns latency-compensated actual-what-you-hear position</p>
</div>

<div class="function_definition" id="GetPlayState">
	<div class="c_func"><code>int GetPlayState()</code></div>
	<div class="e_func"><code><em>int </em> GetPlayState()</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetPlayState()</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetPlayState()</code></div>
	<p>&amp;1=playing, &amp;2=paused, &amp;4=is recording</p>
</div>

<div class="function_definition" id="GetPlayStateEx">
	<div class="c_func"><code>int GetPlayStateEx(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>int </em> GetPlayStateEx(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetPlayStateEx(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetPlayStateEx(<em>ReaProject</em> proj)</code></div>
	<p>&amp;1=playing, &amp;2=paused, &amp;4=is recording</p>
</div>

<div class="function_definition" id="GetProjectLength">
	<div class="c_func"><code>double GetProjectLength(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>double </em> GetProjectLength(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetProjectLength(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetProjectLength(<em>ReaProject</em> proj)</code></div>
	<p>returns length of project (maximum of end of media item, markers, end of regions, tempo map</p>
</div>

<div class="function_definition" id="GetProjectName">
	<div class="c_func"><code>void GetProjectName(ReaProject* proj, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code>GetProjectName(<em>ReaProject</em> proj, #buf)</code></div>
	<div class="l_func"><code><em>string </em>buf = reaper.GetProjectName(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code>(<em>ReaProject</em> proj, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_GetProjectName(proj, bufOut, bufOut_sz)</code></div>
</div>

<div class="function_definition" id="GetProjectPath">
	<div class="c_func"><code>void GetProjectPath(char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code>GetProjectPath(#buf)</code></div>
	<div class="l_func"><code><em>string </em>buf = reaper.GetProjectPath()</code></div>
	<div class="p_func"><code>(<em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_GetProjectPath(bufOut, bufOut_sz)</code></div>
	<p>Get the project recording path.</p>
</div>

<div class="function_definition" id="GetProjectPathEx">
	<div class="c_func"><code>void GetProjectPathEx(ReaProject* proj, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code>GetProjectPathEx(<em>ReaProject</em> proj, #buf)</code></div>
	<div class="l_func"><code><em>string </em>buf = reaper.GetProjectPathEx(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code>(<em>ReaProject</em> proj, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_GetProjectPathEx(proj, bufOut, bufOut_sz)</code></div>
	<p>Get the project recording path.</p>
</div>

<div class="function_definition" id="GetProjectStateChangeCount">
	<div class="c_func"><code>int GetProjectStateChangeCount(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>int </em> GetProjectStateChangeCount(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetProjectStateChangeCount(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetProjectStateChangeCount(<em>ReaProject</em> proj)</code></div>
	<p>returns an integer that changes when the project state changes</p>
</div>

<div class="function_definition" id="GetProjectTimeOffset">
	<div class="c_func"><code>double GetProjectTimeOffset(ReaProject* proj, bool rndframe)</code></div>
	<div class="e_func"><code><em>double </em> GetProjectTimeOffset(<em>ReaProject</em> proj, <em>bool </em>rndframe)</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetProjectTimeOffset(<em>ReaProject</em> proj, <em>boolean</em> rndframe)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetProjectTimeOffset(<em>ReaProject</em> proj, <em>Boolean</em> rndframe)</code></div>
	<p>Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size.</p>
</div>

<div class="function_definition" id="GetProjectTimeSignature">
	<div class="c_func"><code>void GetProjectTimeSignature(double* bpmOut, double* bpiOut)</code></div>
	<div class="e_func"><code>GetProjectTimeSignature(<em>&amp;</em>bpm, <em>&amp;</em>bpi)</code></div>
	<div class="l_func"><code><em>number </em>bpm, <em>number </em>bpi = reaper.GetProjectTimeSignature()</code></div>
	<div class="p_func"><code>(<em>Float</em> bpmOut, <em>Float</em> bpiOut) = RPR_GetProjectTimeSignature(bpmOut, bpiOut)</code></div>
	<p>deprecated</p>
</div>

<div class="function_definition" id="GetProjectTimeSignature2">
	<div class="c_func"><code>void GetProjectTimeSignature2(ReaProject* proj, double* bpmOut, double* bpiOut)</code></div>
	<div class="e_func"><code>GetProjectTimeSignature2(<em>ReaProject</em> proj, <em>&amp;</em>bpm, <em>&amp;</em>bpi)</code></div>
	<div class="l_func"><code><em>number </em>bpm, <em>number </em>bpi = reaper.GetProjectTimeSignature2(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code>(<em>ReaProject</em> proj, <em>Float</em> bpmOut, <em>Float</em> bpiOut) = RPR_GetProjectTimeSignature2(proj, bpmOut, bpiOut)</code></div>
	<p>Gets basic time signature (beats per minute, numerator of time signature in bpi)<br>
this does not reflect tempo envelopes but is purely what is set in the project settings.</p>
</div>

<div class="function_definition" id="GetProjExtState">
	<div class="c_func"><code>int GetProjExtState(ReaProject* proj, const char* extname, const char* key, char* valOutNeedBig, int valOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> GetProjExtState(<em>ReaProject</em> proj, "extname", "key", #val)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>val = reaper.GetProjExtState(<em>ReaProject</em> proj, <em>string</em> extname, <em>string</em> key)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>ReaProject</em> proj, <em>String</em> extname, <em>String</em> key, <em>String</em> valOutNeedBig, <em>Int</em> valOutNeedBig_sz) = RPR_GetProjExtState(proj, extname, key, valOutNeedBig, valOutNeedBig_sz)</code></div>
	<p>Get the value previously associated with this extname and key, the last time the project was saved. See <a href="#SetProjExtState">SetProjExtState</a>, <a href="#EnumProjExtState">EnumProjExtState</a>.</p>
</div>

<div class="function_definition" id="GetResourcePath">
	<div class="c_func"><code>const char* GetResourcePath()</code></div>
	<div class="e_func"><code>bool  GetResourcePath(#retval)</code></div>
	<div class="l_func"><code><em>string</em> reaper.GetResourcePath()</code></div>
	<div class="p_func"><code><em>String</em>  RPR_GetResourcePath()</code></div>
	<p>returns path where ini files are stored, other things are in subdirectories.</p>
</div>

<div class="function_definition" id="GetSelectedEnvelope">
	<div class="c_func"><code>TrackEnvelope* GetSelectedEnvelope(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>TrackEnvelope</em>  GetSelectedEnvelope(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>TrackEnvelope</em> reaper.GetSelectedEnvelope(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>TrackEnvelope</em>  RPR_GetSelectedEnvelope(<em>ReaProject</em> proj)</code></div>
	<p>get the currently selected envelope, returns NULL/nil if no envelope is selected</p>
</div>

<div class="function_definition" id="GetSelectedMediaItem">
	<div class="c_func"><code>MediaItem* GetSelectedMediaItem(ReaProject* proj, int selitem)</code></div>
	<div class="e_func"><code><em>MediaItem</em>  GetSelectedMediaItem(<em>ReaProject</em> proj, <em>int </em>selitem)</code></div>
	<div class="l_func"><code><em>MediaItem</em> reaper.GetSelectedMediaItem(<em>ReaProject</em> proj, <em>integer</em> selitem)</code></div>
	<div class="p_func"><code><em>MediaItem</em>  RPR_GetSelectedMediaItem(<em>ReaProject</em> proj, <em>Int</em> selitem)</code></div>
	<p>get a selected item by selected item count (zero-based) (proj=0 for active project)</p>
</div>

<div class="function_definition" id="GetSelectedTrack">
	<div class="c_func"><code>MediaTrack* GetSelectedTrack(ReaProject* proj, int seltrackidx)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  GetSelectedTrack(<em>ReaProject</em> proj, <em>int </em>seltrackidx)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.GetSelectedTrack(<em>ReaProject</em> proj, <em>integer</em> seltrackidx)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  RPR_GetSelectedTrack(<em>ReaProject</em> proj, <em>Int</em> seltrackidx)</code></div>
	<p>Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see <a href="#GetSelectedTrack2">GetSelectedTrack2</a>.</p>
</div>

<div class="function_definition" id="GetSelectedTrack2">
	<div class="c_func"><code>MediaTrack* GetSelectedTrack2(ReaProject* proj, int seltrackidx, bool wantmaster)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  GetSelectedTrack2(<em>ReaProject</em> proj, <em>int </em>seltrackidx, <em>bool </em>wantmaster)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.GetSelectedTrack2(<em>ReaProject</em> proj, <em>integer</em> seltrackidx, <em>boolean</em> wantmaster)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  RPR_GetSelectedTrack2(<em>ReaProject</em> proj, <em>Int</em> seltrackidx, <em>Boolean</em> wantmaster)</code></div>
	<p>Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).</p>
</div>

<div class="function_definition" id="GetSelectedTrackEnvelope">
	<div class="c_func"><code>TrackEnvelope* GetSelectedTrackEnvelope(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>TrackEnvelope</em>  GetSelectedTrackEnvelope(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>TrackEnvelope</em> reaper.GetSelectedTrackEnvelope(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>TrackEnvelope</em>  RPR_GetSelectedTrackEnvelope(<em>ReaProject</em> proj)</code></div>
	<p>get the currently selected track envelope, returns NULL/nil if no envelope is selected</p>
</div>

<div class="function_definition" id="GetSet_ArrangeView2">
	<div class="c_func"><code>void GetSet_ArrangeView2(ReaProject* proj, bool isSet, int screen_x_start, int screen_x_end, double* start_timeInOut, double* end_timeInOut)</code></div>
	<div class="e_func"><code>GetSet_ArrangeView2(<em>ReaProject</em> proj, <em>bool </em>isSet, <em>int </em>screen_x_start, <em>int </em>screen_x_end, <em>&amp;</em>start_time, <em>&amp;</em>end_time)</code></div>
	<div class="l_func"><code><em>number </em>start_time, <em>number </em>end_time = reaper.GetSet_ArrangeView2(<em>ReaProject</em> proj, <em>boolean</em> isSet, <em>integer</em> screen_x_start, <em>integer</em> screen_x_end, <em>number </em>start_time, <em>number </em>end_time)</code></div>
	<div class="p_func"><code>(<em>ReaProject</em> proj, <em>Boolean</em> isSet, <em>Int</em> screen_x_start, <em>Int</em> screen_x_end, <em>Float</em> start_timeInOut, <em>Float</em> end_timeInOut) = RPR_GetSet_ArrangeView2(proj, isSet, screen_x_start, screen_x_end, start_timeInOut, end_timeInOut)</code></div>
	<p>Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time</p>
</div>

<div class="function_definition" id="GetSet_LoopTimeRange">
	<div class="c_func"><code>void GetSet_LoopTimeRange(bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)</code></div>
	<div class="e_func"><code>GetSet_LoopTimeRange(<em>bool </em>isSet, <em>bool </em>isLoop, <em>&amp;</em>start, <em>&amp;</em>end, <em>bool </em>allowautoseek)</code></div>
	<div class="l_func"><code><em>number </em>start, <em>number </em>end = reaper.GetSet_LoopTimeRange(<em>boolean</em> isSet, <em>boolean</em> isLoop, <em>number </em>start, <em>number </em>end, <em>boolean</em> allowautoseek)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> isSet, <em>Boolean</em> isLoop, <em>Float</em> startOut, <em>Float</em> endOut, <em>Boolean</em> allowautoseek) = RPR_GetSet_LoopTimeRange(isSet, isLoop, startOut, endOut, allowautoseek)</code></div>
</div>

<div class="function_definition" id="GetSet_LoopTimeRange2">
	<div class="c_func"><code>void GetSet_LoopTimeRange2(ReaProject* proj, bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)</code></div>
	<div class="e_func"><code>GetSet_LoopTimeRange2(<em>ReaProject</em> proj, <em>bool </em>isSet, <em>bool </em>isLoop, <em>&amp;</em>start, <em>&amp;</em>end, <em>bool </em>allowautoseek)</code></div>
	<div class="l_func"><code><em>number </em>start, <em>number </em>end = reaper.GetSet_LoopTimeRange2(<em>ReaProject</em> proj, <em>boolean</em> isSet, <em>boolean</em> isLoop, <em>number </em>start, <em>number </em>end, <em>boolean</em> allowautoseek)</code></div>
	<div class="p_func"><code>(<em>ReaProject</em> proj, <em>Boolean</em> isSet, <em>Boolean</em> isLoop, <em>Float</em> startOut, <em>Float</em> endOut, <em>Boolean</em> allowautoseek) = RPR_GetSet_LoopTimeRange2(proj, isSet, isLoop, startOut, endOut, allowautoseek)</code></div>
</div>

<div class="function_definition" id="GetSetAutomationItemInfo">
	<div class="c_func"><code>double GetSetAutomationItemInfo(TrackEnvelope* env, int autoitem_idx, const char* desc, double value, bool is_set)</code></div>
	<div class="e_func"><code><em>double </em> GetSetAutomationItemInfo(<em>TrackEnvelope</em> env, <em>int </em>autoitem_idx, "desc", value, <em>bool </em>is_set)</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetSetAutomationItemInfo(<em>TrackEnvelope</em> env, <em>integer</em> autoitem_idx, <em>string</em> desc, <em>number</em> value, <em>boolean</em> is_set)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetSetAutomationItemInfo(<em>TrackEnvelope</em> env, <em>Int</em> autoitem_idx, <em>String</em> desc, <em>Float</em> value, <em>Boolean</em> is_set)</code></div>
	<p>Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:<br>
D_POOL_ID : double * : automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID<br>
D_POSITION : double * : automation item timeline position in seconds<br>
D_LENGTH : double * : automation item length in seconds<br>
D_STARTOFFS : double * : automation item start offset in seconds<br>
D_PLAYRATE : double * : automation item playback rate<br>
D_BASELINE : double * : automation item baseline value in the range [0,1]<br>
D_AMPLITUDE : double * : automation item amplitude in the range [-1,1]<br>
D_LOOPSRC : double * : nonzero if the automation item contents are looped<br>
D_UISEL : double * : nonzero if the automation item is selected in the arrange view<br>
D_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)<br>
</p>
</div>

<div class="function_definition" id="GetSetAutomationItemInfo_String">
	<div class="c_func"><code>bool GetSetAutomationItemInfo_String(TrackEnvelope* env, int autoitem_idx, const char* desc, char* valuestrNeedBig, bool is_set)</code></div>
	<div class="e_func"><code><em>bool </em> GetSetAutomationItemInfo_String(<em>TrackEnvelope</em> env, <em>int </em>autoitem_idx, "desc", #valuestrNeedBig, <em>bool </em>is_set)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>valuestrNeedBig = reaper.GetSetAutomationItemInfo_String(<em>TrackEnvelope</em> env, <em>integer</em> autoitem_idx, <em>string</em> desc, <em>string </em>valuestrNeedBig, <em>boolean</em> is_set)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>TrackEnvelope</em> env, <em>Int</em> autoitem_idx, <em>String</em> desc, <em>String</em> valuestrNeedBig, <em>Boolean</em> is_set) = RPR_GetSetAutomationItemInfo_String(env, autoitem_idx, desc, valuestrNeedBig, is_set)</code></div>
	<p>Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. returns true on success. desc can be any of the following:<br>
P_POOL_NAME : char * : name of the underlying automation item pool<br>
P_POOL_EXT:xyz : char * : extension-specific persistent data<br>
</p>
</div>

<div class="function_definition" id="GetSetEnvelopeInfo_String">
	<div class="c_func"><code>bool GetSetEnvelopeInfo_String(TrackEnvelope* env, const char* parmname, char* stringNeedBig, bool setNewValue)</code></div>
	<div class="e_func"><code><em>bool </em> GetSetEnvelopeInfo_String(<em>TrackEnvelope</em> env, "parmname", #stringNeedBig, <em>bool </em>setNewValue)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>stringNeedBig = reaper.GetSetEnvelopeInfo_String(<em>TrackEnvelope</em> env, <em>string</em> parmname, <em>string </em>stringNeedBig, <em>boolean</em> setNewValue)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>TrackEnvelope</em> env, <em>String</em> parmname, <em>String</em> stringNeedBig, <em>Boolean</em> setNewValue) = RPR_GetSetEnvelopeInfo_String(env, parmname, stringNeedBig, setNewValue)</code></div>
	<p>Gets/sets an attribute string:<br>
P_EXT:xyz : char * : extension-specific persistent data<br>
GUID : GUID * : 16-byte GUID, can query only, not set. If using a _String() function, GUID is a string {xyz-...}.<br>
</p>
</div>

<div class="function_definition" id="GetSetEnvelopeState">
	<div class="c_func"><code>bool GetSetEnvelopeState(TrackEnvelope* env, char* str, int str_sz)</code></div>
	<div class="e_func"><code><em>bool </em> GetSetEnvelopeState(<em>TrackEnvelope</em> env, #str)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>str = reaper.GetSetEnvelopeState(<em>TrackEnvelope</em> env, <em>string </em>str)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>TrackEnvelope</em> env, <em>String</em> str, <em>Int</em> str_sz) = RPR_GetSetEnvelopeState(env, str, str_sz)</code></div>
	<p>deprecated -- see <a href="#SetEnvelopeStateChunk">SetEnvelopeStateChunk</a>, <a href="#GetEnvelopeStateChunk">GetEnvelopeStateChunk</a></p>
</div>

<div class="function_definition" id="GetSetEnvelopeState2">
	<div class="c_func"><code>bool GetSetEnvelopeState2(TrackEnvelope* env, char* str, int str_sz, bool isundo)</code></div>
	<div class="e_func"><code><em>bool </em> GetSetEnvelopeState2(<em>TrackEnvelope</em> env, #str, <em>bool </em>isundo)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>str = reaper.GetSetEnvelopeState2(<em>TrackEnvelope</em> env, <em>string </em>str, <em>boolean</em> isundo)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>TrackEnvelope</em> env, <em>String</em> str, <em>Int</em> str_sz, <em>Boolean</em> isundo) = RPR_GetSetEnvelopeState2(env, str, str_sz, isundo)</code></div>
	<p>deprecated -- see <a href="#SetEnvelopeStateChunk">SetEnvelopeStateChunk</a>, <a href="#GetEnvelopeStateChunk">GetEnvelopeStateChunk</a></p>
</div>

<div class="function_definition" id="GetSetItemState">
	<div class="c_func"><code>bool GetSetItemState(MediaItem* item, char* str, int str_sz)</code></div>
	<div class="e_func"><code><em>bool </em> GetSetItemState(<em>MediaItem</em> item, #str)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>str = reaper.GetSetItemState(<em>MediaItem</em> item, <em>string </em>str)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem</em> item, <em>String</em> str, <em>Int</em> str_sz) = RPR_GetSetItemState(item, str, str_sz)</code></div>
	<p>deprecated -- see <a href="#SetItemStateChunk">SetItemStateChunk</a>, <a href="#GetItemStateChunk">GetItemStateChunk</a></p>
</div>

<div class="function_definition" id="GetSetItemState2">
	<div class="c_func"><code>bool GetSetItemState2(MediaItem* item, char* str, int str_sz, bool isundo)</code></div>
	<div class="e_func"><code><em>bool </em> GetSetItemState2(<em>MediaItem</em> item, #str, <em>bool </em>isundo)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>str = reaper.GetSetItemState2(<em>MediaItem</em> item, <em>string </em>str, <em>boolean</em> isundo)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem</em> item, <em>String</em> str, <em>Int</em> str_sz, <em>Boolean</em> isundo) = RPR_GetSetItemState2(item, str, str_sz, isundo)</code></div>
	<p>deprecated -- see <a href="#SetItemStateChunk">SetItemStateChunk</a>, <a href="#GetItemStateChunk">GetItemStateChunk</a></p>
</div>

<div class="function_definition" id="GetSetMediaItemInfo_String">
	<div class="c_func"><code>bool GetSetMediaItemInfo_String(MediaItem* item, const char* parmname, char* stringNeedBig, bool setNewValue)</code></div>
	<div class="e_func"><code><em>bool </em> GetSetMediaItemInfo_String(<em>MediaItem</em> item, "parmname", #stringNeedBig, <em>bool </em>setNewValue)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>stringNeedBig = reaper.GetSetMediaItemInfo_String(<em>MediaItem</em> item, <em>string</em> parmname, <em>string </em>stringNeedBig, <em>boolean</em> setNewValue)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem</em> item, <em>String</em> parmname, <em>String</em> stringNeedBig, <em>Boolean</em> setNewValue) = RPR_GetSetMediaItemInfo_String(item, parmname, stringNeedBig, setNewValue)</code></div>
	<p>Gets/sets an item attribute string:<br>
P_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)<br>
P_EXT:xyz : char * : extension-specific persistent data<br>
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.<br>
</p>
</div>

<div class="function_definition" id="GetSetMediaItemTakeInfo_String">
	<div class="c_func"><code>bool GetSetMediaItemTakeInfo_String(MediaItem_Take* tk, const char* parmname, char* stringNeedBig, bool setNewValue)</code></div>
	<div class="e_func"><code><em>bool </em> GetSetMediaItemTakeInfo_String(<em>MediaItem_Take</em> tk, "parmname", #stringNeedBig, <em>bool </em>setNewValue)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>stringNeedBig = reaper.GetSetMediaItemTakeInfo_String(<em>MediaItem_Take</em> tk, <em>string</em> parmname, <em>string </em>stringNeedBig, <em>boolean</em> setNewValue)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> tk, <em>String</em> parmname, <em>String</em> stringNeedBig, <em>Boolean</em> setNewValue) = RPR_GetSetMediaItemTakeInfo_String(tk, parmname, stringNeedBig, setNewValue)</code></div>
	<p>Gets/sets a take attribute string:<br>
P_NAME : char * : take name<br>
P_EXT:xyz : char * : extension-specific persistent data<br>
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.<br>
</p>
</div>

<div class="function_definition" id="GetSetMediaTrackInfo_String">
	<div class="c_func"><code>bool GetSetMediaTrackInfo_String(MediaTrack* tr, const char* parmname, char* stringNeedBig, bool setNewValue)</code></div>
	<div class="e_func"><code><em>bool </em> GetSetMediaTrackInfo_String(<em>MediaTrack</em> tr, "parmname", #stringNeedBig, <em>bool </em>setNewValue)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>stringNeedBig = reaper.GetSetMediaTrackInfo_String(<em>MediaTrack</em> tr, <em>string</em> parmname, <em>string </em>stringNeedBig, <em>boolean</em> setNewValue)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> tr, <em>String</em> parmname, <em>String</em> stringNeedBig, <em>Boolean</em> setNewValue) = RPR_GetSetMediaTrackInfo_String(tr, parmname, stringNeedBig, setNewValue)</code></div>
	<p>Get or set track string attributes.<br>
P_NAME : char * : track name (on master returns NULL)<br>
P_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)<br>
P_MCP_LAYOUT : const char * : layout name<br>
P_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.<br>
  Example: "0.0 1.0 \"\" 0.0 1.0 "{xyz-...}"<br>
P_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional: envelope GUID string, fixed/fipm top y-position, fixed/fipm bottom y-position.<br>
  Example: "0.0 1.0,0.0 1.0 "{xyz-...}",1.0 2.0 "" 0.25 0.75"<br>
P_TCP_LAYOUT : const char * : layout name<br>
P_EXT:xyz : char * : extension-specific persistent data<br>
P_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).<br>
GUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.<br>
</p>
</div>

<div class="function_definition" id="GetSetProjectAuthor">
	<div class="c_func"><code>void GetSetProjectAuthor(ReaProject* proj, bool set, char* author, int author_sz)</code></div>
	<div class="e_func"><code>GetSetProjectAuthor(<em>ReaProject</em> proj, <em>bool </em>set, #author)</code></div>
	<div class="l_func"><code><em>string </em>author = reaper.GetSetProjectAuthor(<em>ReaProject</em> proj, <em>boolean</em> set, <em>string </em>author)</code></div>
	<div class="p_func"><code>(<em>ReaProject</em> proj, <em>Boolean</em> set, <em>String</em> author, <em>Int</em> author_sz) = RPR_GetSetProjectAuthor(proj, set, author, author_sz)</code></div>
	<p>deprecated, see <a href="#GetSetProjectInfo_String">GetSetProjectInfo_String</a> with desc="PROJECT_AUTHOR"</p>
</div>

<div class="function_definition" id="GetSetProjectGrid">
	<div class="c_func"><code>int GetSetProjectGrid(ReaProject* project, bool set, double* divisionInOutOptional, int* swingmodeInOutOptional, double* swingamtInOutOptional)</code></div>
	<div class="e_func"><code><em>int </em> GetSetProjectGrid(<em>ReaProject</em> project, <em>bool </em>set, <em>optional &amp;</em>division, <em>optional int &amp;</em>swingmode, <em>optional &amp;</em>swingamt)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>optional number </em>division, <em>optional integer </em>swingmode, <em>optional number </em>swingamt = reaper.GetSetProjectGrid(<em>ReaProject</em> project, <em>boolean</em> set, <em>optional number </em>division, <em>optional integer </em>swingmode, <em>optional number </em>swingamt)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>ReaProject</em> project, <em>Boolean</em> set, <em>Float</em> divisionInOutOptional, <em>Int</em> swingmodeInOutOptional, <em>Float</em> swingamtInOutOptional) = RPR_GetSetProjectGrid(project, set, divisionInOutOptional, swingmodeInOutOptional, swingamtInOutOptional)</code></div>
	<p>Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags</p>
</div>

<div class="function_definition" id="GetSetProjectInfo">
	<div class="c_func"><code>double GetSetProjectInfo(ReaProject* project, const char* desc, double value, bool is_set)</code></div>
	<div class="e_func"><code><em>double </em> GetSetProjectInfo(<em>ReaProject</em> project, "desc", value, <em>bool </em>is_set)</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetSetProjectInfo(<em>ReaProject</em> project, <em>string</em> desc, <em>number</em> value, <em>boolean</em> is_set)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetSetProjectInfo(<em>ReaProject</em> project, <em>String</em> desc, <em>Float</em> value, <em>Boolean</em> is_set)</code></div>
	<p>Get or set project information.<br>
RENDER_SETTINGS : &amp;(1|2)=0:master mix, &amp;1=stems+master mix, &amp;2=stems only, &amp;4=multichannel tracks to multichannel files, &amp;8=use render matrix, &amp;16=tracks with only mono media to mono files, &amp;32=selected media items, &amp;64=selected media items via master, &amp;128=selected tracks via master, &amp;256=embed transients if format supports, &amp;512=embed metadata if format supports, &amp;1024=embed take markers if format supports, &amp;2048=2nd pass render<br>
RENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time selection, 3=all project regions, 4=selected media items, 5=selected project regions, 6=all project markers, 7=selected project markers<br>
RENDER_CHANNELS : number of channels in rendered file<br>
RENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)<br>
RENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0<br>
RENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0<br>
RENDER_TAILFLAG : apply render tail setting when rendering: &amp;1=custom time bounds, &amp;2=entire project, &amp;4=time selection, &amp;8=all project markers/regions, &amp;16=selected media items, &amp;32=selected project markers/regions<br>
RENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)<br>
RENDER_ADDTOPROJ : &amp;1=add rendered files to project, &amp;2=do not render files that are likely silent<br>
RENDER_DITHER : &amp;1=dither, &amp;2=noise shaping, &amp;4=dither stems, &amp;8=noise shaping on stems<br>
RENDER_NORMALIZE: &amp;1=enable, (&amp;14==0)=LUFS-I, (&amp;14==2)=RMS, (&amp;14==4)=peak, (&amp;14==6)=true peak, (&amp;14==8)=LUFS-M max, (&amp;14==10)=LUFS-S max, &amp;32=normalize stems to common gain based on master, &amp;64=enable brickwall limit, &amp;128=brickwall limit true peak, &amp;256=only normalize files that are too loud, &amp;512=apply fade-in, &amp;1024=apply fade-out<br>
RENDER_NORMALIZE_TARGET: render normalization target as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc<br>
RENDER_BRICKWALL: render brickwall limit as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc<br>
RENDER_FADEIN: render fade-in (0.001 means 1 ms, requires RENDER_NORMALIZE&amp;512)<br>
RENDER_FADEOUT: render fade-out (0.001 means 1 ms, requires RENDER_NORMALIZE&amp;1024)<br>
RENDER_FADEINSHAPE: render fade-in shape<br>
RENDER_FADEOUTSHAPE: render fade-out shape<br>
PROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)<br>
PROJECT_SRATE_USE : set to 1 if project samplerate is used<br>
</p>
</div>

<div class="function_definition" id="GetSetProjectInfo_String">
	<div class="c_func"><code>bool GetSetProjectInfo_String(ReaProject* project, const char* desc, char* valuestrNeedBig, bool is_set)</code></div>
	<div class="e_func"><code><em>bool </em> GetSetProjectInfo_String(<em>ReaProject</em> project, "desc", #valuestrNeedBig, <em>bool </em>is_set)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>valuestrNeedBig = reaper.GetSetProjectInfo_String(<em>ReaProject</em> project, <em>string</em> desc, <em>string </em>valuestrNeedBig, <em>boolean</em> is_set)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ReaProject</em> project, <em>String</em> desc, <em>String</em> valuestrNeedBig, <em>Boolean</em> is_set) = RPR_GetSetProjectInfo_String(project, desc, valuestrNeedBig, is_set)</code></div>
	<p>Get or set project information.<br>
PROJECT_NAME : project file name (read-only, is_set will be ignored)<br>
PROJECT_TITLE : title field from Project Settings/Notes dialog<br>
PROJECT_AUTHOR : author field from Project Settings/Notes dialog<br>
TRACK_GROUP_NAME:X : track group name, X should be 1..64<br>
MARKER_GUID:X : get the GUID (unique ID) of the marker or region with index X, where X is the index passed to EnumProjectMarkers, not necessarily the displayed number (read-only)<br>
MARKER_INDEX_FROM_GUID:{GUID} : get the GUID index of the marker or region with GUID {GUID} (read-only)<br>
OPENCOPY_CFGIDX : integer for the configuration of format to use when creating copies/applying FX. 0=wave (auto-depth), 1=APPLYFX_FORMAT, 2=RECORD_FORMAT<br>
RECORD_PATH : recording directory -- may be blank or a relative path, to get the effective path see <a href="#GetProjectPathEx">GetProjectPathEx</a>()<br>
RECORD_PATH_SECONDARY : secondary recording directory<br>
RECORD_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type.<br>
APPLYFX_FORMAT : base64-encoded sink configuration (see project files, etc). Used only if RECFMT_OPENCOPY is set to 1. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type.<br>
RENDER_FILE : render directory<br>
RENDER_PATTERN : render file name (may contain wildcards)<br>
RENDER_METADATA : get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: valuestr="ID3:TALB" to get, valuestr="ID3:TALB|my album name" to set. Call with valuestr="" and is_set=false to get a semicolon-separated list of defined project metadata identifiers.<br>
RENDER_TARGETS : semicolon separated list of files that would be written if the project is rendered using the most recent render settings<br>
RENDER_STATS : (read-only) semicolon separated list of statistics for the most recently rendered files. call with valuestr="XXX" to run an action (for example, "42437"=dry run render selected items) before returning statistics.<br>
RENDER_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type.<br>
RENDER_FORMAT2 : base64-encoded secondary sink configuration. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. "evaw" or "l3pm", to use default settings for that sink type, or "" to disable secondary render.<br>
&nbsp;&nbsp;&nbsp;&nbsp;Formats available on this machine:<br>
&nbsp;&nbsp;&nbsp;&nbsp;<code>"wave" "aiff" "caff" "iso " "ddp " "flac" "mp3l" "oggv" "OggS" "FFMP" "WMF " "GIF " "LCF " "wvpk" </code></p>
</div>

<div class="function_definition" id="GetSetProjectNotes">
	<div class="c_func"><code>void GetSetProjectNotes(ReaProject* proj, bool set, char* notesNeedBig, int notesNeedBig_sz)</code></div>
	<div class="e_func"><code>GetSetProjectNotes(<em>ReaProject</em> proj, <em>bool </em>set, #notes)</code></div>
	<div class="l_func"><code><em>string </em>notes = reaper.GetSetProjectNotes(<em>ReaProject</em> proj, <em>boolean</em> set, <em>string </em>notes)</code></div>
	<div class="p_func"><code>(<em>ReaProject</em> proj, <em>Boolean</em> set, <em>String</em> notesNeedBig, <em>Int</em> notesNeedBig_sz) = RPR_GetSetProjectNotes(proj, set, notesNeedBig, notesNeedBig_sz)</code></div>
	<p>gets or sets project notes, notesNeedBig_sz is ignored when setting</p>
</div>

<div class="function_definition" id="GetSetRepeat">
	<div class="c_func"><code>int GetSetRepeat(int val)</code></div>
	<div class="e_func"><code><em>int </em> GetSetRepeat(<em>int </em>val)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetSetRepeat(<em>integer</em> val)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetSetRepeat(<em>Int</em> val)</code></div>
	<p>-1 == query,0=clear,1=set,&gt;1=toggle . returns new value</p>
</div>

<div class="function_definition" id="GetSetRepeatEx">
	<div class="c_func"><code>int GetSetRepeatEx(ReaProject* proj, int val)</code></div>
	<div class="e_func"><code><em>int </em> GetSetRepeatEx(<em>ReaProject</em> proj, <em>int </em>val)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetSetRepeatEx(<em>ReaProject</em> proj, <em>integer</em> val)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetSetRepeatEx(<em>ReaProject</em> proj, <em>Int</em> val)</code></div>
	<p>-1 == query,0=clear,1=set,&gt;1=toggle . returns new value</p>
</div>

<div class="function_definition" id="GetSetTrackGroupMembership">
	<div class="c_func"><code>unsigned int GetSetTrackGroupMembership(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)</code></div>
	<div class="e_func"><code><em>uint </em> GetSetTrackGroupMembership(<em>MediaTrack</em> tr, "groupname", <em>uint </em>setmask, <em>uint </em>setvalue)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetSetTrackGroupMembership(<em>MediaTrack</em> tr, <em>string</em> groupname, <em>integer</em> setmask, <em>integer</em> setvalue)</code></div>
	<div class="p_func"><code><em>Unknown</em>  RPR_GetSetTrackGroupMembership(<em>MediaTrack</em> tr, <em>String</em> groupname, <em>Unknown</em> setmask, <em>Unknown</em> setvalue)</code></div>
	<p>Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:<br>
MEDIA_EDIT_LEAD<br>
MEDIA_EDIT_FOLLOW<br>
VOLUME_LEAD<br>
VOLUME_FOLLOW<br>
VOLUME_VCA_LEAD<br>
VOLUME_VCA_FOLLOW<br>
PAN_LEAD<br>
PAN_FOLLOW<br>
WIDTH_LEAD<br>
WIDTH_FOLLOW<br>
MUTE_LEAD<br>
MUTE_FOLLOW<br>
SOLO_LEAD<br>
SOLO_FOLLOW<br>
RECARM_LEAD<br>
RECARM_FOLLOW<br>
POLARITY_LEAD<br>
POLARITY_FOLLOW<br>
AUTOMODE_LEAD<br>
AUTOMODE_FOLLOW<br>
VOLUME_REVERSE<br>
PAN_REVERSE<br>
WIDTH_REVERSE<br>
NO_LEAD_WHEN_FOLLOW<br>
VOLUME_VCA_FOLLOW_ISPREFX<br>
</p><p>
Note: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).<br>
</p>
</div>

<div class="function_definition" id="GetSetTrackGroupMembershipHigh">
	<div class="c_func"><code>unsigned int GetSetTrackGroupMembershipHigh(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)</code></div>
	<div class="e_func"><code><em>uint </em> GetSetTrackGroupMembershipHigh(<em>MediaTrack</em> tr, "groupname", <em>uint </em>setmask, <em>uint </em>setvalue)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetSetTrackGroupMembershipHigh(<em>MediaTrack</em> tr, <em>string</em> groupname, <em>integer</em> setmask, <em>integer</em> setvalue)</code></div>
	<div class="p_func"><code><em>Unknown</em>  RPR_GetSetTrackGroupMembershipHigh(<em>MediaTrack</em> tr, <em>String</em> groupname, <em>Unknown</em> setmask, <em>Unknown</em> setvalue)</code></div>
	<p>Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:<br>
MEDIA_EDIT_LEAD<br>
MEDIA_EDIT_FOLLOW<br>
VOLUME_LEAD<br>
VOLUME_FOLLOW<br>
VOLUME_VCA_LEAD<br>
VOLUME_VCA_FOLLOW<br>
PAN_LEAD<br>
PAN_FOLLOW<br>
WIDTH_LEAD<br>
WIDTH_FOLLOW<br>
MUTE_LEAD<br>
MUTE_FOLLOW<br>
SOLO_LEAD<br>
SOLO_FOLLOW<br>
RECARM_LEAD<br>
RECARM_FOLLOW<br>
POLARITY_LEAD<br>
POLARITY_FOLLOW<br>
AUTOMODE_LEAD<br>
AUTOMODE_FOLLOW<br>
VOLUME_REVERSE<br>
PAN_REVERSE<br>
WIDTH_REVERSE<br>
NO_LEAD_WHEN_FOLLOW<br>
VOLUME_VCA_FOLLOW_ISPREFX<br>
</p><p>
Note: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).<br>
</p>
</div>

<div class="function_definition" id="GetSetTrackSendInfo_String">
	<div class="c_func"><code>bool GetSetTrackSendInfo_String(MediaTrack* tr, int category, int sendidx, const char* parmname, char* stringNeedBig, bool setNewValue)</code></div>
	<div class="e_func"><code><em>bool </em> GetSetTrackSendInfo_String(<em>MediaTrack</em> tr, <em>int </em>category, <em>int </em>sendidx, "parmname", #stringNeedBig, <em>bool </em>setNewValue)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>stringNeedBig = reaper.GetSetTrackSendInfo_String(<em>MediaTrack</em> tr, <em>integer</em> category, <em>integer</em> sendidx, <em>string</em> parmname, <em>string </em>stringNeedBig, <em>boolean</em> setNewValue)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> tr, <em>Int</em> category, <em>Int</em> sendidx, <em>String</em> parmname, <em>String</em> stringNeedBig, <em>Boolean</em> setNewValue) = RPR_GetSetTrackSendInfo_String(tr, category, sendidx, parmname, stringNeedBig, setNewValue)</code></div>
	<p>Gets/sets a send attribute string:<br>
P_EXT:xyz : char * : extension-specific persistent data<br>
</p>
</div>

<div class="function_definition" id="GetSetTrackState">
	<div class="c_func"><code>bool GetSetTrackState(MediaTrack* track, char* str, int str_sz)</code></div>
	<div class="e_func"><code><em>bool </em> GetSetTrackState(<em>MediaTrack</em> track, #str)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>str = reaper.GetSetTrackState(<em>MediaTrack</em> track, <em>string </em>str)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>String</em> str, <em>Int</em> str_sz) = RPR_GetSetTrackState(track, str, str_sz)</code></div>
	<p>deprecated -- see <a href="#SetTrackStateChunk">SetTrackStateChunk</a>, <a href="#GetTrackStateChunk">GetTrackStateChunk</a></p>
</div>

<div class="function_definition" id="GetSetTrackState2">
	<div class="c_func"><code>bool GetSetTrackState2(MediaTrack* track, char* str, int str_sz, bool isundo)</code></div>
	<div class="e_func"><code><em>bool </em> GetSetTrackState2(<em>MediaTrack</em> track, #str, <em>bool </em>isundo)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>str = reaper.GetSetTrackState2(<em>MediaTrack</em> track, <em>string </em>str, <em>boolean</em> isundo)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>String</em> str, <em>Int</em> str_sz, <em>Boolean</em> isundo) = RPR_GetSetTrackState2(track, str, str_sz, isundo)</code></div>
	<p>deprecated -- see <a href="#SetTrackStateChunk">SetTrackStateChunk</a>, <a href="#GetTrackStateChunk">GetTrackStateChunk</a></p>
</div>

<div class="function_definition" id="GetSubProjectFromSource">
	<div class="c_func"><code>ReaProject* GetSubProjectFromSource(PCM_source* src)</code></div>
	<div class="e_func"><code><em>ReaProject</em>  GetSubProjectFromSource(<em>PCM_source</em> src)</code></div>
	<div class="l_func"><code><em>ReaProject</em> reaper.GetSubProjectFromSource(<em>PCM_source</em> src)</code></div>
	<div class="p_func"><code><em>ReaProject</em>  RPR_GetSubProjectFromSource(<em>PCM_source</em> src)</code></div>
</div>

<div class="function_definition" id="GetTake">
	<div class="c_func"><code>MediaItem_Take* GetTake(MediaItem* item, int takeidx)</code></div>
	<div class="e_func"><code><em>MediaItem_Take</em>  GetTake(<em>MediaItem</em> item, <em>int </em>takeidx)</code></div>
	<div class="l_func"><code><em>MediaItem_Take</em> reaper.GetTake(<em>MediaItem</em> item, <em>integer</em> takeidx)</code></div>
	<div class="p_func"><code><em>MediaItem_Take</em>  RPR_GetTake(<em>MediaItem</em> item, <em>Int</em> takeidx)</code></div>
	<p>get a take from an item by take count (zero-based)</p>
</div>

<div class="function_definition" id="GetTakeEnvelope">
	<div class="c_func"><code>TrackEnvelope* GetTakeEnvelope(MediaItem_Take* take, int envidx)</code></div>
	<div class="e_func"><code><em>TrackEnvelope</em>  GetTakeEnvelope(<em>MediaItem_Take</em> take, <em>int </em>envidx)</code></div>
	<div class="l_func"><code><em>TrackEnvelope</em> reaper.GetTakeEnvelope(<em>MediaItem_Take</em> take, <em>integer</em> envidx)</code></div>
	<div class="p_func"><code><em>TrackEnvelope</em>  RPR_GetTakeEnvelope(<em>MediaItem_Take</em> take, <em>Int</em> envidx)</code></div>
</div>

<div class="function_definition" id="GetTakeEnvelopeByName">
	<div class="c_func"><code>TrackEnvelope* GetTakeEnvelopeByName(MediaItem_Take* take, const char* envname)</code></div>
	<div class="e_func"><code><em>TrackEnvelope</em>  GetTakeEnvelopeByName(<em>MediaItem_Take</em> take, "envname")</code></div>
	<div class="l_func"><code><em>TrackEnvelope</em> reaper.GetTakeEnvelopeByName(<em>MediaItem_Take</em> take, <em>string</em> envname)</code></div>
	<div class="p_func"><code><em>TrackEnvelope</em>  RPR_GetTakeEnvelopeByName(<em>MediaItem_Take</em> take, <em>String</em> envname)</code></div>
</div>

<div class="function_definition" id="GetTakeMarker">
	<div class="c_func"><code>double GetTakeMarker(MediaItem_Take* take, int idx, char* nameOut, int nameOut_sz, int* colorOutOptional)</code></div>
	<div class="e_func"><code><em>double </em> GetTakeMarker(<em>MediaItem_Take</em> take, <em>int </em>idx, #name, <em>optional int &amp;</em>color)</code></div>
	<div class="l_func"><code><em>number</em> retval, <em>string </em>name, <em>optional integer </em>color = reaper.GetTakeMarker(<em>MediaItem_Take</em> take, <em>integer</em> idx)</code></div>
	<div class="p_func"><code>(<em>Float</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> idx, <em>String</em> nameOut, <em>Int</em> nameOut_sz, <em>Int</em> colorOutOptional) = RPR_GetTakeMarker(take, idx, nameOut, nameOut_sz, colorOutOptional)</code></div>
	<p>Get information about a take marker. Returns the position in media item source time, or -1 if the take marker does not exist. See <a href="#GetNumTakeMarkers">GetNumTakeMarkers</a>, <a href="#SetTakeMarker">SetTakeMarker</a>, <a href="#DeleteTakeMarker">DeleteTakeMarker</a></p>
</div>

<div class="function_definition" id="GetTakeName">
	<div class="c_func"><code>const char* GetTakeName(MediaItem_Take* take)</code></div>
	<div class="e_func"><code>bool  GetTakeName(#retval, <em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code><em>string</em> reaper.GetTakeName(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_GetTakeName(<em>MediaItem_Take</em> take)</code></div>
	<p>returns NULL if the take is not valid</p>
</div>

<div class="function_definition" id="GetTakeNumStretchMarkers">
	<div class="c_func"><code>int GetTakeNumStretchMarkers(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>int </em> GetTakeNumStretchMarkers(<em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetTakeNumStretchMarkers(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetTakeNumStretchMarkers(<em>MediaItem_Take</em> take)</code></div>
	<p>Returns number of stretch markers in take</p>
</div>

<div class="function_definition" id="GetTakeStretchMarker">
	<div class="c_func"><code>int GetTakeStretchMarker(MediaItem_Take* take, int idx, double* posOut, double* srcposOutOptional)</code></div>
	<div class="e_func"><code><em>int </em> GetTakeStretchMarker(<em>MediaItem_Take</em> take, <em>int </em>idx, <em>&amp;</em>pos, <em>optional &amp;</em>srcpos)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>number </em>pos, <em>optional number </em>srcpos = reaper.GetTakeStretchMarker(<em>MediaItem_Take</em> take, <em>integer</em> idx)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> idx, <em>Float</em> posOut, <em>Float</em> srcposOutOptional) = RPR_GetTakeStretchMarker(take, idx, posOut, srcposOutOptional)</code></div>
	<p>Gets information on a stretch marker, idx is 0..n. Returns -1 if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, the following marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated.</p>
</div>

<div class="function_definition" id="GetTakeStretchMarkerSlope">
	<div class="c_func"><code>double GetTakeStretchMarkerSlope(MediaItem_Take* take, int idx)</code></div>
	<div class="e_func"><code><em>double </em> GetTakeStretchMarkerSlope(<em>MediaItem_Take</em> take, <em>int </em>idx)</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetTakeStretchMarkerSlope(<em>MediaItem_Take</em> take, <em>integer</em> idx)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetTakeStretchMarkerSlope(<em>MediaItem_Take</em> take, <em>Int</em> idx)</code></div>
	<p>See <a href="#SetTakeStretchMarkerSlope">SetTakeStretchMarkerSlope</a></p>
</div>

<div class="function_definition" id="GetTCPFXParm">
	<div class="c_func"><code>bool GetTCPFXParm(ReaProject* project, MediaTrack* track, int index, int* fxindexOut, int* parmidxOut)</code></div>
	<div class="e_func"><code><em>bool </em> GetTCPFXParm(<em>ReaProject</em> project, <em>MediaTrack</em> track, <em>int </em>index, <em>int &amp;</em>fxindex, <em>int &amp;</em>parmidx)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>fxindex, <em>integer </em>parmidx = reaper.GetTCPFXParm(<em>ReaProject</em> project, <em>MediaTrack</em> track, <em>integer</em> index)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ReaProject</em> project, <em>MediaTrack</em> track, <em>Int</em> index, <em>Int</em> fxindexOut, <em>Int</em> parmidxOut) = RPR_GetTCPFXParm(project, track, index, fxindexOut, parmidxOut)</code></div>
	<p>Get information about a specific FX parameter knob (see <a href="#CountTCPFXParms">CountTCPFXParms</a>).</p>
</div>

<div class="function_definition" id="GetTempoMatchPlayRate">
	<div class="c_func"><code>bool GetTempoMatchPlayRate(PCM_source* source, double srcscale, double position, double mult, double* rateOut, double* targetlenOut)</code></div>
	<div class="e_func"><code><em>bool </em> GetTempoMatchPlayRate(<em>PCM_source</em> source, srcscale, position, mult, <em>&amp;</em>rate, <em>&amp;</em>targetlen)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>rate, <em>number </em>targetlen = reaper.GetTempoMatchPlayRate(<em>PCM_source</em> source, <em>number</em> srcscale, <em>number</em> position, <em>number</em> mult)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>PCM_source</em> source, <em>Float</em> srcscale, <em>Float</em> position, <em>Float</em> mult, <em>Float</em> rateOut, <em>Float</em> targetlenOut) = RPR_GetTempoMatchPlayRate(source, srcscale, position, mult, rateOut, targetlenOut)</code></div>
	<p>finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256</p>
</div>

<div class="function_definition" id="GetTempoTimeSigMarker">
	<div class="c_func"><code>bool GetTempoTimeSigMarker(ReaProject* proj, int ptidx, double* timeposOut, int* measureposOut, double* beatposOut, double* bpmOut, int* timesig_numOut, int* timesig_denomOut, bool* lineartempoOut)</code></div>
	<div class="e_func"><code><em>bool </em> GetTempoTimeSigMarker(<em>ReaProject</em> proj, <em>int </em>ptidx, <em>&amp;</em>timepos, <em>int &amp;</em>measurepos, <em>&amp;</em>beatpos, <em>&amp;</em>bpm, <em>int &amp;</em>timesig_num, <em>int &amp;</em>timesig_denom, <em>bool &amp;</em>lineartempo)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>timepos, <em>integer </em>measurepos, <em>number </em>beatpos, <em>number </em>bpm, <em>integer </em>timesig_num, <em>integer </em>timesig_denom, <em>boolean </em>lineartempo = reaper.GetTempoTimeSigMarker(<em>ReaProject</em> proj, <em>integer</em> ptidx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ReaProject</em> proj, <em>Int</em> ptidx, <em>Float</em> timeposOut, <em>Int</em> measureposOut, <em>Float</em> beatposOut, <em>Float</em> bpmOut, <em>Int</em> timesig_numOut, <em>Int</em> timesig_denomOut, <em>Boolean</em> lineartempoOut) = RPR_GetTempoTimeSigMarker(proj, ptidx, timeposOut, measureposOut, beatposOut, bpmOut, timesig_numOut, timesig_denomOut, lineartempoOut)</code></div>
	<p>Get information about a tempo/time signature marker. See <a href="#CountTempoTimeSigMarkers">CountTempoTimeSigMarkers</a>, <a href="#SetTempoTimeSigMarker">SetTempoTimeSigMarker</a>, <a href="#AddTempoTimeSigMarker">AddTempoTimeSigMarker</a>.</p>
</div>

<div class="function_definition" id="GetThemeColor">
	<div class="c_func"><code>int GetThemeColor(const char* ini_key, int flagsOptional)</code></div>
	<div class="e_func"><code><em>int </em> GetThemeColor("ini_key", <em>int </em>flags)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetThemeColor(<em>string</em> ini_key, <em>integer</em> flags)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetThemeColor(<em>String</em> ini_key, <em>Int</em> flagsOptional)</code></div>
	<p>Returns the theme color specified, or -1 on failure. If the low bit of flags is set, the color as originally specified by the theme (before any transformations) is returned, otherwise the current (possibly transformed and modified) color is returned. See <a href="#SetThemeColor">SetThemeColor</a> for a list of valid ini_key.</p>
</div>

<div class="function_definition" id="GetThingFromPoint">
	<div class="c_func"><code>MediaTrack* GetThingFromPoint(int screen_x, int screen_y, char* infoOut, int infoOut_sz)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  GetThingFromPoint(<em>int </em>screen_x, <em>int </em>screen_y, #info)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> retval, <em>string </em>info = reaper.GetThingFromPoint(<em>integer</em> screen_x, <em>integer</em> screen_y)</code></div>
	<div class="p_func"><code>(<em>MediaTrack</em> retval, <em>Int</em> screen_x, <em>Int</em> screen_y, <em>String</em> infoOut, <em>Int</em> infoOut_sz) = RPR_GetThingFromPoint(screen_x, screen_y, infoOut, infoOut_sz)</code></div>
	<p>Hit tests a point in screen coordinates. Updates infoOut with information such as "arrange", "fx_chain", "fx_0" (first FX in chain, floating). If a track panel is hit, string will begin with "tcp" or "mcp" or "tcp.mute" etc (future versions may append additional information). May return NULL with valid info string to indicate non-track thing.</p>
</div>

<div class="function_definition" id="GetToggleCommandState">
	<div class="c_func"><code>int GetToggleCommandState(int command_id)</code></div>
	<div class="e_func"><code><em>int </em> GetToggleCommandState(<em>int </em>command_id)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetToggleCommandState(<em>integer</em> command_id)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetToggleCommandState(<em>Int</em> command_id)</code></div>
	<p>See <a href="#GetToggleCommandStateEx">GetToggleCommandStateEx</a>.</p>
</div>

<div class="function_definition" id="GetToggleCommandStateEx">
	<div class="c_func"><code>int GetToggleCommandStateEx(int section_id, int command_id)</code></div>
	<div class="e_func"><code><em>int </em> GetToggleCommandStateEx(<em>int </em>section_id, <em>int </em>command_id)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetToggleCommandStateEx(<em>integer</em> section_id, <em>integer</em> command_id)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetToggleCommandStateEx(<em>Int</em> section_id, <em>Int</em> command_id)</code></div>
	<p>For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned.</p>
</div>

<div class="function_definition" id="GetTooltipWindow">
	<div class="c_func"><code>HWND GetTooltipWindow()</code></div>
	<div class="e_func"><code><em>HWND</em>  GetTooltipWindow()</code></div>
	<div class="l_func"><code><em>HWND</em> reaper.GetTooltipWindow()</code></div>
	<div class="p_func"><code><em>HWND</em>  RPR_GetTooltipWindow()</code></div>
	<p>gets a tooltip window,in case you want to ask it for font information. Can return NULL.</p>
</div>

<div class="function_definition" id="GetTrack">
	<div class="c_func"><code>MediaTrack* GetTrack(ReaProject* proj, int trackidx)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  GetTrack(<em>ReaProject</em> proj, <em>int </em>trackidx)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.GetTrack(<em>ReaProject</em> proj, <em>integer</em> trackidx)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  RPR_GetTrack(<em>ReaProject</em> proj, <em>Int</em> trackidx)</code></div>
	<p>get a track from a project by track count (zero-based) (proj=0 for active project)</p>
</div>

<div class="function_definition" id="GetTrackAutomationMode">
	<div class="c_func"><code>int GetTrackAutomationMode(MediaTrack* tr)</code></div>
	<div class="e_func"><code><em>int </em> GetTrackAutomationMode(<em>MediaTrack</em> tr)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetTrackAutomationMode(<em>MediaTrack</em> tr)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetTrackAutomationMode(<em>MediaTrack</em> tr)</code></div>
	<p>return the track mode, regardless of global override</p>
</div>

<div class="function_definition" id="GetTrackColor">
	<div class="c_func"><code>int GetTrackColor(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>int </em> GetTrackColor(<em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetTrackColor(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetTrackColor(<em>MediaTrack</em> track)</code></div>
	<p>Returns the track custom color as OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). Black is returned as 0x1000000, no color setting is returned as 0.</p>
</div>

<div class="function_definition" id="GetTrackDepth">
	<div class="c_func"><code>int GetTrackDepth(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>int </em> GetTrackDepth(<em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetTrackDepth(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetTrackDepth(<em>MediaTrack</em> track)</code></div>
</div>

<div class="function_definition" id="GetTrackEnvelope">
	<div class="c_func"><code>TrackEnvelope* GetTrackEnvelope(MediaTrack* track, int envidx)</code></div>
	<div class="e_func"><code><em>TrackEnvelope</em>  GetTrackEnvelope(<em>MediaTrack</em> track, <em>int </em>envidx)</code></div>
	<div class="l_func"><code><em>TrackEnvelope</em> reaper.GetTrackEnvelope(<em>MediaTrack</em> track, <em>integer</em> envidx)</code></div>
	<div class="p_func"><code><em>TrackEnvelope</em>  RPR_GetTrackEnvelope(<em>MediaTrack</em> track, <em>Int</em> envidx)</code></div>
</div>

<div class="function_definition" id="GetTrackEnvelopeByChunkName">
	<div class="c_func"><code>TrackEnvelope* GetTrackEnvelopeByChunkName(MediaTrack* tr, const char* cfgchunkname_or_guid)</code></div>
	<div class="e_func"><code><em>TrackEnvelope</em>  GetTrackEnvelopeByChunkName(<em>MediaTrack</em> tr, "cfgchunkname_or_guid")</code></div>
	<div class="l_func"><code><em>TrackEnvelope</em> reaper.GetTrackEnvelopeByChunkName(<em>MediaTrack</em> tr, <em>string</em> cfgchunkname_or_guid)</code></div>
	<div class="p_func"><code><em>TrackEnvelope</em>  RPR_GetTrackEnvelopeByChunkName(<em>MediaTrack</em> tr, <em>String</em> cfgchunkname_or_guid)</code></div>
	<p>Gets a built-in track envelope by configuration chunk name, like "&lt;VOLENV", or GUID string, like "{B577250D-146F-B544-9B34-F24FBE488F1F}".<br>
</p>
</div>

<div class="function_definition" id="GetTrackEnvelopeByName">
	<div class="c_func"><code>TrackEnvelope* GetTrackEnvelopeByName(MediaTrack* track, const char* envname)</code></div>
	<div class="e_func"><code><em>TrackEnvelope</em>  GetTrackEnvelopeByName(<em>MediaTrack</em> track, "envname")</code></div>
	<div class="l_func"><code><em>TrackEnvelope</em> reaper.GetTrackEnvelopeByName(<em>MediaTrack</em> track, <em>string</em> envname)</code></div>
	<div class="p_func"><code><em>TrackEnvelope</em>  RPR_GetTrackEnvelopeByName(<em>MediaTrack</em> track, <em>String</em> envname)</code></div>
</div>

<div class="function_definition" id="GetTrackFromPoint">
	<div class="c_func"><code>MediaTrack* GetTrackFromPoint(int screen_x, int screen_y, int* infoOutOptional)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  GetTrackFromPoint(<em>int </em>screen_x, <em>int </em>screen_y, <em>optional int &amp;</em>info)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> retval, <em>optional integer </em>info = reaper.GetTrackFromPoint(<em>integer</em> screen_x, <em>integer</em> screen_y)</code></div>
	<div class="p_func"><code>(<em>MediaTrack</em> retval, <em>Int</em> screen_x, <em>Int</em> screen_y, <em>Int</em> infoOutOptional) = RPR_GetTrackFromPoint(screen_x, screen_y, infoOutOptional)</code></div>
	<p>Returns the track from the screen coordinates specified. If the screen coordinates refer to a window associated to the track (such as FX), the track will be returned. infoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely a track FX. See <a href="#GetThingFromPoint">GetThingFromPoint</a>.</p>
</div>

<div class="function_definition" id="GetTrackGUID">
	<div class="c_func"><code>GUID* GetTrackGUID(MediaTrack* tr)</code></div>
	<div class="e_func"><code>bool  GetTrackGUID(#retguid, <em>MediaTrack</em> tr)</code></div>
	<div class="l_func"><code><em>string</em> GUID = reaper.GetTrackGUID(<em>MediaTrack</em> tr)</code></div>
	<div class="p_func"><code><em>GUID</em>  RPR_GetTrackGUID(<em>MediaTrack</em> tr)</code></div>
</div>

<div class="function_definition" id="GetTrackMediaItem">
	<div class="c_func"><code>MediaItem* GetTrackMediaItem(MediaTrack* tr, int itemidx)</code></div>
	<div class="e_func"><code><em>MediaItem</em>  GetTrackMediaItem(<em>MediaTrack</em> tr, <em>int </em>itemidx)</code></div>
	<div class="l_func"><code><em>MediaItem</em> reaper.GetTrackMediaItem(<em>MediaTrack</em> tr, <em>integer</em> itemidx)</code></div>
	<div class="p_func"><code><em>MediaItem</em>  RPR_GetTrackMediaItem(<em>MediaTrack</em> tr, <em>Int</em> itemidx)</code></div>
</div>

<div class="function_definition" id="GetTrackMIDILyrics">
	<div class="c_func"><code>bool GetTrackMIDILyrics(MediaTrack* track, int flag, char* bufOutWantNeedBig, int* bufOutWantNeedBig_sz)</code></div>
	<div class="e_func"><code><em>bool </em> GetTrackMIDILyrics(<em>MediaTrack</em> track, <em>int </em>flag, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.GetTrackMIDILyrics(<em>MediaTrack</em> track, <em>integer</em> flag)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> flag, <em>String</em> bufOutWantNeedBig, <em>Int</em> bufOutWantNeedBig_sz) = RPR_GetTrackMIDILyrics(track, flag, bufOutWantNeedBig, bufOutWantNeedBig_sz)</code></div>
	<p>Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&amp;1: double tabs at the end of each measure and triple tabs when skipping measures, flag&amp;2: each lyric is preceded by its beat position in the project (example with flag=2: "1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1	"). See <a href="#SetTrackMIDILyrics">SetTrackMIDILyrics</a></p>
</div>

<div class="function_definition" id="GetTrackMIDINoteName">
	<div class="c_func"><code>const char* GetTrackMIDINoteName(int track, int pitch, int chan)</code></div>
	<div class="e_func"><code>bool  GetTrackMIDINoteName(#retval, <em>int </em>track, <em>int </em>pitch, <em>int </em>chan)</code></div>
	<div class="l_func"><code><em>string</em> reaper.GetTrackMIDINoteName(<em>integer</em> track, <em>integer</em> pitch, <em>integer</em> chan)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_GetTrackMIDINoteName(<em>Int</em> track, <em>Int</em> pitch, <em>Int</em> chan)</code></div>
	<p>see <a href="#GetTrackMIDINoteNameEx">GetTrackMIDINoteNameEx</a></p>
</div>

<div class="function_definition" id="GetTrackMIDINoteNameEx">
	<div class="c_func"><code>const char* GetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan)</code></div>
	<div class="e_func"><code>bool  GetTrackMIDINoteNameEx(#retval, <em>ReaProject</em> proj, <em>MediaTrack</em> track, <em>int </em>pitch, <em>int </em>chan)</code></div>
	<div class="l_func"><code><em>string</em> reaper.GetTrackMIDINoteNameEx(<em>ReaProject</em> proj, <em>MediaTrack</em> track, <em>integer</em> pitch, <em>integer</em> chan)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_GetTrackMIDINoteNameEx(<em>ReaProject</em> proj, <em>MediaTrack</em> track, <em>Int</em> pitch, <em>Int</em> chan)</code></div>
	<p>Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See <a href="#SetTrackMIDINoteNameEx">SetTrackMIDINoteNameEx</a></p>
</div>

<div class="function_definition" id="GetTrackMIDINoteRange">
	<div class="c_func"><code>void GetTrackMIDINoteRange(ReaProject* proj, MediaTrack* track, int* note_loOut, int* note_hiOut)</code></div>
	<div class="e_func"><code>GetTrackMIDINoteRange(<em>ReaProject</em> proj, <em>MediaTrack</em> track, <em>int &amp;</em>note_lo, <em>int &amp;</em>note_hi)</code></div>
	<div class="l_func"><code><em>integer </em>note_lo, <em>integer </em>note_hi = reaper.GetTrackMIDINoteRange(<em>ReaProject</em> proj, <em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code>(<em>ReaProject</em> proj, <em>MediaTrack</em> track, <em>Int</em> note_loOut, <em>Int</em> note_hiOut) = RPR_GetTrackMIDINoteRange(proj, track, note_loOut, note_hiOut)</code></div>
</div>

<div class="function_definition" id="GetTrackName">
	<div class="c_func"><code>bool GetTrackName(MediaTrack* track, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> GetTrackName(<em>MediaTrack</em> track, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.GetTrackName(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_GetTrackName(track, bufOut, bufOut_sz)</code></div>
	<p>Returns "MASTER" for master track, "Track N" if track has no name.</p>
</div>

<div class="function_definition" id="GetTrackNumMediaItems">
	<div class="c_func"><code>int GetTrackNumMediaItems(MediaTrack* tr)</code></div>
	<div class="e_func"><code><em>int </em> GetTrackNumMediaItems(<em>MediaTrack</em> tr)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetTrackNumMediaItems(<em>MediaTrack</em> tr)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetTrackNumMediaItems(<em>MediaTrack</em> tr)</code></div>
</div>

<div class="function_definition" id="GetTrackNumSends">
	<div class="c_func"><code>int GetTrackNumSends(MediaTrack* tr, int category)</code></div>
	<div class="e_func"><code><em>int </em> GetTrackNumSends(<em>MediaTrack</em> tr, <em>int </em>category)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GetTrackNumSends(<em>MediaTrack</em> tr, <em>integer</em> category)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GetTrackNumSends(<em>MediaTrack</em> tr, <em>Int</em> category)</code></div>
	<p>returns number of sends/receives/hardware outputs - category is &lt;0 for receives, 0=sends, &gt;0 for hardware outputs</p>
</div>

<div class="function_definition" id="GetTrackReceiveName">
	<div class="c_func"><code>bool GetTrackReceiveName(MediaTrack* track, int recv_index, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> GetTrackReceiveName(<em>MediaTrack</em> track, <em>int </em>recv_index, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.GetTrackReceiveName(<em>MediaTrack</em> track, <em>integer</em> recv_index)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> recv_index, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_GetTrackReceiveName(track, recv_index, bufOut, bufOut_sz)</code></div>
	<p>See <a href="#GetTrackSendName">GetTrackSendName</a>.</p>
</div>

<div class="function_definition" id="GetTrackReceiveUIMute">
	<div class="c_func"><code>bool GetTrackReceiveUIMute(MediaTrack* track, int recv_index, bool* muteOut)</code></div>
	<div class="e_func"><code><em>bool </em> GetTrackReceiveUIMute(<em>MediaTrack</em> track, <em>int </em>recv_index, <em>bool &amp;</em>mute)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>mute = reaper.GetTrackReceiveUIMute(<em>MediaTrack</em> track, <em>integer</em> recv_index)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> recv_index, <em>Boolean</em> muteOut) = RPR_GetTrackReceiveUIMute(track, recv_index, muteOut)</code></div>
	<p>See <a href="#GetTrackSendUIMute">GetTrackSendUIMute</a>.</p>
</div>

<div class="function_definition" id="GetTrackReceiveUIVolPan">
	<div class="c_func"><code>bool GetTrackReceiveUIVolPan(MediaTrack* track, int recv_index, double* volumeOut, double* panOut)</code></div>
	<div class="e_func"><code><em>bool </em> GetTrackReceiveUIVolPan(<em>MediaTrack</em> track, <em>int </em>recv_index, <em>&amp;</em>volume, <em>&amp;</em>pan)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>volume, <em>number </em>pan = reaper.GetTrackReceiveUIVolPan(<em>MediaTrack</em> track, <em>integer</em> recv_index)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> recv_index, <em>Float</em> volumeOut, <em>Float</em> panOut) = RPR_GetTrackReceiveUIVolPan(track, recv_index, volumeOut, panOut)</code></div>
	<p>See <a href="#GetTrackSendUIVolPan">GetTrackSendUIVolPan</a>.</p>
</div>

<div class="function_definition" id="GetTrackSendInfo_Value">
	<div class="c_func"><code>double GetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname)</code></div>
	<div class="e_func"><code><em>double </em> GetTrackSendInfo_Value(<em>MediaTrack</em> tr, <em>int </em>category, <em>int </em>sendidx, "parmname")</code></div>
	<div class="l_func"><code><em>number</em> reaper.GetTrackSendInfo_Value(<em>MediaTrack</em> tr, <em>integer</em> category, <em>integer</em> sendidx, <em>string</em> parmname)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_GetTrackSendInfo_Value(<em>MediaTrack</em> tr, <em>Int</em> category, <em>Int</em> sendidx, <em>String</em> parmname)</code></div>
	<p>Get send/receive/hardware output numerical-value attributes.<br>
category is &lt;0 for receives, 0=sends, &gt;0 for hardware outputs<br>
parameter names:<br>
B_MUTE : bool *<br>
B_PHASE : bool * : true to flip phase<br>
B_MONO : bool *<br>
D_VOL : double * : 1.0 = +0dB etc<br>
D_PAN : double * : -1..+1<br>
D_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc<br>
I_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx<br>
I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)<br>
I_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan&gt;&gt;10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.<br>
I_DSTCHAN : int * : low 10 bits are destination index, &amp;1024 set to mix to mono.<br>
I_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan<br>
P_DESTTRACK : MediaTrack * : destination track, only applies for sends/recvs (read-only)<br>
P_SRCTRACK : MediaTrack * : source track, only applies for sends/recvs (read-only)<br>
P_ENV:&lt;envchunkname : TrackEnvelope * : call with :&lt;VOLENV, :&lt;PANENV, etc appended (read-only)<br>
See <a href="#CreateTrackSend">CreateTrackSend</a>, <a href="#RemoveTrackSend">RemoveTrackSend</a>, <a href="#GetTrackNumSends">GetTrackNumSends</a>.</p>
</div>

<div class="function_definition" id="GetTrackSendName">
	<div class="c_func"><code>bool GetTrackSendName(MediaTrack* track, int send_index, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> GetTrackSendName(<em>MediaTrack</em> track, <em>int </em>send_index, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.GetTrackSendName(<em>MediaTrack</em> track, <em>integer</em> send_index)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> send_index, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_GetTrackSendName(track, send_index, bufOut, bufOut_sz)</code></div>
	<p>send_idx&gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends. See <a href="#GetTrackReceiveName">GetTrackReceiveName</a>.</p>
</div>

<div class="function_definition" id="GetTrackSendUIMute">
	<div class="c_func"><code>bool GetTrackSendUIMute(MediaTrack* track, int send_index, bool* muteOut)</code></div>
	<div class="e_func"><code><em>bool </em> GetTrackSendUIMute(<em>MediaTrack</em> track, <em>int </em>send_index, <em>bool &amp;</em>mute)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>mute = reaper.GetTrackSendUIMute(<em>MediaTrack</em> track, <em>integer</em> send_index)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> send_index, <em>Boolean</em> muteOut) = RPR_GetTrackSendUIMute(track, send_index, muteOut)</code></div>
	<p>send_idx&gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends. See <a href="#GetTrackReceiveUIMute">GetTrackReceiveUIMute</a>.</p>
</div>

<div class="function_definition" id="GetTrackSendUIVolPan">
	<div class="c_func"><code>bool GetTrackSendUIVolPan(MediaTrack* track, int send_index, double* volumeOut, double* panOut)</code></div>
	<div class="e_func"><code><em>bool </em> GetTrackSendUIVolPan(<em>MediaTrack</em> track, <em>int </em>send_index, <em>&amp;</em>volume, <em>&amp;</em>pan)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>volume, <em>number </em>pan = reaper.GetTrackSendUIVolPan(<em>MediaTrack</em> track, <em>integer</em> send_index)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> send_index, <em>Float</em> volumeOut, <em>Float</em> panOut) = RPR_GetTrackSendUIVolPan(track, send_index, volumeOut, panOut)</code></div>
	<p>send_idx&gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends. See <a href="#GetTrackReceiveUIVolPan">GetTrackReceiveUIVolPan</a>.</p>
</div>

<div class="function_definition" id="GetTrackState">
	<div class="c_func"><code>const char* GetTrackState(MediaTrack* track, int* flagsOut)</code></div>
	<div class="e_func"><code>bool  GetTrackState(#retval, <em>MediaTrack</em> track, <em>int &amp;</em>flags)</code></div>
	<div class="l_func"><code><em>string</em> retval, <em>integer </em>flags = reaper.GetTrackState(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code>(<em>String</em> retval, <em>MediaTrack</em> track, <em>Int</em> flagsOut) = RPR_GetTrackState(track, flagsOut)</code></div>
	<p>Gets track state, returns track name.<br>
flags will be set to:<br>
&amp;1=folder<br>
&amp;2=selected<br>
&amp;4=has fx enabled<br>
&amp;8=muted<br>
&amp;16=soloed<br>
&amp;32=SIP'd (with &amp;16)<br>
&amp;64=rec armed<br>
&amp;128=rec monitoring on<br>
&amp;256=rec monitoring auto<br>
&amp;512=hide from TCP<br>
&amp;1024=hide from MCP</p>
</div>

<div class="function_definition" id="GetTrackStateChunk">
	<div class="c_func"><code>bool GetTrackStateChunk(MediaTrack* track, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</code></div>
	<div class="e_func"><code><em>bool </em> GetTrackStateChunk(<em>MediaTrack</em> track, #str, <em>bool </em>isundo)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>str = reaper.GetTrackStateChunk(<em>MediaTrack</em> track, <em>string </em>str, <em>boolean</em> isundo)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>String</em> strNeedBig, <em>Int</em> strNeedBig_sz, <em>Boolean</em> isundoOptional) = RPR_GetTrackStateChunk(track, strNeedBig, strNeedBig_sz, isundoOptional)</code></div>
	<p>Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.</p>
</div>

<div class="function_definition" id="GetTrackUIMute">
	<div class="c_func"><code>bool GetTrackUIMute(MediaTrack* track, bool* muteOut)</code></div>
	<div class="e_func"><code><em>bool </em> GetTrackUIMute(<em>MediaTrack</em> track, <em>bool &amp;</em>mute)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>mute = reaper.GetTrackUIMute(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Boolean</em> muteOut) = RPR_GetTrackUIMute(track, muteOut)</code></div>
</div>

<div class="function_definition" id="GetTrackUIPan">
	<div class="c_func"><code>bool GetTrackUIPan(MediaTrack* track, double* pan1Out, double* pan2Out, int* panmodeOut)</code></div>
	<div class="e_func"><code><em>bool </em> GetTrackUIPan(<em>MediaTrack</em> track, <em>&amp;</em>pan1, <em>&amp;</em>pan2, <em>int &amp;</em>panmode)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>pan1, <em>number </em>pan2, <em>integer </em>panmode = reaper.GetTrackUIPan(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Float</em> pan1Out, <em>Float</em> pan2Out, <em>Int</em> panmodeOut) = RPR_GetTrackUIPan(track, pan1Out, pan2Out, panmodeOut)</code></div>
</div>

<div class="function_definition" id="GetTrackUIVolPan">
	<div class="c_func"><code>bool GetTrackUIVolPan(MediaTrack* track, double* volumeOut, double* panOut)</code></div>
	<div class="e_func"><code><em>bool </em> GetTrackUIVolPan(<em>MediaTrack</em> track, <em>&amp;</em>volume, <em>&amp;</em>pan)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>volume, <em>number </em>pan = reaper.GetTrackUIVolPan(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Float</em> volumeOut, <em>Float</em> panOut) = RPR_GetTrackUIVolPan(track, volumeOut, panOut)</code></div>
</div>

<div class="function_definition" id="GetUnderrunTime">
	<div class="c_func"><code>void GetUnderrunTime(unsigned int* audio_xrunOut, unsigned int* media_xrunOut, unsigned int* curtimeOut)</code></div>
	<div class="e_func"><code>GetUnderrunTime(<em>unsigned int &amp;</em>audio_xrun, <em>unsigned int &amp;</em>media_xrun, <em>unsigned int &amp;</em>curtime)</code></div>
	<div class="l_func"><code><em>integer </em>audio_xrun, <em>integer </em>media_xrun, <em>integer </em>curtime = reaper.GetUnderrunTime()</code></div>
	<div class="p_func"><code>RPR_GetUnderrunTime(<em>unsigned int</em> audio_xrunOut, <em>unsigned int</em> media_xrunOut, <em>unsigned int</em> curtimeOut)</code></div>
	<p>retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)</p>
</div>

<div class="function_definition" id="GetUserFileNameForRead">
	<div class="c_func"><code>bool GetUserFileNameForRead(char* filenameNeed4096, const char* title, const char* defext)</code></div>
	<div class="e_func"><code><em>bool </em> GetUserFileNameForRead(#filenameNeed4096, "title", "defext")</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>filenameNeed4096 = reaper.GetUserFileNameForRead(<em>string </em>filenameNeed4096, <em>string</em> title, <em>string</em> defext)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> filenameNeed4096, <em>String</em> title, <em>String</em> defext) = RPR_GetUserFileNameForRead(filenameNeed4096, title, defext)</code></div>
	<p>returns true if the user selected a valid file, false if the user canceled the dialog</p>
</div>

<div class="function_definition" id="GetUserInputs">
	<div class="c_func"><code>bool GetUserInputs(const char* title, int num_inputs, const char* captions_csv, char* retvals_csv, int retvals_csv_sz)</code></div>
	<div class="e_func"><code><em>bool </em> GetUserInputs("title", <em>int </em>num_inputs, "captions_csv", #retvals_csv)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>retvals_csv = reaper.GetUserInputs(<em>string</em> title, <em>integer</em> num_inputs, <em>string</em> captions_csv, <em>string </em>retvals_csv)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> title, <em>Int</em> num_inputs, <em>String</em> captions_csv, <em>String</em> retvals_csv, <em>Int</em> retvals_csv_sz) = RPR_GetUserInputs(title, num_inputs, captions_csv, retvals_csv, retvals_csv_sz)</code></div>
	<p>Get values from the user.<br>
If a caption begins with *, for example "*password", the edit field will not display the input text.<br>
Maximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. You can supply special extra information via additional caption fields: extrawidth=XXX to increase text field width, separator=X to use a different separator for returned fields.</p>
</div>

<div class="function_definition" id="GoToMarker">
	<div class="c_func"><code>void GoToMarker(ReaProject* proj, int marker_index, bool use_timeline_order)</code></div>
	<div class="e_func"><code>GoToMarker(<em>ReaProject</em> proj, <em>int </em>marker_index, <em>bool </em>use_timeline_order)</code></div>
	<div class="l_func"><code>reaper.GoToMarker(<em>ReaProject</em> proj, <em>integer</em> marker_index, <em>boolean</em> use_timeline_order)</code></div>
	<div class="p_func"><code>RPR_GoToMarker(<em>ReaProject</em> proj, <em>Int</em> marker_index, <em>Boolean</em> use_timeline_order)</code></div>
	<p>Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline.  If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1.</p>
</div>

<div class="function_definition" id="GoToRegion">
	<div class="c_func"><code>void GoToRegion(ReaProject* proj, int region_index, bool use_timeline_order)</code></div>
	<div class="e_func"><code>GoToRegion(<em>ReaProject</em> proj, <em>int </em>region_index, <em>bool </em>use_timeline_order)</code></div>
	<div class="l_func"><code>reaper.GoToRegion(<em>ReaProject</em> proj, <em>integer</em> region_index, <em>boolean</em> use_timeline_order)</code></div>
	<div class="p_func"><code>RPR_GoToRegion(<em>ReaProject</em> proj, <em>Int</em> region_index, <em>Boolean</em> use_timeline_order)</code></div>
	<p>Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline.  If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1.</p>
</div>

<div class="function_definition" id="GR_SelectColor">
	<div class="c_func"><code>int GR_SelectColor(HWND hwnd, int* colorOut)</code></div>
	<div class="e_func"><code><em>int </em> GR_SelectColor(<em>HWND</em> hwnd, <em>int &amp;</em>color)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>integer </em>color = reaper.GR_SelectColor(<em>HWND</em> hwnd)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>HWND</em> hwnd, <em>Int</em> colorOut) = RPR_GR_SelectColor(hwnd, colorOut)</code></div>
	<p>Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog.</p>
</div>

<div class="function_definition" id="GSC_mainwnd">
	<div class="c_func"><code>int GSC_mainwnd(int t)</code></div>
	<div class="e_func"><code><em>int </em> GSC_mainwnd(<em>int </em>t)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.GSC_mainwnd(<em>integer</em> t)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_GSC_mainwnd(<em>Int</em> t)</code></div>
	<p>this is just like win32 GetSysColor() but can have overrides.</p>
</div>

<div class="function_definition" id="guidToString">
	<div class="c_func"><code>void guidToString(const GUID* g, char* destNeed64)</code></div>
	<div class="e_func"><code>guidToString("gGUID", #destNeed64)</code></div>
	<div class="l_func"><code><em>string </em>destNeed64 = reaper.guidToString(<em>string</em> gGUID, <em>string </em>destNeed64)</code></div>
	<div class="p_func"><code>(<em>const GUID</em> g, <em>String</em> destNeed64) = RPR_guidToString(g, destNeed64)</code></div>
	<p>dest should be at least 64 chars long to be safe</p>
</div>

<div class="function_definition" id="HasExtState">
	<div class="c_func"><code>bool HasExtState(const char* section, const char* key)</code></div>
	<div class="e_func"><code><em>bool </em> HasExtState("section", "key")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.HasExtState(<em>string</em> section, <em>string</em> key)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_HasExtState(<em>String</em> section, <em>String</em> key)</code></div>
	<p>Returns true if there exists an extended state value for a specific section and key. See <a href="#SetExtState">SetExtState</a>, <a href="#GetExtState">GetExtState</a>, <a href="#DeleteExtState">DeleteExtState</a>.</p>
</div>

<div class="function_definition" id="HasTrackMIDIPrograms">
	<div class="c_func"><code>const char* HasTrackMIDIPrograms(int track)</code></div>
	<div class="e_func"><code>bool  HasTrackMIDIPrograms(#retval, <em>int </em>track)</code></div>
	<div class="l_func"><code><em>string</em> reaper.HasTrackMIDIPrograms(<em>integer</em> track)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_HasTrackMIDIPrograms(<em>Int</em> track)</code></div>
	<p>returns name of track plugin that is supplying MIDI programs,or NULL if there is none</p>
</div>

<div class="function_definition" id="HasTrackMIDIProgramsEx">
	<div class="c_func"><code>const char* HasTrackMIDIProgramsEx(ReaProject* proj, MediaTrack* track)</code></div>
	<div class="e_func"><code>bool  HasTrackMIDIProgramsEx(#retval, <em>ReaProject</em> proj, <em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>string</em> reaper.HasTrackMIDIProgramsEx(<em>ReaProject</em> proj, <em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_HasTrackMIDIProgramsEx(<em>ReaProject</em> proj, <em>MediaTrack</em> track)</code></div>
	<p>returns name of track plugin that is supplying MIDI programs,or NULL if there is none</p>
</div>

<div class="function_definition" id="Help_Set">
	<div class="c_func"><code>void Help_Set(const char* helpstring, bool is_temporary_help)</code></div>
	<div class="e_func"><code>Help_Set("helpstring", <em>bool </em>is_temporary_help)</code></div>
	<div class="l_func"><code>reaper.Help_Set(<em>string</em> helpstring, <em>boolean</em> is_temporary_help)</code></div>
	<div class="p_func"><code>RPR_Help_Set(<em>String</em> helpstring, <em>Boolean</em> is_temporary_help)</code></div>
</div>

<div class="function_definition" id="image_resolve_fn">
	<div class="c_func"><code>void image_resolve_fn(const char* in, char* out, int out_sz)</code></div>
	<div class="e_func"><code>image_resolve_fn("in", #out)</code></div>
	<div class="l_func"><code><em>string </em>out = reaper.image_resolve_fn(<em>string</em> in, <em>string </em>out)</code></div>
	<div class="p_func"><code>(<em>String</em> in, <em>String</em> out, <em>Int</em> out_sz) = RPR_image_resolve_fn(in, out, out_sz)</code></div>
</div>

<div class="function_definition" id="InsertAutomationItem">
	<div class="c_func"><code>int InsertAutomationItem(TrackEnvelope* env, int pool_id, double position, double length)</code></div>
	<div class="e_func"><code><em>int </em> InsertAutomationItem(<em>TrackEnvelope</em> env, <em>int </em>pool_id, position, length)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.InsertAutomationItem(<em>TrackEnvelope</em> env, <em>integer</em> pool_id, <em>number</em> position, <em>number</em> length)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_InsertAutomationItem(<em>TrackEnvelope</em> env, <em>Int</em> pool_id, <em>Float</em> position, <em>Float</em> length)</code></div>
	<p>Insert a new automation item. pool_id &lt; 0 collects existing envelope points into the automation item; if pool_id is &gt;= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See <a href="#GetSetAutomationItemInfo">GetSetAutomationItemInfo</a>.</p>
</div>

<div class="function_definition" id="InsertEnvelopePoint">
	<div class="c_func"><code>bool InsertEnvelopePoint(TrackEnvelope* envelope, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> InsertEnvelopePoint(<em>TrackEnvelope</em> envelope, time, value, <em>int </em>shape, tension, <em>bool </em>selected, <em>optional bool</em> noSortIn)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.InsertEnvelopePoint(<em>TrackEnvelope</em> envelope, <em>number</em> time, <em>number</em> value, <em>integer</em> shape, <em>number</em> tension, <em>boolean</em> selected, <em>optional boolean</em> noSortIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>TrackEnvelope</em> envelope, <em>Float</em> time, <em>Float</em> value, <em>Int</em> shape, <em>Float</em> tension, <em>Boolean</em> selected, <em>Boolean</em> noSortInOptional) = RPR_InsertEnvelopePoint(envelope, time, value, shape, tension, selected, noSortInOptional)</code></div>
	<p>Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See <a href="#InsertEnvelopePointEx">InsertEnvelopePointEx</a>.</p>
</div>

<div class="function_definition" id="InsertEnvelopePointEx">
	<div class="c_func"><code>bool InsertEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> InsertEnvelopePointEx(<em>TrackEnvelope</em> envelope, <em>int </em>autoitem_idx, time, value, <em>int </em>shape, tension, <em>bool </em>selected, <em>optional bool</em> noSortIn)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.InsertEnvelopePointEx(<em>TrackEnvelope</em> envelope, <em>integer</em> autoitem_idx, <em>number</em> time, <em>number</em> value, <em>integer</em> shape, <em>number</em> tension, <em>boolean</em> selected, <em>optional boolean</em> noSortIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>TrackEnvelope</em> envelope, <em>Int</em> autoitem_idx, <em>Float</em> time, <em>Float</em> value, <em>Int</em> shape, <em>Float</em> tension, <em>Boolean</em> selected, <em>Boolean</em> noSortInOptional) = RPR_InsertEnvelopePointEx(envelope, autoitem_idx, time, value, shape, tension, selected, noSortInOptional)</code></div>
	<p>Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.<br>
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.<br>
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,<br>
even if the automation item is trimmed so that not all points are visible.<br>
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.<br>
See <a href="#CountEnvelopePointsEx">CountEnvelopePointsEx</a>, <a href="#GetEnvelopePointEx">GetEnvelopePointEx</a>, <a href="#SetEnvelopePointEx">SetEnvelopePointEx</a>, <a href="#DeleteEnvelopePointEx">DeleteEnvelopePointEx</a>.</p>
</div>

<div class="function_definition" id="InsertMedia">
	<div class="c_func"><code>int InsertMedia(const char* file, int mode)</code></div>
	<div class="e_func"><code><em>int </em> InsertMedia("file", <em>int </em>mode)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.InsertMedia(<em>string</em> file, <em>integer</em> mode)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_InsertMedia(<em>String</em> file, <em>Int</em> mode)</code></div>
	<p>mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, &amp;4=stretch/loop to fit time sel, &amp;8=try to match tempo 1x, &amp;16=try to match tempo 0.5x, &amp;32=try to match tempo 2x, &amp;64=don't preserve pitch when matching tempo, &amp;128=no loop/section if startpct/endpct set, &amp;256=force loop regardless of global preference for looping imported items, &amp;512=use high word as absolute track index if mode&amp;3==0 or mode&amp;2048, &amp;1024=insert into reasamplomatic on a new track (add 1 to insert on last selected track), &amp;2048=insert into open reasamplomatic instance (add 512 to use high word as absolute track index), &amp;4096=move to source preferred position (BWF start offset), &amp;8192=reverse</p>
</div>

<div class="function_definition" id="InsertMediaSection">
	<div class="c_func"><code>int InsertMediaSection(const char* file, int mode, double startpct, double endpct, double pitchshift)</code></div>
	<div class="e_func"><code><em>int </em> InsertMediaSection("file", <em>int </em>mode, startpct, endpct, pitchshift)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.InsertMediaSection(<em>string</em> file, <em>integer</em> mode, <em>number</em> startpct, <em>number</em> endpct, <em>number</em> pitchshift)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_InsertMediaSection(<em>String</em> file, <em>Int</em> mode, <em>Float</em> startpct, <em>Float</em> endpct, <em>Float</em> pitchshift)</code></div>
	<p>See <a href="#InsertMedia">InsertMedia</a>.</p>
</div>

<div class="function_definition" id="InsertTrackAtIndex">
	<div class="c_func"><code>void InsertTrackAtIndex(int idx, bool wantDefaults)</code></div>
	<div class="e_func"><code>InsertTrackAtIndex(<em>int </em>idx, <em>bool </em>wantDefaults)</code></div>
	<div class="l_func"><code>reaper.InsertTrackAtIndex(<em>integer</em> idx, <em>boolean</em> wantDefaults)</code></div>
	<div class="p_func"><code>RPR_InsertTrackAtIndex(<em>Int</em> idx, <em>Boolean</em> wantDefaults)</code></div>
	<p>inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env</p>
</div>

<div class="function_definition" id="IsMediaExtension">
	<div class="c_func"><code>bool IsMediaExtension(const char* ext, bool wantOthers)</code></div>
	<div class="e_func"><code><em>bool </em> IsMediaExtension("ext", <em>bool </em>wantOthers)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.IsMediaExtension(<em>string</em> ext, <em>boolean</em> wantOthers)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_IsMediaExtension(<em>String</em> ext, <em>Boolean</em> wantOthers)</code></div>
	<p>Tests a file extension (i.e. "wav" or "mid") to see if it's a media extension.<br>
If wantOthers is set, then "RPP", "TXT" and other project-type formats will also pass.</p>
</div>

<div class="function_definition" id="IsMediaItemSelected">
	<div class="c_func"><code>bool IsMediaItemSelected(MediaItem* item)</code></div>
	<div class="e_func"><code><em>bool </em> IsMediaItemSelected(<em>MediaItem</em> item)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.IsMediaItemSelected(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_IsMediaItemSelected(<em>MediaItem</em> item)</code></div>
</div>

<div class="function_definition" id="IsProjectDirty">
	<div class="c_func"><code>int IsProjectDirty(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>int </em> IsProjectDirty(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.IsProjectDirty(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_IsProjectDirty(<em>ReaProject</em> proj)</code></div>
	<p>Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.</p>
</div>

<div class="function_definition" id="IsTrackSelected">
	<div class="c_func"><code>bool IsTrackSelected(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>bool </em> IsTrackSelected(<em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.IsTrackSelected(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_IsTrackSelected(<em>MediaTrack</em> track)</code></div>
</div>

<div class="function_definition" id="IsTrackVisible">
	<div class="c_func"><code>bool IsTrackVisible(MediaTrack* track, bool mixer)</code></div>
	<div class="e_func"><code><em>bool </em> IsTrackVisible(<em>MediaTrack</em> track, <em>bool </em>mixer)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.IsTrackVisible(<em>MediaTrack</em> track, <em>boolean</em> mixer)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_IsTrackVisible(<em>MediaTrack</em> track, <em>Boolean</em> mixer)</code></div>
	<p>If mixer==true, returns true if the track is visible in the mixer.  If mixer==false, returns true if the track is visible in the track control panel.</p>
</div>

<div class="function_definition" id="joystick_create">
	<div class="c_func"><code>joystick_device* joystick_create(const GUID* guid)</code></div>
	<div class="e_func"><code><em>joystick_device</em>  joystick_create("guidGUID")</code></div>
	<div class="l_func"><code><em>joystick_device</em> reaper.joystick_create(<em>string</em> guidGUID)</code></div>
	<div class="p_func"><code><em>joystick_device</em>  RPR_joystick_create(<em>const GUID</em> guid)</code></div>
	<p>creates a joystick device</p>
</div>

<div class="function_definition" id="joystick_destroy">
	<div class="c_func"><code>void joystick_destroy(joystick_device* device)</code></div>
	<div class="e_func"><code>joystick_destroy(<em>joystick_device</em> device)</code></div>
	<div class="l_func"><code>reaper.joystick_destroy(<em>joystick_device</em> device)</code></div>
	<div class="p_func"><code>RPR_joystick_destroy(<em>joystick_device</em> device)</code></div>
	<p>destroys a joystick device</p>
</div>

<div class="function_definition" id="joystick_enum">
	<div class="c_func"><code>const char* joystick_enum(int index, const char** namestrOutOptional)</code></div>
	<div class="e_func"><code>bool  joystick_enum(#retval, <em>int </em>index, <em>optional </em>#namestr)</code></div>
	<div class="l_func"><code><em>string</em> retval, <em>optional </em><em>string </em>namestr = reaper.joystick_enum(<em>integer</em> index)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_joystick_enum(<em>Int</em> index, <em>String</em> namestrOutOptional)</code></div>
	<p>enumerates installed devices, returns GUID as a string</p>
</div>

<div class="function_definition" id="joystick_getaxis">
	<div class="c_func"><code>double joystick_getaxis(joystick_device* dev, int axis)</code></div>
	<div class="e_func"><code><em>double </em> joystick_getaxis(<em>joystick_device</em> dev, <em>int </em>axis)</code></div>
	<div class="l_func"><code><em>number</em> reaper.joystick_getaxis(<em>joystick_device</em> dev, <em>integer</em> axis)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_joystick_getaxis(<em>joystick_device</em> dev, <em>Int</em> axis)</code></div>
	<p>returns axis value (-1..1)</p>
</div>

<div class="function_definition" id="joystick_getbuttonmask">
	<div class="c_func"><code>unsigned int joystick_getbuttonmask(joystick_device* dev)</code></div>
	<div class="e_func"><code><em>uint </em> joystick_getbuttonmask(<em>joystick_device</em> dev)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.joystick_getbuttonmask(<em>joystick_device</em> dev)</code></div>
	<div class="p_func"><code><em>Unknown</em>  RPR_joystick_getbuttonmask(<em>joystick_device</em> dev)</code></div>
	<p>returns button pressed mask, 1=first button, 2=second...</p>
</div>

<div class="function_definition" id="joystick_getinfo">
	<div class="c_func"><code>int joystick_getinfo(joystick_device* dev, int* axesOutOptional, int* povsOutOptional)</code></div>
	<div class="e_func"><code><em>int </em> joystick_getinfo(<em>joystick_device</em> dev, <em>optional int &amp;</em>axes, <em>optional int &amp;</em>povs)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>optional integer </em>axes, <em>optional integer </em>povs = reaper.joystick_getinfo(<em>joystick_device</em> dev)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>joystick_device</em> dev, <em>Int</em> axesOutOptional, <em>Int</em> povsOutOptional) = RPR_joystick_getinfo(dev, axesOutOptional, povsOutOptional)</code></div>
	<p>returns button count</p>
</div>

<div class="function_definition" id="joystick_getpov">
	<div class="c_func"><code>double joystick_getpov(joystick_device* dev, int pov)</code></div>
	<div class="e_func"><code><em>double </em> joystick_getpov(<em>joystick_device</em> dev, <em>int </em>pov)</code></div>
	<div class="l_func"><code><em>number</em> reaper.joystick_getpov(<em>joystick_device</em> dev, <em>integer</em> pov)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_joystick_getpov(<em>joystick_device</em> dev, <em>Int</em> pov)</code></div>
	<p>returns POV value (usually 0..655.35, or 655.35 on error)</p>
</div>

<div class="function_definition" id="joystick_update">
	<div class="c_func"><code>bool joystick_update(joystick_device* dev)</code></div>
	<div class="e_func"><code><em>bool </em> joystick_update(<em>joystick_device</em> dev)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.joystick_update(<em>joystick_device</em> dev)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_joystick_update(<em>joystick_device</em> dev)</code></div>
	<p>Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)</p>
</div>

<div class="function_definition" id="kbd_enumerateActions">
	<div class="c_func"><code>int kbd_enumerateActions(KbdSectionInfo* section, int idx, const char** nameOut)</code></div>
	<div class="e_func"><code><em>int </em> kbd_enumerateActions(<em>KbdSectionInfo</em> section, <em>int </em>idx, #name)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>name = reaper.kbd_enumerateActions(<em>KbdSectionInfo</em> section, <em>integer</em> idx)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_kbd_enumerateActions(<em>KbdSectionInfo</em> section, <em>Int</em> idx, <em>String</em> nameOut)</code></div>
</div>

<div class="function_definition" id="kbd_getTextFromCmd">
	<div class="c_func"><code>const char* kbd_getTextFromCmd(int cmd, KbdSectionInfo* section)</code></div>
	<div class="e_func"><code>bool  kbd_getTextFromCmd(#retval, <em>int </em>cmd, <em>KbdSectionInfo</em> section)</code></div>
	<div class="l_func"><code><em>string</em> reaper.kbd_getTextFromCmd(<em>integer</em> cmd, <em>KbdSectionInfo</em> section)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_kbd_getTextFromCmd(<em>Int</em> cmd, <em>KbdSectionInfo</em> section)</code></div>
</div>

<div class="function_definition" id="LICE_ClipLine">
	<div class="c_func"><code>bool LICE_ClipLine(int* pX1Out, int* pY1Out, int* pX2Out, int* pY2Out, int xLo, int yLo, int xHi, int yHi)</code></div>
	<div class="e_func"><code><em>bool </em> LICE_ClipLine(<em>int &amp;</em>pX1, <em>int &amp;</em>pY1, <em>int &amp;</em>pX2, <em>int &amp;</em>pY2, <em>int </em>xLo, <em>int </em>yLo, <em>int </em>xHi, <em>int </em>yHi)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>pX1, <em>integer </em>pY1, <em>integer </em>pX2, <em>integer </em>pY2 = reaper.LICE_ClipLine(<em>integer </em>pX1, <em>integer </em>pY1, <em>integer </em>pX2, <em>integer </em>pY2, <em>integer</em> xLo, <em>integer</em> yLo, <em>integer</em> xHi, <em>integer</em> yHi)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>Int</em> pX1Out, <em>Int</em> pY1Out, <em>Int</em> pX2Out, <em>Int</em> pY2Out, <em>Int</em> xLo, <em>Int</em> yLo, <em>Int</em> xHi, <em>Int</em> yHi) = RPR_LICE_ClipLine(pX1Out, pY1Out, pX2Out, pY2Out, xLo, yLo, xHi, yHi)</code></div>
	<p>Returns false if the line is entirely offscreen.</p>
</div>

<div class="function_definition" id="LocalizeString">
	<div class="c_func"><code>const char* LocalizeString(const char* src_string, const char* section, int flagsOptional)</code></div>
	<div class="e_func"><code>bool  LocalizeString(#retval, "src_string", "section", <em>int </em>flags)</code></div>
	<div class="l_func"><code><em>string</em> reaper.LocalizeString(<em>string</em> src_string, <em>string</em> section, <em>integer</em> flags)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_LocalizeString(<em>String</em> src_string, <em>String</em> section, <em>Int</em> flagsOptional)</code></div>
	<p>Returns a localized version of src_string, in section section. flags can have 1 set to only localize if sprintf-style formatting matches the original.</p>
</div>

<div class="function_definition" id="Loop_OnArrow">
	<div class="c_func"><code>bool Loop_OnArrow(ReaProject* project, int direction)</code></div>
	<div class="e_func"><code><em>bool </em> Loop_OnArrow(<em>ReaProject</em> project, <em>int </em>direction)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.Loop_OnArrow(<em>ReaProject</em> project, <em>integer</em> direction)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_Loop_OnArrow(<em>ReaProject</em> project, <em>Int</em> direction)</code></div>
	<p>Move the loop selection left or right. Returns true if snap is enabled.</p>
</div>

<div class="function_definition" id="Main_OnCommand">
	<div class="c_func"><code>void Main_OnCommand(int command, int flag)</code></div>
	<div class="e_func"><code>Main_OnCommand(<em>int </em>command, <em>int </em>flag)</code></div>
	<div class="l_func"><code>reaper.Main_OnCommand(<em>integer</em> command, <em>integer</em> flag)</code></div>
	<div class="p_func"><code>RPR_Main_OnCommand(<em>Int</em> command, <em>Int</em> flag)</code></div>
	<p>See <a href="#Main_OnCommandEx">Main_OnCommandEx</a>.</p>
</div>

<div class="function_definition" id="Main_OnCommandEx">
	<div class="c_func"><code>void Main_OnCommandEx(int command, int flag, ReaProject* proj)</code></div>
	<div class="e_func"><code>Main_OnCommandEx(<em>int </em>command, <em>int </em>flag, <em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code>reaper.Main_OnCommandEx(<em>integer</em> command, <em>integer</em> flag, <em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code>RPR_Main_OnCommandEx(<em>Int</em> command, <em>Int</em> flag, <em>ReaProject</em> proj)</code></div>
	<p>Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see <a href="#NamedCommandLookup">NamedCommandLookup</a>().</p>
</div>

<div class="function_definition" id="Main_openProject">
	<div class="c_func"><code>void Main_openProject(const char* name)</code></div>
	<div class="e_func"><code>Main_openProject("name")</code></div>
	<div class="l_func"><code>reaper.Main_openProject(<em>string</em> name)</code></div>
	<div class="p_func"><code>RPR_Main_openProject(<em>String</em> name)</code></div>
	<p>opens a project. will prompt the user to save unless name is prefixed with 'noprompt:'. If name is prefixed with 'template:', project file will be loaded as a template.<br>
If passed a .RTrackTemplate file, adds the template to the existing project.</p>
</div>

<div class="function_definition" id="Main_SaveProject">
	<div class="c_func"><code>void Main_SaveProject(ReaProject* proj, bool forceSaveAsInOptional)</code></div>
	<div class="e_func"><code>Main_SaveProject(<em>ReaProject</em> proj, <em>bool </em>forceSaveAsIn)</code></div>
	<div class="l_func"><code>reaper.Main_SaveProject(<em>ReaProject</em> proj, <em>boolean</em> forceSaveAsIn)</code></div>
	<div class="p_func"><code>RPR_Main_SaveProject(<em>ReaProject</em> proj, <em>Boolean</em> forceSaveAsInOptional)</code></div>
	<p>Save the project.</p>
</div>

<div class="function_definition" id="Main_SaveProjectEx">
	<div class="c_func"><code>void Main_SaveProjectEx(ReaProject* proj, const char* filename, int options)</code></div>
	<div class="e_func"><code>Main_SaveProjectEx(<em>ReaProject</em> proj, "filename", <em>int </em>options)</code></div>
	<div class="l_func"><code>reaper.Main_SaveProjectEx(<em>ReaProject</em> proj, <em>string</em> filename, <em>integer</em> options)</code></div>
	<div class="p_func"><code>RPR_Main_SaveProjectEx(<em>ReaProject</em> proj, <em>String</em> filename, <em>Int</em> options)</code></div>
	<p>Save the project. options: &amp;1=save selected tracks as track template, &amp;2=include media with track template, &amp;4=include envelopes with track template. See <a href="#Main_openProject">Main_openProject</a>, <a href="#Main_SaveProject">Main_SaveProject</a>.</p>
</div>

<div class="function_definition" id="Main_UpdateLoopInfo">
	<div class="c_func"><code>void Main_UpdateLoopInfo(int ignoremask)</code></div>
	<div class="e_func"><code>Main_UpdateLoopInfo(<em>int </em>ignoremask)</code></div>
	<div class="l_func"><code>reaper.Main_UpdateLoopInfo(<em>integer</em> ignoremask)</code></div>
	<div class="p_func"><code>RPR_Main_UpdateLoopInfo(<em>Int</em> ignoremask)</code></div>
</div>

<div class="function_definition" id="MarkProjectDirty">
	<div class="c_func"><code>void MarkProjectDirty(ReaProject* proj)</code></div>
	<div class="e_func"><code>MarkProjectDirty(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code>reaper.MarkProjectDirty(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code>RPR_MarkProjectDirty(<em>ReaProject</em> proj)</code></div>
	<p>Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.</p>
</div>

<div class="function_definition" id="MarkTrackItemsDirty">
	<div class="c_func"><code>void MarkTrackItemsDirty(MediaTrack* track, MediaItem* item)</code></div>
	<div class="e_func"><code>MarkTrackItemsDirty(<em>MediaTrack</em> track, <em>MediaItem</em> item)</code></div>
	<div class="l_func"><code>reaper.MarkTrackItemsDirty(<em>MediaTrack</em> track, <em>MediaItem</em> item)</code></div>
	<div class="p_func"><code>RPR_MarkTrackItemsDirty(<em>MediaTrack</em> track, <em>MediaItem</em> item)</code></div>
	<p>If track is supplied, item is ignored</p>
</div>

<div class="function_definition" id="Master_GetPlayRate">
	<div class="c_func"><code>double Master_GetPlayRate(ReaProject* project)</code></div>
	<div class="e_func"><code><em>double </em> Master_GetPlayRate(<em>ReaProject</em> project)</code></div>
	<div class="l_func"><code><em>number</em> reaper.Master_GetPlayRate(<em>ReaProject</em> project)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_Master_GetPlayRate(<em>ReaProject</em> project)</code></div>
</div>

<div class="function_definition" id="Master_GetPlayRateAtTime">
	<div class="c_func"><code>double Master_GetPlayRateAtTime(double time_s, ReaProject* proj)</code></div>
	<div class="e_func"><code><em>double </em> Master_GetPlayRateAtTime(time_s, <em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>number</em> reaper.Master_GetPlayRateAtTime(<em>number</em> time_s, <em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_Master_GetPlayRateAtTime(<em>Float</em> time_s, <em>ReaProject</em> proj)</code></div>
</div>

<div class="function_definition" id="Master_GetTempo">
	<div class="c_func"><code>double Master_GetTempo()</code></div>
	<div class="e_func"><code><em>double </em> Master_GetTempo()</code></div>
	<div class="l_func"><code><em>number</em> reaper.Master_GetTempo()</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_Master_GetTempo()</code></div>
</div>

<div class="function_definition" id="Master_NormalizePlayRate">
	<div class="c_func"><code>double Master_NormalizePlayRate(double playrate, bool isnormalized)</code></div>
	<div class="e_func"><code><em>double </em> Master_NormalizePlayRate(playrate, <em>bool </em>isnormalized)</code></div>
	<div class="l_func"><code><em>number</em> reaper.Master_NormalizePlayRate(<em>number</em> playrate, <em>boolean</em> isnormalized)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_Master_NormalizePlayRate(<em>Float</em> playrate, <em>Boolean</em> isnormalized)</code></div>
	<p>Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.</p>
</div>

<div class="function_definition" id="Master_NormalizeTempo">
	<div class="c_func"><code>double Master_NormalizeTempo(double bpm, bool isnormalized)</code></div>
	<div class="e_func"><code><em>double </em> Master_NormalizeTempo(bpm, <em>bool </em>isnormalized)</code></div>
	<div class="l_func"><code><em>number</em> reaper.Master_NormalizeTempo(<em>number</em> bpm, <em>boolean</em> isnormalized)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_Master_NormalizeTempo(<em>Float</em> bpm, <em>Boolean</em> isnormalized)</code></div>
	<p>Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.</p>
</div>

<div class="function_definition" id="MB">
	<div class="c_func"><code>int MB(const char* msg, const char* title, int type)</code></div>
	<div class="e_func"><code><em>int </em> MB("msg", "title", <em>int </em>type)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.MB(<em>string</em> msg, <em>string</em> title, <em>integer</em> type)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_MB(<em>String</em> msg, <em>String</em> title, <em>Int</em> type)</code></div>
	<p>type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO</p>
</div>

<div class="function_definition" id="MediaItemDescendsFromTrack">
	<div class="c_func"><code>int MediaItemDescendsFromTrack(MediaItem* item, MediaTrack* track)</code></div>
	<div class="e_func"><code><em>int </em> MediaItemDescendsFromTrack(<em>MediaItem</em> item, <em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.MediaItemDescendsFromTrack(<em>MediaItem</em> item, <em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_MediaItemDescendsFromTrack(<em>MediaItem</em> item, <em>MediaTrack</em> track)</code></div>
	<p>Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.</p>
</div>

<div class="function_definition" id="MIDI_CountEvts">
	<div class="c_func"><code>int MIDI_CountEvts(MediaItem_Take* take, int* notecntOut, int* ccevtcntOut, int* textsyxevtcntOut)</code></div>
	<div class="e_func"><code><em>int </em> MIDI_CountEvts(<em>MediaItem_Take</em> take, <em>int &amp;</em>notecnt, <em>int &amp;</em>ccevtcnt, <em>int &amp;</em>textsyxevtcnt)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>integer </em>notecnt, <em>integer </em>ccevtcnt, <em>integer </em>textsyxevtcnt = reaper.MIDI_CountEvts(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> notecntOut, <em>Int</em> ccevtcntOut, <em>Int</em> textsyxevtcntOut) = RPR_MIDI_CountEvts(take, notecntOut, ccevtcntOut, textsyxevtcntOut)</code></div>
	<p>Count the number of notes, CC events, and text/sysex events in a given MIDI item.</p>
</div>

<div class="function_definition" id="MIDI_DeleteCC">
	<div class="c_func"><code>bool MIDI_DeleteCC(MediaItem_Take* take, int ccidx)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_DeleteCC(<em>MediaItem_Take</em> take, <em>int </em>ccidx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_DeleteCC(<em>MediaItem_Take</em> take, <em>integer</em> ccidx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_DeleteCC(<em>MediaItem_Take</em> take, <em>Int</em> ccidx)</code></div>
	<p>Delete a MIDI CC event.</p>
</div>

<div class="function_definition" id="MIDI_DeleteEvt">
	<div class="c_func"><code>bool MIDI_DeleteEvt(MediaItem_Take* take, int evtidx)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_DeleteEvt(<em>MediaItem_Take</em> take, <em>int </em>evtidx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_DeleteEvt(<em>MediaItem_Take</em> take, <em>integer</em> evtidx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_DeleteEvt(<em>MediaItem_Take</em> take, <em>Int</em> evtidx)</code></div>
	<p>Delete a MIDI event.</p>
</div>

<div class="function_definition" id="MIDI_DeleteNote">
	<div class="c_func"><code>bool MIDI_DeleteNote(MediaItem_Take* take, int noteidx)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_DeleteNote(<em>MediaItem_Take</em> take, <em>int </em>noteidx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_DeleteNote(<em>MediaItem_Take</em> take, <em>integer</em> noteidx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_DeleteNote(<em>MediaItem_Take</em> take, <em>Int</em> noteidx)</code></div>
	<p>Delete a MIDI note.</p>
</div>

<div class="function_definition" id="MIDI_DeleteTextSysexEvt">
	<div class="c_func"><code>bool MIDI_DeleteTextSysexEvt(MediaItem_Take* take, int textsyxevtidx)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_DeleteTextSysexEvt(<em>MediaItem_Take</em> take, <em>int </em>textsyxevtidx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_DeleteTextSysexEvt(<em>MediaItem_Take</em> take, <em>integer</em> textsyxevtidx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_DeleteTextSysexEvt(<em>MediaItem_Take</em> take, <em>Int</em> textsyxevtidx)</code></div>
	<p>Delete a MIDI text or sysex event.</p>
</div>

<div class="function_definition" id="MIDI_DisableSort">
	<div class="c_func"><code>void MIDI_DisableSort(MediaItem_Take* take)</code></div>
	<div class="e_func"><code>MIDI_DisableSort(<em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code>reaper.MIDI_DisableSort(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code>RPR_MIDI_DisableSort(<em>MediaItem_Take</em> take)</code></div>
	<p>Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.</p>
</div>

<div class="function_definition" id="MIDI_EnumSelCC">
	<div class="c_func"><code>int MIDI_EnumSelCC(MediaItem_Take* take, int ccidx)</code></div>
	<div class="e_func"><code><em>int </em> MIDI_EnumSelCC(<em>MediaItem_Take</em> take, <em>int </em>ccidx)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.MIDI_EnumSelCC(<em>MediaItem_Take</em> take, <em>integer</em> ccidx)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_MIDI_EnumSelCC(<em>MediaItem_Take</em> take, <em>Int</em> ccidx)</code></div>
	<p>Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).</p>
</div>

<div class="function_definition" id="MIDI_EnumSelEvts">
	<div class="c_func"><code>int MIDI_EnumSelEvts(MediaItem_Take* take, int evtidx)</code></div>
	<div class="e_func"><code><em>int </em> MIDI_EnumSelEvts(<em>MediaItem_Take</em> take, <em>int </em>evtidx)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.MIDI_EnumSelEvts(<em>MediaItem_Take</em> take, <em>integer</em> evtidx)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_MIDI_EnumSelEvts(<em>MediaItem_Take</em> take, <em>Int</em> evtidx)</code></div>
	<p>Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).</p>
</div>

<div class="function_definition" id="MIDI_EnumSelNotes">
	<div class="c_func"><code>int MIDI_EnumSelNotes(MediaItem_Take* take, int noteidx)</code></div>
	<div class="e_func"><code><em>int </em> MIDI_EnumSelNotes(<em>MediaItem_Take</em> take, <em>int </em>noteidx)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.MIDI_EnumSelNotes(<em>MediaItem_Take</em> take, <em>integer</em> noteidx)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_MIDI_EnumSelNotes(<em>MediaItem_Take</em> take, <em>Int</em> noteidx)</code></div>
	<p>Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).</p>
</div>

<div class="function_definition" id="MIDI_EnumSelTextSysexEvts">
	<div class="c_func"><code>int MIDI_EnumSelTextSysexEvts(MediaItem_Take* take, int textsyxidx)</code></div>
	<div class="e_func"><code><em>int </em> MIDI_EnumSelTextSysexEvts(<em>MediaItem_Take</em> take, <em>int </em>textsyxidx)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.MIDI_EnumSelTextSysexEvts(<em>MediaItem_Take</em> take, <em>integer</em> textsyxidx)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_MIDI_EnumSelTextSysexEvts(<em>MediaItem_Take</em> take, <em>Int</em> textsyxidx)</code></div>
	<p>Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).</p>
</div>

<div class="function_definition" id="MIDI_GetAllEvts">
	<div class="c_func"><code>bool MIDI_GetAllEvts(MediaItem_Take* take, char* bufOutNeedBig, int* bufOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_GetAllEvts(<em>MediaItem_Take</em> take, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.MIDI_GetAllEvts(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>String</em> bufOutNeedBig, <em>Int</em> bufOutNeedBig_sz) = RPR_MIDI_GetAllEvts(take, bufOutNeedBig, bufOutNeedBig_sz)</code></div>
	<p>Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.<br>
offset: MIDI ticks from previous event<br>
flag: &amp;1=selected &amp;2=muted<br>
flag high 4 bits for CC shape: &amp;16=linear, &amp;32=slow start/end, &amp;16|32=fast start, &amp;64=fast end, &amp;64|16=bezier<br>
msg: the MIDI message.<br>
A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.<br>
For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.<br>
See <a href="#MIDI_SetAllEvts">MIDI_SetAllEvts</a>.</p>
</div>

<div class="function_definition" id="MIDI_GetCC">
	<div class="c_func"><code>bool MIDI_GetCC(MediaItem_Take* take, int ccidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, int* chanmsgOut, int* chanOut, int* msg2Out, int* msg3Out)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_GetCC(<em>MediaItem_Take</em> take, <em>int </em>ccidx, <em>bool &amp;</em>selected, <em>bool &amp;</em>muted, <em>&amp;</em>ppqpos, <em>int &amp;</em>chanmsg, <em>int &amp;</em>chan, <em>int &amp;</em>msg2, <em>int &amp;</em>msg3)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>selected, <em>boolean </em>muted, <em>number </em>ppqpos, <em>integer </em>chanmsg, <em>integer </em>chan, <em>integer </em>msg2, <em>integer </em>msg3 = reaper.MIDI_GetCC(<em>MediaItem_Take</em> take, <em>integer</em> ccidx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> ccidx, <em>Boolean</em> selectedOut, <em>Boolean</em> mutedOut, <em>Float</em> ppqposOut, <em>Int</em> chanmsgOut, <em>Int</em> chanOut, <em>Int</em> msg2Out, <em>Int</em> msg3Out) = RPR_MIDI_GetCC(take, ccidx, selectedOut, mutedOut, ppqposOut, chanmsgOut, chanOut, msg2Out, msg3Out)</code></div>
	<p>Get MIDI CC event properties.</p>
</div>

<div class="function_definition" id="MIDI_GetCCShape">
	<div class="c_func"><code>bool MIDI_GetCCShape(MediaItem_Take* take, int ccidx, int* shapeOut, double* beztensionOut)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_GetCCShape(<em>MediaItem_Take</em> take, <em>int </em>ccidx, <em>int &amp;</em>shape, <em>&amp;</em>beztension)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>shape, <em>number </em>beztension = reaper.MIDI_GetCCShape(<em>MediaItem_Take</em> take, <em>integer</em> ccidx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> ccidx, <em>Int</em> shapeOut, <em>Float</em> beztensionOut) = RPR_MIDI_GetCCShape(take, ccidx, shapeOut, beztensionOut)</code></div>
	<p>Get CC shape and bezier tension. See <a href="#MIDI_GetCC">MIDI_GetCC</a>, <a href="#MIDI_SetCCShape">MIDI_SetCCShape</a></p>
</div>

<div class="function_definition" id="MIDI_GetEvt">
	<div class="c_func"><code>bool MIDI_GetEvt(MediaItem_Take* take, int evtidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, char* msgOut, int* msgOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_GetEvt(<em>MediaItem_Take</em> take, <em>int </em>evtidx, <em>bool &amp;</em>selected, <em>bool &amp;</em>muted, <em>&amp;</em>ppqpos, #msg)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>selected, <em>boolean </em>muted, <em>number </em>ppqpos, <em>string </em>msg = reaper.MIDI_GetEvt(<em>MediaItem_Take</em> take, <em>integer</em> evtidx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> evtidx, <em>Boolean</em> selectedOut, <em>Boolean</em> mutedOut, <em>Float</em> ppqposOut, <em>String</em> msgOut, <em>Int</em> msgOut_sz) = RPR_MIDI_GetEvt(take, evtidx, selectedOut, mutedOut, ppqposOut, msgOut, msgOut_sz)</code></div>
	<p>Get MIDI event properties.</p>
</div>

<div class="function_definition" id="MIDI_GetGrid">
	<div class="c_func"><code>double MIDI_GetGrid(MediaItem_Take* take, double* swingOutOptional, double* noteLenOutOptional)</code></div>
	<div class="e_func"><code><em>double </em> MIDI_GetGrid(<em>MediaItem_Take</em> take, <em>optional &amp;</em>swing, <em>optional &amp;</em>noteLen)</code></div>
	<div class="l_func"><code><em>number</em> retval, <em>optional number </em>swing, <em>optional number </em>noteLen = reaper.MIDI_GetGrid(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code>(<em>Float</em> retval, <em>MediaItem_Take</em> take, <em>Float</em> swingOutOptional, <em>Float</em> noteLenOutOptional) = RPR_MIDI_GetGrid(take, swingOutOptional, noteLenOutOptional)</code></div>
	<p>Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.</p>
</div>

<div class="function_definition" id="MIDI_GetHash">
	<div class="c_func"><code>bool MIDI_GetHash(MediaItem_Take* take, bool notesonly, char* hashOut, int hashOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_GetHash(<em>MediaItem_Take</em> take, <em>bool </em>notesonly, #hash)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>hash = reaper.MIDI_GetHash(<em>MediaItem_Take</em> take, <em>boolean</em> notesonly)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Boolean</em> notesonly, <em>String</em> hashOut, <em>Int</em> hashOut_sz) = RPR_MIDI_GetHash(take, notesonly, hashOut, hashOut_sz)</code></div>
	<p>Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See <a href="#MIDI_GetTrackHash">MIDI_GetTrackHash</a></p>
</div>

<div class="function_definition" id="MIDI_GetNote">
	<div class="c_func"><code>bool MIDI_GetNote(MediaItem_Take* take, int noteidx, bool* selectedOut, bool* mutedOut, double* startppqposOut, double* endppqposOut, int* chanOut, int* pitchOut, int* velOut)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_GetNote(<em>MediaItem_Take</em> take, <em>int </em>noteidx, <em>bool &amp;</em>selected, <em>bool &amp;</em>muted, <em>&amp;</em>startppqpos, <em>&amp;</em>endppqpos, <em>int &amp;</em>chan, <em>int &amp;</em>pitch, <em>int &amp;</em>vel)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>selected, <em>boolean </em>muted, <em>number </em>startppqpos, <em>number </em>endppqpos, <em>integer </em>chan, <em>integer </em>pitch, <em>integer </em>vel = reaper.MIDI_GetNote(<em>MediaItem_Take</em> take, <em>integer</em> noteidx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> noteidx, <em>Boolean</em> selectedOut, <em>Boolean</em> mutedOut, <em>Float</em> startppqposOut, <em>Float</em> endppqposOut, <em>Int</em> chanOut, <em>Int</em> pitchOut, <em>Int</em> velOut) = RPR_MIDI_GetNote(take, noteidx, selectedOut, mutedOut, startppqposOut, endppqposOut, chanOut, pitchOut, velOut)</code></div>
	<p>Get MIDI note properties.</p>
</div>

<div class="function_definition" id="MIDI_GetPPQPos_EndOfMeasure">
	<div class="c_func"><code>double MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take* take, double ppqpos)</code></div>
	<div class="e_func"><code><em>double </em> MIDI_GetPPQPos_EndOfMeasure(<em>MediaItem_Take</em> take, ppqpos)</code></div>
	<div class="l_func"><code><em>number</em> reaper.MIDI_GetPPQPos_EndOfMeasure(<em>MediaItem_Take</em> take, <em>number</em> ppqpos)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_MIDI_GetPPQPos_EndOfMeasure(<em>MediaItem_Take</em> take, <em>Float</em> ppqpos)</code></div>
	<p>Returns the MIDI tick (ppq) position corresponding to the end of the measure.</p>
</div>

<div class="function_definition" id="MIDI_GetPPQPos_StartOfMeasure">
	<div class="c_func"><code>double MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take* take, double ppqpos)</code></div>
	<div class="e_func"><code><em>double </em> MIDI_GetPPQPos_StartOfMeasure(<em>MediaItem_Take</em> take, ppqpos)</code></div>
	<div class="l_func"><code><em>number</em> reaper.MIDI_GetPPQPos_StartOfMeasure(<em>MediaItem_Take</em> take, <em>number</em> ppqpos)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_MIDI_GetPPQPos_StartOfMeasure(<em>MediaItem_Take</em> take, <em>Float</em> ppqpos)</code></div>
	<p>Returns the MIDI tick (ppq) position corresponding to the start of the measure.</p>
</div>

<div class="function_definition" id="MIDI_GetPPQPosFromProjQN">
	<div class="c_func"><code>double MIDI_GetPPQPosFromProjQN(MediaItem_Take* take, double projqn)</code></div>
	<div class="e_func"><code><em>double </em> MIDI_GetPPQPosFromProjQN(<em>MediaItem_Take</em> take, projqn)</code></div>
	<div class="l_func"><code><em>number</em> reaper.MIDI_GetPPQPosFromProjQN(<em>MediaItem_Take</em> take, <em>number</em> projqn)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_MIDI_GetPPQPosFromProjQN(<em>MediaItem_Take</em> take, <em>Float</em> projqn)</code></div>
	<p>Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.</p>
</div>

<div class="function_definition" id="MIDI_GetPPQPosFromProjTime">
	<div class="c_func"><code>double MIDI_GetPPQPosFromProjTime(MediaItem_Take* take, double projtime)</code></div>
	<div class="e_func"><code><em>double </em> MIDI_GetPPQPosFromProjTime(<em>MediaItem_Take</em> take, projtime)</code></div>
	<div class="l_func"><code><em>number</em> reaper.MIDI_GetPPQPosFromProjTime(<em>MediaItem_Take</em> take, <em>number</em> projtime)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_MIDI_GetPPQPosFromProjTime(<em>MediaItem_Take</em> take, <em>Float</em> projtime)</code></div>
	<p>Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.</p>
</div>

<div class="function_definition" id="MIDI_GetProjQNFromPPQPos">
	<div class="c_func"><code>double MIDI_GetProjQNFromPPQPos(MediaItem_Take* take, double ppqpos)</code></div>
	<div class="e_func"><code><em>double </em> MIDI_GetProjQNFromPPQPos(<em>MediaItem_Take</em> take, ppqpos)</code></div>
	<div class="l_func"><code><em>number</em> reaper.MIDI_GetProjQNFromPPQPos(<em>MediaItem_Take</em> take, <em>number</em> ppqpos)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_MIDI_GetProjQNFromPPQPos(<em>MediaItem_Take</em> take, <em>Float</em> ppqpos)</code></div>
	<p>Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.</p>
</div>

<div class="function_definition" id="MIDI_GetProjTimeFromPPQPos">
	<div class="c_func"><code>double MIDI_GetProjTimeFromPPQPos(MediaItem_Take* take, double ppqpos)</code></div>
	<div class="e_func"><code><em>double </em> MIDI_GetProjTimeFromPPQPos(<em>MediaItem_Take</em> take, ppqpos)</code></div>
	<div class="l_func"><code><em>number</em> reaper.MIDI_GetProjTimeFromPPQPos(<em>MediaItem_Take</em> take, <em>number</em> ppqpos)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_MIDI_GetProjTimeFromPPQPos(<em>MediaItem_Take</em> take, <em>Float</em> ppqpos)</code></div>
	<p>Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.</p>
</div>

<div class="function_definition" id="MIDI_GetRecentInputEvent">
	<div class="c_func"><code>int MIDI_GetRecentInputEvent(int idx, char* bufOut, int* bufOut_sz, int* tsOut, int* devIdxOut, double* projPosOut, int* projLoopCntOut)</code></div>
	<div class="e_func"><code><em>int </em> MIDI_GetRecentInputEvent(<em>int </em>idx, #buf, <em>int &amp;</em>ts, <em>int &amp;</em>devIdx, <em>&amp;</em>projPos, <em>int &amp;</em>projLoopCnt)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>buf, <em>integer </em>ts, <em>integer </em>devIdx, <em>number </em>projPos, <em>integer </em>projLoopCnt = reaper.MIDI_GetRecentInputEvent(<em>integer</em> idx)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>Int</em> idx, <em>String</em> bufOut, <em>Int</em> bufOut_sz, <em>Int</em> tsOut, <em>Int</em> devIdxOut, <em>Float</em> projPosOut, <em>Int</em> projLoopCntOut) = RPR_MIDI_GetRecentInputEvent(idx, bufOut, bufOut_sz, tsOut, devIdxOut, projPosOut, projLoopCntOut)</code></div>
	<p>Gets a recent MIDI input event from the global history. idx=0 for the most recent event, which also latches to the latest MIDI event state (to get a more recent list, calling with idx=0 is necessary). idx=1 next most recent event, returns a non-zero sequence number for the event, or zero if no more events. tsOut will be set to the timestamp in samples relative to the current position (0 is current, -48000 is one second ago, etc). devIdxOut will have the low 16 bits set to the input device index, and 0x10000 will be set if device was enabled only for control. projPosOut will be set to project position in seconds if project was playing back at time of event, otherwise -1. Large SysEx events will not be included in this event list.</p>
</div>

<div class="function_definition" id="MIDI_GetScale">
	<div class="c_func"><code>bool MIDI_GetScale(MediaItem_Take* take, int* rootOut, int* scaleOut, char* nameOut, int nameOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_GetScale(<em>MediaItem_Take</em> take, <em>int &amp;</em>root, <em>int &amp;</em>scale, #name)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>root, <em>integer </em>scale, <em>string </em>name = reaper.MIDI_GetScale(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> rootOut, <em>Int</em> scaleOut, <em>String</em> nameOut, <em>Int</em> nameOut_sz) = RPR_MIDI_GetScale(take, rootOut, scaleOut, nameOut, nameOut_sz)</code></div>
	<p>Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &amp;0x1=root, &amp;0x2=minor 2nd, &amp;0x4=major 2nd, &amp;0x8=minor 3rd, &amp;0xF=fourth, etc.</p>
</div>

<div class="function_definition" id="MIDI_GetTextSysexEvt">
	<div class="c_func"><code>bool MIDI_GetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, bool* selectedOutOptional, bool* mutedOutOptional, double* ppqposOutOptional, int* typeOutOptional, char* msgOptional, int* msgOptional_sz)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_GetTextSysexEvt(<em>MediaItem_Take</em> take, <em>int </em>textsyxevtidx, <em>optional bool &amp;</em>selected, <em>optional bool &amp;</em>muted, <em>optional &amp;</em>ppqpos, <em>optional int &amp;</em>type, <em>optional </em>#msg)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>optional boolean </em>selected, <em>optional boolean </em>muted, <em>optional number </em>ppqpos, <em>optional integer </em>type, <em>optional </em><em>string </em>msg = reaper.MIDI_GetTextSysexEvt(<em>MediaItem_Take</em> take, <em>integer</em> textsyxevtidx, <em>optional boolean </em>selected, <em>optional boolean </em>muted, <em>optional number </em>ppqpos, <em>optional integer </em>type, <em>optional </em><em>string </em>msg)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> textsyxevtidx, <em>Boolean</em> selectedOutOptional, <em>Boolean</em> mutedOutOptional, <em>Float</em> ppqposOutOptional, <em>Int</em> typeOutOptional, <em>String</em> msgOptional, <em>Int</em> msgOptional_sz) = RPR_MIDI_GetTextSysexEvt(take, textsyxevtidx, selectedOutOptional, mutedOutOptional, ppqposOutOptional, typeOutOptional, msgOptional, msgOptional_sz)</code></div>
	<p>Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. For all other meta-messages, type is returned as -2 and msg returned as all zeroes. See <a href="#MIDI_GetEvt">MIDI_GetEvt</a>.</p>
</div>

<div class="function_definition" id="MIDI_GetTrackHash">
	<div class="c_func"><code>bool MIDI_GetTrackHash(MediaTrack* track, bool notesonly, char* hashOut, int hashOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_GetTrackHash(<em>MediaTrack</em> track, <em>bool </em>notesonly, #hash)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>hash = reaper.MIDI_GetTrackHash(<em>MediaTrack</em> track, <em>boolean</em> notesonly)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Boolean</em> notesonly, <em>String</em> hashOut, <em>Int</em> hashOut_sz) = RPR_MIDI_GetTrackHash(track, notesonly, hashOut, hashOut_sz)</code></div>
	<p>Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See <a href="#MIDI_GetHash">MIDI_GetHash</a></p>
</div>

<div class="function_definition" id="midi_init">
	<div class="c_func"><code>void midi_init(int force_reinit_input, int force_reinit_output)</code></div>
	<div class="e_func"><code>midi_init(<em>int </em>force_reinit_input, <em>int </em>force_reinit_output)</code></div>
	<div class="l_func"><code>reaper.midi_init(<em>integer</em> force_reinit_input, <em>integer</em> force_reinit_output)</code></div>
	<div class="p_func"><code>RPR_midi_init(<em>Int</em> force_reinit_input, <em>Int</em> force_reinit_output)</code></div>
	<p>Opens MIDI devices as configured in preferences. force_reinit_input and force_reinit_output force a particular device index to close/re-open (pass -1 to not force any devices to reopen).</p>
</div>

<div class="function_definition" id="MIDI_InsertCC">
	<div class="c_func"><code>bool MIDI_InsertCC(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int chanmsg, int chan, int msg2, int msg3)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_InsertCC(<em>MediaItem_Take</em> take, <em>bool </em>selected, <em>bool </em>muted, ppqpos, <em>int </em>chanmsg, <em>int </em>chan, <em>int </em>msg2, <em>int </em>msg3)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_InsertCC(<em>MediaItem_Take</em> take, <em>boolean</em> selected, <em>boolean</em> muted, <em>number</em> ppqpos, <em>integer</em> chanmsg, <em>integer</em> chan, <em>integer</em> msg2, <em>integer</em> msg3)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_InsertCC(<em>MediaItem_Take</em> take, <em>Boolean</em> selected, <em>Boolean</em> muted, <em>Float</em> ppqpos, <em>Int</em> chanmsg, <em>Int</em> chan, <em>Int</em> msg2, <em>Int</em> msg3)</code></div>
	<p>Insert a new MIDI CC event.</p>
</div>

<div class="function_definition" id="MIDI_InsertEvt">
	<div class="c_func"><code>bool MIDI_InsertEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, const char* bytestr, int bytestr_sz)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_InsertEvt(<em>MediaItem_Take</em> take, <em>bool </em>selected, <em>bool </em>muted, ppqpos, "bytestr")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_InsertEvt(<em>MediaItem_Take</em> take, <em>boolean</em> selected, <em>boolean</em> muted, <em>number</em> ppqpos, <em>string</em> bytestr)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_InsertEvt(<em>MediaItem_Take</em> take, <em>Boolean</em> selected, <em>Boolean</em> muted, <em>Float</em> ppqpos, <em>String</em> bytestr, <em>Int</em> bytestr_sz)</code></div>
	<p>Insert a new MIDI event.</p>
</div>

<div class="function_definition" id="MIDI_InsertNote">
	<div class="c_func"><code>bool MIDI_InsertNote(MediaItem_Take* take, bool selected, bool muted, double startppqpos, double endppqpos, int chan, int pitch, int vel, const bool* noSortInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_InsertNote(<em>MediaItem_Take</em> take, <em>bool </em>selected, <em>bool </em>muted, startppqpos, endppqpos, <em>int </em>chan, <em>int </em>pitch, <em>int </em>vel, <em>optional bool</em> noSortIn)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_InsertNote(<em>MediaItem_Take</em> take, <em>boolean</em> selected, <em>boolean</em> muted, <em>number</em> startppqpos, <em>number</em> endppqpos, <em>integer</em> chan, <em>integer</em> pitch, <em>integer</em> vel, <em>optional boolean</em> noSortIn)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_InsertNote(<em>MediaItem_Take</em> take, <em>Boolean</em> selected, <em>Boolean</em> muted, <em>Float</em> startppqpos, <em>Float</em> endppqpos, <em>Int</em> chan, <em>Int</em> pitch, <em>Int</em> vel, <em>const bool</em> noSortInOptional)</code></div>
	<p>Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.</p>
</div>

<div class="function_definition" id="MIDI_InsertTextSysexEvt">
	<div class="c_func"><code>bool MIDI_InsertTextSysexEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int type, const char* bytestr, int bytestr_sz)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_InsertTextSysexEvt(<em>MediaItem_Take</em> take, <em>bool </em>selected, <em>bool </em>muted, ppqpos, <em>int </em>type, "bytestr")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_InsertTextSysexEvt(<em>MediaItem_Take</em> take, <em>boolean</em> selected, <em>boolean</em> muted, <em>number</em> ppqpos, <em>integer</em> type, <em>string</em> bytestr)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_InsertTextSysexEvt(<em>MediaItem_Take</em> take, <em>Boolean</em> selected, <em>Boolean</em> muted, <em>Float</em> ppqpos, <em>Int</em> type, <em>String</em> bytestr, <em>Int</em> bytestr_sz)</code></div>
	<p>Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event.</p>
</div>

<div class="function_definition" id="midi_reinit">
	<div class="c_func"><code>void midi_reinit()</code></div>
	<div class="e_func"><code>midi_reinit()</code></div>
	<div class="l_func"><code>reaper.midi_reinit()</code></div>
	<div class="p_func"><code>RPR_midi_reinit()</code></div>
	<p>Reset (close and re-open) all MIDI devices</p>
</div>

<div class="function_definition" id="MIDI_SelectAll">
	<div class="c_func"><code>void MIDI_SelectAll(MediaItem_Take* take, bool select)</code></div>
	<div class="e_func"><code>MIDI_SelectAll(<em>MediaItem_Take</em> take, <em>bool </em>select)</code></div>
	<div class="l_func"><code>reaper.MIDI_SelectAll(<em>MediaItem_Take</em> take, <em>boolean</em> select)</code></div>
	<div class="p_func"><code>RPR_MIDI_SelectAll(<em>MediaItem_Take</em> take, <em>Boolean</em> select)</code></div>
	<p>Select or deselect all MIDI content.</p>
</div>

<div class="function_definition" id="MIDI_SetAllEvts">
	<div class="c_func"><code>bool MIDI_SetAllEvts(MediaItem_Take* take, const char* buf, int buf_sz)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_SetAllEvts(<em>MediaItem_Take</em> take, "buf")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_SetAllEvts(<em>MediaItem_Take</em> take, <em>string</em> buf)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_SetAllEvts(<em>MediaItem_Take</em> take, <em>String</em> buf, <em>Int</em> buf_sz)</code></div>
	<p>Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.<br>
offset: MIDI ticks from previous event<br>
flag: &amp;1=selected &amp;2=muted<br>
flag high 4 bits for CC shape: &amp;16=linear, &amp;32=slow start/end, &amp;16|32=fast start, &amp;64=fast end, &amp;64|16=bezier<br>
msg: the MIDI message.<br>
A meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.<br>
For tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.<br>
See <a href="#MIDI_GetAllEvts">MIDI_GetAllEvts</a>.</p>
</div>

<div class="function_definition" id="MIDI_SetCC">
	<div class="c_func"><code>bool MIDI_SetCC(MediaItem_Take* take, int ccidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* chanmsgInOptional, const int* chanInOptional, const int* msg2InOptional, const int* msg3InOptional, const bool* noSortInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_SetCC(<em>MediaItem_Take</em> take, <em>int </em>ccidx, <em>optional bool</em> selectedIn, <em>optional bool</em> mutedIn, <em>optional </em>ppqposIn, <em>optional int</em> chanmsgIn, <em>optional int</em> chanIn, <em>optional int</em> msg2In, <em>optional int</em> msg3In, <em>optional bool</em> noSortIn)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_SetCC(<em>MediaItem_Take</em> take, <em>integer</em> ccidx, <em>optional boolean</em> selectedIn, <em>optional boolean</em> mutedIn, <em>optional number </em>ppqposIn, <em>optional integer</em> chanmsgIn, <em>optional integer</em> chanIn, <em>optional integer</em> msg2In, <em>optional integer</em> msg3In, <em>optional boolean</em> noSortIn)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_SetCC(<em>MediaItem_Take</em> take, <em>Int</em> ccidx, <em>const bool</em> selectedInOptional, <em>const bool</em> mutedInOptional, <em>const double</em> ppqposInOptional, <em>const int</em> chanmsgInOptional, <em>const int</em> chanInOptional, <em>const int</em> msg2InOptional, <em>const int</em> msg3InOptional, <em>const bool</em> noSortInOptional)</code></div>
	<p>Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.</p>
</div>

<div class="function_definition" id="MIDI_SetCCShape">
	<div class="c_func"><code>bool MIDI_SetCCShape(MediaItem_Take* take, int ccidx, int shape, double beztension, const bool* noSortInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_SetCCShape(<em>MediaItem_Take</em> take, <em>int </em>ccidx, <em>int </em>shape, beztension, <em>optional bool</em> noSortIn)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_SetCCShape(<em>MediaItem_Take</em> take, <em>integer</em> ccidx, <em>integer</em> shape, <em>number</em> beztension, <em>optional boolean</em> noSortIn)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_SetCCShape(<em>MediaItem_Take</em> take, <em>Int</em> ccidx, <em>Int</em> shape, <em>Float</em> beztension, <em>const bool</em> noSortInOptional)</code></div>
	<p>Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See <a href="#MIDI_SetCC">MIDI_SetCC</a>, <a href="#MIDI_GetCCShape">MIDI_GetCCShape</a></p>
</div>

<div class="function_definition" id="MIDI_SetEvt">
	<div class="c_func"><code>bool MIDI_SetEvt(MediaItem_Take* take, int evtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_SetEvt(<em>MediaItem_Take</em> take, <em>int </em>evtidx, <em>optional bool</em> selectedIn, <em>optional bool</em> mutedIn, <em>optional </em>ppqposIn, <em>optional </em>"msg", <em>optional bool</em> noSortIn)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_SetEvt(<em>MediaItem_Take</em> take, <em>integer</em> evtidx, <em>optional boolean</em> selectedIn, <em>optional boolean</em> mutedIn, <em>optional number </em>ppqposIn, <em>optional </em><em>string</em> msg, <em>optional boolean</em> noSortIn)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_SetEvt(<em>MediaItem_Take</em> take, <em>Int</em> evtidx, <em>const bool</em> selectedInOptional, <em>const bool</em> mutedInOptional, <em>const double</em> ppqposInOptional, <em>String</em> msgOptional, <em>Int</em> msgOptional_sz, <em>const bool</em> noSortInOptional)</code></div>
	<p>Set MIDI event properties. Properties passed as NULL will not be set.  set noSort if setting multiple events, then call MIDI_Sort when done.</p>
</div>

<div class="function_definition" id="MIDI_SetItemExtents">
	<div class="c_func"><code>bool MIDI_SetItemExtents(MediaItem* item, double startQN, double endQN)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_SetItemExtents(<em>MediaItem</em> item, startQN, endQN)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_SetItemExtents(<em>MediaItem</em> item, <em>number</em> startQN, <em>number</em> endQN)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_SetItemExtents(<em>MediaItem</em> item, <em>Float</em> startQN, <em>Float</em> endQN)</code></div>
	<p>Set the start/end positions of a media item that contains a MIDI take.</p>
</div>

<div class="function_definition" id="MIDI_SetNote">
	<div class="c_func"><code>bool MIDI_SetNote(MediaItem_Take* take, int noteidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* startppqposInOptional, const double* endppqposInOptional, const int* chanInOptional, const int* pitchInOptional, const int* velInOptional, const bool* noSortInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_SetNote(<em>MediaItem_Take</em> take, <em>int </em>noteidx, <em>optional bool</em> selectedIn, <em>optional bool</em> mutedIn, <em>optional </em>startppqposIn, <em>optional </em>endppqposIn, <em>optional int</em> chanIn, <em>optional int</em> pitchIn, <em>optional int</em> velIn, <em>optional bool</em> noSortIn)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_SetNote(<em>MediaItem_Take</em> take, <em>integer</em> noteidx, <em>optional boolean</em> selectedIn, <em>optional boolean</em> mutedIn, <em>optional number </em>startppqposIn, <em>optional number </em>endppqposIn, <em>optional integer</em> chanIn, <em>optional integer</em> pitchIn, <em>optional integer</em> velIn, <em>optional boolean</em> noSortIn)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_SetNote(<em>MediaItem_Take</em> take, <em>Int</em> noteidx, <em>const bool</em> selectedInOptional, <em>const bool</em> mutedInOptional, <em>const double</em> startppqposInOptional, <em>const double</em> endppqposInOptional, <em>const int</em> chanInOptional, <em>const int</em> pitchInOptional, <em>const int</em> velInOptional, <em>const bool</em> noSortInOptional)</code></div>
	<p>Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.</p>
</div>

<div class="function_definition" id="MIDI_SetTextSysexEvt">
	<div class="c_func"><code>bool MIDI_SetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* typeInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> MIDI_SetTextSysexEvt(<em>MediaItem_Take</em> take, <em>int </em>textsyxevtidx, <em>optional bool</em> selectedIn, <em>optional bool</em> mutedIn, <em>optional </em>ppqposIn, <em>optional int</em> typeIn, <em>optional </em>"msg", <em>optional bool</em> noSortIn)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDI_SetTextSysexEvt(<em>MediaItem_Take</em> take, <em>integer</em> textsyxevtidx, <em>optional boolean</em> selectedIn, <em>optional boolean</em> mutedIn, <em>optional number </em>ppqposIn, <em>optional integer</em> typeIn, <em>optional </em><em>string</em> msg, <em>optional boolean</em> noSortIn)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDI_SetTextSysexEvt(<em>MediaItem_Take</em> take, <em>Int</em> textsyxevtidx, <em>const bool</em> selectedInOptional, <em>const bool</em> mutedInOptional, <em>const double</em> ppqposInOptional, <em>const int</em> typeInOptional, <em>String</em> msgOptional, <em>Int</em> msgOptional_sz, <em>const bool</em> noSortInOptional)</code></div>
	<p>Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. set noSort if setting multiple events, then call MIDI_Sort when done.</p>
</div>

<div class="function_definition" id="MIDI_Sort">
	<div class="c_func"><code>void MIDI_Sort(MediaItem_Take* take)</code></div>
	<div class="e_func"><code>MIDI_Sort(<em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code>reaper.MIDI_Sort(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code>RPR_MIDI_Sort(<em>MediaItem_Take</em> take)</code></div>
	<p>Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.</p>
</div>

<div class="function_definition" id="MIDIEditor_EnumTakes">
	<div class="c_func"><code>MediaItem_Take* MIDIEditor_EnumTakes(HWND midieditor, int takeindex, bool editable_only)</code></div>
	<div class="e_func"><code><em>MediaItem_Take</em>  MIDIEditor_EnumTakes(<em>HWND</em> midieditor, <em>int </em>takeindex, <em>bool </em>editable_only)</code></div>
	<div class="l_func"><code><em>MediaItem_Take</em> reaper.MIDIEditor_EnumTakes(<em>HWND</em> midieditor, <em>integer</em> takeindex, <em>boolean</em> editable_only)</code></div>
	<div class="p_func"><code><em>MediaItem_Take</em>  RPR_MIDIEditor_EnumTakes(<em>HWND</em> midieditor, <em>Int</em> takeindex, <em>Boolean</em> editable_only)</code></div>
	<p>list the takes that are currently being edited in this MIDI editor, starting with the active take. See <a href="#MIDIEditor_GetTake">MIDIEditor_GetTake</a></p>
</div>

<div class="function_definition" id="MIDIEditor_GetActive">
	<div class="c_func"><code>HWND MIDIEditor_GetActive()</code></div>
	<div class="e_func"><code><em>HWND</em>  MIDIEditor_GetActive()</code></div>
	<div class="l_func"><code><em>HWND</em> reaper.MIDIEditor_GetActive()</code></div>
	<div class="p_func"><code><em>HWND</em>  RPR_MIDIEditor_GetActive()</code></div>
	<p>get a pointer to the focused MIDI editor window<br>
see <a href="#MIDIEditor_GetMode">MIDIEditor_GetMode</a>, <a href="#MIDIEditor_OnCommand">MIDIEditor_OnCommand</a></p>
</div>

<div class="function_definition" id="MIDIEditor_GetMode">
	<div class="c_func"><code>int MIDIEditor_GetMode(HWND midieditor)</code></div>
	<div class="e_func"><code><em>int </em> MIDIEditor_GetMode(<em>HWND</em> midieditor)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.MIDIEditor_GetMode(<em>HWND</em> midieditor)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_MIDIEditor_GetMode(<em>HWND</em> midieditor)</code></div>
	<p>get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)<br>
see <a href="#MIDIEditor_GetActive">MIDIEditor_GetActive</a>, <a href="#MIDIEditor_OnCommand">MIDIEditor_OnCommand</a></p>
</div>

<div class="function_definition" id="MIDIEditor_GetSetting_int">
	<div class="c_func"><code>int MIDIEditor_GetSetting_int(HWND midieditor, const char* setting_desc)</code></div>
	<div class="e_func"><code><em>int </em> MIDIEditor_GetSetting_int(<em>HWND</em> midieditor, "setting_desc")</code></div>
	<div class="l_func"><code><em>integer</em> reaper.MIDIEditor_GetSetting_int(<em>HWND</em> midieditor, <em>string</em> setting_desc)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_MIDIEditor_GetSetting_int(<em>HWND</em> midieditor, <em>String</em> setting_desc)</code></div>
	<p>Get settings from a MIDI editor. setting_desc can be:<br>
snap_enabled: returns 0 or 1<br>
active_note_row: returns 0-127<br>
last_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x210=media item lane<br>
default_note_vel: returns 0-127<br>
default_note_chan: returns 0-15<br>
default_note_len: returns default length in MIDI ticks<br>
scale_enabled: returns 0-1<br>
scale_root: returns 0-12 (0=C)<br>
list_cnt: if viewing list view, returns event count<br>
if setting_desc is unsupported, the function returns -1.<br>
See <a href="#MIDIEditor_SetSetting_int">MIDIEditor_SetSetting_int</a>, <a href="#MIDIEditor_GetActive">MIDIEditor_GetActive</a>, <a href="#MIDIEditor_GetSetting_str">MIDIEditor_GetSetting_str</a><br>
</p>
</div>

<div class="function_definition" id="MIDIEditor_GetSetting_str">
	<div class="c_func"><code>bool MIDIEditor_GetSetting_str(HWND midieditor, const char* setting_desc, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> MIDIEditor_GetSetting_str(<em>HWND</em> midieditor, "setting_desc", #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.MIDIEditor_GetSetting_str(<em>HWND</em> midieditor, <em>string</em> setting_desc)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>HWND</em> midieditor, <em>String</em> setting_desc, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_MIDIEditor_GetSetting_str(midieditor, setting_desc, bufOut, bufOut_sz)</code></div>
	<p>Get settings from a MIDI editor. setting_desc can be:<br>
last_clicked_cc_lane: returns text description ("velocity", "pitch", etc)<br>
scale: returns the scale record, for example "102034050607" for a major scale<br>
list_X: if viewing list view, returns string describing event at row X (0-based). String will have a list of key=value pairs, e.g. 'pos=4.0 len=4.0 offvel=127 msg=90317F'. pos/len times are in QN, len/offvel may not be present if event is not a note. other keys which may be present include pos_pq/len_pq, sel, mute, ccval14, ccshape, ccbeztension.<br>
if setting_desc is unsupported, the function returns false.<br>
See <a href="#MIDIEditor_GetActive">MIDIEditor_GetActive</a>, <a href="#MIDIEditor_GetSetting_int">MIDIEditor_GetSetting_int</a><br>
</p>
</div>

<div class="function_definition" id="MIDIEditor_GetTake">
	<div class="c_func"><code>MediaItem_Take* MIDIEditor_GetTake(HWND midieditor)</code></div>
	<div class="e_func"><code><em>MediaItem_Take</em>  MIDIEditor_GetTake(<em>HWND</em> midieditor)</code></div>
	<div class="l_func"><code><em>MediaItem_Take</em> reaper.MIDIEditor_GetTake(<em>HWND</em> midieditor)</code></div>
	<div class="p_func"><code><em>MediaItem_Take</em>  RPR_MIDIEditor_GetTake(<em>HWND</em> midieditor)</code></div>
	<p>get the take that is currently being edited in this MIDI editor. see <a href="#MIDIEditor_EnumTakes">MIDIEditor_EnumTakes</a></p>
</div>

<div class="function_definition" id="MIDIEditor_LastFocused_OnCommand">
	<div class="c_func"><code>bool MIDIEditor_LastFocused_OnCommand(int command_id, bool islistviewcommand)</code></div>
	<div class="e_func"><code><em>bool </em> MIDIEditor_LastFocused_OnCommand(<em>int </em>command_id, <em>bool </em>islistviewcommand)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDIEditor_LastFocused_OnCommand(<em>integer</em> command_id, <em>boolean</em> islistviewcommand)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDIEditor_LastFocused_OnCommand(<em>Int</em> command_id, <em>Boolean</em> islistviewcommand)</code></div>
	<p>Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.<br>
see <a href="#MIDIEditor_OnCommand">MIDIEditor_OnCommand</a></p>
</div>

<div class="function_definition" id="MIDIEditor_OnCommand">
	<div class="c_func"><code>bool MIDIEditor_OnCommand(HWND midieditor, int command_id)</code></div>
	<div class="e_func"><code><em>bool </em> MIDIEditor_OnCommand(<em>HWND</em> midieditor, <em>int </em>command_id)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDIEditor_OnCommand(<em>HWND</em> midieditor, <em>integer</em> command_id)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDIEditor_OnCommand(<em>HWND</em> midieditor, <em>Int</em> command_id)</code></div>
	<p>Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).<br>
see <a href="#MIDIEditor_GetActive">MIDIEditor_GetActive</a>, <a href="#MIDIEditor_LastFocused_OnCommand">MIDIEditor_LastFocused_OnCommand</a></p>
</div>

<div class="function_definition" id="MIDIEditor_SetSetting_int">
	<div class="c_func"><code>bool MIDIEditor_SetSetting_int(HWND midieditor, const char* setting_desc, int setting)</code></div>
	<div class="e_func"><code><em>bool </em> MIDIEditor_SetSetting_int(<em>HWND</em> midieditor, "setting_desc", <em>int </em>setting)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MIDIEditor_SetSetting_int(<em>HWND</em> midieditor, <em>string</em> setting_desc, <em>integer</em> setting)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MIDIEditor_SetSetting_int(<em>HWND</em> midieditor, <em>String</em> setting_desc, <em>Int</em> setting)</code></div>
	<p>Set settings for a MIDI editor. setting_desc can be:<br>
active_note_row: 0-127<br>
See <a href="#MIDIEditor_GetSetting_int">MIDIEditor_GetSetting_int</a><br>
</p>
</div>

<div class="function_definition" id="mkpanstr">
	<div class="c_func"><code>void mkpanstr(char* strNeed64, double pan)</code></div>
	<div class="e_func"><code>mkpanstr(#strNeed64, pan)</code></div>
	<div class="l_func"><code><em>string </em>strNeed64 = reaper.mkpanstr(<em>string </em>strNeed64, <em>number</em> pan)</code></div>
	<div class="p_func"><code>(<em>String</em> strNeed64, <em>Float</em> pan) = RPR_mkpanstr(strNeed64, pan)</code></div>
</div>

<div class="function_definition" id="mkvolpanstr">
	<div class="c_func"><code>void mkvolpanstr(char* strNeed64, double vol, double pan)</code></div>
	<div class="e_func"><code>mkvolpanstr(#strNeed64, vol, pan)</code></div>
	<div class="l_func"><code><em>string </em>strNeed64 = reaper.mkvolpanstr(<em>string </em>strNeed64, <em>number</em> vol, <em>number</em> pan)</code></div>
	<div class="p_func"><code>(<em>String</em> strNeed64, <em>Float</em> vol, <em>Float</em> pan) = RPR_mkvolpanstr(strNeed64, vol, pan)</code></div>
</div>

<div class="function_definition" id="mkvolstr">
	<div class="c_func"><code>void mkvolstr(char* strNeed64, double vol)</code></div>
	<div class="e_func"><code>mkvolstr(#strNeed64, vol)</code></div>
	<div class="l_func"><code><em>string </em>strNeed64 = reaper.mkvolstr(<em>string </em>strNeed64, <em>number</em> vol)</code></div>
	<div class="p_func"><code>(<em>String</em> strNeed64, <em>Float</em> vol) = RPR_mkvolstr(strNeed64, vol)</code></div>
</div>

<div class="function_definition" id="MoveEditCursor">
	<div class="c_func"><code>void MoveEditCursor(double adjamt, bool dosel)</code></div>
	<div class="e_func"><code>MoveEditCursor(adjamt, <em>bool </em>dosel)</code></div>
	<div class="l_func"><code>reaper.MoveEditCursor(<em>number</em> adjamt, <em>boolean</em> dosel)</code></div>
	<div class="p_func"><code>RPR_MoveEditCursor(<em>Float</em> adjamt, <em>Boolean</em> dosel)</code></div>
</div>

<div class="function_definition" id="MoveMediaItemToTrack">
	<div class="c_func"><code>bool MoveMediaItemToTrack(MediaItem* item, MediaTrack* desttr)</code></div>
	<div class="e_func"><code><em>bool </em> MoveMediaItemToTrack(<em>MediaItem</em> item, <em>MediaTrack</em> desttr)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.MoveMediaItemToTrack(<em>MediaItem</em> item, <em>MediaTrack</em> desttr)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_MoveMediaItemToTrack(<em>MediaItem</em> item, <em>MediaTrack</em> desttr)</code></div>
	<p>returns TRUE if move succeeded</p>
</div>

<div class="function_definition" id="MuteAllTracks">
	<div class="c_func"><code>void MuteAllTracks(bool mute)</code></div>
	<div class="e_func"><code>MuteAllTracks(<em>bool </em>mute)</code></div>
	<div class="l_func"><code>reaper.MuteAllTracks(<em>boolean</em> mute)</code></div>
	<div class="p_func"><code>RPR_MuteAllTracks(<em>Boolean</em> mute)</code></div>
</div>

<div class="function_definition" id="my_getViewport">
	<div class="c_func"><code>void my_getViewport(RECT* r, const RECT* sr, bool wantWorkArea)</code></div>
	<div class="e_func"><code>my_getViewport(<em>int &</em>r.left, <em>int &</em>r.top, <em>int &</em>r.right, <em>int &</em>r.bot, <em>int</em> sr.left, <em>int</em> sr.top, <em>int</em> sr.right, <em>int</em> sr.bot, <em>bool </em>wantWorkArea)</code></div>
	<div class="l_func"><code>reaper.my_getViewport(<em>integer</em>r.left, <em>integer</em>r.top, <em>integer</em>r.right, <em>integer</em>r.bot, <em>integer</em> sr.left, <em>integer</em> sr.top, <em>integer</em> sr.right, <em>integer</em> sr.bot, <em>boolean</em> wantWorkArea)</code></div>
	<div class="p_func"><code>RPR_my_getViewport(<em>RECT</em> r, <em>const RECT</em> sr, <em>Boolean</em> wantWorkArea)</code></div>
</div>

<div class="function_definition" id="NamedCommandLookup">
	<div class="c_func"><code>int NamedCommandLookup(const char* command_name)</code></div>
	<div class="e_func"><code><em>int </em> NamedCommandLookup("command_name")</code></div>
	<div class="l_func"><code><em>integer</em> reaper.NamedCommandLookup(<em>string</em> command_name)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_NamedCommandLookup(<em>String</em> command_name)</code></div>
	<p>Get the command ID number for named command that was registered by an extension such as "_SWS_ABOUT" or "_113088d11ae641c193a2b7ede3041ad5" for a ReaScript or a custom action.</p>
</div>

<div class="function_definition" id="OnPauseButton">
	<div class="c_func"><code>void OnPauseButton()</code></div>
	<div class="e_func"><code>OnPauseButton()</code></div>
	<div class="l_func"><code>reaper.OnPauseButton()</code></div>
	<div class="p_func"><code>RPR_OnPauseButton()</code></div>
	<p>direct way to simulate pause button hit</p>
</div>

<div class="function_definition" id="OnPauseButtonEx">
	<div class="c_func"><code>void OnPauseButtonEx(ReaProject* proj)</code></div>
	<div class="e_func"><code>OnPauseButtonEx(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code>reaper.OnPauseButtonEx(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code>RPR_OnPauseButtonEx(<em>ReaProject</em> proj)</code></div>
	<p>direct way to simulate pause button hit</p>
</div>

<div class="function_definition" id="OnPlayButton">
	<div class="c_func"><code>void OnPlayButton()</code></div>
	<div class="e_func"><code>OnPlayButton()</code></div>
	<div class="l_func"><code>reaper.OnPlayButton()</code></div>
	<div class="p_func"><code>RPR_OnPlayButton()</code></div>
	<p>direct way to simulate play button hit</p>
</div>

<div class="function_definition" id="OnPlayButtonEx">
	<div class="c_func"><code>void OnPlayButtonEx(ReaProject* proj)</code></div>
	<div class="e_func"><code>OnPlayButtonEx(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code>reaper.OnPlayButtonEx(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code>RPR_OnPlayButtonEx(<em>ReaProject</em> proj)</code></div>
	<p>direct way to simulate play button hit</p>
</div>

<div class="function_definition" id="OnStopButton">
	<div class="c_func"><code>void OnStopButton()</code></div>
	<div class="e_func"><code>OnStopButton()</code></div>
	<div class="l_func"><code>reaper.OnStopButton()</code></div>
	<div class="p_func"><code>RPR_OnStopButton()</code></div>
	<p>direct way to simulate stop button hit</p>
</div>

<div class="function_definition" id="OnStopButtonEx">
	<div class="c_func"><code>void OnStopButtonEx(ReaProject* proj)</code></div>
	<div class="e_func"><code>OnStopButtonEx(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code>reaper.OnStopButtonEx(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code>RPR_OnStopButtonEx(<em>ReaProject</em> proj)</code></div>
	<p>direct way to simulate stop button hit</p>
</div>

<div class="function_definition" id="OpenColorThemeFile">
	<div class="c_func"><code>bool OpenColorThemeFile(const char* fn)</code></div>
	<div class="e_func"><code><em>bool </em> OpenColorThemeFile("fn")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.OpenColorThemeFile(<em>string</em> fn)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_OpenColorThemeFile(<em>String</em> fn)</code></div>
</div>

<div class="function_definition" id="OpenMediaExplorer">
	<div class="c_func"><code>HWND OpenMediaExplorer(const char* mediafn, bool play)</code></div>
	<div class="e_func"><code><em>HWND</em>  OpenMediaExplorer("mediafn", <em>bool </em>play)</code></div>
	<div class="l_func"><code><em>HWND</em> reaper.OpenMediaExplorer(<em>string</em> mediafn, <em>boolean</em> play)</code></div>
	<div class="p_func"><code><em>HWND</em>  RPR_OpenMediaExplorer(<em>String</em> mediafn, <em>Boolean</em> play)</code></div>
	<p>Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it.</p>
</div>

<div class="function_definition" id="OscLocalMessageToHost">
	<div class="c_func"><code>void OscLocalMessageToHost(const char* message, const double* valueInOptional)</code></div>
	<div class="e_func"><code>OscLocalMessageToHost("message", <em>optional </em>valueIn)</code></div>
	<div class="l_func"><code>reaper.OscLocalMessageToHost(<em>string</em> message, <em>optional number </em>valueIn)</code></div>
	<div class="p_func"><code>RPR_OscLocalMessageToHost(<em>String</em> message, <em>const double</em> valueInOptional)</code></div>
	<p>Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns.</p>
</div>

<div class="function_definition" id="parse_timestr">
	<div class="c_func"><code>double parse_timestr(const char* buf)</code></div>
	<div class="e_func"><code><em>double </em> parse_timestr("buf")</code></div>
	<div class="l_func"><code><em>number</em> reaper.parse_timestr(<em>string</em> buf)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_parse_timestr(<em>String</em> buf)</code></div>
	<p>Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See <a href="#parse_timestr_pos">parse_timestr_pos</a>, <a href="#parse_timestr_len">parse_timestr_len</a>.</p>
</div>

<div class="function_definition" id="parse_timestr_len">
	<div class="c_func"><code>double parse_timestr_len(const char* buf, double offset, int modeoverride)</code></div>
	<div class="e_func"><code><em>double </em> parse_timestr_len("buf", offset, <em>int </em>modeoverride)</code></div>
	<div class="l_func"><code><em>number</em> reaper.parse_timestr_len(<em>string</em> buf, <em>number</em> offset, <em>integer</em> modeoverride)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_parse_timestr_len(<em>String</em> buf, <em>Float</em> offset, <em>Int</em> modeoverride)</code></div>
	<p>time formatting mode overrides: -1=proj default.<br>
0=time<br>
1=measures.beats + time<br>
2=measures.beats<br>
3=seconds<br>
4=samples<br>
5=h:m:s:f<br>
</p>
</div>

<div class="function_definition" id="parse_timestr_pos">
	<div class="c_func"><code>double parse_timestr_pos(const char* buf, int modeoverride)</code></div>
	<div class="e_func"><code><em>double </em> parse_timestr_pos("buf", <em>int </em>modeoverride)</code></div>
	<div class="l_func"><code><em>number</em> reaper.parse_timestr_pos(<em>string</em> buf, <em>integer</em> modeoverride)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_parse_timestr_pos(<em>String</em> buf, <em>Int</em> modeoverride)</code></div>
	<p>Parse time string, time formatting mode overrides: -1=proj default.<br>
0=time<br>
1=measures.beats + time<br>
2=measures.beats<br>
3=seconds<br>
4=samples<br>
5=h:m:s:f<br>
</p>
</div>

<div class="function_definition" id="parsepanstr">
	<div class="c_func"><code>double parsepanstr(const char* str)</code></div>
	<div class="e_func"><code><em>double </em> parsepanstr("str")</code></div>
	<div class="l_func"><code><em>number</em> reaper.parsepanstr(<em>string</em> str)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_parsepanstr(<em>String</em> str)</code></div>
</div>

<div class="function_definition" id="PCM_Sink_Enum">
	<div class="c_func"><code>unsigned int PCM_Sink_Enum(int idx, const char** descstrOut)</code></div>
	<div class="e_func"><code><em>uint </em> PCM_Sink_Enum(<em>int </em>idx, #descstr)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>descstr = reaper.PCM_Sink_Enum(<em>integer</em> idx)</code></div>
	<div class="p_func"><code><em>Unknown</em>  RPR_PCM_Sink_Enum(<em>Int</em> idx, <em>String</em> descstrOut)</code></div>
</div>

<div class="function_definition" id="PCM_Sink_GetExtension">
	<div class="c_func"><code>const char* PCM_Sink_GetExtension(const char* data, int data_sz)</code></div>
	<div class="e_func"><code>bool  PCM_Sink_GetExtension(#retval, "data")</code></div>
	<div class="l_func"><code><em>string</em> reaper.PCM_Sink_GetExtension(<em>string</em> data)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_PCM_Sink_GetExtension(<em>String</em> data, <em>Int</em> data_sz)</code></div>
</div>

<div class="function_definition" id="PCM_Sink_ShowConfig">
	<div class="c_func"><code>HWND PCM_Sink_ShowConfig(const char* cfg, int cfg_sz, HWND hwndParent)</code></div>
	<div class="e_func"><code><em>HWND</em>  PCM_Sink_ShowConfig("cfg", <em>HWND</em> hwndParent)</code></div>
	<div class="l_func"><code><em>HWND</em> reaper.PCM_Sink_ShowConfig(<em>string</em> cfg, <em>HWND</em> hwndParent)</code></div>
	<div class="p_func"><code><em>HWND</em>  RPR_PCM_Sink_ShowConfig(<em>String</em> cfg, <em>Int</em> cfg_sz, <em>HWND</em> hwndParent)</code></div>
</div>

<div class="function_definition" id="PCM_Source_BuildPeaks">
	<div class="c_func"><code>int PCM_Source_BuildPeaks(PCM_source* src, int mode)</code></div>
	<div class="e_func"><code><em>int </em> PCM_Source_BuildPeaks(<em>PCM_source</em> src, <em>int </em>mode)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.PCM_Source_BuildPeaks(<em>PCM_source</em> src, <em>integer</em> mode)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_PCM_Source_BuildPeaks(<em>PCM_source</em> src, <em>Int</em> mode)</code></div>
	<p>Calls and returns PCM_source::PeaksBuild_Begin() if mode=0, PeaksBuild_Run() if mode=1, and PeaksBuild_Finish() if mode=2. Normal use is to call PCM_Source_BuildPeaks(src,0), and if that returns nonzero, call PCM_Source_BuildPeaks(src,1) periodically until it returns zero (it returns the percentage of the file remaining), then call PCM_Source_BuildPeaks(src,2) to finalize. If PCM_Source_BuildPeaks(src,0) returns zero, then no further action is necessary.</p>
</div>

<div class="function_definition" id="PCM_Source_CreateFromFile">
	<div class="c_func"><code>PCM_source* PCM_Source_CreateFromFile(const char* filename)</code></div>
	<div class="e_func"><code><em>PCM_source</em>  PCM_Source_CreateFromFile("filename")</code></div>
	<div class="l_func"><code><em>PCM_source</em> reaper.PCM_Source_CreateFromFile(<em>string</em> filename)</code></div>
	<div class="p_func"><code><em>PCM_source</em>  RPR_PCM_Source_CreateFromFile(<em>String</em> filename)</code></div>
	<p>See <a href="#PCM_Source_CreateFromFileEx">PCM_Source_CreateFromFileEx</a>.</p>
</div>

<div class="function_definition" id="PCM_Source_CreateFromFileEx">
	<div class="c_func"><code>PCM_source* PCM_Source_CreateFromFileEx(const char* filename, bool forcenoMidiImp)</code></div>
	<div class="e_func"><code><em>PCM_source</em>  PCM_Source_CreateFromFileEx("filename", <em>bool </em>forcenoMidiImp)</code></div>
	<div class="l_func"><code><em>PCM_source</em> reaper.PCM_Source_CreateFromFileEx(<em>string</em> filename, <em>boolean</em> forcenoMidiImp)</code></div>
	<div class="p_func"><code><em>PCM_source</em>  RPR_PCM_Source_CreateFromFileEx(<em>String</em> filename, <em>Boolean</em> forcenoMidiImp)</code></div>
	<p>Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.</p>
</div>

<div class="function_definition" id="PCM_Source_CreateFromType">
	<div class="c_func"><code>PCM_source* PCM_Source_CreateFromType(const char* sourcetype)</code></div>
	<div class="e_func"><code><em>PCM_source</em>  PCM_Source_CreateFromType("sourcetype")</code></div>
	<div class="l_func"><code><em>PCM_source</em> reaper.PCM_Source_CreateFromType(<em>string</em> sourcetype)</code></div>
	<div class="p_func"><code><em>PCM_source</em>  RPR_PCM_Source_CreateFromType(<em>String</em> sourcetype)</code></div>
	<p>Create a PCM_source from a "type" (use this if you're going to load its state via LoadState/ProjectStateContext).<br>
Valid types include "WAVE", "MIDI", or whatever plug-ins define as well.</p>
</div>

<div class="function_definition" id="PCM_Source_Destroy">
	<div class="c_func"><code>void PCM_Source_Destroy(PCM_source* src)</code></div>
	<div class="e_func"><code>PCM_Source_Destroy(<em>PCM_source</em> src)</code></div>
	<div class="l_func"><code>reaper.PCM_Source_Destroy(<em>PCM_source</em> src)</code></div>
	<div class="p_func"><code>RPR_PCM_Source_Destroy(<em>PCM_source</em> src)</code></div>
	<p>Deletes a PCM_source -- be sure that you remove any project reference before deleting a source</p>
</div>

<div class="function_definition" id="PCM_Source_GetPeaks">
	<div class="c_func"><code>int PCM_Source_GetPeaks(PCM_source* src, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)</code></div>
	<div class="e_func"><code><em>int </em> PCM_Source_GetPeaks(<em>PCM_source</em> src, peakrate, starttime, <em>int </em>numchannels, <em>int </em>numsamplesperchannel, <em>int </em>want_extra_type, <em>buffer_ptr </em>buf)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.PCM_Source_GetPeaks(<em>PCM_source</em> src, <em>number</em> peakrate, <em>number</em> starttime, <em>integer</em> numchannels, <em>integer</em> numsamplesperchannel, <em>integer</em> want_extra_type, <em>reaper.array </em>buf)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>PCM_source</em> src, <em>Float</em> peakrate, <em>Float</em> starttime, <em>Int</em> numchannels, <em>Int</em> numsamplesperchannel, <em>Int</em> want_extra_type, <em>Float</em> buf) = RPR_PCM_Source_GetPeaks(src, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)</code></div>
	<p>Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.</p>
</div>

<div class="function_definition" id="PCM_Source_GetSectionInfo">
	<div class="c_func"><code>bool PCM_Source_GetSectionInfo(PCM_source* src, double* offsOut, double* lenOut, bool* revOut)</code></div>
	<div class="e_func"><code><em>bool </em> PCM_Source_GetSectionInfo(<em>PCM_source</em> src, <em>&amp;</em>offs, <em>&amp;</em>len, <em>bool &amp;</em>rev)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>offs, <em>number </em>len, <em>boolean </em>rev = reaper.PCM_Source_GetSectionInfo(<em>PCM_source</em> src)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>PCM_source</em> src, <em>Float</em> offsOut, <em>Float</em> lenOut, <em>Boolean</em> revOut) = RPR_PCM_Source_GetSectionInfo(src, offsOut, lenOut, revOut)</code></div>
	<p>If a section/reverse block, retrieves offset/len/reverse. return true if success</p>
</div>

<div class="function_definition" id="PluginWantsAlwaysRunFx">
	<div class="c_func"><code>void PluginWantsAlwaysRunFx(int amt)</code></div>
	<div class="e_func"><code>PluginWantsAlwaysRunFx(<em>int </em>amt)</code></div>
	<div class="l_func"><code>reaper.PluginWantsAlwaysRunFx(<em>integer</em> amt)</code></div>
	<div class="p_func"><code>RPR_PluginWantsAlwaysRunFx(<em>Int</em> amt)</code></div>
</div>

<div class="function_definition" id="PreventUIRefresh">
	<div class="c_func"><code>void PreventUIRefresh(int prevent_count)</code></div>
	<div class="e_func"><code>PreventUIRefresh(<em>int </em>prevent_count)</code></div>
	<div class="l_func"><code>reaper.PreventUIRefresh(<em>integer</em> prevent_count)</code></div>
	<div class="p_func"><code>RPR_PreventUIRefresh(<em>Int</em> prevent_count)</code></div>
	<p>adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur</p>
</div>

<div class="function_definition" id="PromptForAction">
	<div class="c_func"><code>int PromptForAction(int session_mode, int init_id, int section_id)</code></div>
	<div class="e_func"><code><em>int </em> PromptForAction(<em>int </em>session_mode, <em>int </em>init_id, <em>int </em>section_id)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.PromptForAction(<em>integer</em> session_mode, <em>integer</em> init_id, <em>integer</em> section_id)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_PromptForAction(<em>Int</em> session_mode, <em>Int</em> init_id, <em>Int</em> section_id)</code></div>
	<p>Uses the action list to choose an action. Call with session_mode=1 to create a session (init_id will be the initial action to select, or 0), then poll with session_mode=0, checking return value for user-selected action (will return 0 if no action selected yet, or -1 if the action window is no longer available). When finished, call with session_mode=-1.</p>
</div>

<div class="function_definition" id="ReaScriptError">
	<div class="c_func"><code>void ReaScriptError(const char* errmsg)</code></div>
	<div class="e_func"><code>ReaScriptError("errmsg")</code></div>
	<div class="l_func"><code>reaper.ReaScriptError(<em>string</em> errmsg)</code></div>
	<div class="p_func"><code>RPR_ReaScriptError(<em>String</em> errmsg)</code></div>
	<p>Causes REAPER to display the error message after the current ReaScript finishes. If called within a Lua context and errmsg has a ! prefix, script execution will be terminated.</p>
</div>

<div class="function_definition" id="RecursiveCreateDirectory">
	<div class="c_func"><code>int RecursiveCreateDirectory(const char* path, size_t ignored)</code></div>
	<div class="e_func"><code><em>int </em> RecursiveCreateDirectory("path", <em>size_t </em>ignored)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.RecursiveCreateDirectory(<em>string</em> path, <em>integer</em> ignored)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_RecursiveCreateDirectory(<em>String</em> path, <em>Unknown</em> ignored)</code></div>
	<p>returns positive value on success, 0 on failure.</p>
</div>

<div class="function_definition" id="reduce_open_files">
	<div class="c_func"><code>int reduce_open_files(int flags)</code></div>
	<div class="e_func"><code><em>int </em> reduce_open_files(<em>int </em>flags)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.reduce_open_files(<em>integer</em> flags)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_reduce_open_files(<em>Int</em> flags)</code></div>
	<p>garbage-collects extra open files and closes them. if flags has 1 set, this is done incrementally (call this from a regular timer, if desired). if flags has 2 set, files are aggressively closed (they may need to be re-opened very soon). returns number of files closed by this call.</p>
</div>

<div class="function_definition" id="RefreshToolbar">
	<div class="c_func"><code>void RefreshToolbar(int command_id)</code></div>
	<div class="e_func"><code>RefreshToolbar(<em>int </em>command_id)</code></div>
	<div class="l_func"><code>reaper.RefreshToolbar(<em>integer</em> command_id)</code></div>
	<div class="p_func"><code>RPR_RefreshToolbar(<em>Int</em> command_id)</code></div>
	<p>See <a href="#RefreshToolbar2">RefreshToolbar2</a>.</p>
</div>

<div class="function_definition" id="RefreshToolbar2">
	<div class="c_func"><code>void RefreshToolbar2(int section_id, int command_id)</code></div>
	<div class="e_func"><code>RefreshToolbar2(<em>int </em>section_id, <em>int </em>command_id)</code></div>
	<div class="l_func"><code>reaper.RefreshToolbar2(<em>integer</em> section_id, <em>integer</em> command_id)</code></div>
	<div class="p_func"><code>RPR_RefreshToolbar2(<em>Int</em> section_id, <em>Int</em> command_id)</code></div>
	<p>Refresh the toolbar button states of a toggle action.</p>
</div>

<div class="function_definition" id="relative_fn">
	<div class="c_func"><code>void relative_fn(const char* in, char* out, int out_sz)</code></div>
	<div class="e_func"><code>relative_fn("in", #out)</code></div>
	<div class="l_func"><code><em>string </em>out = reaper.relative_fn(<em>string</em> in, <em>string </em>out)</code></div>
	<div class="p_func"><code>(<em>String</em> in, <em>String</em> out, <em>Int</em> out_sz) = RPR_relative_fn(in, out, out_sz)</code></div>
	<p>Makes a filename "in" relative to the current project, if any.</p>
</div>

<div class="function_definition" id="RemoveTrackSend">
	<div class="c_func"><code>bool RemoveTrackSend(MediaTrack* tr, int category, int sendidx)</code></div>
	<div class="e_func"><code><em>bool </em> RemoveTrackSend(<em>MediaTrack</em> tr, <em>int </em>category, <em>int </em>sendidx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.RemoveTrackSend(<em>MediaTrack</em> tr, <em>integer</em> category, <em>integer</em> sendidx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_RemoveTrackSend(<em>MediaTrack</em> tr, <em>Int</em> category, <em>Int</em> sendidx)</code></div>
	<p>Remove a send/receive/hardware output, return true on success. category is &lt;0 for receives, 0=sends, &gt;0 for hardware outputs. See <a href="#CreateTrackSend">CreateTrackSend</a>, <a href="#GetSetTrackSendInfo">GetSetTrackSendInfo</a>, <a href="#GetTrackSendInfo_Value">GetTrackSendInfo_Value</a>, <a href="#SetTrackSendInfo_Value">SetTrackSendInfo_Value</a>, <a href="#GetTrackNumSends">GetTrackNumSends</a>.</p>
</div>

<div class="function_definition" id="RenderFileSection">
	<div class="c_func"><code>bool RenderFileSection(const char* source_filename, const char* target_filename, double start_percent, double end_percent, double playrate)</code></div>
	<div class="e_func"><code><em>bool </em> RenderFileSection("source_filename", "target_filename", start_percent, end_percent, playrate)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.RenderFileSection(<em>string</em> source_filename, <em>string</em> target_filename, <em>number</em> start_percent, <em>number</em> end_percent, <em>number</em> playrate)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_RenderFileSection(<em>String</em> source_filename, <em>String</em> target_filename, <em>Float</em> start_percent, <em>Float</em> end_percent, <em>Float</em> playrate)</code></div>
	<p>Not available while playing back.</p>
</div>

<div class="function_definition" id="ReorderSelectedTracks">
	<div class="c_func"><code>bool ReorderSelectedTracks(int beforeTrackIdx, int makePrevFolder)</code></div>
	<div class="e_func"><code><em>bool </em> ReorderSelectedTracks(<em>int </em>beforeTrackIdx, <em>int </em>makePrevFolder)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.ReorderSelectedTracks(<em>integer</em> beforeTrackIdx, <em>integer</em> makePrevFolder)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_ReorderSelectedTracks(<em>Int</em> beforeTrackIdx, <em>Int</em> makePrevFolder)</code></div>
	<p>Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder</p>
</div>

<div class="function_definition" id="Resample_EnumModes">
	<div class="c_func"><code>const char* Resample_EnumModes(int mode)</code></div>
	<div class="e_func"><code>bool  Resample_EnumModes(#retval, <em>int </em>mode)</code></div>
	<div class="l_func"><code><em>string</em> reaper.Resample_EnumModes(<em>integer</em> mode)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_Resample_EnumModes(<em>Int</em> mode)</code></div>
</div>

<div class="function_definition" id="resolve_fn">
	<div class="c_func"><code>void resolve_fn(const char* in, char* out, int out_sz)</code></div>
	<div class="e_func"><code>resolve_fn("in", #out)</code></div>
	<div class="l_func"><code><em>string </em>out = reaper.resolve_fn(<em>string</em> in, <em>string </em>out)</code></div>
	<div class="p_func"><code>(<em>String</em> in, <em>String</em> out, <em>Int</em> out_sz) = RPR_resolve_fn(in, out, out_sz)</code></div>
	<p>See <a href="#resolve_fn2">resolve_fn2</a>.</p>
</div>

<div class="function_definition" id="resolve_fn2">
	<div class="c_func"><code>void resolve_fn2(const char* in, char* out, int out_sz, const char* checkSubDirOptional)</code></div>
	<div class="e_func"><code>resolve_fn2("in", #out, <em>optional </em>"checkSubDir")</code></div>
	<div class="l_func"><code><em>string </em>out = reaper.resolve_fn2(<em>string</em> in, <em>string </em>out, <em>optional </em><em>string</em> checkSubDir)</code></div>
	<div class="p_func"><code>(<em>String</em> in, <em>String</em> out, <em>Int</em> out_sz, <em>String</em> checkSubDirOptional) = RPR_resolve_fn2(in, out, out_sz, checkSubDirOptional)</code></div>
	<p>Resolves a filename "in" by using project settings etc. If no file found, out will be a copy of in.</p>
</div>

<div class="function_definition" id="ReverseNamedCommandLookup">
	<div class="c_func"><code>const char* ReverseNamedCommandLookup(int command_id)</code></div>
	<div class="e_func"><code>bool  ReverseNamedCommandLookup(#retval, <em>int </em>command_id)</code></div>
	<div class="l_func"><code><em>string</em> reaper.ReverseNamedCommandLookup(<em>integer</em> command_id)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_ReverseNamedCommandLookup(<em>Int</em> command_id)</code></div>
	<p>Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return "SWS_ABOUT"), it will be NULL if command_id is a native action.</p>
</div>

<div class="function_definition" id="ScaleFromEnvelopeMode">
	<div class="c_func"><code>double ScaleFromEnvelopeMode(int scaling_mode, double val)</code></div>
	<div class="e_func"><code><em>double </em> ScaleFromEnvelopeMode(<em>int </em>scaling_mode, val)</code></div>
	<div class="l_func"><code><em>number</em> reaper.ScaleFromEnvelopeMode(<em>integer</em> scaling_mode, <em>number</em> val)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_ScaleFromEnvelopeMode(<em>Int</em> scaling_mode, <em>Float</em> val)</code></div>
	<p>See <a href="#GetEnvelopeScalingMode">GetEnvelopeScalingMode</a>.</p>
</div>

<div class="function_definition" id="ScaleToEnvelopeMode">
	<div class="c_func"><code>double ScaleToEnvelopeMode(int scaling_mode, double val)</code></div>
	<div class="e_func"><code><em>double </em> ScaleToEnvelopeMode(<em>int </em>scaling_mode, val)</code></div>
	<div class="l_func"><code><em>number</em> reaper.ScaleToEnvelopeMode(<em>integer</em> scaling_mode, <em>number</em> val)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_ScaleToEnvelopeMode(<em>Int</em> scaling_mode, <em>Float</em> val)</code></div>
	<p>See <a href="#GetEnvelopeScalingMode">GetEnvelopeScalingMode</a>.</p>
</div>

<div class="function_definition" id="SectionFromUniqueID">
	<div class="c_func"><code>KbdSectionInfo* SectionFromUniqueID(int uniqueID)</code></div>
	<div class="e_func"><code><em>KbdSectionInfo</em>  SectionFromUniqueID(<em>int </em>uniqueID)</code></div>
	<div class="l_func"><code><em>KbdSectionInfo</em> reaper.SectionFromUniqueID(<em>integer</em> uniqueID)</code></div>
	<div class="p_func"><code><em>KbdSectionInfo</em>  RPR_SectionFromUniqueID(<em>Int</em> uniqueID)</code></div>
</div>

<div class="function_definition" id="SelectAllMediaItems">
	<div class="c_func"><code>void SelectAllMediaItems(ReaProject* proj, bool selected)</code></div>
	<div class="e_func"><code>SelectAllMediaItems(<em>ReaProject</em> proj, <em>bool </em>selected)</code></div>
	<div class="l_func"><code>reaper.SelectAllMediaItems(<em>ReaProject</em> proj, <em>boolean</em> selected)</code></div>
	<div class="p_func"><code>RPR_SelectAllMediaItems(<em>ReaProject</em> proj, <em>Boolean</em> selected)</code></div>
</div>

<div class="function_definition" id="SelectProjectInstance">
	<div class="c_func"><code>void SelectProjectInstance(ReaProject* proj)</code></div>
	<div class="e_func"><code>SelectProjectInstance(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code>reaper.SelectProjectInstance(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code>RPR_SelectProjectInstance(<em>ReaProject</em> proj)</code></div>
</div>

<div class="function_definition" id="SendMIDIMessageToHardware">
	<div class="c_func"><code>void SendMIDIMessageToHardware(int output, const char* msg, int msg_sz)</code></div>
	<div class="e_func"><code>SendMIDIMessageToHardware(<em>int </em>output, "msg")</code></div>
	<div class="l_func"><code>reaper.SendMIDIMessageToHardware(<em>integer</em> output, <em>string</em> msg)</code></div>
	<div class="p_func"><code>RPR_SendMIDIMessageToHardware(<em>Int</em> output, <em>String</em> msg, <em>Int</em> msg_sz)</code></div>
	<p>Sends a MIDI message to output device specified by output. Message is sent in immediate mode.</p>
</div>

<div class="function_definition" id="SetActiveTake">
	<div class="c_func"><code>void SetActiveTake(MediaItem_Take* take)</code></div>
	<div class="e_func"><code>SetActiveTake(<em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code>reaper.SetActiveTake(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code>RPR_SetActiveTake(<em>MediaItem_Take</em> take)</code></div>
	<p>set this take active in this media item</p>
</div>

<div class="function_definition" id="SetAutomationMode">
	<div class="c_func"><code>void SetAutomationMode(int mode, bool onlySel)</code></div>
	<div class="e_func"><code>SetAutomationMode(<em>int </em>mode, <em>bool </em>onlySel)</code></div>
	<div class="l_func"><code>reaper.SetAutomationMode(<em>integer</em> mode, <em>boolean</em> onlySel)</code></div>
	<div class="p_func"><code>RPR_SetAutomationMode(<em>Int</em> mode, <em>Boolean</em> onlySel)</code></div>
	<p>sets all or selected tracks to mode.</p>
</div>

<div class="function_definition" id="SetCurrentBPM">
	<div class="c_func"><code>void SetCurrentBPM(ReaProject* __proj, double bpm, bool wantUndo)</code></div>
	<div class="e_func"><code>SetCurrentBPM(<em>ReaProject</em> __proj, bpm, <em>bool </em>wantUndo)</code></div>
	<div class="l_func"><code>reaper.SetCurrentBPM(<em>ReaProject</em> __proj, <em>number</em> bpm, <em>boolean</em> wantUndo)</code></div>
	<div class="p_func"><code>RPR_SetCurrentBPM(<em>ReaProject</em> __proj, <em>Float</em> bpm, <em>Boolean</em> wantUndo)</code></div>
	<p>set current BPM in project, set wantUndo=true to add undo point</p>
</div>

<div class="function_definition" id="SetCursorContext">
	<div class="c_func"><code>void SetCursorContext(int mode, TrackEnvelope* envInOptional)</code></div>
	<div class="e_func"><code>SetCursorContext(<em>int </em>mode, <em>TrackEnvelope</em> envIn)</code></div>
	<div class="l_func"><code>reaper.SetCursorContext(<em>integer</em> mode, <em>TrackEnvelope</em> envIn)</code></div>
	<div class="p_func"><code>RPR_SetCursorContext(<em>Int</em> mode, <em>TrackEnvelope</em> envInOptional)</code></div>
	<p>You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)</p>
</div>

<div class="function_definition" id="SetEditCurPos">
	<div class="c_func"><code>void SetEditCurPos(double time, bool moveview, bool seekplay)</code></div>
	<div class="e_func"><code>SetEditCurPos(time, <em>bool </em>moveview, <em>bool </em>seekplay)</code></div>
	<div class="l_func"><code>reaper.SetEditCurPos(<em>number</em> time, <em>boolean</em> moveview, <em>boolean</em> seekplay)</code></div>
	<div class="p_func"><code>RPR_SetEditCurPos(<em>Float</em> time, <em>Boolean</em> moveview, <em>Boolean</em> seekplay)</code></div>
</div>

<div class="function_definition" id="SetEditCurPos2">
	<div class="c_func"><code>void SetEditCurPos2(ReaProject* proj, double time, bool moveview, bool seekplay)</code></div>
	<div class="e_func"><code>SetEditCurPos2(<em>ReaProject</em> proj, time, <em>bool </em>moveview, <em>bool </em>seekplay)</code></div>
	<div class="l_func"><code>reaper.SetEditCurPos2(<em>ReaProject</em> proj, <em>number</em> time, <em>boolean</em> moveview, <em>boolean</em> seekplay)</code></div>
	<div class="p_func"><code>RPR_SetEditCurPos2(<em>ReaProject</em> proj, <em>Float</em> time, <em>Boolean</em> moveview, <em>Boolean</em> seekplay)</code></div>
</div>

<div class="function_definition" id="SetEnvelopePoint">
	<div class="c_func"><code>bool SetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> SetEnvelopePoint(<em>TrackEnvelope</em> envelope, <em>int </em>ptidx, <em>optional </em>timeIn, <em>optional </em>valueIn, <em>optional int</em> shapeIn, <em>optional </em>tensionIn, <em>optional bool</em> selectedIn, <em>optional bool</em> noSortIn)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetEnvelopePoint(<em>TrackEnvelope</em> envelope, <em>integer</em> ptidx, <em>optional number </em>timeIn, <em>optional number </em>valueIn, <em>optional integer</em> shapeIn, <em>optional number </em>tensionIn, <em>optional boolean</em> selectedIn, <em>optional boolean</em> noSortIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>TrackEnvelope</em> envelope, <em>Int</em> ptidx, <em>Float</em> timeInOptional, <em>Float</em> valueInOptional, <em>Int</em> shapeInOptional, <em>Float</em> tensionInOptional, <em>Boolean</em> selectedInOptional, <em>Boolean</em> noSortInOptional) = RPR_SetEnvelopePoint(envelope, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)</code></div>
	<p>Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See <a href="#SetEnvelopePointEx">SetEnvelopePointEx</a>.</p>
</div>

<div class="function_definition" id="SetEnvelopePointEx">
	<div class="c_func"><code>bool SetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> SetEnvelopePointEx(<em>TrackEnvelope</em> envelope, <em>int </em>autoitem_idx, <em>int </em>ptidx, <em>optional </em>timeIn, <em>optional </em>valueIn, <em>optional int</em> shapeIn, <em>optional </em>tensionIn, <em>optional bool</em> selectedIn, <em>optional bool</em> noSortIn)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetEnvelopePointEx(<em>TrackEnvelope</em> envelope, <em>integer</em> autoitem_idx, <em>integer</em> ptidx, <em>optional number </em>timeIn, <em>optional number </em>valueIn, <em>optional integer</em> shapeIn, <em>optional number </em>tensionIn, <em>optional boolean</em> selectedIn, <em>optional boolean</em> noSortIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>TrackEnvelope</em> envelope, <em>Int</em> autoitem_idx, <em>Int</em> ptidx, <em>Float</em> timeInOptional, <em>Float</em> valueInOptional, <em>Int</em> shapeInOptional, <em>Float</em> tensionInOptional, <em>Boolean</em> selectedInOptional, <em>Boolean</em> noSortInOptional) = RPR_SetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)</code></div>
	<p>Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.<br>
autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.<br>
For automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,<br>
even if the automation item is trimmed so that not all points are visible.<br>
Otherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.<br>
See <a href="#CountEnvelopePointsEx">CountEnvelopePointsEx</a>, <a href="#GetEnvelopePointEx">GetEnvelopePointEx</a>, <a href="#InsertEnvelopePointEx">InsertEnvelopePointEx</a>, <a href="#DeleteEnvelopePointEx">DeleteEnvelopePointEx</a>.</p>
</div>

<div class="function_definition" id="SetEnvelopeStateChunk">
	<div class="c_func"><code>bool SetEnvelopeStateChunk(TrackEnvelope* env, const char* str, bool isundoOptional)</code></div>
	<div class="e_func"><code><em>bool </em> SetEnvelopeStateChunk(<em>TrackEnvelope</em> env, "str", <em>bool </em>isundo)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetEnvelopeStateChunk(<em>TrackEnvelope</em> env, <em>string</em> str, <em>boolean</em> isundo)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetEnvelopeStateChunk(<em>TrackEnvelope</em> env, <em>String</em> str, <em>Boolean</em> isundoOptional)</code></div>
	<p>Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.</p>
</div>

<div class="function_definition" id="SetExtState">
	<div class="c_func"><code>void SetExtState(const char* section, const char* key, const char* value, bool persist)</code></div>
	<div class="e_func"><code>SetExtState("section", "key", "value", <em>bool </em>persist)</code></div>
	<div class="l_func"><code>reaper.SetExtState(<em>string</em> section, <em>string</em> key, <em>string</em> value, <em>boolean</em> persist)</code></div>
	<div class="p_func"><code>RPR_SetExtState(<em>String</em> section, <em>String</em> key, <em>String</em> value, <em>Boolean</em> persist)</code></div>
	<p>Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See <a href="#GetExtState">GetExtState</a>, <a href="#DeleteExtState">DeleteExtState</a>, <a href="#HasExtState">HasExtState</a>.</p>
</div>

<div class="function_definition" id="SetGlobalAutomationOverride">
	<div class="c_func"><code>void SetGlobalAutomationOverride(int mode)</code></div>
	<div class="e_func"><code>SetGlobalAutomationOverride(<em>int </em>mode)</code></div>
	<div class="l_func"><code>reaper.SetGlobalAutomationOverride(<em>integer</em> mode)</code></div>
	<div class="p_func"><code>RPR_SetGlobalAutomationOverride(<em>Int</em> mode)</code></div>
	<p>mode: see <a href="#GetGlobalAutomationOverride">GetGlobalAutomationOverride</a></p>
</div>

<div class="function_definition" id="SetItemStateChunk">
	<div class="c_func"><code>bool SetItemStateChunk(MediaItem* item, const char* str, bool isundoOptional)</code></div>
	<div class="e_func"><code><em>bool </em> SetItemStateChunk(<em>MediaItem</em> item, "str", <em>bool </em>isundo)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetItemStateChunk(<em>MediaItem</em> item, <em>string</em> str, <em>boolean</em> isundo)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetItemStateChunk(<em>MediaItem</em> item, <em>String</em> str, <em>Boolean</em> isundoOptional)</code></div>
	<p>Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.</p>
</div>

<div class="function_definition" id="SetMasterTrackVisibility">
	<div class="c_func"><code>int SetMasterTrackVisibility(int flag)</code></div>
	<div class="e_func"><code><em>int </em> SetMasterTrackVisibility(<em>int </em>flag)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.SetMasterTrackVisibility(<em>integer</em> flag)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_SetMasterTrackVisibility(<em>Int</em> flag)</code></div>
	<p>set &amp;1 to show the master track in the TCP, &amp;2 to HIDE in the mixer. Returns the previous visibility state. See <a href="#GetMasterTrackVisibility">GetMasterTrackVisibility</a>.</p>
</div>

<div class="function_definition" id="SetMediaItemInfo_Value">
	<div class="c_func"><code>bool SetMediaItemInfo_Value(MediaItem* item, const char* parmname, double newvalue)</code></div>
	<div class="e_func"><code><em>bool </em> SetMediaItemInfo_Value(<em>MediaItem</em> item, "parmname", newvalue)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetMediaItemInfo_Value(<em>MediaItem</em> item, <em>string</em> parmname, <em>number</em> newvalue)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetMediaItemInfo_Value(<em>MediaItem</em> item, <em>String</em> parmname, <em>Float</em> newvalue)</code></div>
	<p>Set media item numerical-value attributes.<br>
B_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.<br>
B_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.<br>
C_LANEPLAYS : char * : in fixed lane tracks, 0=this item lane does not play, 1=this item lane plays exclusively, 2=this item lane plays and other lane also play. (read-only)<br>
C_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.<br>
B_LOOPSRC : bool * : loop source<br>
B_ALLTAKESPLAY : bool * : all takes play<br>
B_UISEL : bool * : selected in arrange view<br>
C_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1<br>
C_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1<br>
C_LOCK : char * : locked, &amp;1=locked<br>
D_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc<br>
D_POSITION : double * : item position in seconds<br>
D_LENGTH : double * : item length in seconds<br>
D_SNAPOFFSET : double * : item snap offset in seconds<br>
D_FADEINLEN : double * : item manual fadein length in seconds<br>
D_FADEOUTLEN : double * : item manual fadeout length in seconds<br>
D_FADEINDIR : double * : item fadein curvature, -1..1<br>
D_FADEOUTDIR : double * : item fadeout curvature, -1..1<br>
D_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein<br>
D_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout<br>
C_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear<br>
C_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear<br>
I_GROUPID : int * : group ID, 0=no group<br>
I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)<br>
I_LASTH : int * : height in pixels (read-only)<br>
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color<br>
I_CURTAKE : int * : active take number<br>
IP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)<br>
F_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)<br>
F_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)<br>
</p>
</div>

<div class="function_definition" id="SetMediaItemLength">
	<div class="c_func"><code>bool SetMediaItemLength(MediaItem* item, double length, bool refreshUI)</code></div>
	<div class="e_func"><code><em>bool </em> SetMediaItemLength(<em>MediaItem</em> item, length, <em>bool </em>refreshUI)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetMediaItemLength(<em>MediaItem</em> item, <em>number</em> length, <em>boolean</em> refreshUI)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetMediaItemLength(<em>MediaItem</em> item, <em>Float</em> length, <em>Boolean</em> refreshUI)</code></div>
	<p>Redraws the screen only if refreshUI == true.<br>
See <a href="#UpdateArrange">UpdateArrange</a>().</p>
</div>

<div class="function_definition" id="SetMediaItemPosition">
	<div class="c_func"><code>bool SetMediaItemPosition(MediaItem* item, double position, bool refreshUI)</code></div>
	<div class="e_func"><code><em>bool </em> SetMediaItemPosition(<em>MediaItem</em> item, position, <em>bool </em>refreshUI)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetMediaItemPosition(<em>MediaItem</em> item, <em>number</em> position, <em>boolean</em> refreshUI)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetMediaItemPosition(<em>MediaItem</em> item, <em>Float</em> position, <em>Boolean</em> refreshUI)</code></div>
	<p>Redraws the screen only if refreshUI == true.<br>
See <a href="#UpdateArrange">UpdateArrange</a>().</p>
</div>

<div class="function_definition" id="SetMediaItemSelected">
	<div class="c_func"><code>void SetMediaItemSelected(MediaItem* item, bool selected)</code></div>
	<div class="e_func"><code>SetMediaItemSelected(<em>MediaItem</em> item, <em>bool </em>selected)</code></div>
	<div class="l_func"><code>reaper.SetMediaItemSelected(<em>MediaItem</em> item, <em>boolean</em> selected)</code></div>
	<div class="p_func"><code>RPR_SetMediaItemSelected(<em>MediaItem</em> item, <em>Boolean</em> selected)</code></div>
</div>

<div class="function_definition" id="SetMediaItemTake_Source">
	<div class="c_func"><code>bool SetMediaItemTake_Source(MediaItem_Take* take, PCM_source* source)</code></div>
	<div class="e_func"><code><em>bool </em> SetMediaItemTake_Source(<em>MediaItem_Take</em> take, <em>PCM_source</em> source)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetMediaItemTake_Source(<em>MediaItem_Take</em> take, <em>PCM_source</em> source)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetMediaItemTake_Source(<em>MediaItem_Take</em> take, <em>PCM_source</em> source)</code></div>
	<p>Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.</p>
</div>

<div class="function_definition" id="SetMediaItemTakeInfo_Value">
	<div class="c_func"><code>bool SetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname, double newvalue)</code></div>
	<div class="e_func"><code><em>bool </em> SetMediaItemTakeInfo_Value(<em>MediaItem_Take</em> take, "parmname", newvalue)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetMediaItemTakeInfo_Value(<em>MediaItem_Take</em> take, <em>string</em> parmname, <em>number</em> newvalue)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetMediaItemTakeInfo_Value(<em>MediaItem_Take</em> take, <em>String</em> parmname, <em>Float</em> newvalue)</code></div>
	<p>Set media item take numerical-value attributes.<br>
D_STARTOFFS : double * : start offset in source media, in seconds<br>
D_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped<br>
D_PAN : double * : take pan, -1..1<br>
D_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc<br>
D_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc<br>
D_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc<br>
B_PPITCH : bool * : preserve pitch when changing playback rate<br>
I_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)<br>
I_LASTH : int * : height in pixels (read-only)<br>
I_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right<br>
I_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter<br>
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color<br>
IP_TAKENUMBER : int : take number (read-only, returns the take number directly)<br>
</p>
</div>

<div class="function_definition" id="SetMediaTrackInfo_Value">
	<div class="c_func"><code>bool SetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname, double newvalue)</code></div>
	<div class="e_func"><code><em>bool </em> SetMediaTrackInfo_Value(<em>MediaTrack</em> tr, "parmname", newvalue)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetMediaTrackInfo_Value(<em>MediaTrack</em> tr, <em>string</em> parmname, <em>number</em> newvalue)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetMediaTrackInfo_Value(<em>MediaTrack</em> tr, <em>String</em> parmname, <em>Float</em> newvalue)</code></div>
	<p>Set track numerical-value attributes.<br>
B_MUTE : bool * : muted<br>
B_PHASE : bool * : track phase inverted<br>
B_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)<br>
IP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)<br>
I_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place<br>
B_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed<br>
I_FXEN : int * : fx enabled, 0=bypassed, !0=fx active<br>
I_RECARM : int * : record armed, 0=not record armed, 1=record armed<br>
I_RECINPUT : int * : record input, &lt;0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.<br>
I_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace<br>
I_RECMODE_FLAGS : int * : record mode flags, &amp;3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)<br>
I_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)<br>
I_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on<br>
B_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)<br>
I_VUMODE : int * : track vu mode, &amp;1:disabled, &amp;30==0:stereo peaks, &amp;30==2:multichannel peaks, &amp;30==4:stereo RMS, &amp;30==8:combined RMS, &amp;30==12:LUFS-M, &amp;30==16:LUFS-S (readout=max), &amp;30==20:LUFS-S (readout=current), &amp;32:LUFS calculation on channels 1+2 only<br>
I_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch<br>
I_NCHAN : int * : number of track channels, 2-128, even numbers only<br>
I_SELECTED : int * : track selected, 0=unselected, 1=selected<br>
I_WNDH : int * : current TCP window height in pixels including envelopes (read-only)<br>
I_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)<br>
I_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)<br>
I_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)<br>
I_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)<br>
I_MCPW : int * : current MCP width in pixels (read-only)<br>
I_MCPH : int * : current MCP height in pixels (read-only)<br>
I_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc<br>
I_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children<br>
I_MIDIHWOUT : int * : track midi hardware output index, &lt;0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)<br>
I_PERFFLAGS : int * : track performance flags, &amp;1=no media buffering, &amp;2=no anticipative FX<br>
I_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color<br>
I_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels<br>
I_SPACER : int * : 1=TCP track spacer above this trackB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)<br>
D_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc<br>
D_PAN : double * : trim pan of track, -1..1<br>
D_WIDTH : double * : width of track, -1..1<br>
D_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6<br>
D_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6<br>
I_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan<br>
D_PANLAW : double * : pan law of track, &lt;0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc<br>
I_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper<br>
P_ENV:&lt;envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be &lt;VOLENV, &lt;PANENV, etc; GUID is the stringified envelope GUID.<br>
B_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)<br>
B_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)<br>
B_MAINSEND : bool * : track sends audio to parent<br>
C_MAINSEND_OFFS : char * : channel offset of track send to parent<br>
C_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)<br>
I_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)<br>
C_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)<br>
F_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)<br>
F_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)<br>
F_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)<br>
F_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)<br>
I_PLAY_OFFSET_FLAG : int * : track media playback offset state, &amp;1=bypassed, &amp;2=offset value is measured in samples (otherwise measured in seconds)<br>
D_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG<br>
</p>
</div>

<div class="function_definition" id="SetMIDIEditorGrid">
	<div class="c_func"><code>void SetMIDIEditorGrid(ReaProject* project, double division)</code></div>
	<div class="e_func"><code>SetMIDIEditorGrid(<em>ReaProject</em> project, division)</code></div>
	<div class="l_func"><code>reaper.SetMIDIEditorGrid(<em>ReaProject</em> project, <em>number</em> division)</code></div>
	<div class="p_func"><code>RPR_SetMIDIEditorGrid(<em>ReaProject</em> project, <em>Float</em> division)</code></div>
	<p>Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.</p>
</div>

<div class="function_definition" id="SetMixerScroll">
	<div class="c_func"><code>MediaTrack* SetMixerScroll(MediaTrack* leftmosttrack)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  SetMixerScroll(<em>MediaTrack</em> leftmosttrack)</code></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.SetMixerScroll(<em>MediaTrack</em> leftmosttrack)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  RPR_SetMixerScroll(<em>MediaTrack</em> leftmosttrack)</code></div>
	<p>Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.</p>
</div>

<div class="function_definition" id="SetMouseModifier">
	<div class="c_func"><code>void SetMouseModifier(const char* context, int modifier_flag, const char* action)</code></div>
	<div class="e_func"><code>SetMouseModifier("context", <em>int </em>modifier_flag, "action")</code></div>
	<div class="l_func"><code>reaper.SetMouseModifier(<em>string</em> context, <em>integer</em> modifier_flag, <em>string</em> action)</code></div>
	<div class="p_func"><code>RPR_SetMouseModifier(<em>String</em> context, <em>Int</em> modifier_flag, <em>String</em> action)</code></div>
	<p>Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.<br>
Context is a string like "MM_CTX_ITEM". Find these strings by modifying an assignment in <br>
Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.<br>
Modifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.<br>
(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)<br>
For left-click and double-click contexts, the action can be any built-in command ID number<br>
or any custom action ID string. Find built-in command IDs in the REAPER actions window<br>
(enable "show action IDs" in the context menu), and find custom action ID strings in reaper-kb.ini.<br>
For built-in mouse modifier behaviors, find action IDs (which will be low numbers)<br>
by modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.<br>
Assigning an action of -1 will reset that mouse modifier behavior to factory default.<br>
Note: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.<br>
Special case: SetMouseModifier(context, -1, -1) will reset the entire context to default.<br>
Special case: SetMouseModifier(-1, -1, -1) will reset all contexts to default.<br>
See <a href="#GetMouseModifier">GetMouseModifier</a>.<br>
</p>
</div>

<div class="function_definition" id="SetOnlyTrackSelected">
	<div class="c_func"><code>void SetOnlyTrackSelected(MediaTrack* track)</code></div>
	<div class="e_func"><code>SetOnlyTrackSelected(<em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code>reaper.SetOnlyTrackSelected(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code>RPR_SetOnlyTrackSelected(<em>MediaTrack</em> track)</code></div>
	<p>Set exactly one track selected, deselect all others</p>
</div>

<div class="function_definition" id="SetProjectGrid">
	<div class="c_func"><code>void SetProjectGrid(ReaProject* project, double division)</code></div>
	<div class="e_func"><code>SetProjectGrid(<em>ReaProject</em> project, division)</code></div>
	<div class="l_func"><code>reaper.SetProjectGrid(<em>ReaProject</em> project, <em>number</em> division)</code></div>
	<div class="p_func"><code>RPR_SetProjectGrid(<em>ReaProject</em> project, <em>Float</em> division)</code></div>
	<p>Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.</p>
</div>

<div class="function_definition" id="SetProjectMarker">
	<div class="c_func"><code>bool SetProjectMarker(int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)</code></div>
	<div class="e_func"><code><em>bool </em> SetProjectMarker(<em>int </em>markrgnindexnumber, <em>bool </em>isrgn, pos, rgnend, "name")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetProjectMarker(<em>integer</em> markrgnindexnumber, <em>boolean</em> isrgn, <em>number</em> pos, <em>number</em> rgnend, <em>string</em> name)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetProjectMarker(<em>Int</em> markrgnindexnumber, <em>Boolean</em> isrgn, <em>Float</em> pos, <em>Float</em> rgnend, <em>String</em> name)</code></div>
	<p>Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see <a href="#SetProjectMarker4">SetProjectMarker4</a>.</p>
</div>

<div class="function_definition" id="SetProjectMarker2">
	<div class="c_func"><code>bool SetProjectMarker2(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)</code></div>
	<div class="e_func"><code><em>bool </em> SetProjectMarker2(<em>ReaProject</em> proj, <em>int </em>markrgnindexnumber, <em>bool </em>isrgn, pos, rgnend, "name")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetProjectMarker2(<em>ReaProject</em> proj, <em>integer</em> markrgnindexnumber, <em>boolean</em> isrgn, <em>number</em> pos, <em>number</em> rgnend, <em>string</em> name)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetProjectMarker2(<em>ReaProject</em> proj, <em>Int</em> markrgnindexnumber, <em>Boolean</em> isrgn, <em>Float</em> pos, <em>Float</em> rgnend, <em>String</em> name)</code></div>
	<p>Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see <a href="#SetProjectMarker4">SetProjectMarker4</a>.</p>
</div>

<div class="function_definition" id="SetProjectMarker3">
	<div class="c_func"><code>bool SetProjectMarker3(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color)</code></div>
	<div class="e_func"><code><em>bool </em> SetProjectMarker3(<em>ReaProject</em> proj, <em>int </em>markrgnindexnumber, <em>bool </em>isrgn, pos, rgnend, "name", <em>int </em>color)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetProjectMarker3(<em>ReaProject</em> proj, <em>integer</em> markrgnindexnumber, <em>boolean</em> isrgn, <em>number</em> pos, <em>number</em> rgnend, <em>string</em> name, <em>integer</em> color)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetProjectMarker3(<em>ReaProject</em> proj, <em>Int</em> markrgnindexnumber, <em>Boolean</em> isrgn, <em>Float</em> pos, <em>Float</em> rgnend, <em>String</em> name, <em>Int</em> color)</code></div>
	<p>Note: this function can't clear a marker's name (an empty string will leave the name unchanged), see <a href="#SetProjectMarker4">SetProjectMarker4</a>.</p>
</div>

<div class="function_definition" id="SetProjectMarker4">
	<div class="c_func"><code>bool SetProjectMarker4(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color, int flags)</code></div>
	<div class="e_func"><code><em>bool </em> SetProjectMarker4(<em>ReaProject</em> proj, <em>int </em>markrgnindexnumber, <em>bool </em>isrgn, pos, rgnend, "name", <em>int </em>color, <em>int </em>flags)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetProjectMarker4(<em>ReaProject</em> proj, <em>integer</em> markrgnindexnumber, <em>boolean</em> isrgn, <em>number</em> pos, <em>number</em> rgnend, <em>string</em> name, <em>integer</em> color, <em>integer</em> flags)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetProjectMarker4(<em>ReaProject</em> proj, <em>Int</em> markrgnindexnumber, <em>Boolean</em> isrgn, <em>Float</em> pos, <em>Float</em> rgnend, <em>String</em> name, <em>Int</em> color, <em>Int</em> flags)</code></div>
	<p>color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&amp;1 to clear name</p>
</div>

<div class="function_definition" id="SetProjectMarkerByIndex">
	<div class="c_func"><code>bool SetProjectMarkerByIndex(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color)</code></div>
	<div class="e_func"><code><em>bool </em> SetProjectMarkerByIndex(<em>ReaProject</em> proj, <em>int </em>markrgnidx, <em>bool </em>isrgn, pos, rgnend, <em>int </em>IDnumber, "name", <em>int </em>color)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetProjectMarkerByIndex(<em>ReaProject</em> proj, <em>integer</em> markrgnidx, <em>boolean</em> isrgn, <em>number</em> pos, <em>number</em> rgnend, <em>integer</em> IDnumber, <em>string</em> name, <em>integer</em> color)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetProjectMarkerByIndex(<em>ReaProject</em> proj, <em>Int</em> markrgnidx, <em>Boolean</em> isrgn, <em>Float</em> pos, <em>Float</em> rgnend, <em>Int</em> IDnumber, <em>String</em> name, <em>Int</em> color)</code></div>
	<p>See <a href="#SetProjectMarkerByIndex2">SetProjectMarkerByIndex2</a>.</p>
</div>

<div class="function_definition" id="SetProjectMarkerByIndex2">
	<div class="c_func"><code>bool SetProjectMarkerByIndex2(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color, int flags)</code></div>
	<div class="e_func"><code><em>bool </em> SetProjectMarkerByIndex2(<em>ReaProject</em> proj, <em>int </em>markrgnidx, <em>bool </em>isrgn, pos, rgnend, <em>int </em>IDnumber, "name", <em>int </em>color, <em>int </em>flags)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetProjectMarkerByIndex2(<em>ReaProject</em> proj, <em>integer</em> markrgnidx, <em>boolean</em> isrgn, <em>number</em> pos, <em>number</em> rgnend, <em>integer</em> IDnumber, <em>string</em> name, <em>integer</em> color, <em>integer</em> flags)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetProjectMarkerByIndex2(<em>ReaProject</em> proj, <em>Int</em> markrgnidx, <em>Boolean</em> isrgn, <em>Float</em> pos, <em>Float</em> rgnend, <em>Int</em> IDnumber, <em>String</em> name, <em>Int</em> color, <em>Int</em> flags)</code></div>
	<p>Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see <a href="#EnumProjectMarkers3">EnumProjectMarkers3</a>), rather than representing the displayed marker/region ID number (see <a href="#SetProjectMarker3">SetProjectMarker3</a>). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&amp;1 to clear name. If flags&amp;2, markers will not be re-sorted, and after making updates, you MUST call SetProjectMarkerByIndex2 with markrgnidx=-1 and flags&amp;2 to force re-sort/UI updates.</p>
</div>

<div class="function_definition" id="SetProjExtState">
	<div class="c_func"><code>int SetProjExtState(ReaProject* proj, const char* extname, const char* key, const char* value)</code></div>
	<div class="e_func"><code><em>int </em> SetProjExtState(<em>ReaProject</em> proj, "extname", "key", "value")</code></div>
	<div class="l_func"><code><em>integer</em> reaper.SetProjExtState(<em>ReaProject</em> proj, <em>string</em> extname, <em>string</em> key, <em>string</em> value)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_SetProjExtState(<em>ReaProject</em> proj, <em>String</em> extname, <em>String</em> key, <em>String</em> value)</code></div>
	<p>Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or "", all extended data for that extname will be deleted.  If val is NULL or "", the data previously associated with that key will be deleted. Returns the size of the state for this extname. See <a href="#GetProjExtState">GetProjExtState</a>, <a href="#EnumProjExtState">EnumProjExtState</a>.</p>
</div>

<div class="function_definition" id="SetRegionRenderMatrix">
	<div class="c_func"><code>void SetRegionRenderMatrix(ReaProject* proj, int regionindex, MediaTrack* track, int flag)</code></div>
	<div class="e_func"><code>SetRegionRenderMatrix(<em>ReaProject</em> proj, <em>int </em>regionindex, <em>MediaTrack</em> track, <em>int </em>flag)</code></div>
	<div class="l_func"><code>reaper.SetRegionRenderMatrix(<em>ReaProject</em> proj, <em>integer</em> regionindex, <em>MediaTrack</em> track, <em>integer</em> flag)</code></div>
	<div class="p_func"><code>RPR_SetRegionRenderMatrix(<em>ReaProject</em> proj, <em>Int</em> regionindex, <em>MediaTrack</em> track, <em>Int</em> flag)</code></div>
	<p>Add (flag &gt; 0) or remove (flag &lt; 0) a track from this region when using the region render matrix. If adding, flag==2 means force mono, flag==4 means force stereo, flag==N means force N/2 channels.</p>
</div>

<div class="function_definition" id="SetTakeMarker">
	<div class="c_func"><code>int SetTakeMarker(MediaItem_Take* take, int idx, const char* nameIn, double* srcposInOptional, int* colorInOptional)</code></div>
	<div class="e_func"><code><em>int </em> SetTakeMarker(<em>MediaItem_Take</em> take, <em>int </em>idx, "nameIn", <em>optional </em>srcposIn, <em>optional int</em> colorIn)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.SetTakeMarker(<em>MediaItem_Take</em> take, <em>integer</em> idx, <em>string</em> nameIn, <em>optional number </em>srcposIn, <em>optional integer</em> colorIn)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> idx, <em>String</em> nameIn, <em>Float</em> srcposInOptional, <em>Int</em> colorInOptional) = RPR_SetTakeMarker(take, idx, nameIn, srcposInOptional, colorInOptional)</code></div>
	<p>Inserts or updates a take marker. If idx&lt;0, a take marker will be added, otherwise an existing take marker will be updated. Returns the index of the new or updated take marker (which may change if srcPos is updated). See <a href="#GetNumTakeMarkers">GetNumTakeMarkers</a>, <a href="#GetTakeMarker">GetTakeMarker</a>, <a href="#DeleteTakeMarker">DeleteTakeMarker</a></p>
</div>

<div class="function_definition" id="SetTakeStretchMarker">
	<div class="c_func"><code>int SetTakeStretchMarker(MediaItem_Take* take, int idx, double pos, const double* srcposInOptional)</code></div>
	<div class="e_func"><code><em>int </em> SetTakeStretchMarker(<em>MediaItem_Take</em> take, <em>int </em>idx, pos, <em>optional </em>srcposIn)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.SetTakeStretchMarker(<em>MediaItem_Take</em> take, <em>integer</em> idx, <em>number</em> pos, <em>optional number </em>srcposIn)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_SetTakeStretchMarker(<em>MediaItem_Take</em> take, <em>Int</em> idx, <em>Float</em> pos, <em>const double</em> srcposInOptional)</code></div>
	<p>Adds or updates a stretch marker. If idx&lt;0, stretch marker will be added. If idx&gt;=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).</p>
</div>

<div class="function_definition" id="SetTakeStretchMarkerSlope">
	<div class="c_func"><code>bool SetTakeStretchMarkerSlope(MediaItem_Take* take, int idx, double slope)</code></div>
	<div class="e_func"><code><em>bool </em> SetTakeStretchMarkerSlope(<em>MediaItem_Take</em> take, <em>int </em>idx, slope)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetTakeStretchMarkerSlope(<em>MediaItem_Take</em> take, <em>integer</em> idx, <em>number</em> slope)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetTakeStretchMarkerSlope(<em>MediaItem_Take</em> take, <em>Int</em> idx, <em>Float</em> slope)</code></div>
	<p>See <a href="#GetTakeStretchMarkerSlope">GetTakeStretchMarkerSlope</a></p>
</div>

<div class="function_definition" id="SetTempoTimeSigMarker">
	<div class="c_func"><code>bool SetTempoTimeSigMarker(ReaProject* proj, int ptidx, double timepos, int measurepos, double beatpos, double bpm, int timesig_num, int timesig_denom, bool lineartempo)</code></div>
	<div class="e_func"><code><em>bool </em> SetTempoTimeSigMarker(<em>ReaProject</em> proj, <em>int </em>ptidx, timepos, <em>int </em>measurepos, beatpos, bpm, <em>int </em>timesig_num, <em>int </em>timesig_denom, <em>bool </em>lineartempo)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetTempoTimeSigMarker(<em>ReaProject</em> proj, <em>integer</em> ptidx, <em>number</em> timepos, <em>integer</em> measurepos, <em>number</em> beatpos, <em>number</em> bpm, <em>integer</em> timesig_num, <em>integer</em> timesig_denom, <em>boolean</em> lineartempo)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetTempoTimeSigMarker(<em>ReaProject</em> proj, <em>Int</em> ptidx, <em>Float</em> timepos, <em>Int</em> measurepos, <em>Float</em> beatpos, <em>Float</em> bpm, <em>Int</em> timesig_num, <em>Int</em> timesig_denom, <em>Boolean</em> lineartempo)</code></div>
	<p>Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See <a href="#CountTempoTimeSigMarkers">CountTempoTimeSigMarkers</a>, <a href="#GetTempoTimeSigMarker">GetTempoTimeSigMarker</a>, <a href="#AddTempoTimeSigMarker">AddTempoTimeSigMarker</a>.</p>
</div>

<div class="function_definition" id="SetThemeColor">
	<div class="c_func"><code>int SetThemeColor(const char* ini_key, int color, int flagsOptional)</code></div>
	<div class="e_func"><code><em>int </em> SetThemeColor("ini_key", <em>int </em>color, <em>int </em>flags)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.SetThemeColor(<em>string</em> ini_key, <em>integer</em> color, <em>integer</em> flags)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_SetThemeColor(<em>String</em> ini_key, <em>Int</em> color, <em>Int</em> flagsOptional)</code></div>
	<p>Temporarily updates the theme color to the color specified (or the theme default color if -1 is specified). Returns -1 on failure, otherwise returns the color (or transformed-color). Note that the UI is not updated by this, the caller should call UpdateArrange() etc as necessary. If the low bit of flags is set, any color transformations are bypassed. To read a value see <a href="#GetThemeColor">GetThemeColor</a>.<br>Currently valid ini_keys:<ul>
<li><strong>col_main_bg2</strong> : Main window/transport background
<em>-- current RGB: 51,51,51</em>
<li><strong>col_main_text2</strong> : Main window/transport text
<em>-- current RGB: 170,170,170</em>
<li><strong>col_main_textshadow</strong> : Main window text shadow (ignored if too close to text color)
<em>-- current RGB: 18,26,29</em>
<li><strong>col_main_3dhl</strong> : Main window 3D highlight
<em>-- current RGB: 70,70,70</em>
<li><strong>col_main_3dsh</strong> : Main window 3D shadow
<em>-- current RGB: 45,45,45</em>
<li><strong>col_main_resize2</strong> : Main window pane resize mouseover
<em>-- current RGB: 51,51,51</em>
<li><strong>col_main_text</strong> : Themed window text
<em>-- current RGB: 18,18,18</em>
<li><strong>col_main_bg</strong> : Themed window background
<em>-- current RGB: 123,123,123</em>
<li><strong>col_main_editbk</strong> : Themed window edit background
<em>-- current RGB: 170,170,170</em>
<li><strong>col_nodarkmodemiscwnd</strong> : Do not use window theming on macOS dark mode
<em>-- bool 00000000</em>
<li><strong>col_transport_editbk</strong> : Transport edit background
<em>-- current RGB: 51,51,51</em>
<li><strong>col_toolbar_text</strong> : Toolbar button text
<em>-- current RGB: 159,159,159</em>
<li><strong>col_toolbar_text_on</strong> : Toolbar button enabled text
<em>-- current RGB: 191,251,192</em>
<li><strong>col_toolbar_frame</strong> : Toolbar frame when floating or docked
<em>-- current RGB: 71,78,78</em>
<li><strong>toolbararmed_color</strong> : Toolbar button armed color
<em>-- current RGB: 255,128,0</em>
<li><strong>toolbararmed_drawmode</strong> : Toolbar button armed fill mode
<em>-- blendmode 00028001</em>
<li><strong>io_text</strong> : I/O window text
<em>-- current RGB: 69,69,69</em>
<li><strong>io_3dhl</strong> : I/O window 3D highlight
<em>-- current RGB: 131,131,131</em>
<li><strong>io_3dsh</strong> : I/O window 3D shadow
<em>-- current RGB: 204,204,204</em>
<li><strong>genlist_bg</strong> : Window list background
<em>-- current RGB: 170,170,170</em>
<li><strong>genlist_fg</strong> : Window list text
<em>-- current RGB: 18,18,18</em>
<li><strong>genlist_grid</strong> : Window list grid lines
<em>-- current RGB: 132,132,132</em>
<li><strong>genlist_selbg</strong> : Window list selected row
<em>-- current RGB: 87,87,87</em>
<li><strong>genlist_selfg</strong> : Window list selected text
<em>-- current RGB: 255,255,255</em>
<li><strong>genlist_seliabg</strong> : Window list selected row (inactive)
<em>-- current RGB: 240,240,240</em>
<li><strong>genlist_seliafg</strong> : Window list selected text (inactive)
<em>-- current RGB: 0,0,0</em>
<li><strong>genlist_hilite</strong> : Window list highlighted text
<em>-- current RGB: 0,0,224</em>
<li><strong>genlist_hilite_sel</strong> : Window list highlighted selected text
<em>-- current RGB: 192,192,255</em>
<li><strong>col_buttonbg</strong> : Button background
<em>-- current RGB: 0,0,0</em>
<li><strong>col_tcp_text</strong> : Track panel text
<em>-- current RGB: 18,26,29</em>
<li><strong>col_tcp_textsel</strong> : Track panel (selected) text
<em>-- current RGB: 18,26,29</em>
<li><strong>col_seltrack</strong> : Selected track control panel background
<em>-- current RGB: 210,210,210</em>
<li><strong>col_seltrack2</strong> : Unselected track control panel background (enabled with a checkbox above)
<em>-- current RGB: 197,197,197</em>
<li><strong>tcplocked_color</strong> : Locked track control panel overlay color
<em>-- current RGB: 51,51,51</em>
<li><strong>tcplocked_drawmode</strong> : Locked track control panel fill mode
<em>-- blendmode 0002c000</em>
<li><strong>col_tracklistbg</strong> : Empty track list area
<em>-- current RGB: 51,51,51</em>
<li><strong>col_mixerbg</strong> : Empty mixer list area
<em>-- current RGB: 51,51,51</em>
<li><strong>col_arrangebg</strong> : Empty arrange view area
<em>-- current RGB: 41,41,41</em>
<li><strong>arrange_vgrid</strong> : Empty arrange view area vertical grid shading
<em>-- current RGB: 41,41,41</em>
<li><strong>col_fadearm</strong> : Fader background when automation recording
<em>-- current RGB: 255,125,125</em>
<li><strong>col_fadearm2</strong> : Fader background when automation playing
<em>-- current RGB: 125,255,125</em>
<li><strong>col_fadearm3</strong> : Fader background when in inactive touch/latch
<em>-- current RGB: 255,255,98</em>
<li><strong>col_tl_fg</strong> : Timeline foreground
<em>-- current RGB: 105,107,107</em>
<li><strong>col_tl_fg2</strong> : Timeline foreground (secondary markings)
<em>-- current RGB: 76,77,77</em>
<li><strong>col_tl_bg</strong> : Timeline background
<em>-- current RGB: 48,48,48</em>
<li><strong>col_tl_bgsel</strong> : Time selection color
<em>-- current RGB: 255,255,255</em>
<li><strong>timesel_drawmode</strong> : Time selection fill mode
<em>-- blendmode 00020f01</em>
<li><strong>col_tl_bgsel2</strong> : Timeline background (in loop points)
<em>-- current RGB: 192,192,192</em>
<li><strong>col_trans_bg</strong> : Transport status background
<em>-- current RGB: 73,73,73</em>
<li><strong>col_trans_fg</strong> : Transport status text
<em>-- current RGB: 137,139,139</em>
<li><strong>playrate_edited</strong> : Project play rate control when not 1.0
<em>-- current RGB: 127,63,0</em>
<li><strong>selitem_dot</strong> : Media item selection indicator
<em>-- current RGB: 255,255,255</em>
<li><strong>col_mi_label</strong> : Media item label
<em>-- current RGB: 170,170,170</em>
<li><strong>col_mi_label_sel</strong> : Media item label (selected)
<em>-- current RGB: 170,170,170</em>
<li><strong>col_mi_label_float</strong> : Floating media item label
<em>-- current RGB: 170,170,170</em>
<li><strong>col_mi_label_float_sel</strong> : Floating media item label (selected)
<em>-- current RGB: 170,170,170</em>
<li><strong>col_mi_bg</strong> : Media item background (odd tracks)
<em>-- current RGB: 125,125,125</em>
<li><strong>col_mi_bg2</strong> : Media item background (even tracks)
<em>-- current RGB: 125,125,125</em>
<li><strong>col_tr1_itembgsel</strong> : Media item background selected (odd tracks)
<em>-- current RGB: 106,255,163</em>
<li><strong>col_tr2_itembgsel</strong> : Media item background selected (even tracks)
<em>-- current RGB: 106,255,163</em>
<li><strong>itembg_drawmode</strong> : Media item background fill mode
<em>-- blendmode 00028000</em>
<li><strong>col_tr1_peaks</strong> : Media item peaks (odd tracks)
<em>-- current RGB: 21,21,21</em>
<li><strong>col_tr2_peaks</strong> : Media item peaks (even tracks)
<em>-- current RGB: 21,21,21</em>
<li><strong>col_tr1_ps2</strong> : Media item peaks when selected (odd tracks)
<em>-- current RGB: 21,21,21</em>
<li><strong>col_tr2_ps2</strong> : Media item peaks when selected (even tracks)
<em>-- current RGB: 21,21,21</em>
<li><strong>col_peaksedge</strong> : Media item peaks edge highlight (odd tracks)
<em>-- current RGB: 51,51,51</em>
<li><strong>col_peaksedge2</strong> : Media item peaks edge highlight (even tracks)
<em>-- current RGB: 51,51,51</em>
<li><strong>col_peaksedgesel</strong> : Media item peaks edge highlight when selected (odd tracks)
<em>-- current RGB: 51,51,51</em>
<li><strong>col_peaksedgesel2</strong> : Media item peaks edge highlight when selected (even tracks)
<em>-- current RGB: 51,51,51</em>
<li><strong>cc_chase_drawmode</strong> : Media item MIDI CC peaks fill mode
<em>-- blendmode 00024000</em>
<li><strong>col_peaksfade</strong> : Media item peaks when active in crossfade editor (fade-out)
<em>-- current RGB: 0,255,0</em>
<li><strong>col_peaksfade2</strong> : Media item peaks when active in crossfade editor (fade-in)
<em>-- current RGB: 255,0,0</em>
<li><strong>col_mi_fades</strong> : Media item fade/volume controls
<em>-- current RGB: 105,16,16</em>
<li><strong>fadezone_color</strong> : Media item fade quiet zone fill color
<em>-- current RGB: 72,0,0</em>
<li><strong>fadezone_drawmode</strong> : Media item fade quiet zone fill mode
<em>-- blendmode 00030004</em>
<li><strong>fadearea_color</strong> : Media item fade full area fill color
<em>-- current RGB: 0,0,96</em>
<li><strong>fadearea_drawmode</strong> : Media item fade full area fill mode
<em>-- blendmode 00020000</em>
<li><strong>col_mi_fade2</strong> : Media item edges of controls
<em>-- current RGB: 198,198,198</em>
<li><strong>col_mi_fade2_drawmode</strong> : Media item edges of controls blend mode
<em>-- blendmode 00025901</em>
<li><strong>item_grouphl</strong> : Media item edge when selected via grouping
<em>-- current RGB: 51,184,48</em>
<li><strong>selitem_preview</strong> : Media item edge on mouseover when grouped
<em>-- current RGB: 192,192,192</em>
<li><strong>col_offlinetext</strong> : Media item "offline" text
<em>-- current RGB: 48,66,71</em>
<li><strong>col_stretchmarker</strong> : Media item stretch marker line
<em>-- current RGB: 84,124,124</em>
<li><strong>col_stretchmarker_h0</strong> : Media item stretch marker handle (1x)
<em>-- current RGB: 120,135,135</em>
<li><strong>col_stretchmarker_h1</strong> : Media item stretch marker handle (>1x)
<em>-- current RGB: 40,141,196</em>
<li><strong>col_stretchmarker_h2</strong> : Media item stretch marker handle (&lt;1x)
<em>-- current RGB: 159,64,64</em>
<li><strong>col_stretchmarker_b</strong> : Media item stretch marker handle edge
<em>-- current RGB: 192,192,192</em>
<li><strong>col_stretchmarkerm</strong> : Media item stretch marker blend mode
<em>-- blendmode 00030000</em>
<li><strong>col_stretchmarker_text</strong> : Media item stretch marker text
<em>-- current RGB: 126,153,154</em>
<li><strong>col_stretchmarker_tm</strong> : Media item transient guide handle
<em>-- current RGB: 0,234,0</em>
<li><strong>take_marker</strong> : Media item take marker
<em>-- current RGB: 255,255,0</em>
<li><strong>selitem_tag</strong> : Selected media item bar color
<em>-- current RGB: 0,0,0</em>
<li><strong>activetake_tag</strong> : Active media item take bar color
<em>-- current RGB: 0,0,0</em>
<li><strong>col_tr1_bg</strong> : Track background (odd tracks)
<em>-- current RGB: 41,41,41</em>
<li><strong>col_tr2_bg</strong> : Track background (even tracks)
<em>-- current RGB: 41,41,41</em>
<li><strong>selcol_tr1_bg</strong> : Selected track background (odd tracks)
<em>-- current RGB: 41,41,41</em>
<li><strong>selcol_tr2_bg</strong> : Selected track background (even tracks)
<em>-- current RGB: 41,41,41</em>
<li><strong>track_lane_tabcol</strong> : Track fixed lane button
<em>-- current RGB: 87,96,87</em>
<li><strong>track_lanesolo_tabcol</strong> : Track fixed lane button when only this lane plays
<em>-- current RGB: 201,201,38</em>
<li><strong>track_lane_gutter</strong> : Track fixed lane add area
<em>-- current RGB: 128,128,128</em>
<li><strong>track_lane_gutter_drawmode</strong> : Track fixed lane add fill mode
<em>-- blendmode 00024000</em>
<li><strong>col_tr1_divline</strong> : Track divider line (odd tracks)
<em>-- current RGB: 67,67,67</em>
<li><strong>col_tr2_divline</strong> : Track divider line (even tracks)
<em>-- current RGB: 67,67,67</em>
<li><strong>col_envlane1_divline</strong> : Envelope lane divider line (odd tracks)
<em>-- current RGB: 0,0,0</em>
<li><strong>col_envlane2_divline</strong> : Envelope lane divider line (even tracks)
<em>-- current RGB: 0,0,0</em>
<li><strong>mute_overlay_col</strong> : Muted/unsoloed track/item overlay color
<em>-- current RGB: 65,65,65</em>
<li><strong>mute_overlay_mode</strong> : Muted/unsoloed track/item overlay mode
<em>-- blendmode 0002a600</em>
<li><strong>inactive_take_overlay_col</strong> : Inactive take overlay color
<em>-- current RGB: 48,48,48</em>
<li><strong>inactive_take_overlay_mode</strong> : Inactive take overlay mode
<em>-- blendmode 00028000</em>
<li><strong>locked_overlay_col</strong> : Locked track/item overlay color
<em>-- current RGB: 0,0,0</em>
<li><strong>locked_overlay_mode</strong> : Locked track/item overlay mode
<em>-- blendmode 00025c03</em>
<li><strong>marquee_fill</strong> : Marquee fill
<em>-- current RGB: 128,128,110</em>
<li><strong>marquee_drawmode</strong> : Marquee fill mode
<em>-- blendmode 000299ff</em>
<li><strong>marquee_outline</strong> : Marquee outline
<em>-- current RGB: 255,255,255</em>
<li><strong>marqueezoom_fill</strong> : Marquee zoom fill
<em>-- current RGB: 255,255,255</em>
<li><strong>marqueezoom_drawmode</strong> : Marquee zoom fill mode
<em>-- blendmode 00024002</em>
<li><strong>marqueezoom_outline</strong> : Marquee zoom outline
<em>-- current RGB: 0,255,0</em>
<li><strong>areasel_fill</strong> : Razor edit area fill
<em>-- current RGB: 31,233,192</em>
<li><strong>areasel_drawmode</strong> : Razor edit area fill mode
<em>-- blendmode 00021c01</em>
<li><strong>areasel_outline</strong> : Razor edit area outline
<em>-- current RGB: 0,251,201</em>
<li><strong>areasel_outlinemode</strong> : Razor edit area outline mode
<em>-- blendmode 0002c000</em>
<li><strong>linkedlane_fill</strong> : Fixed lane comp area fill
<em>-- current RGB: 255,203,0</em>
<li><strong>linkedlane_fillmode</strong> : Fixed lane comp area fill mode
<em>-- blendmode 00020c01</em>
<li><strong>linkedlane_outline</strong> : Fixed lane comp area outline
<em>-- current RGB: 255,237,164</em>
<li><strong>linkedlane_outlinemode</strong> : Fixed lane comp area outline mode
<em>-- blendmode 0002c000</em>
<li><strong>col_cursor</strong> : Edit cursor
<em>-- current RGB: 220,36,36</em>
<li><strong>col_cursor2</strong> : Edit cursor (alternate)
<em>-- current RGB: 220,36,36</em>
<li><strong>playcursor_color</strong> : Play cursor
<em>-- current RGB: 0,0,0</em>
<li><strong>playcursor_drawmode</strong> : Play cursor fill mode
<em>-- blendmode 00028003</em>
<li><strong>col_gridlines2</strong> : Grid lines (start of measure)
<em>-- current RGB: 138,69,0</em>
<li><strong>col_gridlines2dm</strong> : Grid lines (start of measure) - draw mode
<em>-- blendmode 0002c001</em>
<li><strong>col_gridlines3</strong> : Grid lines (start of beats)
<em>-- current RGB: 73,73,73</em>
<li><strong>col_gridlines3dm</strong> : Grid lines (start of beats) - draw mode
<em>-- blendmode 00028001</em>
<li><strong>col_gridlines</strong> : Grid lines (in between beats)
<em>-- current RGB: 50,50,50</em>
<li><strong>col_gridlines1dm</strong> : Grid lines (in between beats) - draw mode
<em>-- blendmode 00028001</em>
<li><strong>guideline_color</strong> : Editing guide line color
<em>-- current RGB: 95,169,167</em>
<li><strong>guideline_drawmode</strong> : Editing guide fill mode
<em>-- blendmode 00024c01</em>
<li><strong>region</strong> : Regions
<em>-- current RGB: 128,138,138</em>
<li><strong>region_lane_bg</strong> : Region lane background
<em>-- current RGB: 51,51,51</em>
<li><strong>region_lane_text</strong> : Region lane text
<em>-- current RGB: 31,39,37</em>
<li><strong>marker</strong> : Markers
<em>-- current RGB: 75,0,0</em>
<li><strong>marker_lane_bg</strong> : Marker lane background
<em>-- current RGB: 73,73,73</em>
<li><strong>marker_lane_text</strong> : Marker lane text
<em>-- current RGB: 165,165,165</em>
<li><strong>col_tsigmark</strong> : Time signature change marker
<em>-- current RGB: 170,170,170</em>
<li><strong>ts_lane_bg</strong> : Time signature lane background
<em>-- current RGB: 51,51,51</em>
<li><strong>ts_lane_text</strong> : Time signature lane text
<em>-- current RGB: 165,165,165</em>
<li><strong>timesig_sel_bg</strong> : Time signature marker selected background
<em>-- current RGB: 70,0,0</em>
<li><strong>col_routinghl1</strong> : Routing matrix row highlight
<em>-- current RGB: 255,255,192</em>
<li><strong>col_routinghl2</strong> : Routing matrix column highlight
<em>-- current RGB: 128,128,255</em>
<li><strong>col_routingact</strong> : Routing matrix input activity highlight
<em>-- current RGB: 64,255,64</em>
<li><strong>col_vudoint</strong> : Theme has interlaced VU meters
<em>-- bool 00000000</em>
<li><strong>col_vuclip</strong> : VU meter clip indicator
<em>-- current RGB: 255,0,0</em>
<li><strong>col_vutop</strong> : VU meter top
<em>-- current RGB: 255,128,0</em>
<li><strong>col_vumid</strong> : VU meter middle
<em>-- current RGB: 255,255,0</em>
<li><strong>col_vubot</strong> : VU meter bottom
<em>-- current RGB: 0,191,191</em>
<li><strong>col_vuintcol</strong> : VU meter interlace/edge color
<em>-- current RGB: 32,32,32</em>
<li><strong>col_vumidi</strong> : VU meter midi activity
<em>-- current RGB: 255,0,0</em>
<li><strong>col_vuind1</strong> : VU (indicator) - no signal
<em>-- current RGB: 32,32,32</em>
<li><strong>col_vuind2</strong> : VU (indicator) - low signal
<em>-- current RGB: 213,0,0</em>
<li><strong>col_vuind3</strong> : VU (indicator) - med signal
<em>-- current RGB: 255,128,0</em>
<li><strong>col_vuind4</strong> : VU (indicator) - hot signal
<em>-- current RGB: 255,255,0</em>
<li><strong>mcp_sends_normal</strong> : Sends text: normal
<em>-- current RGB: 163,163,163</em>
<li><strong>mcp_sends_muted</strong> : Sends text: muted
<em>-- current RGB: 152,134,99</em>
<li><strong>mcp_send_midihw</strong> : Sends text: MIDI hardware
<em>-- current RGB: 40,40,40</em>
<li><strong>mcp_sends_levels</strong> : Sends level
<em>-- current RGB: 48,66,71</em>
<li><strong>mcp_fx_normal</strong> : FX insert text: normal
<em>-- current RGB: 201,164,107</em>
<li><strong>mcp_fx_bypassed</strong> : FX insert text: bypassed
<em>-- current RGB: 140,140,140</em>
<li><strong>mcp_fx_offlined</strong> : FX insert text: offline
<em>-- current RGB: 183,68,68</em>
<li><strong>mcp_fxparm_normal</strong> : FX parameter text: normal
<em>-- current RGB: 163,163,163</em>
<li><strong>mcp_fxparm_bypassed</strong> : FX parameter text: bypassed
<em>-- current RGB: 152,134,99</em>
<li><strong>mcp_fxparm_offlined</strong> : FX parameter text: offline
<em>-- current RGB: 152,99,99</em>
<li><strong>tcp_list_scrollbar</strong> : List scrollbar (track panel)
<em>-- current RGB: 50,50,50</em>
<li><strong>tcp_list_scrollbar_mode</strong> : List scrollbar (track panel) - draw mode
<em>-- blendmode 00028000</em>
<li><strong>tcp_list_scrollbar_mouseover</strong> : List scrollbar mouseover (track panel)
<em>-- current RGB: 30,30,30</em>
<li><strong>tcp_list_scrollbar_mouseover_mode</strong> : List scrollbar mouseover (track panel) - draw mode
<em>-- blendmode 00028000</em>
<li><strong>mcp_list_scrollbar</strong> : List scrollbar (mixer panel)
<em>-- current RGB: 140,140,140</em>
<li><strong>mcp_list_scrollbar_mode</strong> : List scrollbar (mixer panel) - draw mode
<em>-- blendmode 00028000</em>
<li><strong>mcp_list_scrollbar_mouseover</strong> : List scrollbar mouseover (mixer panel)
<em>-- current RGB: 64,191,159</em>
<li><strong>mcp_list_scrollbar_mouseover_mode</strong> : List scrollbar mouseover (mixer panel) - draw mode
<em>-- blendmode 00028000</em>
<li><strong>midi_rulerbg</strong> : MIDI editor ruler background
<em>-- current RGB: 51,51,51</em>
<li><strong>midi_rulerfg</strong> : MIDI editor ruler text
<em>-- current RGB: 127,127,127</em>
<li><strong>midi_grid2</strong> : MIDI editor grid line (start of measure)
<em>-- current RGB: 138,69,0</em>
<li><strong>midi_griddm2</strong> : MIDI editor grid line (start of measure) - draw mode
<em>-- blendmode 00030000</em>
<li><strong>midi_grid3</strong> : MIDI editor grid line (start of beats)
<em>-- current RGB: 91,91,91</em>
<li><strong>midi_griddm3</strong> : MIDI editor grid line (start of beats) - draw mode
<em>-- blendmode 00028000</em>
<li><strong>midi_grid1</strong> : MIDI editor grid line (between beats)
<em>-- current RGB: 57,57,57</em>
<li><strong>midi_griddm1</strong> : MIDI editor grid line (between beats) - draw mode
<em>-- blendmode 00030000</em>
<li><strong>midi_trackbg1</strong> : MIDI editor background color (naturals)
<em>-- current RGB: 48,48,48</em>
<li><strong>midi_trackbg2</strong> : MIDI editor background color (sharps/flats)
<em>-- current RGB: 41,41,41</em>
<li><strong>midi_trackbg_outer1</strong> : MIDI editor background color, out of bounds (naturals)
<em>-- current RGB: 31,31,31</em>
<li><strong>midi_trackbg_outer2</strong> : MIDI editor background color, out of bounds (sharps/flats)
<em>-- current RGB: 24,24,24</em>
<li><strong>midi_selpitch1</strong> : MIDI editor background color, selected pitch (naturals)
<em>-- current RGB: 87,57,57</em>
<li><strong>midi_selpitch2</strong> : MIDI editor background color, selected pitch (sharps/flats)
<em>-- current RGB: 75,52,52</em>
<li><strong>midi_selbg</strong> : MIDI editor time selection color
<em>-- current RGB: 255,255,255</em>
<li><strong>midi_selbg_drawmode</strong> : MIDI editor time selection fill mode
<em>-- blendmode 00020c01</em>
<li><strong>midi_gridhc</strong> : MIDI editor CC horizontal center line
<em>-- current RGB: 157,157,157</em>
<li><strong>midi_gridhcdm</strong> : MIDI editor CC horizontal center line - draw mode
<em>-- blendmode 00030000</em>
<li><strong>midi_gridh</strong> : MIDI editor CC horizontal line
<em>-- current RGB: 91,91,91</em>
<li><strong>midi_gridhdm</strong> : MIDI editor CC horizontal line - draw mode
<em>-- blendmode 00028000</em>
<li><strong>midi_ccbut</strong> : MIDI editor CC lane add/remove buttons
<em>-- current RGB: 123,123,123</em>
<li><strong>midi_ccbut_text</strong> : MIDI editor CC lane button text
<em>-- current RGB: 170,170,170</em>
<li><strong>midi_ccbut_arrow</strong> : MIDI editor CC lane button arrow
<em>-- current RGB: 170,170,170</em>
<li><strong>midioct</strong> : MIDI editor octave line color
<em>-- current RGB: 73,73,73</em>
<li><strong>midi_inline_trackbg1</strong> : MIDI inline background color (naturals)
<em>-- current RGB: 48,48,48</em>
<li><strong>midi_inline_trackbg2</strong> : MIDI inline background color (sharps/flats)
<em>-- current RGB: 41,41,41</em>
<li><strong>midioct_inline</strong> : MIDI inline octave line color
<em>-- current RGB: 73,73,73</em>
<li><strong>midi_endpt</strong> : MIDI editor end marker
<em>-- current RGB: 58,58,58</em>
<li><strong>midi_notebg</strong> : MIDI editor note, unselected (midi_note_colormap overrides)
<em>-- current RGB: 91,123,108</em>
<li><strong>midi_notefg</strong> : MIDI editor note, selected (midi_note_colormap overrides)
<em>-- current RGB: 49,49,49</em>
<li><strong>midi_notemute</strong> : MIDI editor note, muted, unselected (midi_note_colormap overrides)
<em>-- current RGB: 53,53,53</em>
<li><strong>midi_notemute_sel</strong> : MIDI editor note, muted, selected (midi_note_colormap overrides)
<em>-- current RGB: 24,24,24</em>
<li><strong>midi_itemctl</strong> : MIDI editor note controls
<em>-- current RGB: 53,53,53</em>
<li><strong>midi_ofsn</strong> : MIDI editor note (offscreen)
<em>-- current RGB: 59,59,59</em>
<li><strong>midi_ofsnsel</strong> : MIDI editor note (offscreen, selected)
<em>-- current RGB: 59,59,59</em>
<li><strong>midi_editcurs</strong> : MIDI editor cursor
<em>-- current RGB: 220,36,36</em>
<li><strong>midi_pkey1</strong> : MIDI piano key color (naturals background, sharps/flats text)
<em>-- current RGB: 255,255,255</em>
<li><strong>midi_pkey2</strong> : MIDI piano key color (sharps/flats background, naturals text)
<em>-- current RGB: 0,0,0</em>
<li><strong>midi_pkey3</strong> : MIDI piano key color (selected)
<em>-- current RGB: 93,93,93</em>
<li><strong>midi_noteon_flash</strong> : MIDI piano key note-on flash
<em>-- current RGB: 64,0,0</em>
<li><strong>midi_leftbg</strong> : MIDI piano pane background
<em>-- current RGB: 53,53,53</em>
<li><strong>midifont_col_light_unsel</strong> : MIDI editor note text and control color, unselected (light)
<em>-- current RGB: 224,224,224</em>
<li><strong>midifont_col_dark_unsel</strong> : MIDI editor note text and control color, unselected (dark)
<em>-- current RGB: 32,32,32</em>
<li><strong>midifont_mode_unsel</strong> : MIDI editor note text and control mode, unselected
<em>-- blendmode 0002c000</em>
<li><strong>midifont_col_light</strong> : MIDI editor note text and control color (light)
<em>-- current RGB: 189,189,189</em>
<li><strong>midifont_col_dark</strong> : MIDI editor note text and control color (dark)
<em>-- current RGB: 64,64,64</em>
<li><strong>midifont_mode</strong> : MIDI editor note text and control mode
<em>-- blendmode 00030000</em>
<li><strong>score_bg</strong> : MIDI notation editor background
<em>-- current RGB: 255,255,255</em>
<li><strong>score_fg</strong> : MIDI notation editor staff/notation/text
<em>-- current RGB: 0,0,0</em>
<li><strong>score_sel</strong> : MIDI notation editor selected staff/notation/text
<em>-- current RGB: 0,0,255</em>
<li><strong>score_timesel</strong> : MIDI notation editor time selection
<em>-- current RGB: 255,255,224</em>
<li><strong>score_loop</strong> : MIDI notation editor loop points, selected pitch
<em>-- current RGB: 255,192,0</em>
<li><strong>midieditorlist_bg</strong> : MIDI list editor background
<em>-- current RGB: 53,53,53</em>
<li><strong>midieditorlist_fg</strong> : MIDI list editor text
<em>-- current RGB: 170,170,170</em>
<li><strong>midieditorlist_grid</strong> : MIDI list editor grid lines
<em>-- current RGB: 53,53,53</em>
<li><strong>midieditorlist_selbg</strong> : MIDI list editor selected row
<em>-- current RGB: 51,153,255</em>
<li><strong>midieditorlist_selfg</strong> : MIDI list editor selected text
<em>-- current RGB: 255,255,255</em>
<li><strong>midieditorlist_seliabg</strong> : MIDI list editor selected row (inactive)
<em>-- current RGB: 240,240,240</em>
<li><strong>midieditorlist_seliafg</strong> : MIDI list editor selected text (inactive)
<em>-- current RGB: 0,0,0</em>
<li><strong>midieditorlist_bg2</strong> : MIDI list editor background (secondary)
<em>-- current RGB: 53,53,53</em>
<li><strong>midieditorlist_fg2</strong> : MIDI list editor text (secondary)
<em>-- current RGB: 0,0,0</em>
<li><strong>midieditorlist_selbg2</strong> : MIDI list editor selected row (secondary)
<em>-- current RGB: 35,135,240</em>
<li><strong>midieditorlist_selfg2</strong> : MIDI list editor selected text (secondary)
<em>-- current RGB: 255,255,255</em>
<li><strong>col_explorer_sel</strong> : Media explorer selection
<em>-- current RGB: 255,255,255</em>
<li><strong>col_explorer_seldm</strong> : Media explorer selection mode
<em>-- blendmode 00021501</em>
<li><strong>col_explorer_seledge</strong> : Media explorer selection edge
<em>-- current RGB: 255,255,255</em>
<li><strong>explorer_grid</strong> : Media explorer grid, markers
<em>-- current RGB: 255,255,255</em>
<li><strong>explorer_pitchtext</strong> : Media explorer pitch detection text
<em>-- current RGB: 255,255,255</em>
<li><strong>docker_shadow</strong> : Tab control shadow
<em>-- current RGB: 18,26,29</em>
<li><strong>docker_selface</strong> : Tab control selected tab
<em>-- current RGB: 74,74,74</em>
<li><strong>docker_unselface</strong> : Tab control unselected tab
<em>-- current RGB: 51,51,51</em>
<li><strong>docker_text</strong> : Tab control text
<em>-- current RGB: 51,51,51</em>
<li><strong>docker_text_sel</strong> : Tab control text selected tab
<em>-- current RGB: 51,51,51</em>
<li><strong>docker_bg</strong> : Tab control background
<em>-- current RGB: 66,66,66</em>
<li><strong>windowtab_bg</strong> : Tab control background in windows
<em>-- current RGB: 120,120,120</em>
<li><strong>auto_item_unsel</strong> : Envelope: Unselected automation item
<em>-- current RGB: 96,96,96</em>
<li><strong>col_env1</strong> : Envelope: Volume (pre-FX)
<em>-- current RGB: 0,220,128</em>
<li><strong>col_env2</strong> : Envelope: Volume
<em>-- current RGB: 0,213,27</em>
<li><strong>env_trim_vol</strong> : Envelope: Trim Volume
<em>-- current RGB: 213,0,106</em>
<li><strong>col_env3</strong> : Envelope: Pan (pre-FX)
<em>-- current RGB: 255,0,0</em>
<li><strong>col_env4</strong> : Envelope: Pan
<em>-- current RGB: 255,150,0</em>
<li><strong>env_track_mute</strong> : Envelope: Mute
<em>-- current RGB: 213,0,159</em>
<li><strong>col_env5</strong> : Envelope: Master playrate
<em>-- current RGB: 213,0,106</em>
<li><strong>col_env6</strong> : Envelope: Master tempo
<em>-- current RGB: 0,255,255</em>
<li><strong>col_env7</strong> : Envelope: Width / Send volume
<em>-- current RGB: 213,0,0</em>
<li><strong>col_env8</strong> : Envelope: Send pan
<em>-- current RGB: 0,128,128</em>
<li><strong>col_env9</strong> : Envelope: Send volume 2
<em>-- current RGB: 128,0,0</em>
<li><strong>col_env10</strong> : Envelope: Send pan 2
<em>-- current RGB: 0,128,128</em>
<li><strong>env_sends_mute</strong> : Envelope: Send mute
<em>-- current RGB: 192,192,0</em>
<li><strong>col_env11</strong> : Envelope: Audio hardware output volume
<em>-- current RGB: 0,255,255</em>
<li><strong>col_env12</strong> : Envelope: Audio hardware output pan
<em>-- current RGB: 255,255,0</em>
<li><strong>col_env13</strong> : Envelope: FX parameter 1
<em>-- current RGB: 128,0,255</em>
<li><strong>col_env14</strong> : Envelope: FX parameter 2
<em>-- current RGB: 64,128,128</em>
<li><strong>col_env15</strong> : Envelope: FX parameter 3
<em>-- current RGB: 0,0,255</em>
<li><strong>col_env16</strong> : Envelope: FX parameter 4
<em>-- current RGB: 255,0,128</em>
<li><strong>env_item_vol</strong> : Envelope: Item take volume
<em>-- current RGB: 128,0,0</em>
<li><strong>env_item_pan</strong> : Envelope: Item take pan
<em>-- current RGB: 0,128,128</em>
<li><strong>env_item_mute</strong> : Envelope: Item take mute
<em>-- current RGB: 192,192,0</em>
<li><strong>env_item_pitch</strong> : Envelope: Item take pitch
<em>-- current RGB: 0,255,255</em>
<li><strong>wiring_grid2</strong> : Wiring: Background
<em>-- current RGB: 46,46,46</em>
<li><strong>wiring_grid</strong> : Wiring: Background grid lines
<em>-- current RGB: 51,51,51</em>
<li><strong>wiring_border</strong> : Wiring: Box border
<em>-- current RGB: 153,153,153</em>
<li><strong>wiring_tbg</strong> : Wiring: Box background
<em>-- current RGB: 38,38,38</em>
<li><strong>wiring_ticon</strong> : Wiring: Box foreground
<em>-- current RGB: 204,204,204</em>
<li><strong>wiring_recbg</strong> : Wiring: Record section background
<em>-- current RGB: 101,77,77</em>
<li><strong>wiring_recitem</strong> : Wiring: Record section foreground
<em>-- current RGB: 63,33,33</em>
<li><strong>wiring_media</strong> : Wiring: Media
<em>-- current RGB: 32,64,32</em>
<li><strong>wiring_recv</strong> : Wiring: Receives
<em>-- current RGB: 92,92,92</em>
<li><strong>wiring_send</strong> : Wiring: Sends
<em>-- current RGB: 92,92,92</em>
<li><strong>wiring_fader</strong> : Wiring: Fader
<em>-- current RGB: 128,128,192</em>
<li><strong>wiring_parent</strong> : Wiring: Master/Parent
<em>-- current RGB: 64,128,128</em>
<li><strong>wiring_parentwire_border</strong> : Wiring: Master/Parent wire border
<em>-- current RGB: 100,100,100</em>
<li><strong>wiring_parentwire_master</strong> : Wiring: Master/Parent to master wire
<em>-- current RGB: 192,192,192</em>
<li><strong>wiring_parentwire_folder</strong> : Wiring: Master/Parent to parent folder wire
<em>-- current RGB: 128,128,128</em>
<li><strong>wiring_pin_normal</strong> : Wiring: Pins normal
<em>-- current RGB: 192,192,192</em>
<li><strong>wiring_pin_connected</strong> : Wiring: Pins connected
<em>-- current RGB: 96,144,96</em>
<li><strong>wiring_pin_disconnected</strong> : Wiring: Pins disconnected
<em>-- current RGB: 64,32,32</em>
<li><strong>wiring_horz_col</strong> : Wiring: Horizontal pin connections
<em>-- current RGB: 72,72,72</em>
<li><strong>wiring_sendwire</strong> : Wiring: Send hanging wire
<em>-- current RGB: 128,128,128</em>
<li><strong>wiring_hwoutwire</strong> : Wiring: Hardware output wire
<em>-- current RGB: 128,128,128</em>
<li><strong>wiring_recinputwire</strong> : Wiring: Record input wire
<em>-- current RGB: 255,128,128</em>
<li><strong>wiring_hwout</strong> : Wiring: System hardware outputs
<em>-- current RGB: 64,64,64</em>
<li><strong>wiring_recinput</strong> : Wiring: System record inputs
<em>-- current RGB: 128,64,64</em>
<li><strong>wiring_activity</strong> : Wiring: Activity lights
<em>-- current RGB: 64,255,64</em>
<li><strong>autogroup</strong> : Automatic track group
<em>-- current RGB: 255,255,255</em>
<li><strong>group_0</strong> : Group #1
<em>-- current RGB: 255,0,0</em>
<li><strong>group_1</strong> : Group #2
<em>-- current RGB: 0,255,0</em>
<li><strong>group_2</strong> : Group #3
<em>-- current RGB: 0,0,255</em>
<li><strong>group_3</strong> : Group #4
<em>-- current RGB: 255,255,0</em>
<li><strong>group_4</strong> : Group #5
<em>-- current RGB: 255,0,255</em>
<li><strong>group_5</strong> : Group #6
<em>-- current RGB: 0,255,255</em>
<li><strong>group_6</strong> : Group #7
<em>-- current RGB: 192,0,0</em>
<li><strong>group_7</strong> : Group #8
<em>-- current RGB: 0,192,0</em>
<li><strong>group_8</strong> : Group #9
<em>-- current RGB: 0,0,192</em>
<li><strong>group_9</strong> : Group #10
<em>-- current RGB: 192,192,0</em>
<li><strong>group_10</strong> : Group #11
<em>-- current RGB: 192,0,192</em>
<li><strong>group_11</strong> : Group #12
<em>-- current RGB: 0,192,192</em>
<li><strong>group_12</strong> : Group #13
<em>-- current RGB: 128,0,0</em>
<li><strong>group_13</strong> : Group #14
<em>-- current RGB: 0,128,0</em>
<li><strong>group_14</strong> : Group #15
<em>-- current RGB: 0,0,128</em>
<li><strong>group_15</strong> : Group #16
<em>-- current RGB: 128,128,0</em>
<li><strong>group_16</strong> : Group #17
<em>-- current RGB: 128,0,128</em>
<li><strong>group_17</strong> : Group #18
<em>-- current RGB: 0,128,128</em>
<li><strong>group_18</strong> : Group #19
<em>-- current RGB: 192,128,0</em>
<li><strong>group_19</strong> : Group #20
<em>-- current RGB: 0,192,128</em>
<li><strong>group_20</strong> : Group #21
<em>-- current RGB: 0,128,192</em>
<li><strong>group_21</strong> : Group #22
<em>-- current RGB: 192,128,0</em>
<li><strong>group_22</strong> : Group #23
<em>-- current RGB: 128,0,192</em>
<li><strong>group_23</strong> : Group #24
<em>-- current RGB: 128,192,0</em>
<li><strong>group_24</strong> : Group #25
<em>-- current RGB: 64,0,0</em>
<li><strong>group_25</strong> : Group #26
<em>-- current RGB: 0,64,0</em>
<li><strong>group_26</strong> : Group #27
<em>-- current RGB: 0,0,64</em>
<li><strong>group_27</strong> : Group #28
<em>-- current RGB: 64,64,0</em>
<li><strong>group_28</strong> : Group #29
<em>-- current RGB: 64,0,64</em>
<li><strong>group_29</strong> : Group #30
<em>-- current RGB: 0,64,64</em>
<li><strong>group_30</strong> : Group #31
<em>-- current RGB: 64,0,64</em>
<li><strong>group_31</strong> : Group #32
<em>-- current RGB: 0,64,64</em>
<li><strong>group_32</strong> : Group #33
<em>-- current RGB: 128,255,255</em>
<li><strong>group_33</strong> : Group #34
<em>-- current RGB: 128,0,128</em>
<li><strong>group_34</strong> : Group #35
<em>-- current RGB: 1,255,128</em>
<li><strong>group_35</strong> : Group #36
<em>-- current RGB: 128,0,255</em>
<li><strong>group_36</strong> : Group #37
<em>-- current RGB: 1,255,255</em>
<li><strong>group_37</strong> : Group #38
<em>-- current RGB: 1,0,128</em>
<li><strong>group_38</strong> : Group #39
<em>-- current RGB: 128,255,224</em>
<li><strong>group_39</strong> : Group #40
<em>-- current RGB: 128,63,128</em>
<li><strong>group_40</strong> : Group #41
<em>-- current RGB: 32,255,128</em>
<li><strong>group_41</strong> : Group #42
<em>-- current RGB: 128,63,224</em>
<li><strong>group_42</strong> : Group #43
<em>-- current RGB: 32,255,224</em>
<li><strong>group_43</strong> : Group #44
<em>-- current RGB: 32,63,128</em>
<li><strong>group_44</strong> : Group #45
<em>-- current RGB: 128,255,192</em>
<li><strong>group_45</strong> : Group #46
<em>-- current RGB: 128,127,128</em>
<li><strong>group_46</strong> : Group #47
<em>-- current RGB: 64,255,128</em>
<li><strong>group_47</strong> : Group #48
<em>-- current RGB: 128,127,192</em>
<li><strong>group_48</strong> : Group #49
<em>-- current RGB: 64,255,192</em>
<li><strong>group_49</strong> : Group #50
<em>-- current RGB: 64,127,128</em>
<li><strong>group_50</strong> : Group #51
<em>-- current RGB: 128,127,224</em>
<li><strong>group_51</strong> : Group #52
<em>-- current RGB: 64,63,128</em>
<li><strong>group_52</strong> : Group #53
<em>-- current RGB: 32,127,128</em>
<li><strong>group_53</strong> : Group #54
<em>-- current RGB: 128,127,224</em>
<li><strong>group_54</strong> : Group #55
<em>-- current RGB: 32,255,192</em>
<li><strong>group_55</strong> : Group #56
<em>-- current RGB: 128,63,192</em>
<li><strong>group_56</strong> : Group #57
<em>-- current RGB: 128,255,160</em>
<li><strong>group_57</strong> : Group #58
<em>-- current RGB: 128,191,128</em>
<li><strong>group_58</strong> : Group #59
<em>-- current RGB: 96,255,128</em>
<li><strong>group_59</strong> : Group #60
<em>-- current RGB: 128,191,160</em>
<li><strong>group_60</strong> : Group #61
<em>-- current RGB: 96,255,160</em>
<li><strong>group_61</strong> : Group #62
<em>-- current RGB: 96,191,128</em>
<li><strong>group_62</strong> : Group #63
<em>-- current RGB: 96,255,160</em>
<li><strong>group_63</strong> : Group #64
<em>-- current RGB: 96,191,128</em>
</ul>

</div>

<div class="function_definition" id="SetToggleCommandState">
	<div class="c_func"><code>bool SetToggleCommandState(int section_id, int command_id, int state)</code></div>
	<div class="e_func"><code><em>bool </em> SetToggleCommandState(<em>int </em>section_id, <em>int </em>command_id, <em>int </em>state)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetToggleCommandState(<em>integer</em> section_id, <em>integer</em> command_id, <em>integer</em> state)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetToggleCommandState(<em>Int</em> section_id, <em>Int</em> command_id, <em>Int</em> state)</code></div>
	<p>Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See <a href="#RefreshToolbar2">RefreshToolbar2</a>.</p>
</div>

<div class="function_definition" id="SetTrackAutomationMode">
	<div class="c_func"><code>void SetTrackAutomationMode(MediaTrack* tr, int mode)</code></div>
	<div class="e_func"><code>SetTrackAutomationMode(<em>MediaTrack</em> tr, <em>int </em>mode)</code></div>
	<div class="l_func"><code>reaper.SetTrackAutomationMode(<em>MediaTrack</em> tr, <em>integer</em> mode)</code></div>
	<div class="p_func"><code>RPR_SetTrackAutomationMode(<em>MediaTrack</em> tr, <em>Int</em> mode)</code></div>
</div>

<div class="function_definition" id="SetTrackColor">
	<div class="c_func"><code>void SetTrackColor(MediaTrack* track, int color)</code></div>
	<div class="e_func"><code>SetTrackColor(<em>MediaTrack</em> track, <em>int </em>color)</code></div>
	<div class="l_func"><code>reaper.SetTrackColor(<em>MediaTrack</em> track, <em>integer</em> color)</code></div>
	<div class="p_func"><code>RPR_SetTrackColor(<em>MediaTrack</em> track, <em>Int</em> color)</code></div>
	<p>Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b). To unset the track color, see <a href="#SetMediaTrackInfo_Value">SetMediaTrackInfo_Value</a> I_CUSTOMCOLOR</p>
</div>

<div class="function_definition" id="SetTrackMIDILyrics">
	<div class="c_func"><code>bool SetTrackMIDILyrics(MediaTrack* track, int flag, const char* str)</code></div>
	<div class="e_func"><code><em>bool </em> SetTrackMIDILyrics(<em>MediaTrack</em> track, <em>int </em>flag, "str")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetTrackMIDILyrics(<em>MediaTrack</em> track, <em>integer</em> flag, <em>string</em> str)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetTrackMIDILyrics(<em>MediaTrack</em> track, <em>Int</em> flag, <em>String</em> str)</code></div>
	<p>Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: "1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1	"). See <a href="#GetTrackMIDILyrics">GetTrackMIDILyrics</a></p>
</div>

<div class="function_definition" id="SetTrackMIDINoteName">
	<div class="c_func"><code>bool SetTrackMIDINoteName(int track, int pitch, int chan, const char* name)</code></div>
	<div class="e_func"><code><em>bool </em> SetTrackMIDINoteName(<em>int </em>track, <em>int </em>pitch, <em>int </em>chan, "name")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetTrackMIDINoteName(<em>integer</em> track, <em>integer</em> pitch, <em>integer</em> chan, <em>string</em> name)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetTrackMIDINoteName(<em>Int</em> track, <em>Int</em> pitch, <em>Int</em> chan, <em>String</em> name)</code></div>
	<p>channel &lt; 0 assigns these note names to all channels.</p>
</div>

<div class="function_definition" id="SetTrackMIDINoteNameEx">
	<div class="c_func"><code>bool SetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan, const char* name)</code></div>
	<div class="e_func"><code><em>bool </em> SetTrackMIDINoteNameEx(<em>ReaProject</em> proj, <em>MediaTrack</em> track, <em>int </em>pitch, <em>int </em>chan, "name")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetTrackMIDINoteNameEx(<em>ReaProject</em> proj, <em>MediaTrack</em> track, <em>integer</em> pitch, <em>integer</em> chan, <em>string</em> name)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetTrackMIDINoteNameEx(<em>ReaProject</em> proj, <em>MediaTrack</em> track, <em>Int</em> pitch, <em>Int</em> chan, <em>String</em> name)</code></div>
	<p>channel &lt; 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.</p>
</div>

<div class="function_definition" id="SetTrackSelected">
	<div class="c_func"><code>void SetTrackSelected(MediaTrack* track, bool selected)</code></div>
	<div class="e_func"><code>SetTrackSelected(<em>MediaTrack</em> track, <em>bool </em>selected)</code></div>
	<div class="l_func"><code>reaper.SetTrackSelected(<em>MediaTrack</em> track, <em>boolean</em> selected)</code></div>
	<div class="p_func"><code>RPR_SetTrackSelected(<em>MediaTrack</em> track, <em>Boolean</em> selected)</code></div>
</div>

<div class="function_definition" id="SetTrackSendInfo_Value">
	<div class="c_func"><code>bool SetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname, double newvalue)</code></div>
	<div class="e_func"><code><em>bool </em> SetTrackSendInfo_Value(<em>MediaTrack</em> tr, <em>int </em>category, <em>int </em>sendidx, "parmname", newvalue)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetTrackSendInfo_Value(<em>MediaTrack</em> tr, <em>integer</em> category, <em>integer</em> sendidx, <em>string</em> parmname, <em>number</em> newvalue)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetTrackSendInfo_Value(<em>MediaTrack</em> tr, <em>Int</em> category, <em>Int</em> sendidx, <em>String</em> parmname, <em>Float</em> newvalue)</code></div>
	<p>Set send/receive/hardware output numerical-value attributes, return true on success.<br>
category is &lt;0 for receives, 0=sends, &gt;0 for hardware outputs<br>
parameter names:<br>
B_MUTE : bool *<br>
B_PHASE : bool * : true to flip phase<br>
B_MONO : bool *<br>
D_VOL : double * : 1.0 = +0dB etc<br>
D_PAN : double * : -1..+1<br>
D_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc<br>
I_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx<br>
I_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)<br>
I_SRCCHAN : int * : -1 for no audio send. Low 10 bits specify channel offset, and higher bits specify channel count. (srcchan&gt;&gt;10) == 0 for stereo, 1 for mono, 2 for 4 channel, 3 for 6 channel, etc.<br>
I_DSTCHAN : int * : low 10 bits are destination index, &amp;1024 set to mix to mono.<br>
I_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan<br>
See <a href="#CreateTrackSend">CreateTrackSend</a>, <a href="#RemoveTrackSend">RemoveTrackSend</a>, <a href="#GetTrackNumSends">GetTrackNumSends</a>.</p>
</div>

<div class="function_definition" id="SetTrackSendUIPan">
	<div class="c_func"><code>bool SetTrackSendUIPan(MediaTrack* track, int send_idx, double pan, int isend)</code></div>
	<div class="e_func"><code><em>bool </em> SetTrackSendUIPan(<em>MediaTrack</em> track, <em>int </em>send_idx, pan, <em>int </em>isend)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetTrackSendUIPan(<em>MediaTrack</em> track, <em>integer</em> send_idx, <em>number</em> pan, <em>integer</em> isend)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetTrackSendUIPan(<em>MediaTrack</em> track, <em>Int</em> send_idx, <em>Float</em> pan, <em>Int</em> isend)</code></div>
	<p>send_idx&lt;0 for receives, &gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.</p>
</div>

<div class="function_definition" id="SetTrackSendUIVol">
	<div class="c_func"><code>bool SetTrackSendUIVol(MediaTrack* track, int send_idx, double vol, int isend)</code></div>
	<div class="e_func"><code><em>bool </em> SetTrackSendUIVol(<em>MediaTrack</em> track, <em>int </em>send_idx, vol, <em>int </em>isend)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetTrackSendUIVol(<em>MediaTrack</em> track, <em>integer</em> send_idx, <em>number</em> vol, <em>integer</em> isend)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetTrackSendUIVol(<em>MediaTrack</em> track, <em>Int</em> send_idx, <em>Float</em> vol, <em>Int</em> isend)</code></div>
	<p>send_idx&lt;0 for receives, &gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.</p>
</div>

<div class="function_definition" id="SetTrackStateChunk">
	<div class="c_func"><code>bool SetTrackStateChunk(MediaTrack* track, const char* str, bool isundoOptional)</code></div>
	<div class="e_func"><code><em>bool </em> SetTrackStateChunk(<em>MediaTrack</em> track, "str", <em>bool </em>isundo)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.SetTrackStateChunk(<em>MediaTrack</em> track, <em>string</em> str, <em>boolean</em> isundo)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_SetTrackStateChunk(<em>MediaTrack</em> track, <em>String</em> str, <em>Boolean</em> isundoOptional)</code></div>
	<p>Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.</p>
</div>

<div class="function_definition" id="SetTrackUIInputMonitor">
	<div class="c_func"><code>int SetTrackUIInputMonitor(MediaTrack* track, int monitor, int igngroupflags)</code></div>
	<div class="e_func"><code><em>int </em> SetTrackUIInputMonitor(<em>MediaTrack</em> track, <em>int </em>monitor, <em>int </em>igngroupflags)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.SetTrackUIInputMonitor(<em>MediaTrack</em> track, <em>integer</em> monitor, <em>integer</em> igngroupflags)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_SetTrackUIInputMonitor(<em>MediaTrack</em> track, <em>Int</em> monitor, <em>Int</em> igngroupflags)</code></div>
	<p>monitor: 0=no monitoring, 1=monitoring, 2=auto-monitoring. returns new value or -1 if error. igngroupflags: &amp;1 to prevent track grouping, &amp;2 to prevent selection ganging</p>
</div>

<div class="function_definition" id="SetTrackUIMute">
	<div class="c_func"><code>int SetTrackUIMute(MediaTrack* track, int mute, int igngroupflags)</code></div>
	<div class="e_func"><code><em>int </em> SetTrackUIMute(<em>MediaTrack</em> track, <em>int </em>mute, <em>int </em>igngroupflags)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.SetTrackUIMute(<em>MediaTrack</em> track, <em>integer</em> mute, <em>integer</em> igngroupflags)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_SetTrackUIMute(<em>MediaTrack</em> track, <em>Int</em> mute, <em>Int</em> igngroupflags)</code></div>
	<p>mute: &lt;0 toggles, &gt;0 sets mute, 0=unsets mute. returns new value or -1 if error. igngroupflags: &amp;1 to prevent track grouping, &amp;2 to prevent selection ganging</p>
</div>

<div class="function_definition" id="SetTrackUIPan">
	<div class="c_func"><code>double SetTrackUIPan(MediaTrack* track, double pan, bool relative, bool done, int igngroupflags)</code></div>
	<div class="e_func"><code><em>double </em> SetTrackUIPan(<em>MediaTrack</em> track, pan, <em>bool </em>relative, <em>bool </em>done, <em>int </em>igngroupflags)</code></div>
	<div class="l_func"><code><em>number</em> reaper.SetTrackUIPan(<em>MediaTrack</em> track, <em>number</em> pan, <em>boolean</em> relative, <em>boolean</em> done, <em>integer</em> igngroupflags)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_SetTrackUIPan(<em>MediaTrack</em> track, <em>Float</em> pan, <em>Boolean</em> relative, <em>Boolean</em> done, <em>Int</em> igngroupflags)</code></div>
	<p>igngroupflags: &amp;1 to prevent track grouping, &amp;2 to prevent selection ganging</p>
</div>

<div class="function_definition" id="SetTrackUIPolarity">
	<div class="c_func"><code>int SetTrackUIPolarity(MediaTrack* track, int polarity, int igngroupflags)</code></div>
	<div class="e_func"><code><em>int </em> SetTrackUIPolarity(<em>MediaTrack</em> track, <em>int </em>polarity, <em>int </em>igngroupflags)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.SetTrackUIPolarity(<em>MediaTrack</em> track, <em>integer</em> polarity, <em>integer</em> igngroupflags)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_SetTrackUIPolarity(<em>MediaTrack</em> track, <em>Int</em> polarity, <em>Int</em> igngroupflags)</code></div>
	<p>polarity (AKA phase): &lt;0 toggles, 0=normal, &gt;0=inverted. returns new value or -1 if error.igngroupflags: &amp;1 to prevent track grouping, &amp;2 to prevent selection ganging</p>
</div>

<div class="function_definition" id="SetTrackUIRecArm">
	<div class="c_func"><code>int SetTrackUIRecArm(MediaTrack* track, int recarm, int igngroupflags)</code></div>
	<div class="e_func"><code><em>int </em> SetTrackUIRecArm(<em>MediaTrack</em> track, <em>int </em>recarm, <em>int </em>igngroupflags)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.SetTrackUIRecArm(<em>MediaTrack</em> track, <em>integer</em> recarm, <em>integer</em> igngroupflags)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_SetTrackUIRecArm(<em>MediaTrack</em> track, <em>Int</em> recarm, <em>Int</em> igngroupflags)</code></div>
	<p>recarm: &lt;0 toggles, &gt;0 sets recarm, 0=unsets recarm. returns new value or -1 if error. igngroupflags: &amp;1 to prevent track grouping, &amp;2 to prevent selection ganging</p>
</div>

<div class="function_definition" id="SetTrackUISolo">
	<div class="c_func"><code>int SetTrackUISolo(MediaTrack* track, int solo, int igngroupflags)</code></div>
	<div class="e_func"><code><em>int </em> SetTrackUISolo(<em>MediaTrack</em> track, <em>int </em>solo, <em>int </em>igngroupflags)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.SetTrackUISolo(<em>MediaTrack</em> track, <em>integer</em> solo, <em>integer</em> igngroupflags)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_SetTrackUISolo(<em>MediaTrack</em> track, <em>Int</em> solo, <em>Int</em> igngroupflags)</code></div>
	<p>solo: &lt;0 toggles, 1 sets solo (default mode), 0=unsets solo, 2 sets solo (non-SIP), 4 sets solo (SIP). returns new value or -1 if error. igngroupflags: &amp;1 to prevent track grouping, &amp;2 to prevent selection ganging</p>
</div>

<div class="function_definition" id="SetTrackUIVolume">
	<div class="c_func"><code>double SetTrackUIVolume(MediaTrack* track, double volume, bool relative, bool done, int igngroupflags)</code></div>
	<div class="e_func"><code><em>double </em> SetTrackUIVolume(<em>MediaTrack</em> track, volume, <em>bool </em>relative, <em>bool </em>done, <em>int </em>igngroupflags)</code></div>
	<div class="l_func"><code><em>number</em> reaper.SetTrackUIVolume(<em>MediaTrack</em> track, <em>number</em> volume, <em>boolean</em> relative, <em>boolean</em> done, <em>integer</em> igngroupflags)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_SetTrackUIVolume(<em>MediaTrack</em> track, <em>Float</em> volume, <em>Boolean</em> relative, <em>Boolean</em> done, <em>Int</em> igngroupflags)</code></div>
	<p>igngroupflags: &amp;1 to prevent track grouping, &amp;2 to prevent selection ganging</p>
</div>

<div class="function_definition" id="SetTrackUIWidth">
	<div class="c_func"><code>double SetTrackUIWidth(MediaTrack* track, double width, bool relative, bool done, int igngroupflags)</code></div>
	<div class="e_func"><code><em>double </em> SetTrackUIWidth(<em>MediaTrack</em> track, width, <em>bool </em>relative, <em>bool </em>done, <em>int </em>igngroupflags)</code></div>
	<div class="l_func"><code><em>number</em> reaper.SetTrackUIWidth(<em>MediaTrack</em> track, <em>number</em> width, <em>boolean</em> relative, <em>boolean</em> done, <em>integer</em> igngroupflags)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_SetTrackUIWidth(<em>MediaTrack</em> track, <em>Float</em> width, <em>Boolean</em> relative, <em>Boolean</em> done, <em>Int</em> igngroupflags)</code></div>
	<p>igngroupflags: &amp;1 to prevent track grouping, &amp;2 to prevent selection ganging</p>
</div>

<div class="function_definition" id="ShowActionList">
	<div class="c_func"><code>void ShowActionList(KbdSectionInfo* section, HWND callerWnd)</code></div>
	<div class="e_func"><code>ShowActionList(<em>KbdSectionInfo</em> section, <em>HWND</em> callerWnd)</code></div>
	<div class="l_func"><code>reaper.ShowActionList(<em>KbdSectionInfo</em> section, <em>HWND</em> callerWnd)</code></div>
	<div class="p_func"><code>RPR_ShowActionList(<em>KbdSectionInfo</em> section, <em>HWND</em> callerWnd)</code></div>
</div>

<div class="function_definition" id="ShowConsoleMsg">
	<div class="c_func"><code>void ShowConsoleMsg(const char* msg)</code></div>
	<div class="e_func"><code>ShowConsoleMsg("msg")</code></div>
	<div class="l_func"><code>reaper.ShowConsoleMsg(<em>string</em> msg)</code></div>
	<div class="p_func"><code>RPR_ShowConsoleMsg(<em>String</em> msg)</code></div>
	<p>Show a message to the user (also useful for debugging). Send "\n" for newline, "" to clear the console. Prefix string with "!SHOW:" and text will be added to console without opening the window. See <a href="#ClearConsole">ClearConsole</a></p>
</div>

<div class="function_definition" id="ShowMessageBox">
	<div class="c_func"><code>int ShowMessageBox(const char* msg, const char* title, int type)</code></div>
	<div class="e_func"><code><em>int </em> ShowMessageBox("msg", "title", <em>int </em>type)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.ShowMessageBox(<em>string</em> msg, <em>string</em> title, <em>integer</em> type)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_ShowMessageBox(<em>String</em> msg, <em>String</em> title, <em>Int</em> type)</code></div>
	<p>type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO</p>
</div>

<div class="function_definition" id="ShowPopupMenu">
	<div class="c_func"><code>void ShowPopupMenu(const char* name, int x, int y, HWND hwndParentOptional, void* ctxOptional, int ctx2Optional, int ctx3Optional)</code></div>
	<div class="e_func"><code>ShowPopupMenu("name", <em>int </em>x, <em>int </em>y, <em>HWND</em> hwndParent, <em>void*</em> ctx, <em>int </em>ctx2, <em>int </em>ctx3)</code></div>
	<div class="l_func"><code>reaper.ShowPopupMenu(<em>string</em> name, <em>integer</em> x, <em>integer</em> y, <em>HWND</em> hwndParent, <em>identifier</em> ctx, <em>integer</em> ctx2, <em>integer</em> ctx3)</code></div>
	<div class="p_func"><code>RPR_ShowPopupMenu(<em>String</em> name, <em>Int</em> x, <em>Int</em> y, <em>HWND</em> hwndParentOptional, <em>void</em> ctxOptional, <em>Int</em> ctx2Optional, <em>Int</em> ctx3Optional)</code></div>
	<p>shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)</p>
</div>

<div class="function_definition" id="SLIDER2DB">
	<div class="c_func"><code>double SLIDER2DB(double y)</code></div>
	<div class="e_func"><code><em>double </em> SLIDER2DB(y)</code></div>
	<div class="l_func"><code><em>number</em> reaper.SLIDER2DB(<em>number</em> y)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_SLIDER2DB(<em>Float</em> y)</code></div>
</div>

<div class="function_definition" id="SnapToGrid">
	<div class="c_func"><code>double SnapToGrid(ReaProject* project, double time_pos)</code></div>
	<div class="e_func"><code><em>double </em> SnapToGrid(<em>ReaProject</em> project, time_pos)</code></div>
	<div class="l_func"><code><em>number</em> reaper.SnapToGrid(<em>ReaProject</em> project, <em>number</em> time_pos)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_SnapToGrid(<em>ReaProject</em> project, <em>Float</em> time_pos)</code></div>
</div>

<div class="function_definition" id="SoloAllTracks">
	<div class="c_func"><code>void SoloAllTracks(int solo)</code></div>
	<div class="e_func"><code>SoloAllTracks(<em>int </em>solo)</code></div>
	<div class="l_func"><code>reaper.SoloAllTracks(<em>integer</em> solo)</code></div>
	<div class="p_func"><code>RPR_SoloAllTracks(<em>Int</em> solo)</code></div>
	<p>solo=2 for SIP</p>
</div>

<div class="function_definition" id="Splash_GetWnd">
	<div class="c_func"><code>HWND Splash_GetWnd()</code></div>
	<div class="e_func"><code><em>HWND</em>  Splash_GetWnd()</code></div>
	<div class="l_func"><code><em>HWND</em> reaper.Splash_GetWnd()</code></div>
	<div class="p_func"><code><em>HWND</em>  RPR_Splash_GetWnd()</code></div>
	<p>gets the splash window, in case you want to display a message over it. Returns NULL when the splash window is not displayed.</p>
</div>

<div class="function_definition" id="SplitMediaItem">
	<div class="c_func"><code>MediaItem* SplitMediaItem(MediaItem* item, double position)</code></div>
	<div class="e_func"><code><em>MediaItem</em>  SplitMediaItem(<em>MediaItem</em> item, position)</code></div>
	<div class="l_func"><code><em>MediaItem</em> reaper.SplitMediaItem(<em>MediaItem</em> item, <em>number</em> position)</code></div>
	<div class="p_func"><code><em>MediaItem</em>  RPR_SplitMediaItem(<em>MediaItem</em> item, <em>Float</em> position)</code></div>
	<p>the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)</p>
</div>

<div class="function_definition" id="stringToGuid">
	<div class="c_func"><code>void stringToGuid(const char* str, GUID* g)</code></div>
	<div class="e_func"><code>stringToGuid("str", #gGUID)</code></div>
	<div class="l_func"><code><em>string </em>gGUID = reaper.stringToGuid(<em>string</em> str, <em>string </em>gGUID)</code></div>
	<div class="p_func"><code>RPR_stringToGuid(<em>String</em> str, <em>GUID</em> g)</code></div>
</div>

<div class="function_definition" id="StuffMIDIMessage">
	<div class="c_func"><code>void StuffMIDIMessage(int mode, int msg1, int msg2, int msg3)</code></div>
	<div class="e_func"><code>StuffMIDIMessage(<em>int </em>mode, <em>int </em>msg1, <em>int </em>msg2, <em>int </em>msg3)</code></div>
	<div class="l_func"><code>reaper.StuffMIDIMessage(<em>integer</em> mode, <em>integer</em> msg1, <em>integer</em> msg2, <em>integer</em> msg3)</code></div>
	<div class="p_func"><code>RPR_StuffMIDIMessage(<em>Int</em> mode, <em>Int</em> msg1, <em>Int</em> msg2, <em>Int</em> msg3)</code></div>
	<p>Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see <a href="#GetNumMIDIOutputs">GetNumMIDIOutputs</a>, <a href="#GetMIDIOutputName">GetMIDIOutputName</a>.</p>
</div>

<div class="function_definition" id="TakeFX_AddByName">
	<div class="c_func"><code>int TakeFX_AddByName(MediaItem_Take* take, const char* fxname, int instantiate)</code></div>
	<div class="e_func"><code><em>int </em> TakeFX_AddByName(<em>MediaItem_Take</em> take, "fxname", <em>int </em>instantiate)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TakeFX_AddByName(<em>MediaItem_Take</em> take, <em>string</em> fxname, <em>integer</em> instantiate)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TakeFX_AddByName(<em>MediaItem_Take</em> take, <em>String</em> fxname, <em>Int</em> instantiate)</code></div>
	<p>Adds or queries the position of a named FX in a take. See <a href="#TrackFX_AddByName">TrackFX_AddByName</a>() for information on fxname and instantiate. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_CopyToTake">
	<div class="c_func"><code>void TakeFX_CopyToTake(MediaItem_Take* src_take, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)</code></div>
	<div class="e_func"><code>TakeFX_CopyToTake(<em>MediaItem_Take</em> src_take, <em>int </em>src_fx, <em>MediaItem_Take</em> dest_take, <em>int </em>dest_fx, <em>bool </em>is_move)</code></div>
	<div class="l_func"><code>reaper.TakeFX_CopyToTake(<em>MediaItem_Take</em> src_take, <em>integer</em> src_fx, <em>MediaItem_Take</em> dest_take, <em>integer</em> dest_fx, <em>boolean</em> is_move)</code></div>
	<div class="p_func"><code>RPR_TakeFX_CopyToTake(<em>MediaItem_Take</em> src_take, <em>Int</em> src_fx, <em>MediaItem_Take</em> dest_take, <em>Int</em> dest_fx, <em>Boolean</em> is_move)</code></div>
	<p>Copies (or moves) FX from src_take to dest_take. Can be used with src_take=dest_take to reorder. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_CopyToTrack">
	<div class="c_func"><code>void TakeFX_CopyToTrack(MediaItem_Take* src_take, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)</code></div>
	<div class="e_func"><code>TakeFX_CopyToTrack(<em>MediaItem_Take</em> src_take, <em>int </em>src_fx, <em>MediaTrack</em> dest_track, <em>int </em>dest_fx, <em>bool </em>is_move)</code></div>
	<div class="l_func"><code>reaper.TakeFX_CopyToTrack(<em>MediaItem_Take</em> src_take, <em>integer</em> src_fx, <em>MediaTrack</em> dest_track, <em>integer</em> dest_fx, <em>boolean</em> is_move)</code></div>
	<div class="p_func"><code>RPR_TakeFX_CopyToTrack(<em>MediaItem_Take</em> src_take, <em>Int</em> src_fx, <em>MediaTrack</em> dest_track, <em>Int</em> dest_fx, <em>Boolean</em> is_move)</code></div>
	<p>Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_Delete">
	<div class="c_func"><code>bool TakeFX_Delete(MediaItem_Take* take, int fx)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_Delete(<em>MediaItem_Take</em> take, <em>int </em>fx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TakeFX_Delete(<em>MediaItem_Take</em> take, <em>integer</em> fx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TakeFX_Delete(<em>MediaItem_Take</em> take, <em>Int</em> fx)</code></div>
	<p>Remove a FX from take chain (returns true on success) FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_EndParamEdit">
	<div class="c_func"><code>bool TakeFX_EndParamEdit(MediaItem_Take* take, int fx, int param)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_EndParamEdit(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>param)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TakeFX_EndParamEdit(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TakeFX_EndParamEdit(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> param)</code></div>
	<p> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_FormatParamValue">
	<div class="c_func"><code>bool TakeFX_FormatParamValue(MediaItem_Take* take, int fx, int param, double val, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_FormatParamValue(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>param, val, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TakeFX_FormatParamValue(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> param, <em>number</em> val)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> val, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_TakeFX_FormatParamValue(take, fx, param, val, bufOut, bufOut_sz)</code></div>
	<p>Note: only works with FX that support Cockos VST extensions. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_FormatParamValueNormalized">
	<div class="c_func"><code>bool TakeFX_FormatParamValueNormalized(MediaItem_Take* take, int fx, int param, double value, char* buf, int buf_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_FormatParamValueNormalized(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>param, value, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TakeFX_FormatParamValueNormalized(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> param, <em>number</em> value, <em>string </em>buf)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> value, <em>String</em> buf, <em>Int</em> buf_sz) = RPR_TakeFX_FormatParamValueNormalized(take, fx, param, value, buf, buf_sz)</code></div>
	<p>Note: only works with FX that support Cockos VST extensions. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetChainVisible">
	<div class="c_func"><code>int TakeFX_GetChainVisible(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>int </em> TakeFX_GetChainVisible(<em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TakeFX_GetChainVisible(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TakeFX_GetChainVisible(<em>MediaItem_Take</em> take)</code></div>
	<p>returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected</p>
</div>

<div class="function_definition" id="TakeFX_GetCount">
	<div class="c_func"><code>int TakeFX_GetCount(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>int </em> TakeFX_GetCount(<em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TakeFX_GetCount(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TakeFX_GetCount(<em>MediaItem_Take</em> take)</code></div>
</div>

<div class="function_definition" id="TakeFX_GetEnabled">
	<div class="c_func"><code>bool TakeFX_GetEnabled(MediaItem_Take* take, int fx)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_GetEnabled(<em>MediaItem_Take</em> take, <em>int </em>fx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TakeFX_GetEnabled(<em>MediaItem_Take</em> take, <em>integer</em> fx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TakeFX_GetEnabled(<em>MediaItem_Take</em> take, <em>Int</em> fx)</code></div>
	<p>See <a href="#TakeFX_SetEnabled">TakeFX_SetEnabled</a> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetEnvelope">
	<div class="c_func"><code>TrackEnvelope* TakeFX_GetEnvelope(MediaItem_Take* take, int fxindex, int parameterindex, bool create)</code></div>
	<div class="e_func"><code><em>TrackEnvelope</em>  TakeFX_GetEnvelope(<em>MediaItem_Take</em> take, <em>int </em>fxindex, <em>int </em>parameterindex, <em>bool </em>create)</code></div>
	<div class="l_func"><code><em>TrackEnvelope</em> reaper.TakeFX_GetEnvelope(<em>MediaItem_Take</em> take, <em>integer</em> fxindex, <em>integer</em> parameterindex, <em>boolean</em> create)</code></div>
	<div class="p_func"><code><em>TrackEnvelope</em>  RPR_TakeFX_GetEnvelope(<em>MediaItem_Take</em> take, <em>Int</em> fxindex, <em>Int</em> parameterindex, <em>Boolean</em> create)</code></div>
	<p>Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetFloatingWindow">
	<div class="c_func"><code>HWND TakeFX_GetFloatingWindow(MediaItem_Take* take, int index)</code></div>
	<div class="e_func"><code><em>HWND</em>  TakeFX_GetFloatingWindow(<em>MediaItem_Take</em> take, <em>int </em>index)</code></div>
	<div class="l_func"><code><em>HWND</em> reaper.TakeFX_GetFloatingWindow(<em>MediaItem_Take</em> take, <em>integer</em> index)</code></div>
	<div class="p_func"><code><em>HWND</em>  RPR_TakeFX_GetFloatingWindow(<em>MediaItem_Take</em> take, <em>Int</em> index)</code></div>
	<p>returns HWND of floating window for effect index, if any FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetFormattedParamValue">
	<div class="c_func"><code>bool TakeFX_GetFormattedParamValue(MediaItem_Take* take, int fx, int param, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_GetFormattedParamValue(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>param, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TakeFX_GetFormattedParamValue(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> param, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_TakeFX_GetFormattedParamValue(take, fx, param, bufOut, bufOut_sz)</code></div>
	<p> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetFXGUID">
	<div class="c_func"><code>GUID* TakeFX_GetFXGUID(MediaItem_Take* take, int fx)</code></div>
	<div class="e_func"><code>bool  TakeFX_GetFXGUID(#retguid, <em>MediaItem_Take</em> take, <em>int </em>fx)</code></div>
	<div class="l_func"><code><em>string</em> GUID = reaper.TakeFX_GetFXGUID(<em>MediaItem_Take</em> take, <em>integer</em> fx)</code></div>
	<div class="p_func"><code><em>GUID</em>  RPR_TakeFX_GetFXGUID(<em>MediaItem_Take</em> take, <em>Int</em> fx)</code></div>
	<p> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetFXName">
	<div class="c_func"><code>bool TakeFX_GetFXName(MediaItem_Take* take, int fx, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_GetFXName(<em>MediaItem_Take</em> take, <em>int </em>fx, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TakeFX_GetFXName(<em>MediaItem_Take</em> take, <em>integer</em> fx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_TakeFX_GetFXName(take, fx, bufOut, bufOut_sz)</code></div>
	<p> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetIOSize">
	<div class="c_func"><code>int TakeFX_GetIOSize(MediaItem_Take* take, int fx, int* inputPinsOut, int* outputPinsOut)</code></div>
	<div class="e_func"><code><em>int </em> TakeFX_GetIOSize(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int &amp;</em>inputPins, <em>int &amp;</em>outputPins)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>integer </em>inputPins, <em>integer </em>outputPins = reaper.TakeFX_GetIOSize(<em>MediaItem_Take</em> take, <em>integer</em> fx)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> inputPinsOut, <em>Int</em> outputPinsOut) = RPR_TakeFX_GetIOSize(take, fx, inputPinsOut, outputPinsOut)</code></div>
	<p>Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetNamedConfigParm">
	<div class="c_func"><code>bool TakeFX_GetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, char* bufOutNeedBig, int bufOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_GetNamedConfigParm(<em>MediaItem_Take</em> take, <em>int </em>fx, "parmname", #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TakeFX_GetNamedConfigParm(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>string</em> parmname)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>String</em> parmname, <em>String</em> bufOutNeedBig, <em>Int</em> bufOutNeedBig_sz) = RPR_TakeFX_GetNamedConfigParm(take, fx, parmname, bufOutNeedBig, bufOutNeedBig_sz)</code></div>
	<p>gets plug-in specific named configuration value (returns true on success). see <a href="#TrackFX_GetNamedConfigParm">TrackFX_GetNamedConfigParm</a> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetNumParams">
	<div class="c_func"><code>int TakeFX_GetNumParams(MediaItem_Take* take, int fx)</code></div>
	<div class="e_func"><code><em>int </em> TakeFX_GetNumParams(<em>MediaItem_Take</em> take, <em>int </em>fx)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TakeFX_GetNumParams(<em>MediaItem_Take</em> take, <em>integer</em> fx)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TakeFX_GetNumParams(<em>MediaItem_Take</em> take, <em>Int</em> fx)</code></div>
	<p> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetOffline">
	<div class="c_func"><code>bool TakeFX_GetOffline(MediaItem_Take* take, int fx)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_GetOffline(<em>MediaItem_Take</em> take, <em>int </em>fx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TakeFX_GetOffline(<em>MediaItem_Take</em> take, <em>integer</em> fx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TakeFX_GetOffline(<em>MediaItem_Take</em> take, <em>Int</em> fx)</code></div>
	<p>See <a href="#TakeFX_SetOffline">TakeFX_SetOffline</a> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetOpen">
	<div class="c_func"><code>bool TakeFX_GetOpen(MediaItem_Take* take, int fx)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_GetOpen(<em>MediaItem_Take</em> take, <em>int </em>fx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TakeFX_GetOpen(<em>MediaItem_Take</em> take, <em>integer</em> fx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TakeFX_GetOpen(<em>MediaItem_Take</em> take, <em>Int</em> fx)</code></div>
	<p>Returns true if this FX UI is open in the FX chain window or a floating window. See <a href="#TakeFX_SetOpen">TakeFX_SetOpen</a> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetParam">
	<div class="c_func"><code>double TakeFX_GetParam(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut)</code></div>
	<div class="e_func"><code><em>double </em> TakeFX_GetParam(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>param, <em>&amp;</em>minval, <em>&amp;</em>maxval)</code></div>
	<div class="l_func"><code><em>number</em> retval, <em>number </em>minval, <em>number </em>maxval = reaper.TakeFX_GetParam(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code>(<em>Float</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> minvalOut, <em>Float</em> maxvalOut) = RPR_TakeFX_GetParam(take, fx, param, minvalOut, maxvalOut)</code></div>
	<p> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetParameterStepSizes">
	<div class="c_func"><code>bool TakeFX_GetParameterStepSizes(MediaItem_Take* take, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_GetParameterStepSizes(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>param, <em>&amp;</em>step, <em>&amp;</em>smallstep, <em>&amp;</em>largestep, <em>bool &amp;</em>istoggle)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>step, <em>number </em>smallstep, <em>number </em>largestep, <em>boolean </em>istoggle = reaper.TakeFX_GetParameterStepSizes(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> stepOut, <em>Float</em> smallstepOut, <em>Float</em> largestepOut, <em>Boolean</em> istoggleOut) = RPR_TakeFX_GetParameterStepSizes(take, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)</code></div>
	<p> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetParamEx">
	<div class="c_func"><code>double TakeFX_GetParamEx(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)</code></div>
	<div class="e_func"><code><em>double </em> TakeFX_GetParamEx(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>param, <em>&amp;</em>minval, <em>&amp;</em>maxval, <em>&amp;</em>midval)</code></div>
	<div class="l_func"><code><em>number</em> retval, <em>number </em>minval, <em>number </em>maxval, <em>number </em>midval = reaper.TakeFX_GetParamEx(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code>(<em>Float</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> minvalOut, <em>Float</em> maxvalOut, <em>Float</em> midvalOut) = RPR_TakeFX_GetParamEx(take, fx, param, minvalOut, maxvalOut, midvalOut)</code></div>
	<p> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetParamFromIdent">
	<div class="c_func"><code>int TakeFX_GetParamFromIdent(MediaItem_Take* take, int fx, const char* ident_str)</code></div>
	<div class="e_func"><code><em>int </em> TakeFX_GetParamFromIdent(<em>MediaItem_Take</em> take, <em>int </em>fx, "ident_str")</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TakeFX_GetParamFromIdent(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>string</em> ident_str)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TakeFX_GetParamFromIdent(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>String</em> ident_str)</code></div>
	<p>gets the parameter index from an identifying string (:wet, :bypass, or a string returned from GetParamIdent), or -1 if unknown. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetParamIdent">
	<div class="c_func"><code>bool TakeFX_GetParamIdent(MediaItem_Take* take, int fx, int param, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_GetParamIdent(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>param, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TakeFX_GetParamIdent(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> param, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_TakeFX_GetParamIdent(take, fx, param, bufOut, bufOut_sz)</code></div>
	<p>gets an identifying string for the parameter FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetParamName">
	<div class="c_func"><code>bool TakeFX_GetParamName(MediaItem_Take* take, int fx, int param, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_GetParamName(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>param, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TakeFX_GetParamName(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> param, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_TakeFX_GetParamName(take, fx, param, bufOut, bufOut_sz)</code></div>
	<p> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetParamNormalized">
	<div class="c_func"><code>double TakeFX_GetParamNormalized(MediaItem_Take* take, int fx, int param)</code></div>
	<div class="e_func"><code><em>double </em> TakeFX_GetParamNormalized(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>param)</code></div>
	<div class="l_func"><code><em>number</em> reaper.TakeFX_GetParamNormalized(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_TakeFX_GetParamNormalized(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> param)</code></div>
	<p> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetPinMappings">
	<div class="c_func"><code>int TakeFX_GetPinMappings(MediaItem_Take* take, int fx, int isoutput, int pin, int* high32Out)</code></div>
	<div class="e_func"><code><em>int </em> TakeFX_GetPinMappings(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>isoutput, <em>int </em>pin, <em>int &amp;</em>high32)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>integer </em>high32 = reaper.TakeFX_GetPinMappings(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> isoutput, <em>integer</em> pin)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> isoutput, <em>Int</em> pin, <em>Int</em> high32Out) = RPR_TakeFX_GetPinMappings(take, fx, isoutput, pin, high32Out)</code></div>
	<p>gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits. Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetPreset">
	<div class="c_func"><code>bool TakeFX_GetPreset(MediaItem_Take* take, int fx, char* presetnameOut, int presetnameOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_GetPreset(<em>MediaItem_Take</em> take, <em>int </em>fx, #presetname)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>presetname = reaper.TakeFX_GetPreset(<em>MediaItem_Take</em> take, <em>integer</em> fx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>String</em> presetnameOut, <em>Int</em> presetnameOut_sz) = RPR_TakeFX_GetPreset(take, fx, presetnameOut, presetnameOut_sz)</code></div>
	<p>Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See <a href="#TakeFX_SetPreset">TakeFX_SetPreset</a>. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetPresetIndex">
	<div class="c_func"><code>int TakeFX_GetPresetIndex(MediaItem_Take* take, int fx, int* numberOfPresetsOut)</code></div>
	<div class="e_func"><code><em>int </em> TakeFX_GetPresetIndex(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int &amp;</em>numberOfPresets)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>integer </em>numberOfPresets = reaper.TakeFX_GetPresetIndex(<em>MediaItem_Take</em> take, <em>integer</em> fx)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> numberOfPresetsOut) = RPR_TakeFX_GetPresetIndex(take, fx, numberOfPresetsOut)</code></div>
	<p>Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See <a href="#TakeFX_SetPresetByIndex">TakeFX_SetPresetByIndex</a> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_GetUserPresetFilename">
	<div class="c_func"><code>void TakeFX_GetUserPresetFilename(MediaItem_Take* take, int fx, char* fnOut, int fnOut_sz)</code></div>
	<div class="e_func"><code>TakeFX_GetUserPresetFilename(<em>MediaItem_Take</em> take, <em>int </em>fx, #fn)</code></div>
	<div class="l_func"><code><em>string </em>fn = reaper.TakeFX_GetUserPresetFilename(<em>MediaItem_Take</em> take, <em>integer</em> fx)</code></div>
	<div class="p_func"><code>(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>String</em> fnOut, <em>Int</em> fnOut_sz) = RPR_TakeFX_GetUserPresetFilename(take, fx, fnOut, fnOut_sz)</code></div>
	<p> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_NavigatePresets">
	<div class="c_func"><code>bool TakeFX_NavigatePresets(MediaItem_Take* take, int fx, int presetmove)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_NavigatePresets(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>presetmove)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TakeFX_NavigatePresets(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> presetmove)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TakeFX_NavigatePresets(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> presetmove)</code></div>
	<p>presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_SetEnabled">
	<div class="c_func"><code>void TakeFX_SetEnabled(MediaItem_Take* take, int fx, bool enabled)</code></div>
	<div class="e_func"><code>TakeFX_SetEnabled(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>bool </em>enabled)</code></div>
	<div class="l_func"><code>reaper.TakeFX_SetEnabled(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>boolean</em> enabled)</code></div>
	<div class="p_func"><code>RPR_TakeFX_SetEnabled(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Boolean</em> enabled)</code></div>
	<p>See <a href="#TakeFX_GetEnabled">TakeFX_GetEnabled</a> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_SetNamedConfigParm">
	<div class="c_func"><code>bool TakeFX_SetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, const char* value)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_SetNamedConfigParm(<em>MediaItem_Take</em> take, <em>int </em>fx, "parmname", "value")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TakeFX_SetNamedConfigParm(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>string</em> parmname, <em>string</em> value)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TakeFX_SetNamedConfigParm(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>String</em> parmname, <em>String</em> value)</code></div>
	<p>gets plug-in specific named configuration value (returns true on success). see <a href="#TrackFX_SetNamedConfigParm">TrackFX_SetNamedConfigParm</a> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_SetOffline">
	<div class="c_func"><code>void TakeFX_SetOffline(MediaItem_Take* take, int fx, bool offline)</code></div>
	<div class="e_func"><code>TakeFX_SetOffline(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>bool </em>offline)</code></div>
	<div class="l_func"><code>reaper.TakeFX_SetOffline(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>boolean</em> offline)</code></div>
	<div class="p_func"><code>RPR_TakeFX_SetOffline(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Boolean</em> offline)</code></div>
	<p>See <a href="#TakeFX_GetOffline">TakeFX_GetOffline</a> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_SetOpen">
	<div class="c_func"><code>void TakeFX_SetOpen(MediaItem_Take* take, int fx, bool open)</code></div>
	<div class="e_func"><code>TakeFX_SetOpen(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>bool </em>open)</code></div>
	<div class="l_func"><code>reaper.TakeFX_SetOpen(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>boolean</em> open)</code></div>
	<div class="p_func"><code>RPR_TakeFX_SetOpen(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Boolean</em> open)</code></div>
	<p>Open this FX UI. See <a href="#TakeFX_GetOpen">TakeFX_GetOpen</a> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_SetParam">
	<div class="c_func"><code>bool TakeFX_SetParam(MediaItem_Take* take, int fx, int param, double val)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_SetParam(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>param, val)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TakeFX_SetParam(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> param, <em>number</em> val)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TakeFX_SetParam(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> val)</code></div>
	<p> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_SetParamNormalized">
	<div class="c_func"><code>bool TakeFX_SetParamNormalized(MediaItem_Take* take, int fx, int param, double value)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_SetParamNormalized(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>param, value)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TakeFX_SetParamNormalized(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> param, <em>number</em> value)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TakeFX_SetParamNormalized(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> value)</code></div>
	<p> FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_SetPinMappings">
	<div class="c_func"><code>bool TakeFX_SetPinMappings(MediaItem_Take* take, int fx, int isoutput, int pin, int low32bits, int hi32bits)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_SetPinMappings(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>isoutput, <em>int </em>pin, <em>int </em>low32bits, <em>int </em>hi32bits)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TakeFX_SetPinMappings(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> isoutput, <em>integer</em> pin, <em>integer</em> low32bits, <em>integer</em> hi32bits)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TakeFX_SetPinMappings(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> isoutput, <em>Int</em> pin, <em>Int</em> low32bits, <em>Int</em> hi32bits)</code></div>
	<p>sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability). Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_SetPreset">
	<div class="c_func"><code>bool TakeFX_SetPreset(MediaItem_Take* take, int fx, const char* presetname)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_SetPreset(<em>MediaItem_Take</em> take, <em>int </em>fx, "presetname")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TakeFX_SetPreset(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>string</em> presetname)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TakeFX_SetPreset(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>String</em> presetname)</code></div>
	<p>Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See <a href="#TakeFX_GetPreset">TakeFX_GetPreset</a>. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_SetPresetByIndex">
	<div class="c_func"><code>bool TakeFX_SetPresetByIndex(MediaItem_Take* take, int fx, int idx)</code></div>
	<div class="e_func"><code><em>bool </em> TakeFX_SetPresetByIndex(<em>MediaItem_Take</em> take, <em>int </em>fx, <em>int </em>idx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TakeFX_SetPresetByIndex(<em>MediaItem_Take</em> take, <em>integer</em> fx, <em>integer</em> idx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TakeFX_SetPresetByIndex(<em>MediaItem_Take</em> take, <em>Int</em> fx, <em>Int</em> idx)</code></div>
	<p>Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See <a href="#TakeFX_GetPresetIndex">TakeFX_GetPresetIndex</a>. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeFX_Show">
	<div class="c_func"><code>void TakeFX_Show(MediaItem_Take* take, int index, int showFlag)</code></div>
	<div class="e_func"><code>TakeFX_Show(<em>MediaItem_Take</em> take, <em>int </em>index, <em>int </em>showFlag)</code></div>
	<div class="l_func"><code>reaper.TakeFX_Show(<em>MediaItem_Take</em> take, <em>integer</em> index, <em>integer</em> showFlag)</code></div>
	<div class="p_func"><code>RPR_TakeFX_Show(<em>MediaItem_Take</em> take, <em>Int</em> index, <em>Int</em> showFlag)</code></div>
	<p>showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid) FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TakeIsMIDI">
	<div class="c_func"><code>bool TakeIsMIDI(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>bool </em> TakeIsMIDI(<em>MediaItem_Take</em> take)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TakeIsMIDI(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TakeIsMIDI(<em>MediaItem_Take</em> take)</code></div>
	<p>Returns true if the active take contains MIDI.</p>
</div>

<div class="function_definition" id="ThemeLayout_GetLayout">
	<div class="c_func"><code>bool ThemeLayout_GetLayout(const char* section, int idx, char* nameOut, int nameOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> ThemeLayout_GetLayout("section", <em>int </em>idx, #name)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>name = reaper.ThemeLayout_GetLayout(<em>string</em> section, <em>integer</em> idx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> section, <em>Int</em> idx, <em>String</em> nameOut, <em>Int</em> nameOut_sz) = RPR_ThemeLayout_GetLayout(section, idx, nameOut, nameOut_sz)</code></div>
	<p>Gets theme layout information. section can be 'global' for global layout override, 'seclist' to enumerate a list of layout sections, otherwise a layout section such as 'mcp', 'tcp', 'trans', etc. idx can be -1 to query the current value, -2 to get the description of the section (if not global), -3 will return the current context DPI-scaling (256=normal, 512=retina, etc), or 0..x. returns false if failed.</p>
</div>

<div class="function_definition" id="ThemeLayout_GetParameter">
	<div class="c_func"><code>const char* ThemeLayout_GetParameter(int wp, const char** descOutOptional, int* valueOutOptional, int* defValueOutOptional, int* minValueOutOptional, int* maxValueOutOptional)</code></div>
	<div class="e_func"><code>bool  ThemeLayout_GetParameter(#retval, <em>int </em>wp, <em>optional </em>#desc, <em>optional int &amp;</em>value, <em>optional int &amp;</em>defValue, <em>optional int &amp;</em>minValue, <em>optional int &amp;</em>maxValue)</code></div>
	<div class="l_func"><code><em>string</em> retval, <em>optional </em><em>string </em>desc, <em>optional integer </em>value, <em>optional integer </em>defValue, <em>optional integer </em>minValue, <em>optional integer </em>maxValue = reaper.ThemeLayout_GetParameter(<em>integer</em> wp)</code></div>
	<div class="p_func"><code>(<em>String</em> retval, <em>Int</em> wp, <em>String</em> descOutOptional, <em>Int</em> valueOutOptional, <em>Int</em> defValueOutOptional, <em>Int</em> minValueOutOptional, <em>Int</em> maxValueOutOptional) = RPR_ThemeLayout_GetParameter(wp, descOutOptional, valueOutOptional, defValueOutOptional, minValueOutOptional, maxValueOutOptional)</code></div>
	<p>returns theme layout parameter. return value is cfg-name, or nil/empty if out of range.</p>
</div>

<div class="function_definition" id="ThemeLayout_RefreshAll">
	<div class="c_func"><code>void ThemeLayout_RefreshAll()</code></div>
	<div class="e_func"><code>ThemeLayout_RefreshAll()</code></div>
	<div class="l_func"><code>reaper.ThemeLayout_RefreshAll()</code></div>
	<div class="p_func"><code>RPR_ThemeLayout_RefreshAll()</code></div>
	<p>Refreshes all layouts</p>
</div>

<div class="function_definition" id="ThemeLayout_SetLayout">
	<div class="c_func"><code>bool ThemeLayout_SetLayout(const char* section, const char*  layout)</code></div>
	<div class="e_func"><code><em>bool </em> ThemeLayout_SetLayout("section", " layout")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.ThemeLayout_SetLayout(<em>string</em> section, <em>string</em>  layout)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_ThemeLayout_SetLayout(<em>String</em> section, <em>String</em>  layout)</code></div>
	<p>Sets theme layout override for a particular section -- section can be 'global' or 'mcp' etc. If setting global layout, prefix a ! to the layout string to clear any per-layout overrides. Returns false if failed.</p>
</div>

<div class="function_definition" id="ThemeLayout_SetParameter">
	<div class="c_func"><code>bool ThemeLayout_SetParameter(int wp, int value, bool persist)</code></div>
	<div class="e_func"><code><em>bool </em> ThemeLayout_SetParameter(<em>int </em>wp, <em>int </em>value, <em>bool </em>persist)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.ThemeLayout_SetParameter(<em>integer</em> wp, <em>integer</em> value, <em>boolean</em> persist)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_ThemeLayout_SetParameter(<em>Int</em> wp, <em>Int</em> value, <em>Boolean</em> persist)</code></div>
	<p>sets theme layout parameter to value. persist=true in order to have change loaded on next theme load. note that the caller should update layouts via ??? to make changes visible.</p>
</div>

<div class="function_definition" id="time_precise">
	<div class="c_func"><code>double time_precise()</code></div>
	<div class="l_func"><code><em>number</em> reaper.time_precise()</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_time_precise()</code></div>
	<p>Gets a precise system timestamp in seconds</p>
</div>

<div class="function_definition" id="TimeMap2_beatsToTime">
	<div class="c_func"><code>double TimeMap2_beatsToTime(ReaProject* proj, double tpos, const int* measuresInOptional)</code></div>
	<div class="e_func"><code><em>double </em> TimeMap2_beatsToTime(<em>ReaProject</em> proj, tpos, <em>optional int</em> measuresIn)</code></div>
	<div class="l_func"><code><em>number</em> reaper.TimeMap2_beatsToTime(<em>ReaProject</em> proj, <em>number</em> tpos, <em>optional integer</em> measuresIn)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_TimeMap2_beatsToTime(<em>ReaProject</em> proj, <em>Float</em> tpos, <em>const int</em> measuresInOptional)</code></div>
	<p>convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.</p>
</div>

<div class="function_definition" id="TimeMap2_GetDividedBpmAtTime">
	<div class="c_func"><code>double TimeMap2_GetDividedBpmAtTime(ReaProject* proj, double time)</code></div>
	<div class="e_func"><code><em>double </em> TimeMap2_GetDividedBpmAtTime(<em>ReaProject</em> proj, time)</code></div>
	<div class="l_func"><code><em>number</em> reaper.TimeMap2_GetDividedBpmAtTime(<em>ReaProject</em> proj, <em>number</em> time)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_TimeMap2_GetDividedBpmAtTime(<em>ReaProject</em> proj, <em>Float</em> time)</code></div>
	<p>get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)</p>
</div>

<div class="function_definition" id="TimeMap2_GetNextChangeTime">
	<div class="c_func"><code>double TimeMap2_GetNextChangeTime(ReaProject* proj, double time)</code></div>
	<div class="e_func"><code><em>double </em> TimeMap2_GetNextChangeTime(<em>ReaProject</em> proj, time)</code></div>
	<div class="l_func"><code><em>number</em> reaper.TimeMap2_GetNextChangeTime(<em>ReaProject</em> proj, <em>number</em> time)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_TimeMap2_GetNextChangeTime(<em>ReaProject</em> proj, <em>Float</em> time)</code></div>
	<p>when does the next time map (tempo or time sig) change occur</p>
</div>

<div class="function_definition" id="TimeMap2_QNToTime">
	<div class="c_func"><code>double TimeMap2_QNToTime(ReaProject* proj, double qn)</code></div>
	<div class="e_func"><code><em>double </em> TimeMap2_QNToTime(<em>ReaProject</em> proj, qn)</code></div>
	<div class="l_func"><code><em>number</em> reaper.TimeMap2_QNToTime(<em>ReaProject</em> proj, <em>number</em> qn)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_TimeMap2_QNToTime(<em>ReaProject</em> proj, <em>Float</em> qn)</code></div>
	<p>converts project QN position to time.</p>
</div>

<div class="function_definition" id="TimeMap2_timeToBeats">
	<div class="c_func"><code>double TimeMap2_timeToBeats(ReaProject* proj, double tpos, int* measuresOutOptional, int* cmlOutOptional, double* fullbeatsOutOptional, int* cdenomOutOptional)</code></div>
	<div class="e_func"><code><em>double </em> TimeMap2_timeToBeats(<em>ReaProject</em> proj, tpos, <em>optional int &amp;</em>measures, <em>optional int &amp;</em>cml, <em>optional &amp;</em>fullbeats, <em>optional int &amp;</em>cdenom)</code></div>
	<div class="l_func"><code><em>number</em> retval, <em>optional integer </em>measures, <em>optional integer </em>cml, <em>optional number </em>fullbeats, <em>optional integer </em>cdenom = reaper.TimeMap2_timeToBeats(<em>ReaProject</em> proj, <em>number</em> tpos)</code></div>
	<div class="p_func"><code>(<em>Float</em> retval, <em>ReaProject</em> proj, <em>Float</em> tpos, <em>Int</em> measuresOutOptional, <em>Int</em> cmlOutOptional, <em>Float</em> fullbeatsOutOptional, <em>Int</em> cdenomOutOptional) = RPR_TimeMap2_timeToBeats(proj, tpos, measuresOutOptional, cmlOutOptional, fullbeatsOutOptional, cdenomOutOptional)</code></div>
	<p>convert a time into beats.<br>
if measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.<br>
if cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)<br>
if fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).<br>
if cdenom is non-NULL, will be set to the current time signature denominator.</p>
</div>

<div class="function_definition" id="TimeMap2_timeToQN">
	<div class="c_func"><code>double TimeMap2_timeToQN(ReaProject* proj, double tpos)</code></div>
	<div class="e_func"><code><em>double </em> TimeMap2_timeToQN(<em>ReaProject</em> proj, tpos)</code></div>
	<div class="l_func"><code><em>number</em> reaper.TimeMap2_timeToQN(<em>ReaProject</em> proj, <em>number</em> tpos)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_TimeMap2_timeToQN(<em>ReaProject</em> proj, <em>Float</em> tpos)</code></div>
	<p>converts project time position to QN position.</p>
</div>

<div class="function_definition" id="TimeMap_curFrameRate">
	<div class="c_func"><code>double TimeMap_curFrameRate(ReaProject* proj, bool* dropFrameOut)</code></div>
	<div class="e_func"><code><em>double </em> TimeMap_curFrameRate(<em>ReaProject</em> proj, <em>bool &amp;</em>dropFrame)</code></div>
	<div class="l_func"><code><em>number</em> retval, <em>boolean </em>dropFrame = reaper.TimeMap_curFrameRate(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code>(<em>Float</em> retval, <em>ReaProject</em> proj, <em>Boolean</em> dropFrameOut) = RPR_TimeMap_curFrameRate(proj, dropFrameOut)</code></div>
	<p>Gets project framerate, and optionally whether it is drop-frame timecode</p>
</div>

<div class="function_definition" id="TimeMap_GetDividedBpmAtTime">
	<div class="c_func"><code>double TimeMap_GetDividedBpmAtTime(double time)</code></div>
	<div class="e_func"><code><em>double </em> TimeMap_GetDividedBpmAtTime(time)</code></div>
	<div class="l_func"><code><em>number</em> reaper.TimeMap_GetDividedBpmAtTime(<em>number</em> time)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_TimeMap_GetDividedBpmAtTime(<em>Float</em> time)</code></div>
	<p>get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)</p>
</div>

<div class="function_definition" id="TimeMap_GetMeasureInfo">
	<div class="c_func"><code>double TimeMap_GetMeasureInfo(ReaProject* proj, int measure, double* qn_startOut, double* qn_endOut, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)</code></div>
	<div class="e_func"><code><em>double </em> TimeMap_GetMeasureInfo(<em>ReaProject</em> proj, <em>int </em>measure, <em>&amp;</em>qn_start, <em>&amp;</em>qn_end, <em>int &amp;</em>timesig_num, <em>int &amp;</em>timesig_denom, <em>&amp;</em>tempo)</code></div>
	<div class="l_func"><code><em>number</em> retval, <em>number </em>qn_start, <em>number </em>qn_end, <em>integer </em>timesig_num, <em>integer </em>timesig_denom, <em>number </em>tempo = reaper.TimeMap_GetMeasureInfo(<em>ReaProject</em> proj, <em>integer</em> measure)</code></div>
	<div class="p_func"><code>(<em>Float</em> retval, <em>ReaProject</em> proj, <em>Int</em> measure, <em>Float</em> qn_startOut, <em>Float</em> qn_endOut, <em>Int</em> timesig_numOut, <em>Int</em> timesig_denomOut, <em>Float</em> tempoOut) = RPR_TimeMap_GetMeasureInfo(proj, measure, qn_startOut, qn_endOut, timesig_numOut, timesig_denomOut, tempoOut)</code></div>
	<p>Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.</p>
</div>

<div class="function_definition" id="TimeMap_GetMetronomePattern">
	<div class="c_func"><code>int TimeMap_GetMetronomePattern(ReaProject* proj, double time, char* pattern, int pattern_sz)</code></div>
	<div class="e_func"><code><em>int </em> TimeMap_GetMetronomePattern(<em>ReaProject</em> proj, time, #pattern)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>pattern = reaper.TimeMap_GetMetronomePattern(<em>ReaProject</em> proj, <em>number</em> time, <em>string </em>pattern)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>ReaProject</em> proj, <em>Float</em> time, <em>String</em> pattern, <em>Int</em> pattern_sz) = RPR_TimeMap_GetMetronomePattern(proj, time, pattern, pattern_sz)</code></div>
	<p>Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be "1221222". The length of the string is the time signature numerator, and the function returns the time signature denominator.</p>
</div>

<div class="function_definition" id="TimeMap_GetTimeSigAtTime">
	<div class="c_func"><code>void TimeMap_GetTimeSigAtTime(ReaProject* proj, double time, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)</code></div>
	<div class="e_func"><code>TimeMap_GetTimeSigAtTime(<em>ReaProject</em> proj, time, <em>int &amp;</em>timesig_num, <em>int &amp;</em>timesig_denom, <em>&amp;</em>tempo)</code></div>
	<div class="l_func"><code><em>integer </em>timesig_num, <em>integer </em>timesig_denom, <em>number </em>tempo = reaper.TimeMap_GetTimeSigAtTime(<em>ReaProject</em> proj, <em>number</em> time)</code></div>
	<div class="p_func"><code>(<em>ReaProject</em> proj, <em>Float</em> time, <em>Int</em> timesig_numOut, <em>Int</em> timesig_denomOut, <em>Float</em> tempoOut) = RPR_TimeMap_GetTimeSigAtTime(proj, time, timesig_numOut, timesig_denomOut, tempoOut)</code></div>
	<p>get the effective time signature and tempo</p>
</div>

<div class="function_definition" id="TimeMap_QNToMeasures">
	<div class="c_func"><code>int TimeMap_QNToMeasures(ReaProject* proj, double qn, double* qnMeasureStartOutOptional, double* qnMeasureEndOutOptional)</code></div>
	<div class="e_func"><code><em>int </em> TimeMap_QNToMeasures(<em>ReaProject</em> proj, qn, <em>optional &amp;</em>qnMeasureStart, <em>optional &amp;</em>qnMeasureEnd)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>optional number </em>qnMeasureStart, <em>optional number </em>qnMeasureEnd = reaper.TimeMap_QNToMeasures(<em>ReaProject</em> proj, <em>number</em> qn)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>ReaProject</em> proj, <em>Float</em> qn, <em>Float</em> qnMeasureStartOutOptional, <em>Float</em> qnMeasureEndOutOptional) = RPR_TimeMap_QNToMeasures(proj, qn, qnMeasureStartOutOptional, qnMeasureEndOutOptional)</code></div>
	<p>Find which measure the given QN position falls in.</p>
</div>

<div class="function_definition" id="TimeMap_QNToTime">
	<div class="c_func"><code>double TimeMap_QNToTime(double qn)</code></div>
	<div class="e_func"><code><em>double </em> TimeMap_QNToTime(qn)</code></div>
	<div class="l_func"><code><em>number</em> reaper.TimeMap_QNToTime(<em>number</em> qn)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_TimeMap_QNToTime(<em>Float</em> qn)</code></div>
	<p>converts project QN position to time.</p>
</div>

<div class="function_definition" id="TimeMap_QNToTime_abs">
	<div class="c_func"><code>double TimeMap_QNToTime_abs(ReaProject* proj, double qn)</code></div>
	<div class="e_func"><code><em>double </em> TimeMap_QNToTime_abs(<em>ReaProject</em> proj, qn)</code></div>
	<div class="l_func"><code><em>number</em> reaper.TimeMap_QNToTime_abs(<em>ReaProject</em> proj, <em>number</em> qn)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_TimeMap_QNToTime_abs(<em>ReaProject</em> proj, <em>Float</em> qn)</code></div>
	<p>Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See <a href="#TimeMap2_QNToTime">TimeMap2_QNToTime</a></p>
</div>

<div class="function_definition" id="TimeMap_timeToQN">
	<div class="c_func"><code>double TimeMap_timeToQN(double tpos)</code></div>
	<div class="e_func"><code><em>double </em> TimeMap_timeToQN(tpos)</code></div>
	<div class="l_func"><code><em>number</em> reaper.TimeMap_timeToQN(<em>number</em> tpos)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_TimeMap_timeToQN(<em>Float</em> tpos)</code></div>
	<p>converts project QN position to time.</p>
</div>

<div class="function_definition" id="TimeMap_timeToQN_abs">
	<div class="c_func"><code>double TimeMap_timeToQN_abs(ReaProject* proj, double tpos)</code></div>
	<div class="e_func"><code><em>double </em> TimeMap_timeToQN_abs(<em>ReaProject</em> proj, tpos)</code></div>
	<div class="l_func"><code><em>number</em> reaper.TimeMap_timeToQN_abs(<em>ReaProject</em> proj, <em>number</em> tpos)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_TimeMap_timeToQN_abs(<em>ReaProject</em> proj, <em>Float</em> tpos)</code></div>
	<p>Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See <a href="#TimeMap2_timeToQN">TimeMap2_timeToQN</a></p>
</div>

<div class="function_definition" id="ToggleTrackSendUIMute">
	<div class="c_func"><code>bool ToggleTrackSendUIMute(MediaTrack* track, int send_idx)</code></div>
	<div class="e_func"><code><em>bool </em> ToggleTrackSendUIMute(<em>MediaTrack</em> track, <em>int </em>send_idx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.ToggleTrackSendUIMute(<em>MediaTrack</em> track, <em>integer</em> send_idx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_ToggleTrackSendUIMute(<em>MediaTrack</em> track, <em>Int</em> send_idx)</code></div>
	<p>send_idx&lt;0 for receives, &gt;=0 for hw ouputs, &gt;=nb_of_hw_ouputs for sends.</p>
</div>

<div class="function_definition" id="Track_GetPeakHoldDB">
	<div class="c_func"><code>double Track_GetPeakHoldDB(MediaTrack* track, int channel, bool clear)</code></div>
	<div class="e_func"><code><em>double </em> Track_GetPeakHoldDB(<em>MediaTrack</em> track, <em>int </em>channel, <em>bool </em>clear)</code></div>
	<div class="l_func"><code><em>number</em> reaper.Track_GetPeakHoldDB(<em>MediaTrack</em> track, <em>integer</em> channel, <em>boolean</em> clear)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_Track_GetPeakHoldDB(<em>MediaTrack</em> track, <em>Int</em> channel, <em>Boolean</em> clear)</code></div>
	<p>Returns meter hold state, in dB*0.01 (0 = +0dB, -0.01 = -1dB, 0.02 = +2dB, etc). If clear is set, clears the meter hold. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.</p>
</div>

<div class="function_definition" id="Track_GetPeakInfo">
	<div class="c_func"><code>double Track_GetPeakInfo(MediaTrack* track, int channel)</code></div>
	<div class="e_func"><code><em>double </em> Track_GetPeakInfo(<em>MediaTrack</em> track, <em>int </em>channel)</code></div>
	<div class="l_func"><code><em>number</em> reaper.Track_GetPeakInfo(<em>MediaTrack</em> track, <em>integer</em> channel)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_Track_GetPeakInfo(<em>MediaTrack</em> track, <em>Int</em> channel)</code></div>
	<p>Returns peak meter value (1.0=+0dB, 0.0=-inf) for channel. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.</p>
</div>

<div class="function_definition" id="TrackCtl_SetToolTip">
	<div class="c_func"><code>void TrackCtl_SetToolTip(const char* fmt, int xpos, int ypos, bool topmost)</code></div>
	<div class="e_func"><code>TrackCtl_SetToolTip("fmt", <em>int </em>xpos, <em>int </em>ypos, <em>bool </em>topmost)</code></div>
	<div class="l_func"><code>reaper.TrackCtl_SetToolTip(<em>string</em> fmt, <em>integer</em> xpos, <em>integer</em> ypos, <em>boolean</em> topmost)</code></div>
	<div class="p_func"><code>RPR_TrackCtl_SetToolTip(<em>String</em> fmt, <em>Int</em> xpos, <em>Int</em> ypos, <em>Boolean</em> topmost)</code></div>
	<p>displays tooltip at location, or removes if empty string</p>
</div>

<div class="function_definition" id="TrackFX_AddByName">
	<div class="c_func"><code>int TrackFX_AddByName(MediaTrack* track, const char* fxname, bool recFX, int instantiate)</code></div>
	<div class="e_func"><code><em>int </em> TrackFX_AddByName(<em>MediaTrack</em> track, "fxname", <em>bool </em>recFX, <em>int </em>instantiate)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TrackFX_AddByName(<em>MediaTrack</em> track, <em>string</em> fxname, <em>boolean</em> recFX, <em>integer</em> instantiate)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TrackFX_AddByName(<em>MediaTrack</em> track, <em>String</em> fxname, <em>Boolean</em> recFX, <em>Int</em> instantiate)</code></div>
	<p>Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. If instantiate is &lt;= -1000, it is used for the insertion position (-1000 is first item in chain, -1001 is second, etc). fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:, or FXADD: which adds selected items from the currently-open FX browser, FXADD:2 to limit to 2 FX added, or FXADD:2e to only succeed if exactly 2 FX are selected. Returns -1 on failure or the new position in chain on success. FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_CopyToTake">
	<div class="c_func"><code>void TrackFX_CopyToTake(MediaTrack* src_track, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)</code></div>
	<div class="e_func"><code>TrackFX_CopyToTake(<em>MediaTrack</em> src_track, <em>int </em>src_fx, <em>MediaItem_Take</em> dest_take, <em>int </em>dest_fx, <em>bool </em>is_move)</code></div>
	<div class="l_func"><code>reaper.TrackFX_CopyToTake(<em>MediaTrack</em> src_track, <em>integer</em> src_fx, <em>MediaItem_Take</em> dest_take, <em>integer</em> dest_fx, <em>boolean</em> is_move)</code></div>
	<div class="p_func"><code>RPR_TrackFX_CopyToTake(<em>MediaTrack</em> src_track, <em>Int</em> src_fx, <em>MediaItem_Take</em> dest_take, <em>Int</em> dest_fx, <em>Boolean</em> is_move)</code></div>
	<p>Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_CopyToTrack">
	<div class="c_func"><code>void TrackFX_CopyToTrack(MediaTrack* src_track, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)</code></div>
	<div class="e_func"><code>TrackFX_CopyToTrack(<em>MediaTrack</em> src_track, <em>int </em>src_fx, <em>MediaTrack</em> dest_track, <em>int </em>dest_fx, <em>bool </em>is_move)</code></div>
	<div class="l_func"><code>reaper.TrackFX_CopyToTrack(<em>MediaTrack</em> src_track, <em>integer</em> src_fx, <em>MediaTrack</em> dest_track, <em>integer</em> dest_fx, <em>boolean</em> is_move)</code></div>
	<div class="p_func"><code>RPR_TrackFX_CopyToTrack(<em>MediaTrack</em> src_track, <em>Int</em> src_fx, <em>MediaTrack</em> dest_track, <em>Int</em> dest_fx, <em>Boolean</em> is_move)</code></div>
	<p>Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_Delete">
	<div class="c_func"><code>bool TrackFX_Delete(MediaTrack* track, int fx)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_Delete(<em>MediaTrack</em> track, <em>int </em>fx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_Delete(<em>MediaTrack</em> track, <em>integer</em> fx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_Delete(<em>MediaTrack</em> track, <em>Int</em> fx)</code></div>
	<p>Remove a FX from track chain (returns true on success) FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_EndParamEdit">
	<div class="c_func"><code>bool TrackFX_EndParamEdit(MediaTrack* track, int fx, int param)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_EndParamEdit(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>param)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_EndParamEdit(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_EndParamEdit(<em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> param)</code></div>
	<p> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_FormatParamValue">
	<div class="c_func"><code>bool TrackFX_FormatParamValue(MediaTrack* track, int fx, int param, double val, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_FormatParamValue(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>param, val, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TrackFX_FormatParamValue(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> param, <em>number</em> val)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> val, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_TrackFX_FormatParamValue(track, fx, param, val, bufOut, bufOut_sz)</code></div>
	<p>Note: only works with FX that support Cockos VST extensions. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_FormatParamValueNormalized">
	<div class="c_func"><code>bool TrackFX_FormatParamValueNormalized(MediaTrack* track, int fx, int param, double value, char* buf, int buf_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_FormatParamValueNormalized(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>param, value, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TrackFX_FormatParamValueNormalized(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> param, <em>number</em> value, <em>string </em>buf)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> value, <em>String</em> buf, <em>Int</em> buf_sz) = RPR_TrackFX_FormatParamValueNormalized(track, fx, param, value, buf, buf_sz)</code></div>
	<p>Note: only works with FX that support Cockos VST extensions. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetByName">
	<div class="c_func"><code>int TrackFX_GetByName(MediaTrack* track, const char* fxname, bool instantiate)</code></div>
	<div class="e_func"><code><em>int </em> TrackFX_GetByName(<em>MediaTrack</em> track, "fxname", <em>bool </em>instantiate)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TrackFX_GetByName(<em>MediaTrack</em> track, <em>string</em> fxname, <em>boolean</em> instantiate)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TrackFX_GetByName(<em>MediaTrack</em> track, <em>String</em> fxname, <em>Boolean</em> instantiate)</code></div>
	<p>Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See <a href="#TrackFX_GetInstrument">TrackFX_GetInstrument</a>, <a href="#TrackFX_GetEQ">TrackFX_GetEQ</a>. Deprecated in favor of TrackFX_AddByName.</p>
</div>

<div class="function_definition" id="TrackFX_GetChainVisible">
	<div class="c_func"><code>int TrackFX_GetChainVisible(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>int </em> TrackFX_GetChainVisible(<em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TrackFX_GetChainVisible(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TrackFX_GetChainVisible(<em>MediaTrack</em> track)</code></div>
	<p>returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected</p>
</div>

<div class="function_definition" id="TrackFX_GetCount">
	<div class="c_func"><code>int TrackFX_GetCount(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>int </em> TrackFX_GetCount(<em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TrackFX_GetCount(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TrackFX_GetCount(<em>MediaTrack</em> track)</code></div>
</div>

<div class="function_definition" id="TrackFX_GetEnabled">
	<div class="c_func"><code>bool TrackFX_GetEnabled(MediaTrack* track, int fx)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_GetEnabled(<em>MediaTrack</em> track, <em>int </em>fx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_GetEnabled(<em>MediaTrack</em> track, <em>integer</em> fx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_GetEnabled(<em>MediaTrack</em> track, <em>Int</em> fx)</code></div>
	<p>See <a href="#TrackFX_SetEnabled">TrackFX_SetEnabled</a> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetEQ">
	<div class="c_func"><code>int TrackFX_GetEQ(MediaTrack* track, bool instantiate)</code></div>
	<div class="e_func"><code><em>int </em> TrackFX_GetEQ(<em>MediaTrack</em> track, <em>bool </em>instantiate)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TrackFX_GetEQ(<em>MediaTrack</em> track, <em>boolean</em> instantiate)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TrackFX_GetEQ(<em>MediaTrack</em> track, <em>Boolean</em> instantiate)</code></div>
	<p>Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See <a href="#TrackFX_GetInstrument">TrackFX_GetInstrument</a>, <a href="#TrackFX_GetByName">TrackFX_GetByName</a>.</p>
</div>

<div class="function_definition" id="TrackFX_GetEQBandEnabled">
	<div class="c_func"><code>bool TrackFX_GetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_GetEQBandEnabled(<em>MediaTrack</em> track, <em>int </em>fxidx, <em>int </em>bandtype, <em>int </em>bandidx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_GetEQBandEnabled(<em>MediaTrack</em> track, <em>integer</em> fxidx, <em>integer</em> bandtype, <em>integer</em> bandidx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_GetEQBandEnabled(<em>MediaTrack</em> track, <em>Int</em> fxidx, <em>Int</em> bandtype, <em>Int</em> bandidx)</code></div>
	<p>Returns true if the EQ band is enabled.<br>
Returns false if the band is disabled, or if track/fxidx is not ReaEQ.<br>
Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.<br>
Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.<br>
</p><p>
See <a href="#TrackFX_GetEQ">TrackFX_GetEQ</a>, <a href="#TrackFX_GetEQParam">TrackFX_GetEQParam</a>, <a href="#TrackFX_SetEQParam">TrackFX_SetEQParam</a>, <a href="#TrackFX_SetEQBandEnabled">TrackFX_SetEQBandEnabled</a>. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetEQParam">
	<div class="c_func"><code>bool TrackFX_GetEQParam(MediaTrack* track, int fxidx, int paramidx, int* bandtypeOut, int* bandidxOut, int* paramtypeOut, double* normvalOut)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_GetEQParam(<em>MediaTrack</em> track, <em>int </em>fxidx, <em>int </em>paramidx, <em>int &amp;</em>bandtype, <em>int &amp;</em>bandidx, <em>int &amp;</em>paramtype, <em>&amp;</em>normval)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>bandtype, <em>integer </em>bandidx, <em>integer </em>paramtype, <em>number </em>normval = reaper.TrackFX_GetEQParam(<em>MediaTrack</em> track, <em>integer</em> fxidx, <em>integer</em> paramidx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> fxidx, <em>Int</em> paramidx, <em>Int</em> bandtypeOut, <em>Int</em> bandidxOut, <em>Int</em> paramtypeOut, <em>Float</em> normvalOut) = RPR_TrackFX_GetEQParam(track, fxidx, paramidx, bandtypeOut, bandidxOut, paramtypeOut, normvalOut)</code></div>
	<p>Returns false if track/fxidx is not ReaEQ.<br>
Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.<br>
Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.<br>
Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.<br>
See <a href="#TrackFX_GetEQ">TrackFX_GetEQ</a>, <a href="#TrackFX_SetEQParam">TrackFX_SetEQParam</a>, <a href="#TrackFX_GetEQBandEnabled">TrackFX_GetEQBandEnabled</a>, <a href="#TrackFX_SetEQBandEnabled">TrackFX_SetEQBandEnabled</a>. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetFloatingWindow">
	<div class="c_func"><code>HWND TrackFX_GetFloatingWindow(MediaTrack* track, int index)</code></div>
	<div class="e_func"><code><em>HWND</em>  TrackFX_GetFloatingWindow(<em>MediaTrack</em> track, <em>int </em>index)</code></div>
	<div class="l_func"><code><em>HWND</em> reaper.TrackFX_GetFloatingWindow(<em>MediaTrack</em> track, <em>integer</em> index)</code></div>
	<div class="p_func"><code><em>HWND</em>  RPR_TrackFX_GetFloatingWindow(<em>MediaTrack</em> track, <em>Int</em> index)</code></div>
	<p>returns HWND of floating window for effect index, if any FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetFormattedParamValue">
	<div class="c_func"><code>bool TrackFX_GetFormattedParamValue(MediaTrack* track, int fx, int param, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_GetFormattedParamValue(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>param, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TrackFX_GetFormattedParamValue(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> param, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_TrackFX_GetFormattedParamValue(track, fx, param, bufOut, bufOut_sz)</code></div>
	<p> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetFXGUID">
	<div class="c_func"><code>GUID* TrackFX_GetFXGUID(MediaTrack* track, int fx)</code></div>
	<div class="e_func"><code>bool  TrackFX_GetFXGUID(#retguid, <em>MediaTrack</em> track, <em>int </em>fx)</code></div>
	<div class="l_func"><code><em>string</em> GUID = reaper.TrackFX_GetFXGUID(<em>MediaTrack</em> track, <em>integer</em> fx)</code></div>
	<div class="p_func"><code><em>GUID</em>  RPR_TrackFX_GetFXGUID(<em>MediaTrack</em> track, <em>Int</em> fx)</code></div>
	<p> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetFXName">
	<div class="c_func"><code>bool TrackFX_GetFXName(MediaTrack* track, int fx, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_GetFXName(<em>MediaTrack</em> track, <em>int </em>fx, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TrackFX_GetFXName(<em>MediaTrack</em> track, <em>integer</em> fx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_TrackFX_GetFXName(track, fx, bufOut, bufOut_sz)</code></div>
	<p> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetInstrument">
	<div class="c_func"><code>int TrackFX_GetInstrument(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>int </em> TrackFX_GetInstrument(<em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TrackFX_GetInstrument(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TrackFX_GetInstrument(<em>MediaTrack</em> track)</code></div>
	<p>Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See <a href="#TrackFX_GetEQ">TrackFX_GetEQ</a>, <a href="#TrackFX_GetByName">TrackFX_GetByName</a>.</p>
</div>

<div class="function_definition" id="TrackFX_GetIOSize">
	<div class="c_func"><code>int TrackFX_GetIOSize(MediaTrack* track, int fx, int* inputPinsOut, int* outputPinsOut)</code></div>
	<div class="e_func"><code><em>int </em> TrackFX_GetIOSize(<em>MediaTrack</em> track, <em>int </em>fx, <em>int &amp;</em>inputPins, <em>int &amp;</em>outputPins)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>integer </em>inputPins, <em>integer </em>outputPins = reaper.TrackFX_GetIOSize(<em>MediaTrack</em> track, <em>integer</em> fx)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> inputPinsOut, <em>Int</em> outputPinsOut) = RPR_TrackFX_GetIOSize(track, fx, inputPinsOut, outputPinsOut)</code></div>
	<p>Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetNamedConfigParm">
	<div class="c_func"><code>bool TrackFX_GetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, char* bufOutNeedBig, int bufOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_GetNamedConfigParm(<em>MediaTrack</em> track, <em>int </em>fx, "parmname", #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TrackFX_GetNamedConfigParm(<em>MediaTrack</em> track, <em>integer</em> fx, <em>string</em> parmname)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>String</em> parmname, <em>String</em> bufOutNeedBig, <em>Int</em> bufOutNeedBig_sz) = RPR_TrackFX_GetNamedConfigParm(track, fx, parmname, bufOutNeedBig, bufOutNeedBig_sz)</code></div>
	<p>gets plug-in specific named configuration value (returns true on success). <br>
</p><p>
Supported values for read:<br>
pdc : PDC latency<br>
in_pin_X : name of input pin X<br>
out_pin_X : name of output pin X<br>
fx_type : type string<br>
fx_ident : type-specific identifier<br>
fx_name : pre-aliased name<br>
GainReduction_dB : [ReaComp + other supported compressors]<br>
original_name : pre-renamed FX instance name<br>
container_count : [Container] number of FX in container<br>
vst_chunk[_program] : base64-encoded VST-specific chunk.<br>
clap_chunk : base64-encoded CLAP-specific chunk.<br>
param.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state<br>
param.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state<br>
param.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*<br>
param.X.mod.[active,baseline,visible] : parameter module global settings<br>
param.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set<br>
param.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)<br>
param.X.learn.flags : &amp;1=selected track only, &amp;2=soft takeover, &amp;4=focused FX only, &amp;8=LFO retrigger, &amp;16=visible FX only<br>
BANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]<br>
THRESHOLD, CEILING, TRUEPEAK : [ReaLimit]<br>
NUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]<br>
ITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE<br>
FILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE<br>
MODE, RSMODE : [RS5k] general mode, resample mode<br>
VIDEO_CODE : [video processor] code<br>
force_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence<br>
parallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process plug-in parallel and merge MIDI<br>
instance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect<br>
chain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect<br>
chain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)<br>
renamed_name : renamed FX instance name (empty string = not renamed)<br>
 FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetNumParams">
	<div class="c_func"><code>int TrackFX_GetNumParams(MediaTrack* track, int fx)</code></div>
	<div class="e_func"><code><em>int </em> TrackFX_GetNumParams(<em>MediaTrack</em> track, <em>int </em>fx)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TrackFX_GetNumParams(<em>MediaTrack</em> track, <em>integer</em> fx)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TrackFX_GetNumParams(<em>MediaTrack</em> track, <em>Int</em> fx)</code></div>
	<p> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetOffline">
	<div class="c_func"><code>bool TrackFX_GetOffline(MediaTrack* track, int fx)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_GetOffline(<em>MediaTrack</em> track, <em>int </em>fx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_GetOffline(<em>MediaTrack</em> track, <em>integer</em> fx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_GetOffline(<em>MediaTrack</em> track, <em>Int</em> fx)</code></div>
	<p>See <a href="#TrackFX_SetOffline">TrackFX_SetOffline</a> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetOpen">
	<div class="c_func"><code>bool TrackFX_GetOpen(MediaTrack* track, int fx)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_GetOpen(<em>MediaTrack</em> track, <em>int </em>fx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_GetOpen(<em>MediaTrack</em> track, <em>integer</em> fx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_GetOpen(<em>MediaTrack</em> track, <em>Int</em> fx)</code></div>
	<p>Returns true if this FX UI is open in the FX chain window or a floating window. See <a href="#TrackFX_SetOpen">TrackFX_SetOpen</a> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetParam">
	<div class="c_func"><code>double TrackFX_GetParam(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut)</code></div>
	<div class="e_func"><code><em>double </em> TrackFX_GetParam(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>param, <em>&amp;</em>minval, <em>&amp;</em>maxval)</code></div>
	<div class="l_func"><code><em>number</em> retval, <em>number </em>minval, <em>number </em>maxval = reaper.TrackFX_GetParam(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code>(<em>Float</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> minvalOut, <em>Float</em> maxvalOut) = RPR_TrackFX_GetParam(track, fx, param, minvalOut, maxvalOut)</code></div>
	<p> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetParameterStepSizes">
	<div class="c_func"><code>bool TrackFX_GetParameterStepSizes(MediaTrack* track, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_GetParameterStepSizes(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>param, <em>&amp;</em>step, <em>&amp;</em>smallstep, <em>&amp;</em>largestep, <em>bool &amp;</em>istoggle)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>step, <em>number </em>smallstep, <em>number </em>largestep, <em>boolean </em>istoggle = reaper.TrackFX_GetParameterStepSizes(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> stepOut, <em>Float</em> smallstepOut, <em>Float</em> largestepOut, <em>Boolean</em> istoggleOut) = RPR_TrackFX_GetParameterStepSizes(track, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)</code></div>
	<p> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetParamEx">
	<div class="c_func"><code>double TrackFX_GetParamEx(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)</code></div>
	<div class="e_func"><code><em>double </em> TrackFX_GetParamEx(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>param, <em>&amp;</em>minval, <em>&amp;</em>maxval, <em>&amp;</em>midval)</code></div>
	<div class="l_func"><code><em>number</em> retval, <em>number </em>minval, <em>number </em>maxval, <em>number </em>midval = reaper.TrackFX_GetParamEx(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code>(<em>Float</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> minvalOut, <em>Float</em> maxvalOut, <em>Float</em> midvalOut) = RPR_TrackFX_GetParamEx(track, fx, param, minvalOut, maxvalOut, midvalOut)</code></div>
	<p> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetParamFromIdent">
	<div class="c_func"><code>int TrackFX_GetParamFromIdent(MediaTrack* track, int fx, const char* ident_str)</code></div>
	<div class="e_func"><code><em>int </em> TrackFX_GetParamFromIdent(<em>MediaTrack</em> track, <em>int </em>fx, "ident_str")</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TrackFX_GetParamFromIdent(<em>MediaTrack</em> track, <em>integer</em> fx, <em>string</em> ident_str)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TrackFX_GetParamFromIdent(<em>MediaTrack</em> track, <em>Int</em> fx, <em>String</em> ident_str)</code></div>
	<p>gets the parameter index from an identifying string (:wet, :bypass, :delta, or a string returned from GetParamIdent), or -1 if unknown. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetParamIdent">
	<div class="c_func"><code>bool TrackFX_GetParamIdent(MediaTrack* track, int fx, int param, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_GetParamIdent(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>param, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TrackFX_GetParamIdent(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> param, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_TrackFX_GetParamIdent(track, fx, param, bufOut, bufOut_sz)</code></div>
	<p>gets an identifying string for the parameter FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetParamName">
	<div class="c_func"><code>bool TrackFX_GetParamName(MediaTrack* track, int fx, int param, char* bufOut, int bufOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_GetParamName(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>param, #buf)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.TrackFX_GetParamName(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> param, <em>String</em> bufOut, <em>Int</em> bufOut_sz) = RPR_TrackFX_GetParamName(track, fx, param, bufOut, bufOut_sz)</code></div>
	<p> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetParamNormalized">
	<div class="c_func"><code>double TrackFX_GetParamNormalized(MediaTrack* track, int fx, int param)</code></div>
	<div class="e_func"><code><em>double </em> TrackFX_GetParamNormalized(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>param)</code></div>
	<div class="l_func"><code><em>number</em> reaper.TrackFX_GetParamNormalized(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> param)</code></div>
	<div class="p_func"><code><em>Float</em>  RPR_TrackFX_GetParamNormalized(<em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> param)</code></div>
	<p> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetPinMappings">
	<div class="c_func"><code>int TrackFX_GetPinMappings(MediaTrack* tr, int fx, int isoutput, int pin, int* high32Out)</code></div>
	<div class="e_func"><code><em>int </em> TrackFX_GetPinMappings(<em>MediaTrack</em> tr, <em>int </em>fx, <em>int </em>isoutput, <em>int </em>pin, <em>int &amp;</em>high32)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>integer </em>high32 = reaper.TrackFX_GetPinMappings(<em>MediaTrack</em> tr, <em>integer</em> fx, <em>integer</em> isoutput, <em>integer</em> pin)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>MediaTrack</em> tr, <em>Int</em> fx, <em>Int</em> isoutput, <em>Int</em> pin, <em>Int</em> high32Out) = RPR_TrackFX_GetPinMappings(tr, fx, isoutput, pin, high32Out)</code></div>
	<p>gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits. Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetPreset">
	<div class="c_func"><code>bool TrackFX_GetPreset(MediaTrack* track, int fx, char* presetnameOut, int presetnameOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_GetPreset(<em>MediaTrack</em> track, <em>int </em>fx, #presetname)</code></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>presetname = reaper.TrackFX_GetPreset(<em>MediaTrack</em> track, <em>integer</em> fx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>String</em> presetnameOut, <em>Int</em> presetnameOut_sz) = RPR_TrackFX_GetPreset(track, fx, presetnameOut, presetnameOut_sz)</code></div>
	<p>Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See <a href="#TrackFX_SetPreset">TrackFX_SetPreset</a>. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetPresetIndex">
	<div class="c_func"><code>int TrackFX_GetPresetIndex(MediaTrack* track, int fx, int* numberOfPresetsOut)</code></div>
	<div class="e_func"><code><em>int </em> TrackFX_GetPresetIndex(<em>MediaTrack</em> track, <em>int </em>fx, <em>int &amp;</em>numberOfPresets)</code></div>
	<div class="l_func"><code><em>integer</em> retval, <em>integer </em>numberOfPresets = reaper.TrackFX_GetPresetIndex(<em>MediaTrack</em> track, <em>integer</em> fx)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> numberOfPresetsOut) = RPR_TrackFX_GetPresetIndex(track, fx, numberOfPresetsOut)</code></div>
	<p>Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See <a href="#TrackFX_SetPresetByIndex">TrackFX_SetPresetByIndex</a> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_GetRecChainVisible">
	<div class="c_func"><code>int TrackFX_GetRecChainVisible(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>int </em> TrackFX_GetRecChainVisible(<em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TrackFX_GetRecChainVisible(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TrackFX_GetRecChainVisible(<em>MediaTrack</em> track)</code></div>
	<p>returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected</p>
</div>

<div class="function_definition" id="TrackFX_GetRecCount">
	<div class="c_func"><code>int TrackFX_GetRecCount(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>int </em> TrackFX_GetRecCount(<em>MediaTrack</em> track)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.TrackFX_GetRecCount(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_TrackFX_GetRecCount(<em>MediaTrack</em> track)</code></div>
	<p>returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX.</p>
</div>

<div class="function_definition" id="TrackFX_GetUserPresetFilename">
	<div class="c_func"><code>void TrackFX_GetUserPresetFilename(MediaTrack* track, int fx, char* fnOut, int fnOut_sz)</code></div>
	<div class="e_func"><code>TrackFX_GetUserPresetFilename(<em>MediaTrack</em> track, <em>int </em>fx, #fn)</code></div>
	<div class="l_func"><code><em>string </em>fn = reaper.TrackFX_GetUserPresetFilename(<em>MediaTrack</em> track, <em>integer</em> fx)</code></div>
	<div class="p_func"><code>(<em>MediaTrack</em> track, <em>Int</em> fx, <em>String</em> fnOut, <em>Int</em> fnOut_sz) = RPR_TrackFX_GetUserPresetFilename(track, fx, fnOut, fnOut_sz)</code></div>
	<p> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_NavigatePresets">
	<div class="c_func"><code>bool TrackFX_NavigatePresets(MediaTrack* track, int fx, int presetmove)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_NavigatePresets(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>presetmove)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_NavigatePresets(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> presetmove)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_NavigatePresets(<em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> presetmove)</code></div>
	<p>presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_SetEnabled">
	<div class="c_func"><code>void TrackFX_SetEnabled(MediaTrack* track, int fx, bool enabled)</code></div>
	<div class="e_func"><code>TrackFX_SetEnabled(<em>MediaTrack</em> track, <em>int </em>fx, <em>bool </em>enabled)</code></div>
	<div class="l_func"><code>reaper.TrackFX_SetEnabled(<em>MediaTrack</em> track, <em>integer</em> fx, <em>boolean</em> enabled)</code></div>
	<div class="p_func"><code>RPR_TrackFX_SetEnabled(<em>MediaTrack</em> track, <em>Int</em> fx, <em>Boolean</em> enabled)</code></div>
	<p>See <a href="#TrackFX_GetEnabled">TrackFX_GetEnabled</a> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_SetEQBandEnabled">
	<div class="c_func"><code>bool TrackFX_SetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx, bool enable)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_SetEQBandEnabled(<em>MediaTrack</em> track, <em>int </em>fxidx, <em>int </em>bandtype, <em>int </em>bandidx, <em>bool </em>enable)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_SetEQBandEnabled(<em>MediaTrack</em> track, <em>integer</em> fxidx, <em>integer</em> bandtype, <em>integer</em> bandidx, <em>boolean</em> enable)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_SetEQBandEnabled(<em>MediaTrack</em> track, <em>Int</em> fxidx, <em>Int</em> bandtype, <em>Int</em> bandidx, <em>Boolean</em> enable)</code></div>
	<p>Enable or disable a ReaEQ band.<br>
Returns false if track/fxidx is not ReaEQ.<br>
Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.<br>
Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.<br>
</p><p>
See <a href="#TrackFX_GetEQ">TrackFX_GetEQ</a>, <a href="#TrackFX_GetEQParam">TrackFX_GetEQParam</a>, <a href="#TrackFX_SetEQParam">TrackFX_SetEQParam</a>, <a href="#TrackFX_GetEQBandEnabled">TrackFX_GetEQBandEnabled</a>. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_SetEQParam">
	<div class="c_func"><code>bool TrackFX_SetEQParam(MediaTrack* track, int fxidx, int bandtype, int bandidx, int paramtype, double val, bool isnorm)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_SetEQParam(<em>MediaTrack</em> track, <em>int </em>fxidx, <em>int </em>bandtype, <em>int </em>bandidx, <em>int </em>paramtype, val, <em>bool </em>isnorm)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_SetEQParam(<em>MediaTrack</em> track, <em>integer</em> fxidx, <em>integer</em> bandtype, <em>integer</em> bandidx, <em>integer</em> paramtype, <em>number</em> val, <em>boolean</em> isnorm)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_SetEQParam(<em>MediaTrack</em> track, <em>Int</em> fxidx, <em>Int</em> bandtype, <em>Int</em> bandidx, <em>Int</em> paramtype, <em>Float</em> val, <em>Boolean</em> isnorm)</code></div>
	<p>Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.<br>
Bandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.<br>
Bandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.<br>
Paramtype (ignored for master gain): 0=freq, 1=gain, 2=Q.<br>
See <a href="#TrackFX_GetEQ">TrackFX_GetEQ</a>, <a href="#TrackFX_GetEQParam">TrackFX_GetEQParam</a>, <a href="#TrackFX_GetEQBandEnabled">TrackFX_GetEQBandEnabled</a>, <a href="#TrackFX_SetEQBandEnabled">TrackFX_SetEQBandEnabled</a>. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_SetNamedConfigParm">
	<div class="c_func"><code>bool TrackFX_SetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, const char* value)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_SetNamedConfigParm(<em>MediaTrack</em> track, <em>int </em>fx, "parmname", "value")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_SetNamedConfigParm(<em>MediaTrack</em> track, <em>integer</em> fx, <em>string</em> parmname, <em>string</em> value)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_SetNamedConfigParm(<em>MediaTrack</em> track, <em>Int</em> fx, <em>String</em> parmname, <em>String</em> value)</code></div>
	<p>sets plug-in specific named configuration value (returns true on success).<br>
</p><p>
Support values for write:<br>
vst_chunk[_program] : base64-encoded VST-specific chunk.<br>
clap_chunk : base64-encoded CLAP-specific chunk.<br>
param.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state<br>
param.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state<br>
param.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*<br>
param.X.mod.[active,baseline,visible] : parameter module global settings<br>
param.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set<br>
param.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)<br>
param.X.learn.flags : &amp;1=selected track only, &amp;2=soft takeover, &amp;4=focused FX only, &amp;8=LFO retrigger, &amp;16=visible FX only<br>
BANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]<br>
THRESHOLD, CEILING, TRUEPEAK : [ReaLimit]<br>
NUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]<br>
ITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE<br>
FILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE<br>
MODE, RSMODE : [RS5k] general mode, resample mode<br>
VIDEO_CODE : [video processor] code<br>
force_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence<br>
parallel : 0, 1 or 2 - 1=process plug-in in parallel with previous, 2=process plug-in parallel and merge MIDI<br>
instance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect<br>
chain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect<br>
chain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)<br>
renamed_name : renamed FX instance name (empty string = not renamed)<br>
 FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_SetOffline">
	<div class="c_func"><code>void TrackFX_SetOffline(MediaTrack* track, int fx, bool offline)</code></div>
	<div class="e_func"><code>TrackFX_SetOffline(<em>MediaTrack</em> track, <em>int </em>fx, <em>bool </em>offline)</code></div>
	<div class="l_func"><code>reaper.TrackFX_SetOffline(<em>MediaTrack</em> track, <em>integer</em> fx, <em>boolean</em> offline)</code></div>
	<div class="p_func"><code>RPR_TrackFX_SetOffline(<em>MediaTrack</em> track, <em>Int</em> fx, <em>Boolean</em> offline)</code></div>
	<p>See <a href="#TrackFX_GetOffline">TrackFX_GetOffline</a> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_SetOpen">
	<div class="c_func"><code>void TrackFX_SetOpen(MediaTrack* track, int fx, bool open)</code></div>
	<div class="e_func"><code>TrackFX_SetOpen(<em>MediaTrack</em> track, <em>int </em>fx, <em>bool </em>open)</code></div>
	<div class="l_func"><code>reaper.TrackFX_SetOpen(<em>MediaTrack</em> track, <em>integer</em> fx, <em>boolean</em> open)</code></div>
	<div class="p_func"><code>RPR_TrackFX_SetOpen(<em>MediaTrack</em> track, <em>Int</em> fx, <em>Boolean</em> open)</code></div>
	<p>Open this FX UI. See <a href="#TrackFX_GetOpen">TrackFX_GetOpen</a> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_SetParam">
	<div class="c_func"><code>bool TrackFX_SetParam(MediaTrack* track, int fx, int param, double val)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_SetParam(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>param, val)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_SetParam(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> param, <em>number</em> val)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_SetParam(<em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> val)</code></div>
	<p> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_SetParamNormalized">
	<div class="c_func"><code>bool TrackFX_SetParamNormalized(MediaTrack* track, int fx, int param, double value)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_SetParamNormalized(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>param, value)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_SetParamNormalized(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> param, <em>number</em> value)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_SetParamNormalized(<em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> param, <em>Float</em> value)</code></div>
	<p> FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_SetPinMappings">
	<div class="c_func"><code>bool TrackFX_SetPinMappings(MediaTrack* tr, int fx, int isoutput, int pin, int low32bits, int hi32bits)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_SetPinMappings(<em>MediaTrack</em> tr, <em>int </em>fx, <em>int </em>isoutput, <em>int </em>pin, <em>int </em>low32bits, <em>int </em>hi32bits)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_SetPinMappings(<em>MediaTrack</em> tr, <em>integer</em> fx, <em>integer</em> isoutput, <em>integer</em> pin, <em>integer</em> low32bits, <em>integer</em> hi32bits)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_SetPinMappings(<em>MediaTrack</em> tr, <em>Int</em> fx, <em>Int</em> isoutput, <em>Int</em> pin, <em>Int</em> low32bits, <em>Int</em> hi32bits)</code></div>
	<p>sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability). Add 0x1000000 to pin index in order to access the second 64 bits of mappings independent of the first 64 bits. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_SetPreset">
	<div class="c_func"><code>bool TrackFX_SetPreset(MediaTrack* track, int fx, const char* presetname)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_SetPreset(<em>MediaTrack</em> track, <em>int </em>fx, "presetname")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_SetPreset(<em>MediaTrack</em> track, <em>integer</em> fx, <em>string</em> presetname)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_SetPreset(<em>MediaTrack</em> track, <em>Int</em> fx, <em>String</em> presetname)</code></div>
	<p>Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See <a href="#TrackFX_GetPreset">TrackFX_GetPreset</a>. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_SetPresetByIndex">
	<div class="c_func"><code>bool TrackFX_SetPresetByIndex(MediaTrack* track, int fx, int idx)</code></div>
	<div class="e_func"><code><em>bool </em> TrackFX_SetPresetByIndex(<em>MediaTrack</em> track, <em>int </em>fx, <em>int </em>idx)</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.TrackFX_SetPresetByIndex(<em>MediaTrack</em> track, <em>integer</em> fx, <em>integer</em> idx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_TrackFX_SetPresetByIndex(<em>MediaTrack</em> track, <em>Int</em> fx, <em>Int</em> idx)</code></div>
	<p>Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See <a href="#TrackFX_GetPresetIndex">TrackFX_GetPresetIndex</a>. FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackFX_Show">
	<div class="c_func"><code>void TrackFX_Show(MediaTrack* track, int index, int showFlag)</code></div>
	<div class="e_func"><code>TrackFX_Show(<em>MediaTrack</em> track, <em>int </em>index, <em>int </em>showFlag)</code></div>
	<div class="l_func"><code>reaper.TrackFX_Show(<em>MediaTrack</em> track, <em>integer</em> index, <em>integer</em> showFlag)</code></div>
	<div class="p_func"><code>RPR_TrackFX_Show(<em>MediaTrack</em> track, <em>Int</em> index, <em>Int</em> showFlag)</code></div>
	<p>showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid) FX indices for tracks can have 0x1000000 added to them in order to reference record input FX (normal tracks) or hardware output FX (master track). FX indices can have 0x2000000 added to them, in which case they will be used to address FX in containers. To address a container, the 1-based subitem is multiplied by one plus the count of the FX chain and added to the 1-based container item index. e.g. to address the third item in the container at the second position of the track FX chain for tr, the index would be 0x2000000 + 3*(TrackFX_GetCount(tr)+1) + 2. This can be extended to sub-containers using TrackFX_GetNamedConfigParm with container_count and similar logic.</p>
</div>

<div class="function_definition" id="TrackList_AdjustWindows">
	<div class="c_func"><code>void TrackList_AdjustWindows(bool isMinor)</code></div>
	<div class="e_func"><code>TrackList_AdjustWindows(<em>bool </em>isMinor)</code></div>
	<div class="l_func"><code>reaper.TrackList_AdjustWindows(<em>boolean</em> isMinor)</code></div>
	<div class="p_func"><code>RPR_TrackList_AdjustWindows(<em>Boolean</em> isMinor)</code></div>
</div>

<div class="function_definition" id="TrackList_UpdateAllExternalSurfaces">
	<div class="c_func"><code>void TrackList_UpdateAllExternalSurfaces()</code></div>
	<div class="e_func"><code>TrackList_UpdateAllExternalSurfaces()</code></div>
	<div class="l_func"><code>reaper.TrackList_UpdateAllExternalSurfaces()</code></div>
	<div class="p_func"><code>RPR_TrackList_UpdateAllExternalSurfaces()</code></div>
</div>

<div class="function_definition" id="Undo_BeginBlock">
	<div class="c_func"><code>void Undo_BeginBlock()</code></div>
	<div class="e_func"><code>Undo_BeginBlock()</code></div>
	<div class="l_func"><code>reaper.Undo_BeginBlock()</code></div>
	<div class="p_func"><code>RPR_Undo_BeginBlock()</code></div>
	<p>call to start a new block</p>
</div>

<div class="function_definition" id="Undo_BeginBlock2">
	<div class="c_func"><code>void Undo_BeginBlock2(ReaProject* proj)</code></div>
	<div class="e_func"><code>Undo_BeginBlock2(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code>reaper.Undo_BeginBlock2(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code>RPR_Undo_BeginBlock2(<em>ReaProject</em> proj)</code></div>
	<p>call to start a new block</p>
</div>

<div class="function_definition" id="Undo_CanRedo2">
	<div class="c_func"><code>const char* Undo_CanRedo2(ReaProject* proj)</code></div>
	<div class="e_func"><code>bool  Undo_CanRedo2(#retval, <em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>string</em> reaper.Undo_CanRedo2(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_Undo_CanRedo2(<em>ReaProject</em> proj)</code></div>
	<p>returns string of next action,if able,NULL if not</p>
</div>

<div class="function_definition" id="Undo_CanUndo2">
	<div class="c_func"><code>const char* Undo_CanUndo2(ReaProject* proj)</code></div>
	<div class="e_func"><code>bool  Undo_CanUndo2(#retval, <em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>string</em> reaper.Undo_CanUndo2(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>String</em>  RPR_Undo_CanUndo2(<em>ReaProject</em> proj)</code></div>
	<p>returns string of last action,if able,NULL if not</p>
</div>

<div class="function_definition" id="Undo_DoRedo2">
	<div class="c_func"><code>int Undo_DoRedo2(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>int </em> Undo_DoRedo2(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.Undo_DoRedo2(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_Undo_DoRedo2(<em>ReaProject</em> proj)</code></div>
	<p>nonzero if success</p>
</div>

<div class="function_definition" id="Undo_DoUndo2">
	<div class="c_func"><code>int Undo_DoUndo2(ReaProject* proj)</code></div>
	<div class="e_func"><code><em>int </em> Undo_DoUndo2(<em>ReaProject</em> proj)</code></div>
	<div class="l_func"><code><em>integer</em> reaper.Undo_DoUndo2(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code><em>Int</em>  RPR_Undo_DoUndo2(<em>ReaProject</em> proj)</code></div>
	<p>nonzero if success</p>
</div>

<div class="function_definition" id="Undo_EndBlock">
	<div class="c_func"><code>void Undo_EndBlock(const char* descchange, int extraflags)</code></div>
	<div class="e_func"><code>Undo_EndBlock("descchange", <em>int </em>extraflags)</code></div>
	<div class="l_func"><code>reaper.Undo_EndBlock(<em>string</em> descchange, <em>integer</em> extraflags)</code></div>
	<div class="p_func"><code>RPR_Undo_EndBlock(<em>String</em> descchange, <em>Int</em> extraflags)</code></div>
	<p>call to end the block,with extra flags if any,and a description</p>
</div>

<div class="function_definition" id="Undo_EndBlock2">
	<div class="c_func"><code>void Undo_EndBlock2(ReaProject* proj, const char* descchange, int extraflags)</code></div>
	<div class="e_func"><code>Undo_EndBlock2(<em>ReaProject</em> proj, "descchange", <em>int </em>extraflags)</code></div>
	<div class="l_func"><code>reaper.Undo_EndBlock2(<em>ReaProject</em> proj, <em>string</em> descchange, <em>integer</em> extraflags)</code></div>
	<div class="p_func"><code>RPR_Undo_EndBlock2(<em>ReaProject</em> proj, <em>String</em> descchange, <em>Int</em> extraflags)</code></div>
	<p>call to end the block,with extra flags if any,and a description</p>
</div>

<div class="function_definition" id="Undo_OnStateChange">
	<div class="c_func"><code>void Undo_OnStateChange(const char* descchange)</code></div>
	<div class="e_func"><code>Undo_OnStateChange("descchange")</code></div>
	<div class="l_func"><code>reaper.Undo_OnStateChange(<em>string</em> descchange)</code></div>
	<div class="p_func"><code>RPR_Undo_OnStateChange(<em>String</em> descchange)</code></div>
	<p>limited state change to items</p>
</div>

<div class="function_definition" id="Undo_OnStateChange2">
	<div class="c_func"><code>void Undo_OnStateChange2(ReaProject* proj, const char* descchange)</code></div>
	<div class="e_func"><code>Undo_OnStateChange2(<em>ReaProject</em> proj, "descchange")</code></div>
	<div class="l_func"><code>reaper.Undo_OnStateChange2(<em>ReaProject</em> proj, <em>string</em> descchange)</code></div>
	<div class="p_func"><code>RPR_Undo_OnStateChange2(<em>ReaProject</em> proj, <em>String</em> descchange)</code></div>
	<p>limited state change to items</p>
</div>

<div class="function_definition" id="Undo_OnStateChange_Item">
	<div class="c_func"><code>void Undo_OnStateChange_Item(ReaProject* proj, const char* name, MediaItem* item)</code></div>
	<div class="e_func"><code>Undo_OnStateChange_Item(<em>ReaProject</em> proj, "name", <em>MediaItem</em> item)</code></div>
	<div class="l_func"><code>reaper.Undo_OnStateChange_Item(<em>ReaProject</em> proj, <em>string</em> name, <em>MediaItem</em> item)</code></div>
	<div class="p_func"><code>RPR_Undo_OnStateChange_Item(<em>ReaProject</em> proj, <em>String</em> name, <em>MediaItem</em> item)</code></div>
</div>

<div class="function_definition" id="Undo_OnStateChangeEx">
	<div class="c_func"><code>void Undo_OnStateChangeEx(const char* descchange, int whichStates, int trackparm)</code></div>
	<div class="e_func"><code>Undo_OnStateChangeEx("descchange", <em>int </em>whichStates, <em>int </em>trackparm)</code></div>
	<div class="l_func"><code>reaper.Undo_OnStateChangeEx(<em>string</em> descchange, <em>integer</em> whichStates, <em>integer</em> trackparm)</code></div>
	<div class="p_func"><code>RPR_Undo_OnStateChangeEx(<em>String</em> descchange, <em>Int</em> whichStates, <em>Int</em> trackparm)</code></div>
	<p>trackparm=-1 by default,or if updating one fx chain,you can specify track index</p>
</div>

<div class="function_definition" id="Undo_OnStateChangeEx2">
	<div class="c_func"><code>void Undo_OnStateChangeEx2(ReaProject* proj, const char* descchange, int whichStates, int trackparm)</code></div>
	<div class="e_func"><code>Undo_OnStateChangeEx2(<em>ReaProject</em> proj, "descchange", <em>int </em>whichStates, <em>int </em>trackparm)</code></div>
	<div class="l_func"><code>reaper.Undo_OnStateChangeEx2(<em>ReaProject</em> proj, <em>string</em> descchange, <em>integer</em> whichStates, <em>integer</em> trackparm)</code></div>
	<div class="p_func"><code>RPR_Undo_OnStateChangeEx2(<em>ReaProject</em> proj, <em>String</em> descchange, <em>Int</em> whichStates, <em>Int</em> trackparm)</code></div>
	<p>trackparm=-1 by default,or if updating one fx chain,you can specify track index</p>
</div>

<div class="function_definition" id="UpdateArrange">
	<div class="c_func"><code>void UpdateArrange()</code></div>
	<div class="e_func"><code>UpdateArrange()</code></div>
	<div class="l_func"><code>reaper.UpdateArrange()</code></div>
	<div class="p_func"><code>RPR_UpdateArrange()</code></div>
	<p>Redraw the arrange view</p>
</div>

<div class="function_definition" id="UpdateItemInProject">
	<div class="c_func"><code>void UpdateItemInProject(MediaItem* item)</code></div>
	<div class="e_func"><code>UpdateItemInProject(<em>MediaItem</em> item)</code></div>
	<div class="l_func"><code>reaper.UpdateItemInProject(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code>RPR_UpdateItemInProject(<em>MediaItem</em> item)</code></div>
</div>

<div class="function_definition" id="UpdateTimeline">
	<div class="c_func"><code>void UpdateTimeline()</code></div>
	<div class="e_func"><code>UpdateTimeline()</code></div>
	<div class="l_func"><code>reaper.UpdateTimeline()</code></div>
	<div class="p_func"><code>RPR_UpdateTimeline()</code></div>
	<p>Redraw the arrange view and ruler</p>
</div>

<div class="function_definition" id="ValidatePtr">
	<div class="c_func"><code>bool ValidatePtr(void* pointer, const char* ctypename)</code></div>
	<div class="e_func"><code><em>bool </em> ValidatePtr(<em>void*</em> pointer, "ctypename")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.ValidatePtr(<em>identifier</em> pointer, <em>string</em> ctypename)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_ValidatePtr(<em>void</em> pointer, <em>String</em> ctypename)</code></div>
	<p>see <a href="#ValidatePtr2">ValidatePtr2</a></p>
</div>

<div class="function_definition" id="ValidatePtr2">
	<div class="c_func"><code>bool ValidatePtr2(ReaProject* proj, void* pointer, const char* ctypename)</code></div>
	<div class="e_func"><code><em>bool </em> ValidatePtr2(<em>ReaProject</em> proj, <em>void*</em> pointer, "ctypename")</code></div>
	<div class="l_func"><code><em>boolean</em> reaper.ValidatePtr2(<em>ReaProject</em> proj, <em>identifier</em> pointer, <em>string</em> ctypename)</code></div>
	<div class="p_func"><code><em>Boolean</em>  RPR_ValidatePtr2(<em>ReaProject</em> proj, <em>void</em> pointer, <em>String</em> ctypename)</code></div>
	<p>Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.</p>
</div>

<div class="function_definition" id="ViewPrefs">
	<div class="c_func"><code>void ViewPrefs(int page, const char* pageByName)</code></div>
	<div class="e_func"><code>ViewPrefs(<em>int </em>page, "pageByName")</code></div>
	<div class="l_func"><code>reaper.ViewPrefs(<em>integer</em> page, <em>string</em> pageByName)</code></div>
	<div class="p_func"><code>RPR_ViewPrefs(<em>Int</em> page, <em>String</em> pageByName)</code></div>
	<p>Opens the prefs to a page, use pageByName if page is 0.</p>
</div>

<div class="function_definition" id="BR_EnvAlloc">
	<div class="c_func"><code>BR_Envelope* BR_EnvAlloc(TrackEnvelope* envelope, bool takeEnvelopesUseProjectTime)</code></div>
	<div class="e_func"><code><em>BR_Envelope</em>  BR_EnvAlloc(<em>TrackEnvelope</em> envelope, <em>bool </em>takeEnvelopesUseProjectTime) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>BR_Envelope</em>  extension_api("BR_EnvAlloc", <em>TrackEnvelope</em> envelope, <em>bool </em>takeEnvelopesUseProjectTime) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>BR_Envelope</em> reaper.BR_EnvAlloc(<em>TrackEnvelope</em> envelope, <em>boolean</em> takeEnvelopesUseProjectTime)</code></div>
	<div class="p_func"><code><em>BR_Envelope</em>  BR_EnvAlloc(<em>TrackEnvelope</em> envelope, <em>Boolean</em> takeEnvelopesUseProjectTime)</code></div>
	<p>[BR] Allocate envelope object from track or take envelope pointer. Always call <a href="#BR_EnvFree">BR_EnvFree</a> when done to release the object and commit changes if needed.<br>
 takeEnvelopesUseProjectTime: take envelope points' positions are counted from take position, not project start time. If you want to work with project time instead, pass this as true.<br>
</p><p>
For further manipulation see <a href="#BR_EnvCountPoints">BR_EnvCountPoints</a>, <a href="#BR_EnvDeletePoint">BR_EnvDeletePoint</a>, <a href="#BR_EnvFind">BR_EnvFind</a>, <a href="#BR_EnvFindNext">BR_EnvFindNext</a>, <a href="#BR_EnvFindPrevious">BR_EnvFindPrevious</a>, <a href="#BR_EnvGetParentTake">BR_EnvGetParentTake</a>, <a href="#BR_EnvGetParentTrack">BR_EnvGetParentTrack</a>, <a href="#BR_EnvGetPoint">BR_EnvGetPoint</a>, <a href="#BR_EnvGetProperties">BR_EnvGetProperties</a>, <a href="#BR_EnvSetPoint">BR_EnvSetPoint</a>, <a href="#BR_EnvSetProperties">BR_EnvSetProperties</a>, <a href="#BR_EnvValueAtPos">BR_EnvValueAtPos</a>.</p>
</div>

<div class="function_definition" id="BR_EnvCountPoints">
	<div class="c_func"><code>int BR_EnvCountPoints(BR_Envelope* envelope)</code></div>
	<div class="e_func"><code><em>int </em> BR_EnvCountPoints(<em>BR_Envelope</em> envelope) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_EnvCountPoints", <em>BR_Envelope</em> envelope) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_EnvCountPoints(<em>BR_Envelope</em> envelope)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_EnvCountPoints(<em>BR_Envelope</em> envelope)</code></div>
	<p>[BR] Count envelope points in the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>.</p>
</div>

<div class="function_definition" id="BR_EnvDeletePoint">
	<div class="c_func"><code>bool BR_EnvDeletePoint(BR_Envelope* envelope, int id)</code></div>
	<div class="e_func"><code><em>bool </em> BR_EnvDeletePoint(<em>BR_Envelope</em> envelope, <em>int </em>id) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_EnvDeletePoint", <em>BR_Envelope</em> envelope, <em>int </em>id) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_EnvDeletePoint(<em>BR_Envelope</em> envelope, <em>integer</em> id)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_EnvDeletePoint(<em>BR_Envelope</em> envelope, <em>Int</em> id)</code></div>
	<p>[BR] Delete envelope point by index (zero-based) in the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. Returns true on success.</p>
</div>

<div class="function_definition" id="BR_EnvFind">
	<div class="c_func"><code>int BR_EnvFind(BR_Envelope* envelope, double position, double delta)</code></div>
	<div class="e_func"><code><em>int </em> BR_EnvFind(<em>BR_Envelope</em> envelope, position, delta) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_EnvFind", <em>BR_Envelope</em> envelope, position, delta) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_EnvFind(<em>BR_Envelope</em> envelope, <em>number</em> position, <em>number</em> delta)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_EnvFind(<em>BR_Envelope</em> envelope, <em>Float</em> position, <em>Float</em> delta)</code></div>
	<p>[BR] Find envelope point at time position in the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. Pass delta &gt; 0 to search surrounding range - in that case the closest point to position within delta will be searched for. Returns envelope point id (zero-based) on success or -1 on failure.</p>
</div>

<div class="function_definition" id="BR_EnvFindNext">
	<div class="c_func"><code>int BR_EnvFindNext(BR_Envelope* envelope, double position)</code></div>
	<div class="e_func"><code><em>int </em> BR_EnvFindNext(<em>BR_Envelope</em> envelope, position) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_EnvFindNext", <em>BR_Envelope</em> envelope, position) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_EnvFindNext(<em>BR_Envelope</em> envelope, <em>number</em> position)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_EnvFindNext(<em>BR_Envelope</em> envelope, <em>Float</em> position)</code></div>
	<p>[BR] Find next envelope point after time position in the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. Returns envelope point id (zero-based) on success or -1 on failure.</p>
</div>

<div class="function_definition" id="BR_EnvFindPrevious">
	<div class="c_func"><code>int BR_EnvFindPrevious(BR_Envelope* envelope, double position)</code></div>
	<div class="e_func"><code><em>int </em> BR_EnvFindPrevious(<em>BR_Envelope</em> envelope, position) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_EnvFindPrevious", <em>BR_Envelope</em> envelope, position) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_EnvFindPrevious(<em>BR_Envelope</em> envelope, <em>number</em> position)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_EnvFindPrevious(<em>BR_Envelope</em> envelope, <em>Float</em> position)</code></div>
	<p>[BR] Find previous envelope point before time position in the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. Returns envelope point id (zero-based) on success or -1 on failure.</p>
</div>

<div class="function_definition" id="BR_EnvFree">
	<div class="c_func"><code>bool BR_EnvFree(BR_Envelope* envelope, bool commit)</code></div>
	<div class="e_func"><code><em>bool </em> BR_EnvFree(<em>BR_Envelope</em> envelope, <em>bool </em>commit) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_EnvFree", <em>BR_Envelope</em> envelope, <em>bool </em>commit) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_EnvFree(<em>BR_Envelope</em> envelope, <em>boolean</em> commit)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_EnvFree(<em>BR_Envelope</em> envelope, <em>Boolean</em> commit)</code></div>
	<p>[BR] Free envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a> and commit changes if needed. Returns true if changes were committed successfully. Note that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false.</p>
</div>

<div class="function_definition" id="BR_EnvGetParentTake">
	<div class="c_func"><code>MediaItem_Take* BR_EnvGetParentTake(BR_Envelope* envelope)</code></div>
	<div class="e_func"><code><em>MediaItem_Take</em>  BR_EnvGetParentTake(<em>BR_Envelope</em> envelope) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MediaItem_Take</em>  extension_api("BR_EnvGetParentTake", <em>BR_Envelope</em> envelope) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MediaItem_Take</em> reaper.BR_EnvGetParentTake(<em>BR_Envelope</em> envelope)</code></div>
	<div class="p_func"><code><em>MediaItem_Take</em>  BR_EnvGetParentTake(<em>BR_Envelope</em> envelope)</code></div>
	<p>[BR] If envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a> is take envelope, returns parent media item take, otherwise NULL.</p>
</div>

<div class="function_definition" id="BR_EnvGetParentTrack">
	<div class="c_func"><code>MediaTrack* BR_EnvGetParentTrack(BR_Envelope* envelope)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  BR_EnvGetParentTrack(<em>BR_Envelope</em> envelope) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MediaTrack</em>  extension_api("BR_EnvGetParentTrack", <em>BR_Envelope</em> envelope) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.BR_EnvGetParentTrack(<em>BR_Envelope</em> envelope)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  BR_EnvGetParentTrack(<em>BR_Envelope</em> envelope)</code></div>
	<p>[BR] Get parent track of envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. If take envelope, returns NULL.</p>
</div>

<div class="function_definition" id="BR_EnvGetPoint">
	<div class="c_func"><code>bool BR_EnvGetPoint(BR_Envelope* envelope, int id, double* positionOut, double* valueOut, int* shapeOut, bool* selectedOut, double* bezierOut)</code></div>
	<div class="e_func"><code><em>bool </em> BR_EnvGetPoint(<em>BR_Envelope</em> envelope, <em>int </em>id, <em>&amp;</em>position, <em>&amp;</em>value, <em>int &amp;</em>shape, <em>bool &amp;</em>selected, <em>&amp;</em>bezier) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_EnvGetPoint", <em>BR_Envelope</em> envelope, <em>int </em>id, <em>&amp;</em>position, <em>&amp;</em>value, <em>int &amp;</em>shape, <em>bool &amp;</em>selected, <em>&amp;</em>bezier) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>position, <em>number </em>value, <em>integer </em>shape, <em>boolean </em>selected, <em>number </em>bezier = reaper.BR_EnvGetPoint(<em>BR_Envelope</em> envelope, <em>integer</em> id)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>BR_Envelope</em> envelope, <em>Int</em> id, <em>Float</em> positionOut, <em>Float</em> valueOut, <em>Int</em> shapeOut, <em>Boolean</em> selectedOut, <em>Float</em> bezierOut) = BR_EnvGetPoint(envelope, id, positionOut, valueOut, shapeOut, selectedOut, bezierOut)</code></div>
	<p>[BR] Get envelope point by id (zero-based) from the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. Returns true on success.</p>
</div>

<div class="function_definition" id="BR_EnvGetProperties">
	<div class="c_func"><code>void BR_EnvGetProperties(BR_Envelope* envelope, bool* activeOut, bool* visibleOut, bool* armedOut, bool* inLaneOut, int* laneHeightOut, int* defaultShapeOut, double* minValueOut, double* maxValueOut, double* centerValueOut, int* typeOut, bool* faderScalingOut, int* automationItemsOptionsOutOptional)</code></div>
	<div class="e_func"><code>BR_EnvGetProperties(<em>BR_Envelope</em> envelope, <em>bool &amp;</em>active, <em>bool &amp;</em>visible, <em>bool &amp;</em>armed, <em>bool &amp;</em>inLane, <em>int &amp;</em>laneHeight, <em>int &amp;</em>defaultShape, <em>&amp;</em>minValue, <em>&amp;</em>maxValue, <em>&amp;</em>centerValue, <em>int &amp;</em>type, <em>bool &amp;</em>faderScaling, <em>optional int &amp;</em>automationItemsOptions) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_EnvGetProperties", <em>BR_Envelope</em> envelope, <em>bool &amp;</em>active, <em>bool &amp;</em>visible, <em>bool &amp;</em>armed, <em>bool &amp;</em>inLane, <em>int &amp;</em>laneHeight, <em>int &amp;</em>defaultShape, <em>&amp;</em>minValue, <em>&amp;</em>maxValue, <em>&amp;</em>centerValue, <em>int &amp;</em>type, <em>bool &amp;</em>faderScaling, <em>optional int &amp;</em>automationItemsOptions) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean </em>active, <em>boolean </em>visible, <em>boolean </em>armed, <em>boolean </em>inLane, <em>integer </em>laneHeight, <em>integer </em>defaultShape, <em>number </em>minValue, <em>number </em>maxValue, <em>number </em>centerValue, <em>integer </em>type, <em>boolean </em>faderScaling, <em>optional integer </em>automationItemsOptions = reaper.BR_EnvGetProperties(<em>BR_Envelope</em> envelope)</code></div>
	<div class="p_func"><code>(<em>BR_Envelope</em> envelope, <em>Boolean</em> activeOut, <em>Boolean</em> visibleOut, <em>Boolean</em> armedOut, <em>Boolean</em> inLaneOut, <em>Int</em> laneHeightOut, <em>Int</em> defaultShapeOut, <em>Float</em> minValueOut, <em>Float</em> maxValueOut, <em>Float</em> centerValueOut, <em>Int</em> typeOut, <em>Boolean</em> faderScalingOut, <em>Int</em> automationItemsOptionsOutOptional) = BR_EnvGetProperties(envelope, activeOut, visibleOut, armedOut, inLaneOut, laneHeightOut, defaultShapeOut, minValueOut, maxValueOut, centerValueOut, typeOut, faderScalingOut, automationItemsOptionsOutOptional)</code></div>
	<p>[BR] Get envelope properties for the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>.<br>
</p><p>
active: true if envelope is active<br>
visible: true if envelope is visible<br>
armed: true if envelope is armed<br>
inLane: true if envelope has it's own envelope lane<br>
laneHeight: envelope lane override height. 0 for none, otherwise size in pixels<br>
defaultShape: default point shape: 0-&gt;Linear, 1-&gt;Square, 2-&gt;Slow start/end, 3-&gt;Fast start, 4-&gt;Fast end, 5-&gt;Bezier<br>
minValue: minimum envelope value<br>
maxValue: maximum envelope value<br>
type: envelope type: 0-&gt;Volume, 1-&gt;Volume (Pre-FX), 2-&gt;Pan, 3-&gt;Pan (Pre-FX), 4-&gt;Width, 5-&gt;Width (Pre-FX), 6-&gt;Mute, 7-&gt;Pitch, 8-&gt;Playrate, 9-&gt;Tempo map, 10-&gt;Parameter<br>
faderScaling: true if envelope uses fader scaling<br>
automationItemsOptions: -1-&gt;project default, &amp;1=0-&gt;don't attach to underl. env., &amp;1-&gt;attach to underl. env. on right side,  &amp;2-&gt;attach to underl. env. on both sides, &amp;4: bypass underl. env.</p>
</div>

<div class="function_definition" id="BR_EnvSetPoint">
	<div class="c_func"><code>bool BR_EnvSetPoint(BR_Envelope* envelope, int id, double position, double value, int shape, bool selected, double bezier)</code></div>
	<div class="e_func"><code><em>bool </em> BR_EnvSetPoint(<em>BR_Envelope</em> envelope, <em>int </em>id, position, value, <em>int </em>shape, <em>bool </em>selected, bezier) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_EnvSetPoint", <em>BR_Envelope</em> envelope, <em>int </em>id, position, value, <em>int </em>shape, <em>bool </em>selected, bezier) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_EnvSetPoint(<em>BR_Envelope</em> envelope, <em>integer</em> id, <em>number</em> position, <em>number</em> value, <em>integer</em> shape, <em>boolean</em> selected, <em>number</em> bezier)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_EnvSetPoint(<em>BR_Envelope</em> envelope, <em>Int</em> id, <em>Float</em> position, <em>Float</em> value, <em>Int</em> shape, <em>Boolean</em> selected, <em>Float</em> bezier)</code></div>
	<p>[BR] Set envelope point by id (zero-based) in the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. To create point instead, pass id = -1. Note that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see <a href="#BR_EnvSortPoints">BR_EnvSortPoints</a>.<br>
Returns true on success.</p>
</div>

<div class="function_definition" id="BR_EnvSetProperties">
	<div class="c_func"><code>void BR_EnvSetProperties(BR_Envelope* envelope, bool active, bool visible, bool armed, bool inLane, int laneHeight, int defaultShape, bool faderScaling, int* automationItemsOptionsInOptional)</code></div>
	<div class="e_func"><code>BR_EnvSetProperties(<em>BR_Envelope</em> envelope, <em>bool </em>active, <em>bool </em>visible, <em>bool </em>armed, <em>bool </em>inLane, <em>int </em>laneHeight, <em>int </em>defaultShape, <em>bool </em>faderScaling, <em>optional int</em> automationItemsOptionsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_EnvSetProperties", <em>BR_Envelope</em> envelope, <em>bool </em>active, <em>bool </em>visible, <em>bool </em>armed, <em>bool </em>inLane, <em>int </em>laneHeight, <em>int </em>defaultShape, <em>bool </em>faderScaling, <em>optional int</em> automationItemsOptionsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.BR_EnvSetProperties(<em>BR_Envelope</em> envelope, <em>boolean</em> active, <em>boolean</em> visible, <em>boolean</em> armed, <em>boolean</em> inLane, <em>integer</em> laneHeight, <em>integer</em> defaultShape, <em>boolean</em> faderScaling, <em>optional integer</em> automationItemsOptionsIn)</code></div>
	<div class="p_func"><code>(<em>BR_Envelope</em> envelope, <em>Boolean</em> active, <em>Boolean</em> visible, <em>Boolean</em> armed, <em>Boolean</em> inLane, <em>Int</em> laneHeight, <em>Int</em> defaultShape, <em>Boolean</em> faderScaling, <em>Int</em> automationItemsOptionsInOptional) = BR_EnvSetProperties(envelope, active, visible, armed, inLane, laneHeight, defaultShape, faderScaling, automationItemsOptionsInOptional)</code></div>
	<p>[BR] Set envelope properties for the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>. For parameter description see <a href="#BR_EnvGetProperties">BR_EnvGetProperties</a>.<br>
Setting automationItemsOptions requires REAPER 5.979+.</p>
</div>

<div class="function_definition" id="BR_EnvSortPoints">
	<div class="c_func"><code>void BR_EnvSortPoints(BR_Envelope* envelope)</code></div>
	<div class="e_func"><code>BR_EnvSortPoints(<em>BR_Envelope</em> envelope) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_EnvSortPoints", <em>BR_Envelope</em> envelope) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.BR_EnvSortPoints(<em>BR_Envelope</em> envelope)</code></div>
	<div class="p_func"><code>BR_EnvSortPoints(<em>BR_Envelope</em> envelope)</code></div>
	<p>[BR] Sort envelope points by position. The only reason to call this is if sorted points are explicitly needed after editing them with <a href="#BR_EnvSetPoint">BR_EnvSetPoint</a>. Note that you do not have to call this before doing <a href="#BR_EnvFree">BR_EnvFree</a> since it does handle unsorted points too.</p>
</div>

<div class="function_definition" id="BR_EnvValueAtPos">
	<div class="c_func"><code>double BR_EnvValueAtPos(BR_Envelope* envelope, double position)</code></div>
	<div class="e_func"><code><em>double </em> BR_EnvValueAtPos(<em>BR_Envelope</em> envelope, position) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("BR_EnvValueAtPos", <em>BR_Envelope</em> envelope, position) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.BR_EnvValueAtPos(<em>BR_Envelope</em> envelope, <em>number</em> position)</code></div>
	<div class="p_func"><code><em>Float</em>  BR_EnvValueAtPos(<em>BR_Envelope</em> envelope, <em>Float</em> position)</code></div>
	<p>[BR] Get envelope value at time position for the envelope object allocated with <a href="#BR_EnvAlloc">BR_EnvAlloc</a>.</p>
</div>

<div class="function_definition" id="BR_GetArrangeView">
	<div class="c_func"><code>void BR_GetArrangeView(ReaProject* proj, double* startTimeOut, double* endTimeOut)</code></div>
	<div class="e_func"><code>BR_GetArrangeView(<em>ReaProject</em> proj, <em>&amp;</em>startTime, <em>&amp;</em>endTime) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_GetArrangeView", <em>ReaProject</em> proj, <em>&amp;</em>startTime, <em>&amp;</em>endTime) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>startTime, <em>number </em>endTime = reaper.BR_GetArrangeView(<em>ReaProject</em> proj)</code></div>
	<div class="p_func"><code>(<em>ReaProject</em> proj, <em>Float</em> startTimeOut, <em>Float</em> endTimeOut) = BR_GetArrangeView(proj, startTimeOut, endTimeOut)</code></div>
	<p>[BR] Deprecated, see <a href="#GetSet_ArrangeView2">GetSet_ArrangeView2</a> (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see <a href="#BR_SetArrangeView">BR_SetArrangeView</a>.</p>
</div>

<div class="function_definition" id="BR_GetClosestGridDivision">
	<div class="c_func"><code>double BR_GetClosestGridDivision(double position)</code></div>
	<div class="e_func"><code><em>double </em> BR_GetClosestGridDivision(position) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("BR_GetClosestGridDivision", position) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.BR_GetClosestGridDivision(<em>number</em> position)</code></div>
	<div class="p_func"><code><em>Float</em>  BR_GetClosestGridDivision(<em>Float</em> position)</code></div>
	<p>[BR] Get closest grid division to position. Note that this functions is different from <a href="#SnapToGrid">SnapToGrid</a> in two regards. SnapToGrid() needs snap enabled to work and this one works always. Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. For more grid division functions, see <a href="#BR_GetNextGridDivision">BR_GetNextGridDivision</a> and <a href="#BR_GetPrevGridDivision">BR_GetPrevGridDivision</a>.</p>
</div>

<div class="function_definition" id="BR_GetCurrentTheme">
	<div class="c_func"><code>void BR_GetCurrentTheme(char* themePathOut, int themePathOut_sz, char* themeNameOut, int themeNameOut_sz)</code></div>
	<div class="e_func"><code>BR_GetCurrentTheme(#themePath, #themeName) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_GetCurrentTheme", #themePath, #themeName) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>themePath, <em>string </em>themeName = reaper.BR_GetCurrentTheme()</code></div>
	<div class="p_func"><code>(<em>String</em> themePathOut, <em>Int</em> themePathOut_sz, <em>String</em> themeNameOut, <em>Int</em> themeNameOut_sz) = BR_GetCurrentTheme(themePathOut, themePathOut_sz, themeNameOut, themeNameOut_sz)</code></div>
	<p>[BR] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension</p>
</div>

<div class="function_definition" id="BR_GetMediaItemByGUID">
	<div class="c_func"><code>MediaItem* BR_GetMediaItemByGUID(ReaProject* proj, const char* guidStringIn)</code></div>
	<div class="e_func"><code><em>MediaItem</em>  BR_GetMediaItemByGUID(<em>ReaProject</em> proj, "guidStringIn") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MediaItem</em>  extension_api("BR_GetMediaItemByGUID", <em>ReaProject</em> proj, "guidStringIn") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MediaItem</em> reaper.BR_GetMediaItemByGUID(<em>ReaProject</em> proj, <em>string</em> guidStringIn)</code></div>
	<div class="p_func"><code><em>MediaItem</em>  BR_GetMediaItemByGUID(<em>ReaProject</em> proj, <em>String</em> guidStringIn)</code></div>
	<p>[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see <a href="#BR_GetMediaItemGUID">BR_GetMediaItemGUID</a>.</p>
</div>

<div class="function_definition" id="BR_GetMediaItemGUID">
	<div class="c_func"><code>void BR_GetMediaItemGUID(MediaItem* item, char* guidStringOut, int guidStringOut_sz)</code></div>
	<div class="e_func"><code>BR_GetMediaItemGUID(<em>MediaItem</em> item, #guidString) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_GetMediaItemGUID", <em>MediaItem</em> item, #guidString) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>guidString = reaper.BR_GetMediaItemGUID(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code>(<em>MediaItem</em> item, <em>String</em> guidStringOut, <em>Int</em> guidStringOut_sz) = BR_GetMediaItemGUID(item, guidStringOut, guidStringOut_sz)</code></div>
	<p>[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see <a href="#BR_GetMediaItemByGUID">BR_GetMediaItemByGUID</a>.</p>
</div>

<div class="function_definition" id="BR_GetMediaItemImageResource">
	<div class="c_func"><code>bool BR_GetMediaItemImageResource(MediaItem* item, char* imageOut, int imageOut_sz, int* imageFlagsOut)</code></div>
	<div class="e_func"><code><em>bool </em> BR_GetMediaItemImageResource(<em>MediaItem</em> item, #image, <em>int &amp;</em>imageFlags) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_GetMediaItemImageResource", <em>MediaItem</em> item, #image, <em>int &amp;</em>imageFlags) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>image, <em>integer </em>imageFlags = reaper.BR_GetMediaItemImageResource(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem</em> item, <em>String</em> imageOut, <em>Int</em> imageOut_sz, <em>Int</em> imageFlagsOut) = BR_GetMediaItemImageResource(item, imageOut, imageOut_sz, imageFlagsOut)</code></div>
	<p>[BR] Get currently loaded image resource and its flags for a given item. Returns false if there is no image resource set. To set image resource, see <a href="#BR_SetMediaItemImageResource">BR_SetMediaItemImageResource</a>.</p>
</div>

<div class="function_definition" id="BR_GetMediaItemTakeGUID">
	<div class="c_func"><code>void BR_GetMediaItemTakeGUID(MediaItem_Take* take, char* guidStringOut, int guidStringOut_sz)</code></div>
	<div class="e_func"><code>BR_GetMediaItemTakeGUID(<em>MediaItem_Take</em> take, #guidString) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_GetMediaItemTakeGUID", <em>MediaItem_Take</em> take, #guidString) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>guidString = reaper.BR_GetMediaItemTakeGUID(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code>(<em>MediaItem_Take</em> take, <em>String</em> guidStringOut, <em>Int</em> guidStringOut_sz) = BR_GetMediaItemTakeGUID(take, guidStringOut, guidStringOut_sz)</code></div>
	<p>[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see <a href="#SNM_GetMediaItemTakeByGUID">SNM_GetMediaItemTakeByGUID</a>.</p>
</div>

<div class="function_definition" id="BR_GetMediaSourceProperties">
	<div class="c_func"><code>bool BR_GetMediaSourceProperties(MediaItem_Take* take, bool* sectionOut, double* startOut, double* lengthOut, double* fadeOut, bool* reverseOut)</code></div>
	<div class="e_func"><code><em>bool </em> BR_GetMediaSourceProperties(<em>MediaItem_Take</em> take, <em>bool &amp;</em>section, <em>&amp;</em>start, <em>&amp;</em>length, <em>&amp;</em>fade, <em>bool &amp;</em>reverse) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_GetMediaSourceProperties", <em>MediaItem_Take</em> take, <em>bool &amp;</em>section, <em>&amp;</em>start, <em>&amp;</em>length, <em>&amp;</em>fade, <em>bool &amp;</em>reverse) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>section, <em>number </em>start, <em>number </em>length, <em>number </em>fade, <em>boolean </em>reverse = reaper.BR_GetMediaSourceProperties(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Boolean</em> sectionOut, <em>Float</em> startOut, <em>Float</em> lengthOut, <em>Float</em> fadeOut, <em>Boolean</em> reverseOut) = BR_GetMediaSourceProperties(take, sectionOut, startOut, lengthOut, fadeOut, reverseOut)</code></div>
	<p>[BR] Get take media source properties as they appear in <em>Item properties</em>. Returns false if take can't have them (MIDI items etc.).<br>
To set source properties, see <a href="#BR_SetMediaSourceProperties">BR_SetMediaSourceProperties</a>.</p>
</div>

<div class="function_definition" id="BR_GetMediaTrackByGUID">
	<div class="c_func"><code>MediaTrack* BR_GetMediaTrackByGUID(ReaProject* proj, const char* guidStringIn)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  BR_GetMediaTrackByGUID(<em>ReaProject</em> proj, "guidStringIn") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MediaTrack</em>  extension_api("BR_GetMediaTrackByGUID", <em>ReaProject</em> proj, "guidStringIn") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.BR_GetMediaTrackByGUID(<em>ReaProject</em> proj, <em>string</em> guidStringIn)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  BR_GetMediaTrackByGUID(<em>ReaProject</em> proj, <em>String</em> guidStringIn)</code></div>
	<p>[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see <a href="#GetSetMediaTrackInfo_String">GetSetMediaTrackInfo_String</a>.</p>
</div>

<div class="function_definition" id="BR_GetMediaTrackFreezeCount">
	<div class="c_func"><code>int BR_GetMediaTrackFreezeCount(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>int </em> BR_GetMediaTrackFreezeCount(<em>MediaTrack</em> track) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_GetMediaTrackFreezeCount", <em>MediaTrack</em> track) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_GetMediaTrackFreezeCount(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_GetMediaTrackFreezeCount(<em>MediaTrack</em> track)</code></div>
	<p>[BR] Get media track freeze count (if track isn't frozen at all, returns 0).</p>
</div>

<div class="function_definition" id="BR_GetMediaTrackGUID">
	<div class="c_func"><code>void BR_GetMediaTrackGUID(MediaTrack* track, char* guidStringOut, int guidStringOut_sz)</code></div>
	<div class="e_func"><code>BR_GetMediaTrackGUID(<em>MediaTrack</em> track, #guidString) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_GetMediaTrackGUID", <em>MediaTrack</em> track, #guidString) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>guidString = reaper.BR_GetMediaTrackGUID(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code>(<em>MediaTrack</em> track, <em>String</em> guidStringOut, <em>Int</em> guidStringOut_sz) = BR_GetMediaTrackGUID(track, guidStringOut, guidStringOut_sz)</code></div>
	<p>[BR] Deprecated, see <a href="#GetSetMediaTrackInfo_String">GetSetMediaTrackInfo_String</a> (v5.95+). Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see <a href="#BR_GetMediaTrackByGUID">BR_GetMediaTrackByGUID</a>.</p>
</div>

<div class="function_definition" id="BR_GetMediaTrackLayouts">
	<div class="c_func"><code>void BR_GetMediaTrackLayouts(MediaTrack* track, char* mcpLayoutNameOut, int mcpLayoutNameOut_sz, char* tcpLayoutNameOut, int tcpLayoutNameOut_sz)</code></div>
	<div class="e_func"><code>BR_GetMediaTrackLayouts(<em>MediaTrack</em> track, #mcpLayoutName, #tcpLayoutName) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_GetMediaTrackLayouts", <em>MediaTrack</em> track, #mcpLayoutName, #tcpLayoutName) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>mcpLayoutName, <em>string </em>tcpLayoutName = reaper.BR_GetMediaTrackLayouts(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code>(<em>MediaTrack</em> track, <em>String</em> mcpLayoutNameOut, <em>Int</em> mcpLayoutNameOut_sz, <em>String</em> tcpLayoutNameOut, <em>Int</em> tcpLayoutNameOut_sz) = BR_GetMediaTrackLayouts(track, mcpLayoutNameOut, mcpLayoutNameOut_sz, tcpLayoutNameOut, tcpLayoutNameOut_sz)</code></div>
	<p>[BR] Deprecated, see <a href="#GetSetMediaTrackInfo">GetSetMediaTrackInfo</a> (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string ("") means that layout is set to the default layout. To set media track layouts, see <a href="#BR_SetMediaTrackLayouts">BR_SetMediaTrackLayouts</a>.</p>
</div>

<div class="function_definition" id="BR_GetMediaTrackSendInfo_Envelope">
	<div class="c_func"><code>TrackEnvelope* BR_GetMediaTrackSendInfo_Envelope(MediaTrack* track, int category, int sendidx, int envelopeType)</code></div>
	<div class="e_func"><code><em>TrackEnvelope</em>  BR_GetMediaTrackSendInfo_Envelope(<em>MediaTrack</em> track, <em>int </em>category, <em>int </em>sendidx, <em>int </em>envelopeType) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>TrackEnvelope</em>  extension_api("BR_GetMediaTrackSendInfo_Envelope", <em>MediaTrack</em> track, <em>int </em>category, <em>int </em>sendidx, <em>int </em>envelopeType) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>TrackEnvelope</em> reaper.BR_GetMediaTrackSendInfo_Envelope(<em>MediaTrack</em> track, <em>integer</em> category, <em>integer</em> sendidx, <em>integer</em> envelopeType)</code></div>
	<div class="p_func"><code><em>TrackEnvelope</em>  BR_GetMediaTrackSendInfo_Envelope(<em>MediaTrack</em> track, <em>Int</em> category, <em>Int</em> sendidx, <em>Int</em> envelopeType)</code></div>
	<p>[BR] Get track envelope for send/receive/hardware output.<br>
</p><p>
category is &lt;0 for receives, 0=sends, &gt;0 for hardware outputs<br>
sendidx is zero-based (see <a href="#GetTrackNumSends">GetTrackNumSends</a> to count track sends/receives/hardware outputs)<br>
envelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)<br>
</p><p>
Note: To get or set other send attributes, see <a href="#BR_GetSetTrackSendInfo">BR_GetSetTrackSendInfo</a> and <a href="#BR_GetMediaTrackSendInfo_Track">BR_GetMediaTrackSendInfo_Track</a>.</p>
</div>

<div class="function_definition" id="BR_GetMediaTrackSendInfo_Track">
	<div class="c_func"><code>MediaTrack* BR_GetMediaTrackSendInfo_Track(MediaTrack* track, int category, int sendidx, int trackType)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  BR_GetMediaTrackSendInfo_Track(<em>MediaTrack</em> track, <em>int </em>category, <em>int </em>sendidx, <em>int </em>trackType) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MediaTrack</em>  extension_api("BR_GetMediaTrackSendInfo_Track", <em>MediaTrack</em> track, <em>int </em>category, <em>int </em>sendidx, <em>int </em>trackType) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.BR_GetMediaTrackSendInfo_Track(<em>MediaTrack</em> track, <em>integer</em> category, <em>integer</em> sendidx, <em>integer</em> trackType)</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  BR_GetMediaTrackSendInfo_Track(<em>MediaTrack</em> track, <em>Int</em> category, <em>Int</em> sendidx, <em>Int</em> trackType)</code></div>
	<p>[BR] Get source or destination media track for send/receive.<br>
</p><p>
category is &lt;0 for receives, 0=sends<br>
sendidx is zero-based (see <a href="#GetTrackNumSends">GetTrackNumSends</a> to count track sends/receives)<br>
trackType determines which track is returned (0=source track, 1=destination track)<br>
</p><p>
Note: To get or set other send attributes, see <a href="#BR_GetSetTrackSendInfo">BR_GetSetTrackSendInfo</a> and <a href="#BR_GetMediaTrackSendInfo_Envelope">BR_GetMediaTrackSendInfo_Envelope</a>.</p>
</div>

<div class="function_definition" id="BR_GetMidiSourceLenPPQ">
	<div class="c_func"><code>double BR_GetMidiSourceLenPPQ(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>double </em> BR_GetMidiSourceLenPPQ(<em>MediaItem_Take</em> take) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("BR_GetMidiSourceLenPPQ", <em>MediaItem_Take</em> take) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.BR_GetMidiSourceLenPPQ(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>Float</em>  BR_GetMidiSourceLenPPQ(<em>MediaItem_Take</em> take)</code></div>
	<p>[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.</p>
</div>

<div class="function_definition" id="BR_GetMidiTakePoolGUID">
	<div class="c_func"><code>bool BR_GetMidiTakePoolGUID(MediaItem_Take* take, char* guidStringOut, int guidStringOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> BR_GetMidiTakePoolGUID(<em>MediaItem_Take</em> take, #guidString) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_GetMidiTakePoolGUID", <em>MediaItem_Take</em> take, #guidString) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>guidString = reaper.BR_GetMidiTakePoolGUID(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>String</em> guidStringOut, <em>Int</em> guidStringOut_sz) = BR_GetMidiTakePoolGUID(take, guidStringOut, guidStringOut_sz)</code></div>
	<p>[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.</p>
</div>

<div class="function_definition" id="BR_GetMidiTakeTempoInfo">
	<div class="c_func"><code>bool BR_GetMidiTakeTempoInfo(MediaItem_Take* take, bool* ignoreProjTempoOut, double* bpmOut, int* numOut, int* denOut)</code></div>
	<div class="e_func"><code><em>bool </em> BR_GetMidiTakeTempoInfo(<em>MediaItem_Take</em> take, <em>bool &amp;</em>ignoreProjTempo, <em>&amp;</em>bpm, <em>int &amp;</em>num, <em>int &amp;</em>den) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_GetMidiTakeTempoInfo", <em>MediaItem_Take</em> take, <em>bool &amp;</em>ignoreProjTempo, <em>&amp;</em>bpm, <em>int &amp;</em>num, <em>int &amp;</em>den) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>ignoreProjTempo, <em>number </em>bpm, <em>integer </em>num, <em>integer </em>den = reaper.BR_GetMidiTakeTempoInfo(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Boolean</em> ignoreProjTempoOut, <em>Float</em> bpmOut, <em>Int</em> numOut, <em>Int</em> denOut) = BR_GetMidiTakeTempoInfo(take, ignoreProjTempoOut, bpmOut, numOut, denOut)</code></div>
	<p>[BR] Get "ignore project tempo" information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false.</p>
</div>

<div class="function_definition" id="BR_GetMouseCursorContext">
	<div class="c_func"><code>void BR_GetMouseCursorContext(char* windowOut, int windowOut_sz, char* segmentOut, int segmentOut_sz, char* detailsOut, int detailsOut_sz)</code></div>
	<div class="e_func"><code>BR_GetMouseCursorContext(#window, #segment, #details) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_GetMouseCursorContext", #window, #segment, #details) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>window, <em>string </em>segment, <em>string </em>details = reaper.BR_GetMouseCursorContext()</code></div>
	<div class="p_func"><code>(<em>String</em> windowOut, <em>Int</em> windowOut_sz, <em>String</em> segmentOut, <em>Int</em> segmentOut_sz, <em>String</em> detailsOut, <em>Int</em> detailsOut_sz) = BR_GetMouseCursorContext(windowOut, windowOut_sz, segmentOut, segmentOut_sz, detailsOut, detailsOut_sz)</code></div>
	<p>[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.<br>
</p><p>
To get more info on stuff that was found under mouse cursor see <a href="#BR_GetMouseCursorContext_Envelope">BR_GetMouseCursorContext_Envelope</a>, <a href="#BR_GetMouseCursorContext_Item">BR_GetMouseCursorContext_Item</a>, <a href="#BR_GetMouseCursorContext_MIDI">BR_GetMouseCursorContext_MIDI</a>, <a href="#BR_GetMouseCursorContext_Position">BR_GetMouseCursorContext_Position</a>, <a href="#BR_GetMouseCursorContext_Take">BR_GetMouseCursorContext_Take</a>, <a href="#BR_GetMouseCursorContext_Track">BR_GetMouseCursorContext_Track</a> <br>
</p>
<table><tr><th style="width:100px">Window</th> <th style="width:100px">Segment</th> <th style="width:300px">Details</th>                                           </tr><tr><th rowspan="1"> unknown     </th>    <td> ""        </td>   <td> ""                                                           </td> </tr><tr><th rowspan="4"> ruler       </th>    <td> region_lane </td>   <td> ""                                                           </td> </tr><tr>                                                           <td> marker_lane </td>   <td> ""                                                           </td> </tr><tr>                                                           <td> tempo_lane  </td>   <td> ""                                                           </td> </tr><tr>                                                           <td> timeline    </td>   <td> ""                                                           </td> </tr><tr><th rowspan="1"> transport   </th>    <td> ""        </td>   <td> ""                                                           </td> </tr><tr><th rowspan="3"> tcp         </th>    <td> track       </td>   <td> ""                                                           </td> </tr><tr>                                                           <td> envelope    </td>   <td> ""                                                           </td> </tr><tr>                                                           <td> empty       </td>   <td> ""                                                           </td> </tr><tr><th rowspan="2"> mcp         </th>    <td> track       </td>   <td> ""                                                           </td> </tr><tr>                                                           <td> empty       </td>   <td> ""                                                           </td> </tr><tr><th rowspan="3"> arrange     </th>    <td> track       </td>   <td> empty,<br>item, item_stretch_marker,<br>env_point, env_segment </td> </tr><tr>                                                           <td> envelope    </td>   <td> empty, env_point, env_segment                                  </td> </tr><tr>                                                           <td> empty       </td>   <td> ""                                                           </td> </tr><tr><th rowspan="5"> midi_editor </th>    <td> unknown     </td>   <td> ""                                                           </td> </tr><tr>                                                           <td> ruler       </td>   <td> ""                                                           </td> </tr><tr>                                                           <td> piano       </td>   <td> ""                                                           </td> </tr><tr>                                                           <td> notes       </td>   <td> ""                                                           </td> </tr><tr>                                                           <td> cc_lane     </td>   <td> cc_selector, cc_lane                                           </td> </tr></table>
</div>

<div class="function_definition" id="BR_GetMouseCursorContext_Envelope">
	<div class="c_func"><code>TrackEnvelope* BR_GetMouseCursorContext_Envelope(bool* takeEnvelopeOut)</code></div>
	<div class="e_func"><code><em>TrackEnvelope</em>  BR_GetMouseCursorContext_Envelope(<em>bool &amp;</em>takeEnvelope) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>TrackEnvelope</em>  extension_api("BR_GetMouseCursorContext_Envelope", <em>bool &amp;</em>takeEnvelope) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>TrackEnvelope</em> retval, <em>boolean </em>takeEnvelope = reaper.BR_GetMouseCursorContext_Envelope()</code></div>
	<div class="p_func"><code>(<em>TrackEnvelope</em> retval, <em>Boolean</em> takeEnvelopeOut) = BR_GetMouseCursorContext_Envelope(takeEnvelopeOut)</code></div>
	<p>[BR] Returns envelope that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>. In case the envelope belongs to take, takeEnvelope will be true.</p>
</div>

<div class="function_definition" id="BR_GetMouseCursorContext_Item">
	<div class="c_func"><code>MediaItem* BR_GetMouseCursorContext_Item()</code></div>
	<div class="e_func"><code><em>MediaItem</em>  BR_GetMouseCursorContext_Item() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MediaItem</em>  extension_api("BR_GetMouseCursorContext_Item") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MediaItem</em> reaper.BR_GetMouseCursorContext_Item()</code></div>
	<div class="p_func"><code><em>MediaItem</em>  BR_GetMouseCursorContext_Item()</code></div>
	<p>[BR] Returns item under mouse cursor that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>. Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item.</p>
</div>

<div class="function_definition" id="BR_GetMouseCursorContext_MIDI">
	<div class="c_func"><code>void* BR_GetMouseCursorContext_MIDI(bool* inlineEditorOut, int* noteRowOut, int* ccLaneOut, int* ccLaneValOut, int* ccLaneIdOut)</code></div>
	<div class="e_func"><code><em>void*</em>  BR_GetMouseCursorContext_MIDI(<em>bool &amp;</em>inlineEditor, <em>int &amp;</em>noteRow, <em>int &amp;</em>ccLane, <em>int &amp;</em>ccLaneVal, <em>int &amp;</em>ccLaneId) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("BR_GetMouseCursorContext_MIDI", <em>bool &amp;</em>inlineEditor, <em>int &amp;</em>noteRow, <em>int &amp;</em>ccLane, <em>int &amp;</em>ccLaneVal, <em>int &amp;</em>ccLaneId) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> retval, <em>boolean </em>inlineEditor, <em>integer </em>noteRow, <em>integer </em>ccLane, <em>integer </em>ccLaneVal, <em>integer </em>ccLaneId = reaper.BR_GetMouseCursorContext_MIDI()</code></div>
	<div class="p_func"><code>(<em>void</em> retval, <em>Boolean</em> inlineEditorOut, <em>Int</em> noteRowOut, <em>Int</em> ccLaneOut, <em>Int</em> ccLaneValOut, <em>Int</em> ccLaneIdOut) = BR_GetMouseCursorContext_MIDI(inlineEditorOut, noteRowOut, ccLaneOut, ccLaneValOut, ccLaneIdOut)</code></div>
	<p>[BR] Returns midi editor under mouse cursor that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>.<br>
</p><p>
inlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)<br>
noteRow: note row or piano key under mouse cursor (0-127)<br>
ccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events)<br>
ccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)<br>
ccLaneId: lane position, counting from the top (0 based)<br>
</p><p>
Note: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1</p>
</div>

<div class="function_definition" id="BR_GetMouseCursorContext_Position">
	<div class="c_func"><code>double BR_GetMouseCursorContext_Position()</code></div>
	<div class="e_func"><code><em>double </em> BR_GetMouseCursorContext_Position() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("BR_GetMouseCursorContext_Position") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.BR_GetMouseCursorContext_Position()</code></div>
	<div class="p_func"><code><em>Float</em>  BR_GetMouseCursorContext_Position()</code></div>
	<p>[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>.</p>
</div>

<div class="function_definition" id="BR_GetMouseCursorContext_StretchMarker">
	<div class="c_func"><code>int BR_GetMouseCursorContext_StretchMarker()</code></div>
	<div class="e_func"><code><em>int </em> BR_GetMouseCursorContext_StretchMarker() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_GetMouseCursorContext_StretchMarker") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_GetMouseCursorContext_StretchMarker()</code></div>
	<div class="p_func"><code><em>Int</em>  BR_GetMouseCursorContext_StretchMarker()</code></div>
	<p>[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>.</p>
</div>

<div class="function_definition" id="BR_GetMouseCursorContext_Take">
	<div class="c_func"><code>MediaItem_Take* BR_GetMouseCursorContext_Take()</code></div>
	<div class="e_func"><code><em>MediaItem_Take</em>  BR_GetMouseCursorContext_Take() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MediaItem_Take</em>  extension_api("BR_GetMouseCursorContext_Take") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MediaItem_Take</em> reaper.BR_GetMouseCursorContext_Take()</code></div>
	<div class="p_func"><code><em>MediaItem_Take</em>  BR_GetMouseCursorContext_Take()</code></div>
	<p>[BR] Returns take under mouse cursor that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>.</p>
</div>

<div class="function_definition" id="BR_GetMouseCursorContext_Track">
	<div class="c_func"><code>MediaTrack* BR_GetMouseCursorContext_Track()</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  BR_GetMouseCursorContext_Track() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MediaTrack</em>  extension_api("BR_GetMouseCursorContext_Track") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MediaTrack</em> reaper.BR_GetMouseCursorContext_Track()</code></div>
	<div class="p_func"><code><em>MediaTrack</em>  BR_GetMouseCursorContext_Track()</code></div>
	<p>[BR] Returns track under mouse cursor that was captured with the last call to <a href="#BR_GetMouseCursorContext">BR_GetMouseCursorContext</a>.</p>
</div>

<div class="function_definition" id="BR_GetNextGridDivision">
	<div class="c_func"><code>double BR_GetNextGridDivision(double position)</code></div>
	<div class="e_func"><code><em>double </em> BR_GetNextGridDivision(position) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("BR_GetNextGridDivision", position) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.BR_GetNextGridDivision(<em>number</em> position)</code></div>
	<div class="p_func"><code><em>Float</em>  BR_GetNextGridDivision(<em>Float</em> position)</code></div>
	<p>[BR] Get next grid division after the time position. For more grid divisions function, see <a href="#BR_GetClosestGridDivision">BR_GetClosestGridDivision</a> and <a href="#BR_GetPrevGridDivision">BR_GetPrevGridDivision</a>.</p>
</div>

<div class="function_definition" id="BR_GetPrevGridDivision">
	<div class="c_func"><code>double BR_GetPrevGridDivision(double position)</code></div>
	<div class="e_func"><code><em>double </em> BR_GetPrevGridDivision(position) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("BR_GetPrevGridDivision", position) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.BR_GetPrevGridDivision(<em>number</em> position)</code></div>
	<div class="p_func"><code><em>Float</em>  BR_GetPrevGridDivision(<em>Float</em> position)</code></div>
	<p>[BR] Get previous grid division before the time position. For more grid division functions, see <a href="#BR_GetClosestGridDivision">BR_GetClosestGridDivision</a> and <a href="#BR_GetNextGridDivision">BR_GetNextGridDivision</a>.</p>
</div>

<div class="function_definition" id="BR_GetSetTrackSendInfo">
	<div class="c_func"><code>double BR_GetSetTrackSendInfo(MediaTrack* track, int category, int sendidx, const char* parmname, bool setNewValue, double newValue)</code></div>
	<div class="e_func"><code><em>double </em> BR_GetSetTrackSendInfo(<em>MediaTrack</em> track, <em>int </em>category, <em>int </em>sendidx, "parmname", <em>bool </em>setNewValue, newValue) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("BR_GetSetTrackSendInfo", <em>MediaTrack</em> track, <em>int </em>category, <em>int </em>sendidx, "parmname", <em>bool </em>setNewValue, newValue) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.BR_GetSetTrackSendInfo(<em>MediaTrack</em> track, <em>integer</em> category, <em>integer</em> sendidx, <em>string</em> parmname, <em>boolean</em> setNewValue, <em>number</em> newValue)</code></div>
	<div class="p_func"><code><em>Float</em>  BR_GetSetTrackSendInfo(<em>MediaTrack</em> track, <em>Int</em> category, <em>Int</em> sendidx, <em>String</em> parmname, <em>Boolean</em> setNewValue, <em>Float</em> newValue)</code></div>
	<p>[BR] Get or set send attributes.<br>
</p><p>
category is &lt;0 for receives, 0=sends, &gt;0 for hardware outputs<br>
sendidx is zero-based (see <a href="#GetTrackNumSends">GetTrackNumSends</a> to count track sends/receives/hardware outputs)<br>
To set attribute, pass setNewValue as true<br>
</p><p>
List of possible parameters:<br>
B_MUTE : send mute state (1.0 if muted, otherwise 0.0)<br>
B_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)<br>
B_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)<br>
D_VOL : send volume (1.0=+0dB etc...)<br>
D_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)<br>
D_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)<br>
I_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)<br>
I_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&amp;1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)<br>
I_DSTCHAN : audio destination starting channel index (&amp;1024=mono (and in case of hardware output &amp;512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)<br>
I_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)<br>
I_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)<br>
I_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)<br>
I_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)<br>
I_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI<br>
</p><p>
Note: To get or set other send attributes, see <a href="#BR_GetMediaTrackSendInfo_Envelope">BR_GetMediaTrackSendInfo_Envelope</a> and <a href="#BR_GetMediaTrackSendInfo_Track">BR_GetMediaTrackSendInfo_Track</a>.</p>
</div>

<div class="function_definition" id="BR_GetTakeFXCount">
	<div class="c_func"><code>int BR_GetTakeFXCount(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>int </em> BR_GetTakeFXCount(<em>MediaItem_Take</em> take) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_GetTakeFXCount", <em>MediaItem_Take</em> take) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_GetTakeFXCount(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_GetTakeFXCount(<em>MediaItem_Take</em> take)</code></div>
	<p>[BR] Returns FX count for supplied take</p>
</div>

<div class="function_definition" id="BR_IsMidiOpenInInlineEditor">
	<div class="c_func"><code>bool BR_IsMidiOpenInInlineEditor(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>bool </em> BR_IsMidiOpenInInlineEditor(<em>MediaItem_Take</em> take) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_IsMidiOpenInInlineEditor", <em>MediaItem_Take</em> take) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_IsMidiOpenInInlineEditor(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_IsMidiOpenInInlineEditor(<em>MediaItem_Take</em> take)</code></div>
	<p>[SWS] Check if take has MIDI inline editor open and returns true or false.</p>
</div>

<div class="function_definition" id="BR_IsTakeMidi">
	<div class="c_func"><code>bool BR_IsTakeMidi(MediaItem_Take* take, bool* inProjectMidiOut)</code></div>
	<div class="e_func"><code><em>bool </em> BR_IsTakeMidi(<em>MediaItem_Take</em> take, <em>bool &amp;</em>inProjectMidi) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_IsTakeMidi", <em>MediaItem_Take</em> take, <em>bool &amp;</em>inProjectMidi) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>inProjectMidi = reaper.BR_IsTakeMidi(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Boolean</em> inProjectMidiOut) = BR_IsTakeMidi(take, inProjectMidiOut)</code></div>
	<p>[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false.</p>
</div>

<div class="function_definition" id="BR_ItemAtMouseCursor">
	<div class="c_func"><code>MediaItem* BR_ItemAtMouseCursor(double* positionOut)</code></div>
	<div class="e_func"><code><em>MediaItem</em>  BR_ItemAtMouseCursor(<em>&amp;</em>position) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MediaItem</em>  extension_api("BR_ItemAtMouseCursor", <em>&amp;</em>position) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MediaItem</em> retval, <em>number </em>position = reaper.BR_ItemAtMouseCursor()</code></div>
	<div class="p_func"><code>(<em>MediaItem</em> retval, <em>Float</em> positionOut) = BR_ItemAtMouseCursor(positionOut)</code></div>
	<p>[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.</p>
</div>

<div class="function_definition" id="BR_MIDI_CCLaneRemove">
	<div class="c_func"><code>bool BR_MIDI_CCLaneRemove(void* midiEditor, int laneId)</code></div>
	<div class="e_func"><code><em>bool </em> BR_MIDI_CCLaneRemove(<em>void*</em> midiEditor, <em>int </em>laneId) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_MIDI_CCLaneRemove", <em>void*</em> midiEditor, <em>int </em>laneId) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_MIDI_CCLaneRemove(<em>identifier</em> midiEditor, <em>integer</em> laneId)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_MIDI_CCLaneRemove(<em>void</em> midiEditor, <em>Int</em> laneId)</code></div>
	<p>[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success</p>
</div>

<div class="function_definition" id="BR_MIDI_CCLaneReplace">
	<div class="c_func"><code>bool BR_MIDI_CCLaneReplace(void* midiEditor, int laneId, int newCC)</code></div>
	<div class="e_func"><code><em>bool </em> BR_MIDI_CCLaneReplace(<em>void*</em> midiEditor, <em>int </em>laneId, <em>int </em>newCC) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_MIDI_CCLaneReplace", <em>void*</em> midiEditor, <em>int </em>laneId, <em>int </em>newCC) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_MIDI_CCLaneReplace(<em>identifier</em> midiEditor, <em>integer</em> laneId, <em>integer</em> newCC)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_MIDI_CCLaneReplace(<em>void</em> midiEditor, <em>Int</em> laneId, <em>Int</em> newCC)</code></div>
	<p>[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.<br>
Valid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207</p>
</div>

<div class="function_definition" id="BR_PositionAtMouseCursor">
	<div class="c_func"><code>double BR_PositionAtMouseCursor(bool checkRuler)</code></div>
	<div class="e_func"><code><em>double </em> BR_PositionAtMouseCursor(<em>bool </em>checkRuler) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("BR_PositionAtMouseCursor", <em>bool </em>checkRuler) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.BR_PositionAtMouseCursor(<em>boolean</em> checkRuler)</code></div>
	<div class="p_func"><code><em>Float</em>  BR_PositionAtMouseCursor(<em>Boolean</em> checkRuler)</code></div>
	<p>[BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.</p>
</div>

<div class="function_definition" id="BR_SetArrangeView">
	<div class="c_func"><code>void BR_SetArrangeView(ReaProject* proj, double startTime, double endTime)</code></div>
	<div class="e_func"><code>BR_SetArrangeView(<em>ReaProject</em> proj, startTime, endTime) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_SetArrangeView", <em>ReaProject</em> proj, startTime, endTime) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.BR_SetArrangeView(<em>ReaProject</em> proj, <em>number</em> startTime, <em>number</em> endTime)</code></div>
	<div class="p_func"><code>BR_SetArrangeView(<em>ReaProject</em> proj, <em>Float</em> startTime, <em>Float</em> endTime)</code></div>
	<p>[BR] Deprecated, see <a href="#GetSet_ArrangeView2">GetSet_ArrangeView2</a> (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see <a href="#BR_GetArrangeView">BR_GetArrangeView</a>.</p>
</div>

<div class="function_definition" id="BR_SetItemEdges">
	<div class="c_func"><code>bool BR_SetItemEdges(MediaItem* item, double startTime, double endTime)</code></div>
	<div class="e_func"><code><em>bool </em> BR_SetItemEdges(<em>MediaItem</em> item, startTime, endTime) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_SetItemEdges", <em>MediaItem</em> item, startTime, endTime) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_SetItemEdges(<em>MediaItem</em> item, <em>number</em> startTime, <em>number</em> endTime)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_SetItemEdges(<em>MediaItem</em> item, <em>Float</em> startTime, <em>Float</em> endTime)</code></div>
	<p>[BR] Set item start and end edges' position - returns true in case of any changes</p>
</div>

<div class="function_definition" id="BR_SetMediaItemImageResource">
	<div class="c_func"><code>void BR_SetMediaItemImageResource(MediaItem* item, const char* imageIn, int imageFlags)</code></div>
	<div class="e_func"><code>BR_SetMediaItemImageResource(<em>MediaItem</em> item, "imageIn", <em>int </em>imageFlags) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_SetMediaItemImageResource", <em>MediaItem</em> item, "imageIn", <em>int </em>imageFlags) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.BR_SetMediaItemImageResource(<em>MediaItem</em> item, <em>string</em> imageIn, <em>integer</em> imageFlags)</code></div>
	<div class="p_func"><code>BR_SetMediaItemImageResource(<em>MediaItem</em> item, <em>String</em> imageIn, <em>Int</em> imageFlags)</code></div>
	<p>[BR] Set image resource and its flags for a given item. To clear current image resource, pass imageIn as "".<br>
imageFlags: &amp;1=0: don't display image, &amp;1: center / tile, &amp;3: stretch, &amp;5: full height (REAPER 5.974+).<br>
Can also be used to display existing text in empty items unstretched (pass imageIn = "", imageFlags = 0) or stretched (pass imageIn = "". imageFlags = 3).<br>
To get image resource, see <a href="#BR_GetMediaItemImageResource">BR_GetMediaItemImageResource</a>.</p>
</div>

<div class="function_definition" id="BR_SetMediaSourceProperties">
	<div class="c_func"><code>bool BR_SetMediaSourceProperties(MediaItem_Take* take, bool section, double start, double length, double fade, bool reverse)</code></div>
	<div class="e_func"><code><em>bool </em> BR_SetMediaSourceProperties(<em>MediaItem_Take</em> take, <em>bool </em>section, start, length, fade, <em>bool </em>reverse) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_SetMediaSourceProperties", <em>MediaItem_Take</em> take, <em>bool </em>section, start, length, fade, <em>bool </em>reverse) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_SetMediaSourceProperties(<em>MediaItem_Take</em> take, <em>boolean</em> section, <em>number</em> start, <em>number</em> length, <em>number</em> fade, <em>boolean</em> reverse)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_SetMediaSourceProperties(<em>MediaItem_Take</em> take, <em>Boolean</em> section, <em>Float</em> start, <em>Float</em> length, <em>Float</em> fade, <em>Boolean</em> reverse)</code></div>
	<p>[BR] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.<br>
To get source properties, see <a href="#BR_GetMediaSourceProperties">BR_GetMediaSourceProperties</a>.</p>
</div>

<div class="function_definition" id="BR_SetMediaTrackLayouts">
	<div class="c_func"><code>bool BR_SetMediaTrackLayouts(MediaTrack* track, const char* mcpLayoutNameIn, const char* tcpLayoutNameIn)</code></div>
	<div class="e_func"><code><em>bool </em> BR_SetMediaTrackLayouts(<em>MediaTrack</em> track, "mcpLayoutNameIn", "tcpLayoutNameIn") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_SetMediaTrackLayouts", <em>MediaTrack</em> track, "mcpLayoutNameIn", "tcpLayoutNameIn") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_SetMediaTrackLayouts(<em>MediaTrack</em> track, <em>string</em> mcpLayoutNameIn, <em>string</em> tcpLayoutNameIn)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_SetMediaTrackLayouts(<em>MediaTrack</em> track, <em>String</em> mcpLayoutNameIn, <em>String</em> tcpLayoutNameIn)</code></div>
	<p>[BR] Deprecated, see <a href="#GetSetMediaTrackInfo">GetSetMediaTrackInfo</a> (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string ("") as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).<br>
To get media track layouts, see <a href="#BR_GetMediaTrackLayouts">BR_GetMediaTrackLayouts</a>.</p>
</div>

<div class="function_definition" id="BR_SetMidiTakeTempoInfo">
	<div class="c_func"><code>bool BR_SetMidiTakeTempoInfo(MediaItem_Take* take, bool ignoreProjTempo, double bpm, int num, int den)</code></div>
	<div class="e_func"><code><em>bool </em> BR_SetMidiTakeTempoInfo(<em>MediaItem_Take</em> take, <em>bool </em>ignoreProjTempo, bpm, <em>int </em>num, <em>int </em>den) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_SetMidiTakeTempoInfo", <em>MediaItem_Take</em> take, <em>bool </em>ignoreProjTempo, bpm, <em>int </em>num, <em>int </em>den) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_SetMidiTakeTempoInfo(<em>MediaItem_Take</em> take, <em>boolean</em> ignoreProjTempo, <em>number</em> bpm, <em>integer</em> num, <em>integer</em> den)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_SetMidiTakeTempoInfo(<em>MediaItem_Take</em> take, <em>Boolean</em> ignoreProjTempo, <em>Float</em> bpm, <em>Int</em> num, <em>Int</em> den)</code></div>
	<p>[BR] Set "ignore project tempo" information for MIDI take. Returns true in case the take was successfully updated.</p>
</div>

<div class="function_definition" id="BR_SetTakeSourceFromFile">
	<div class="c_func"><code>bool BR_SetTakeSourceFromFile(MediaItem_Take* take, const char* filenameIn, bool inProjectData)</code></div>
	<div class="e_func"><code><em>bool </em> BR_SetTakeSourceFromFile(<em>MediaItem_Take</em> take, "filenameIn", <em>bool </em>inProjectData) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_SetTakeSourceFromFile", <em>MediaItem_Take</em> take, "filenameIn", <em>bool </em>inProjectData) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_SetTakeSourceFromFile(<em>MediaItem_Take</em> take, <em>string</em> filenameIn, <em>boolean</em> inProjectData)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_SetTakeSourceFromFile(<em>MediaItem_Take</em> take, <em>String</em> filenameIn, <em>Boolean</em> inProjectData)</code></div>
	<p>[BR] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.<br>
Any take source properties from the previous source will be lost - to preserve them, see <a href="#BR_SetTakeSourceFromFile2">BR_SetTakeSourceFromFile2</a>.<br>
Note: To set source from existing take, see <a href="#SNM_GetSetSourceState2">SNM_GetSetSourceState2</a>.</p>
</div>

<div class="function_definition" id="BR_SetTakeSourceFromFile2">
	<div class="c_func"><code>bool BR_SetTakeSourceFromFile2(MediaItem_Take* take, const char* filenameIn, bool inProjectData, bool keepSourceProperties)</code></div>
	<div class="e_func"><code><em>bool </em> BR_SetTakeSourceFromFile2(<em>MediaItem_Take</em> take, "filenameIn", <em>bool </em>inProjectData, <em>bool </em>keepSourceProperties) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_SetTakeSourceFromFile2", <em>MediaItem_Take</em> take, "filenameIn", <em>bool </em>inProjectData, <em>bool </em>keepSourceProperties) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_SetTakeSourceFromFile2(<em>MediaItem_Take</em> take, <em>string</em> filenameIn, <em>boolean</em> inProjectData, <em>boolean</em> keepSourceProperties)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_SetTakeSourceFromFile2(<em>MediaItem_Take</em> take, <em>String</em> filenameIn, <em>Boolean</em> inProjectData, <em>Boolean</em> keepSourceProperties)</code></div>
	<p>[BR] Differs from <a href="#BR_SetTakeSourceFromFile">BR_SetTakeSourceFromFile</a> only that it can also preserve existing take media source properties.</p>
</div>

<div class="function_definition" id="BR_TakeAtMouseCursor">
	<div class="c_func"><code>MediaItem_Take* BR_TakeAtMouseCursor(double* positionOut)</code></div>
	<div class="e_func"><code><em>MediaItem_Take</em>  BR_TakeAtMouseCursor(<em>&amp;</em>position) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MediaItem_Take</em>  extension_api("BR_TakeAtMouseCursor", <em>&amp;</em>position) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MediaItem_Take</em> retval, <em>number </em>position = reaper.BR_TakeAtMouseCursor()</code></div>
	<div class="p_func"><code>(<em>MediaItem_Take</em> retval, <em>Float</em> positionOut) = BR_TakeAtMouseCursor(positionOut)</code></div>
	<p>[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.</p>
</div>

<div class="function_definition" id="BR_TrackAtMouseCursor">
	<div class="c_func"><code>MediaTrack* BR_TrackAtMouseCursor(int* contextOut, double* positionOut)</code></div>
	<div class="e_func"><code><em>MediaTrack</em>  BR_TrackAtMouseCursor(<em>int &amp;</em>context, <em>&amp;</em>position) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MediaTrack</em>  extension_api("BR_TrackAtMouseCursor", <em>int &amp;</em>context, <em>&amp;</em>position) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MediaTrack</em> retval, <em>integer </em>context, <em>number </em>position = reaper.BR_TrackAtMouseCursor()</code></div>
	<div class="p_func"><code>(<em>MediaTrack</em> retval, <em>Int</em> contextOut, <em>Float</em> positionOut) = BR_TrackAtMouseCursor(contextOut, positionOut)</code></div>
	<p>[BR] Get track under mouse cursor.<br>
Context signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.<br>
Position will hold mouse cursor position in arrange if applicable.</p>
</div>

<div class="function_definition" id="BR_TrackFX_GetFXModuleName">
	<div class="c_func"><code>bool BR_TrackFX_GetFXModuleName(MediaTrack* track, int fx, char* nameOut, int nameOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> BR_TrackFX_GetFXModuleName(<em>MediaTrack</em> track, <em>int </em>fx, #name) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_TrackFX_GetFXModuleName", <em>MediaTrack</em> track, <em>int </em>fx, #name) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>name = reaper.BR_TrackFX_GetFXModuleName(<em>MediaTrack</em> track, <em>integer</em> fx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaTrack</em> track, <em>Int</em> fx, <em>String</em> nameOut, <em>Int</em> nameOut_sz) = BR_TrackFX_GetFXModuleName(track, fx, nameOut, nameOut_sz)</code></div>
	<p>[BR] Deprecated, see <a href="#TrackFX_GetNamedConfigParm">TrackFX_GetNamedConfigParm</a>/'fx_ident' (v6.37+). Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.</p>
</div>

<div class="function_definition" id="BR_Win32_CB_FindString">
	<div class="c_func"><code>int BR_Win32_CB_FindString(void* comboBoxHwnd, int startId, const char* string)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_CB_FindString(<em>void*</em> comboBoxHwnd, <em>int </em>startId, "string") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_CB_FindString", <em>void*</em> comboBoxHwnd, <em>int </em>startId, "string") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_CB_FindString(<em>identifier</em> comboBoxHwnd, <em>integer</em> startId, <em>string</em> string)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_CB_FindString(<em>void</em> comboBoxHwnd, <em>Int</em> startId, <em>String</em> string)</code></div>
	<p>[BR] Equivalent to win32 API ComboBox_FindString().</p>
</div>

<div class="function_definition" id="BR_Win32_CB_FindStringExact">
	<div class="c_func"><code>int BR_Win32_CB_FindStringExact(void* comboBoxHwnd, int startId, const char* string)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_CB_FindStringExact(<em>void*</em> comboBoxHwnd, <em>int </em>startId, "string") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_CB_FindStringExact", <em>void*</em> comboBoxHwnd, <em>int </em>startId, "string") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_CB_FindStringExact(<em>identifier</em> comboBoxHwnd, <em>integer</em> startId, <em>string</em> string)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_CB_FindStringExact(<em>void</em> comboBoxHwnd, <em>Int</em> startId, <em>String</em> string)</code></div>
	<p>[BR] Equivalent to win32 API ComboBox_FindStringExact().</p>
</div>

<div class="function_definition" id="BR_Win32_ClientToScreen">
	<div class="c_func"><code>void BR_Win32_ClientToScreen(void* hwnd, int xIn, int yIn, int* xOut, int* yOut)</code></div>
	<div class="e_func"><code>BR_Win32_ClientToScreen(<em>void*</em> hwnd, <em>int </em>xIn, <em>int </em>yIn, <em>int &amp;</em>x, <em>int &amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_Win32_ClientToScreen", <em>void*</em> hwnd, <em>int </em>xIn, <em>int </em>yIn, <em>int &amp;</em>x, <em>int &amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer </em>x, <em>integer </em>y = reaper.BR_Win32_ClientToScreen(<em>identifier</em> hwnd, <em>integer</em> xIn, <em>integer</em> yIn)</code></div>
	<div class="p_func"><code>(<em>void</em> hwnd, <em>Int</em> xIn, <em>Int</em> yIn, <em>Int</em> xOut, <em>Int</em> yOut) = BR_Win32_ClientToScreen(hwnd, xIn, yIn, xOut, yOut)</code></div>
	<p>[BR] Equivalent to win32 API ClientToScreen().</p>
</div>

<div class="function_definition" id="BR_Win32_FindWindowEx">
	<div class="c_func"><code>void* BR_Win32_FindWindowEx(const char* hwndParent, const char* hwndChildAfter, const char* className, const char* windowName, bool searchClass, bool searchName)</code></div>
	<div class="e_func"><code><em>void*</em>  BR_Win32_FindWindowEx("hwndParent", "hwndChildAfter", "className", "windowName", <em>bool </em>searchClass, <em>bool </em>searchName) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("BR_Win32_FindWindowEx", "hwndParent", "hwndChildAfter", "className", "windowName", <em>bool </em>searchClass, <em>bool </em>searchName) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.BR_Win32_FindWindowEx(<em>string</em> hwndParent, <em>string</em> hwndChildAfter, <em>string</em> className, <em>string</em> windowName, <em>boolean</em> searchClass, <em>boolean</em> searchName)</code></div>
	<div class="p_func"><code><em>void</em>  BR_Win32_FindWindowEx(<em>String</em> hwndParent, <em>String</em> hwndChildAfter, <em>String</em> className, <em>String</em> windowName, <em>Boolean</em> searchClass, <em>Boolean</em> searchName)</code></div>
	<p>[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't allow passing NULL (None in Python, nil in Lua etc...) parameters, to search by supplied class or name set searchClass and searchName accordingly. HWND parameters should be passed as either "0" to signify NULL or as string obtained from <a href="#BR_Win32_HwndToString">BR_Win32_HwndToString</a>.</p>
</div>

<div class="function_definition" id="BR_Win32_GET_X_LPARAM">
	<div class="c_func"><code>int BR_Win32_GET_X_LPARAM(int lParam)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_GET_X_LPARAM(<em>int </em>lParam) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_GET_X_LPARAM", <em>int </em>lParam) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_GET_X_LPARAM(<em>integer</em> lParam)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_GET_X_LPARAM(<em>Int</em> lParam)</code></div>
	<p>[BR] Equivalent to win32 API GET_X_LPARAM().</p>
</div>

<div class="function_definition" id="BR_Win32_GET_Y_LPARAM">
	<div class="c_func"><code>int BR_Win32_GET_Y_LPARAM(int lParam)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_GET_Y_LPARAM(<em>int </em>lParam) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_GET_Y_LPARAM", <em>int </em>lParam) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_GET_Y_LPARAM(<em>integer</em> lParam)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_GET_Y_LPARAM(<em>Int</em> lParam)</code></div>
	<p>[BR] Equivalent to win32 API GET_Y_LPARAM().</p>
</div>

<div class="function_definition" id="BR_Win32_GetConstant">
	<div class="c_func"><code>int BR_Win32_GetConstant(const char* constantName)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_GetConstant("constantName") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_GetConstant", "constantName") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_GetConstant(<em>string</em> constantName)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_GetConstant(<em>String</em> constantName)</code></div>
	<p>[BR] Returns various constants needed for BR_Win32 functions.<br>
Supported constants are:<br>
CB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL<br>
EM_SETSEL<br>
GW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER<br>
GWL_STYLE<br>
SW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL<br>
SWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER<br>
VK_DOWN, VK_UP<br>
WM_CLOSE, WM_KEYDOWN<br>
WS_MAXIMIZE, WS_OVERLAPPEDWINDOW</p>
</div>

<div class="function_definition" id="BR_Win32_GetCursorPos">
	<div class="c_func"><code>bool BR_Win32_GetCursorPos(int* xOut, int* yOut)</code></div>
	<div class="e_func"><code><em>bool </em> BR_Win32_GetCursorPos(<em>int &amp;</em>x, <em>int &amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_Win32_GetCursorPos", <em>int &amp;</em>x, <em>int &amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>x, <em>integer </em>y = reaper.BR_Win32_GetCursorPos()</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>Int</em> xOut, <em>Int</em> yOut) = BR_Win32_GetCursorPos(xOut, yOut)</code></div>
	<p>[BR] Equivalent to win32 API GetCursorPos().</p>
</div>

<div class="function_definition" id="BR_Win32_GetFocus">
	<div class="c_func"><code>void* BR_Win32_GetFocus()</code></div>
	<div class="e_func"><code><em>void*</em>  BR_Win32_GetFocus() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("BR_Win32_GetFocus") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.BR_Win32_GetFocus()</code></div>
	<div class="p_func"><code><em>void</em>  BR_Win32_GetFocus()</code></div>
	<p>[BR] Equivalent to win32 API GetFocus().</p>
</div>

<div class="function_definition" id="BR_Win32_GetForegroundWindow">
	<div class="c_func"><code>void* BR_Win32_GetForegroundWindow()</code></div>
	<div class="e_func"><code><em>void*</em>  BR_Win32_GetForegroundWindow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("BR_Win32_GetForegroundWindow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.BR_Win32_GetForegroundWindow()</code></div>
	<div class="p_func"><code><em>void</em>  BR_Win32_GetForegroundWindow()</code></div>
	<p>[BR] Equivalent to win32 API GetForegroundWindow().</p>
</div>

<div class="function_definition" id="BR_Win32_GetMainHwnd">
	<div class="c_func"><code>void* BR_Win32_GetMainHwnd()</code></div>
	<div class="e_func"><code><em>void*</em>  BR_Win32_GetMainHwnd() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("BR_Win32_GetMainHwnd") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.BR_Win32_GetMainHwnd()</code></div>
	<div class="p_func"><code><em>void</em>  BR_Win32_GetMainHwnd()</code></div>
	<p>[BR] Alternative to <a href="#GetMainHwnd">GetMainHwnd</a>. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type</p>
</div>

<div class="function_definition" id="BR_Win32_GetMixerHwnd">
	<div class="c_func"><code>void* BR_Win32_GetMixerHwnd(bool* isDockedOut)</code></div>
	<div class="e_func"><code><em>void*</em>  BR_Win32_GetMixerHwnd(<em>bool &amp;</em>isDocked) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("BR_Win32_GetMixerHwnd", <em>bool &amp;</em>isDocked) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> retval, <em>boolean </em>isDocked = reaper.BR_Win32_GetMixerHwnd()</code></div>
	<div class="p_func"><code>(<em>void</em> retval, <em>Boolean</em> isDockedOut) = BR_Win32_GetMixerHwnd(isDockedOut)</code></div>
	<p>[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked</p>
</div>

<div class="function_definition" id="BR_Win32_GetMonitorRectFromRect">
	<div class="c_func"><code>void BR_Win32_GetMonitorRectFromRect(bool workingAreaOnly, int leftIn, int topIn, int rightIn, int bottomIn, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</code></div>
	<div class="e_func"><code>BR_Win32_GetMonitorRectFromRect(<em>bool </em>workingAreaOnly, <em>int </em>leftIn, <em>int </em>topIn, <em>int </em>rightIn, <em>int </em>bottomIn, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_Win32_GetMonitorRectFromRect", <em>bool </em>workingAreaOnly, <em>int </em>leftIn, <em>int </em>topIn, <em>int </em>rightIn, <em>int </em>bottomIn, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer </em>left, <em>integer </em>top, <em>integer </em>right, <em>integer </em>bottom = reaper.BR_Win32_GetMonitorRectFromRect(<em>boolean</em> workingAreaOnly, <em>integer</em> leftIn, <em>integer</em> topIn, <em>integer</em> rightIn, <em>integer</em> bottomIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> workingAreaOnly, <em>Int</em> leftIn, <em>Int</em> topIn, <em>Int</em> rightIn, <em>Int</em> bottomIn, <em>Int</em> leftOut, <em>Int</em> topOut, <em>Int</em> rightOut, <em>Int</em> bottomOut) = BR_Win32_GetMonitorRectFromRect(workingAreaOnly, leftIn, topIn, rightIn, bottomIn, leftOut, topOut, rightOut, bottomOut)</code></div>
	<p>[BR] Get coordinates for screen which is nearest to supplied coordinates. Pass workingAreaOnly as true to get screen coordinates excluding taskbar (or menu bar on OSX).</p>
</div>

<div class="function_definition" id="BR_Win32_GetParent">
	<div class="c_func"><code>void* BR_Win32_GetParent(void* hwnd)</code></div>
	<div class="e_func"><code><em>void*</em>  BR_Win32_GetParent(<em>void*</em> hwnd) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("BR_Win32_GetParent", <em>void*</em> hwnd) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.BR_Win32_GetParent(<em>identifier</em> hwnd)</code></div>
	<div class="p_func"><code><em>void</em>  BR_Win32_GetParent(<em>void</em> hwnd)</code></div>
	<p>[BR] Equivalent to win32 API GetParent().</p>
</div>

<div class="function_definition" id="BR_Win32_GetPrivateProfileString">
	<div class="c_func"><code>int BR_Win32_GetPrivateProfileString(const char* sectionName, const char* keyName, const char* defaultString, const char* filePath, char* stringOut, int stringOut_sz)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_GetPrivateProfileString("sectionName", "keyName", "defaultString", "filePath", #string) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_GetPrivateProfileString", "sectionName", "keyName", "defaultString", "filePath", #string) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>string = reaper.BR_Win32_GetPrivateProfileString(<em>string</em> sectionName, <em>string</em> keyName, <em>string</em> defaultString, <em>string</em> filePath)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>String</em> sectionName, <em>String</em> keyName, <em>String</em> defaultString, <em>String</em> filePath, <em>String</em> stringOut, <em>Int</em> stringOut_sz) = BR_Win32_GetPrivateProfileString(sectionName, keyName, defaultString, filePath, stringOut, stringOut_sz)</code></div>
	<p>[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini.</p>
</div>

<div class="function_definition" id="BR_Win32_GetWindow">
	<div class="c_func"><code>void* BR_Win32_GetWindow(void* hwnd, int cmd)</code></div>
	<div class="e_func"><code><em>void*</em>  BR_Win32_GetWindow(<em>void*</em> hwnd, <em>int </em>cmd) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("BR_Win32_GetWindow", <em>void*</em> hwnd, <em>int </em>cmd) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.BR_Win32_GetWindow(<em>identifier</em> hwnd, <em>integer</em> cmd)</code></div>
	<div class="p_func"><code><em>void</em>  BR_Win32_GetWindow(<em>void</em> hwnd, <em>Int</em> cmd)</code></div>
	<p>[BR] Equivalent to win32 API GetWindow().</p>
</div>

<div class="function_definition" id="BR_Win32_GetWindowLong">
	<div class="c_func"><code>int BR_Win32_GetWindowLong(void* hwnd, int index)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_GetWindowLong(<em>void*</em> hwnd, <em>int </em>index) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_GetWindowLong", <em>void*</em> hwnd, <em>int </em>index) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_GetWindowLong(<em>identifier</em> hwnd, <em>integer</em> index)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_GetWindowLong(<em>void</em> hwnd, <em>Int</em> index)</code></div>
	<p>[BR] Equivalent to win32 API GetWindowLong().</p>
</div>

<div class="function_definition" id="BR_Win32_GetWindowRect">
	<div class="c_func"><code>bool BR_Win32_GetWindowRect(void* hwnd, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</code></div>
	<div class="e_func"><code><em>bool </em> BR_Win32_GetWindowRect(<em>void*</em> hwnd, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_Win32_GetWindowRect", <em>void*</em> hwnd, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>left, <em>integer </em>top, <em>integer </em>right, <em>integer </em>bottom = reaper.BR_Win32_GetWindowRect(<em>identifier</em> hwnd)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>void</em> hwnd, <em>Int</em> leftOut, <em>Int</em> topOut, <em>Int</em> rightOut, <em>Int</em> bottomOut) = BR_Win32_GetWindowRect(hwnd, leftOut, topOut, rightOut, bottomOut)</code></div>
	<p>[BR] Equivalent to win32 API GetWindowRect().</p>
</div>

<div class="function_definition" id="BR_Win32_GetWindowText">
	<div class="c_func"><code>int BR_Win32_GetWindowText(void* hwnd, char* textOut, int textOut_sz)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_GetWindowText(<em>void*</em> hwnd, #text) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_GetWindowText", <em>void*</em> hwnd, #text) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>text = reaper.BR_Win32_GetWindowText(<em>identifier</em> hwnd)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>void</em> hwnd, <em>String</em> textOut, <em>Int</em> textOut_sz) = BR_Win32_GetWindowText(hwnd, textOut, textOut_sz)</code></div>
	<p>[BR] Equivalent to win32 API GetWindowText().</p>
</div>

<div class="function_definition" id="BR_Win32_HIBYTE">
	<div class="c_func"><code>int BR_Win32_HIBYTE(int value)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_HIBYTE(<em>int </em>value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_HIBYTE", <em>int </em>value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_HIBYTE(<em>integer</em> value)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_HIBYTE(<em>Int</em> value)</code></div>
	<p>[BR] Equivalent to win32 API HIBYTE().</p>
</div>

<div class="function_definition" id="BR_Win32_HIWORD">
	<div class="c_func"><code>int BR_Win32_HIWORD(int value)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_HIWORD(<em>int </em>value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_HIWORD", <em>int </em>value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_HIWORD(<em>integer</em> value)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_HIWORD(<em>Int</em> value)</code></div>
	<p>[BR] Equivalent to win32 API HIWORD().</p>
</div>

<div class="function_definition" id="BR_Win32_HwndToString">
	<div class="c_func"><code>void BR_Win32_HwndToString(void* hwnd, char* stringOut, int stringOut_sz)</code></div>
	<div class="e_func"><code>BR_Win32_HwndToString(<em>void*</em> hwnd, #string) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_Win32_HwndToString", <em>void*</em> hwnd, #string) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>string = reaper.BR_Win32_HwndToString(<em>identifier</em> hwnd)</code></div>
	<div class="p_func"><code>(<em>void</em> hwnd, <em>String</em> stringOut, <em>Int</em> stringOut_sz) = BR_Win32_HwndToString(hwnd, stringOut, stringOut_sz)</code></div>
	<p>[BR] Convert HWND to string. To convert string back to HWND, see <a href="#BR_Win32_StringToHwnd">BR_Win32_StringToHwnd</a>.</p>
</div>

<div class="function_definition" id="BR_Win32_IsWindow">
	<div class="c_func"><code>bool BR_Win32_IsWindow(void* hwnd)</code></div>
	<div class="e_func"><code><em>bool </em> BR_Win32_IsWindow(<em>void*</em> hwnd) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_Win32_IsWindow", <em>void*</em> hwnd) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_Win32_IsWindow(<em>identifier</em> hwnd)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_Win32_IsWindow(<em>void</em> hwnd)</code></div>
	<p>[BR] Equivalent to win32 API IsWindow().</p>
</div>

<div class="function_definition" id="BR_Win32_IsWindowVisible">
	<div class="c_func"><code>bool BR_Win32_IsWindowVisible(void* hwnd)</code></div>
	<div class="e_func"><code><em>bool </em> BR_Win32_IsWindowVisible(<em>void*</em> hwnd) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_Win32_IsWindowVisible", <em>void*</em> hwnd) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_Win32_IsWindowVisible(<em>identifier</em> hwnd)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_Win32_IsWindowVisible(<em>void</em> hwnd)</code></div>
	<p>[BR] Equivalent to win32 API IsWindowVisible().</p>
</div>

<div class="function_definition" id="BR_Win32_LOBYTE">
	<div class="c_func"><code>int BR_Win32_LOBYTE(int value)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_LOBYTE(<em>int </em>value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_LOBYTE", <em>int </em>value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_LOBYTE(<em>integer</em> value)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_LOBYTE(<em>Int</em> value)</code></div>
	<p>[BR] Equivalent to win32 API LOBYTE().</p>
</div>

<div class="function_definition" id="BR_Win32_LOWORD">
	<div class="c_func"><code>int BR_Win32_LOWORD(int value)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_LOWORD(<em>int </em>value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_LOWORD", <em>int </em>value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_LOWORD(<em>integer</em> value)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_LOWORD(<em>Int</em> value)</code></div>
	<p>[BR] Equivalent to win32 API LOWORD().</p>
</div>

<div class="function_definition" id="BR_Win32_MAKELONG">
	<div class="c_func"><code>int BR_Win32_MAKELONG(int low, int high)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_MAKELONG(<em>int </em>low, <em>int </em>high) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_MAKELONG", <em>int </em>low, <em>int </em>high) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_MAKELONG(<em>integer</em> low, <em>integer</em> high)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_MAKELONG(<em>Int</em> low, <em>Int</em> high)</code></div>
	<p>[BR] Equivalent to win32 API MAKELONG().</p>
</div>

<div class="function_definition" id="BR_Win32_MAKELPARAM">
	<div class="c_func"><code>int BR_Win32_MAKELPARAM(int low, int high)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_MAKELPARAM(<em>int </em>low, <em>int </em>high) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_MAKELPARAM", <em>int </em>low, <em>int </em>high) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_MAKELPARAM(<em>integer</em> low, <em>integer</em> high)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_MAKELPARAM(<em>Int</em> low, <em>Int</em> high)</code></div>
	<p>[BR] Equivalent to win32 API MAKELPARAM().</p>
</div>

<div class="function_definition" id="BR_Win32_MAKELRESULT">
	<div class="c_func"><code>int BR_Win32_MAKELRESULT(int low, int high)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_MAKELRESULT(<em>int </em>low, <em>int </em>high) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_MAKELRESULT", <em>int </em>low, <em>int </em>high) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_MAKELRESULT(<em>integer</em> low, <em>integer</em> high)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_MAKELRESULT(<em>Int</em> low, <em>Int</em> high)</code></div>
	<p>[BR] Equivalent to win32 API MAKELRESULT().</p>
</div>

<div class="function_definition" id="BR_Win32_MAKEWORD">
	<div class="c_func"><code>int BR_Win32_MAKEWORD(int low, int high)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_MAKEWORD(<em>int </em>low, <em>int </em>high) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_MAKEWORD", <em>int </em>low, <em>int </em>high) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_MAKEWORD(<em>integer</em> low, <em>integer</em> high)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_MAKEWORD(<em>Int</em> low, <em>Int</em> high)</code></div>
	<p>[BR] Equivalent to win32 API MAKEWORD().</p>
</div>

<div class="function_definition" id="BR_Win32_MAKEWPARAM">
	<div class="c_func"><code>int BR_Win32_MAKEWPARAM(int low, int high)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_MAKEWPARAM(<em>int </em>low, <em>int </em>high) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_MAKEWPARAM", <em>int </em>low, <em>int </em>high) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_MAKEWPARAM(<em>integer</em> low, <em>integer</em> high)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_MAKEWPARAM(<em>Int</em> low, <em>Int</em> high)</code></div>
	<p>[BR] Equivalent to win32 API MAKEWPARAM().</p>
</div>

<div class="function_definition" id="BR_Win32_MIDIEditor_GetActive">
	<div class="c_func"><code>void* BR_Win32_MIDIEditor_GetActive()</code></div>
	<div class="e_func"><code><em>void*</em>  BR_Win32_MIDIEditor_GetActive() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("BR_Win32_MIDIEditor_GetActive") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.BR_Win32_MIDIEditor_GetActive()</code></div>
	<div class="p_func"><code><em>void</em>  BR_Win32_MIDIEditor_GetActive()</code></div>
	<p>[BR] Alternative to <a href="#MIDIEditor_GetActive">MIDIEditor_GetActive</a>. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type.</p>
</div>

<div class="function_definition" id="BR_Win32_ScreenToClient">
	<div class="c_func"><code>void BR_Win32_ScreenToClient(void* hwnd, int xIn, int yIn, int* xOut, int* yOut)</code></div>
	<div class="e_func"><code>BR_Win32_ScreenToClient(<em>void*</em> hwnd, <em>int </em>xIn, <em>int </em>yIn, <em>int &amp;</em>x, <em>int &amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("BR_Win32_ScreenToClient", <em>void*</em> hwnd, <em>int </em>xIn, <em>int </em>yIn, <em>int &amp;</em>x, <em>int &amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer </em>x, <em>integer </em>y = reaper.BR_Win32_ScreenToClient(<em>identifier</em> hwnd, <em>integer</em> xIn, <em>integer</em> yIn)</code></div>
	<div class="p_func"><code>(<em>void</em> hwnd, <em>Int</em> xIn, <em>Int</em> yIn, <em>Int</em> xOut, <em>Int</em> yOut) = BR_Win32_ScreenToClient(hwnd, xIn, yIn, xOut, yOut)</code></div>
	<p>[BR] Equivalent to win32 API ClientToScreen().</p>
</div>

<div class="function_definition" id="BR_Win32_SendMessage">
	<div class="c_func"><code>int BR_Win32_SendMessage(void* hwnd, int msg, int lParam, int wParam)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_SendMessage(<em>void*</em> hwnd, <em>int </em>msg, <em>int </em>lParam, <em>int </em>wParam) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_SendMessage", <em>void*</em> hwnd, <em>int </em>msg, <em>int </em>lParam, <em>int </em>wParam) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_SendMessage(<em>identifier</em> hwnd, <em>integer</em> msg, <em>integer</em> lParam, <em>integer</em> wParam)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_SendMessage(<em>void</em> hwnd, <em>Int</em> msg, <em>Int</em> lParam, <em>Int</em> wParam)</code></div>
	<p>[BR] Equivalent to win32 API SendMessage().</p>
</div>

<div class="function_definition" id="BR_Win32_SetFocus">
	<div class="c_func"><code>void* BR_Win32_SetFocus(void* hwnd)</code></div>
	<div class="e_func"><code><em>void*</em>  BR_Win32_SetFocus(<em>void*</em> hwnd) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("BR_Win32_SetFocus", <em>void*</em> hwnd) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.BR_Win32_SetFocus(<em>identifier</em> hwnd)</code></div>
	<div class="p_func"><code><em>void</em>  BR_Win32_SetFocus(<em>void</em> hwnd)</code></div>
	<p>[BR] Equivalent to win32 API SetFocus().</p>
</div>

<div class="function_definition" id="BR_Win32_SetForegroundWindow">
	<div class="c_func"><code>int BR_Win32_SetForegroundWindow(void* hwnd)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_SetForegroundWindow(<em>void*</em> hwnd) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_SetForegroundWindow", <em>void*</em> hwnd) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_SetForegroundWindow(<em>identifier</em> hwnd)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_SetForegroundWindow(<em>void</em> hwnd)</code></div>
	<p>[BR] Equivalent to win32 API SetForegroundWindow().</p>
</div>

<div class="function_definition" id="BR_Win32_SetWindowLong">
	<div class="c_func"><code>int BR_Win32_SetWindowLong(void* hwnd, int index, int newLong)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_SetWindowLong(<em>void*</em> hwnd, <em>int </em>index, <em>int </em>newLong) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_SetWindowLong", <em>void*</em> hwnd, <em>int </em>index, <em>int </em>newLong) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_SetWindowLong(<em>identifier</em> hwnd, <em>integer</em> index, <em>integer</em> newLong)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_SetWindowLong(<em>void</em> hwnd, <em>Int</em> index, <em>Int</em> newLong)</code></div>
	<p>[BR] Equivalent to win32 API SetWindowLong().</p>
</div>

<div class="function_definition" id="BR_Win32_SetWindowPos">
	<div class="c_func"><code>bool BR_Win32_SetWindowPos(void* hwnd, const char* hwndInsertAfter, int x, int y, int width, int height, int flags)</code></div>
	<div class="e_func"><code><em>bool </em> BR_Win32_SetWindowPos(<em>void*</em> hwnd, "hwndInsertAfter", <em>int </em>x, <em>int </em>y, <em>int </em>width, <em>int </em>height, <em>int </em>flags) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_Win32_SetWindowPos", <em>void*</em> hwnd, "hwndInsertAfter", <em>int </em>x, <em>int </em>y, <em>int </em>width, <em>int </em>height, <em>int </em>flags) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_Win32_SetWindowPos(<em>identifier</em> hwnd, <em>string</em> hwndInsertAfter, <em>integer</em> x, <em>integer</em> y, <em>integer</em> width, <em>integer</em> height, <em>integer</em> flags)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_Win32_SetWindowPos(<em>void</em> hwnd, <em>String</em> hwndInsertAfter, <em>Int</em> x, <em>Int</em> y, <em>Int</em> width, <em>Int</em> height, <em>Int</em> flags)</code></div>
	<p>[BR] Equivalent to win32 API SetWindowPos().<br>
hwndInsertAfter may be a string: "HWND_BOTTOM", "HWND_NOTOPMOST", "HWND_TOP", "HWND_TOPMOST" or a string obtained with <a href="#BR_Win32_HwndToString">BR_Win32_HwndToString</a>.</p>
</div>

<div class="function_definition" id="BR_Win32_ShellExecute">
	<div class="c_func"><code>int BR_Win32_ShellExecute(const char* operation, const char* file, const char* parameters, const char* directory, int showFlags)</code></div>
	<div class="e_func"><code><em>int </em> BR_Win32_ShellExecute("operation", "file", "parameters", "directory", <em>int </em>showFlags) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("BR_Win32_ShellExecute", "operation", "file", "parameters", "directory", <em>int </em>showFlags) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.BR_Win32_ShellExecute(<em>string</em> operation, <em>string</em> file, <em>string</em> parameters, <em>string</em> directory, <em>integer</em> showFlags)</code></div>
	<div class="p_func"><code><em>Int</em>  BR_Win32_ShellExecute(<em>String</em> operation, <em>String</em> file, <em>String</em> parameters, <em>String</em> directory, <em>Int</em> showFlags)</code></div>
	<p>[BR] Equivalent to win32 API ShellExecute() with HWND set to main window</p>
</div>

<div class="function_definition" id="BR_Win32_ShowWindow">
	<div class="c_func"><code>bool BR_Win32_ShowWindow(void* hwnd, int cmdShow)</code></div>
	<div class="e_func"><code><em>bool </em> BR_Win32_ShowWindow(<em>void*</em> hwnd, <em>int </em>cmdShow) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_Win32_ShowWindow", <em>void*</em> hwnd, <em>int </em>cmdShow) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_Win32_ShowWindow(<em>identifier</em> hwnd, <em>integer</em> cmdShow)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_Win32_ShowWindow(<em>void</em> hwnd, <em>Int</em> cmdShow)</code></div>
	<p>[BR] Equivalent to win32 API ShowWindow().</p>
</div>

<div class="function_definition" id="BR_Win32_StringToHwnd">
	<div class="c_func"><code>void* BR_Win32_StringToHwnd(const char* string)</code></div>
	<div class="e_func"><code><em>void*</em>  BR_Win32_StringToHwnd("string") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("BR_Win32_StringToHwnd", "string") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.BR_Win32_StringToHwnd(<em>string</em> string)</code></div>
	<div class="p_func"><code><em>void</em>  BR_Win32_StringToHwnd(<em>String</em> string)</code></div>
	<p>[BR] Convert string to HWND. To convert HWND back to string, see <a href="#BR_Win32_HwndToString">BR_Win32_HwndToString</a>.</p>
</div>

<div class="function_definition" id="BR_Win32_WindowFromPoint">
	<div class="c_func"><code>void* BR_Win32_WindowFromPoint(int x, int y)</code></div>
	<div class="e_func"><code><em>void*</em>  BR_Win32_WindowFromPoint(<em>int </em>x, <em>int </em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("BR_Win32_WindowFromPoint", <em>int </em>x, <em>int </em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.BR_Win32_WindowFromPoint(<em>integer</em> x, <em>integer</em> y)</code></div>
	<div class="p_func"><code><em>void</em>  BR_Win32_WindowFromPoint(<em>Int</em> x, <em>Int</em> y)</code></div>
	<p>[BR] Equivalent to win32 API WindowFromPoint().</p>
</div>

<div class="function_definition" id="BR_Win32_WritePrivateProfileString">
	<div class="c_func"><code>bool BR_Win32_WritePrivateProfileString(const char* sectionName, const char* keyName, const char* value, const char* filePath)</code></div>
	<div class="e_func"><code><em>bool </em> BR_Win32_WritePrivateProfileString("sectionName", "keyName", "value", "filePath") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("BR_Win32_WritePrivateProfileString", "sectionName", "keyName", "value", "filePath") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.BR_Win32_WritePrivateProfileString(<em>string</em> sectionName, <em>string</em> keyName, <em>string</em> value, <em>string</em> filePath)</code></div>
	<div class="p_func"><code><em>Boolean</em>  BR_Win32_WritePrivateProfileString(<em>String</em> sectionName, <em>String</em> keyName, <em>String</em> value, <em>String</em> filePath)</code></div>
	<p>[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini. You can pass an empty string as value to delete a key.</p>
</div>

<div class="function_definition" id="Blink_GetBeatAtTime">
	<div class="c_func"><code>double Blink_GetBeatAtTime(double time, double quantum)</code></div>
	<div class="e_func"><code><em>double </em> Blink_GetBeatAtTime(time, quantum) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("Blink_GetBeatAtTime", time, quantum) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.Blink_GetBeatAtTime(<em>number</em> time, <em>number</em> quantum)</code></div>
	<div class="p_func"><code><em>Float</em>  Blink_GetBeatAtTime(<em>Float</em> time, <em>Float</em> quantum)</code></div>
	<p>Get session beat value corresponding to given time for given quantum.</p>
</div>

<div class="function_definition" id="Blink_GetClockNow">
	<div class="c_func"><code>double Blink_GetClockNow()</code></div>
	<div class="e_func"><code><em>double </em> Blink_GetClockNow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("Blink_GetClockNow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.Blink_GetClockNow()</code></div>
	<div class="p_func"><code><em>Float</em>  Blink_GetClockNow()</code></div>
	<p>Clock used by Blink.</p>
</div>

<div class="function_definition" id="Blink_GetEnabled">
	<div class="c_func"><code>bool Blink_GetEnabled()</code></div>
	<div class="e_func"><code><em>bool </em> Blink_GetEnabled() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("Blink_GetEnabled") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.Blink_GetEnabled()</code></div>
	<div class="p_func"><code><em>Boolean</em>  Blink_GetEnabled()</code></div>
	<p>Is Blink currently enabled?</p>
</div>

<div class="function_definition" id="Blink_GetMaster">
	<div class="c_func"><code>bool Blink_GetMaster()</code></div>
	<div class="e_func"><code><em>bool </em> Blink_GetMaster() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("Blink_GetMaster") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.Blink_GetMaster()</code></div>
	<div class="p_func"><code><em>Boolean</em>  Blink_GetMaster()</code></div>
	<p>Is Blink Master?</p>
</div>

<div class="function_definition" id="Blink_GetNumPeers">
	<div class="c_func"><code>int Blink_GetNumPeers()</code></div>
	<div class="e_func"><code><em>int </em> Blink_GetNumPeers() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("Blink_GetNumPeers") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.Blink_GetNumPeers()</code></div>
	<div class="p_func"><code><em>Int</em>  Blink_GetNumPeers()</code></div>
	<p>How many peers are currently connected in Link session?</p>
</div>

<div class="function_definition" id="Blink_GetPhaseAtTime">
	<div class="c_func"><code>double Blink_GetPhaseAtTime(double time, double quantum)</code></div>
	<div class="e_func"><code><em>double </em> Blink_GetPhaseAtTime(time, quantum) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("Blink_GetPhaseAtTime", time, quantum) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.Blink_GetPhaseAtTime(<em>number</em> time, <em>number</em> quantum)</code></div>
	<div class="p_func"><code><em>Float</em>  Blink_GetPhaseAtTime(<em>Float</em> time, <em>Float</em> quantum)</code></div>
	<p>Get session phase at given time for given quantum.</p>
</div>

<div class="function_definition" id="Blink_GetPlaying">
	<div class="c_func"><code>bool Blink_GetPlaying()</code></div>
	<div class="e_func"><code><em>bool </em> Blink_GetPlaying() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("Blink_GetPlaying") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.Blink_GetPlaying()</code></div>
	<div class="p_func"><code><em>Boolean</em>  Blink_GetPlaying()</code></div>
	<p>Is transport playing?</p>
</div>

<div class="function_definition" id="Blink_GetPuppet">
	<div class="c_func"><code>bool Blink_GetPuppet()</code></div>
	<div class="e_func"><code><em>bool </em> Blink_GetPuppet() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("Blink_GetPuppet") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.Blink_GetPuppet()</code></div>
	<div class="p_func"><code><em>Boolean</em>  Blink_GetPuppet()</code></div>
	<p>Is Blink Puppet?</p>
</div>

<div class="function_definition" id="Blink_GetQuantum">
	<div class="c_func"><code>double Blink_GetQuantum()</code></div>
	<div class="e_func"><code><em>double </em> Blink_GetQuantum() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("Blink_GetQuantum") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.Blink_GetQuantum()</code></div>
	<div class="p_func"><code><em>Float</em>  Blink_GetQuantum()</code></div>
	<p>Get quantum.</p>
</div>

<div class="function_definition" id="Blink_GetStartStopSyncEnabled">
	<div class="c_func"><code>bool Blink_GetStartStopSyncEnabled()</code></div>
	<div class="e_func"><code><em>bool </em> Blink_GetStartStopSyncEnabled() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("Blink_GetStartStopSyncEnabled") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.Blink_GetStartStopSyncEnabled()</code></div>
	<div class="p_func"><code><em>Boolean</em>  Blink_GetStartStopSyncEnabled()</code></div>
	<p>Is start/stop synchronization enabled?</p>
</div>

<div class="function_definition" id="Blink_GetTempo">
	<div class="c_func"><code>double Blink_GetTempo()</code></div>
	<div class="e_func"><code><em>double </em> Blink_GetTempo() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("Blink_GetTempo") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.Blink_GetTempo()</code></div>
	<div class="p_func"><code><em>Float</em>  Blink_GetTempo()</code></div>
	<p>Tempo of timeline, in quarter note Beats Per Minute.</p>
</div>

<div class="function_definition" id="Blink_GetTimeAtBeat">
	<div class="c_func"><code>double Blink_GetTimeAtBeat(double beat, double quantum)</code></div>
	<div class="e_func"><code><em>double </em> Blink_GetTimeAtBeat(beat, quantum) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("Blink_GetTimeAtBeat", beat, quantum) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.Blink_GetTimeAtBeat(<em>number</em> beat, <em>number</em> quantum)</code></div>
	<div class="p_func"><code><em>Float</em>  Blink_GetTimeAtBeat(<em>Float</em> beat, <em>Float</em> quantum)</code></div>
	<p>Get time at which given beat occurs for given quantum.</p>
</div>

<div class="function_definition" id="Blink_GetTimeForPlaying">
	<div class="c_func"><code>double Blink_GetTimeForPlaying()</code></div>
	<div class="e_func"><code><em>double </em> Blink_GetTimeForPlaying() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("Blink_GetTimeForPlaying") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.Blink_GetTimeForPlaying()</code></div>
	<div class="p_func"><code><em>Float</em>  Blink_GetTimeForPlaying()</code></div>
	<p>Get time at which transport start/stop occurs.</p>
</div>

<div class="function_definition" id="Blink_GetVersion">
	<div class="c_func"><code>double Blink_GetVersion()</code></div>
	<div class="e_func"><code><em>double </em> Blink_GetVersion() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("Blink_GetVersion") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.Blink_GetVersion()</code></div>
	<div class="p_func"><code><em>Float</em>  Blink_GetVersion()</code></div>
	<p>Get Blink version.</p>
</div>

<div class="function_definition" id="Blink_SetBeatAtStartPlayingTimeRequest">
	<div class="c_func"><code>void Blink_SetBeatAtStartPlayingTimeRequest(double beat, double quantum)</code></div>
	<div class="e_func"><code>Blink_SetBeatAtStartPlayingTimeRequest(beat, quantum) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_SetBeatAtStartPlayingTimeRequest", beat, quantum) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_SetBeatAtStartPlayingTimeRequest(<em>number</em> beat, <em>number</em> quantum)</code></div>
	<div class="p_func"><code>Blink_SetBeatAtStartPlayingTimeRequest(<em>Float</em> beat, <em>Float</em> quantum)</code></div>
	<p>Convenience function to attempt to map given beat to time when transport is starting to play in context of given quantum. This function evaluates to a no-op if GetPlaying() equals false.</p>
</div>

<div class="function_definition" id="Blink_SetBeatAtTimeForce">
	<div class="c_func"><code>void Blink_SetBeatAtTimeForce(double bpm, double time, double quantum)</code></div>
	<div class="e_func"><code>Blink_SetBeatAtTimeForce(bpm, time, quantum) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_SetBeatAtTimeForce", bpm, time, quantum) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_SetBeatAtTimeForce(<em>number</em> bpm, <em>number</em> time, <em>number</em> quantum)</code></div>
	<div class="p_func"><code>Blink_SetBeatAtTimeForce(<em>Float</em> bpm, <em>Float</em> time, <em>Float</em> quantum)</code></div>
	<p>Rudely re-map beat/time relationship for all peers in Link session.</p>
</div>

<div class="function_definition" id="Blink_SetBeatAtTimeRequest">
	<div class="c_func"><code>void Blink_SetBeatAtTimeRequest(double bpm, double time, double quantum)</code></div>
	<div class="e_func"><code>Blink_SetBeatAtTimeRequest(bpm, time, quantum) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_SetBeatAtTimeRequest", bpm, time, quantum) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_SetBeatAtTimeRequest(<em>number</em> bpm, <em>number</em> time, <em>number</em> quantum)</code></div>
	<div class="p_func"><code>Blink_SetBeatAtTimeRequest(<em>Float</em> bpm, <em>Float</em> time, <em>Float</em> quantum)</code></div>
	<p>Attempt to map given beat to given time in context of given quantum.</p>
</div>

<div class="function_definition" id="Blink_SetCaptureTransportCommands">
	<div class="c_func"><code>void Blink_SetCaptureTransportCommands(bool enable)</code></div>
	<div class="e_func"><code>Blink_SetCaptureTransportCommands(<em>bool </em>enable) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_SetCaptureTransportCommands", <em>bool </em>enable) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_SetCaptureTransportCommands(<em>boolean</em> enable)</code></div>
	<div class="p_func"><code>Blink_SetCaptureTransportCommands(<em>Boolean</em> enable)</code></div>
	<p>Captures REAPER Transport commands and 'Tempo: Increase/Decrease current project tempo by 01 BPM' commands and broadcasts them into Link session. When used with Master or Puppet mode enabled, provides better integration between REAPER and Link session transport and tempos.</p>
</div>

<div class="function_definition" id="Blink_SetEnabled">
	<div class="c_func"><code>void Blink_SetEnabled(bool enable)</code></div>
	<div class="e_func"><code>Blink_SetEnabled(<em>bool </em>enable) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_SetEnabled", <em>bool </em>enable) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_SetEnabled(<em>boolean</em> enable)</code></div>
	<div class="p_func"><code>Blink_SetEnabled(<em>Boolean</em> enable)</code></div>
	<p>Enable/disable Blink. In Blink methods transport, tempo and timeline refer to Link session, not local REAPER instance.</p>
</div>

<div class="function_definition" id="Blink_SetMaster">
	<div class="c_func"><code>void Blink_SetMaster(bool enable)</code></div>
	<div class="e_func"><code>Blink_SetMaster(<em>bool </em>enable) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_SetMaster", <em>bool </em>enable) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_SetMaster(<em>boolean</em> enable)</code></div>
	<div class="p_func"><code>Blink_SetMaster(<em>Boolean</em> enable)</code></div>
	<p>Set Blink as Master. Puppet needs to be enabled first. Same as Puppet, but possible beat offset is broadcast to Link session, effectively forcing local REAPER timeline on peers. Only one, if any, Blink should be Master in Link session.</p>
</div>

<div class="function_definition" id="Blink_SetPlaying">
	<div class="c_func"><code>void Blink_SetPlaying(bool playing, double time)</code></div>
	<div class="e_func"><code>Blink_SetPlaying(<em>bool </em>playing, time) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_SetPlaying", <em>bool </em>playing, time) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_SetPlaying(<em>boolean</em> playing, <em>number</em> time)</code></div>
	<div class="p_func"><code>Blink_SetPlaying(<em>Boolean</em> playing, <em>Float</em> time)</code></div>
	<p>Set if transport should be playing or stopped, taking effect at given time.</p>
</div>

<div class="function_definition" id="Blink_SetPlayingAndBeatAtTimeRequest">
	<div class="c_func"><code>void Blink_SetPlayingAndBeatAtTimeRequest(bool playing, double time, double beat, double quantum)</code></div>
	<div class="e_func"><code>Blink_SetPlayingAndBeatAtTimeRequest(<em>bool </em>playing, time, beat, quantum) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_SetPlayingAndBeatAtTimeRequest", <em>bool </em>playing, time, beat, quantum) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_SetPlayingAndBeatAtTimeRequest(<em>boolean</em> playing, <em>number</em> time, <em>number</em> beat, <em>number</em> quantum)</code></div>
	<div class="p_func"><code>Blink_SetPlayingAndBeatAtTimeRequest(<em>Boolean</em> playing, <em>Float</em> time, <em>Float</em> beat, <em>Float</em> quantum)</code></div>
	<p>Convenience function to start or stop transport at given time and attempt to map given beat to this time in context of given quantum.</p>
</div>

<div class="function_definition" id="Blink_SetPuppet">
	<div class="c_func"><code>void Blink_SetPuppet(bool enable)</code></div>
	<div class="e_func"><code>Blink_SetPuppet(<em>bool </em>enable) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_SetPuppet", <em>bool </em>enable) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_SetPuppet(<em>boolean</em> enable)</code></div>
	<div class="p_func"><code>Blink_SetPuppet(<em>Boolean</em> enable)</code></div>
	<p>Set Blink as Puppet. When enabled, Blink attempts to synchronize local REAPER tempo to Link session tempo by adjusting current active tempo/time signature marker, or broadcasts local REAPER tempo changes into Link session, and attempts to correct possible offset by adjusting REAPER playrate. Based on cumulative single beat phase since Link session transport start, regardless of quantum.</p>
</div>

<div class="function_definition" id="Blink_SetQuantum">
	<div class="c_func"><code>void Blink_SetQuantum(double quantum)</code></div>
	<div class="e_func"><code>Blink_SetQuantum(quantum) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_SetQuantum", quantum) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_SetQuantum(<em>number</em> quantum)</code></div>
	<div class="p_func"><code>Blink_SetQuantum(<em>Float</em> quantum)</code></div>
	<p>Set quantum. Usually this is set to length of one measure/bar in quarter notes.</p>
</div>

<div class="function_definition" id="Blink_SetStartStopSyncEnabled">
	<div class="c_func"><code>void Blink_SetStartStopSyncEnabled(bool enable)</code></div>
	<div class="e_func"><code>Blink_SetStartStopSyncEnabled(<em>bool </em>enable) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_SetStartStopSyncEnabled", <em>bool </em>enable) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_SetStartStopSyncEnabled(<em>boolean</em> enable)</code></div>
	<div class="p_func"><code>Blink_SetStartStopSyncEnabled(<em>Boolean</em> enable)</code></div>
	<p>Enable start/stop synchronization.</p>
</div>

<div class="function_definition" id="Blink_SetTempo">
	<div class="c_func"><code>void Blink_SetTempo(double bpm)</code></div>
	<div class="e_func"><code>Blink_SetTempo(bpm) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_SetTempo", bpm) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_SetTempo(<em>number</em> bpm)</code></div>
	<div class="p_func"><code>Blink_SetTempo(<em>Float</em> bpm)</code></div>
	<p>Set timeline tempo to given bpm value.</p>
</div>

<div class="function_definition" id="Blink_SetTempoAtTime">
	<div class="c_func"><code>void Blink_SetTempoAtTime(double bpm, double time)</code></div>
	<div class="e_func"><code>Blink_SetTempoAtTime(bpm, time) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_SetTempoAtTime", bpm, time) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_SetTempoAtTime(<em>number</em> bpm, <em>number</em> time)</code></div>
	<div class="p_func"><code>Blink_SetTempoAtTime(<em>Float</em> bpm, <em>Float</em> time)</code></div>
	<p>Set tempo to given bpm value, taking effect at given time.</p>
</div>

<div class="function_definition" id="Blink_StartStop">
	<div class="c_func"><code>void Blink_StartStop()</code></div>
	<div class="e_func"><code>Blink_StartStop() </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Blink_StartStop") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Blink_StartStop()</code></div>
	<div class="p_func"><code>Blink_StartStop()</code></div>
	<p>Transport start/stop.</p>
</div>

<div class="function_definition" id="CF_CreatePreview">
	<div class="c_func"><code>CF_Preview* CF_CreatePreview(PCM_source* source)</code></div>
	<div class="e_func"><code><em>CF_Preview</em>  CF_CreatePreview(<em>PCM_source</em> source) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>CF_Preview</em>  extension_api("CF_CreatePreview", <em>PCM_source</em> source) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>CF_Preview</em> reaper.CF_CreatePreview(<em>PCM_source</em> source)</code></div>
	<div class="p_func"><code><em>CF_Preview</em>  CF_CreatePreview(<em>PCM_source</em> source)</code></div>
	<p>Create a new preview object. Does not take ownership of the source (don't forget to destroy it unless it came from a take!). See <a href="#CF_Preview_Play">CF_Preview_Play</a> and the others CF_Preview_* functions.<br>
</p><p>
The preview object is automatically destroyed at the end of a defer cycle if at least one of these conditions are met:<br>
- playback finished<br>
- playback was not started using CF_Preview_Play<br>
- the output track no longer exists</p>
</div>

<div class="function_definition" id="CF_EnumMediaSourceCues">
	<div class="c_func"><code>int CF_EnumMediaSourceCues(PCM_source* src, int index, double* timeOut, double* endTimeOut, bool* isRegionOut, char* nameOut, int nameOut_sz, bool* isChapterOut)</code></div>
	<div class="e_func"><code><em>int </em> CF_EnumMediaSourceCues(<em>PCM_source</em> src, <em>int </em>index, <em>&amp;</em>time, <em>&amp;</em>endTime, <em>bool &amp;</em>isRegion, #name, <em>bool &amp;</em>isChapter) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("CF_EnumMediaSourceCues", <em>PCM_source</em> src, <em>int </em>index, <em>&amp;</em>time, <em>&amp;</em>endTime, <em>bool &amp;</em>isRegion, #name, <em>bool &amp;</em>isChapter) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>number </em>time, <em>number </em>endTime, <em>boolean </em>isRegion, <em>string </em>name, <em>boolean </em>isChapter = reaper.CF_EnumMediaSourceCues(<em>PCM_source</em> src, <em>integer</em> index)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>PCM_source</em> src, <em>Int</em> index, <em>Float</em> timeOut, <em>Float</em> endTimeOut, <em>Boolean</em> isRegionOut, <em>String</em> nameOut, <em>Int</em> nameOut_sz, <em>Boolean</em> isChapterOut) = CF_EnumMediaSourceCues(src, index, timeOut, endTimeOut, isRegionOut, nameOut, nameOut_sz, isChapterOut)</code></div>
	<p>Enumerate the source's media cues. Returns the next index or 0 when finished.</p>
</div>

<div class="function_definition" id="CF_EnumSelectedFX">
	<div class="c_func"><code>int CF_EnumSelectedFX(FxChain* hwnd, int index)</code></div>
	<div class="e_func"><code><em>int </em> CF_EnumSelectedFX(<em>FxChain</em> hwnd, <em>int </em>index) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("CF_EnumSelectedFX", <em>FxChain</em> hwnd, <em>int </em>index) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.CF_EnumSelectedFX(<em>FxChain</em> hwnd, <em>integer</em> index)</code></div>
	<div class="p_func"><code><em>Int</em>  CF_EnumSelectedFX(<em>FxChain</em> hwnd, <em>Int</em> index)</code></div>
	<p>Return the index of the next selected effect in the given FX chain. Start index should be -1. Returns -1 if there are no more selected effects.</p>
</div>

<div class="function_definition" id="CF_EnumerateActions">
	<div class="c_func"><code>int CF_EnumerateActions(int section, int index, char* nameOut, int nameOut_sz)</code></div>
	<div class="e_func"><code><em>int </em> CF_EnumerateActions(<em>int </em>section, <em>int </em>index, #name) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("CF_EnumerateActions", <em>int </em>section, <em>int </em>index, #name) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>name = reaper.CF_EnumerateActions(<em>integer</em> section, <em>integer</em> index)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>Int</em> section, <em>Int</em> index, <em>String</em> nameOut, <em>Int</em> nameOut_sz) = CF_EnumerateActions(section, index, nameOut, nameOut_sz)</code></div>
	<p>Deprecated, see <a href="#kbd_enumerateActions">kbd_enumerateActions</a> (v6.71+). Wrapper for the unexposed kbd_enumerateActions API function.<br>
Main=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063</p>
</div>

<div class="function_definition" id="CF_ExportMediaSource">
	<div class="c_func"><code>bool CF_ExportMediaSource(PCM_source* src, const char* fn)</code></div>
	<div class="e_func"><code><em>bool </em> CF_ExportMediaSource(<em>PCM_source</em> src, "fn") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_ExportMediaSource", <em>PCM_source</em> src, "fn") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.CF_ExportMediaSource(<em>PCM_source</em> src, <em>string</em> fn)</code></div>
	<div class="p_func"><code><em>Boolean</em>  CF_ExportMediaSource(<em>PCM_source</em> src, <em>String</em> fn)</code></div>
	<p>Export the source to the given file (MIDI only).</p>
</div>

<div class="function_definition" id="CF_GetClipboard">
	<div class="c_func"><code>void CF_GetClipboard(char* textOutNeedBig, int textOutNeedBig_sz)</code></div>
	<div class="e_func"><code>CF_GetClipboard(#text) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("CF_GetClipboard", #text) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>text = reaper.CF_GetClipboard()</code></div>
	<div class="p_func"><code>(<em>String</em> textOutNeedBig, <em>Int</em> textOutNeedBig_sz) = CF_GetClipboard(textOutNeedBig, textOutNeedBig_sz)</code></div>
	<p>Read the contents of the system clipboard.</p>
</div>

<div class="function_definition" id="CF_GetClipboardBig">
	<div class="c_func"><code>const char* CF_GetClipboardBig(WDL_FastString* output)</code></div>
	<div class="e_func"><code>bool  CF_GetClipboardBig(#retval, <em>WDL_FastString</em> output) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>bool  extension_api("CF_GetClipboardBig", #retval, <em>WDL_FastString</em> output) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string</em> reaper.CF_GetClipboardBig(<em>WDL_FastString</em> output)</code></div>
	<div class="p_func"><code><em>String</em>  CF_GetClipboardBig(<em>WDL_FastString</em> output)</code></div>
	<p>[DEPRECATED: Use <a href="#CF_GetClipboard">CF_GetClipboard</a>] Read the contents of the system clipboard. See <a href="#SNM_CreateFastString">SNM_CreateFastString</a> and <a href="#SNM_DeleteFastString">SNM_DeleteFastString</a>.</p>
</div>

<div class="function_definition" id="CF_GetCommandText">
	<div class="c_func"><code>const char* CF_GetCommandText(int section, int command)</code></div>
	<div class="e_func"><code>bool  CF_GetCommandText(#retval, <em>int </em>section, <em>int </em>command) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>bool  extension_api("CF_GetCommandText", #retval, <em>int </em>section, <em>int </em>command) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string</em> reaper.CF_GetCommandText(<em>integer</em> section, <em>integer</em> command)</code></div>
	<div class="p_func"><code><em>String</em>  CF_GetCommandText(<em>Int</em> section, <em>Int</em> command)</code></div>
	<p>Deprecated, see <a href="#kbd_getTextFromCmd">kbd_getTextFromCmd</a> (v6.71+). Wrapper for the unexposed kbd_getTextFromCmd API function. See <a href='#CF_EnumerateActions'>CF_EnumerateActions</a> for common section IDs.</p>
</div>

<div class="function_definition" id="CF_GetCustomColor">
	<div class="c_func"><code>int CF_GetCustomColor(int index)</code></div>
	<div class="e_func"><code><em>int </em> CF_GetCustomColor(<em>int </em>index) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("CF_GetCustomColor", <em>int </em>index) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.CF_GetCustomColor(<em>integer</em> index)</code></div>
	<div class="p_func"><code><em>Int</em>  CF_GetCustomColor(<em>Int</em> index)</code></div>
	<p>Get one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based.</p>
</div>

<div class="function_definition" id="CF_GetFocusedFXChain">
	<div class="c_func"><code>FxChain* CF_GetFocusedFXChain()</code></div>
	<div class="e_func"><code><em>FxChain</em>  CF_GetFocusedFXChain() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>FxChain</em>  extension_api("CF_GetFocusedFXChain") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>FxChain</em>  = reaper.CF_GetFocusedFXChain()</code></div>
	<div class="p_func"><code><em>FxChain</em>  CF_GetFocusedFXChain()</code></div>
	<p>Return a handle to the currently focused FX chain window.</p>
</div>

<div class="function_definition" id="CF_GetMediaSourceBitDepth">
	<div class="c_func"><code>int CF_GetMediaSourceBitDepth(PCM_source* src)</code></div>
	<div class="e_func"><code><em>int </em> CF_GetMediaSourceBitDepth(<em>PCM_source</em> src) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("CF_GetMediaSourceBitDepth", <em>PCM_source</em> src) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.CF_GetMediaSourceBitDepth(<em>PCM_source</em> src)</code></div>
	<div class="p_func"><code><em>Int</em>  CF_GetMediaSourceBitDepth(<em>PCM_source</em> src)</code></div>
	<p>Returns the bit depth if available (0 otherwise).</p>
</div>

<div class="function_definition" id="CF_GetMediaSourceBitRate">
	<div class="c_func"><code>double CF_GetMediaSourceBitRate(PCM_source* src)</code></div>
	<div class="e_func"><code><em>double </em> CF_GetMediaSourceBitRate(<em>PCM_source</em> src) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("CF_GetMediaSourceBitRate", <em>PCM_source</em> src) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.CF_GetMediaSourceBitRate(<em>PCM_source</em> src)</code></div>
	<div class="p_func"><code><em>Float</em>  CF_GetMediaSourceBitRate(<em>PCM_source</em> src)</code></div>
	<p>Returns the bit rate for WAVE (wav, aif) and streaming/variable formats (mp3, ogg, opus). REAPER v6.19 or later is required for non-WAVE formats.</p>
</div>

<div class="function_definition" id="CF_GetMediaSourceMetadata">
	<div class="c_func"><code>bool CF_GetMediaSourceMetadata(PCM_source* src, const char* name, char* out, int out_sz)</code></div>
	<div class="e_func"><code><em>bool </em> CF_GetMediaSourceMetadata(<em>PCM_source</em> src, "name", #out) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_GetMediaSourceMetadata", <em>PCM_source</em> src, "name", #out) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>out = reaper.CF_GetMediaSourceMetadata(<em>PCM_source</em> src, <em>string</em> name, <em>string </em>out)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>PCM_source</em> src, <em>String</em> name, <em>String</em> out, <em>Int</em> out_sz) = CF_GetMediaSourceMetadata(src, name, out, out_sz)</code></div>
	<p>Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF).</p>
</div>

<div class="function_definition" id="CF_GetMediaSourceOnline">
	<div class="c_func"><code>bool CF_GetMediaSourceOnline(PCM_source* src)</code></div>
	<div class="e_func"><code><em>bool </em> CF_GetMediaSourceOnline(<em>PCM_source</em> src) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_GetMediaSourceOnline", <em>PCM_source</em> src) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.CF_GetMediaSourceOnline(<em>PCM_source</em> src)</code></div>
	<div class="p_func"><code><em>Boolean</em>  CF_GetMediaSourceOnline(<em>PCM_source</em> src)</code></div>
	<p>Returns the online/offline status of the given source.</p>
</div>

<div class="function_definition" id="CF_GetMediaSourceRPP">
	<div class="c_func"><code>bool CF_GetMediaSourceRPP(PCM_source* src, char* fnOut, int fnOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> CF_GetMediaSourceRPP(<em>PCM_source</em> src, #fn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_GetMediaSourceRPP", <em>PCM_source</em> src, #fn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>fn = reaper.CF_GetMediaSourceRPP(<em>PCM_source</em> src)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>PCM_source</em> src, <em>String</em> fnOut, <em>Int</em> fnOut_sz) = CF_GetMediaSourceRPP(src, fnOut, fnOut_sz)</code></div>
	<p>Get the project associated with this source (BWF, subproject...).</p>
</div>

<div class="function_definition" id="CF_GetSWSVersion">
	<div class="c_func"><code>void CF_GetSWSVersion(char* versionOut, int versionOut_sz)</code></div>
	<div class="e_func"><code>CF_GetSWSVersion(#version) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("CF_GetSWSVersion", #version) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>version = reaper.CF_GetSWSVersion()</code></div>
	<div class="p_func"><code>(<em>String</em> versionOut, <em>Int</em> versionOut_sz) = CF_GetSWSVersion(versionOut, versionOut_sz)</code></div>
	<p>Return the current SWS version number.</p>
</div>

<div class="function_definition" id="CF_GetTakeFXChain">
	<div class="c_func"><code>FxChain* CF_GetTakeFXChain(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>FxChain</em>  CF_GetTakeFXChain(<em>MediaItem_Take</em> take) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>FxChain</em>  extension_api("CF_GetTakeFXChain", <em>MediaItem_Take</em> take) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>FxChain</em> reaper.CF_GetTakeFXChain(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>FxChain</em>  CF_GetTakeFXChain(<em>MediaItem_Take</em> take)</code></div>
	<p>Return a handle to the given take FX chain window. HACK: This temporarily renames the take in order to disambiguate the take FX chain window from similarily named takes.</p>
</div>

<div class="function_definition" id="CF_GetTrackFXChain">
	<div class="c_func"><code>FxChain* CF_GetTrackFXChain(MediaTrack* track)</code></div>
	<div class="e_func"><code><em>FxChain</em>  CF_GetTrackFXChain(<em>MediaTrack</em> track) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>FxChain</em>  extension_api("CF_GetTrackFXChain", <em>MediaTrack</em> track) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>FxChain</em> reaper.CF_GetTrackFXChain(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>FxChain</em>  CF_GetTrackFXChain(<em>MediaTrack</em> track)</code></div>
	<p>Return a handle to the given track FX chain window.</p>
</div>

<div class="function_definition" id="CF_GetTrackFXChainEx">
	<div class="c_func"><code>FxChain* CF_GetTrackFXChainEx(ReaProject* project, MediaTrack* track, bool wantInputChain)</code></div>
	<div class="e_func"><code><em>FxChain</em>  CF_GetTrackFXChainEx(<em>ReaProject</em> project, <em>MediaTrack</em> track, <em>bool </em>wantInputChain) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>FxChain</em>  extension_api("CF_GetTrackFXChainEx", <em>ReaProject</em> project, <em>MediaTrack</em> track, <em>bool </em>wantInputChain) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>FxChain</em> reaper.CF_GetTrackFXChainEx(<em>ReaProject</em> project, <em>MediaTrack</em> track, <em>boolean</em> wantInputChain)</code></div>
	<div class="p_func"><code><em>FxChain</em>  CF_GetTrackFXChainEx(<em>ReaProject</em> project, <em>MediaTrack</em> track, <em>Boolean</em> wantInputChain)</code></div>
	<p>Return a handle to the given track FX chain window. Set wantInputChain to get the track's input/monitoring FX chain.</p>
</div>

<div class="function_definition" id="CF_LocateInExplorer">
	<div class="c_func"><code>bool CF_LocateInExplorer(const char* file)</code></div>
	<div class="e_func"><code><em>bool </em> CF_LocateInExplorer("file") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_LocateInExplorer", "file") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.CF_LocateInExplorer(<em>string</em> file)</code></div>
	<div class="p_func"><code><em>Boolean</em>  CF_LocateInExplorer(<em>String</em> file)</code></div>
	<p>Select the given file in explorer/finder.</p>
</div>

<div class="function_definition" id="CF_PCM_Source_SetSectionInfo">
	<div class="c_func"><code>bool CF_PCM_Source_SetSectionInfo(PCM_source* section, PCM_source* source, double offset, double length, bool reverse)</code></div>
	<div class="e_func"><code><em>bool </em> CF_PCM_Source_SetSectionInfo(<em>PCM_source</em> section, <em>PCM_source</em> source, offset, length, <em>bool </em>reverse) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_PCM_Source_SetSectionInfo", <em>PCM_source</em> section, <em>PCM_source</em> source, offset, length, <em>bool </em>reverse) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.CF_PCM_Source_SetSectionInfo(<em>PCM_source</em> section, <em>PCM_source</em> source, <em>number</em> offset, <em>number</em> length, <em>boolean</em> reverse)</code></div>
	<div class="p_func"><code><em>Boolean</em>  CF_PCM_Source_SetSectionInfo(<em>PCM_source</em> section, <em>PCM_source</em> source, <em>Float</em> offset, <em>Float</em> length, <em>Boolean</em> reverse)</code></div>
	<p>Give a section source created using PCM_Source_CreateFromType("SECTION"). Offset and length are ignored if 0. Negative length to subtract from the total length of the source.</p>
</div>

<div class="function_definition" id="CF_Preview_GetPeak">
	<div class="c_func"><code>bool CF_Preview_GetPeak(CF_Preview* preview, int channel, double* peakvolOut)</code></div>
	<div class="e_func"><code><em>bool </em> CF_Preview_GetPeak(<em>CF_Preview</em> preview, <em>int </em>channel, <em>&amp;</em>peakvol) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_Preview_GetPeak", <em>CF_Preview</em> preview, <em>int </em>channel, <em>&amp;</em>peakvol) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>peakvol = reaper.CF_Preview_GetPeak(<em>CF_Preview</em> preview, <em>integer</em> channel)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>CF_Preview</em> preview, <em>Int</em> channel, <em>Float</em> peakvolOut) = CF_Preview_GetPeak(preview, channel, peakvolOut)</code></div>
	<p>Read peak volume for channel 0 or 1. Only available when outputting to a hardware output (not through a track).</p>
</div>

<div class="function_definition" id="CF_Preview_GetValue">
	<div class="c_func"><code>bool CF_Preview_GetValue(CF_Preview* preview, const char* name, double* valueOut)</code></div>
	<div class="e_func"><code><em>bool </em> CF_Preview_GetValue(<em>CF_Preview</em> preview, "name", <em>&amp;</em>value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_Preview_GetValue", <em>CF_Preview</em> preview, "name", <em>&amp;</em>value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>value = reaper.CF_Preview_GetValue(<em>CF_Preview</em> preview, <em>string</em> name)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>CF_Preview</em> preview, <em>String</em> name, <em>Float</em> valueOut) = CF_Preview_GetValue(preview, name, valueOut)</code></div>
	<p>Supported attributes:<br>
B_LOOP         seek to the beginning when reaching the end of the source<br>
B_PPITCH       preserve pitch when changing playback rate<br>
D_FADEINLEN    lenght in seconds of playback fade in<br>
D_FADEOUTLEN   lenght in seconds of playback fade out<br>
D_LENGTH       (read only) length of the source * playback rate<br>
D_MEASUREALIGN &gt;0 = wait until the next bar before starting playback (note: this causes playback to silently continue when project is paused and previewing through a track)<br>
D_PAN          playback pan<br>
D_PITCH        pitch adjustment in semitones<br>
D_PLAYRATE     playback rate<br>
D_POSITION     current playback position<br>
D_VOLUME       playback volume<br>
I_OUTCHAN      first hardware output channel (&amp;1024=mono, reads -1 when playing through a track, see <a href="#CF_Preview_SetOutputTrack">CF_Preview_SetOutputTrack</a>)<br>
I_PITCHMODE    highest 16 bits=pitch shift mode (see <a href="#EnumPitchShiftModes">EnumPitchShiftModes</a>), lower 16 bits=pitch shift submode (see <a href="#EnumPitchShiftSubModes">EnumPitchShiftSubModes</a>)</p>
</div>

<div class="function_definition" id="CF_Preview_Play">
	<div class="c_func"><code>bool CF_Preview_Play(CF_Preview* preview)</code></div>
	<div class="e_func"><code><em>bool </em> CF_Preview_Play(<em>CF_Preview</em> preview) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_Preview_Play", <em>CF_Preview</em> preview) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.CF_Preview_Play(<em>CF_Preview</em> preview)</code></div>
	<div class="p_func"><code><em>Boolean</em>  CF_Preview_Play(<em>CF_Preview</em> preview)</code></div>
	<p>Start playback of the configured preview object.</p>
</div>

<div class="function_definition" id="CF_Preview_SetOutputTrack">
	<div class="c_func"><code>bool CF_Preview_SetOutputTrack(CF_Preview* preview, ReaProject* project, MediaTrack* track)</code></div>
	<div class="e_func"><code><em>bool </em> CF_Preview_SetOutputTrack(<em>CF_Preview</em> preview, <em>ReaProject</em> project, <em>MediaTrack</em> track) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_Preview_SetOutputTrack", <em>CF_Preview</em> preview, <em>ReaProject</em> project, <em>MediaTrack</em> track) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.CF_Preview_SetOutputTrack(<em>CF_Preview</em> preview, <em>ReaProject</em> project, <em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>Boolean</em>  CF_Preview_SetOutputTrack(<em>CF_Preview</em> preview, <em>ReaProject</em> project, <em>MediaTrack</em> track)</code></div>
</div>

<div class="function_definition" id="CF_Preview_SetValue">
	<div class="c_func"><code>bool CF_Preview_SetValue(CF_Preview* preview, const char* name, double newValue)</code></div>
	<div class="e_func"><code><em>bool </em> CF_Preview_SetValue(<em>CF_Preview</em> preview, "name", newValue) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_Preview_SetValue", <em>CF_Preview</em> preview, "name", newValue) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.CF_Preview_SetValue(<em>CF_Preview</em> preview, <em>string</em> name, <em>number</em> newValue)</code></div>
	<div class="p_func"><code><em>Boolean</em>  CF_Preview_SetValue(<em>CF_Preview</em> preview, <em>String</em> name, <em>Float</em> newValue)</code></div>
	<p>See <a href="#CF_Preview_GetValue">CF_Preview_GetValue</a>.</p>
</div>

<div class="function_definition" id="CF_Preview_Stop">
	<div class="c_func"><code>bool CF_Preview_Stop(CF_Preview* preview)</code></div>
	<div class="e_func"><code><em>bool </em> CF_Preview_Stop(<em>CF_Preview</em> preview) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_Preview_Stop", <em>CF_Preview</em> preview) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.CF_Preview_Stop(<em>CF_Preview</em> preview)</code></div>
	<div class="p_func"><code><em>Boolean</em>  CF_Preview_Stop(<em>CF_Preview</em> preview)</code></div>
	<p>Stop and destroy a preview object.</p>
</div>

<div class="function_definition" id="CF_Preview_StopAll">
	<div class="c_func"><code>void CF_Preview_StopAll()</code></div>
	<div class="e_func"><code>CF_Preview_StopAll() </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("CF_Preview_StopAll") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.CF_Preview_StopAll()</code></div>
	<div class="p_func"><code>CF_Preview_StopAll()</code></div>
	<p>Stop and destroy all currently active preview objects.</p>
</div>

<div class="function_definition" id="CF_SelectTrackFX">
	<div class="c_func"><code>bool CF_SelectTrackFX(MediaTrack* track, int index)</code></div>
	<div class="e_func"><code><em>bool </em> CF_SelectTrackFX(<em>MediaTrack</em> track, <em>int </em>index) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_SelectTrackFX", <em>MediaTrack</em> track, <em>int </em>index) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.CF_SelectTrackFX(<em>MediaTrack</em> track, <em>integer</em> index)</code></div>
	<div class="p_func"><code><em>Boolean</em>  CF_SelectTrackFX(<em>MediaTrack</em> track, <em>Int</em> index)</code></div>
	<p>Set which track effect is active in the track's FX chain. The FX chain window does not have to be open.</p>
</div>

<div class="function_definition" id="CF_SetClipboard">
	<div class="c_func"><code>void CF_SetClipboard(const char* str)</code></div>
	<div class="e_func"><code>CF_SetClipboard("str") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("CF_SetClipboard", "str") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.CF_SetClipboard(<em>string</em> str)</code></div>
	<div class="p_func"><code>CF_SetClipboard(<em>String</em> str)</code></div>
	<p>Write the given string into the system clipboard.</p>
</div>

<div class="function_definition" id="CF_SetCustomColor">
	<div class="c_func"><code>void CF_SetCustomColor(int index, int color)</code></div>
	<div class="e_func"><code>CF_SetCustomColor(<em>int </em>index, <em>int </em>color) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("CF_SetCustomColor", <em>int </em>index, <em>int </em>color) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.CF_SetCustomColor(<em>integer</em> index, <em>integer</em> color)</code></div>
	<div class="p_func"><code>CF_SetCustomColor(<em>Int</em> index, <em>Int</em> color)</code></div>
	<p>Set one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based.</p>
</div>

<div class="function_definition" id="CF_SetMediaSourceOnline">
	<div class="c_func"><code>void CF_SetMediaSourceOnline(PCM_source* src, bool set)</code></div>
	<div class="e_func"><code>CF_SetMediaSourceOnline(<em>PCM_source</em> src, <em>bool </em>set) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("CF_SetMediaSourceOnline", <em>PCM_source</em> src, <em>bool </em>set) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.CF_SetMediaSourceOnline(<em>PCM_source</em> src, <em>boolean</em> set)</code></div>
	<div class="p_func"><code>CF_SetMediaSourceOnline(<em>PCM_source</em> src, <em>Boolean</em> set)</code></div>
	<p>Set the online/offline status of the given source (closes files when set=false).</p>
</div>

<div class="function_definition" id="CF_ShellExecute">
	<div class="c_func"><code>bool CF_ShellExecute(const char* file)</code></div>
	<div class="e_func"><code><em>bool </em> CF_ShellExecute("file") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("CF_ShellExecute", "file") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.CF_ShellExecute(<em>string</em> file)</code></div>
	<div class="p_func"><code><em>Boolean</em>  CF_ShellExecute(<em>String</em> file)</code></div>
	<p>Open the given file or URL in the default application. See also <a href="#CF_LocateInExplorer">CF_LocateInExplorer</a>.</p>
</div>

<div class="function_definition" id="FNG_AddMidiNote">
	<div class="c_func"><code>RprMidiNote* FNG_AddMidiNote(RprMidiTake* midiTake)</code></div>
	<div class="e_func"><code><em>RprMidiNote</em>  FNG_AddMidiNote(<em>RprMidiTake</em> midiTake) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>RprMidiNote</em>  extension_api("FNG_AddMidiNote", <em>RprMidiTake</em> midiTake) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>RprMidiNote</em> reaper.FNG_AddMidiNote(<em>RprMidiTake</em> midiTake)</code></div>
	<div class="p_func"><code><em>RprMidiNote</em>  FNG_AddMidiNote(<em>RprMidiTake</em> midiTake)</code></div>
	<p>[FNG] Add MIDI note to MIDI take</p>
</div>

<div class="function_definition" id="FNG_AllocMidiTake">
	<div class="c_func"><code>RprMidiTake* FNG_AllocMidiTake(MediaItem_Take* take)</code></div>
	<div class="e_func"><code><em>RprMidiTake</em>  FNG_AllocMidiTake(<em>MediaItem_Take</em> take) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>RprMidiTake</em>  extension_api("FNG_AllocMidiTake", <em>MediaItem_Take</em> take) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>RprMidiTake</em> reaper.FNG_AllocMidiTake(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code><em>RprMidiTake</em>  FNG_AllocMidiTake(<em>MediaItem_Take</em> take)</code></div>
	<p>[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take</p>
</div>

<div class="function_definition" id="FNG_CountMidiNotes">
	<div class="c_func"><code>int FNG_CountMidiNotes(RprMidiTake* midiTake)</code></div>
	<div class="e_func"><code><em>int </em> FNG_CountMidiNotes(<em>RprMidiTake</em> midiTake) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("FNG_CountMidiNotes", <em>RprMidiTake</em> midiTake) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.FNG_CountMidiNotes(<em>RprMidiTake</em> midiTake)</code></div>
	<div class="p_func"><code><em>Int</em>  FNG_CountMidiNotes(<em>RprMidiTake</em> midiTake)</code></div>
	<p>[FNG] Count of how many MIDI notes are in the MIDI take</p>
</div>

<div class="function_definition" id="FNG_FreeMidiTake">
	<div class="c_func"><code>void FNG_FreeMidiTake(RprMidiTake* midiTake)</code></div>
	<div class="e_func"><code>FNG_FreeMidiTake(<em>RprMidiTake</em> midiTake) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("FNG_FreeMidiTake", <em>RprMidiTake</em> midiTake) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.FNG_FreeMidiTake(<em>RprMidiTake</em> midiTake)</code></div>
	<div class="p_func"><code>FNG_FreeMidiTake(<em>RprMidiTake</em> midiTake)</code></div>
	<p>[FNG] Commit changes to MIDI take and free allocated memory</p>
</div>

<div class="function_definition" id="FNG_GetMidiNote">
	<div class="c_func"><code>RprMidiNote* FNG_GetMidiNote(RprMidiTake* midiTake, int index)</code></div>
	<div class="e_func"><code><em>RprMidiNote</em>  FNG_GetMidiNote(<em>RprMidiTake</em> midiTake, <em>int </em>index) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>RprMidiNote</em>  extension_api("FNG_GetMidiNote", <em>RprMidiTake</em> midiTake, <em>int </em>index) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>RprMidiNote</em> reaper.FNG_GetMidiNote(<em>RprMidiTake</em> midiTake, <em>integer</em> index)</code></div>
	<div class="p_func"><code><em>RprMidiNote</em>  FNG_GetMidiNote(<em>RprMidiTake</em> midiTake, <em>Int</em> index)</code></div>
	<p>[FNG] Get a MIDI note from a MIDI take at specified index</p>
</div>

<div class="function_definition" id="FNG_GetMidiNoteIntProperty">
	<div class="c_func"><code>int FNG_GetMidiNoteIntProperty(RprMidiNote* midiNote, const char* property)</code></div>
	<div class="e_func"><code><em>int </em> FNG_GetMidiNoteIntProperty(<em>RprMidiNote</em> midiNote, "property") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("FNG_GetMidiNoteIntProperty", <em>RprMidiNote</em> midiNote, "property") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.FNG_GetMidiNoteIntProperty(<em>RprMidiNote</em> midiNote, <em>string</em> property)</code></div>
	<div class="p_func"><code><em>Int</em>  FNG_GetMidiNoteIntProperty(<em>RprMidiNote</em> midiNote, <em>String</em> property)</code></div>
	<p>[FNG] Get MIDI note property</p>
</div>

<div class="function_definition" id="FNG_SetMidiNoteIntProperty">
	<div class="c_func"><code>void FNG_SetMidiNoteIntProperty(RprMidiNote* midiNote, const char* property, int value)</code></div>
	<div class="e_func"><code>FNG_SetMidiNoteIntProperty(<em>RprMidiNote</em> midiNote, "property", <em>int </em>value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("FNG_SetMidiNoteIntProperty", <em>RprMidiNote</em> midiNote, "property", <em>int </em>value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.FNG_SetMidiNoteIntProperty(<em>RprMidiNote</em> midiNote, <em>string</em> property, <em>integer</em> value)</code></div>
	<div class="p_func"><code>FNG_SetMidiNoteIntProperty(<em>RprMidiNote</em> midiNote, <em>String</em> property, <em>Int</em> value)</code></div>
	<p>[FNG] Set MIDI note property</p>
</div>

<div class="function_definition" id="Fab_Clear">
	<div class="c_func"><code>bool Fab_Clear(const char* idStringInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> Fab_Clear(<em>optional </em>"idStringIn") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("Fab_Clear", <em>optional </em>"idStringIn") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.Fab_Clear(<em>optional </em><em>string</em> idStringIn)</code></div>
	<div class="p_func"><code><em>Boolean</em>  Fab_Clear(<em>String</em> idStringInOptional)</code></div>
	<p>Clears ReaFab control map, optionally based on matching idString. Returns true on success.</p>
</div>

<div class="function_definition" id="Fab_Do">
	<div class="c_func"><code>bool Fab_Do(int command, int val)</code></div>
	<div class="e_func"><code><em>bool </em> Fab_Do(<em>int </em>command, <em>int </em>val) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("Fab_Do", <em>int </em>command, <em>int </em>val) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.Fab_Do(<em>integer</em> command, <em>integer</em> val)</code></div>
	<div class="p_func"><code><em>Boolean</em>  Fab_Do(<em>Int</em> command, <em>Int</em> val)</code></div>
	<p>Runs ReaFab actions/commands. First parameter (command) is ReaFab command number, e.g. 3 for 3rd encoder rotation. Second parameter (val) is MIDI CC Relative value. Value 1 is increment of 1, 127 is decrement of 1. 2 is inc 2, 126 is dec 2 and so on. For button press (commands 9-32) a value of 127 is recommended.</p>
</div>

<div class="function_definition" id="Fab_Dump">
	<div class="c_func"><code>void Fab_Dump()</code></div>
	<div class="e_func"><code>Fab_Dump() </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Fab_Dump") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Fab_Dump()</code></div>
	<div class="p_func"><code>Fab_Dump()</code></div>
	<p>Dumps current control mapping into .lua file under ResourcePath/Scripts/reafab_dump-timestamp.lua</p>
</div>

<div class="function_definition" id="Fab_Get">
	<div class="c_func"><code>bool Fab_Get(int command, int* fxOut, int* paramOut)</code></div>
	<div class="e_func"><code><em>bool </em> Fab_Get(<em>int </em>command, <em>int &amp;</em>fx, <em>int &amp;</em>param) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("Fab_Get", <em>int </em>command, <em>int &amp;</em>fx, <em>int &amp;</em>param) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>fx, <em>integer </em>param = reaper.Fab_Get(<em>integer</em> command)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>Int</em> command, <em>Int</em> fxOut, <em>Int</em> paramOut) = Fab_Get(command, fxOut, paramOut)</code></div>
	<p>Returns target FX and parameter index for given ReaFab command in context of selected track and ReaFab FX index. Valid command range 1 ... 24. Returns false if no such command mapping is found. Returns param index -1 for ReaFab internal band change command.</p>
</div>

<div class="function_definition" id="Fab_Map">
	<div class="c_func"><code>bool Fab_Map(const char* fxId, int command, const char* paramId, int control, int* bandsInOptional, double* stepInOptional, double* accelInOptional, double* minvalInOptional, double* maxvalInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> Fab_Map("fxId", <em>int </em>command, "paramId", <em>int </em>control, <em>optional int</em> bandsIn, <em>optional </em>stepIn, <em>optional </em>accelIn, <em>optional </em>minvalIn, <em>optional </em>maxvalIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("Fab_Map", "fxId", <em>int </em>command, "paramId", <em>int </em>control, <em>optional int</em> bandsIn, <em>optional </em>stepIn, <em>optional </em>accelIn, <em>optional </em>minvalIn, <em>optional </em>maxvalIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.Fab_Map(<em>string</em> fxId, <em>integer</em> command, <em>string</em> paramId, <em>integer</em> control, <em>optional integer</em> bandsIn, <em>optional number </em>stepIn, <em>optional number </em>accelIn, <em>optional number </em>minvalIn, <em>optional number </em>maxvalIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> fxId, <em>Int</em> command, <em>String</em> paramId, <em>Int</em> control, <em>Int</em> bandsInOptional, <em>Float</em> stepInOptional, <em>Float</em> accelInOptional, <em>Float</em> minvalInOptional, <em>Float</em> maxvalInOptional) = Fab_Map(fxId, command, paramId, control, bandsInOptional, stepInOptional, accelInOptional, minvalInOptional, maxvalInOptional)</code></div>
	<p>Creates control mapping for ReaFab command.<br>
fxId e.g. "ReaComp".<br>
command 1-8 for encoders, 9-24 for buttons.<br>
paramId e.g. "Ratio".<br>
control 1 = direct, 2 = band selector, 3 = cycle, 4 = invert, 5 = force toggle, 6 = force range, 7 = 5 and 6, 8 = force continuous.<br>
bands define, if target fx has multiple identical target bands. In this case, paramId must include 00 placeholder, e.g. "Band 00 Gain".<br>
step overrides built-in default step of ~0.001 for continuous parameters.<br>
accel overrides built-in default control acceleration step of 1.0.<br>
minval &amp; maxval override default detected target param value range.<br>
Prefixing paramId with "-" reverses direction; useful for creating separate next/previous mappings for bands or list type value navigation.</p>
</div>

<div class="function_definition" id="ImGui_AcceptDragDropPayload">
	<div class="c_func"><code>bool ImGui_AcceptDragDropPayload(ImGui_Context* ctx, const char* type, char* payloadOutNeedBig, int payloadOutNeedBig_sz, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_AcceptDragDropPayload(<em>ImGui_Context</em> ctx, "type", #payload, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_AcceptDragDropPayload", <em>ImGui_Context</em> ctx, "type", #payload, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>payload = reaper.ImGui_AcceptDragDropPayload(<em>ImGui_Context</em> ctx, <em>string</em> type, <em>string </em>payload, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> type, <em>String</em> payloadOutNeedBig, <em>Int</em> payloadOutNeedBig_sz, <em>Int</em> flagsInOptional) = ImGui_AcceptDragDropPayload(ctx, type, payloadOutNeedBig, payloadOutNeedBig_sz, flagsInOptional)</code></div>
	<p>Accept contents of a given type. If DragDropFlags_AcceptBeforeDelivery is set<br>
you can peek into the payload before the mouse button is released.</p>
</div>

<div class="function_definition" id="ImGui_AcceptDragDropPayloadFiles">
	<div class="c_func"><code>bool ImGui_AcceptDragDropPayloadFiles(ImGui_Context* ctx, int* countOut, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_AcceptDragDropPayloadFiles(<em>ImGui_Context</em> ctx, <em>int &amp;</em>count, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_AcceptDragDropPayloadFiles", <em>ImGui_Context</em> ctx, <em>int &amp;</em>count, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>count = reaper.ImGui_AcceptDragDropPayloadFiles(<em>ImGui_Context</em> ctx, <em>integer </em>count, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> countOut, <em>Int</em> flagsInOptional) = ImGui_AcceptDragDropPayloadFiles(ctx, countOut, flagsInOptional)</code></div>
	<p>Accept a list of dropped files. See AcceptDragDropPayload and GetDragDropPayloadFile.</p>
</div>

<div class="function_definition" id="ImGui_AcceptDragDropPayloadRGB">
	<div class="c_func"><code>bool ImGui_AcceptDragDropPayloadRGB(ImGui_Context* ctx, int* rgbOut, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_AcceptDragDropPayloadRGB(<em>ImGui_Context</em> ctx, <em>int &amp;</em>rgb, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_AcceptDragDropPayloadRGB", <em>ImGui_Context</em> ctx, <em>int &amp;</em>rgb, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>rgb = reaper.ImGui_AcceptDragDropPayloadRGB(<em>ImGui_Context</em> ctx, <em>integer </em>rgb, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> rgbOut, <em>Int</em> flagsInOptional) = ImGui_AcceptDragDropPayloadRGB(ctx, rgbOut, flagsInOptional)</code></div>
	<p>Accept a RGB color. See AcceptDragDropPayload.</p>
</div>

<div class="function_definition" id="ImGui_AcceptDragDropPayloadRGBA">
	<div class="c_func"><code>bool ImGui_AcceptDragDropPayloadRGBA(ImGui_Context* ctx, int* rgbaOut, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_AcceptDragDropPayloadRGBA(<em>ImGui_Context</em> ctx, <em>int &amp;</em>rgba, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_AcceptDragDropPayloadRGBA", <em>ImGui_Context</em> ctx, <em>int &amp;</em>rgba, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>rgba = reaper.ImGui_AcceptDragDropPayloadRGBA(<em>ImGui_Context</em> ctx, <em>integer </em>rgba, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> rgbaOut, <em>Int</em> flagsInOptional) = ImGui_AcceptDragDropPayloadRGBA(ctx, rgbaOut, flagsInOptional)</code></div>
	<p>Accept a RGBA color. See AcceptDragDropPayload.</p>
</div>

<div class="function_definition" id="ImGui_AlignTextToFramePadding">
	<div class="c_func"><code>void ImGui_AlignTextToFramePadding(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_AlignTextToFramePadding(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_AlignTextToFramePadding", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_AlignTextToFramePadding(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_AlignTextToFramePadding(<em>ImGui_Context</em> ctx)</code></div>
	<p>Vertically align upcoming text baseline to StyleVar_FramePadding.y so that it<br>
will align properly to regularly framed items (call if you have text on a line<br>
before a framed item).</p>
</div>

<div class="function_definition" id="ImGui_ArrowButton">
	<div class="c_func"><code>bool ImGui_ArrowButton(ImGui_Context* ctx, const char* str_id, int dir)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_ArrowButton(<em>ImGui_Context</em> ctx, "str_id", <em>int </em>dir) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_ArrowButton", <em>ImGui_Context</em> ctx, "str_id", <em>int </em>dir) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_ArrowButton(<em>ImGui_Context</em> ctx, <em>string</em> str_id, <em>integer</em> dir)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_ArrowButton(<em>ImGui_Context</em> ctx, <em>String</em> str_id, <em>Int</em> dir)</code></div>
	<p>Square button with an arrow shape. 'dir' is one of the Dir_* values</p>
</div>

<div class="function_definition" id="ImGui_Attach">
	<div class="c_func"><code>void ImGui_Attach(ImGui_Context* ctx, ImGui_Resource* obj)</code></div>
	<div class="e_func"><code>ImGui_Attach(<em>ImGui_Context</em> ctx, <em>ImGui_Resource</em> obj) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Attach", <em>ImGui_Context</em> ctx, <em>ImGui_Resource</em> obj) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Attach(<em>ImGui_Context</em> ctx, <em>ImGui_Resource</em> obj)</code></div>
	<div class="p_func"><code>ImGui_Attach(<em>ImGui_Context</em> ctx, <em>ImGui_Resource</em> obj)</code></div>
	<p>Link the object's lifetime to the given context.<br>
Objects can be draw list splitters, fonts, images, list clippers, etc.<br>
Call Detach to let the object be garbage-collected after unuse again.<br>
</p><p>
List clipper objects may only be attached to the context they were created for.<br>
</p><p>
Fonts are (currently) a special case: they must be attached to the context<br>
before usage. Furthermore, fonts may only be attached or detached immediately<br>
after the context is created or before any other function calls modifying the<br>
context per defer cycle. See "limitations" in the font API documentation.</p>
</div>

<div class="function_definition" id="ImGui_Begin">
	<div class="c_func"><code>bool ImGui_Begin(ImGui_Context* ctx, const char* name, bool* p_openInOutOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_Begin(<em>ImGui_Context</em> ctx, "name", <em>optional bool &amp;</em>p_open, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_Begin", <em>ImGui_Context</em> ctx, "name", <em>optional bool &amp;</em>p_open, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>optional boolean </em>p_open = reaper.ImGui_Begin(<em>ImGui_Context</em> ctx, <em>string</em> name, <em>optional boolean </em>p_open, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> name, <em>Boolean</em> p_openInOutOptional, <em>Int</em> flagsInOptional) = ImGui_Begin(ctx, name, p_openInOutOptional, flagsInOptional)</code></div>
	<p>Push window to the stack and start appending to it.<br>
</p><p>
- Passing true to 'p_open' shows a window-closing widget in the upper-right<br>
  corner of the window, which clicking will set the boolean to false when returned.<br>
- You may append multiple times to the same window during the same frame by<br>
  calling Begin()/End() pairs multiple times. Some information such as 'flags'<br>
  or 'p_open' will only be considered by the first call to Begin().<br>
- Begin() return false to indicate the window is collapsed or fully clipped,<br>
  so you may early out and omit submitting anything to the window.</p>
</div>

<div class="function_definition" id="ImGui_BeginChild">
	<div class="c_func"><code>bool ImGui_BeginChild(ImGui_Context* ctx, const char* str_id, double* size_wInOptional, double* size_hInOptional, bool* borderInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginChild(<em>ImGui_Context</em> ctx, "str_id", <em>optional </em>size_wIn, <em>optional </em>size_hIn, <em>optional bool</em> borderIn, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginChild", <em>ImGui_Context</em> ctx, "str_id", <em>optional </em>size_wIn, <em>optional </em>size_hIn, <em>optional bool</em> borderIn, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginChild(<em>ImGui_Context</em> ctx, <em>string</em> str_id, <em>optional number </em>size_wIn, <em>optional number </em>size_hIn, <em>optional boolean</em> borderIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> str_id, <em>Float</em> size_wInOptional, <em>Float</em> size_hInOptional, <em>Boolean</em> borderInOptional, <em>Int</em> flagsInOptional) = ImGui_BeginChild(ctx, str_id, size_wInOptional, size_hInOptional, borderInOptional, flagsInOptional)</code></div>
	<p>For each independent axis of 'size':<br>
- \&gt; 0.0: fixed size<br>
- = 0.0: use remaining host window size<br>
- &lt; 0.0: use remaining window size minus abs(size)<br>
(Each axis can use a different mode, e.g. size = 0x400.)<br>
</p><p>
Returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.</p>
</div>

<div class="function_definition" id="ImGui_BeginChildFrame">
	<div class="c_func"><code>bool ImGui_BeginChildFrame(ImGui_Context* ctx, const char* str_id, double size_w, double size_h, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginChildFrame(<em>ImGui_Context</em> ctx, "str_id", size_w, size_h, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginChildFrame", <em>ImGui_Context</em> ctx, "str_id", size_w, size_h, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginChildFrame(<em>ImGui_Context</em> ctx, <em>string</em> str_id, <em>number</em> size_w, <em>number</em> size_h, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> str_id, <em>Float</em> size_w, <em>Float</em> size_h, <em>Int</em> flagsInOptional) = ImGui_BeginChildFrame(ctx, str_id, size_w, size_h, flagsInOptional)</code></div>
	<p>Helper to create a child window / scrolling region that looks like a normal<br>
widget frame. See BeginChild.</p>
</div>

<div class="function_definition" id="ImGui_BeginCombo">
	<div class="c_func"><code>bool ImGui_BeginCombo(ImGui_Context* ctx, const char* label, const char* preview_value, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginCombo(<em>ImGui_Context</em> ctx, "label", "preview_value", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginCombo", <em>ImGui_Context</em> ctx, "label", "preview_value", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginCombo(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>string</em> preview_value, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>String</em> preview_value, <em>Int</em> flagsInOptional) = ImGui_BeginCombo(ctx, label, preview_value, flagsInOptional)</code></div>
	<p>The BeginCombo/EndCombo API allows you to manage your contents and selection<br>
state however you want it, by creating e.g. Selectable items.</p>
</div>

<div class="function_definition" id="ImGui_BeginDisabled">
	<div class="c_func"><code>void ImGui_BeginDisabled(ImGui_Context* ctx, bool* disabledInOptional)</code></div>
	<div class="e_func"><code>ImGui_BeginDisabled(<em>ImGui_Context</em> ctx, <em>optional bool</em> disabledIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_BeginDisabled", <em>ImGui_Context</em> ctx, <em>optional bool</em> disabledIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_BeginDisabled(<em>ImGui_Context</em> ctx, <em>optional boolean</em> disabledIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Boolean</em> disabledInOptional) = ImGui_BeginDisabled(ctx, disabledInOptional)</code></div>
	<p>Disable all user interactions and dim items visuals<br>
(applying StyleVar_DisabledAlpha over current colors).<br>
</p><p>
BeginDisabled(false) essentially does nothing useful but is provided to<br>
facilitate use of boolean expressions.<br>
If you can avoid calling BeginDisabled(false)/EndDisabled() best to avoid it.</p>
</div>

<div class="function_definition" id="ImGui_BeginDragDropSource">
	<div class="c_func"><code>bool ImGui_BeginDragDropSource(ImGui_Context* ctx, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginDragDropSource(<em>ImGui_Context</em> ctx, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginDragDropSource", <em>ImGui_Context</em> ctx, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginDragDropSource(<em>ImGui_Context</em> ctx, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> flagsInOptional) = ImGui_BeginDragDropSource(ctx, flagsInOptional)</code></div>
	<p>Call after submitting an item which may be dragged. when this return true,<br>
you can call SetDragDropPayload() + EndDragDropSource()<br>
</p><p>
If you stop calling BeginDragDropSource() the payload is preserved however<br>
it won't have a preview tooltip (we currently display a fallback "..." tooltip<br>
as replacement).</p>
</div>

<div class="function_definition" id="ImGui_BeginDragDropTarget">
	<div class="c_func"><code>bool ImGui_BeginDragDropTarget(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginDragDropTarget(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginDragDropTarget", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginDragDropTarget(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_BeginDragDropTarget(<em>ImGui_Context</em> ctx)</code></div>
	<p>Call after submitting an item that may receive a payload.<br>
If this returns true, you can call AcceptDragDropPayload + EndDragDropTarget.</p>
</div>

<div class="function_definition" id="ImGui_BeginGroup">
	<div class="c_func"><code>void ImGui_BeginGroup(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_BeginGroup(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_BeginGroup", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_BeginGroup(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_BeginGroup(<em>ImGui_Context</em> ctx)</code></div>
	<p>Lock horizontal starting position. See EndGroup.</p>
</div>

<div class="function_definition" id="ImGui_BeginListBox">
	<div class="c_func"><code>bool ImGui_BeginListBox(ImGui_Context* ctx, const char* label, double* size_wInOptional, double* size_hInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginListBox(<em>ImGui_Context</em> ctx, "label", <em>optional </em>size_wIn, <em>optional </em>size_hIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginListBox", <em>ImGui_Context</em> ctx, "label", <em>optional </em>size_wIn, <em>optional </em>size_hIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginListBox(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>optional number </em>size_wIn, <em>optional number </em>size_hIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> size_wInOptional, <em>Float</em> size_hInOptional) = ImGui_BeginListBox(ctx, label, size_wInOptional, size_hInOptional)</code></div>
	<p>Open a framed scrolling region. This is essentially a thin wrapper to using<br>
BeginChild/EndChild with some stylistic changes.<br>
</p><p>
The BeginListBox/EndListBox API allows you to manage your contents and selection<br>
state however you want it, by creating e.g. Selectable or any items.<br>
</p><p>
- Choose frame width:<br>
  - width  &gt; 0.0: custom<br>
  - width  &lt; 0.0 or -FLT_MIN: right-align<br>
  - width  = 0.0 (default): use current ItemWidth<br>
- Choose frame height:<br>
  - height &gt; 0.0: custom<br>
  - height &lt; 0.0 or -FLT_MIN: bottom-align<br>
  - height = 0.0 (default): arbitrary default height which can fit ~7 items<br>
</p><p>
See EndListBox.</p>
</div>

<div class="function_definition" id="ImGui_BeginMenu">
	<div class="c_func"><code>bool ImGui_BeginMenu(ImGui_Context* ctx, const char* label, bool* enabledInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginMenu(<em>ImGui_Context</em> ctx, "label", <em>optional bool</em> enabledIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginMenu", <em>ImGui_Context</em> ctx, "label", <em>optional bool</em> enabledIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginMenu(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>optional boolean</em> enabledIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Boolean</em> enabledInOptional) = ImGui_BeginMenu(ctx, label, enabledInOptional)</code></div>
	<p>Create a sub-menu entry. only call EndMenu if this returns true!</p>
</div>

<div class="function_definition" id="ImGui_BeginMenuBar">
	<div class="c_func"><code>bool ImGui_BeginMenuBar(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginMenuBar(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginMenuBar", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginMenuBar(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_BeginMenuBar(<em>ImGui_Context</em> ctx)</code></div>
	<p>Append to menu-bar of current window (requires WindowFlags_MenuBar flag set<br>
on parent window). See EndMenuBar.</p>
</div>

<div class="function_definition" id="ImGui_BeginPopup">
	<div class="c_func"><code>bool ImGui_BeginPopup(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginPopup(<em>ImGui_Context</em> ctx, "str_id", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginPopup", <em>ImGui_Context</em> ctx, "str_id", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginPopup(<em>ImGui_Context</em> ctx, <em>string</em> str_id, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> str_id, <em>Int</em> flagsInOptional) = ImGui_BeginPopup(ctx, str_id, flagsInOptional)</code></div>
	<p>Query popup state, if open start appending into the window. Call EndPopup<br>
afterwards. WindowFlags* are forwarded to the window.<br>
</p><p>
Return true if the popup is open, and you can start outputting to it.</p>
</div>

<div class="function_definition" id="ImGui_BeginPopupContextItem">
	<div class="c_func"><code>bool ImGui_BeginPopupContextItem(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginPopupContextItem(<em>ImGui_Context</em> ctx, <em>optional </em>"str_idIn", <em>optional int</em> popup_flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginPopupContextItem", <em>ImGui_Context</em> ctx, <em>optional </em>"str_idIn", <em>optional int</em> popup_flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginPopupContextItem(<em>ImGui_Context</em> ctx, <em>optional </em><em>string</em> str_idIn, <em>optional integer</em> popup_flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> str_idInOptional, <em>Int</em> popup_flagsInOptional) = ImGui_BeginPopupContextItem(ctx, str_idInOptional, popup_flagsInOptional)</code></div>
	<p>This is a helper to handle the simplest case of associating one named popup<br>
to one given widget. You can pass a nil str_id to use the identifier of the last<br>
item. This is essentially the same as calling OpenPopupOnItemClick + BeginPopup<br>
but written to avoid computing the ID twice because BeginPopupContext*<br>
functions may be called very frequently.<br>
</p><p>
If you want to use that on a non-interactive item such as Text you need to pass<br>
in an explicit ID here.</p>
</div>

<div class="function_definition" id="ImGui_BeginPopupContextWindow">
	<div class="c_func"><code>bool ImGui_BeginPopupContextWindow(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginPopupContextWindow(<em>ImGui_Context</em> ctx, <em>optional </em>"str_idIn", <em>optional int</em> popup_flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginPopupContextWindow", <em>ImGui_Context</em> ctx, <em>optional </em>"str_idIn", <em>optional int</em> popup_flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginPopupContextWindow(<em>ImGui_Context</em> ctx, <em>optional </em><em>string</em> str_idIn, <em>optional integer</em> popup_flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> str_idInOptional, <em>Int</em> popup_flagsInOptional) = ImGui_BeginPopupContextWindow(ctx, str_idInOptional, popup_flagsInOptional)</code></div>
	<p>Open+begin popup when clicked on current window.</p>
</div>

<div class="function_definition" id="ImGui_BeginPopupModal">
	<div class="c_func"><code>bool ImGui_BeginPopupModal(ImGui_Context* ctx, const char* name, bool* p_openInOutOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginPopupModal(<em>ImGui_Context</em> ctx, "name", <em>optional bool &amp;</em>p_open, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginPopupModal", <em>ImGui_Context</em> ctx, "name", <em>optional bool &amp;</em>p_open, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>optional boolean </em>p_open = reaper.ImGui_BeginPopupModal(<em>ImGui_Context</em> ctx, <em>string</em> name, <em>optional boolean </em>p_open, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> name, <em>Boolean</em> p_openInOutOptional, <em>Int</em> flagsInOptional) = ImGui_BeginPopupModal(ctx, name, p_openInOutOptional, flagsInOptional)</code></div>
	<p>Block every interaction behind the window, cannot be closed by user, add a<br>
dimming background, has a title bar. Return true if the modal is open, and you<br>
can start outputting to it. See BeginPopup.</p>
</div>

<div class="function_definition" id="ImGui_BeginTabBar">
	<div class="c_func"><code>bool ImGui_BeginTabBar(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginTabBar(<em>ImGui_Context</em> ctx, "str_id", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginTabBar", <em>ImGui_Context</em> ctx, "str_id", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginTabBar(<em>ImGui_Context</em> ctx, <em>string</em> str_id, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> str_id, <em>Int</em> flagsInOptional) = ImGui_BeginTabBar(ctx, str_id, flagsInOptional)</code></div>
	<p>Create and append into a TabBar.</p>
</div>

<div class="function_definition" id="ImGui_BeginTabItem">
	<div class="c_func"><code>bool ImGui_BeginTabItem(ImGui_Context* ctx, const char* label, bool* p_openInOutOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginTabItem(<em>ImGui_Context</em> ctx, "label", <em>optional bool &amp;</em>p_open, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginTabItem", <em>ImGui_Context</em> ctx, "label", <em>optional bool &amp;</em>p_open, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>optional boolean </em>p_open = reaper.ImGui_BeginTabItem(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>optional boolean </em>p_open, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Boolean</em> p_openInOutOptional, <em>Int</em> flagsInOptional) = ImGui_BeginTabItem(ctx, label, p_openInOutOptional, flagsInOptional)</code></div>
	<p>Create a Tab. Returns true if the Tab is selected.<br>
Set 'p_open' to true to enable the close button.</p>
</div>

<div class="function_definition" id="ImGui_BeginTable">
	<div class="c_func"><code>bool ImGui_BeginTable(ImGui_Context* ctx, const char* str_id, int column, int* flagsInOptional, double* outer_size_wInOptional, double* outer_size_hInOptional, double* inner_widthInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginTable(<em>ImGui_Context</em> ctx, "str_id", <em>int </em>column, <em>optional int</em> flagsIn, <em>optional </em>outer_size_wIn, <em>optional </em>outer_size_hIn, <em>optional </em>inner_widthIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginTable", <em>ImGui_Context</em> ctx, "str_id", <em>int </em>column, <em>optional int</em> flagsIn, <em>optional </em>outer_size_wIn, <em>optional </em>outer_size_hIn, <em>optional </em>inner_widthIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginTable(<em>ImGui_Context</em> ctx, <em>string</em> str_id, <em>integer</em> column, <em>optional integer</em> flagsIn, <em>optional number </em>outer_size_wIn, <em>optional number </em>outer_size_hIn, <em>optional number </em>inner_widthIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> str_id, <em>Int</em> column, <em>Int</em> flagsInOptional, <em>Float</em> outer_size_wInOptional, <em>Float</em> outer_size_hInOptional, <em>Float</em> inner_widthInOptional) = ImGui_BeginTable(ctx, str_id, column, flagsInOptional, outer_size_wInOptional, outer_size_hInOptional, inner_widthInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_BeginTooltip">
	<div class="c_func"><code>bool ImGui_BeginTooltip(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_BeginTooltip(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_BeginTooltip", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_BeginTooltip(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_BeginTooltip(<em>ImGui_Context</em> ctx)</code></div>
	<p>Begin/append a tooltip window.<br>
To create full-featured tooltip (with any kind of items).</p>
</div>

<div class="function_definition" id="ImGui_Bullet">
	<div class="c_func"><code>void ImGui_Bullet(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_Bullet(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Bullet", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Bullet(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_Bullet(<em>ImGui_Context</em> ctx)</code></div>
	<p>Draw a small circle + keep the cursor on the same line.<br>
Advance cursor x position by GetTreeNodeToLabelSpacing,<br>
same distance that TreeNode uses.</p>
</div>

<div class="function_definition" id="ImGui_BulletText">
	<div class="c_func"><code>void ImGui_BulletText(ImGui_Context* ctx, const char* text)</code></div>
	<div class="e_func"><code>ImGui_BulletText(<em>ImGui_Context</em> ctx, "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_BulletText", <em>ImGui_Context</em> ctx, "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_BulletText(<em>ImGui_Context</em> ctx, <em>string</em> text)</code></div>
	<div class="p_func"><code>ImGui_BulletText(<em>ImGui_Context</em> ctx, <em>String</em> text)</code></div>
	<p>Shortcut for Bullet + Text.</p>
</div>

<div class="function_definition" id="ImGui_Button">
	<div class="c_func"><code>bool ImGui_Button(ImGui_Context* ctx, const char* label, double* size_wInOptional, double* size_hInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_Button(<em>ImGui_Context</em> ctx, "label", <em>optional </em>size_wIn, <em>optional </em>size_hIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_Button", <em>ImGui_Context</em> ctx, "label", <em>optional </em>size_wIn, <em>optional </em>size_hIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_Button(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>optional number </em>size_wIn, <em>optional number </em>size_hIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> size_wInOptional, <em>Float</em> size_hInOptional) = ImGui_Button(ctx, label, size_wInOptional, size_hInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_ButtonFlags_MouseButtonLeft">
	<div class="c_func"><code>int ImGui_ButtonFlags_MouseButtonLeft()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ButtonFlags_MouseButtonLeft() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ButtonFlags_MouseButtonLeft") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ButtonFlags_MouseButtonLeft()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ButtonFlags_MouseButtonLeft()</code></div>
	<p>React on left mouse button (default).</p>
</div>

<div class="function_definition" id="ImGui_ButtonFlags_MouseButtonMiddle">
	<div class="c_func"><code>int ImGui_ButtonFlags_MouseButtonMiddle()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ButtonFlags_MouseButtonMiddle() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ButtonFlags_MouseButtonMiddle") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ButtonFlags_MouseButtonMiddle()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ButtonFlags_MouseButtonMiddle()</code></div>
	<p>React on center mouse button.</p>
</div>

<div class="function_definition" id="ImGui_ButtonFlags_MouseButtonRight">
	<div class="c_func"><code>int ImGui_ButtonFlags_MouseButtonRight()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ButtonFlags_MouseButtonRight() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ButtonFlags_MouseButtonRight") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ButtonFlags_MouseButtonRight()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ButtonFlags_MouseButtonRight()</code></div>
	<p>React on right mouse button.</p>
</div>

<div class="function_definition" id="ImGui_ButtonFlags_None">
	<div class="c_func"><code>int ImGui_ButtonFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ButtonFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ButtonFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ButtonFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ButtonFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_CalcItemWidth">
	<div class="c_func"><code>double ImGui_CalcItemWidth(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_CalcItemWidth(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_CalcItemWidth", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_CalcItemWidth(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_CalcItemWidth(<em>ImGui_Context</em> ctx)</code></div>
	<p>Width of item given pushed settings and current cursor position.<br>
NOT necessarily the width of last item unlike most 'Item' functions.</p>
</div>

<div class="function_definition" id="ImGui_CalcTextSize">
	<div class="c_func"><code>void ImGui_CalcTextSize(ImGui_Context* ctx, const char* text, double* wOut, double* hOut, bool* hide_text_after_double_hashInOptional, double* wrap_widthInOptional)</code></div>
	<div class="e_func"><code>ImGui_CalcTextSize(<em>ImGui_Context</em> ctx, "text", <em>&amp;</em>w, <em>&amp;</em>h, <em>optional bool</em> hide_text_after_double_hashIn, <em>optional </em>wrap_widthIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_CalcTextSize", <em>ImGui_Context</em> ctx, "text", <em>&amp;</em>w, <em>&amp;</em>h, <em>optional bool</em> hide_text_after_double_hashIn, <em>optional </em>wrap_widthIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>w, <em>number </em>h = reaper.ImGui_CalcTextSize(<em>ImGui_Context</em> ctx, <em>string</em> text, <em>number </em>w, <em>number </em>h, <em>optional boolean</em> hide_text_after_double_hashIn, <em>optional number </em>wrap_widthIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>String</em> text, <em>Float</em> wOut, <em>Float</em> hOut, <em>Boolean</em> hide_text_after_double_hashInOptional, <em>Float</em> wrap_widthInOptional) = ImGui_CalcTextSize(ctx, text, wOut, hOut, hide_text_after_double_hashInOptional, wrap_widthInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_Checkbox">
	<div class="c_func"><code>bool ImGui_Checkbox(ImGui_Context* ctx, const char* label, bool* vInOut)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_Checkbox(<em>ImGui_Context</em> ctx, "label", <em>bool &amp;</em>v) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_Checkbox", <em>ImGui_Context</em> ctx, "label", <em>bool &amp;</em>v) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>v = reaper.ImGui_Checkbox(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>boolean </em>v)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Boolean</em> vInOut) = ImGui_Checkbox(ctx, label, vInOut)</code></div>
</div>

<div class="function_definition" id="ImGui_CheckboxFlags">
	<div class="c_func"><code>bool ImGui_CheckboxFlags(ImGui_Context* ctx, const char* label, int* flagsInOut, int flags_value)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_CheckboxFlags(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>flags, <em>int </em>flags_value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_CheckboxFlags", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>flags, <em>int </em>flags_value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>flags = reaper.ImGui_CheckboxFlags(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>flags, <em>integer</em> flags_value)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> flagsInOut, <em>Int</em> flags_value) = ImGui_CheckboxFlags(ctx, label, flagsInOut, flags_value)</code></div>
</div>

<div class="function_definition" id="ImGui_CloseCurrentPopup">
	<div class="c_func"><code>void ImGui_CloseCurrentPopup(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_CloseCurrentPopup(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_CloseCurrentPopup", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_CloseCurrentPopup(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_CloseCurrentPopup(<em>ImGui_Context</em> ctx)</code></div>
	<p>Manually close the popup we have begin-ed into.<br>
Use inside the BeginPopup/EndPopup scope to close manually.<br>
</p><p>
CloseCurrentPopup() is called by default by Selectable/MenuItem when activated.</p>
</div>

<div class="function_definition" id="ImGui_Col_Border">
	<div class="c_func"><code>int ImGui_Col_Border()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_Border() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_Border") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_Border()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_Border()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_BorderShadow">
	<div class="c_func"><code>int ImGui_Col_BorderShadow()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_BorderShadow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_BorderShadow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_BorderShadow()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_BorderShadow()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_Button">
	<div class="c_func"><code>int ImGui_Col_Button()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_Button() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_Button") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_Button()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_Button()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_ButtonActive">
	<div class="c_func"><code>int ImGui_Col_ButtonActive()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_ButtonActive() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_ButtonActive") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_ButtonActive()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_ButtonActive()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_ButtonHovered">
	<div class="c_func"><code>int ImGui_Col_ButtonHovered()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_ButtonHovered() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_ButtonHovered") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_ButtonHovered()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_ButtonHovered()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_CheckMark">
	<div class="c_func"><code>int ImGui_Col_CheckMark()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_CheckMark() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_CheckMark") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_CheckMark()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_CheckMark()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_ChildBg">
	<div class="c_func"><code>int ImGui_Col_ChildBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_ChildBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_ChildBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_ChildBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_ChildBg()</code></div>
	<p>Background of child windows.</p>
</div>

<div class="function_definition" id="ImGui_Col_DockingEmptyBg">
	<div class="c_func"><code>int ImGui_Col_DockingEmptyBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_DockingEmptyBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_DockingEmptyBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_DockingEmptyBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_DockingEmptyBg()</code></div>
	<p>Background color for empty node (e.g. CentralNode with no window docked into it).</p>
</div>

<div class="function_definition" id="ImGui_Col_DockingPreview">
	<div class="c_func"><code>int ImGui_Col_DockingPreview()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_DockingPreview() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_DockingPreview") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_DockingPreview()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_DockingPreview()</code></div>
	<p>Preview overlay color when about to docking something.</p>
</div>

<div class="function_definition" id="ImGui_Col_DragDropTarget">
	<div class="c_func"><code>int ImGui_Col_DragDropTarget()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_DragDropTarget() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_DragDropTarget") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_DragDropTarget()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_DragDropTarget()</code></div>
	<p>Rectangle highlighting a drop target</p>
</div>

<div class="function_definition" id="ImGui_Col_FrameBg">
	<div class="c_func"><code>int ImGui_Col_FrameBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_FrameBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_FrameBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_FrameBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_FrameBg()</code></div>
	<p>Background of checkbox, radio button, plot, slider, text input.</p>
</div>

<div class="function_definition" id="ImGui_Col_FrameBgActive">
	<div class="c_func"><code>int ImGui_Col_FrameBgActive()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_FrameBgActive() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_FrameBgActive") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_FrameBgActive()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_FrameBgActive()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_FrameBgHovered">
	<div class="c_func"><code>int ImGui_Col_FrameBgHovered()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_FrameBgHovered() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_FrameBgHovered") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_FrameBgHovered()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_FrameBgHovered()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_Header">
	<div class="c_func"><code>int ImGui_Col_Header()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_Header() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_Header") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_Header()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_Header()</code></div>
	<p>Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem.</p>
</div>

<div class="function_definition" id="ImGui_Col_HeaderActive">
	<div class="c_func"><code>int ImGui_Col_HeaderActive()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_HeaderActive() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_HeaderActive") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_HeaderActive()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_HeaderActive()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_HeaderHovered">
	<div class="c_func"><code>int ImGui_Col_HeaderHovered()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_HeaderHovered() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_HeaderHovered") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_HeaderHovered()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_HeaderHovered()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_MenuBarBg">
	<div class="c_func"><code>int ImGui_Col_MenuBarBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_MenuBarBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_MenuBarBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_MenuBarBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_MenuBarBg()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_ModalWindowDimBg">
	<div class="c_func"><code>int ImGui_Col_ModalWindowDimBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_ModalWindowDimBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_ModalWindowDimBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_ModalWindowDimBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_ModalWindowDimBg()</code></div>
	<p>Darken/colorize entire screen behind a modal window, when one is active.</p>
</div>

<div class="function_definition" id="ImGui_Col_NavHighlight">
	<div class="c_func"><code>int ImGui_Col_NavHighlight()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_NavHighlight() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_NavHighlight") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_NavHighlight()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_NavHighlight()</code></div>
	<p>Gamepad/keyboard: current highlighted item.</p>
</div>

<div class="function_definition" id="ImGui_Col_NavWindowingDimBg">
	<div class="c_func"><code>int ImGui_Col_NavWindowingDimBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_NavWindowingDimBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_NavWindowingDimBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_NavWindowingDimBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_NavWindowingDimBg()</code></div>
	<p>Darken/colorize entire screen behind the CTRL+TAB window list, when active.</p>
</div>

<div class="function_definition" id="ImGui_Col_NavWindowingHighlight">
	<div class="c_func"><code>int ImGui_Col_NavWindowingHighlight()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_NavWindowingHighlight() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_NavWindowingHighlight") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_NavWindowingHighlight()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_NavWindowingHighlight()</code></div>
	<p>Highlight window when using CTRL+TAB.</p>
</div>

<div class="function_definition" id="ImGui_Col_PlotHistogram">
	<div class="c_func"><code>int ImGui_Col_PlotHistogram()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_PlotHistogram() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_PlotHistogram") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_PlotHistogram()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_PlotHistogram()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_PlotHistogramHovered">
	<div class="c_func"><code>int ImGui_Col_PlotHistogramHovered()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_PlotHistogramHovered() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_PlotHistogramHovered") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_PlotHistogramHovered()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_PlotHistogramHovered()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_PlotLines">
	<div class="c_func"><code>int ImGui_Col_PlotLines()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_PlotLines() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_PlotLines") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_PlotLines()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_PlotLines()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_PlotLinesHovered">
	<div class="c_func"><code>int ImGui_Col_PlotLinesHovered()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_PlotLinesHovered() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_PlotLinesHovered") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_PlotLinesHovered()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_PlotLinesHovered()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_PopupBg">
	<div class="c_func"><code>int ImGui_Col_PopupBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_PopupBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_PopupBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_PopupBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_PopupBg()</code></div>
	<p>Background of popups, menus, tooltips windows.</p>
</div>

<div class="function_definition" id="ImGui_Col_ResizeGrip">
	<div class="c_func"><code>int ImGui_Col_ResizeGrip()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_ResizeGrip() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_ResizeGrip") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_ResizeGrip()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_ResizeGrip()</code></div>
	<p>Resize grip in lower-right and lower-left corners of windows.</p>
</div>

<div class="function_definition" id="ImGui_Col_ResizeGripActive">
	<div class="c_func"><code>int ImGui_Col_ResizeGripActive()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_ResizeGripActive() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_ResizeGripActive") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_ResizeGripActive()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_ResizeGripActive()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_ResizeGripHovered">
	<div class="c_func"><code>int ImGui_Col_ResizeGripHovered()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_ResizeGripHovered() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_ResizeGripHovered") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_ResizeGripHovered()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_ResizeGripHovered()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_ScrollbarBg">
	<div class="c_func"><code>int ImGui_Col_ScrollbarBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_ScrollbarBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_ScrollbarBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_ScrollbarBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_ScrollbarBg()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_ScrollbarGrab">
	<div class="c_func"><code>int ImGui_Col_ScrollbarGrab()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_ScrollbarGrab() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_ScrollbarGrab") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_ScrollbarGrab()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_ScrollbarGrab()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_ScrollbarGrabActive">
	<div class="c_func"><code>int ImGui_Col_ScrollbarGrabActive()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_ScrollbarGrabActive() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_ScrollbarGrabActive") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_ScrollbarGrabActive()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_ScrollbarGrabActive()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_ScrollbarGrabHovered">
	<div class="c_func"><code>int ImGui_Col_ScrollbarGrabHovered()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_ScrollbarGrabHovered() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_ScrollbarGrabHovered") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_ScrollbarGrabHovered()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_ScrollbarGrabHovered()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_Separator">
	<div class="c_func"><code>int ImGui_Col_Separator()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_Separator() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_Separator") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_Separator()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_Separator()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_SeparatorActive">
	<div class="c_func"><code>int ImGui_Col_SeparatorActive()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_SeparatorActive() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_SeparatorActive") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_SeparatorActive()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_SeparatorActive()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_SeparatorHovered">
	<div class="c_func"><code>int ImGui_Col_SeparatorHovered()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_SeparatorHovered() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_SeparatorHovered") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_SeparatorHovered()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_SeparatorHovered()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_SliderGrab">
	<div class="c_func"><code>int ImGui_Col_SliderGrab()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_SliderGrab() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_SliderGrab") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_SliderGrab()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_SliderGrab()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_SliderGrabActive">
	<div class="c_func"><code>int ImGui_Col_SliderGrabActive()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_SliderGrabActive() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_SliderGrabActive") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_SliderGrabActive()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_SliderGrabActive()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_Tab">
	<div class="c_func"><code>int ImGui_Col_Tab()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_Tab() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_Tab") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_Tab()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_Tab()</code></div>
	<p>TabItem in a TabBar</p>
</div>

<div class="function_definition" id="ImGui_Col_TabActive">
	<div class="c_func"><code>int ImGui_Col_TabActive()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TabActive() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TabActive") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TabActive()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TabActive()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_TabHovered">
	<div class="c_func"><code>int ImGui_Col_TabHovered()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TabHovered() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TabHovered") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TabHovered()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TabHovered()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_TabUnfocused">
	<div class="c_func"><code>int ImGui_Col_TabUnfocused()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TabUnfocused() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TabUnfocused") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TabUnfocused()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TabUnfocused()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_TabUnfocusedActive">
	<div class="c_func"><code>int ImGui_Col_TabUnfocusedActive()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TabUnfocusedActive() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TabUnfocusedActive") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TabUnfocusedActive()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TabUnfocusedActive()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_TableBorderLight">
	<div class="c_func"><code>int ImGui_Col_TableBorderLight()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TableBorderLight() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TableBorderLight") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TableBorderLight()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TableBorderLight()</code></div>
	<p>Table inner borders (prefer using Alpha=1.0 here).</p>
</div>

<div class="function_definition" id="ImGui_Col_TableBorderStrong">
	<div class="c_func"><code>int ImGui_Col_TableBorderStrong()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TableBorderStrong() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TableBorderStrong") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TableBorderStrong()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TableBorderStrong()</code></div>
	<p>Table outer and header borders (prefer using Alpha=1.0 here).</p>
</div>

<div class="function_definition" id="ImGui_Col_TableHeaderBg">
	<div class="c_func"><code>int ImGui_Col_TableHeaderBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TableHeaderBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TableHeaderBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TableHeaderBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TableHeaderBg()</code></div>
	<p>Table header background.</p>
</div>

<div class="function_definition" id="ImGui_Col_TableRowBg">
	<div class="c_func"><code>int ImGui_Col_TableRowBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TableRowBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TableRowBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TableRowBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TableRowBg()</code></div>
	<p>Table row background (even rows).</p>
</div>

<div class="function_definition" id="ImGui_Col_TableRowBgAlt">
	<div class="c_func"><code>int ImGui_Col_TableRowBgAlt()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TableRowBgAlt() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TableRowBgAlt") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TableRowBgAlt()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TableRowBgAlt()</code></div>
	<p>Table row background (odd rows).</p>
</div>

<div class="function_definition" id="ImGui_Col_Text">
	<div class="c_func"><code>int ImGui_Col_Text()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_Text() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_Text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_Text()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_Text()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_TextDisabled">
	<div class="c_func"><code>int ImGui_Col_TextDisabled()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TextDisabled() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TextDisabled") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TextDisabled()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TextDisabled()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_TextSelectedBg">
	<div class="c_func"><code>int ImGui_Col_TextSelectedBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TextSelectedBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TextSelectedBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TextSelectedBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TextSelectedBg()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_TitleBg">
	<div class="c_func"><code>int ImGui_Col_TitleBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TitleBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TitleBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TitleBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TitleBg()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_TitleBgActive">
	<div class="c_func"><code>int ImGui_Col_TitleBgActive()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TitleBgActive() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TitleBgActive") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TitleBgActive()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TitleBgActive()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_TitleBgCollapsed">
	<div class="c_func"><code>int ImGui_Col_TitleBgCollapsed()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_TitleBgCollapsed() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_TitleBgCollapsed") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_TitleBgCollapsed()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_TitleBgCollapsed()</code></div>
</div>

<div class="function_definition" id="ImGui_Col_WindowBg">
	<div class="c_func"><code>int ImGui_Col_WindowBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Col_WindowBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Col_WindowBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Col_WindowBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Col_WindowBg()</code></div>
	<p>Background of normal windows. See also WindowFlags_NoBackground.</p>
</div>

<div class="function_definition" id="ImGui_CollapsingHeader">
	<div class="c_func"><code>bool ImGui_CollapsingHeader(ImGui_Context* ctx, const char* label, bool* p_visibleInOut, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_CollapsingHeader(<em>ImGui_Context</em> ctx, "label", <em>bool &amp;</em>p_visible, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_CollapsingHeader", <em>ImGui_Context</em> ctx, "label", <em>bool &amp;</em>p_visible, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>p_visible = reaper.ImGui_CollapsingHeader(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>boolean </em>p_visible, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Boolean</em> p_visibleInOut, <em>Int</em> flagsInOptional) = ImGui_CollapsingHeader(ctx, label, p_visibleInOut, flagsInOptional)</code></div>
	<p>Returns true when opened but do not indent nor push into the ID stack<br>
(because of the TreeNodeFlags_NoTreePushOnOpen flag).<br>
</p><p>
This is basically the same as calling TreeNode(label, TreeNodeFlags_CollapsingHeader).<br>
You can remove the _NoTreePushOnOpen flag if you want behavior closer to normal<br>
TreeNode.<br>
</p><p>
When 'visible' is provided: if 'true' display an additional small close button<br>
on upper right of the header which will set the bool to false when clicked,<br>
if 'false' don't display the header.</p>
</div>

<div class="function_definition" id="ImGui_ColorButton">
	<div class="c_func"><code>bool ImGui_ColorButton(ImGui_Context* ctx, const char* desc_id, int col_rgba, int* flagsInOptional, double* size_wInOptional, double* size_hInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_ColorButton(<em>ImGui_Context</em> ctx, "desc_id", <em>int </em>col_rgba, <em>optional int</em> flagsIn, <em>optional </em>size_wIn, <em>optional </em>size_hIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_ColorButton", <em>ImGui_Context</em> ctx, "desc_id", <em>int </em>col_rgba, <em>optional int</em> flagsIn, <em>optional </em>size_wIn, <em>optional </em>size_hIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_ColorButton(<em>ImGui_Context</em> ctx, <em>string</em> desc_id, <em>integer</em> col_rgba, <em>optional integer</em> flagsIn, <em>optional number </em>size_wIn, <em>optional number </em>size_hIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> desc_id, <em>Int</em> col_rgba, <em>Int</em> flagsInOptional, <em>Float</em> size_wInOptional, <em>Float</em> size_hInOptional) = ImGui_ColorButton(ctx, desc_id, col_rgba, flagsInOptional, size_wInOptional, size_hInOptional)</code></div>
	<p>Display a color square/button, hover for details, return true when pressed.<br>
Color is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xRRGGBB.</p>
</div>

<div class="function_definition" id="ImGui_ColorConvertDouble4ToU32">
	<div class="c_func"><code>int ImGui_ColorConvertDouble4ToU32(double r, double g, double b, double a)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorConvertDouble4ToU32(r, g, b, a) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorConvertDouble4ToU32", r, g, b, a) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorConvertDouble4ToU32(<em>number</em> r, <em>number</em> g, <em>number</em> b, <em>number</em> a)</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorConvertDouble4ToU32(<em>Float</em> r, <em>Float</em> g, <em>Float</em> b, <em>Float</em> a)</code></div>
	<p>Pack 0..1 RGBA values into a 32-bit integer (0xRRGGBBAA).</p>
</div>

<div class="function_definition" id="ImGui_ColorConvertHSVtoRGB">
	<div class="c_func"><code>void ImGui_ColorConvertHSVtoRGB(double h, double s, double v, double* rOut, double* gOut, double* bOut)</code></div>
	<div class="e_func"><code>ImGui_ColorConvertHSVtoRGB(h, s, v, <em>&amp;</em>r, <em>&amp;</em>g, <em>&amp;</em>b) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ColorConvertHSVtoRGB", h, s, v, <em>&amp;</em>r, <em>&amp;</em>g, <em>&amp;</em>b) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>r, <em>number </em>g, <em>number </em>b = reaper.ImGui_ColorConvertHSVtoRGB(<em>number</em> h, <em>number</em> s, <em>number</em> v)</code></div>
	<div class="p_func"><code>(<em>Float</em> h, <em>Float</em> s, <em>Float</em> v, <em>Float</em> rOut, <em>Float</em> gOut, <em>Float</em> bOut) = ImGui_ColorConvertHSVtoRGB(h, s, v, rOut, gOut, bOut)</code></div>
	<p>Convert HSV values (0..1) into RGB (0..1).</p>
</div>

<div class="function_definition" id="ImGui_ColorConvertNative">
	<div class="c_func"><code>int ImGui_ColorConvertNative(int rgb)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorConvertNative(<em>int </em>rgb) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorConvertNative", <em>int </em>rgb) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorConvertNative(<em>integer</em> rgb)</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorConvertNative(<em>Int</em> rgb)</code></div>
	<p>Convert a native color coming from REAPER or 0xRRGGBB to native.<br>
This swaps the red and blue channels on Windows.</p>
</div>

<div class="function_definition" id="ImGui_ColorConvertRGBtoHSV">
	<div class="c_func"><code>void ImGui_ColorConvertRGBtoHSV(double r, double g, double b, double* hOut, double* sOut, double* vOut)</code></div>
	<div class="e_func"><code>ImGui_ColorConvertRGBtoHSV(r, g, b, <em>&amp;</em>h, <em>&amp;</em>s, <em>&amp;</em>v) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ColorConvertRGBtoHSV", r, g, b, <em>&amp;</em>h, <em>&amp;</em>s, <em>&amp;</em>v) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>h, <em>number </em>s, <em>number </em>v = reaper.ImGui_ColorConvertRGBtoHSV(<em>number</em> r, <em>number</em> g, <em>number</em> b)</code></div>
	<div class="p_func"><code>(<em>Float</em> r, <em>Float</em> g, <em>Float</em> b, <em>Float</em> hOut, <em>Float</em> sOut, <em>Float</em> vOut) = ImGui_ColorConvertRGBtoHSV(r, g, b, hOut, sOut, vOut)</code></div>
	<p>Convert RGB values (0..1) into HSV (0..1).</p>
</div>

<div class="function_definition" id="ImGui_ColorConvertU32ToDouble4">
	<div class="c_func"><code>void ImGui_ColorConvertU32ToDouble4(int rgba, double* rOut, double* gOut, double* bOut, double* aOut)</code></div>
	<div class="e_func"><code>ImGui_ColorConvertU32ToDouble4(<em>int </em>rgba, <em>&amp;</em>r, <em>&amp;</em>g, <em>&amp;</em>b, <em>&amp;</em>a) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ColorConvertU32ToDouble4", <em>int </em>rgba, <em>&amp;</em>r, <em>&amp;</em>g, <em>&amp;</em>b, <em>&amp;</em>a) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>r, <em>number </em>g, <em>number </em>b, <em>number </em>a = reaper.ImGui_ColorConvertU32ToDouble4(<em>integer</em> rgba)</code></div>
	<div class="p_func"><code>(<em>Int</em> rgba, <em>Float</em> rOut, <em>Float</em> gOut, <em>Float</em> bOut, <em>Float</em> aOut) = ImGui_ColorConvertU32ToDouble4(rgba, rOut, gOut, bOut, aOut)</code></div>
	<p>Unpack a 32-bit integer (0xRRGGBBAA) into separate RGBA values (0..1).</p>
</div>

<div class="function_definition" id="ImGui_ColorEdit3">
	<div class="c_func"><code>bool ImGui_ColorEdit3(ImGui_Context* ctx, const char* label, int* col_rgbInOut, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_ColorEdit3(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>col_rgb, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_ColorEdit3", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>col_rgb, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>col_rgb = reaper.ImGui_ColorEdit3(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>col_rgb, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> col_rgbInOut, <em>Int</em> flagsInOptional) = ImGui_ColorEdit3(ctx, label, col_rgbInOut, flagsInOptional)</code></div>
	<p>Color is in 0xXXRRGGBB. XX is ignored and will not be modified.</p>
</div>

<div class="function_definition" id="ImGui_ColorEdit4">
	<div class="c_func"><code>bool ImGui_ColorEdit4(ImGui_Context* ctx, const char* label, int* col_rgbaInOut, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_ColorEdit4(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>col_rgba, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_ColorEdit4", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>col_rgba, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>col_rgba = reaper.ImGui_ColorEdit4(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>col_rgba, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> col_rgbaInOut, <em>Int</em> flagsInOptional) = ImGui_ColorEdit4(ctx, label, col_rgbaInOut, flagsInOptional)</code></div>
	<p>Color is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xXXRRGGBB<br>
(XX is ignored and will not be modified).</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_AlphaBar">
	<div class="c_func"><code>int ImGui_ColorEditFlags_AlphaBar()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_AlphaBar() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_AlphaBar") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_AlphaBar()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_AlphaBar()</code></div>
	<p>ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_AlphaPreview">
	<div class="c_func"><code>int ImGui_ColorEditFlags_AlphaPreview()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_AlphaPreview() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_AlphaPreview") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_AlphaPreview()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_AlphaPreview()</code></div>
	<p>ColorEdit, ColorPicker, ColorButton: display preview as a transparent color<br>
   over a checkerboard, instead of opaque.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_AlphaPreviewHalf">
	<div class="c_func"><code>int ImGui_ColorEditFlags_AlphaPreviewHalf()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_AlphaPreviewHalf() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_AlphaPreviewHalf") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_AlphaPreviewHalf()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_AlphaPreviewHalf()</code></div>
	<p>ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard,<br>
   instead of opaque.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_DisplayHSV">
	<div class="c_func"><code>int ImGui_ColorEditFlags_DisplayHSV()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_DisplayHSV() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_DisplayHSV") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_DisplayHSV()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_DisplayHSV()</code></div>
	<p>ColorEdit: override _display_ type to HSV. ColorPicker:<br>
   select any combination using one or more of RGB/HSV/Hex.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_DisplayHex">
	<div class="c_func"><code>int ImGui_ColorEditFlags_DisplayHex()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_DisplayHex() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_DisplayHex") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_DisplayHex()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_DisplayHex()</code></div>
	<p>ColorEdit: override _display_ type to Hex. ColorPicker:<br>
   select any combination using one or more of RGB/HSV/Hex.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_DisplayRGB">
	<div class="c_func"><code>int ImGui_ColorEditFlags_DisplayRGB()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_DisplayRGB() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_DisplayRGB") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_DisplayRGB()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_DisplayRGB()</code></div>
	<p>ColorEdit: override _display_ type to RGB. ColorPicker:<br>
   select any combination using one or more of RGB/HSV/Hex.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_Float">
	<div class="c_func"><code>int ImGui_ColorEditFlags_Float()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_Float() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_Float") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_Float()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_Float()</code></div>
	<p>ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0..1.0<br>
   floats instead of 0..255 integers. No round-trip of value via integers.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_InputHSV">
	<div class="c_func"><code>int ImGui_ColorEditFlags_InputHSV()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_InputHSV() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_InputHSV") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_InputHSV()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_InputHSV()</code></div>
	<p>ColorEdit, ColorPicker: input and output data in HSV format.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_InputRGB">
	<div class="c_func"><code>int ImGui_ColorEditFlags_InputRGB()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_InputRGB() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_InputRGB") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_InputRGB()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_InputRGB()</code></div>
	<p>ColorEdit, ColorPicker: input and output data in RGB format.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_NoAlpha">
	<div class="c_func"><code>int ImGui_ColorEditFlags_NoAlpha()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_NoAlpha() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_NoAlpha") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_NoAlpha()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_NoAlpha()</code></div>
	<p>ColorEdit, ColorPicker, ColorButton: ignore Alpha component<br>
  (will only read 3 components from the input pointer).</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_NoBorder">
	<div class="c_func"><code>int ImGui_ColorEditFlags_NoBorder()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_NoBorder() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_NoBorder") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_NoBorder()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_NoBorder()</code></div>
	<p>ColorButton: disable border (which is enforced by default).</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_NoDragDrop">
	<div class="c_func"><code>int ImGui_ColorEditFlags_NoDragDrop()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_NoDragDrop() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_NoDragDrop") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_NoDragDrop()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_NoDragDrop()</code></div>
	<p>ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_NoInputs">
	<div class="c_func"><code>int ImGui_ColorEditFlags_NoInputs()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_NoInputs() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_NoInputs") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_NoInputs()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_NoInputs()</code></div>
	<p>ColorEdit, ColorPicker: disable inputs sliders/text widgets<br>
   (e.g. to show only the small preview color square).</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_NoLabel">
	<div class="c_func"><code>int ImGui_ColorEditFlags_NoLabel()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_NoLabel() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_NoLabel") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_NoLabel()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_NoLabel()</code></div>
	<p>ColorEdit, ColorPicker: disable display of inline text label<br>
   (the label is still forwarded to the tooltip and picker).</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_NoOptions">
	<div class="c_func"><code>int ImGui_ColorEditFlags_NoOptions()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_NoOptions() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_NoOptions") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_NoOptions()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_NoOptions()</code></div>
	<p>ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_NoPicker">
	<div class="c_func"><code>int ImGui_ColorEditFlags_NoPicker()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_NoPicker() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_NoPicker") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_NoPicker()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_NoPicker()</code></div>
	<p>ColorEdit: disable picker when clicking on color square.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_NoSidePreview">
	<div class="c_func"><code>int ImGui_ColorEditFlags_NoSidePreview()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_NoSidePreview() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_NoSidePreview") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_NoSidePreview()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_NoSidePreview()</code></div>
	<p>ColorPicker: disable bigger color preview on right side of the picker,<br>
   use small color square preview instead.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_NoSmallPreview">
	<div class="c_func"><code>int ImGui_ColorEditFlags_NoSmallPreview()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_NoSmallPreview() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_NoSmallPreview") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_NoSmallPreview()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_NoSmallPreview()</code></div>
	<p>ColorEdit, ColorPicker: disable color square preview next to the inputs.<br>
   (e.g. to show only the inputs).</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_NoTooltip">
	<div class="c_func"><code>int ImGui_ColorEditFlags_NoTooltip()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_NoTooltip() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_NoTooltip") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_NoTooltip()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_NoTooltip()</code></div>
	<p>ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_None">
	<div class="c_func"><code>int ImGui_ColorEditFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_PickerHueBar">
	<div class="c_func"><code>int ImGui_ColorEditFlags_PickerHueBar()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_PickerHueBar() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_PickerHueBar") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_PickerHueBar()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_PickerHueBar()</code></div>
	<p>ColorPicker: bar for Hue, rectangle for Sat/Value.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_PickerHueWheel">
	<div class="c_func"><code>int ImGui_ColorEditFlags_PickerHueWheel()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_PickerHueWheel() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_PickerHueWheel") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_PickerHueWheel()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_PickerHueWheel()</code></div>
	<p>ColorPicker: wheel for Hue, triangle for Sat/Value.</p>
</div>

<div class="function_definition" id="ImGui_ColorEditFlags_Uint8">
	<div class="c_func"><code>int ImGui_ColorEditFlags_Uint8()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ColorEditFlags_Uint8() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ColorEditFlags_Uint8") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ColorEditFlags_Uint8()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ColorEditFlags_Uint8()</code></div>
	<p>ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.</p>
</div>

<div class="function_definition" id="ImGui_ColorPicker3">
	<div class="c_func"><code>bool ImGui_ColorPicker3(ImGui_Context* ctx, const char* label, int* col_rgbInOut, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_ColorPicker3(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>col_rgb, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_ColorPicker3", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>col_rgb, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>col_rgb = reaper.ImGui_ColorPicker3(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>col_rgb, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> col_rgbInOut, <em>Int</em> flagsInOptional) = ImGui_ColorPicker3(ctx, label, col_rgbInOut, flagsInOptional)</code></div>
	<p>Color is in 0xXXRRGGBB. XX is ignored and will not be modified.</p>
</div>

<div class="function_definition" id="ImGui_ColorPicker4">
	<div class="c_func"><code>bool ImGui_ColorPicker4(ImGui_Context* ctx, const char* label, int* col_rgbaInOut, int* flagsInOptional, int* ref_colInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_ColorPicker4(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>col_rgba, <em>optional int</em> flagsIn, <em>optional int</em> ref_colIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_ColorPicker4", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>col_rgba, <em>optional int</em> flagsIn, <em>optional int</em> ref_colIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>col_rgba = reaper.ImGui_ColorPicker4(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>col_rgba, <em>optional integer</em> flagsIn, <em>optional integer</em> ref_colIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> col_rgbaInOut, <em>Int</em> flagsInOptional, <em>Int</em> ref_colInOptional) = ImGui_ColorPicker4(ctx, label, col_rgbaInOut, flagsInOptional, ref_colInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_Combo">
	<div class="c_func"><code>bool ImGui_Combo(ImGui_Context* ctx, const char* label, int* current_itemInOut, const char* items, int items_sz, int* popup_max_height_in_itemsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_Combo(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>current_item, "items", <em>optional int</em> popup_max_height_in_itemsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_Combo", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>current_item, "items", <em>optional int</em> popup_max_height_in_itemsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>current_item = reaper.ImGui_Combo(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>current_item, <em>string</em> items, <em>optional integer</em> popup_max_height_in_itemsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> current_itemInOut, <em>String</em> items, <em>Int</em> items_sz, <em>Int</em> popup_max_height_in_itemsInOptional) = ImGui_Combo(ctx, label, current_itemInOut, items, items_sz, popup_max_height_in_itemsInOptional)</code></div>
	<p>Helper over BeginCombo/EndCombo for convenience purpose. Each item must be<br>
null-terminated (requires REAPER v6.44 or newer for EEL and Lua).</p>
</div>

<div class="function_definition" id="ImGui_ComboFlags_HeightLarge">
	<div class="c_func"><code>int ImGui_ComboFlags_HeightLarge()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ComboFlags_HeightLarge() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ComboFlags_HeightLarge") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ComboFlags_HeightLarge()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ComboFlags_HeightLarge()</code></div>
	<p>Max ~20 items visible.</p>
</div>

<div class="function_definition" id="ImGui_ComboFlags_HeightLargest">
	<div class="c_func"><code>int ImGui_ComboFlags_HeightLargest()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ComboFlags_HeightLargest() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ComboFlags_HeightLargest") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ComboFlags_HeightLargest()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ComboFlags_HeightLargest()</code></div>
	<p>As many fitting items as possible.</p>
</div>

<div class="function_definition" id="ImGui_ComboFlags_HeightRegular">
	<div class="c_func"><code>int ImGui_ComboFlags_HeightRegular()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ComboFlags_HeightRegular() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ComboFlags_HeightRegular") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ComboFlags_HeightRegular()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ComboFlags_HeightRegular()</code></div>
	<p>Max ~8 items visible (default).</p>
</div>

<div class="function_definition" id="ImGui_ComboFlags_HeightSmall">
	<div class="c_func"><code>int ImGui_ComboFlags_HeightSmall()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ComboFlags_HeightSmall() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ComboFlags_HeightSmall") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ComboFlags_HeightSmall()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ComboFlags_HeightSmall()</code></div>
	<p>Max ~4 items visible. Tip: If you want your combo popup to be a specific size<br>
you can use SetNextWindowSizeConstraints prior to calling BeginCombo.</p>
</div>

<div class="function_definition" id="ImGui_ComboFlags_NoArrowButton">
	<div class="c_func"><code>int ImGui_ComboFlags_NoArrowButton()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ComboFlags_NoArrowButton() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ComboFlags_NoArrowButton") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ComboFlags_NoArrowButton()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ComboFlags_NoArrowButton()</code></div>
	<p>Display on the preview box without the square arrow button.</p>
</div>

<div class="function_definition" id="ImGui_ComboFlags_NoPreview">
	<div class="c_func"><code>int ImGui_ComboFlags_NoPreview()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ComboFlags_NoPreview() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ComboFlags_NoPreview") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ComboFlags_NoPreview()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ComboFlags_NoPreview()</code></div>
	<p>Display only a square arrow button.</p>
</div>

<div class="function_definition" id="ImGui_ComboFlags_None">
	<div class="c_func"><code>int ImGui_ComboFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ComboFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ComboFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ComboFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ComboFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_ComboFlags_PopupAlignLeft">
	<div class="c_func"><code>int ImGui_ComboFlags_PopupAlignLeft()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ComboFlags_PopupAlignLeft() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ComboFlags_PopupAlignLeft") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ComboFlags_PopupAlignLeft()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ComboFlags_PopupAlignLeft()</code></div>
	<p>Align the popup toward the left by default.</p>
</div>

<div class="function_definition" id="ImGui_Cond_Always">
	<div class="c_func"><code>int ImGui_Cond_Always()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Cond_Always() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Cond_Always") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Cond_Always()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Cond_Always()</code></div>
	<p>No condition (always set the variable).</p>
</div>

<div class="function_definition" id="ImGui_Cond_Appearing">
	<div class="c_func"><code>int ImGui_Cond_Appearing()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Cond_Appearing() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Cond_Appearing") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Cond_Appearing()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Cond_Appearing()</code></div>
	<p>Set the variable if the object/window is appearing after being<br>
   hidden/inactive (or the first time).</p>
</div>

<div class="function_definition" id="ImGui_Cond_FirstUseEver">
	<div class="c_func"><code>int ImGui_Cond_FirstUseEver()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Cond_FirstUseEver() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Cond_FirstUseEver") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Cond_FirstUseEver()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Cond_FirstUseEver()</code></div>
	<p>Set the variable if the object/window has no persistently saved data<br>
   (no entry in .ini file).</p>
</div>

<div class="function_definition" id="ImGui_Cond_Once">
	<div class="c_func"><code>int ImGui_Cond_Once()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Cond_Once() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Cond_Once") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Cond_Once()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Cond_Once()</code></div>
	<p>Set the variable once per runtime session (only the first call will succeed).</p>
</div>

<div class="function_definition" id="ImGui_ConfigFlags_DockingEnable">
	<div class="c_func"><code>int ImGui_ConfigFlags_DockingEnable()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigFlags_DockingEnable() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigFlags_DockingEnable") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigFlags_DockingEnable()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigFlags_DockingEnable()</code></div>
	<p>[BETA] Enable docking functionality.</p>
</div>

<div class="function_definition" id="ImGui_ConfigFlags_NavEnableKeyboard">
	<div class="c_func"><code>int ImGui_ConfigFlags_NavEnableKeyboard()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigFlags_NavEnableKeyboard() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigFlags_NavEnableKeyboard") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigFlags_NavEnableKeyboard()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigFlags_NavEnableKeyboard()</code></div>
	<p>Master keyboard navigation enable flag.<br>
Enable full Tabbing + directional arrows + space/enter to activate.</p>
</div>

<div class="function_definition" id="ImGui_ConfigFlags_NavEnableSetMousePos">
	<div class="c_func"><code>int ImGui_ConfigFlags_NavEnableSetMousePos()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigFlags_NavEnableSetMousePos() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigFlags_NavEnableSetMousePos") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigFlags_NavEnableSetMousePos()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigFlags_NavEnableSetMousePos()</code></div>
	<p>Instruct navigation to move the mouse cursor.</p>
</div>

<div class="function_definition" id="ImGui_ConfigFlags_NavNoCaptureKeyboard">
	<div class="c_func"><code>int ImGui_ConfigFlags_NavNoCaptureKeyboard()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigFlags_NavNoCaptureKeyboard() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigFlags_NavNoCaptureKeyboard") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigFlags_NavNoCaptureKeyboard()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigFlags_NavNoCaptureKeyboard()</code></div>
	<p>Instruct navigation to not capture global keyboard input when<br>
   ConfigFlags_NavEnableKeyboard is set (see SetNextFrameWantCaptureKeyboard).</p>
</div>

<div class="function_definition" id="ImGui_ConfigFlags_NoMouse">
	<div class="c_func"><code>int ImGui_ConfigFlags_NoMouse()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigFlags_NoMouse() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigFlags_NoMouse") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigFlags_NoMouse()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigFlags_NoMouse()</code></div>
	<p>Instruct imgui to ignore mouse position/buttons.</p>
</div>

<div class="function_definition" id="ImGui_ConfigFlags_NoMouseCursorChange">
	<div class="c_func"><code>int ImGui_ConfigFlags_NoMouseCursorChange()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigFlags_NoMouseCursorChange() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigFlags_NoMouseCursorChange") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigFlags_NoMouseCursorChange()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigFlags_NoMouseCursorChange()</code></div>
	<p>Instruct backend to not alter mouse cursor shape and visibility.</p>
</div>

<div class="function_definition" id="ImGui_ConfigFlags_NoSavedSettings">
	<div class="c_func"><code>int ImGui_ConfigFlags_NoSavedSettings()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigFlags_NoSavedSettings() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigFlags_NoSavedSettings") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigFlags_NoSavedSettings()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigFlags_NoSavedSettings()</code></div>
	<p>Disable state restoration and persistence for the whole context.</p>
</div>

<div class="function_definition" id="ImGui_ConfigFlags_None">
	<div class="c_func"><code>int ImGui_ConfigFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_ConfigVar_DebugBeginReturnValueLoop">
	<div class="c_func"><code>int ImGui_ConfigVar_DebugBeginReturnValueLoop()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_DebugBeginReturnValueLoop() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_DebugBeginReturnValueLoop") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_DebugBeginReturnValueLoop()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_DebugBeginReturnValueLoop()</code></div>
	<p>Some calls to Begin()/BeginChild() will return false.<br>
Will cycle through window depths then repeat. Suggested use: add<br>
"SetConfigVar(ConfigVar_DebugBeginReturnValueLoop(), GetKeyMods() == Mod_Shift"<br>
in your main loop then occasionally press SHIFT.<br>
Windows should be flickering while running.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_DebugBeginReturnValueOnce">
	<div class="c_func"><code>int ImGui_ConfigVar_DebugBeginReturnValueOnce()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_DebugBeginReturnValueOnce() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_DebugBeginReturnValueOnce") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_DebugBeginReturnValueOnce()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_DebugBeginReturnValueOnce()</code></div>
	<p>First-time calls to Begin()/BeginChild() will return false.<br>
**Needs to be set at context startup time** if you don't want to miss windows.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_DockingNoSplit">
	<div class="c_func"><code>int ImGui_ConfigVar_DockingNoSplit()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_DockingNoSplit() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_DockingNoSplit") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_DockingNoSplit()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_DockingNoSplit()</code></div>
	<p>Simplified docking mode: disable window splitting, so docking is limited to<br>
   merging multiple windows together into tab-bars.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_DockingTransparentPayload">
	<div class="c_func"><code>int ImGui_ConfigVar_DockingTransparentPayload()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_DockingTransparentPayload() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_DockingTransparentPayload") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_DockingTransparentPayload()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_DockingTransparentPayload()</code></div>
	<p>Make window or viewport transparent when docking and only display docking<br>
   boxes on the target viewport.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_DockingWithShift">
	<div class="c_func"><code>int ImGui_ConfigVar_DockingWithShift()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_DockingWithShift() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_DockingWithShift") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_DockingWithShift()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_DockingWithShift()</code></div>
	<p>Enable docking with holding Shift key<br>
   (reduce visual noise, allows dropping in wider space</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_DragClickToInputText">
	<div class="c_func"><code>int ImGui_ConfigVar_DragClickToInputText()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_DragClickToInputText() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_DragClickToInputText") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_DragClickToInputText()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_DragClickToInputText()</code></div>
	<p>Enable turning Drag* widgets into text input with a simple mouse<br>
   click-release (without moving). Not desirable on devices without a keyboard.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_Flags">
	<div class="c_func"><code>int ImGui_ConfigVar_Flags()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_Flags() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_Flags") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_Flags()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_Flags()</code></div>
	<p>ConfigFlags_*</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_HoverDelayNormal">
	<div class="c_func"><code>int ImGui_ConfigVar_HoverDelayNormal()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_HoverDelayNormal() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_HoverDelayNormal") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_HoverDelayNormal()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_HoverDelayNormal()</code></div>
	<p>Delay on hovering before IsItemHovered(HoveredFlags_DelayNormal) returns true.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_HoverDelayShort">
	<div class="c_func"><code>int ImGui_ConfigVar_HoverDelayShort()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_HoverDelayShort() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_HoverDelayShort") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_HoverDelayShort()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_HoverDelayShort()</code></div>
	<p>Delay on hovering before IsItemHovered(HoveredFlags_DelayShort) returns true.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_InputTextCursorBlink">
	<div class="c_func"><code>int ImGui_ConfigVar_InputTextCursorBlink()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_InputTextCursorBlink() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_InputTextCursorBlink") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_InputTextCursorBlink()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_InputTextCursorBlink()</code></div>
	<p>Enable blinking cursor (optional as some users consider it to be distracting).</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_InputTextEnterKeepActive">
	<div class="c_func"><code>int ImGui_ConfigVar_InputTextEnterKeepActive()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_InputTextEnterKeepActive() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_InputTextEnterKeepActive") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_InputTextEnterKeepActive()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_InputTextEnterKeepActive()</code></div>
	<p>Pressing Enter will keep item active and select contents (single-line only).</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_InputTrickleEventQueue">
	<div class="c_func"><code>int ImGui_ConfigVar_InputTrickleEventQueue()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_InputTrickleEventQueue() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_InputTrickleEventQueue") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_InputTrickleEventQueue()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_InputTrickleEventQueue()</code></div>
	<p>Enable input queue trickling: some types of events submitted during the same<br>
   frame (e.g. button down + up) will be spread over multiple frames, improving<br>
   interactions with low framerates.<br>
</p><p>
   Warning: when this option is disabled mouse clicks and key presses faster<br>
   than a frame will be lost.<br>
   This affects accessiblity features and some input devices.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_KeyRepeatDelay">
	<div class="c_func"><code>int ImGui_ConfigVar_KeyRepeatDelay()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_KeyRepeatDelay() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_KeyRepeatDelay") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_KeyRepeatDelay()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_KeyRepeatDelay()</code></div>
	<p>When holding a key/button, time before it starts repeating, in seconds<br>
   (for buttons in Repeat mode, etc.).</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_KeyRepeatRate">
	<div class="c_func"><code>int ImGui_ConfigVar_KeyRepeatRate()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_KeyRepeatRate() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_KeyRepeatRate") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_KeyRepeatRate()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_KeyRepeatRate()</code></div>
	<p>When holding a key/button, rate at which it repeats, in seconds.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_MacOSXBehaviors">
	<div class="c_func"><code>int ImGui_ConfigVar_MacOSXBehaviors()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_MacOSXBehaviors() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_MacOSXBehaviors") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_MacOSXBehaviors()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_MacOSXBehaviors()</code></div>
	<p>OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts<br>
   using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows<br>
   instead of Home/End, Double click selects by word instead of selecting whole<br>
   text, Multi-selection in lists uses Cmd/Super instead of Ctrl.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_MouseDoubleClickMaxDist">
	<div class="c_func"><code>int ImGui_ConfigVar_MouseDoubleClickMaxDist()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_MouseDoubleClickMaxDist() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_MouseDoubleClickMaxDist") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_MouseDoubleClickMaxDist()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_MouseDoubleClickMaxDist()</code></div>
	<p>Distance threshold to stay in to validate a double-click, in pixels.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_MouseDoubleClickTime">
	<div class="c_func"><code>int ImGui_ConfigVar_MouseDoubleClickTime()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_MouseDoubleClickTime() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_MouseDoubleClickTime") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_MouseDoubleClickTime()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_MouseDoubleClickTime()</code></div>
	<p>Time for a double-click, in seconds.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_MouseDragThreshold">
	<div class="c_func"><code>int ImGui_ConfigVar_MouseDragThreshold()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_MouseDragThreshold() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_MouseDragThreshold") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_MouseDragThreshold()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_MouseDragThreshold()</code></div>
	<p>Distance threshold before considering we are dragging.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_ViewportsNoDecoration">
	<div class="c_func"><code>int ImGui_ConfigVar_ViewportsNoDecoration()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_ViewportsNoDecoration() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_ViewportsNoDecoration") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_ViewportsNoDecoration()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_ViewportsNoDecoration()</code></div>
	<p>Disable default OS window decoration. Enabling decoration can create<br>
   subsequent issues at OS levels (e.g. minimum window size).</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_WindowsMoveFromTitleBarOnly">
	<div class="c_func"><code>int ImGui_ConfigVar_WindowsMoveFromTitleBarOnly()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_WindowsMoveFromTitleBarOnly() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_WindowsMoveFromTitleBarOnly") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_WindowsMoveFromTitleBarOnly()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_WindowsMoveFromTitleBarOnly()</code></div>
	<p>Enable allowing to move windows only when clicking on their title bar.<br>
   Does not apply to windows without a title bar.</p>
</div>

<div class="function_definition" id="ImGui_ConfigVar_WindowsResizeFromEdges">
	<div class="c_func"><code>int ImGui_ConfigVar_WindowsResizeFromEdges()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_ConfigVar_WindowsResizeFromEdges() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_ConfigVar_WindowsResizeFromEdges") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_ConfigVar_WindowsResizeFromEdges()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_ConfigVar_WindowsResizeFromEdges()</code></div>
	<p>Enable resizing of windows from their edges and from the lower-left corner.</p>
</div>

<div class="function_definition" id="ImGui_CreateContext">
	<div class="c_func"><code>ImGui_Context* ImGui_CreateContext(const char* label, int* config_flagsInOptional)</code></div>
	<div class="e_func"><code><em>ImGui_Context</em>  ImGui_CreateContext("label", <em>optional int</em> config_flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_Context</em>  extension_api("ImGui_CreateContext", "label", <em>optional int</em> config_flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_Context</em> reaper.ImGui_CreateContext(<em>string</em> label, <em>optional integer</em> config_flagsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> retval, <em>String</em> label, <em>Int</em> config_flagsInOptional) = ImGui_CreateContext(label, config_flagsInOptional)</code></div>
	<p>Create a new ReaImGui context.<br>
The context will remain valid as long as it is used in each defer cycle.<br>
</p><p>
The label is used for the tab text when windows are docked in REAPER<br>
and also as a unique identifier for storing settings.</p>
</div>

<div class="function_definition" id="ImGui_CreateDrawListSplitter">
	<div class="c_func"><code>ImGui_DrawListSplitter* ImGui_CreateDrawListSplitter(ImGui_DrawList* draw_list)</code></div>
	<div class="e_func"><code><em>ImGui_DrawListSplitter</em>  ImGui_CreateDrawListSplitter(<em>ImGui_DrawList</em> draw_list) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_DrawListSplitter</em>  extension_api("ImGui_CreateDrawListSplitter", <em>ImGui_DrawList</em> draw_list) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_DrawListSplitter</em> reaper.ImGui_CreateDrawListSplitter(<em>ImGui_DrawList</em> draw_list)</code></div>
	<div class="p_func"><code><em>ImGui_DrawListSplitter</em>  ImGui_CreateDrawListSplitter(<em>ImGui_DrawList</em> draw_list)</code></div>
</div>

<div class="function_definition" id="ImGui_CreateFont">
	<div class="c_func"><code>ImGui_Font* ImGui_CreateFont(const char* family_or_file, int size, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>ImGui_Font</em>  ImGui_CreateFont("family_or_file", <em>int </em>size, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_Font</em>  extension_api("ImGui_CreateFont", "family_or_file", <em>int </em>size, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_Font</em> reaper.ImGui_CreateFont(<em>string</em> family_or_file, <em>integer</em> size, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Font</em> retval, <em>String</em> family_or_file, <em>Int</em> size, <em>Int</em> flagsInOptional) = ImGui_CreateFont(family_or_file, size, flagsInOptional)</code></div>
	<p>Load a font matching a font family name or from a font file.<br>
The font will remain valid while it's attached to a context. See Attach.<br>
</p><p>
The family name can be an installed font or one of the generic fonts:<br>
sans-serif, serif, monospace, cursive, fantasy.<br>
</p><p>
If 'family_or_file' specifies a path to a font file (contains a / or \):<br>
- The first byte of 'flags' is used as the font index within the file<br>
- The font styles in 'flags' are simulated by the font renderer</p>
</div>

<div class="function_definition" id="ImGui_CreateFunctionFromEEL">
	<div class="c_func"><code>ImGui_Function* ImGui_CreateFunctionFromEEL(const char* code)</code></div>
	<div class="e_func"><code><em>ImGui_Function</em>  ImGui_CreateFunctionFromEEL("code") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_Function</em>  extension_api("ImGui_CreateFunctionFromEEL", "code") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_Function</em> reaper.ImGui_CreateFunctionFromEEL(<em>string</em> code)</code></div>
	<div class="p_func"><code><em>ImGui_Function</em>  ImGui_CreateFunctionFromEEL(<em>String</em> code)</code></div>
	<p>Compile an EEL program.<br>
</p><p>
Standard EEL [math](https://www.reaper.fm/sdk/js/basiccode.php#js_basicfunc)<br>
and [string](https://www.reaper.fm/sdk/js/strings.php#js_string_funcs)<br>
functions are available in addition to callback-specific functions<br>
(see InputTextCallback_*).</p>
</div>

<div class="function_definition" id="ImGui_CreateImage">
	<div class="c_func"><code>ImGui_Image* ImGui_CreateImage(const char* file, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>ImGui_Image</em>  ImGui_CreateImage("file", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_Image</em>  extension_api("ImGui_CreateImage", "file", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_Image</em> reaper.ImGui_CreateImage(<em>string</em> file, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Image</em> retval, <em>String</em> file, <em>Int</em> flagsInOptional) = ImGui_CreateImage(file, flagsInOptional)</code></div>
	<p>The returned object is valid as long as it is used in each defer cycle<br>
unless attached to a context (see Attach).<br>
</p><p>
('flags' currently unused and reserved for future expansion)</p>
</div>

<div class="function_definition" id="ImGui_CreateImageFromMem">
	<div class="c_func"><code>ImGui_Image* ImGui_CreateImageFromMem(const char* data, int data_sz)</code></div>
	<div class="e_func"><code><em>ImGui_Image</em>  ImGui_CreateImageFromMem("data") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_Image</em>  extension_api("ImGui_CreateImageFromMem", "data") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_Image</em> reaper.ImGui_CreateImageFromMem(<em>string</em> data)</code></div>
	<div class="p_func"><code><em>ImGui_Image</em>  ImGui_CreateImageFromMem(<em>String</em> data, <em>Int</em> data_sz)</code></div>
	<p>Requires REAPER v6.44 or newer for EEL and Lua. Load from a file using<br>
CreateImage or explicitely specify data_sz if supporting older versions.</p>
</div>

<div class="function_definition" id="ImGui_CreateImageSet">
	<div class="c_func"><code>ImGui_ImageSet* ImGui_CreateImageSet()</code></div>
	<div class="e_func"><code><em>ImGui_ImageSet</em>  ImGui_CreateImageSet() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_ImageSet</em>  extension_api("ImGui_CreateImageSet") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_ImageSet</em>  = reaper.ImGui_CreateImageSet()</code></div>
	<div class="p_func"><code><em>ImGui_ImageSet</em>  ImGui_CreateImageSet()</code></div>
</div>

<div class="function_definition" id="ImGui_CreateListClipper">
	<div class="c_func"><code>ImGui_ListClipper* ImGui_CreateListClipper(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>ImGui_ListClipper</em>  ImGui_CreateListClipper(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_ListClipper</em>  extension_api("ImGui_CreateListClipper", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_ListClipper</em> reaper.ImGui_CreateListClipper(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>ImGui_ListClipper</em>  ImGui_CreateListClipper(<em>ImGui_Context</em> ctx)</code></div>
	<p>The returned clipper object is only valid for the given context and is valid<br>
as long as it is used in each defer cycle unless attached (see Attach).</p>
</div>

<div class="function_definition" id="ImGui_CreateTextFilter">
	<div class="c_func"><code>ImGui_TextFilter* ImGui_CreateTextFilter(const char* default_filterInOptional)</code></div>
	<div class="e_func"><code><em>ImGui_TextFilter</em>  ImGui_CreateTextFilter(<em>optional </em>"default_filterIn") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_TextFilter</em>  extension_api("ImGui_CreateTextFilter", <em>optional </em>"default_filterIn") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_TextFilter</em> reaper.ImGui_CreateTextFilter(<em>optional </em><em>string</em> default_filterIn)</code></div>
	<div class="p_func"><code><em>ImGui_TextFilter</em>  ImGui_CreateTextFilter(<em>String</em> default_filterInOptional)</code></div>
	<p>Valid while used every frame unless attached to a context (see Attach).</p>
</div>

<div class="function_definition" id="ImGui_DebugTextEncoding">
	<div class="c_func"><code>void ImGui_DebugTextEncoding(ImGui_Context* ctx, const char* text)</code></div>
	<div class="e_func"><code>ImGui_DebugTextEncoding(<em>ImGui_Context</em> ctx, "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DebugTextEncoding", <em>ImGui_Context</em> ctx, "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DebugTextEncoding(<em>ImGui_Context</em> ctx, <em>string</em> text)</code></div>
	<div class="p_func"><code>ImGui_DebugTextEncoding(<em>ImGui_Context</em> ctx, <em>String</em> text)</code></div>
	<p>Helper tool to diagnose between text encoding issues and font loading issues.<br>
Pass your UTF-8 string and verify that there are correct.</p>
</div>

<div class="function_definition" id="ImGui_DestroyContext">
	<div class="c_func"><code>void ImGui_DestroyContext(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_DestroyContext(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DestroyContext", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DestroyContext(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_DestroyContext(<em>ImGui_Context</em> ctx)</code></div>
	<p>Free the resources used by a context.<br>
</p><p>
Calling this function is usually not required as all ReaImGui objects are<br>
automatically garbage-collected when unused.</p>
</div>

<div class="function_definition" id="ImGui_Detach">
	<div class="c_func"><code>void ImGui_Detach(ImGui_Context* ctx, ImGui_Resource* obj)</code></div>
	<div class="e_func"><code>ImGui_Detach(<em>ImGui_Context</em> ctx, <em>ImGui_Resource</em> obj) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Detach", <em>ImGui_Context</em> ctx, <em>ImGui_Resource</em> obj) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Detach(<em>ImGui_Context</em> ctx, <em>ImGui_Resource</em> obj)</code></div>
	<div class="p_func"><code>ImGui_Detach(<em>ImGui_Context</em> ctx, <em>ImGui_Resource</em> obj)</code></div>
	<p>Unlink the object's lifetime. Unattached objects are automatically destroyed<br>
when left unused. You may check whether an object has been destroyed using<br>
ValidatePtr.</p>
</div>

<div class="function_definition" id="ImGui_Dir_Down">
	<div class="c_func"><code>int ImGui_Dir_Down()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Dir_Down() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Dir_Down") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Dir_Down()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Dir_Down()</code></div>
</div>

<div class="function_definition" id="ImGui_Dir_Left">
	<div class="c_func"><code>int ImGui_Dir_Left()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Dir_Left() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Dir_Left") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Dir_Left()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Dir_Left()</code></div>
</div>

<div class="function_definition" id="ImGui_Dir_None">
	<div class="c_func"><code>int ImGui_Dir_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Dir_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Dir_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Dir_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Dir_None()</code></div>
</div>

<div class="function_definition" id="ImGui_Dir_Right">
	<div class="c_func"><code>int ImGui_Dir_Right()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Dir_Right() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Dir_Right") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Dir_Right()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Dir_Right()</code></div>
</div>

<div class="function_definition" id="ImGui_Dir_Up">
	<div class="c_func"><code>int ImGui_Dir_Up()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Dir_Up() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Dir_Up") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Dir_Up()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Dir_Up()</code></div>
</div>

<div class="function_definition" id="ImGui_DragDouble">
	<div class="c_func"><code>bool ImGui_DragDouble(ImGui_Context* ctx, const char* label, double* vInOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_DragDouble(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v, <em>optional </em>v_speedIn, <em>optional </em>v_minIn, <em>optional </em>v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_DragDouble", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v, <em>optional </em>v_speedIn, <em>optional </em>v_minIn, <em>optional </em>v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v = reaper.ImGui_DragDouble(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v, <em>optional number </em>v_speedIn, <em>optional number </em>v_minIn, <em>optional number </em>v_maxIn, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> vInOut, <em>Float</em> v_speedInOptional, <em>Float</em> v_minInOptional, <em>Float</em> v_maxInOptional, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_DragDouble(ctx, label, vInOut, v_speedInOptional, v_minInOptional, v_maxInOptional, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DragDouble2">
	<div class="c_func"><code>bool ImGui_DragDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_DragDouble2(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>optional </em>v_speedIn, <em>optional </em>v_minIn, <em>optional </em>v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_DragDouble2", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>optional </em>v_speedIn, <em>optional </em>v_minIn, <em>optional </em>v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v1, <em>number </em>v2 = reaper.ImGui_DragDouble2(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v1, <em>number </em>v2, <em>optional number </em>v_speedIn, <em>optional number </em>v_minIn, <em>optional number </em>v_maxIn, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> v1InOut, <em>Float</em> v2InOut, <em>Float</em> v_speedInOptional, <em>Float</em> v_minInOptional, <em>Float</em> v_maxInOptional, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_DragDouble2(ctx, label, v1InOut, v2InOut, v_speedInOptional, v_minInOptional, v_maxInOptional, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DragDouble3">
	<div class="c_func"><code>bool ImGui_DragDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_DragDouble3(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>&amp;</em>v3, <em>optional </em>v_speedIn, <em>optional </em>v_minIn, <em>optional </em>v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_DragDouble3", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>&amp;</em>v3, <em>optional </em>v_speedIn, <em>optional </em>v_minIn, <em>optional </em>v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v1, <em>number </em>v2, <em>number </em>v3 = reaper.ImGui_DragDouble3(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v1, <em>number </em>v2, <em>number </em>v3, <em>optional number </em>v_speedIn, <em>optional number </em>v_minIn, <em>optional number </em>v_maxIn, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> v1InOut, <em>Float</em> v2InOut, <em>Float</em> v3InOut, <em>Float</em> v_speedInOptional, <em>Float</em> v_minInOptional, <em>Float</em> v_maxInOptional, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_DragDouble3(ctx, label, v1InOut, v2InOut, v3InOut, v_speedInOptional, v_minInOptional, v_maxInOptional, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DragDouble4">
	<div class="c_func"><code>bool ImGui_DragDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_DragDouble4(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>&amp;</em>v3, <em>&amp;</em>v4, <em>optional </em>v_speedIn, <em>optional </em>v_minIn, <em>optional </em>v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_DragDouble4", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>&amp;</em>v3, <em>&amp;</em>v4, <em>optional </em>v_speedIn, <em>optional </em>v_minIn, <em>optional </em>v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v1, <em>number </em>v2, <em>number </em>v3, <em>number </em>v4 = reaper.ImGui_DragDouble4(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v1, <em>number </em>v2, <em>number </em>v3, <em>number </em>v4, <em>optional number </em>v_speedIn, <em>optional number </em>v_minIn, <em>optional number </em>v_maxIn, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> v1InOut, <em>Float</em> v2InOut, <em>Float</em> v3InOut, <em>Float</em> v4InOut, <em>Float</em> v_speedInOptional, <em>Float</em> v_minInOptional, <em>Float</em> v_maxInOptional, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_DragDouble4(ctx, label, v1InOut, v2InOut, v3InOut, v4InOut, v_speedInOptional, v_minInOptional, v_maxInOptional, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DragDoubleN">
	<div class="c_func"><code>bool ImGui_DragDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double* speedInOptional, double* minInOptional, double* maxInOptional, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_DragDoubleN(<em>ImGui_Context</em> ctx, "label", <em>reaper_array</em> values, <em>optional </em>speedIn, <em>optional </em>minIn, <em>optional </em>maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_DragDoubleN", <em>ImGui_Context</em> ctx, "label", <em>reaper_array</em> values, <em>optional </em>speedIn, <em>optional </em>minIn, <em>optional </em>maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_DragDoubleN(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>reaper_array</em> values, <em>optional number </em>speedIn, <em>optional number </em>minIn, <em>optional number </em>maxIn, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>reaper_array</em> values, <em>Float</em> speedInOptional, <em>Float</em> minInOptional, <em>Float</em> maxInOptional, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_DragDoubleN(ctx, label, values, speedInOptional, minInOptional, maxInOptional, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DragDropFlags_AcceptBeforeDelivery">
	<div class="c_func"><code>int ImGui_DragDropFlags_AcceptBeforeDelivery()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DragDropFlags_AcceptBeforeDelivery() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DragDropFlags_AcceptBeforeDelivery") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DragDropFlags_AcceptBeforeDelivery()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DragDropFlags_AcceptBeforeDelivery()</code></div>
	<p>AcceptDragDropPayload will returns true even before the mouse button is<br>
   released. You can then check GetDragDropPayload/is_delivery to test if the<br>
   payload needs to be delivered.</p>
</div>

<div class="function_definition" id="ImGui_DragDropFlags_AcceptNoDrawDefaultRect">
	<div class="c_func"><code>int ImGui_DragDropFlags_AcceptNoDrawDefaultRect()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DragDropFlags_AcceptNoDrawDefaultRect() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DragDropFlags_AcceptNoDrawDefaultRect") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DragDropFlags_AcceptNoDrawDefaultRect()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DragDropFlags_AcceptNoDrawDefaultRect()</code></div>
	<p>Do not draw the default highlight rectangle when hovering over target.</p>
</div>

<div class="function_definition" id="ImGui_DragDropFlags_AcceptNoPreviewTooltip">
	<div class="c_func"><code>int ImGui_DragDropFlags_AcceptNoPreviewTooltip()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DragDropFlags_AcceptNoPreviewTooltip() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DragDropFlags_AcceptNoPreviewTooltip") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DragDropFlags_AcceptNoPreviewTooltip()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DragDropFlags_AcceptNoPreviewTooltip()</code></div>
	<p>Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.</p>
</div>

<div class="function_definition" id="ImGui_DragDropFlags_AcceptPeekOnly">
	<div class="c_func"><code>int ImGui_DragDropFlags_AcceptPeekOnly()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DragDropFlags_AcceptPeekOnly() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DragDropFlags_AcceptPeekOnly") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DragDropFlags_AcceptPeekOnly()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DragDropFlags_AcceptPeekOnly()</code></div>
	<p>For peeking ahead and inspecting the payload before delivery.<br>
   Equivalent to DragDropFlags_AcceptBeforeDelivery |<br>
   DragDropFlags_AcceptNoDrawDefaultRect.</p>
</div>

<div class="function_definition" id="ImGui_DragDropFlags_None">
	<div class="c_func"><code>int ImGui_DragDropFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DragDropFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DragDropFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DragDropFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DragDropFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_DragDropFlags_SourceAllowNullID">
	<div class="c_func"><code>int ImGui_DragDropFlags_SourceAllowNullID()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DragDropFlags_SourceAllowNullID() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DragDropFlags_SourceAllowNullID") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DragDropFlags_SourceAllowNullID()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DragDropFlags_SourceAllowNullID()</code></div>
	<p>Allow items such as Text, Image that have no unique identifier to be used as<br>
   drag source, by manufacturing a temporary identifier based on their<br>
   window-relative position. This is extremely unusual within the dear imgui<br>
   ecosystem and so we made it explicit.</p>
</div>

<div class="function_definition" id="ImGui_DragDropFlags_SourceAutoExpirePayload">
	<div class="c_func"><code>int ImGui_DragDropFlags_SourceAutoExpirePayload()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DragDropFlags_SourceAutoExpirePayload() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DragDropFlags_SourceAutoExpirePayload") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DragDropFlags_SourceAutoExpirePayload()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DragDropFlags_SourceAutoExpirePayload()</code></div>
	<p>Automatically expire the payload if the source cease to be submitted<br>
   (otherwise payloads are persisting while being dragged).</p>
</div>

<div class="function_definition" id="ImGui_DragDropFlags_SourceExtern">
	<div class="c_func"><code>int ImGui_DragDropFlags_SourceExtern()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DragDropFlags_SourceExtern() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DragDropFlags_SourceExtern") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DragDropFlags_SourceExtern()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DragDropFlags_SourceExtern()</code></div>
	<p>External source (from outside of dear imgui), won't attempt to read current<br>
   item/window info. Will always return true.<br>
   Only one Extern source can be active simultaneously.</p>
</div>

<div class="function_definition" id="ImGui_DragDropFlags_SourceNoDisableHover">
	<div class="c_func"><code>int ImGui_DragDropFlags_SourceNoDisableHover()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DragDropFlags_SourceNoDisableHover() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DragDropFlags_SourceNoDisableHover") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DragDropFlags_SourceNoDisableHover()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DragDropFlags_SourceNoDisableHover()</code></div>
	<p>By default, when dragging we clear data so that IsItemHovered will return<br>
   false, to avoid subsequent user code submitting tooltips. This flag disables<br>
   this behavior so you can still call IsItemHovered on the source item.</p>
</div>

<div class="function_definition" id="ImGui_DragDropFlags_SourceNoHoldToOpenOthers">
	<div class="c_func"><code>int ImGui_DragDropFlags_SourceNoHoldToOpenOthers()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DragDropFlags_SourceNoHoldToOpenOthers() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DragDropFlags_SourceNoHoldToOpenOthers") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DragDropFlags_SourceNoHoldToOpenOthers()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DragDropFlags_SourceNoHoldToOpenOthers()</code></div>
	<p>Disable the behavior that allows to open tree nodes and collapsing header by<br>
   holding over them while dragging a source item.</p>
</div>

<div class="function_definition" id="ImGui_DragDropFlags_SourceNoPreviewTooltip">
	<div class="c_func"><code>int ImGui_DragDropFlags_SourceNoPreviewTooltip()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DragDropFlags_SourceNoPreviewTooltip() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DragDropFlags_SourceNoPreviewTooltip") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DragDropFlags_SourceNoPreviewTooltip()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DragDropFlags_SourceNoPreviewTooltip()</code></div>
	<p>By default, a successful call to BeginDragDropSource opens a tooltip so you<br>
   can display a preview or description of the source contents.<br>
   This flag disables this behavior.</p>
</div>

<div class="function_definition" id="ImGui_DragFloatRange2">
	<div class="c_func"><code>bool ImGui_DragFloatRange2(ImGui_Context* ctx, const char* label, double* v_current_minInOut, double* v_current_maxInOut, double* v_speedInOptional, double* v_minInOptional, double* v_maxInOptional, const char* formatInOptional, const char* format_maxInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_DragFloatRange2(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v_current_min, <em>&amp;</em>v_current_max, <em>optional </em>v_speedIn, <em>optional </em>v_minIn, <em>optional </em>v_maxIn, <em>optional </em>"formatIn", <em>optional </em>"format_maxIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_DragFloatRange2", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v_current_min, <em>&amp;</em>v_current_max, <em>optional </em>v_speedIn, <em>optional </em>v_minIn, <em>optional </em>v_maxIn, <em>optional </em>"formatIn", <em>optional </em>"format_maxIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v_current_min, <em>number </em>v_current_max = reaper.ImGui_DragFloatRange2(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v_current_min, <em>number </em>v_current_max, <em>optional number </em>v_speedIn, <em>optional number </em>v_minIn, <em>optional number </em>v_maxIn, <em>optional </em><em>string</em> formatIn, <em>optional </em><em>string</em> format_maxIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> v_current_minInOut, <em>Float</em> v_current_maxInOut, <em>Float</em> v_speedInOptional, <em>Float</em> v_minInOptional, <em>Float</em> v_maxInOptional, <em>String</em> formatInOptional, <em>String</em> format_maxInOptional, <em>Int</em> flagsInOptional) = ImGui_DragFloatRange2(ctx, label, v_current_minInOut, v_current_maxInOut, v_speedInOptional, v_minInOptional, v_maxInOptional, formatInOptional, format_maxInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DragInt">
	<div class="c_func"><code>bool ImGui_DragInt(ImGui_Context* ctx, const char* label, int* vInOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_DragInt(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v, <em>optional </em>v_speedIn, <em>optional int</em> v_minIn, <em>optional int</em> v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_DragInt", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v, <em>optional </em>v_speedIn, <em>optional int</em> v_minIn, <em>optional int</em> v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v = reaper.ImGui_DragInt(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v, <em>optional number </em>v_speedIn, <em>optional integer</em> v_minIn, <em>optional integer</em> v_maxIn, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> vInOut, <em>Float</em> v_speedInOptional, <em>Int</em> v_minInOptional, <em>Int</em> v_maxInOptional, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_DragInt(ctx, label, vInOut, v_speedInOptional, v_minInOptional, v_maxInOptional, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DragInt2">
	<div class="c_func"><code>bool ImGui_DragInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_DragInt2(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>optional </em>v_speedIn, <em>optional int</em> v_minIn, <em>optional int</em> v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_DragInt2", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>optional </em>v_speedIn, <em>optional int</em> v_minIn, <em>optional int</em> v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v1, <em>integer </em>v2 = reaper.ImGui_DragInt2(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v1, <em>integer </em>v2, <em>optional number </em>v_speedIn, <em>optional integer</em> v_minIn, <em>optional integer</em> v_maxIn, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> v1InOut, <em>Int</em> v2InOut, <em>Float</em> v_speedInOptional, <em>Int</em> v_minInOptional, <em>Int</em> v_maxInOptional, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_DragInt2(ctx, label, v1InOut, v2InOut, v_speedInOptional, v_minInOptional, v_maxInOptional, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DragInt3">
	<div class="c_func"><code>bool ImGui_DragInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_DragInt3(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int &amp;</em>v3, <em>optional </em>v_speedIn, <em>optional int</em> v_minIn, <em>optional int</em> v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_DragInt3", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int &amp;</em>v3, <em>optional </em>v_speedIn, <em>optional int</em> v_minIn, <em>optional int</em> v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v1, <em>integer </em>v2, <em>integer </em>v3 = reaper.ImGui_DragInt3(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v1, <em>integer </em>v2, <em>integer </em>v3, <em>optional number </em>v_speedIn, <em>optional integer</em> v_minIn, <em>optional integer</em> v_maxIn, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> v1InOut, <em>Int</em> v2InOut, <em>Int</em> v3InOut, <em>Float</em> v_speedInOptional, <em>Int</em> v_minInOptional, <em>Int</em> v_maxInOptional, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_DragInt3(ctx, label, v1InOut, v2InOut, v3InOut, v_speedInOptional, v_minInOptional, v_maxInOptional, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DragInt4">
	<div class="c_func"><code>bool ImGui_DragInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_DragInt4(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int &amp;</em>v3, <em>int &amp;</em>v4, <em>optional </em>v_speedIn, <em>optional int</em> v_minIn, <em>optional int</em> v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_DragInt4", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int &amp;</em>v3, <em>int &amp;</em>v4, <em>optional </em>v_speedIn, <em>optional int</em> v_minIn, <em>optional int</em> v_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v1, <em>integer </em>v2, <em>integer </em>v3, <em>integer </em>v4 = reaper.ImGui_DragInt4(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v1, <em>integer </em>v2, <em>integer </em>v3, <em>integer </em>v4, <em>optional number </em>v_speedIn, <em>optional integer</em> v_minIn, <em>optional integer</em> v_maxIn, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> v1InOut, <em>Int</em> v2InOut, <em>Int</em> v3InOut, <em>Int</em> v4InOut, <em>Float</em> v_speedInOptional, <em>Int</em> v_minInOptional, <em>Int</em> v_maxInOptional, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_DragInt4(ctx, label, v1InOut, v2InOut, v3InOut, v4InOut, v_speedInOptional, v_minInOptional, v_maxInOptional, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DragIntRange2">
	<div class="c_func"><code>bool ImGui_DragIntRange2(ImGui_Context* ctx, const char* label, int* v_current_minInOut, int* v_current_maxInOut, double* v_speedInOptional, int* v_minInOptional, int* v_maxInOptional, const char* formatInOptional, const char* format_maxInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_DragIntRange2(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v_current_min, <em>int &amp;</em>v_current_max, <em>optional </em>v_speedIn, <em>optional int</em> v_minIn, <em>optional int</em> v_maxIn, <em>optional </em>"formatIn", <em>optional </em>"format_maxIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_DragIntRange2", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v_current_min, <em>int &amp;</em>v_current_max, <em>optional </em>v_speedIn, <em>optional int</em> v_minIn, <em>optional int</em> v_maxIn, <em>optional </em>"formatIn", <em>optional </em>"format_maxIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v_current_min, <em>integer </em>v_current_max = reaper.ImGui_DragIntRange2(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v_current_min, <em>integer </em>v_current_max, <em>optional number </em>v_speedIn, <em>optional integer</em> v_minIn, <em>optional integer</em> v_maxIn, <em>optional </em><em>string</em> formatIn, <em>optional </em><em>string</em> format_maxIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> v_current_minInOut, <em>Int</em> v_current_maxInOut, <em>Float</em> v_speedInOptional, <em>Int</em> v_minInOptional, <em>Int</em> v_maxInOptional, <em>String</em> formatInOptional, <em>String</em> format_maxInOptional, <em>Int</em> flagsInOptional) = ImGui_DragIntRange2(ctx, label, v_current_minInOut, v_current_maxInOut, v_speedInOptional, v_minInOptional, v_maxInOptional, formatInOptional, format_maxInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawFlags_Closed">
	<div class="c_func"><code>int ImGui_DrawFlags_Closed()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DrawFlags_Closed() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DrawFlags_Closed") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DrawFlags_Closed()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DrawFlags_Closed()</code></div>
	<p>DrawList_PathStroke, DrawList_AddPolyline: specify that shape should be<br>
   closed (Important: this is always == 1 for legacy reason).</p>
</div>

<div class="function_definition" id="ImGui_DrawFlags_None">
	<div class="c_func"><code>int ImGui_DrawFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DrawFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DrawFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DrawFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DrawFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_DrawFlags_RoundCornersAll">
	<div class="c_func"><code>int ImGui_DrawFlags_RoundCornersAll()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DrawFlags_RoundCornersAll() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DrawFlags_RoundCornersAll") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DrawFlags_RoundCornersAll()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DrawFlags_RoundCornersAll()</code></div>
</div>

<div class="function_definition" id="ImGui_DrawFlags_RoundCornersBottom">
	<div class="c_func"><code>int ImGui_DrawFlags_RoundCornersBottom()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DrawFlags_RoundCornersBottom() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DrawFlags_RoundCornersBottom") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DrawFlags_RoundCornersBottom()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DrawFlags_RoundCornersBottom()</code></div>
</div>

<div class="function_definition" id="ImGui_DrawFlags_RoundCornersBottomLeft">
	<div class="c_func"><code>int ImGui_DrawFlags_RoundCornersBottomLeft()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DrawFlags_RoundCornersBottomLeft() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DrawFlags_RoundCornersBottomLeft") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DrawFlags_RoundCornersBottomLeft()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DrawFlags_RoundCornersBottomLeft()</code></div>
	<p>DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding<br>
   bottom-left corner only (when rounding &gt; 0.0, we default to all corners).</p>
</div>

<div class="function_definition" id="ImGui_DrawFlags_RoundCornersBottomRight">
	<div class="c_func"><code>int ImGui_DrawFlags_RoundCornersBottomRight()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DrawFlags_RoundCornersBottomRight() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DrawFlags_RoundCornersBottomRight") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DrawFlags_RoundCornersBottomRight()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DrawFlags_RoundCornersBottomRight()</code></div>
	<p>DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding<br>
   bottom-right corner only (when rounding &gt; 0.0, we default to all corners).</p>
</div>

<div class="function_definition" id="ImGui_DrawFlags_RoundCornersLeft">
	<div class="c_func"><code>int ImGui_DrawFlags_RoundCornersLeft()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DrawFlags_RoundCornersLeft() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DrawFlags_RoundCornersLeft") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DrawFlags_RoundCornersLeft()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DrawFlags_RoundCornersLeft()</code></div>
</div>

<div class="function_definition" id="ImGui_DrawFlags_RoundCornersNone">
	<div class="c_func"><code>int ImGui_DrawFlags_RoundCornersNone()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DrawFlags_RoundCornersNone() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DrawFlags_RoundCornersNone") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DrawFlags_RoundCornersNone()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DrawFlags_RoundCornersNone()</code></div>
	<p>DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: disable rounding<br>
   on all corners (when rounding &gt; 0.0). This is NOT zero, NOT an implicit flag!.</p>
</div>

<div class="function_definition" id="ImGui_DrawFlags_RoundCornersRight">
	<div class="c_func"><code>int ImGui_DrawFlags_RoundCornersRight()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DrawFlags_RoundCornersRight() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DrawFlags_RoundCornersRight") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DrawFlags_RoundCornersRight()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DrawFlags_RoundCornersRight()</code></div>
</div>

<div class="function_definition" id="ImGui_DrawFlags_RoundCornersTop">
	<div class="c_func"><code>int ImGui_DrawFlags_RoundCornersTop()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DrawFlags_RoundCornersTop() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DrawFlags_RoundCornersTop") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DrawFlags_RoundCornersTop()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DrawFlags_RoundCornersTop()</code></div>
</div>

<div class="function_definition" id="ImGui_DrawFlags_RoundCornersTopLeft">
	<div class="c_func"><code>int ImGui_DrawFlags_RoundCornersTopLeft()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DrawFlags_RoundCornersTopLeft() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DrawFlags_RoundCornersTopLeft") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DrawFlags_RoundCornersTopLeft()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DrawFlags_RoundCornersTopLeft()</code></div>
	<p>DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding<br>
   top-left corner only (when rounding &gt; 0.0, we default to all corners).</p>
</div>

<div class="function_definition" id="ImGui_DrawFlags_RoundCornersTopRight">
	<div class="c_func"><code>int ImGui_DrawFlags_RoundCornersTopRight()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_DrawFlags_RoundCornersTopRight() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_DrawFlags_RoundCornersTopRight") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_DrawFlags_RoundCornersTopRight()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_DrawFlags_RoundCornersTopRight()</code></div>
	<p>DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding<br>
   top-right corner only (when rounding &gt; 0.0, we default to all corners).</p>
</div>

<div class="function_definition" id="ImGui_DrawListSplitter_Clear">
	<div class="c_func"><code>void ImGui_DrawListSplitter_Clear(ImGui_DrawListSplitter* splitter)</code></div>
	<div class="e_func"><code>ImGui_DrawListSplitter_Clear(<em>ImGui_DrawListSplitter</em> splitter) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawListSplitter_Clear", <em>ImGui_DrawListSplitter</em> splitter) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawListSplitter_Clear(<em>ImGui_DrawListSplitter</em> splitter)</code></div>
	<div class="p_func"><code>ImGui_DrawListSplitter_Clear(<em>ImGui_DrawListSplitter</em> splitter)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawListSplitter_Merge">
	<div class="c_func"><code>void ImGui_DrawListSplitter_Merge(ImGui_DrawListSplitter* splitter)</code></div>
	<div class="e_func"><code>ImGui_DrawListSplitter_Merge(<em>ImGui_DrawListSplitter</em> splitter) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawListSplitter_Merge", <em>ImGui_DrawListSplitter</em> splitter) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawListSplitter_Merge(<em>ImGui_DrawListSplitter</em> splitter)</code></div>
	<div class="p_func"><code>ImGui_DrawListSplitter_Merge(<em>ImGui_DrawListSplitter</em> splitter)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawListSplitter_SetCurrentChannel">
	<div class="c_func"><code>void ImGui_DrawListSplitter_SetCurrentChannel(ImGui_DrawListSplitter* splitter, int channel_idx)</code></div>
	<div class="e_func"><code>ImGui_DrawListSplitter_SetCurrentChannel(<em>ImGui_DrawListSplitter</em> splitter, <em>int </em>channel_idx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawListSplitter_SetCurrentChannel", <em>ImGui_DrawListSplitter</em> splitter, <em>int </em>channel_idx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawListSplitter_SetCurrentChannel(<em>ImGui_DrawListSplitter</em> splitter, <em>integer</em> channel_idx)</code></div>
	<div class="p_func"><code>ImGui_DrawListSplitter_SetCurrentChannel(<em>ImGui_DrawListSplitter</em> splitter, <em>Int</em> channel_idx)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawListSplitter_Split">
	<div class="c_func"><code>void ImGui_DrawListSplitter_Split(ImGui_DrawListSplitter* splitter, int count)</code></div>
	<div class="e_func"><code>ImGui_DrawListSplitter_Split(<em>ImGui_DrawListSplitter</em> splitter, <em>int </em>count) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawListSplitter_Split", <em>ImGui_DrawListSplitter</em> splitter, <em>int </em>count) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawListSplitter_Split(<em>ImGui_DrawListSplitter</em> splitter, <em>integer</em> count)</code></div>
	<div class="p_func"><code>ImGui_DrawListSplitter_Split(<em>ImGui_DrawListSplitter</em> splitter, <em>Int</em> count)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddBezierCubic">
	<div class="c_func"><code>void ImGui_DrawList_AddBezierCubic(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba, double thickness, int* num_segmentsInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddBezierCubic(<em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, <em>int </em>col_rgba, thickness, <em>optional int</em> num_segmentsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddBezierCubic", <em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, <em>int </em>col_rgba, thickness, <em>optional int</em> num_segmentsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddBezierCubic(<em>ImGui_DrawList</em> draw_list, <em>number</em> p1_x, <em>number</em> p1_y, <em>number</em> p2_x, <em>number</em> p2_y, <em>number</em> p3_x, <em>number</em> p3_y, <em>number</em> p4_x, <em>number</em> p4_y, <em>integer</em> col_rgba, <em>number</em> thickness, <em>optional integer</em> num_segmentsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> p1_x, <em>Float</em> p1_y, <em>Float</em> p2_x, <em>Float</em> p2_y, <em>Float</em> p3_x, <em>Float</em> p3_y, <em>Float</em> p4_x, <em>Float</em> p4_y, <em>Int</em> col_rgba, <em>Float</em> thickness, <em>Int</em> num_segmentsInOptional) = ImGui_DrawList_AddBezierCubic(draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, col_rgba, thickness, num_segmentsInOptional)</code></div>
	<p>Cubic Bezier (4 control points)</p>
</div>

<div class="function_definition" id="ImGui_DrawList_AddBezierQuadratic">
	<div class="c_func"><code>void ImGui_DrawList_AddBezierQuadratic(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba, double thickness, int* num_segmentsInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddBezierQuadratic(<em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, <em>int </em>col_rgba, thickness, <em>optional int</em> num_segmentsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddBezierQuadratic", <em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, <em>int </em>col_rgba, thickness, <em>optional int</em> num_segmentsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddBezierQuadratic(<em>ImGui_DrawList</em> draw_list, <em>number</em> p1_x, <em>number</em> p1_y, <em>number</em> p2_x, <em>number</em> p2_y, <em>number</em> p3_x, <em>number</em> p3_y, <em>integer</em> col_rgba, <em>number</em> thickness, <em>optional integer</em> num_segmentsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> p1_x, <em>Float</em> p1_y, <em>Float</em> p2_x, <em>Float</em> p2_y, <em>Float</em> p3_x, <em>Float</em> p3_y, <em>Int</em> col_rgba, <em>Float</em> thickness, <em>Int</em> num_segmentsInOptional) = ImGui_DrawList_AddBezierQuadratic(draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, col_rgba, thickness, num_segmentsInOptional)</code></div>
	<p>Quadratic Bezier (3 control points)</p>
</div>

<div class="function_definition" id="ImGui_DrawList_AddCircle">
	<div class="c_func"><code>void ImGui_DrawList_AddCircle(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int* num_segmentsInOptional, double* thicknessInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddCircle(<em>ImGui_DrawList</em> draw_list, center_x, center_y, radius, <em>int </em>col_rgba, <em>optional int</em> num_segmentsIn, <em>optional </em>thicknessIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddCircle", <em>ImGui_DrawList</em> draw_list, center_x, center_y, radius, <em>int </em>col_rgba, <em>optional int</em> num_segmentsIn, <em>optional </em>thicknessIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddCircle(<em>ImGui_DrawList</em> draw_list, <em>number</em> center_x, <em>number</em> center_y, <em>number</em> radius, <em>integer</em> col_rgba, <em>optional integer</em> num_segmentsIn, <em>optional number </em>thicknessIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> center_x, <em>Float</em> center_y, <em>Float</em> radius, <em>Int</em> col_rgba, <em>Int</em> num_segmentsInOptional, <em>Float</em> thicknessInOptional) = ImGui_DrawList_AddCircle(draw_list, center_x, center_y, radius, col_rgba, num_segmentsInOptional, thicknessInOptional)</code></div>
	<p>Use "num_segments == 0" to automatically calculate tessellation (preferred).</p>
</div>

<div class="function_definition" id="ImGui_DrawList_AddCircleFilled">
	<div class="c_func"><code>void ImGui_DrawList_AddCircleFilled(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int* num_segmentsInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddCircleFilled(<em>ImGui_DrawList</em> draw_list, center_x, center_y, radius, <em>int </em>col_rgba, <em>optional int</em> num_segmentsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddCircleFilled", <em>ImGui_DrawList</em> draw_list, center_x, center_y, radius, <em>int </em>col_rgba, <em>optional int</em> num_segmentsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddCircleFilled(<em>ImGui_DrawList</em> draw_list, <em>number</em> center_x, <em>number</em> center_y, <em>number</em> radius, <em>integer</em> col_rgba, <em>optional integer</em> num_segmentsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> center_x, <em>Float</em> center_y, <em>Float</em> radius, <em>Int</em> col_rgba, <em>Int</em> num_segmentsInOptional) = ImGui_DrawList_AddCircleFilled(draw_list, center_x, center_y, radius, col_rgba, num_segmentsInOptional)</code></div>
	<p>Use "num_segments == 0" to automatically calculate tessellation (preferred).</p>
</div>

<div class="function_definition" id="ImGui_DrawList_AddConvexPolyFilled">
	<div class="c_func"><code>void ImGui_DrawList_AddConvexPolyFilled(ImGui_DrawList* draw_list, reaper_array* points, int col_rgba)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddConvexPolyFilled(<em>ImGui_DrawList</em> draw_list, <em>reaper_array</em> points, <em>int </em>col_rgba) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddConvexPolyFilled", <em>ImGui_DrawList</em> draw_list, <em>reaper_array</em> points, <em>int </em>col_rgba) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddConvexPolyFilled(<em>ImGui_DrawList</em> draw_list, <em>reaper_array</em> points, <em>integer</em> col_rgba)</code></div>
	<div class="p_func"><code>ImGui_DrawList_AddConvexPolyFilled(<em>ImGui_DrawList</em> draw_list, <em>reaper_array</em> points, <em>Int</em> col_rgba)</code></div>
	<p>Note: Anti-aliased filling requires points to be in clockwise order.</p>
</div>

<div class="function_definition" id="ImGui_DrawList_AddImage">
	<div class="c_func"><code>void ImGui_DrawList_AddImage(ImGui_DrawList* draw_list, ImGui_Image* img, double p_min_x, double p_min_y, double p_max_x, double p_max_y, double* uv_min_xInOptional, double* uv_min_yInOptional, double* uv_max_xInOptional, double* uv_max_yInOptional, int* col_rgbaInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddImage(<em>ImGui_DrawList</em> draw_list, <em>ImGui_Image</em> img, p_min_x, p_min_y, p_max_x, p_max_y, <em>optional </em>uv_min_xIn, <em>optional </em>uv_min_yIn, <em>optional </em>uv_max_xIn, <em>optional </em>uv_max_yIn, <em>optional int</em> col_rgbaIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddImage", <em>ImGui_DrawList</em> draw_list, <em>ImGui_Image</em> img, p_min_x, p_min_y, p_max_x, p_max_y, <em>optional </em>uv_min_xIn, <em>optional </em>uv_min_yIn, <em>optional </em>uv_max_xIn, <em>optional </em>uv_max_yIn, <em>optional int</em> col_rgbaIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddImage(<em>ImGui_DrawList</em> draw_list, <em>ImGui_Image</em> img, <em>number</em> p_min_x, <em>number</em> p_min_y, <em>number</em> p_max_x, <em>number</em> p_max_y, <em>optional number </em>uv_min_xIn, <em>optional number </em>uv_min_yIn, <em>optional number </em>uv_max_xIn, <em>optional number </em>uv_max_yIn, <em>optional integer</em> col_rgbaIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>ImGui_Image</em> img, <em>Float</em> p_min_x, <em>Float</em> p_min_y, <em>Float</em> p_max_x, <em>Float</em> p_max_y, <em>Float</em> uv_min_xInOptional, <em>Float</em> uv_min_yInOptional, <em>Float</em> uv_max_xInOptional, <em>Float</em> uv_max_yInOptional, <em>Int</em> col_rgbaInOptional) = ImGui_DrawList_AddImage(draw_list, img, p_min_x, p_min_y, p_max_x, p_max_y, uv_min_xInOptional, uv_min_yInOptional, uv_max_xInOptional, uv_max_yInOptional, col_rgbaInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddImageQuad">
	<div class="c_func"><code>void ImGui_DrawList_AddImageQuad(ImGui_DrawList* draw_list, ImGui_Image* img, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, double* uv1_xInOptional, double* uv1_yInOptional, double* uv2_xInOptional, double* uv2_yInOptional, double* uv3_xInOptional, double* uv3_yInOptional, double* uv4_xInOptional, double* uv4_yInOptional, int* col_rgbaInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddImageQuad(<em>ImGui_DrawList</em> draw_list, <em>ImGui_Image</em> img, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, <em>optional </em>uv1_xIn, <em>optional </em>uv1_yIn, <em>optional </em>uv2_xIn, <em>optional </em>uv2_yIn, <em>optional </em>uv3_xIn, <em>optional </em>uv3_yIn, <em>optional </em>uv4_xIn, <em>optional </em>uv4_yIn, <em>optional int</em> col_rgbaIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddImageQuad", <em>ImGui_DrawList</em> draw_list, <em>ImGui_Image</em> img, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, <em>optional </em>uv1_xIn, <em>optional </em>uv1_yIn, <em>optional </em>uv2_xIn, <em>optional </em>uv2_yIn, <em>optional </em>uv3_xIn, <em>optional </em>uv3_yIn, <em>optional </em>uv4_xIn, <em>optional </em>uv4_yIn, <em>optional int</em> col_rgbaIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddImageQuad(<em>ImGui_DrawList</em> draw_list, <em>ImGui_Image</em> img, <em>number</em> p1_x, <em>number</em> p1_y, <em>number</em> p2_x, <em>number</em> p2_y, <em>number</em> p3_x, <em>number</em> p3_y, <em>number</em> p4_x, <em>number</em> p4_y, <em>optional number </em>uv1_xIn, <em>optional number </em>uv1_yIn, <em>optional number </em>uv2_xIn, <em>optional number </em>uv2_yIn, <em>optional number </em>uv3_xIn, <em>optional number </em>uv3_yIn, <em>optional number </em>uv4_xIn, <em>optional number </em>uv4_yIn, <em>optional integer</em> col_rgbaIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>ImGui_Image</em> img, <em>Float</em> p1_x, <em>Float</em> p1_y, <em>Float</em> p2_x, <em>Float</em> p2_y, <em>Float</em> p3_x, <em>Float</em> p3_y, <em>Float</em> p4_x, <em>Float</em> p4_y, <em>Float</em> uv1_xInOptional, <em>Float</em> uv1_yInOptional, <em>Float</em> uv2_xInOptional, <em>Float</em> uv2_yInOptional, <em>Float</em> uv3_xInOptional, <em>Float</em> uv3_yInOptional, <em>Float</em> uv4_xInOptional, <em>Float</em> uv4_yInOptional, <em>Int</em> col_rgbaInOptional) = ImGui_DrawList_AddImageQuad(draw_list, img, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, uv1_xInOptional, uv1_yInOptional, uv2_xInOptional, uv2_yInOptional, uv3_xInOptional, uv3_yInOptional, uv4_xInOptional, uv4_yInOptional, col_rgbaInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddImageRounded">
	<div class="c_func"><code>void ImGui_DrawList_AddImageRounded(ImGui_DrawList* draw_list, ImGui_Image* img, double p_min_x, double p_min_y, double p_max_x, double p_max_y, double uv_min_x, double uv_min_y, double uv_max_x, double uv_max_y, int col_rgba, double rounding, int* flagsInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddImageRounded(<em>ImGui_DrawList</em> draw_list, <em>ImGui_Image</em> img, p_min_x, p_min_y, p_max_x, p_max_y, uv_min_x, uv_min_y, uv_max_x, uv_max_y, <em>int </em>col_rgba, rounding, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddImageRounded", <em>ImGui_DrawList</em> draw_list, <em>ImGui_Image</em> img, p_min_x, p_min_y, p_max_x, p_max_y, uv_min_x, uv_min_y, uv_max_x, uv_max_y, <em>int </em>col_rgba, rounding, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddImageRounded(<em>ImGui_DrawList</em> draw_list, <em>ImGui_Image</em> img, <em>number</em> p_min_x, <em>number</em> p_min_y, <em>number</em> p_max_x, <em>number</em> p_max_y, <em>number</em> uv_min_x, <em>number</em> uv_min_y, <em>number</em> uv_max_x, <em>number</em> uv_max_y, <em>integer</em> col_rgba, <em>number</em> rounding, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>ImGui_Image</em> img, <em>Float</em> p_min_x, <em>Float</em> p_min_y, <em>Float</em> p_max_x, <em>Float</em> p_max_y, <em>Float</em> uv_min_x, <em>Float</em> uv_min_y, <em>Float</em> uv_max_x, <em>Float</em> uv_max_y, <em>Int</em> col_rgba, <em>Float</em> rounding, <em>Int</em> flagsInOptional) = ImGui_DrawList_AddImageRounded(draw_list, img, p_min_x, p_min_y, p_max_x, p_max_y, uv_min_x, uv_min_y, uv_max_x, uv_max_y, col_rgba, rounding, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddLine">
	<div class="c_func"><code>void ImGui_DrawList_AddLine(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, int col_rgba, double* thicknessInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddLine(<em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, <em>int </em>col_rgba, <em>optional </em>thicknessIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddLine", <em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, <em>int </em>col_rgba, <em>optional </em>thicknessIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddLine(<em>ImGui_DrawList</em> draw_list, <em>number</em> p1_x, <em>number</em> p1_y, <em>number</em> p2_x, <em>number</em> p2_y, <em>integer</em> col_rgba, <em>optional number </em>thicknessIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> p1_x, <em>Float</em> p1_y, <em>Float</em> p2_x, <em>Float</em> p2_y, <em>Int</em> col_rgba, <em>Float</em> thicknessInOptional) = ImGui_DrawList_AddLine(draw_list, p1_x, p1_y, p2_x, p2_y, col_rgba, thicknessInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddNgon">
	<div class="c_func"><code>void ImGui_DrawList_AddNgon(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int num_segments, double* thicknessInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddNgon(<em>ImGui_DrawList</em> draw_list, center_x, center_y, radius, <em>int </em>col_rgba, <em>int </em>num_segments, <em>optional </em>thicknessIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddNgon", <em>ImGui_DrawList</em> draw_list, center_x, center_y, radius, <em>int </em>col_rgba, <em>int </em>num_segments, <em>optional </em>thicknessIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddNgon(<em>ImGui_DrawList</em> draw_list, <em>number</em> center_x, <em>number</em> center_y, <em>number</em> radius, <em>integer</em> col_rgba, <em>integer</em> num_segments, <em>optional number </em>thicknessIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> center_x, <em>Float</em> center_y, <em>Float</em> radius, <em>Int</em> col_rgba, <em>Int</em> num_segments, <em>Float</em> thicknessInOptional) = ImGui_DrawList_AddNgon(draw_list, center_x, center_y, radius, col_rgba, num_segments, thicknessInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddNgonFilled">
	<div class="c_func"><code>void ImGui_DrawList_AddNgonFilled(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int col_rgba, int num_segments)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddNgonFilled(<em>ImGui_DrawList</em> draw_list, center_x, center_y, radius, <em>int </em>col_rgba, <em>int </em>num_segments) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddNgonFilled", <em>ImGui_DrawList</em> draw_list, center_x, center_y, radius, <em>int </em>col_rgba, <em>int </em>num_segments) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddNgonFilled(<em>ImGui_DrawList</em> draw_list, <em>number</em> center_x, <em>number</em> center_y, <em>number</em> radius, <em>integer</em> col_rgba, <em>integer</em> num_segments)</code></div>
	<div class="p_func"><code>ImGui_DrawList_AddNgonFilled(<em>ImGui_DrawList</em> draw_list, <em>Float</em> center_x, <em>Float</em> center_y, <em>Float</em> radius, <em>Int</em> col_rgba, <em>Int</em> num_segments)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddPolyline">
	<div class="c_func"><code>void ImGui_DrawList_AddPolyline(ImGui_DrawList* draw_list, reaper_array* points, int col_rgba, int flags, double thickness)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddPolyline(<em>ImGui_DrawList</em> draw_list, <em>reaper_array</em> points, <em>int </em>col_rgba, <em>int </em>flags, thickness) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddPolyline", <em>ImGui_DrawList</em> draw_list, <em>reaper_array</em> points, <em>int </em>col_rgba, <em>int </em>flags, thickness) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddPolyline(<em>ImGui_DrawList</em> draw_list, <em>reaper_array</em> points, <em>integer</em> col_rgba, <em>integer</em> flags, <em>number</em> thickness)</code></div>
	<div class="p_func"><code>ImGui_DrawList_AddPolyline(<em>ImGui_DrawList</em> draw_list, <em>reaper_array</em> points, <em>Int</em> col_rgba, <em>Int</em> flags, <em>Float</em> thickness)</code></div>
	<p>Points is a list of x,y coordinates.</p>
</div>

<div class="function_definition" id="ImGui_DrawList_AddQuad">
	<div class="c_func"><code>void ImGui_DrawList_AddQuad(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba, double* thicknessInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddQuad(<em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, <em>int </em>col_rgba, <em>optional </em>thicknessIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddQuad", <em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, <em>int </em>col_rgba, <em>optional </em>thicknessIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddQuad(<em>ImGui_DrawList</em> draw_list, <em>number</em> p1_x, <em>number</em> p1_y, <em>number</em> p2_x, <em>number</em> p2_y, <em>number</em> p3_x, <em>number</em> p3_y, <em>number</em> p4_x, <em>number</em> p4_y, <em>integer</em> col_rgba, <em>optional number </em>thicknessIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> p1_x, <em>Float</em> p1_y, <em>Float</em> p2_x, <em>Float</em> p2_y, <em>Float</em> p3_x, <em>Float</em> p3_y, <em>Float</em> p4_x, <em>Float</em> p4_y, <em>Int</em> col_rgba, <em>Float</em> thicknessInOptional) = ImGui_DrawList_AddQuad(draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, col_rgba, thicknessInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddQuadFilled">
	<div class="c_func"><code>void ImGui_DrawList_AddQuadFilled(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int col_rgba)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddQuadFilled(<em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, <em>int </em>col_rgba) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddQuadFilled", <em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, <em>int </em>col_rgba) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddQuadFilled(<em>ImGui_DrawList</em> draw_list, <em>number</em> p1_x, <em>number</em> p1_y, <em>number</em> p2_x, <em>number</em> p2_y, <em>number</em> p3_x, <em>number</em> p3_y, <em>number</em> p4_x, <em>number</em> p4_y, <em>integer</em> col_rgba)</code></div>
	<div class="p_func"><code>ImGui_DrawList_AddQuadFilled(<em>ImGui_DrawList</em> draw_list, <em>Float</em> p1_x, <em>Float</em> p1_y, <em>Float</em> p2_x, <em>Float</em> p2_y, <em>Float</em> p3_x, <em>Float</em> p3_y, <em>Float</em> p4_x, <em>Float</em> p4_y, <em>Int</em> col_rgba)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddRect">
	<div class="c_func"><code>void ImGui_DrawList_AddRect(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_rgba, double* roundingInOptional, int* flagsInOptional, double* thicknessInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddRect(<em>ImGui_DrawList</em> draw_list, p_min_x, p_min_y, p_max_x, p_max_y, <em>int </em>col_rgba, <em>optional </em>roundingIn, <em>optional int</em> flagsIn, <em>optional </em>thicknessIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddRect", <em>ImGui_DrawList</em> draw_list, p_min_x, p_min_y, p_max_x, p_max_y, <em>int </em>col_rgba, <em>optional </em>roundingIn, <em>optional int</em> flagsIn, <em>optional </em>thicknessIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddRect(<em>ImGui_DrawList</em> draw_list, <em>number</em> p_min_x, <em>number</em> p_min_y, <em>number</em> p_max_x, <em>number</em> p_max_y, <em>integer</em> col_rgba, <em>optional number </em>roundingIn, <em>optional integer</em> flagsIn, <em>optional number </em>thicknessIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> p_min_x, <em>Float</em> p_min_y, <em>Float</em> p_max_x, <em>Float</em> p_max_y, <em>Int</em> col_rgba, <em>Float</em> roundingInOptional, <em>Int</em> flagsInOptional, <em>Float</em> thicknessInOptional) = ImGui_DrawList_AddRect(draw_list, p_min_x, p_min_y, p_max_x, p_max_y, col_rgba, roundingInOptional, flagsInOptional, thicknessInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddRectFilled">
	<div class="c_func"><code>void ImGui_DrawList_AddRectFilled(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_rgba, double* roundingInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddRectFilled(<em>ImGui_DrawList</em> draw_list, p_min_x, p_min_y, p_max_x, p_max_y, <em>int </em>col_rgba, <em>optional </em>roundingIn, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddRectFilled", <em>ImGui_DrawList</em> draw_list, p_min_x, p_min_y, p_max_x, p_max_y, <em>int </em>col_rgba, <em>optional </em>roundingIn, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddRectFilled(<em>ImGui_DrawList</em> draw_list, <em>number</em> p_min_x, <em>number</em> p_min_y, <em>number</em> p_max_x, <em>number</em> p_max_y, <em>integer</em> col_rgba, <em>optional number </em>roundingIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> p_min_x, <em>Float</em> p_min_y, <em>Float</em> p_max_x, <em>Float</em> p_max_y, <em>Int</em> col_rgba, <em>Float</em> roundingInOptional, <em>Int</em> flagsInOptional) = ImGui_DrawList_AddRectFilled(draw_list, p_min_x, p_min_y, p_max_x, p_max_y, col_rgba, roundingInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddRectFilledMultiColor">
	<div class="c_func"><code>void ImGui_DrawList_AddRectFilledMultiColor(ImGui_DrawList* draw_list, double p_min_x, double p_min_y, double p_max_x, double p_max_y, int col_upr_left, int col_upr_right, int col_bot_right, int col_bot_left)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddRectFilledMultiColor(<em>ImGui_DrawList</em> draw_list, p_min_x, p_min_y, p_max_x, p_max_y, <em>int </em>col_upr_left, <em>int </em>col_upr_right, <em>int </em>col_bot_right, <em>int </em>col_bot_left) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddRectFilledMultiColor", <em>ImGui_DrawList</em> draw_list, p_min_x, p_min_y, p_max_x, p_max_y, <em>int </em>col_upr_left, <em>int </em>col_upr_right, <em>int </em>col_bot_right, <em>int </em>col_bot_left) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddRectFilledMultiColor(<em>ImGui_DrawList</em> draw_list, <em>number</em> p_min_x, <em>number</em> p_min_y, <em>number</em> p_max_x, <em>number</em> p_max_y, <em>integer</em> col_upr_left, <em>integer</em> col_upr_right, <em>integer</em> col_bot_right, <em>integer</em> col_bot_left)</code></div>
	<div class="p_func"><code>ImGui_DrawList_AddRectFilledMultiColor(<em>ImGui_DrawList</em> draw_list, <em>Float</em> p_min_x, <em>Float</em> p_min_y, <em>Float</em> p_max_x, <em>Float</em> p_max_y, <em>Int</em> col_upr_left, <em>Int</em> col_upr_right, <em>Int</em> col_bot_right, <em>Int</em> col_bot_left)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddText">
	<div class="c_func"><code>void ImGui_DrawList_AddText(ImGui_DrawList* draw_list, double x, double y, int col_rgba, const char* text)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddText(<em>ImGui_DrawList</em> draw_list, x, y, <em>int </em>col_rgba, "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddText", <em>ImGui_DrawList</em> draw_list, x, y, <em>int </em>col_rgba, "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddText(<em>ImGui_DrawList</em> draw_list, <em>number</em> x, <em>number</em> y, <em>integer</em> col_rgba, <em>string</em> text)</code></div>
	<div class="p_func"><code>ImGui_DrawList_AddText(<em>ImGui_DrawList</em> draw_list, <em>Float</em> x, <em>Float</em> y, <em>Int</em> col_rgba, <em>String</em> text)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddTextEx">
	<div class="c_func"><code>void ImGui_DrawList_AddTextEx(ImGui_DrawList* draw_list, ImGui_Font* font, double font_size, double pos_x, double pos_y, int col_rgba, const char* text, double* wrap_widthInOptional, double* cpu_fine_clip_rect_xInOptional, double* cpu_fine_clip_rect_yInOptional, double* cpu_fine_clip_rect_wInOptional, double* cpu_fine_clip_rect_hInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddTextEx(<em>ImGui_DrawList</em> draw_list, <em>ImGui_Font</em> font, font_size, pos_x, pos_y, <em>int </em>col_rgba, "text", <em>optional </em>wrap_widthIn, <em>optional </em>cpu_fine_clip_rect_xIn, <em>optional </em>cpu_fine_clip_rect_yIn, <em>optional </em>cpu_fine_clip_rect_wIn, <em>optional </em>cpu_fine_clip_rect_hIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddTextEx", <em>ImGui_DrawList</em> draw_list, <em>ImGui_Font</em> font, font_size, pos_x, pos_y, <em>int </em>col_rgba, "text", <em>optional </em>wrap_widthIn, <em>optional </em>cpu_fine_clip_rect_xIn, <em>optional </em>cpu_fine_clip_rect_yIn, <em>optional </em>cpu_fine_clip_rect_wIn, <em>optional </em>cpu_fine_clip_rect_hIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddTextEx(<em>ImGui_DrawList</em> draw_list, <em>ImGui_Font</em> font, <em>number</em> font_size, <em>number</em> pos_x, <em>number</em> pos_y, <em>integer</em> col_rgba, <em>string</em> text, <em>optional number </em>wrap_widthIn, <em>optional number </em>cpu_fine_clip_rect_xIn, <em>optional number </em>cpu_fine_clip_rect_yIn, <em>optional number </em>cpu_fine_clip_rect_wIn, <em>optional number </em>cpu_fine_clip_rect_hIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>ImGui_Font</em> font, <em>Float</em> font_size, <em>Float</em> pos_x, <em>Float</em> pos_y, <em>Int</em> col_rgba, <em>String</em> text, <em>Float</em> wrap_widthInOptional, <em>Float</em> cpu_fine_clip_rect_xInOptional, <em>Float</em> cpu_fine_clip_rect_yInOptional, <em>Float</em> cpu_fine_clip_rect_wInOptional, <em>Float</em> cpu_fine_clip_rect_hInOptional) = ImGui_DrawList_AddTextEx(draw_list, font, font_size, pos_x, pos_y, col_rgba, text, wrap_widthInOptional, cpu_fine_clip_rect_xInOptional, cpu_fine_clip_rect_yInOptional, cpu_fine_clip_rect_wInOptional, cpu_fine_clip_rect_hInOptional)</code></div>
	<p>The last pushed font is used if font is nil.<br>
The size of the last pushed font is used if font_size is 0.<br>
cpu_fine_clip_rect_* only takes effect if all four are non-nil.</p>
</div>

<div class="function_definition" id="ImGui_DrawList_AddTriangle">
	<div class="c_func"><code>void ImGui_DrawList_AddTriangle(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba, double* thicknessInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddTriangle(<em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, <em>int </em>col_rgba, <em>optional </em>thicknessIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddTriangle", <em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, <em>int </em>col_rgba, <em>optional </em>thicknessIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddTriangle(<em>ImGui_DrawList</em> draw_list, <em>number</em> p1_x, <em>number</em> p1_y, <em>number</em> p2_x, <em>number</em> p2_y, <em>number</em> p3_x, <em>number</em> p3_y, <em>integer</em> col_rgba, <em>optional number </em>thicknessIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> p1_x, <em>Float</em> p1_y, <em>Float</em> p2_x, <em>Float</em> p2_y, <em>Float</em> p3_x, <em>Float</em> p3_y, <em>Int</em> col_rgba, <em>Float</em> thicknessInOptional) = ImGui_DrawList_AddTriangle(draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, col_rgba, thicknessInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_AddTriangleFilled">
	<div class="c_func"><code>void ImGui_DrawList_AddTriangleFilled(ImGui_DrawList* draw_list, double p1_x, double p1_y, double p2_x, double p2_y, double p3_x, double p3_y, int col_rgba)</code></div>
	<div class="e_func"><code>ImGui_DrawList_AddTriangleFilled(<em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, <em>int </em>col_rgba) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_AddTriangleFilled", <em>ImGui_DrawList</em> draw_list, p1_x, p1_y, p2_x, p2_y, p3_x, p3_y, <em>int </em>col_rgba) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_AddTriangleFilled(<em>ImGui_DrawList</em> draw_list, <em>number</em> p1_x, <em>number</em> p1_y, <em>number</em> p2_x, <em>number</em> p2_y, <em>number</em> p3_x, <em>number</em> p3_y, <em>integer</em> col_rgba)</code></div>
	<div class="p_func"><code>ImGui_DrawList_AddTriangleFilled(<em>ImGui_DrawList</em> draw_list, <em>Float</em> p1_x, <em>Float</em> p1_y, <em>Float</em> p2_x, <em>Float</em> p2_y, <em>Float</em> p3_x, <em>Float</em> p3_y, <em>Int</em> col_rgba)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_PathArcTo">
	<div class="c_func"><code>void ImGui_DrawList_PathArcTo(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, double a_min, double a_max, int* num_segmentsInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_PathArcTo(<em>ImGui_DrawList</em> draw_list, center_x, center_y, radius, a_min, a_max, <em>optional int</em> num_segmentsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_PathArcTo", <em>ImGui_DrawList</em> draw_list, center_x, center_y, radius, a_min, a_max, <em>optional int</em> num_segmentsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_PathArcTo(<em>ImGui_DrawList</em> draw_list, <em>number</em> center_x, <em>number</em> center_y, <em>number</em> radius, <em>number</em> a_min, <em>number</em> a_max, <em>optional integer</em> num_segmentsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> center_x, <em>Float</em> center_y, <em>Float</em> radius, <em>Float</em> a_min, <em>Float</em> a_max, <em>Int</em> num_segmentsInOptional) = ImGui_DrawList_PathArcTo(draw_list, center_x, center_y, radius, a_min, a_max, num_segmentsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_PathArcToFast">
	<div class="c_func"><code>void ImGui_DrawList_PathArcToFast(ImGui_DrawList* draw_list, double center_x, double center_y, double radius, int a_min_of_12, int a_max_of_12)</code></div>
	<div class="e_func"><code>ImGui_DrawList_PathArcToFast(<em>ImGui_DrawList</em> draw_list, center_x, center_y, radius, <em>int </em>a_min_of_12, <em>int </em>a_max_of_12) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_PathArcToFast", <em>ImGui_DrawList</em> draw_list, center_x, center_y, radius, <em>int </em>a_min_of_12, <em>int </em>a_max_of_12) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_PathArcToFast(<em>ImGui_DrawList</em> draw_list, <em>number</em> center_x, <em>number</em> center_y, <em>number</em> radius, <em>integer</em> a_min_of_12, <em>integer</em> a_max_of_12)</code></div>
	<div class="p_func"><code>ImGui_DrawList_PathArcToFast(<em>ImGui_DrawList</em> draw_list, <em>Float</em> center_x, <em>Float</em> center_y, <em>Float</em> radius, <em>Int</em> a_min_of_12, <em>Int</em> a_max_of_12)</code></div>
	<p>Use precomputed angles for a 12 steps circle.</p>
</div>

<div class="function_definition" id="ImGui_DrawList_PathBezierCubicCurveTo">
	<div class="c_func"><code>void ImGui_DrawList_PathBezierCubicCurveTo(ImGui_DrawList* draw_list, double p2_x, double p2_y, double p3_x, double p3_y, double p4_x, double p4_y, int* num_segmentsInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_PathBezierCubicCurveTo(<em>ImGui_DrawList</em> draw_list, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, <em>optional int</em> num_segmentsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_PathBezierCubicCurveTo", <em>ImGui_DrawList</em> draw_list, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, <em>optional int</em> num_segmentsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_PathBezierCubicCurveTo(<em>ImGui_DrawList</em> draw_list, <em>number</em> p2_x, <em>number</em> p2_y, <em>number</em> p3_x, <em>number</em> p3_y, <em>number</em> p4_x, <em>number</em> p4_y, <em>optional integer</em> num_segmentsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> p2_x, <em>Float</em> p2_y, <em>Float</em> p3_x, <em>Float</em> p3_y, <em>Float</em> p4_x, <em>Float</em> p4_y, <em>Int</em> num_segmentsInOptional) = ImGui_DrawList_PathBezierCubicCurveTo(draw_list, p2_x, p2_y, p3_x, p3_y, p4_x, p4_y, num_segmentsInOptional)</code></div>
	<p>Cubic Bezier (4 control points)</p>
</div>

<div class="function_definition" id="ImGui_DrawList_PathBezierQuadraticCurveTo">
	<div class="c_func"><code>void ImGui_DrawList_PathBezierQuadraticCurveTo(ImGui_DrawList* draw_list, double p2_x, double p2_y, double p3_x, double p3_y, int* num_segmentsInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_PathBezierQuadraticCurveTo(<em>ImGui_DrawList</em> draw_list, p2_x, p2_y, p3_x, p3_y, <em>optional int</em> num_segmentsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_PathBezierQuadraticCurveTo", <em>ImGui_DrawList</em> draw_list, p2_x, p2_y, p3_x, p3_y, <em>optional int</em> num_segmentsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_PathBezierQuadraticCurveTo(<em>ImGui_DrawList</em> draw_list, <em>number</em> p2_x, <em>number</em> p2_y, <em>number</em> p3_x, <em>number</em> p3_y, <em>optional integer</em> num_segmentsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> p2_x, <em>Float</em> p2_y, <em>Float</em> p3_x, <em>Float</em> p3_y, <em>Int</em> num_segmentsInOptional) = ImGui_DrawList_PathBezierQuadraticCurveTo(draw_list, p2_x, p2_y, p3_x, p3_y, num_segmentsInOptional)</code></div>
	<p>Quadratic Bezier (3 control points)</p>
</div>

<div class="function_definition" id="ImGui_DrawList_PathClear">
	<div class="c_func"><code>void ImGui_DrawList_PathClear(ImGui_DrawList* draw_list)</code></div>
	<div class="e_func"><code>ImGui_DrawList_PathClear(<em>ImGui_DrawList</em> draw_list) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_PathClear", <em>ImGui_DrawList</em> draw_list) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_PathClear(<em>ImGui_DrawList</em> draw_list)</code></div>
	<div class="p_func"><code>ImGui_DrawList_PathClear(<em>ImGui_DrawList</em> draw_list)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_PathFillConvex">
	<div class="c_func"><code>void ImGui_DrawList_PathFillConvex(ImGui_DrawList* draw_list, int col_rgba)</code></div>
	<div class="e_func"><code>ImGui_DrawList_PathFillConvex(<em>ImGui_DrawList</em> draw_list, <em>int </em>col_rgba) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_PathFillConvex", <em>ImGui_DrawList</em> draw_list, <em>int </em>col_rgba) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_PathFillConvex(<em>ImGui_DrawList</em> draw_list, <em>integer</em> col_rgba)</code></div>
	<div class="p_func"><code>ImGui_DrawList_PathFillConvex(<em>ImGui_DrawList</em> draw_list, <em>Int</em> col_rgba)</code></div>
	<p>Note: Anti-aliased filling requires points to be in clockwise order.</p>
</div>

<div class="function_definition" id="ImGui_DrawList_PathLineTo">
	<div class="c_func"><code>void ImGui_DrawList_PathLineTo(ImGui_DrawList* draw_list, double pos_x, double pos_y)</code></div>
	<div class="e_func"><code>ImGui_DrawList_PathLineTo(<em>ImGui_DrawList</em> draw_list, pos_x, pos_y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_PathLineTo", <em>ImGui_DrawList</em> draw_list, pos_x, pos_y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_PathLineTo(<em>ImGui_DrawList</em> draw_list, <em>number</em> pos_x, <em>number</em> pos_y)</code></div>
	<div class="p_func"><code>ImGui_DrawList_PathLineTo(<em>ImGui_DrawList</em> draw_list, <em>Float</em> pos_x, <em>Float</em> pos_y)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_PathRect">
	<div class="c_func"><code>void ImGui_DrawList_PathRect(ImGui_DrawList* draw_list, double rect_min_x, double rect_min_y, double rect_max_x, double rect_max_y, double* roundingInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_PathRect(<em>ImGui_DrawList</em> draw_list, rect_min_x, rect_min_y, rect_max_x, rect_max_y, <em>optional </em>roundingIn, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_PathRect", <em>ImGui_DrawList</em> draw_list, rect_min_x, rect_min_y, rect_max_x, rect_max_y, <em>optional </em>roundingIn, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_PathRect(<em>ImGui_DrawList</em> draw_list, <em>number</em> rect_min_x, <em>number</em> rect_min_y, <em>number</em> rect_max_x, <em>number</em> rect_max_y, <em>optional number </em>roundingIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> rect_min_x, <em>Float</em> rect_min_y, <em>Float</em> rect_max_x, <em>Float</em> rect_max_y, <em>Float</em> roundingInOptional, <em>Int</em> flagsInOptional) = ImGui_DrawList_PathRect(draw_list, rect_min_x, rect_min_y, rect_max_x, rect_max_y, roundingInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_PathStroke">
	<div class="c_func"><code>void ImGui_DrawList_PathStroke(ImGui_DrawList* draw_list, int col_rgba, int* flagsInOptional, double* thicknessInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_PathStroke(<em>ImGui_DrawList</em> draw_list, <em>int </em>col_rgba, <em>optional int</em> flagsIn, <em>optional </em>thicknessIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_PathStroke", <em>ImGui_DrawList</em> draw_list, <em>int </em>col_rgba, <em>optional int</em> flagsIn, <em>optional </em>thicknessIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_PathStroke(<em>ImGui_DrawList</em> draw_list, <em>integer</em> col_rgba, <em>optional integer</em> flagsIn, <em>optional number </em>thicknessIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Int</em> col_rgba, <em>Int</em> flagsInOptional, <em>Float</em> thicknessInOptional) = ImGui_DrawList_PathStroke(draw_list, col_rgba, flagsInOptional, thicknessInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_DrawList_PopClipRect">
	<div class="c_func"><code>void ImGui_DrawList_PopClipRect(ImGui_DrawList* draw_list)</code></div>
	<div class="e_func"><code>ImGui_DrawList_PopClipRect(<em>ImGui_DrawList</em> draw_list) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_PopClipRect", <em>ImGui_DrawList</em> draw_list) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_PopClipRect(<em>ImGui_DrawList</em> draw_list)</code></div>
	<div class="p_func"><code>ImGui_DrawList_PopClipRect(<em>ImGui_DrawList</em> draw_list)</code></div>
	<p>See DrawList_PushClipRect</p>
</div>

<div class="function_definition" id="ImGui_DrawList_PushClipRect">
	<div class="c_func"><code>void ImGui_DrawList_PushClipRect(ImGui_DrawList* draw_list, double clip_rect_min_x, double clip_rect_min_y, double clip_rect_max_x, double clip_rect_max_y, bool* intersect_with_current_clip_rectInOptional)</code></div>
	<div class="e_func"><code>ImGui_DrawList_PushClipRect(<em>ImGui_DrawList</em> draw_list, clip_rect_min_x, clip_rect_min_y, clip_rect_max_x, clip_rect_max_y, <em>optional bool</em> intersect_with_current_clip_rectIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_PushClipRect", <em>ImGui_DrawList</em> draw_list, clip_rect_min_x, clip_rect_min_y, clip_rect_max_x, clip_rect_max_y, <em>optional bool</em> intersect_with_current_clip_rectIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_PushClipRect(<em>ImGui_DrawList</em> draw_list, <em>number</em> clip_rect_min_x, <em>number</em> clip_rect_min_y, <em>number</em> clip_rect_max_x, <em>number</em> clip_rect_max_y, <em>optional boolean</em> intersect_with_current_clip_rectIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_DrawList</em> draw_list, <em>Float</em> clip_rect_min_x, <em>Float</em> clip_rect_min_y, <em>Float</em> clip_rect_max_x, <em>Float</em> clip_rect_max_y, <em>Boolean</em> intersect_with_current_clip_rectInOptional) = ImGui_DrawList_PushClipRect(draw_list, clip_rect_min_x, clip_rect_min_y, clip_rect_max_x, clip_rect_max_y, intersect_with_current_clip_rectInOptional)</code></div>
	<p>Render-level scissoring. Prefer using higher-level PushClipRect to affect<br>
logic (hit-testing and widget culling).</p>
</div>

<div class="function_definition" id="ImGui_DrawList_PushClipRectFullScreen">
	<div class="c_func"><code>void ImGui_DrawList_PushClipRectFullScreen(ImGui_DrawList* draw_list)</code></div>
	<div class="e_func"><code>ImGui_DrawList_PushClipRectFullScreen(<em>ImGui_DrawList</em> draw_list) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_DrawList_PushClipRectFullScreen", <em>ImGui_DrawList</em> draw_list) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_DrawList_PushClipRectFullScreen(<em>ImGui_DrawList</em> draw_list)</code></div>
	<div class="p_func"><code>ImGui_DrawList_PushClipRectFullScreen(<em>ImGui_DrawList</em> draw_list)</code></div>
</div>

<div class="function_definition" id="ImGui_Dummy">
	<div class="c_func"><code>void ImGui_Dummy(ImGui_Context* ctx, double size_w, double size_h)</code></div>
	<div class="e_func"><code>ImGui_Dummy(<em>ImGui_Context</em> ctx, size_w, size_h) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Dummy", <em>ImGui_Context</em> ctx, size_w, size_h) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Dummy(<em>ImGui_Context</em> ctx, <em>number</em> size_w, <em>number</em> size_h)</code></div>
	<div class="p_func"><code>ImGui_Dummy(<em>ImGui_Context</em> ctx, <em>Float</em> size_w, <em>Float</em> size_h)</code></div>
	<p>Add a dummy item of given size. unlike InvisibleButton, Dummy() won't take the<br>
mouse click or be navigable into.</p>
</div>

<div class="function_definition" id="ImGui_End">
	<div class="c_func"><code>void ImGui_End(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_End(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_End", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_End(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_End(<em>ImGui_Context</em> ctx)</code></div>
	<p>Pop window from the stack. See Begin.</p>
</div>

<div class="function_definition" id="ImGui_EndChild">
	<div class="c_func"><code>void ImGui_EndChild(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndChild(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndChild", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndChild(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndChild(<em>ImGui_Context</em> ctx)</code></div>
	<p>See BeginChild.</p>
</div>

<div class="function_definition" id="ImGui_EndChildFrame">
	<div class="c_func"><code>void ImGui_EndChildFrame(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndChildFrame(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndChildFrame", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndChildFrame(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndChildFrame(<em>ImGui_Context</em> ctx)</code></div>
	<p>See BeginChildFrame.</p>
</div>

<div class="function_definition" id="ImGui_EndCombo">
	<div class="c_func"><code>void ImGui_EndCombo(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndCombo(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndCombo", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndCombo(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndCombo(<em>ImGui_Context</em> ctx)</code></div>
	<p>Only call EndCombo() if BeginCombo returns true!</p>
</div>

<div class="function_definition" id="ImGui_EndDisabled">
	<div class="c_func"><code>void ImGui_EndDisabled(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndDisabled(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndDisabled", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndDisabled(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndDisabled(<em>ImGui_Context</em> ctx)</code></div>
	<p>See BeginDisabled.</p>
</div>

<div class="function_definition" id="ImGui_EndDragDropSource">
	<div class="c_func"><code>void ImGui_EndDragDropSource(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndDragDropSource(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndDragDropSource", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndDragDropSource(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndDragDropSource(<em>ImGui_Context</em> ctx)</code></div>
	<p>Only call EndDragDropSource() if BeginDragDropSource returns true!</p>
</div>

<div class="function_definition" id="ImGui_EndDragDropTarget">
	<div class="c_func"><code>void ImGui_EndDragDropTarget(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndDragDropTarget(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndDragDropTarget", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndDragDropTarget(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndDragDropTarget(<em>ImGui_Context</em> ctx)</code></div>
	<p>Only call EndDragDropTarget() if BeginDragDropTarget returns true!</p>
</div>

<div class="function_definition" id="ImGui_EndGroup">
	<div class="c_func"><code>void ImGui_EndGroup(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndGroup(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndGroup", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndGroup(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndGroup(<em>ImGui_Context</em> ctx)</code></div>
	<p>Unlock horizontal starting position + capture the whole group bounding box<br>
into one "item" (so you can use IsItemHovered or layout primitives such as<br>
SameLine on whole group, etc.).<br>
</p><p>
See BeginGroup.</p>
</div>

<div class="function_definition" id="ImGui_EndListBox">
	<div class="c_func"><code>void ImGui_EndListBox(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndListBox(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndListBox", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndListBox(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndListBox(<em>ImGui_Context</em> ctx)</code></div>
	<p>Only call EndListBox() if BeginListBox returned true!</p>
</div>

<div class="function_definition" id="ImGui_EndMenu">
	<div class="c_func"><code>void ImGui_EndMenu(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndMenu(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndMenu", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndMenu(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndMenu(<em>ImGui_Context</em> ctx)</code></div>
	<p>Only call EndMenu() if BeginMenu returns true!</p>
</div>

<div class="function_definition" id="ImGui_EndMenuBar">
	<div class="c_func"><code>void ImGui_EndMenuBar(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndMenuBar(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndMenuBar", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndMenuBar(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndMenuBar(<em>ImGui_Context</em> ctx)</code></div>
	<p>Only call EndMenuBar if BeginMenuBar returns true!</p>
</div>

<div class="function_definition" id="ImGui_EndPopup">
	<div class="c_func"><code>void ImGui_EndPopup(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndPopup(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndPopup", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndPopup(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndPopup(<em>ImGui_Context</em> ctx)</code></div>
	<p>Only call EndPopup() if BeginPopup*() returns true!</p>
</div>

<div class="function_definition" id="ImGui_EndTabBar">
	<div class="c_func"><code>void ImGui_EndTabBar(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndTabBar(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndTabBar", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndTabBar(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndTabBar(<em>ImGui_Context</em> ctx)</code></div>
	<p>Only call EndTabBar() if BeginTabBar() returns true!</p>
</div>

<div class="function_definition" id="ImGui_EndTabItem">
	<div class="c_func"><code>void ImGui_EndTabItem(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndTabItem(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndTabItem", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndTabItem(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndTabItem(<em>ImGui_Context</em> ctx)</code></div>
	<p>Only call EndTabItem() if BeginTabItem() returns true!</p>
</div>

<div class="function_definition" id="ImGui_EndTable">
	<div class="c_func"><code>void ImGui_EndTable(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndTable(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndTable", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndTable(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndTable(<em>ImGui_Context</em> ctx)</code></div>
	<p>Only call EndTable() if BeginTable() returns true!</p>
</div>

<div class="function_definition" id="ImGui_EndTooltip">
	<div class="c_func"><code>void ImGui_EndTooltip(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_EndTooltip(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_EndTooltip", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_EndTooltip(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_EndTooltip(<em>ImGui_Context</em> ctx)</code></div>
	<p>Only call EndTooltip() if BeginTooltip() returns true.</p>
</div>

<div class="function_definition" id="ImGui_FocusedFlags_AnyWindow">
	<div class="c_func"><code>int ImGui_FocusedFlags_AnyWindow()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_FocusedFlags_AnyWindow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_FocusedFlags_AnyWindow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_FocusedFlags_AnyWindow()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_FocusedFlags_AnyWindow()</code></div>
	<p>Return true if any window is focused.</p>
</div>

<div class="function_definition" id="ImGui_FocusedFlags_ChildWindows">
	<div class="c_func"><code>int ImGui_FocusedFlags_ChildWindows()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_FocusedFlags_ChildWindows() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_FocusedFlags_ChildWindows") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_FocusedFlags_ChildWindows()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_FocusedFlags_ChildWindows()</code></div>
	<p>Return true if any children of the window is focused.</p>
</div>

<div class="function_definition" id="ImGui_FocusedFlags_DockHierarchy">
	<div class="c_func"><code>int ImGui_FocusedFlags_DockHierarchy()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_FocusedFlags_DockHierarchy() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_FocusedFlags_DockHierarchy") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_FocusedFlags_DockHierarchy()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_FocusedFlags_DockHierarchy()</code></div>
	<p>Consider docking hierarchy (treat dockspace host as parent of docked window)<br>
   (when used with _ChildWindows or _RootWindow).</p>
</div>

<div class="function_definition" id="ImGui_FocusedFlags_NoPopupHierarchy">
	<div class="c_func"><code>int ImGui_FocusedFlags_NoPopupHierarchy()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_FocusedFlags_NoPopupHierarchy() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_FocusedFlags_NoPopupHierarchy") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_FocusedFlags_NoPopupHierarchy()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_FocusedFlags_NoPopupHierarchy()</code></div>
	<p>Do not consider popup hierarchy (do not treat popup emitter as parent of<br>
   popup) (when used with _ChildWindows or _RootWindow).</p>
</div>

<div class="function_definition" id="ImGui_FocusedFlags_None">
	<div class="c_func"><code>int ImGui_FocusedFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_FocusedFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_FocusedFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_FocusedFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_FocusedFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_FocusedFlags_RootAndChildWindows">
	<div class="c_func"><code>int ImGui_FocusedFlags_RootAndChildWindows()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_FocusedFlags_RootAndChildWindows() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_FocusedFlags_RootAndChildWindows") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_FocusedFlags_RootAndChildWindows()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_FocusedFlags_RootAndChildWindows()</code></div>
	<p>FocusedFlags_RootWindow | FocusedFlags_ChildWindows</p>
</div>

<div class="function_definition" id="ImGui_FocusedFlags_RootWindow">
	<div class="c_func"><code>int ImGui_FocusedFlags_RootWindow()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_FocusedFlags_RootWindow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_FocusedFlags_RootWindow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_FocusedFlags_RootWindow()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_FocusedFlags_RootWindow()</code></div>
	<p>Test from root window (top most parent of the current hierarchy).</p>
</div>

<div class="function_definition" id="ImGui_FontFlags_Bold">
	<div class="c_func"><code>int ImGui_FontFlags_Bold()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_FontFlags_Bold() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_FontFlags_Bold") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_FontFlags_Bold()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_FontFlags_Bold()</code></div>
</div>

<div class="function_definition" id="ImGui_FontFlags_Italic">
	<div class="c_func"><code>int ImGui_FontFlags_Italic()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_FontFlags_Italic() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_FontFlags_Italic") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_FontFlags_Italic()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_FontFlags_Italic()</code></div>
</div>

<div class="function_definition" id="ImGui_FontFlags_None">
	<div class="c_func"><code>int ImGui_FontFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_FontFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_FontFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_FontFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_FontFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_Function_Execute">
	<div class="c_func"><code>void ImGui_Function_Execute(ImGui_Function* func)</code></div>
	<div class="e_func"><code>ImGui_Function_Execute(<em>ImGui_Function</em> func) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Function_Execute", <em>ImGui_Function</em> func) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Function_Execute(<em>ImGui_Function</em> func)</code></div>
	<div class="p_func"><code>ImGui_Function_Execute(<em>ImGui_Function</em> func)</code></div>
</div>

<div class="function_definition" id="ImGui_Function_GetValue">
	<div class="c_func"><code>double ImGui_Function_GetValue(ImGui_Function* func, const char* name)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_Function_GetValue(<em>ImGui_Function</em> func, "name") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_Function_GetValue", <em>ImGui_Function</em> func, "name") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_Function_GetValue(<em>ImGui_Function</em> func, <em>string</em> name)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_Function_GetValue(<em>ImGui_Function</em> func, <em>String</em> name)</code></div>
</div>

<div class="function_definition" id="ImGui_Function_GetValue_Array">
	<div class="c_func"><code>void ImGui_Function_GetValue_Array(ImGui_Function* func, const char* name, reaper_array* values)</code></div>
	<div class="e_func"><code>ImGui_Function_GetValue_Array(<em>ImGui_Function</em> func, "name", <em>reaper_array</em> values) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Function_GetValue_Array", <em>ImGui_Function</em> func, "name", <em>reaper_array</em> values) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Function_GetValue_Array(<em>ImGui_Function</em> func, <em>string</em> name, <em>reaper_array</em> values)</code></div>
	<div class="p_func"><code>ImGui_Function_GetValue_Array(<em>ImGui_Function</em> func, <em>String</em> name, <em>reaper_array</em> values)</code></div>
	<p>Copy the values in the function's memory starting at the address stored<br>
in the given variable into the array.</p>
</div>

<div class="function_definition" id="ImGui_Function_GetValue_String">
	<div class="c_func"><code>void ImGui_Function_GetValue_String(ImGui_Function* func, const char* name, char* valueOutNeedBig, int valueOutNeedBig_sz)</code></div>
	<div class="e_func"><code>ImGui_Function_GetValue_String(<em>ImGui_Function</em> func, "name", #value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Function_GetValue_String", <em>ImGui_Function</em> func, "name", #value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>value = reaper.ImGui_Function_GetValue_String(<em>ImGui_Function</em> func, <em>string</em> name)</code></div>
	<div class="p_func"><code>(<em>ImGui_Function</em> func, <em>String</em> name, <em>String</em> valueOutNeedBig, <em>Int</em> valueOutNeedBig_sz) = ImGui_Function_GetValue_String(func, name, valueOutNeedBig, valueOutNeedBig_sz)</code></div>
	<p>Read from a string slot or a named string (when name starts with a `#`).</p>
</div>

<div class="function_definition" id="ImGui_Function_SetValue">
	<div class="c_func"><code>void ImGui_Function_SetValue(ImGui_Function* func, const char* name, double value)</code></div>
	<div class="e_func"><code>ImGui_Function_SetValue(<em>ImGui_Function</em> func, "name", value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Function_SetValue", <em>ImGui_Function</em> func, "name", value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Function_SetValue(<em>ImGui_Function</em> func, <em>string</em> name, <em>number</em> value)</code></div>
	<div class="p_func"><code>ImGui_Function_SetValue(<em>ImGui_Function</em> func, <em>String</em> name, <em>Float</em> value)</code></div>
</div>

<div class="function_definition" id="ImGui_Function_SetValue_Array">
	<div class="c_func"><code>void ImGui_Function_SetValue_Array(ImGui_Function* func, const char* name, reaper_array* values)</code></div>
	<div class="e_func"><code>ImGui_Function_SetValue_Array(<em>ImGui_Function</em> func, "name", <em>reaper_array</em> values) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Function_SetValue_Array", <em>ImGui_Function</em> func, "name", <em>reaper_array</em> values) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Function_SetValue_Array(<em>ImGui_Function</em> func, <em>string</em> name, <em>reaper_array</em> values)</code></div>
	<div class="p_func"><code>ImGui_Function_SetValue_Array(<em>ImGui_Function</em> func, <em>String</em> name, <em>reaper_array</em> values)</code></div>
	<p>Copy the values in the array to the function's memory at the address stored<br>
in the given variable.</p>
</div>

<div class="function_definition" id="ImGui_Function_SetValue_String">
	<div class="c_func"><code>void ImGui_Function_SetValue_String(ImGui_Function* func, const char* name, const char* value, int value_sz)</code></div>
	<div class="e_func"><code>ImGui_Function_SetValue_String(<em>ImGui_Function</em> func, "name", "value") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Function_SetValue_String", <em>ImGui_Function</em> func, "name", "value") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Function_SetValue_String(<em>ImGui_Function</em> func, <em>string</em> name, <em>string</em> value)</code></div>
	<div class="p_func"><code>ImGui_Function_SetValue_String(<em>ImGui_Function</em> func, <em>String</em> name, <em>String</em> value, <em>Int</em> value_sz)</code></div>
	<p>Write to a string slot or a named string (when name starts with a `#`).</p>
</div>

<div class="function_definition" id="ImGui_GetBackgroundDrawList">
	<div class="c_func"><code>ImGui_DrawList* ImGui_GetBackgroundDrawList(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>ImGui_DrawList</em>  ImGui_GetBackgroundDrawList(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_DrawList</em>  extension_api("ImGui_GetBackgroundDrawList", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_DrawList</em> reaper.ImGui_GetBackgroundDrawList(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>ImGui_DrawList</em>  ImGui_GetBackgroundDrawList(<em>ImGui_Context</em> ctx)</code></div>
	<p>This draw list will be the first rendering one. Useful to quickly draw<br>
shapes/text behind dear imgui contents.</p>
</div>

<div class="function_definition" id="ImGui_GetClipboardText">
	<div class="c_func"><code>const char* ImGui_GetClipboardText(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>bool  ImGui_GetClipboardText(#retval, <em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>bool  extension_api("ImGui_GetClipboardText", #retval, <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string</em> reaper.ImGui_GetClipboardText(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>String</em>  ImGui_GetClipboardText(<em>ImGui_Context</em> ctx)</code></div>
</div>

<div class="function_definition" id="ImGui_GetColor">
	<div class="c_func"><code>int ImGui_GetColor(ImGui_Context* ctx, int idx, double* alpha_mulInOptional)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_GetColor(<em>ImGui_Context</em> ctx, <em>int </em>idx, <em>optional </em>alpha_mulIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_GetColor", <em>ImGui_Context</em> ctx, <em>int </em>idx, <em>optional </em>alpha_mulIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_GetColor(<em>ImGui_Context</em> ctx, <em>integer</em> idx, <em>optional number </em>alpha_mulIn)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> idx, <em>Float</em> alpha_mulInOptional) = ImGui_GetColor(ctx, idx, alpha_mulInOptional)</code></div>
	<p>Retrieve given style color with style alpha applied and optional extra alpha<br>
multiplier, packed as a 32-bit value (RGBA). See Col_* for available style colors.</p>
</div>

<div class="function_definition" id="ImGui_GetColorEx">
	<div class="c_func"><code>int ImGui_GetColorEx(ImGui_Context* ctx, int col_rgba)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_GetColorEx(<em>ImGui_Context</em> ctx, <em>int </em>col_rgba) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_GetColorEx", <em>ImGui_Context</em> ctx, <em>int </em>col_rgba) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_GetColorEx(<em>ImGui_Context</em> ctx, <em>integer</em> col_rgba)</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_GetColorEx(<em>ImGui_Context</em> ctx, <em>Int</em> col_rgba)</code></div>
	<p>Retrieve given color with style alpha applied, packed as a 32-bit value (RGBA).</p>
</div>

<div class="function_definition" id="ImGui_GetConfigVar">
	<div class="c_func"><code>double ImGui_GetConfigVar(ImGui_Context* ctx, int var_idx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetConfigVar(<em>ImGui_Context</em> ctx, <em>int </em>var_idx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetConfigVar", <em>ImGui_Context</em> ctx, <em>int </em>var_idx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetConfigVar(<em>ImGui_Context</em> ctx, <em>integer</em> var_idx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetConfigVar(<em>ImGui_Context</em> ctx, <em>Int</em> var_idx)</code></div>
</div>

<div class="function_definition" id="ImGui_GetContentRegionAvail">
	<div class="c_func"><code>void ImGui_GetContentRegionAvail(ImGui_Context* ctx, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetContentRegionAvail(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetContentRegionAvail", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetContentRegionAvail(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetContentRegionAvail(ctx, xOut, yOut)</code></div>
	<p>== GetContentRegionMax() - GetCursorPos()</p>
</div>

<div class="function_definition" id="ImGui_GetContentRegionMax">
	<div class="c_func"><code>void ImGui_GetContentRegionMax(ImGui_Context* ctx, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetContentRegionMax(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetContentRegionMax", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetContentRegionMax(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetContentRegionMax(ctx, xOut, yOut)</code></div>
	<p>Current content boundaries (typically window boundaries including scrolling,<br>
or current column boundaries), in windows coordinates.</p>
</div>

<div class="function_definition" id="ImGui_GetCursorPos">
	<div class="c_func"><code>void ImGui_GetCursorPos(ImGui_Context* ctx, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetCursorPos(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetCursorPos", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetCursorPos(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetCursorPos(ctx, xOut, yOut)</code></div>
	<p>Cursor position in window</p>
</div>

<div class="function_definition" id="ImGui_GetCursorPosX">
	<div class="c_func"><code>double ImGui_GetCursorPosX(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetCursorPosX(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetCursorPosX", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetCursorPosX(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetCursorPosX(<em>ImGui_Context</em> ctx)</code></div>
	<p>Cursor X position in window</p>
</div>

<div class="function_definition" id="ImGui_GetCursorPosY">
	<div class="c_func"><code>double ImGui_GetCursorPosY(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetCursorPosY(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetCursorPosY", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetCursorPosY(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetCursorPosY(<em>ImGui_Context</em> ctx)</code></div>
	<p>Cursor Y position in window</p>
</div>

<div class="function_definition" id="ImGui_GetCursorScreenPos">
	<div class="c_func"><code>void ImGui_GetCursorScreenPos(ImGui_Context* ctx, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetCursorScreenPos(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetCursorScreenPos", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetCursorScreenPos(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetCursorScreenPos(ctx, xOut, yOut)</code></div>
	<p>Cursor position in absolute screen coordinates (useful to work with the DrawList API).</p>
</div>

<div class="function_definition" id="ImGui_GetCursorStartPos">
	<div class="c_func"><code>void ImGui_GetCursorStartPos(ImGui_Context* ctx, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetCursorStartPos(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetCursorStartPos", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetCursorStartPos(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetCursorStartPos(ctx, xOut, yOut)</code></div>
	<p>Initial cursor position in window coordinates.</p>
</div>

<div class="function_definition" id="ImGui_GetDeltaTime">
	<div class="c_func"><code>double ImGui_GetDeltaTime(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetDeltaTime(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetDeltaTime", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetDeltaTime(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetDeltaTime(<em>ImGui_Context</em> ctx)</code></div>
	<p>Time elapsed since last frame, in seconds.</p>
</div>

<div class="function_definition" id="ImGui_GetDragDropPayload">
	<div class="c_func"><code>bool ImGui_GetDragDropPayload(ImGui_Context* ctx, char* typeOut, int typeOut_sz, char* payloadOutNeedBig, int payloadOutNeedBig_sz, bool* is_previewOut, bool* is_deliveryOut)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_GetDragDropPayload(<em>ImGui_Context</em> ctx, #type, #payload, <em>bool &amp;</em>is_preview, <em>bool &amp;</em>is_delivery) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_GetDragDropPayload", <em>ImGui_Context</em> ctx, #type, #payload, <em>bool &amp;</em>is_preview, <em>bool &amp;</em>is_delivery) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>type, <em>string </em>payload, <em>boolean </em>is_preview, <em>boolean </em>is_delivery = reaper.ImGui_GetDragDropPayload(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> typeOut, <em>Int</em> typeOut_sz, <em>String</em> payloadOutNeedBig, <em>Int</em> payloadOutNeedBig_sz, <em>Boolean</em> is_previewOut, <em>Boolean</em> is_deliveryOut) = ImGui_GetDragDropPayload(ctx, typeOut, typeOut_sz, payloadOutNeedBig, payloadOutNeedBig_sz, is_previewOut, is_deliveryOut)</code></div>
	<p>Peek directly into the current payload from anywhere.</p>
</div>

<div class="function_definition" id="ImGui_GetDragDropPayloadFile">
	<div class="c_func"><code>bool ImGui_GetDragDropPayloadFile(ImGui_Context* ctx, int index, char* filenameOut, int filenameOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_GetDragDropPayloadFile(<em>ImGui_Context</em> ctx, <em>int </em>index, #filename) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_GetDragDropPayloadFile", <em>ImGui_Context</em> ctx, <em>int </em>index, #filename) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>filename = reaper.ImGui_GetDragDropPayloadFile(<em>ImGui_Context</em> ctx, <em>integer</em> index)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> index, <em>String</em> filenameOut, <em>Int</em> filenameOut_sz) = ImGui_GetDragDropPayloadFile(ctx, index, filenameOut, filenameOut_sz)</code></div>
	<p>Get a filename from the list of dropped files.<br>
Returns false if index is out of bounds.</p>
</div>

<div class="function_definition" id="ImGui_GetFont">
	<div class="c_func"><code>ImGui_Font* ImGui_GetFont(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>ImGui_Font</em>  ImGui_GetFont(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_Font</em>  extension_api("ImGui_GetFont", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_Font</em> reaper.ImGui_GetFont(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>ImGui_Font</em>  ImGui_GetFont(<em>ImGui_Context</em> ctx)</code></div>
	<p>Get the current font</p>
</div>

<div class="function_definition" id="ImGui_GetFontSize">
	<div class="c_func"><code>double ImGui_GetFontSize(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetFontSize(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetFontSize", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetFontSize(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetFontSize(<em>ImGui_Context</em> ctx)</code></div>
	<p>Get current font size (= height in pixels) of current font with current scale<br>
applied.</p>
</div>

<div class="function_definition" id="ImGui_GetForegroundDrawList">
	<div class="c_func"><code>ImGui_DrawList* ImGui_GetForegroundDrawList(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>ImGui_DrawList</em>  ImGui_GetForegroundDrawList(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_DrawList</em>  extension_api("ImGui_GetForegroundDrawList", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_DrawList</em> reaper.ImGui_GetForegroundDrawList(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>ImGui_DrawList</em>  ImGui_GetForegroundDrawList(<em>ImGui_Context</em> ctx)</code></div>
	<p>This draw list will be the last rendered one. Useful to quickly draw<br>
shapes/text over dear imgui contents.</p>
</div>

<div class="function_definition" id="ImGui_GetFrameCount">
	<div class="c_func"><code>int ImGui_GetFrameCount(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_GetFrameCount(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_GetFrameCount", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_GetFrameCount(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_GetFrameCount(<em>ImGui_Context</em> ctx)</code></div>
	<p>Get global imgui frame count. incremented by 1 every frame.</p>
</div>

<div class="function_definition" id="ImGui_GetFrameHeight">
	<div class="c_func"><code>double ImGui_GetFrameHeight(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetFrameHeight(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetFrameHeight", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetFrameHeight(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetFrameHeight(<em>ImGui_Context</em> ctx)</code></div>
	<p>GetFontSize + StyleVar_FramePadding.y * 2</p>
</div>

<div class="function_definition" id="ImGui_GetFrameHeightWithSpacing">
	<div class="c_func"><code>double ImGui_GetFrameHeightWithSpacing(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetFrameHeightWithSpacing(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetFrameHeightWithSpacing", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetFrameHeightWithSpacing(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetFrameHeightWithSpacing(<em>ImGui_Context</em> ctx)</code></div>
	<p>GetFontSize + StyleVar_FramePadding.y * 2 + StyleVar_ItemSpacing.y<br>
(distance in pixels between 2 consecutive lines of framed widgets).</p>
</div>

<div class="function_definition" id="ImGui_GetFramerate">
	<div class="c_func"><code>double ImGui_GetFramerate(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetFramerate(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetFramerate", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetFramerate(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetFramerate(<em>ImGui_Context</em> ctx)</code></div>
	<p>Estimate of application framerate (rolling average over 60 frames, based on<br>
GetDeltaTime), in frame per second. Solely for convenience.</p>
</div>

<div class="function_definition" id="ImGui_GetInputQueueCharacter">
	<div class="c_func"><code>bool ImGui_GetInputQueueCharacter(ImGui_Context* ctx, int idx, int* unicode_charOut)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_GetInputQueueCharacter(<em>ImGui_Context</em> ctx, <em>int </em>idx, <em>int &amp;</em>unicode_char) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_GetInputQueueCharacter", <em>ImGui_Context</em> ctx, <em>int </em>idx, <em>int &amp;</em>unicode_char) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>unicode_char = reaper.ImGui_GetInputQueueCharacter(<em>ImGui_Context</em> ctx, <em>integer</em> idx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> idx, <em>Int</em> unicode_charOut) = ImGui_GetInputQueueCharacter(ctx, idx, unicode_charOut)</code></div>
	<p>Read from ImGui's character input queue.<br>
Call with increasing idx until false is returned.</p>
</div>

<div class="function_definition" id="ImGui_GetItemRectMax">
	<div class="c_func"><code>void ImGui_GetItemRectMax(ImGui_Context* ctx, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetItemRectMax(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetItemRectMax", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetItemRectMax(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetItemRectMax(ctx, xOut, yOut)</code></div>
	<p>Get lower-right bounding rectangle of the last item (screen space)</p>
</div>

<div class="function_definition" id="ImGui_GetItemRectMin">
	<div class="c_func"><code>void ImGui_GetItemRectMin(ImGui_Context* ctx, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetItemRectMin(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetItemRectMin", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetItemRectMin(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetItemRectMin(ctx, xOut, yOut)</code></div>
	<p>Get upper-left bounding rectangle of the last item (screen space)</p>
</div>

<div class="function_definition" id="ImGui_GetItemRectSize">
	<div class="c_func"><code>void ImGui_GetItemRectSize(ImGui_Context* ctx, double* wOut, double* hOut)</code></div>
	<div class="e_func"><code>ImGui_GetItemRectSize(<em>ImGui_Context</em> ctx, <em>&amp;</em>w, <em>&amp;</em>h) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetItemRectSize", <em>ImGui_Context</em> ctx, <em>&amp;</em>w, <em>&amp;</em>h) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>w, <em>number </em>h = reaper.ImGui_GetItemRectSize(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> wOut, <em>Float</em> hOut) = ImGui_GetItemRectSize(ctx, wOut, hOut)</code></div>
	<p>Get size of last item</p>
</div>

<div class="function_definition" id="ImGui_GetKeyDownDuration">
	<div class="c_func"><code>double ImGui_GetKeyDownDuration(ImGui_Context* ctx, int key)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetKeyDownDuration(<em>ImGui_Context</em> ctx, <em>int </em>key) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetKeyDownDuration", <em>ImGui_Context</em> ctx, <em>int </em>key) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetKeyDownDuration(<em>ImGui_Context</em> ctx, <em>integer</em> key)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetKeyDownDuration(<em>ImGui_Context</em> ctx, <em>Int</em> key)</code></div>
	<p>Duration the keyboard key has been down (0.0 == just pressed)</p>
</div>

<div class="function_definition" id="ImGui_GetKeyMods">
	<div class="c_func"><code>int ImGui_GetKeyMods(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_GetKeyMods(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_GetKeyMods", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_GetKeyMods(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_GetKeyMods(<em>ImGui_Context</em> ctx)</code></div>
	<p>Flags for the Ctrl/Shift/Alt/Super keys. Uses Mod_* values.</p>
</div>

<div class="function_definition" id="ImGui_GetKeyPressedAmount">
	<div class="c_func"><code>int ImGui_GetKeyPressedAmount(ImGui_Context* ctx, int key, double repeat_delay, double rate)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_GetKeyPressedAmount(<em>ImGui_Context</em> ctx, <em>int </em>key, repeat_delay, rate) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_GetKeyPressedAmount", <em>ImGui_Context</em> ctx, <em>int </em>key, repeat_delay, rate) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_GetKeyPressedAmount(<em>ImGui_Context</em> ctx, <em>integer</em> key, <em>number</em> repeat_delay, <em>number</em> rate)</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_GetKeyPressedAmount(<em>ImGui_Context</em> ctx, <em>Int</em> key, <em>Float</em> repeat_delay, <em>Float</em> rate)</code></div>
	<p>Uses provided repeat rate/delay. Return a count, most often 0 or 1 but might<br>
be &gt;1 if ConfigVar_RepeatRate is small enough that GetDeltaTime &gt; RepeatRate.</p>
</div>

<div class="function_definition" id="ImGui_GetMainViewport">
	<div class="c_func"><code>ImGui_Viewport* ImGui_GetMainViewport(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>ImGui_Viewport</em>  ImGui_GetMainViewport(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_Viewport</em>  extension_api("ImGui_GetMainViewport", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_Viewport</em> reaper.ImGui_GetMainViewport(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>ImGui_Viewport</em>  ImGui_GetMainViewport(<em>ImGui_Context</em> ctx)</code></div>
	<p>Currently represents REAPER's main window (arrange view).<br>
WARNING: This may change or be removed in the future.</p>
</div>

<div class="function_definition" id="ImGui_GetMouseClickedCount">
	<div class="c_func"><code>int ImGui_GetMouseClickedCount(ImGui_Context* ctx, int button)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_GetMouseClickedCount(<em>ImGui_Context</em> ctx, <em>int </em>button) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_GetMouseClickedCount", <em>ImGui_Context</em> ctx, <em>int </em>button) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_GetMouseClickedCount(<em>ImGui_Context</em> ctx, <em>integer</em> button)</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_GetMouseClickedCount(<em>ImGui_Context</em> ctx, <em>Int</em> button)</code></div>
	<p>Return the number of successive mouse-clicks at the time where a click happen (otherwise 0).</p>
</div>

<div class="function_definition" id="ImGui_GetMouseClickedPos">
	<div class="c_func"><code>void ImGui_GetMouseClickedPos(ImGui_Context* ctx, int button, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetMouseClickedPos(<em>ImGui_Context</em> ctx, <em>int </em>button, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetMouseClickedPos", <em>ImGui_Context</em> ctx, <em>int </em>button, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetMouseClickedPos(<em>ImGui_Context</em> ctx, <em>integer</em> button)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Int</em> button, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetMouseClickedPos(ctx, button, xOut, yOut)</code></div>
</div>

<div class="function_definition" id="ImGui_GetMouseCursor">
	<div class="c_func"><code>int ImGui_GetMouseCursor(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_GetMouseCursor(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_GetMouseCursor", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_GetMouseCursor(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_GetMouseCursor(<em>ImGui_Context</em> ctx)</code></div>
	<p>Get desired mouse cursor shape, reset every frame. This is updated during the frame.</p>
</div>

<div class="function_definition" id="ImGui_GetMouseDelta">
	<div class="c_func"><code>void ImGui_GetMouseDelta(ImGui_Context* ctx, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetMouseDelta(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetMouseDelta", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetMouseDelta(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetMouseDelta(ctx, xOut, yOut)</code></div>
	<p>Mouse delta. Note that this is zero if either current or previous position<br>
are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have<br>
a huge delta.</p>
</div>

<div class="function_definition" id="ImGui_GetMouseDownDuration">
	<div class="c_func"><code>double ImGui_GetMouseDownDuration(ImGui_Context* ctx, int button)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetMouseDownDuration(<em>ImGui_Context</em> ctx, <em>int </em>button) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetMouseDownDuration", <em>ImGui_Context</em> ctx, <em>int </em>button) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetMouseDownDuration(<em>ImGui_Context</em> ctx, <em>integer</em> button)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetMouseDownDuration(<em>ImGui_Context</em> ctx, <em>Int</em> button)</code></div>
	<p>Duration the mouse button has been down (0.0 == just clicked)</p>
</div>

<div class="function_definition" id="ImGui_GetMouseDragDelta">
	<div class="c_func"><code>void ImGui_GetMouseDragDelta(ImGui_Context* ctx, double* xOut, double* yOut, int* buttonInOptional, double* lock_thresholdInOptional)</code></div>
	<div class="e_func"><code>ImGui_GetMouseDragDelta(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y, <em>optional int</em> buttonIn, <em>optional </em>lock_thresholdIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetMouseDragDelta", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y, <em>optional int</em> buttonIn, <em>optional </em>lock_thresholdIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetMouseDragDelta(<em>ImGui_Context</em> ctx, <em>number </em>x, <em>number </em>y, <em>optional integer</em> buttonIn, <em>optional number </em>lock_thresholdIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut, <em>Int</em> buttonInOptional, <em>Float</em> lock_thresholdInOptional) = ImGui_GetMouseDragDelta(ctx, xOut, yOut, buttonInOptional, lock_thresholdInOptional)</code></div>
	<p>Return the delta from the initial clicking position while the mouse button is<br>
pressed or was just released. This is locked and return 0.0 until the mouse<br>
moves past a distance threshold at least once (if lock_threshold &lt; -1.0, uses<br>
ConfigVar_MouseDragThreshold).</p>
</div>

<div class="function_definition" id="ImGui_GetMousePos">
	<div class="c_func"><code>void ImGui_GetMousePos(ImGui_Context* ctx, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetMousePos(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetMousePos", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetMousePos(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetMousePos(ctx, xOut, yOut)</code></div>
</div>

<div class="function_definition" id="ImGui_GetMousePosOnOpeningCurrentPopup">
	<div class="c_func"><code>void ImGui_GetMousePosOnOpeningCurrentPopup(ImGui_Context* ctx, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetMousePosOnOpeningCurrentPopup(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetMousePosOnOpeningCurrentPopup", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetMousePosOnOpeningCurrentPopup(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetMousePosOnOpeningCurrentPopup(ctx, xOut, yOut)</code></div>
	<p>Retrieve mouse position at the time of opening popup we have BeginPopup()<br>
into (helper to avoid user backing that value themselves).</p>
</div>

<div class="function_definition" id="ImGui_GetMouseWheel">
	<div class="c_func"><code>void ImGui_GetMouseWheel(ImGui_Context* ctx, double* verticalOut, double* horizontalOut)</code></div>
	<div class="e_func"><code>ImGui_GetMouseWheel(<em>ImGui_Context</em> ctx, <em>&amp;</em>vertical, <em>&amp;</em>horizontal) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetMouseWheel", <em>ImGui_Context</em> ctx, <em>&amp;</em>vertical, <em>&amp;</em>horizontal) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>vertical, <em>number </em>horizontal = reaper.ImGui_GetMouseWheel(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> verticalOut, <em>Float</em> horizontalOut) = ImGui_GetMouseWheel(ctx, verticalOut, horizontalOut)</code></div>
	<p>Vertical: 1 unit scrolls about 5 lines text. &gt;0 scrolls Up, &lt;0 scrolls Down.<br>
Hold SHIFT to turn vertical scroll into horizontal scroll<br>
</p><p>
Horizontal: &gt;0 scrolls Left, &lt;0 scrolls Right.<br>
Most users don't have a mouse with a horizontal wheel.</p>
</div>

<div class="function_definition" id="ImGui_GetScrollMaxX">
	<div class="c_func"><code>double ImGui_GetScrollMaxX(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetScrollMaxX(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetScrollMaxX", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetScrollMaxX(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetScrollMaxX(<em>ImGui_Context</em> ctx)</code></div>
	<p>Get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x</p>
</div>

<div class="function_definition" id="ImGui_GetScrollMaxY">
	<div class="c_func"><code>double ImGui_GetScrollMaxY(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetScrollMaxY(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetScrollMaxY", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetScrollMaxY(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetScrollMaxY(<em>ImGui_Context</em> ctx)</code></div>
	<p>Get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y</p>
</div>

<div class="function_definition" id="ImGui_GetScrollX">
	<div class="c_func"><code>double ImGui_GetScrollX(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetScrollX(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetScrollX", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetScrollX(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetScrollX(<em>ImGui_Context</em> ctx)</code></div>
	<p>Get scrolling amount [0 .. GetScrollMaxX()]</p>
</div>

<div class="function_definition" id="ImGui_GetScrollY">
	<div class="c_func"><code>double ImGui_GetScrollY(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetScrollY(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetScrollY", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetScrollY(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetScrollY(<em>ImGui_Context</em> ctx)</code></div>
	<p>Get scrolling amount [0 .. GetScrollMaxY()]</p>
</div>

<div class="function_definition" id="ImGui_GetStyleColor">
	<div class="c_func"><code>int ImGui_GetStyleColor(ImGui_Context* ctx, int idx)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_GetStyleColor(<em>ImGui_Context</em> ctx, <em>int </em>idx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_GetStyleColor", <em>ImGui_Context</em> ctx, <em>int </em>idx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_GetStyleColor(<em>ImGui_Context</em> ctx, <em>integer</em> idx)</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_GetStyleColor(<em>ImGui_Context</em> ctx, <em>Int</em> idx)</code></div>
	<p>Retrieve style color as stored in ImGuiStyle structure.<br>
Use to feed back into PushStyleColor, Otherwise use GetColor to get style color<br>
with style alpha baked in. See Col_* for available style colors.</p>
</div>

<div class="function_definition" id="ImGui_GetStyleVar">
	<div class="c_func"><code>void ImGui_GetStyleVar(ImGui_Context* ctx, int var_idx, double* val1Out, double* val2Out)</code></div>
	<div class="e_func"><code>ImGui_GetStyleVar(<em>ImGui_Context</em> ctx, <em>int </em>var_idx, <em>&amp;</em>val1, <em>&amp;</em>val2) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetStyleVar", <em>ImGui_Context</em> ctx, <em>int </em>var_idx, <em>&amp;</em>val1, <em>&amp;</em>val2) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>val1, <em>number </em>val2 = reaper.ImGui_GetStyleVar(<em>ImGui_Context</em> ctx, <em>integer</em> var_idx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Int</em> var_idx, <em>Float</em> val1Out, <em>Float</em> val2Out) = ImGui_GetStyleVar(ctx, var_idx, val1Out, val2Out)</code></div>
</div>

<div class="function_definition" id="ImGui_GetTextLineHeight">
	<div class="c_func"><code>double ImGui_GetTextLineHeight(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetTextLineHeight(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetTextLineHeight", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetTextLineHeight(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetTextLineHeight(<em>ImGui_Context</em> ctx)</code></div>
	<p>Same as GetFontSize</p>
</div>

<div class="function_definition" id="ImGui_GetTextLineHeightWithSpacing">
	<div class="c_func"><code>double ImGui_GetTextLineHeightWithSpacing(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetTextLineHeightWithSpacing(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetTextLineHeightWithSpacing", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetTextLineHeightWithSpacing(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetTextLineHeightWithSpacing(<em>ImGui_Context</em> ctx)</code></div>
	<p>GetFontSize + StyleVar_ItemSpacing.y<br>
(distance in pixels between 2 consecutive lines of text).</p>
</div>

<div class="function_definition" id="ImGui_GetTime">
	<div class="c_func"><code>double ImGui_GetTime(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetTime(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetTime", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetTime(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetTime(<em>ImGui_Context</em> ctx)</code></div>
	<p>Get global imgui time. Incremented every frame.</p>
</div>

<div class="function_definition" id="ImGui_GetTreeNodeToLabelSpacing">
	<div class="c_func"><code>double ImGui_GetTreeNodeToLabelSpacing(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetTreeNodeToLabelSpacing(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetTreeNodeToLabelSpacing", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetTreeNodeToLabelSpacing(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetTreeNodeToLabelSpacing(<em>ImGui_Context</em> ctx)</code></div>
	<p>Horizontal distance preceding label when using TreeNode*() or Bullet()<br>
== (GetFontSize + StyleVar_FramePadding.x*2) for a regular unframed TreeNode.</p>
</div>

<div class="function_definition" id="ImGui_GetVersion">
	<div class="c_func"><code>void ImGui_GetVersion(char* imgui_versionOut, int imgui_versionOut_sz, int* imgui_version_numOut, char* reaimgui_versionOut, int reaimgui_versionOut_sz)</code></div>
	<div class="e_func"><code>ImGui_GetVersion(#imgui_version, <em>int &amp;</em>imgui_version_num, #reaimgui_version) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetVersion", #imgui_version, <em>int &amp;</em>imgui_version_num, #reaimgui_version) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>imgui_version, <em>integer </em>imgui_version_num, <em>string </em>reaimgui_version = reaper.ImGui_GetVersion()</code></div>
	<div class="p_func"><code>(<em>String</em> imgui_versionOut, <em>Int</em> imgui_versionOut_sz, <em>Int</em> imgui_version_numOut, <em>String</em> reaimgui_versionOut, <em>Int</em> reaimgui_versionOut_sz) = ImGui_GetVersion(imgui_versionOut, imgui_versionOut_sz, imgui_version_numOut, reaimgui_versionOut, reaimgui_versionOut_sz)</code></div>
</div>

<div class="function_definition" id="ImGui_GetWindowContentRegionMax">
	<div class="c_func"><code>void ImGui_GetWindowContentRegionMax(ImGui_Context* ctx, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetWindowContentRegionMax(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetWindowContentRegionMax", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetWindowContentRegionMax(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetWindowContentRegionMax(ctx, xOut, yOut)</code></div>
	<p>Content boundaries max (roughly (0,0)+Size-Scroll) where Size can be<br>
overridden with SetNextWindowContentSize, in window coordinates.</p>
</div>

<div class="function_definition" id="ImGui_GetWindowContentRegionMin">
	<div class="c_func"><code>void ImGui_GetWindowContentRegionMin(ImGui_Context* ctx, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetWindowContentRegionMin(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetWindowContentRegionMin", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetWindowContentRegionMin(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetWindowContentRegionMin(ctx, xOut, yOut)</code></div>
	<p>Content boundaries min (roughly (0,0)-Scroll), in window coordinates.</p>
</div>

<div class="function_definition" id="ImGui_GetWindowDockID">
	<div class="c_func"><code>int ImGui_GetWindowDockID(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_GetWindowDockID(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_GetWindowDockID", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_GetWindowDockID(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_GetWindowDockID(<em>ImGui_Context</em> ctx)</code></div>
</div>

<div class="function_definition" id="ImGui_GetWindowDpiScale">
	<div class="c_func"><code>double ImGui_GetWindowDpiScale(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetWindowDpiScale(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetWindowDpiScale", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetWindowDpiScale(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetWindowDpiScale(<em>ImGui_Context</em> ctx)</code></div>
	<p>Get DPI scale currently associated to the current window's viewport<br>
(1.0 = 96 DPI).</p>
</div>

<div class="function_definition" id="ImGui_GetWindowDrawList">
	<div class="c_func"><code>ImGui_DrawList* ImGui_GetWindowDrawList(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>ImGui_DrawList</em>  ImGui_GetWindowDrawList(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_DrawList</em>  extension_api("ImGui_GetWindowDrawList", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_DrawList</em> reaper.ImGui_GetWindowDrawList(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>ImGui_DrawList</em>  ImGui_GetWindowDrawList(<em>ImGui_Context</em> ctx)</code></div>
	<p>The draw list associated to the current window, to append your own drawing primitives</p>
</div>

<div class="function_definition" id="ImGui_GetWindowHeight">
	<div class="c_func"><code>double ImGui_GetWindowHeight(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetWindowHeight(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetWindowHeight", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetWindowHeight(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetWindowHeight(<em>ImGui_Context</em> ctx)</code></div>
	<p>Get current window height (shortcut for (select(2, GetWindowSize())).</p>
</div>

<div class="function_definition" id="ImGui_GetWindowPos">
	<div class="c_func"><code>void ImGui_GetWindowPos(ImGui_Context* ctx, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_GetWindowPos(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetWindowPos", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_GetWindowPos(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_GetWindowPos(ctx, xOut, yOut)</code></div>
	<p>Get current window position in screen space (useful if you want to do your own<br>
drawing via the DrawList API).</p>
</div>

<div class="function_definition" id="ImGui_GetWindowSize">
	<div class="c_func"><code>void ImGui_GetWindowSize(ImGui_Context* ctx, double* wOut, double* hOut)</code></div>
	<div class="e_func"><code>ImGui_GetWindowSize(<em>ImGui_Context</em> ctx, <em>&amp;</em>w, <em>&amp;</em>h) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_GetWindowSize", <em>ImGui_Context</em> ctx, <em>&amp;</em>w, <em>&amp;</em>h) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>w, <em>number </em>h = reaper.ImGui_GetWindowSize(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> wOut, <em>Float</em> hOut) = ImGui_GetWindowSize(ctx, wOut, hOut)</code></div>
	<p>Get current window size</p>
</div>

<div class="function_definition" id="ImGui_GetWindowViewport">
	<div class="c_func"><code>ImGui_Viewport* ImGui_GetWindowViewport(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>ImGui_Viewport</em>  ImGui_GetWindowViewport(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>ImGui_Viewport</em>  extension_api("ImGui_GetWindowViewport", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>ImGui_Viewport</em> reaper.ImGui_GetWindowViewport(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>ImGui_Viewport</em>  ImGui_GetWindowViewport(<em>ImGui_Context</em> ctx)</code></div>
	<p>Get viewport currently associated to the current window.</p>
</div>

<div class="function_definition" id="ImGui_GetWindowWidth">
	<div class="c_func"><code>double ImGui_GetWindowWidth(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>double </em> ImGui_GetWindowWidth(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("ImGui_GetWindowWidth", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.ImGui_GetWindowWidth(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Float</em>  ImGui_GetWindowWidth(<em>ImGui_Context</em> ctx)</code></div>
	<p>Get current window width (shortcut for (select(1, GetWindowSize())).</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_AllowWhenBlockedByActiveItem">
	<div class="c_func"><code>int ImGui_HoveredFlags_AllowWhenBlockedByActiveItem()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_AllowWhenBlockedByActiveItem() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_AllowWhenBlockedByActiveItem") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_AllowWhenBlockedByActiveItem()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_AllowWhenBlockedByActiveItem()</code></div>
	<p>Return true even if an active item is blocking access to this item/window.<br>
  Useful for Drag and Drop patterns.</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_AllowWhenBlockedByPopup">
	<div class="c_func"><code>int ImGui_HoveredFlags_AllowWhenBlockedByPopup()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_AllowWhenBlockedByPopup() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_AllowWhenBlockedByPopup") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_AllowWhenBlockedByPopup()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_AllowWhenBlockedByPopup()</code></div>
	<p>Return true even if a popup window is normally blocking access to this item/window.</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_AllowWhenDisabled">
	<div class="c_func"><code>int ImGui_HoveredFlags_AllowWhenDisabled()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_AllowWhenDisabled() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_AllowWhenDisabled") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_AllowWhenDisabled()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_AllowWhenDisabled()</code></div>
	<p>IsItemHovered only: Return true even if the item is disabled.</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_AllowWhenOverlapped">
	<div class="c_func"><code>int ImGui_HoveredFlags_AllowWhenOverlapped()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_AllowWhenOverlapped() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_AllowWhenOverlapped") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_AllowWhenOverlapped()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_AllowWhenOverlapped()</code></div>
	<p>IsItemHovered only: Return true even if the position is obstructed or<br>
  overlapped by another window.</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_AnyWindow">
	<div class="c_func"><code>int ImGui_HoveredFlags_AnyWindow()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_AnyWindow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_AnyWindow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_AnyWindow()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_AnyWindow()</code></div>
	<p>IsWindowHovered only: Return true if any window is hovered.</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_ChildWindows">
	<div class="c_func"><code>int ImGui_HoveredFlags_ChildWindows()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_ChildWindows() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_ChildWindows") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_ChildWindows()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_ChildWindows()</code></div>
	<p>IsWindowHovered only: Return true if any children of the window is hovered.</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_DelayNormal">
	<div class="c_func"><code>int ImGui_HoveredFlags_DelayNormal()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_DelayNormal() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_DelayNormal") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_DelayNormal()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_DelayNormal()</code></div>
	<p>Return true after ConfigVar_HoverDelayNormal elapsed (~0.30 sec)</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_DelayShort">
	<div class="c_func"><code>int ImGui_HoveredFlags_DelayShort()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_DelayShort() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_DelayShort") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_DelayShort()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_DelayShort()</code></div>
	<p>Return true after ConfigVar_HoverDelayShort elapsed (~0.10 sec)</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_DockHierarchy">
	<div class="c_func"><code>int ImGui_HoveredFlags_DockHierarchy()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_DockHierarchy() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_DockHierarchy") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_DockHierarchy()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_DockHierarchy()</code></div>
	<p>IsWindowHovered only: Consider docking hierarchy (treat dockspace host as<br>
  parent of docked window) (when used with _ChildWindows or _RootWindow).</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_NoNavOverride">
	<div class="c_func"><code>int ImGui_HoveredFlags_NoNavOverride()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_NoNavOverride() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_NoNavOverride") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_NoNavOverride()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_NoNavOverride()</code></div>
	<p>Disable using gamepad/keyboard navigation state when active, always query mouse.</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_NoPopupHierarchy">
	<div class="c_func"><code>int ImGui_HoveredFlags_NoPopupHierarchy()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_NoPopupHierarchy() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_NoPopupHierarchy") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_NoPopupHierarchy()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_NoPopupHierarchy()</code></div>
	<p>IsWindowHovered only: Do not consider popup hierarchy (do not treat popup<br>
  emitter as parent of popup) (when used with _ChildWindows or _RootWindow).</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_NoSharedDelay">
	<div class="c_func"><code>int ImGui_HoveredFlags_NoSharedDelay()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_NoSharedDelay() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_NoSharedDelay") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_NoSharedDelay()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_NoSharedDelay()</code></div>
	<p>Disable shared delay system where moving from one item to the next keeps<br>
  the previous timer for a short time (standard for tooltips with long delays</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_None">
	<div class="c_func"><code>int ImGui_HoveredFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_None()</code></div>
	<p>Return true if directly over the item/window, not obstructed by another<br>
  window, not obstructed by an active popup or modal blocking inputs under them.</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_RectOnly">
	<div class="c_func"><code>int ImGui_HoveredFlags_RectOnly()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_RectOnly() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_RectOnly") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_RectOnly()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_RectOnly()</code></div>
	<p>HoveredFlags_AllowWhenBlockedByPopup |<br>
  HoveredFlags_AllowWhenBlockedByActiveItem | HoveredFlags_AllowWhenOverlapped</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_RootAndChildWindows">
	<div class="c_func"><code>int ImGui_HoveredFlags_RootAndChildWindows()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_RootAndChildWindows() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_RootAndChildWindows") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_RootAndChildWindows()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_RootAndChildWindows()</code></div>
	<p>HoveredFlags_RootWindow | HoveredFlags_ChildWindows</p>
</div>

<div class="function_definition" id="ImGui_HoveredFlags_RootWindow">
	<div class="c_func"><code>int ImGui_HoveredFlags_RootWindow()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_HoveredFlags_RootWindow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_HoveredFlags_RootWindow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_HoveredFlags_RootWindow()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_HoveredFlags_RootWindow()</code></div>
	<p>IsWindowHovered only: Test from root window (top most parent of the current hierarchy).</p>
</div>

<div class="function_definition" id="ImGui_Image">
	<div class="c_func"><code>void ImGui_Image(ImGui_Context* ctx, ImGui_Image* img, double size_w, double size_h, double* uv0_xInOptional, double* uv0_yInOptional, double* uv1_xInOptional, double* uv1_yInOptional, int* tint_col_rgbaInOptional, int* border_col_rgbaInOptional)</code></div>
	<div class="e_func"><code>ImGui_Image(<em>ImGui_Context</em> ctx, <em>ImGui_Image</em> img, size_w, size_h, <em>optional </em>uv0_xIn, <em>optional </em>uv0_yIn, <em>optional </em>uv1_xIn, <em>optional </em>uv1_yIn, <em>optional int</em> tint_col_rgbaIn, <em>optional int</em> border_col_rgbaIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Image", <em>ImGui_Context</em> ctx, <em>ImGui_Image</em> img, size_w, size_h, <em>optional </em>uv0_xIn, <em>optional </em>uv0_yIn, <em>optional </em>uv1_xIn, <em>optional </em>uv1_yIn, <em>optional int</em> tint_col_rgbaIn, <em>optional int</em> border_col_rgbaIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Image(<em>ImGui_Context</em> ctx, <em>ImGui_Image</em> img, <em>number</em> size_w, <em>number</em> size_h, <em>optional number </em>uv0_xIn, <em>optional number </em>uv0_yIn, <em>optional number </em>uv1_xIn, <em>optional number </em>uv1_yIn, <em>optional integer</em> tint_col_rgbaIn, <em>optional integer</em> border_col_rgbaIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>ImGui_Image</em> img, <em>Float</em> size_w, <em>Float</em> size_h, <em>Float</em> uv0_xInOptional, <em>Float</em> uv0_yInOptional, <em>Float</em> uv1_xInOptional, <em>Float</em> uv1_yInOptional, <em>Int</em> tint_col_rgbaInOptional, <em>Int</em> border_col_rgbaInOptional) = ImGui_Image(ctx, img, size_w, size_h, uv0_xInOptional, uv0_yInOptional, uv1_xInOptional, uv1_yInOptional, tint_col_rgbaInOptional, border_col_rgbaInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_ImageButton">
	<div class="c_func"><code>bool ImGui_ImageButton(ImGui_Context* ctx, const char* str_id, ImGui_Image* img, double size_w, double size_h, double* uv0_xInOptional, double* uv0_yInOptional, double* uv1_xInOptional, double* uv1_yInOptional, int* bg_col_rgbaInOptional, int* tint_col_rgbaInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_ImageButton(<em>ImGui_Context</em> ctx, "str_id", <em>ImGui_Image</em> img, size_w, size_h, <em>optional </em>uv0_xIn, <em>optional </em>uv0_yIn, <em>optional </em>uv1_xIn, <em>optional </em>uv1_yIn, <em>optional int</em> bg_col_rgbaIn, <em>optional int</em> tint_col_rgbaIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_ImageButton", <em>ImGui_Context</em> ctx, "str_id", <em>ImGui_Image</em> img, size_w, size_h, <em>optional </em>uv0_xIn, <em>optional </em>uv0_yIn, <em>optional </em>uv1_xIn, <em>optional </em>uv1_yIn, <em>optional int</em> bg_col_rgbaIn, <em>optional int</em> tint_col_rgbaIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_ImageButton(<em>ImGui_Context</em> ctx, <em>string</em> str_id, <em>ImGui_Image</em> img, <em>number</em> size_w, <em>number</em> size_h, <em>optional number </em>uv0_xIn, <em>optional number </em>uv0_yIn, <em>optional number </em>uv1_xIn, <em>optional number </em>uv1_yIn, <em>optional integer</em> bg_col_rgbaIn, <em>optional integer</em> tint_col_rgbaIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> str_id, <em>ImGui_Image</em> img, <em>Float</em> size_w, <em>Float</em> size_h, <em>Float</em> uv0_xInOptional, <em>Float</em> uv0_yInOptional, <em>Float</em> uv1_xInOptional, <em>Float</em> uv1_yInOptional, <em>Int</em> bg_col_rgbaInOptional, <em>Int</em> tint_col_rgbaInOptional) = ImGui_ImageButton(ctx, str_id, img, size_w, size_h, uv0_xInOptional, uv0_yInOptional, uv1_xInOptional, uv1_yInOptional, bg_col_rgbaInOptional, tint_col_rgbaInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_ImageSet_Add">
	<div class="c_func"><code>void ImGui_ImageSet_Add(ImGui_ImageSet* set, double scale, ImGui_Image* img)</code></div>
	<div class="e_func"><code>ImGui_ImageSet_Add(<em>ImGui_ImageSet</em> set, scale, <em>ImGui_Image</em> img) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ImageSet_Add", <em>ImGui_ImageSet</em> set, scale, <em>ImGui_Image</em> img) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_ImageSet_Add(<em>ImGui_ImageSet</em> set, <em>number</em> scale, <em>ImGui_Image</em> img)</code></div>
	<div class="p_func"><code>ImGui_ImageSet_Add(<em>ImGui_ImageSet</em> set, <em>Float</em> scale, <em>ImGui_Image</em> img)</code></div>
	<p>'img' cannot be another ImageSet.</p>
</div>

<div class="function_definition" id="ImGui_Image_GetSize">
	<div class="c_func"><code>void ImGui_Image_GetSize(ImGui_Image* img, double* wOut, double* hOut)</code></div>
	<div class="e_func"><code>ImGui_Image_GetSize(<em>ImGui_Image</em> img, <em>&amp;</em>w, <em>&amp;</em>h) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Image_GetSize", <em>ImGui_Image</em> img, <em>&amp;</em>w, <em>&amp;</em>h) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>w, <em>number </em>h = reaper.ImGui_Image_GetSize(<em>ImGui_Image</em> img)</code></div>
	<div class="p_func"><code>(<em>ImGui_Image</em> img, <em>Float</em> wOut, <em>Float</em> hOut) = ImGui_Image_GetSize(img, wOut, hOut)</code></div>
</div>

<div class="function_definition" id="ImGui_Indent">
	<div class="c_func"><code>void ImGui_Indent(ImGui_Context* ctx, double* indent_wInOptional)</code></div>
	<div class="e_func"><code>ImGui_Indent(<em>ImGui_Context</em> ctx, <em>optional </em>indent_wIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Indent", <em>ImGui_Context</em> ctx, <em>optional </em>indent_wIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Indent(<em>ImGui_Context</em> ctx, <em>optional number </em>indent_wIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> indent_wInOptional) = ImGui_Indent(ctx, indent_wInOptional)</code></div>
	<p>Move content position toward the right, by 'indent_w', or<br>
StyleVar_IndentSpacing if 'indent_w' &lt;= 0. See Unindent.</p>
</div>

<div class="function_definition" id="ImGui_InputDouble">
	<div class="c_func"><code>bool ImGui_InputDouble(ImGui_Context* ctx, const char* label, double* vInOut, double* stepInOptional, double* step_fastInOptional, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_InputDouble(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v, <em>optional </em>stepIn, <em>optional </em>step_fastIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_InputDouble", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v, <em>optional </em>stepIn, <em>optional </em>step_fastIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v = reaper.ImGui_InputDouble(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v, <em>optional number </em>stepIn, <em>optional number </em>step_fastIn, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> vInOut, <em>Float</em> stepInOptional, <em>Float</em> step_fastInOptional, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_InputDouble(ctx, label, vInOut, stepInOptional, step_fastInOptional, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_InputDouble2">
	<div class="c_func"><code>bool ImGui_InputDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_InputDouble2(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_InputDouble2", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v1, <em>number </em>v2 = reaper.ImGui_InputDouble2(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v1, <em>number </em>v2, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> v1InOut, <em>Float</em> v2InOut, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_InputDouble2(ctx, label, v1InOut, v2InOut, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_InputDouble3">
	<div class="c_func"><code>bool ImGui_InputDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_InputDouble3(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>&amp;</em>v3, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_InputDouble3", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>&amp;</em>v3, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v1, <em>number </em>v2, <em>number </em>v3 = reaper.ImGui_InputDouble3(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v1, <em>number </em>v2, <em>number </em>v3, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> v1InOut, <em>Float</em> v2InOut, <em>Float</em> v3InOut, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_InputDouble3(ctx, label, v1InOut, v2InOut, v3InOut, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_InputDouble4">
	<div class="c_func"><code>bool ImGui_InputDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_InputDouble4(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>&amp;</em>v3, <em>&amp;</em>v4, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_InputDouble4", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>&amp;</em>v3, <em>&amp;</em>v4, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v1, <em>number </em>v2, <em>number </em>v3, <em>number </em>v4 = reaper.ImGui_InputDouble4(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v1, <em>number </em>v2, <em>number </em>v3, <em>number </em>v4, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> v1InOut, <em>Float</em> v2InOut, <em>Float</em> v3InOut, <em>Float</em> v4InOut, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_InputDouble4(ctx, label, v1InOut, v2InOut, v3InOut, v4InOut, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_InputDoubleN">
	<div class="c_func"><code>bool ImGui_InputDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double* stepInOptional, double* step_fastInOptional, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_InputDoubleN(<em>ImGui_Context</em> ctx, "label", <em>reaper_array</em> values, <em>optional </em>stepIn, <em>optional </em>step_fastIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_InputDoubleN", <em>ImGui_Context</em> ctx, "label", <em>reaper_array</em> values, <em>optional </em>stepIn, <em>optional </em>step_fastIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_InputDoubleN(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>reaper_array</em> values, <em>optional number </em>stepIn, <em>optional number </em>step_fastIn, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>reaper_array</em> values, <em>Float</em> stepInOptional, <em>Float</em> step_fastInOptional, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_InputDoubleN(ctx, label, values, stepInOptional, step_fastInOptional, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_InputInt">
	<div class="c_func"><code>bool ImGui_InputInt(ImGui_Context* ctx, const char* label, int* vInOut, int* stepInOptional, int* step_fastInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_InputInt(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v, <em>optional int</em> stepIn, <em>optional int</em> step_fastIn, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_InputInt", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v, <em>optional int</em> stepIn, <em>optional int</em> step_fastIn, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v = reaper.ImGui_InputInt(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v, <em>optional integer</em> stepIn, <em>optional integer</em> step_fastIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> vInOut, <em>Int</em> stepInOptional, <em>Int</em> step_fastInOptional, <em>Int</em> flagsInOptional) = ImGui_InputInt(ctx, label, vInOut, stepInOptional, step_fastInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_InputInt2">
	<div class="c_func"><code>bool ImGui_InputInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_InputInt2(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_InputInt2", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v1, <em>integer </em>v2 = reaper.ImGui_InputInt2(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v1, <em>integer </em>v2, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> v1InOut, <em>Int</em> v2InOut, <em>Int</em> flagsInOptional) = ImGui_InputInt2(ctx, label, v1InOut, v2InOut, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_InputInt3">
	<div class="c_func"><code>bool ImGui_InputInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_InputInt3(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int &amp;</em>v3, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_InputInt3", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int &amp;</em>v3, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v1, <em>integer </em>v2, <em>integer </em>v3 = reaper.ImGui_InputInt3(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v1, <em>integer </em>v2, <em>integer </em>v3, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> v1InOut, <em>Int</em> v2InOut, <em>Int</em> v3InOut, <em>Int</em> flagsInOptional) = ImGui_InputInt3(ctx, label, v1InOut, v2InOut, v3InOut, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_InputInt4">
	<div class="c_func"><code>bool ImGui_InputInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_InputInt4(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int &amp;</em>v3, <em>int &amp;</em>v4, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_InputInt4", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int &amp;</em>v3, <em>int &amp;</em>v4, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v1, <em>integer </em>v2, <em>integer </em>v3, <em>integer </em>v4 = reaper.ImGui_InputInt4(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v1, <em>integer </em>v2, <em>integer </em>v3, <em>integer </em>v4, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> v1InOut, <em>Int</em> v2InOut, <em>Int</em> v3InOut, <em>Int</em> v4InOut, <em>Int</em> flagsInOptional) = ImGui_InputInt4(ctx, label, v1InOut, v2InOut, v3InOut, v4InOut, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_InputText">
	<div class="c_func"><code>bool ImGui_InputText(ImGui_Context* ctx, const char* label, char* bufInOutNeedBig, int bufInOutNeedBig_sz, int* flagsInOptional, ImGui_Function* callbackInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_InputText(<em>ImGui_Context</em> ctx, "label", #buf, <em>optional int</em> flagsIn, <em>ImGui_Function</em> callbackIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_InputText", <em>ImGui_Context</em> ctx, "label", #buf, <em>optional int</em> flagsIn, <em>ImGui_Function</em> callbackIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.ImGui_InputText(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>string </em>buf, <em>optional integer</em> flagsIn, <em>ImGui_Function</em> callbackIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>String</em> bufInOutNeedBig, <em>Int</em> bufInOutNeedBig_sz, <em>Int</em> flagsInOptional, <em>ImGui_Function</em> callbackInOptional) = ImGui_InputText(ctx, label, bufInOutNeedBig, bufInOutNeedBig_sz, flagsInOptional, callbackInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_AllowTabInput">
	<div class="c_func"><code>int ImGui_InputTextFlags_AllowTabInput()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_AllowTabInput() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_AllowTabInput") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_AllowTabInput()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_AllowTabInput()</code></div>
	<p>Pressing TAB input a '\t' character into the text field.</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_AlwaysOverwrite">
	<div class="c_func"><code>int ImGui_InputTextFlags_AlwaysOverwrite()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_AlwaysOverwrite() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_AlwaysOverwrite") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_AlwaysOverwrite()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_AlwaysOverwrite()</code></div>
	<p>Overwrite mode.</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_AutoSelectAll">
	<div class="c_func"><code>int ImGui_InputTextFlags_AutoSelectAll()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_AutoSelectAll() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_AutoSelectAll") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_AutoSelectAll()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_AutoSelectAll()</code></div>
	<p>Select entire text when first taking mouse focus.</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_CallbackAlways">
	<div class="c_func"><code>int ImGui_InputTextFlags_CallbackAlways()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_CallbackAlways() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_CallbackAlways") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_CallbackAlways()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_CallbackAlways()</code></div>
	<p>Callback on each iteration. User code may query cursor position, modify text buffer.</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_CallbackCharFilter">
	<div class="c_func"><code>int ImGui_InputTextFlags_CallbackCharFilter()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_CallbackCharFilter() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_CallbackCharFilter") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_CallbackCharFilter()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_CallbackCharFilter()</code></div>
	<p>Callback on character inputs to replace or discard them.<br>
   Modify 'EventChar' to replace or 'EventChar = 0' to discard.</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_CallbackCompletion">
	<div class="c_func"><code>int ImGui_InputTextFlags_CallbackCompletion()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_CallbackCompletion() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_CallbackCompletion") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_CallbackCompletion()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_CallbackCompletion()</code></div>
	<p>Callback on pressing TAB (for completion handling).</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_CallbackEdit">
	<div class="c_func"><code>int ImGui_InputTextFlags_CallbackEdit()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_CallbackEdit() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_CallbackEdit") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_CallbackEdit()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_CallbackEdit()</code></div>
	<p>Callback on any edit (note that InputText() already returns true on edit,<br>
   the callback is useful mainly to manipulate the underlying buffer while<br>
   focus is active).</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_CallbackHistory">
	<div class="c_func"><code>int ImGui_InputTextFlags_CallbackHistory()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_CallbackHistory() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_CallbackHistory") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_CallbackHistory()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_CallbackHistory()</code></div>
	<p>Callback on pressing Up/Down arrows (for history handling).</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_CharsDecimal">
	<div class="c_func"><code>int ImGui_InputTextFlags_CharsDecimal()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_CharsDecimal() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_CharsDecimal") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_CharsDecimal()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_CharsDecimal()</code></div>
	<p>Allow 0123456789.+-*/.</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_CharsHexadecimal">
	<div class="c_func"><code>int ImGui_InputTextFlags_CharsHexadecimal()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_CharsHexadecimal() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_CharsHexadecimal") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_CharsHexadecimal()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_CharsHexadecimal()</code></div>
	<p>Allow 0123456789ABCDEFabcdef.</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_CharsNoBlank">
	<div class="c_func"><code>int ImGui_InputTextFlags_CharsNoBlank()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_CharsNoBlank() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_CharsNoBlank") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_CharsNoBlank()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_CharsNoBlank()</code></div>
	<p>Filter out spaces, tabs.</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_CharsScientific">
	<div class="c_func"><code>int ImGui_InputTextFlags_CharsScientific()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_CharsScientific() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_CharsScientific") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_CharsScientific()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_CharsScientific()</code></div>
	<p>Allow 0123456789.+-*/eE (Scientific notation input).</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_CharsUppercase">
	<div class="c_func"><code>int ImGui_InputTextFlags_CharsUppercase()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_CharsUppercase() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_CharsUppercase") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_CharsUppercase()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_CharsUppercase()</code></div>
	<p>Turn a..z into A..Z.</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_CtrlEnterForNewLine">
	<div class="c_func"><code>int ImGui_InputTextFlags_CtrlEnterForNewLine()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_CtrlEnterForNewLine() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_CtrlEnterForNewLine") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_CtrlEnterForNewLine()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_CtrlEnterForNewLine()</code></div>
	<p>In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter<br>
   (default is opposite: unfocus with Ctrl+Enter, add line with Enter).</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_EnterReturnsTrue">
	<div class="c_func"><code>int ImGui_InputTextFlags_EnterReturnsTrue()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_EnterReturnsTrue() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_EnterReturnsTrue") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_EnterReturnsTrue()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_EnterReturnsTrue()</code></div>
	<p>Return 'true' when Enter is pressed (as opposed to every time the value was<br>
   modified). Consider looking at the IsItemDeactivatedAfterEdit function.</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_EscapeClearsAll">
	<div class="c_func"><code>int ImGui_InputTextFlags_EscapeClearsAll()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_EscapeClearsAll() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_EscapeClearsAll") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_EscapeClearsAll()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_EscapeClearsAll()</code></div>
	<p>Escape key clears content if not empty, and deactivate otherwise<br>
   (constrast to default behavior of Escape to revert).</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_NoHorizontalScroll">
	<div class="c_func"><code>int ImGui_InputTextFlags_NoHorizontalScroll()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_NoHorizontalScroll() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_NoHorizontalScroll") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_NoHorizontalScroll()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_NoHorizontalScroll()</code></div>
	<p>Disable following the cursor horizontally.</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_NoUndoRedo">
	<div class="c_func"><code>int ImGui_InputTextFlags_NoUndoRedo()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_NoUndoRedo() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_NoUndoRedo") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_NoUndoRedo()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_NoUndoRedo()</code></div>
	<p>Disable undo/redo. Note that input text owns the text data while active.</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_None">
	<div class="c_func"><code>int ImGui_InputTextFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_Password">
	<div class="c_func"><code>int ImGui_InputTextFlags_Password()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_Password() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_Password") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_Password()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_Password()</code></div>
	<p>Password mode, display all characters as '*'.</p>
</div>

<div class="function_definition" id="ImGui_InputTextFlags_ReadOnly">
	<div class="c_func"><code>int ImGui_InputTextFlags_ReadOnly()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_InputTextFlags_ReadOnly() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_InputTextFlags_ReadOnly") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_InputTextFlags_ReadOnly()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_InputTextFlags_ReadOnly()</code></div>
	<p>Read-only mode.</p>
</div>

<div class="function_definition" id="ImGui_InputTextMultiline">
	<div class="c_func"><code>bool ImGui_InputTextMultiline(ImGui_Context* ctx, const char* label, char* bufInOutNeedBig, int bufInOutNeedBig_sz, double* size_wInOptional, double* size_hInOptional, int* flagsInOptional, ImGui_Function* callbackInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_InputTextMultiline(<em>ImGui_Context</em> ctx, "label", #buf, <em>optional </em>size_wIn, <em>optional </em>size_hIn, <em>optional int</em> flagsIn, <em>ImGui_Function</em> callbackIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_InputTextMultiline", <em>ImGui_Context</em> ctx, "label", #buf, <em>optional </em>size_wIn, <em>optional </em>size_hIn, <em>optional int</em> flagsIn, <em>ImGui_Function</em> callbackIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.ImGui_InputTextMultiline(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>string </em>buf, <em>optional number </em>size_wIn, <em>optional number </em>size_hIn, <em>optional integer</em> flagsIn, <em>ImGui_Function</em> callbackIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>String</em> bufInOutNeedBig, <em>Int</em> bufInOutNeedBig_sz, <em>Float</em> size_wInOptional, <em>Float</em> size_hInOptional, <em>Int</em> flagsInOptional, <em>ImGui_Function</em> callbackInOptional) = ImGui_InputTextMultiline(ctx, label, bufInOutNeedBig, bufInOutNeedBig_sz, size_wInOptional, size_hInOptional, flagsInOptional, callbackInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_InputTextWithHint">
	<div class="c_func"><code>bool ImGui_InputTextWithHint(ImGui_Context* ctx, const char* label, const char* hint, char* bufInOutNeedBig, int bufInOutNeedBig_sz, int* flagsInOptional, ImGui_Function* callbackInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_InputTextWithHint(<em>ImGui_Context</em> ctx, "label", "hint", #buf, <em>optional int</em> flagsIn, <em>ImGui_Function</em> callbackIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_InputTextWithHint", <em>ImGui_Context</em> ctx, "label", "hint", #buf, <em>optional int</em> flagsIn, <em>ImGui_Function</em> callbackIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.ImGui_InputTextWithHint(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>string</em> hint, <em>string </em>buf, <em>optional integer</em> flagsIn, <em>ImGui_Function</em> callbackIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>String</em> hint, <em>String</em> bufInOutNeedBig, <em>Int</em> bufInOutNeedBig_sz, <em>Int</em> flagsInOptional, <em>ImGui_Function</em> callbackInOptional) = ImGui_InputTextWithHint(ctx, label, hint, bufInOutNeedBig, bufInOutNeedBig_sz, flagsInOptional, callbackInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_InvisibleButton">
	<div class="c_func"><code>bool ImGui_InvisibleButton(ImGui_Context* ctx, const char* str_id, double size_w, double size_h, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_InvisibleButton(<em>ImGui_Context</em> ctx, "str_id", size_w, size_h, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_InvisibleButton", <em>ImGui_Context</em> ctx, "str_id", size_w, size_h, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_InvisibleButton(<em>ImGui_Context</em> ctx, <em>string</em> str_id, <em>number</em> size_w, <em>number</em> size_h, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> str_id, <em>Float</em> size_w, <em>Float</em> size_h, <em>Int</em> flagsInOptional) = ImGui_InvisibleButton(ctx, str_id, size_w, size_h, flagsInOptional)</code></div>
	<p>Flexible button behavior without the visuals, frequently useful to build<br>
custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.).</p>
</div>

<div class="function_definition" id="ImGui_IsAnyItemActive">
	<div class="c_func"><code>bool ImGui_IsAnyItemActive(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsAnyItemActive(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsAnyItemActive", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsAnyItemActive(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsAnyItemActive(<em>ImGui_Context</em> ctx)</code></div>
</div>

<div class="function_definition" id="ImGui_IsAnyItemFocused">
	<div class="c_func"><code>bool ImGui_IsAnyItemFocused(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsAnyItemFocused(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsAnyItemFocused", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsAnyItemFocused(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsAnyItemFocused(<em>ImGui_Context</em> ctx)</code></div>
</div>

<div class="function_definition" id="ImGui_IsAnyItemHovered">
	<div class="c_func"><code>bool ImGui_IsAnyItemHovered(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsAnyItemHovered(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsAnyItemHovered", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsAnyItemHovered(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsAnyItemHovered(<em>ImGui_Context</em> ctx)</code></div>
</div>

<div class="function_definition" id="ImGui_IsAnyMouseDown">
	<div class="c_func"><code>bool ImGui_IsAnyMouseDown(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsAnyMouseDown(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsAnyMouseDown", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsAnyMouseDown(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsAnyMouseDown(<em>ImGui_Context</em> ctx)</code></div>
	<p>Is any mouse button held?</p>
</div>

<div class="function_definition" id="ImGui_IsItemActivated">
	<div class="c_func"><code>bool ImGui_IsItemActivated(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsItemActivated(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsItemActivated", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsItemActivated(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsItemActivated(<em>ImGui_Context</em> ctx)</code></div>
	<p>Was the last item just made active (item was previously inactive).</p>
</div>

<div class="function_definition" id="ImGui_IsItemActive">
	<div class="c_func"><code>bool ImGui_IsItemActive(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsItemActive(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsItemActive", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsItemActive(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsItemActive(<em>ImGui_Context</em> ctx)</code></div>
	<p>Is the last item active? (e.g. button being held, text field being edited.<br>
This will continuously return true while holding mouse button on an item.<br>
Items that don't interact will always return false.</p>
</div>

<div class="function_definition" id="ImGui_IsItemClicked">
	<div class="c_func"><code>bool ImGui_IsItemClicked(ImGui_Context* ctx, int* mouse_buttonInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsItemClicked(<em>ImGui_Context</em> ctx, <em>optional int</em> mouse_buttonIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsItemClicked", <em>ImGui_Context</em> ctx, <em>optional int</em> mouse_buttonIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsItemClicked(<em>ImGui_Context</em> ctx, <em>optional integer</em> mouse_buttonIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> mouse_buttonInOptional) = ImGui_IsItemClicked(ctx, mouse_buttonInOptional)</code></div>
	<p>Is the last item clicked? (e.g. button/node just clicked on)<br>
== IsMouseClicked(mouse_button) &amp;&amp; IsItemHovered().<br>
</p><p>
This is NOT equivalent to the behavior of e.g. Button.<br>
Most widgets have specific reactions based on mouse-up/down state, mouse position etc.</p>
</div>

<div class="function_definition" id="ImGui_IsItemDeactivated">
	<div class="c_func"><code>bool ImGui_IsItemDeactivated(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsItemDeactivated(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsItemDeactivated", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsItemDeactivated(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsItemDeactivated(<em>ImGui_Context</em> ctx)</code></div>
	<p>Was the last item just made inactive (item was previously active).<br>
Useful for Undo/Redo patterns with widgets that require continuous editing.</p>
</div>

<div class="function_definition" id="ImGui_IsItemDeactivatedAfterEdit">
	<div class="c_func"><code>bool ImGui_IsItemDeactivatedAfterEdit(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsItemDeactivatedAfterEdit(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsItemDeactivatedAfterEdit", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsItemDeactivatedAfterEdit(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsItemDeactivatedAfterEdit(<em>ImGui_Context</em> ctx)</code></div>
	<p>Was the last item just made inactive and made a value change when it was<br>
active? (e.g. Slider/Drag moved).<br>
</p><p>
Useful for Undo/Redo patterns with widgets that require continuous editing. Note<br>
that you may get false positives (some widgets such as Combo/ListBox/Selectable<br>
will return true even when clicking an already selected item).</p>
</div>

<div class="function_definition" id="ImGui_IsItemEdited">
	<div class="c_func"><code>bool ImGui_IsItemEdited(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsItemEdited(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsItemEdited", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsItemEdited(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsItemEdited(<em>ImGui_Context</em> ctx)</code></div>
	<p>Did the last item modify its underlying value this frame? or was pressed?<br>
This is generally the same as the "bool" return value of many widgets.</p>
</div>

<div class="function_definition" id="ImGui_IsItemFocused">
	<div class="c_func"><code>bool ImGui_IsItemFocused(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsItemFocused(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsItemFocused", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsItemFocused(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsItemFocused(<em>ImGui_Context</em> ctx)</code></div>
	<p>Is the last item focused for keyboard/gamepad navigation?</p>
</div>

<div class="function_definition" id="ImGui_IsItemHovered">
	<div class="c_func"><code>bool ImGui_IsItemHovered(ImGui_Context* ctx, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsItemHovered(<em>ImGui_Context</em> ctx, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsItemHovered", <em>ImGui_Context</em> ctx, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsItemHovered(<em>ImGui_Context</em> ctx, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> flagsInOptional) = ImGui_IsItemHovered(ctx, flagsInOptional)</code></div>
	<p>Is the last item hovered? (and usable, aka not blocked by a popup, etc.).<br>
See HoveredFlags_* for more options.</p>
</div>

<div class="function_definition" id="ImGui_IsItemToggledOpen">
	<div class="c_func"><code>bool ImGui_IsItemToggledOpen(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsItemToggledOpen(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsItemToggledOpen", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsItemToggledOpen(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsItemToggledOpen(<em>ImGui_Context</em> ctx)</code></div>
	<p>Was the last item open state toggled? Set by TreeNode.</p>
</div>

<div class="function_definition" id="ImGui_IsItemVisible">
	<div class="c_func"><code>bool ImGui_IsItemVisible(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsItemVisible(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsItemVisible", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsItemVisible(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsItemVisible(<em>ImGui_Context</em> ctx)</code></div>
	<p>Is the last item visible? (items may be out of sight because of clipping/scrolling)</p>
</div>

<div class="function_definition" id="ImGui_IsKeyDown">
	<div class="c_func"><code>bool ImGui_IsKeyDown(ImGui_Context* ctx, int key)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsKeyDown(<em>ImGui_Context</em> ctx, <em>int </em>key) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsKeyDown", <em>ImGui_Context</em> ctx, <em>int </em>key) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsKeyDown(<em>ImGui_Context</em> ctx, <em>integer</em> key)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsKeyDown(<em>ImGui_Context</em> ctx, <em>Int</em> key)</code></div>
	<p>Is key being held.</p>
</div>

<div class="function_definition" id="ImGui_IsKeyPressed">
	<div class="c_func"><code>bool ImGui_IsKeyPressed(ImGui_Context* ctx, int key, bool* repeatInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsKeyPressed(<em>ImGui_Context</em> ctx, <em>int </em>key, <em>optional bool</em> repeatIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsKeyPressed", <em>ImGui_Context</em> ctx, <em>int </em>key, <em>optional bool</em> repeatIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsKeyPressed(<em>ImGui_Context</em> ctx, <em>integer</em> key, <em>optional boolean</em> repeatIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> key, <em>Boolean</em> repeatInOptional) = ImGui_IsKeyPressed(ctx, key, repeatInOptional)</code></div>
	<p>Was key pressed (went from !Down to Down)?<br>
If repeat=true, uses ConfigVar_KeyRepeatDelay / ConfigVar_KeyRepeatRate.</p>
</div>

<div class="function_definition" id="ImGui_IsKeyReleased">
	<div class="c_func"><code>bool ImGui_IsKeyReleased(ImGui_Context* ctx, int key)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsKeyReleased(<em>ImGui_Context</em> ctx, <em>int </em>key) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsKeyReleased", <em>ImGui_Context</em> ctx, <em>int </em>key) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsKeyReleased(<em>ImGui_Context</em> ctx, <em>integer</em> key)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsKeyReleased(<em>ImGui_Context</em> ctx, <em>Int</em> key)</code></div>
	<p>Was key released (went from Down to !Down)?</p>
</div>

<div class="function_definition" id="ImGui_IsMouseClicked">
	<div class="c_func"><code>bool ImGui_IsMouseClicked(ImGui_Context* ctx, int button, bool* repeatInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsMouseClicked(<em>ImGui_Context</em> ctx, <em>int </em>button, <em>optional bool</em> repeatIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsMouseClicked", <em>ImGui_Context</em> ctx, <em>int </em>button, <em>optional bool</em> repeatIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsMouseClicked(<em>ImGui_Context</em> ctx, <em>integer</em> button, <em>optional boolean</em> repeatIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> button, <em>Boolean</em> repeatInOptional) = ImGui_IsMouseClicked(ctx, button, repeatInOptional)</code></div>
	<p>Did mouse button clicked? (went from !Down to Down).<br>
Same as GetMouseClickedCount() == 1.</p>
</div>

<div class="function_definition" id="ImGui_IsMouseDoubleClicked">
	<div class="c_func"><code>bool ImGui_IsMouseDoubleClicked(ImGui_Context* ctx, int button)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsMouseDoubleClicked(<em>ImGui_Context</em> ctx, <em>int </em>button) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsMouseDoubleClicked", <em>ImGui_Context</em> ctx, <em>int </em>button) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsMouseDoubleClicked(<em>ImGui_Context</em> ctx, <em>integer</em> button)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsMouseDoubleClicked(<em>ImGui_Context</em> ctx, <em>Int</em> button)</code></div>
	<p>Did mouse button double-clicked? Same as GetMouseClickedCount() == 2.<br>
(Note that a double-click will also report IsMouseClicked() == true)</p>
</div>

<div class="function_definition" id="ImGui_IsMouseDown">
	<div class="c_func"><code>bool ImGui_IsMouseDown(ImGui_Context* ctx, int button)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsMouseDown(<em>ImGui_Context</em> ctx, <em>int </em>button) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsMouseDown", <em>ImGui_Context</em> ctx, <em>int </em>button) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsMouseDown(<em>ImGui_Context</em> ctx, <em>integer</em> button)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsMouseDown(<em>ImGui_Context</em> ctx, <em>Int</em> button)</code></div>
	<p>Is mouse button held?</p>
</div>

<div class="function_definition" id="ImGui_IsMouseDragging">
	<div class="c_func"><code>bool ImGui_IsMouseDragging(ImGui_Context* ctx, int button, double* lock_thresholdInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsMouseDragging(<em>ImGui_Context</em> ctx, <em>int </em>button, <em>optional </em>lock_thresholdIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsMouseDragging", <em>ImGui_Context</em> ctx, <em>int </em>button, <em>optional </em>lock_thresholdIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsMouseDragging(<em>ImGui_Context</em> ctx, <em>integer</em> button, <em>optional number </em>lock_thresholdIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> button, <em>Float</em> lock_thresholdInOptional) = ImGui_IsMouseDragging(ctx, button, lock_thresholdInOptional)</code></div>
	<p>Is mouse dragging? (if lock_threshold &lt; -1.0, uses ConfigVar_MouseDragThreshold)</p>
</div>

<div class="function_definition" id="ImGui_IsMouseHoveringRect">
	<div class="c_func"><code>bool ImGui_IsMouseHoveringRect(ImGui_Context* ctx, double r_min_x, double r_min_y, double r_max_x, double r_max_y, bool* clipInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsMouseHoveringRect(<em>ImGui_Context</em> ctx, r_min_x, r_min_y, r_max_x, r_max_y, <em>optional bool</em> clipIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsMouseHoveringRect", <em>ImGui_Context</em> ctx, r_min_x, r_min_y, r_max_x, r_max_y, <em>optional bool</em> clipIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsMouseHoveringRect(<em>ImGui_Context</em> ctx, <em>number</em> r_min_x, <em>number</em> r_min_y, <em>number</em> r_max_x, <em>number</em> r_max_y, <em>optional boolean</em> clipIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Float</em> r_min_x, <em>Float</em> r_min_y, <em>Float</em> r_max_x, <em>Float</em> r_max_y, <em>Boolean</em> clipInOptional) = ImGui_IsMouseHoveringRect(ctx, r_min_x, r_min_y, r_max_x, r_max_y, clipInOptional)</code></div>
	<p>Is mouse hovering given bounding rect (in screen space).<br>
Clipped by current clipping settings, but disregarding of other consideration<br>
of focus/window ordering/popup-block.</p>
</div>

<div class="function_definition" id="ImGui_IsMousePosValid">
	<div class="c_func"><code>bool ImGui_IsMousePosValid(ImGui_Context* ctx, double* mouse_pos_xInOptional, double* mouse_pos_yInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsMousePosValid(<em>ImGui_Context</em> ctx, <em>optional </em>mouse_pos_xIn, <em>optional </em>mouse_pos_yIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsMousePosValid", <em>ImGui_Context</em> ctx, <em>optional </em>mouse_pos_xIn, <em>optional </em>mouse_pos_yIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsMousePosValid(<em>ImGui_Context</em> ctx, <em>optional number </em>mouse_pos_xIn, <em>optional number </em>mouse_pos_yIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Float</em> mouse_pos_xInOptional, <em>Float</em> mouse_pos_yInOptional) = ImGui_IsMousePosValid(ctx, mouse_pos_xInOptional, mouse_pos_yInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_IsMouseReleased">
	<div class="c_func"><code>bool ImGui_IsMouseReleased(ImGui_Context* ctx, int button)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsMouseReleased(<em>ImGui_Context</em> ctx, <em>int </em>button) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsMouseReleased", <em>ImGui_Context</em> ctx, <em>int </em>button) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsMouseReleased(<em>ImGui_Context</em> ctx, <em>integer</em> button)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsMouseReleased(<em>ImGui_Context</em> ctx, <em>Int</em> button)</code></div>
	<p>Did mouse button released? (went from Down to !Down)</p>
</div>

<div class="function_definition" id="ImGui_IsPopupOpen">
	<div class="c_func"><code>bool ImGui_IsPopupOpen(ImGui_Context* ctx, const char* str_id, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsPopupOpen(<em>ImGui_Context</em> ctx, "str_id", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsPopupOpen", <em>ImGui_Context</em> ctx, "str_id", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsPopupOpen(<em>ImGui_Context</em> ctx, <em>string</em> str_id, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> str_id, <em>Int</em> flagsInOptional) = ImGui_IsPopupOpen(ctx, str_id, flagsInOptional)</code></div>
	<p>Return true if the popup is open at the current BeginPopup level of the<br>
popup stack.<br>
</p><p>
- With PopupFlags_AnyPopupId: return true if any popup is open at the current<br>
  BeginPopup() level of the popup stack.<br>
- With PopupFlags_AnyPopupId + PopupFlags_AnyPopupLevel: return true if any<br>
  popup is open.</p>
</div>

<div class="function_definition" id="ImGui_IsRectVisible">
	<div class="c_func"><code>bool ImGui_IsRectVisible(ImGui_Context* ctx, double size_w, double size_h)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsRectVisible(<em>ImGui_Context</em> ctx, size_w, size_h) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsRectVisible", <em>ImGui_Context</em> ctx, size_w, size_h) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsRectVisible(<em>ImGui_Context</em> ctx, <em>number</em> size_w, <em>number</em> size_h)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsRectVisible(<em>ImGui_Context</em> ctx, <em>Float</em> size_w, <em>Float</em> size_h)</code></div>
	<p>Test if rectangle (of given size, starting from cursor position) is<br>
visible / not clipped.</p>
</div>

<div class="function_definition" id="ImGui_IsRectVisibleEx">
	<div class="c_func"><code>bool ImGui_IsRectVisibleEx(ImGui_Context* ctx, double rect_min_x, double rect_min_y, double rect_max_x, double rect_max_y)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsRectVisibleEx(<em>ImGui_Context</em> ctx, rect_min_x, rect_min_y, rect_max_x, rect_max_y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsRectVisibleEx", <em>ImGui_Context</em> ctx, rect_min_x, rect_min_y, rect_max_x, rect_max_y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsRectVisibleEx(<em>ImGui_Context</em> ctx, <em>number</em> rect_min_x, <em>number</em> rect_min_y, <em>number</em> rect_max_x, <em>number</em> rect_max_y)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsRectVisibleEx(<em>ImGui_Context</em> ctx, <em>Float</em> rect_min_x, <em>Float</em> rect_min_y, <em>Float</em> rect_max_x, <em>Float</em> rect_max_y)</code></div>
	<p>Test if rectangle (in screen space) is visible / not clipped. to perform<br>
coarse clipping on user's side.</p>
</div>

<div class="function_definition" id="ImGui_IsWindowAppearing">
	<div class="c_func"><code>bool ImGui_IsWindowAppearing(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsWindowAppearing(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsWindowAppearing", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsWindowAppearing(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsWindowAppearing(<em>ImGui_Context</em> ctx)</code></div>
	<p>Use after Begin/BeginPopup/BeginPopupModal to tell if a window just opened.</p>
</div>

<div class="function_definition" id="ImGui_IsWindowDocked">
	<div class="c_func"><code>bool ImGui_IsWindowDocked(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsWindowDocked(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsWindowDocked", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsWindowDocked(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_IsWindowDocked(<em>ImGui_Context</em> ctx)</code></div>
	<p>Is current window docked into another window or a REAPER docker?</p>
</div>

<div class="function_definition" id="ImGui_IsWindowFocused">
	<div class="c_func"><code>bool ImGui_IsWindowFocused(ImGui_Context* ctx, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsWindowFocused(<em>ImGui_Context</em> ctx, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsWindowFocused", <em>ImGui_Context</em> ctx, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsWindowFocused(<em>ImGui_Context</em> ctx, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> flagsInOptional) = ImGui_IsWindowFocused(ctx, flagsInOptional)</code></div>
	<p>Is current window focused? or its root/child, depending on flags.<br>
See flags for options.</p>
</div>

<div class="function_definition" id="ImGui_IsWindowHovered">
	<div class="c_func"><code>bool ImGui_IsWindowHovered(ImGui_Context* ctx, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_IsWindowHovered(<em>ImGui_Context</em> ctx, <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_IsWindowHovered", <em>ImGui_Context</em> ctx, <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_IsWindowHovered(<em>ImGui_Context</em> ctx, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> flagsInOptional) = ImGui_IsWindowHovered(ctx, flagsInOptional)</code></div>
	<p>Is current window hovered (and typically: not blocked by a popup/modal)?<br>
See flags for options.</p>
</div>

<div class="function_definition" id="ImGui_Key_0">
	<div class="c_func"><code>int ImGui_Key_0()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_0() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_0") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_0()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_0()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_1">
	<div class="c_func"><code>int ImGui_Key_1()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_1() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_1") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_1()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_1()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_2">
	<div class="c_func"><code>int ImGui_Key_2()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_2() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_2") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_2()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_2()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_3">
	<div class="c_func"><code>int ImGui_Key_3()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_3() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_3") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_3()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_3()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_4">
	<div class="c_func"><code>int ImGui_Key_4()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_4() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_4") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_4()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_4()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_5">
	<div class="c_func"><code>int ImGui_Key_5()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_5() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_5") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_5()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_5()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_6">
	<div class="c_func"><code>int ImGui_Key_6()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_6() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_6") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_6()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_6()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_7">
	<div class="c_func"><code>int ImGui_Key_7()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_7() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_7") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_7()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_7()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_8">
	<div class="c_func"><code>int ImGui_Key_8()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_8() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_8") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_8()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_8()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_9">
	<div class="c_func"><code>int ImGui_Key_9()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_9() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_9") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_9()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_9()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_A">
	<div class="c_func"><code>int ImGui_Key_A()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_A() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_A") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_A()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_A()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Apostrophe">
	<div class="c_func"><code>int ImGui_Key_Apostrophe()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Apostrophe() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Apostrophe") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Apostrophe()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Apostrophe()</code></div>
	<p>'</p>
</div>

<div class="function_definition" id="ImGui_Key_B">
	<div class="c_func"><code>int ImGui_Key_B()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_B() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_B") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_B()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_B()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Backslash">
	<div class="c_func"><code>int ImGui_Key_Backslash()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Backslash() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Backslash") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Backslash()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Backslash()</code></div>
	<p>\</p>
</div>

<div class="function_definition" id="ImGui_Key_Backspace">
	<div class="c_func"><code>int ImGui_Key_Backspace()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Backspace() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Backspace") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Backspace()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Backspace()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_C">
	<div class="c_func"><code>int ImGui_Key_C()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_C() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_C") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_C()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_C()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_CapsLock">
	<div class="c_func"><code>int ImGui_Key_CapsLock()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_CapsLock() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_CapsLock") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_CapsLock()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_CapsLock()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Comma">
	<div class="c_func"><code>int ImGui_Key_Comma()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Comma() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Comma") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Comma()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Comma()</code></div>
	<p>,</p>
</div>

<div class="function_definition" id="ImGui_Key_D">
	<div class="c_func"><code>int ImGui_Key_D()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_D() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_D") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_D()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_D()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Delete">
	<div class="c_func"><code>int ImGui_Key_Delete()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Delete() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Delete") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Delete()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Delete()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_DownArrow">
	<div class="c_func"><code>int ImGui_Key_DownArrow()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_DownArrow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_DownArrow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_DownArrow()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_DownArrow()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_E">
	<div class="c_func"><code>int ImGui_Key_E()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_E() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_E") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_E()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_E()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_End">
	<div class="c_func"><code>int ImGui_Key_End()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_End() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_End") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_End()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_End()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Enter">
	<div class="c_func"><code>int ImGui_Key_Enter()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Enter() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Enter") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Enter()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Enter()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Equal">
	<div class="c_func"><code>int ImGui_Key_Equal()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Equal() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Equal") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Equal()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Equal()</code></div>
	<p>=</p>
</div>

<div class="function_definition" id="ImGui_Key_Escape">
	<div class="c_func"><code>int ImGui_Key_Escape()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Escape() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Escape") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Escape()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Escape()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_F">
	<div class="c_func"><code>int ImGui_Key_F()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_F() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_F") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_F()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_F()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_F1">
	<div class="c_func"><code>int ImGui_Key_F1()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_F1() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_F1") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_F1()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_F1()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_F10">
	<div class="c_func"><code>int ImGui_Key_F10()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_F10() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_F10") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_F10()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_F10()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_F11">
	<div class="c_func"><code>int ImGui_Key_F11()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_F11() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_F11") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_F11()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_F11()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_F12">
	<div class="c_func"><code>int ImGui_Key_F12()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_F12() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_F12") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_F12()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_F12()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_F2">
	<div class="c_func"><code>int ImGui_Key_F2()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_F2() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_F2") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_F2()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_F2()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_F3">
	<div class="c_func"><code>int ImGui_Key_F3()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_F3() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_F3") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_F3()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_F3()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_F4">
	<div class="c_func"><code>int ImGui_Key_F4()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_F4() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_F4") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_F4()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_F4()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_F5">
	<div class="c_func"><code>int ImGui_Key_F5()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_F5() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_F5") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_F5()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_F5()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_F6">
	<div class="c_func"><code>int ImGui_Key_F6()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_F6() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_F6") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_F6()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_F6()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_F7">
	<div class="c_func"><code>int ImGui_Key_F7()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_F7() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_F7") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_F7()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_F7()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_F8">
	<div class="c_func"><code>int ImGui_Key_F8()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_F8() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_F8") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_F8()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_F8()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_F9">
	<div class="c_func"><code>int ImGui_Key_F9()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_F9() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_F9") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_F9()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_F9()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_G">
	<div class="c_func"><code>int ImGui_Key_G()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_G() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_G") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_G()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_G()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_GraveAccent">
	<div class="c_func"><code>int ImGui_Key_GraveAccent()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_GraveAccent() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_GraveAccent") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_GraveAccent()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_GraveAccent()</code></div>
	<p>`</p>
</div>

<div class="function_definition" id="ImGui_Key_H">
	<div class="c_func"><code>int ImGui_Key_H()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_H() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_H") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_H()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_H()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Home">
	<div class="c_func"><code>int ImGui_Key_Home()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Home() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Home") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Home()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Home()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_I">
	<div class="c_func"><code>int ImGui_Key_I()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_I() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_I") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_I()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_I()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Insert">
	<div class="c_func"><code>int ImGui_Key_Insert()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Insert() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Insert") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Insert()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Insert()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_J">
	<div class="c_func"><code>int ImGui_Key_J()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_J() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_J") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_J()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_J()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_K">
	<div class="c_func"><code>int ImGui_Key_K()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_K() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_K") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_K()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_K()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Keypad0">
	<div class="c_func"><code>int ImGui_Key_Keypad0()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Keypad0() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Keypad0") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Keypad0()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Keypad0()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Keypad1">
	<div class="c_func"><code>int ImGui_Key_Keypad1()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Keypad1() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Keypad1") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Keypad1()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Keypad1()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Keypad2">
	<div class="c_func"><code>int ImGui_Key_Keypad2()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Keypad2() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Keypad2") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Keypad2()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Keypad2()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Keypad3">
	<div class="c_func"><code>int ImGui_Key_Keypad3()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Keypad3() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Keypad3") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Keypad3()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Keypad3()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Keypad4">
	<div class="c_func"><code>int ImGui_Key_Keypad4()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Keypad4() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Keypad4") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Keypad4()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Keypad4()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Keypad5">
	<div class="c_func"><code>int ImGui_Key_Keypad5()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Keypad5() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Keypad5") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Keypad5()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Keypad5()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Keypad6">
	<div class="c_func"><code>int ImGui_Key_Keypad6()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Keypad6() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Keypad6") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Keypad6()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Keypad6()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Keypad7">
	<div class="c_func"><code>int ImGui_Key_Keypad7()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Keypad7() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Keypad7") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Keypad7()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Keypad7()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Keypad8">
	<div class="c_func"><code>int ImGui_Key_Keypad8()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Keypad8() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Keypad8") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Keypad8()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Keypad8()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Keypad9">
	<div class="c_func"><code>int ImGui_Key_Keypad9()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Keypad9() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Keypad9") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Keypad9()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Keypad9()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_KeypadAdd">
	<div class="c_func"><code>int ImGui_Key_KeypadAdd()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_KeypadAdd() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_KeypadAdd") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_KeypadAdd()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_KeypadAdd()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_KeypadDecimal">
	<div class="c_func"><code>int ImGui_Key_KeypadDecimal()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_KeypadDecimal() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_KeypadDecimal") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_KeypadDecimal()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_KeypadDecimal()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_KeypadDivide">
	<div class="c_func"><code>int ImGui_Key_KeypadDivide()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_KeypadDivide() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_KeypadDivide") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_KeypadDivide()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_KeypadDivide()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_KeypadEnter">
	<div class="c_func"><code>int ImGui_Key_KeypadEnter()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_KeypadEnter() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_KeypadEnter") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_KeypadEnter()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_KeypadEnter()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_KeypadEqual">
	<div class="c_func"><code>int ImGui_Key_KeypadEqual()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_KeypadEqual() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_KeypadEqual") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_KeypadEqual()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_KeypadEqual()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_KeypadMultiply">
	<div class="c_func"><code>int ImGui_Key_KeypadMultiply()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_KeypadMultiply() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_KeypadMultiply") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_KeypadMultiply()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_KeypadMultiply()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_KeypadSubtract">
	<div class="c_func"><code>int ImGui_Key_KeypadSubtract()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_KeypadSubtract() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_KeypadSubtract") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_KeypadSubtract()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_KeypadSubtract()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_L">
	<div class="c_func"><code>int ImGui_Key_L()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_L() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_L") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_L()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_L()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_LeftAlt">
	<div class="c_func"><code>int ImGui_Key_LeftAlt()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_LeftAlt() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_LeftAlt") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_LeftAlt()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_LeftAlt()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_LeftArrow">
	<div class="c_func"><code>int ImGui_Key_LeftArrow()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_LeftArrow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_LeftArrow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_LeftArrow()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_LeftArrow()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_LeftBracket">
	<div class="c_func"><code>int ImGui_Key_LeftBracket()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_LeftBracket() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_LeftBracket") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_LeftBracket()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_LeftBracket()</code></div>
	<p>[</p>
</div>

<div class="function_definition" id="ImGui_Key_LeftCtrl">
	<div class="c_func"><code>int ImGui_Key_LeftCtrl()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_LeftCtrl() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_LeftCtrl") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_LeftCtrl()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_LeftCtrl()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_LeftShift">
	<div class="c_func"><code>int ImGui_Key_LeftShift()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_LeftShift() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_LeftShift") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_LeftShift()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_LeftShift()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_LeftSuper">
	<div class="c_func"><code>int ImGui_Key_LeftSuper()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_LeftSuper() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_LeftSuper") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_LeftSuper()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_LeftSuper()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_M">
	<div class="c_func"><code>int ImGui_Key_M()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_M() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_M") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_M()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_M()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Menu">
	<div class="c_func"><code>int ImGui_Key_Menu()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Menu() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Menu") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Menu()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Menu()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Minus">
	<div class="c_func"><code>int ImGui_Key_Minus()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Minus() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Minus") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Minus()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Minus()</code></div>
	<p>-</p>
</div>

<div class="function_definition" id="ImGui_Key_MouseLeft">
	<div class="c_func"><code>int ImGui_Key_MouseLeft()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_MouseLeft() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_MouseLeft") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_MouseLeft()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_MouseLeft()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_MouseMiddle">
	<div class="c_func"><code>int ImGui_Key_MouseMiddle()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_MouseMiddle() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_MouseMiddle") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_MouseMiddle()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_MouseMiddle()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_MouseRight">
	<div class="c_func"><code>int ImGui_Key_MouseRight()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_MouseRight() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_MouseRight") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_MouseRight()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_MouseRight()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_MouseWheelX">
	<div class="c_func"><code>int ImGui_Key_MouseWheelX()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_MouseWheelX() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_MouseWheelX") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_MouseWheelX()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_MouseWheelX()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_MouseWheelY">
	<div class="c_func"><code>int ImGui_Key_MouseWheelY()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_MouseWheelY() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_MouseWheelY") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_MouseWheelY()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_MouseWheelY()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_MouseX1">
	<div class="c_func"><code>int ImGui_Key_MouseX1()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_MouseX1() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_MouseX1") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_MouseX1()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_MouseX1()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_MouseX2">
	<div class="c_func"><code>int ImGui_Key_MouseX2()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_MouseX2() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_MouseX2") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_MouseX2()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_MouseX2()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_N">
	<div class="c_func"><code>int ImGui_Key_N()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_N() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_N") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_N()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_N()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_NumLock">
	<div class="c_func"><code>int ImGui_Key_NumLock()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_NumLock() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_NumLock") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_NumLock()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_NumLock()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_O">
	<div class="c_func"><code>int ImGui_Key_O()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_O() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_O") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_O()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_O()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_P">
	<div class="c_func"><code>int ImGui_Key_P()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_P() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_P") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_P()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_P()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_PageDown">
	<div class="c_func"><code>int ImGui_Key_PageDown()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_PageDown() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_PageDown") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_PageDown()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_PageDown()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_PageUp">
	<div class="c_func"><code>int ImGui_Key_PageUp()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_PageUp() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_PageUp") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_PageUp()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_PageUp()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Pause">
	<div class="c_func"><code>int ImGui_Key_Pause()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Pause() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Pause") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Pause()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Pause()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Period">
	<div class="c_func"><code>int ImGui_Key_Period()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Period() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Period") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Period()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Period()</code></div>
	<p>.</p>
</div>

<div class="function_definition" id="ImGui_Key_PrintScreen">
	<div class="c_func"><code>int ImGui_Key_PrintScreen()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_PrintScreen() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_PrintScreen") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_PrintScreen()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_PrintScreen()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Q">
	<div class="c_func"><code>int ImGui_Key_Q()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Q() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Q") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Q()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Q()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_R">
	<div class="c_func"><code>int ImGui_Key_R()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_R() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_R") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_R()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_R()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_RightAlt">
	<div class="c_func"><code>int ImGui_Key_RightAlt()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_RightAlt() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_RightAlt") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_RightAlt()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_RightAlt()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_RightArrow">
	<div class="c_func"><code>int ImGui_Key_RightArrow()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_RightArrow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_RightArrow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_RightArrow()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_RightArrow()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_RightBracket">
	<div class="c_func"><code>int ImGui_Key_RightBracket()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_RightBracket() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_RightBracket") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_RightBracket()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_RightBracket()</code></div>
	<p>]</p>
</div>

<div class="function_definition" id="ImGui_Key_RightCtrl">
	<div class="c_func"><code>int ImGui_Key_RightCtrl()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_RightCtrl() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_RightCtrl") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_RightCtrl()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_RightCtrl()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_RightShift">
	<div class="c_func"><code>int ImGui_Key_RightShift()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_RightShift() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_RightShift") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_RightShift()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_RightShift()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_RightSuper">
	<div class="c_func"><code>int ImGui_Key_RightSuper()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_RightSuper() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_RightSuper") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_RightSuper()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_RightSuper()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_S">
	<div class="c_func"><code>int ImGui_Key_S()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_S() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_S") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_S()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_S()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_ScrollLock">
	<div class="c_func"><code>int ImGui_Key_ScrollLock()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_ScrollLock() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_ScrollLock") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_ScrollLock()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_ScrollLock()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Semicolon">
	<div class="c_func"><code>int ImGui_Key_Semicolon()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Semicolon() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Semicolon") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Semicolon()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Semicolon()</code></div>
	<p>;</p>
</div>

<div class="function_definition" id="ImGui_Key_Slash">
	<div class="c_func"><code>int ImGui_Key_Slash()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Slash() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Slash") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Slash()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Slash()</code></div>
	<p>/</p>
</div>

<div class="function_definition" id="ImGui_Key_Space">
	<div class="c_func"><code>int ImGui_Key_Space()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Space() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Space") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Space()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Space()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_T">
	<div class="c_func"><code>int ImGui_Key_T()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_T() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_T") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_T()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_T()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Tab">
	<div class="c_func"><code>int ImGui_Key_Tab()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Tab() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Tab") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Tab()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Tab()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_U">
	<div class="c_func"><code>int ImGui_Key_U()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_U() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_U") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_U()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_U()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_UpArrow">
	<div class="c_func"><code>int ImGui_Key_UpArrow()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_UpArrow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_UpArrow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_UpArrow()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_UpArrow()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_V">
	<div class="c_func"><code>int ImGui_Key_V()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_V() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_V") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_V()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_V()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_W">
	<div class="c_func"><code>int ImGui_Key_W()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_W() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_W") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_W()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_W()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_X">
	<div class="c_func"><code>int ImGui_Key_X()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_X() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_X") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_X()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_X()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Y">
	<div class="c_func"><code>int ImGui_Key_Y()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Y() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Y") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Y()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Y()</code></div>
</div>

<div class="function_definition" id="ImGui_Key_Z">
	<div class="c_func"><code>int ImGui_Key_Z()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Key_Z() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Key_Z") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Key_Z()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Key_Z()</code></div>
</div>

<div class="function_definition" id="ImGui_LabelText">
	<div class="c_func"><code>void ImGui_LabelText(ImGui_Context* ctx, const char* label, const char* text)</code></div>
	<div class="e_func"><code>ImGui_LabelText(<em>ImGui_Context</em> ctx, "label", "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_LabelText", <em>ImGui_Context</em> ctx, "label", "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_LabelText(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>string</em> text)</code></div>
	<div class="p_func"><code>ImGui_LabelText(<em>ImGui_Context</em> ctx, <em>String</em> label, <em>String</em> text)</code></div>
	<p>Display text+label aligned the same way as value+label widgets</p>
</div>

<div class="function_definition" id="ImGui_ListBox">
	<div class="c_func"><code>bool ImGui_ListBox(ImGui_Context* ctx, const char* label, int* current_itemInOut, const char* items, int items_sz, int* height_in_itemsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_ListBox(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>current_item, "items", <em>optional int</em> height_in_itemsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_ListBox", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>current_item, "items", <em>optional int</em> height_in_itemsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>current_item = reaper.ImGui_ListBox(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>current_item, <em>string</em> items, <em>optional integer</em> height_in_itemsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> current_itemInOut, <em>String</em> items, <em>Int</em> items_sz, <em>Int</em> height_in_itemsInOptional) = ImGui_ListBox(ctx, label, current_itemInOut, items, items_sz, height_in_itemsInOptional)</code></div>
	<p>This is an helper over BeginListBox/EndListBox for convenience purpose.<br>
</p><p>
Each item must be null-terminated (requires REAPER v6.44 or newer for EEL and Lua).</p>
</div>

<div class="function_definition" id="ImGui_ListClipper_Begin">
	<div class="c_func"><code>void ImGui_ListClipper_Begin(ImGui_ListClipper* clipper, int items_count, double* items_heightInOptional)</code></div>
	<div class="e_func"><code>ImGui_ListClipper_Begin(<em>ImGui_ListClipper</em> clipper, <em>int </em>items_count, <em>optional </em>items_heightIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ListClipper_Begin", <em>ImGui_ListClipper</em> clipper, <em>int </em>items_count, <em>optional </em>items_heightIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_ListClipper_Begin(<em>ImGui_ListClipper</em> clipper, <em>integer</em> items_count, <em>optional number </em>items_heightIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_ListClipper</em> clipper, <em>Int</em> items_count, <em>Float</em> items_heightInOptional) = ImGui_ListClipper_Begin(clipper, items_count, items_heightInOptional)</code></div>
	<p>- items_count: Use INT_MAX if you don't know how many items you have<br>
(in which case the cursor won't be advanced in the final step)<br>
- items_height: Use -1.0 to be calculated automatically on first step.<br>
  Otherwise pass in the distance between your items, typically<br>
  GetTextLineHeightWithSpacing or GetFrameHeightWithSpacing.</p>
</div>

<div class="function_definition" id="ImGui_ListClipper_End">
	<div class="c_func"><code>void ImGui_ListClipper_End(ImGui_ListClipper* clipper)</code></div>
	<div class="e_func"><code>ImGui_ListClipper_End(<em>ImGui_ListClipper</em> clipper) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ListClipper_End", <em>ImGui_ListClipper</em> clipper) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_ListClipper_End(<em>ImGui_ListClipper</em> clipper)</code></div>
	<div class="p_func"><code>ImGui_ListClipper_End(<em>ImGui_ListClipper</em> clipper)</code></div>
	<p>Automatically called on the last call of ListClipper_Step that returns false.</p>
</div>

<div class="function_definition" id="ImGui_ListClipper_ForceDisplayRangeByIndices">
	<div class="c_func"><code>void ImGui_ListClipper_ForceDisplayRangeByIndices(ImGui_ListClipper* clipper, int item_min, int item_max)</code></div>
	<div class="e_func"><code>ImGui_ListClipper_ForceDisplayRangeByIndices(<em>ImGui_ListClipper</em> clipper, <em>int </em>item_min, <em>int </em>item_max) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ListClipper_ForceDisplayRangeByIndices", <em>ImGui_ListClipper</em> clipper, <em>int </em>item_min, <em>int </em>item_max) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_ListClipper_ForceDisplayRangeByIndices(<em>ImGui_ListClipper</em> clipper, <em>integer</em> item_min, <em>integer</em> item_max)</code></div>
	<div class="p_func"><code>ImGui_ListClipper_ForceDisplayRangeByIndices(<em>ImGui_ListClipper</em> clipper, <em>Int</em> item_min, <em>Int</em> item_max)</code></div>
	<p>Call ListClipper_ForceDisplayRangeByIndices before first call to<br>
ListClipper_Step if you need a range of items to be displayed regardless of<br>
visibility.<br>
</p><p>
item_max is exclusive e.g. use (42, 42+1) to make item 42 always visible BUT due<br>
to alignment/padding of certain items it is likely that an extra item may be<br>
included on either end of the display range.</p>
</div>

<div class="function_definition" id="ImGui_ListClipper_GetDisplayRange">
	<div class="c_func"><code>void ImGui_ListClipper_GetDisplayRange(ImGui_ListClipper* clipper, int* display_startOut, int* display_endOut)</code></div>
	<div class="e_func"><code>ImGui_ListClipper_GetDisplayRange(<em>ImGui_ListClipper</em> clipper, <em>int &amp;</em>display_start, <em>int &amp;</em>display_end) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ListClipper_GetDisplayRange", <em>ImGui_ListClipper</em> clipper, <em>int &amp;</em>display_start, <em>int &amp;</em>display_end) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer </em>display_start, <em>integer </em>display_end = reaper.ImGui_ListClipper_GetDisplayRange(<em>ImGui_ListClipper</em> clipper)</code></div>
	<div class="p_func"><code>(<em>ImGui_ListClipper</em> clipper, <em>Int</em> display_startOut, <em>Int</em> display_endOut) = ImGui_ListClipper_GetDisplayRange(clipper, display_startOut, display_endOut)</code></div>
</div>

<div class="function_definition" id="ImGui_ListClipper_Step">
	<div class="c_func"><code>bool ImGui_ListClipper_Step(ImGui_ListClipper* clipper)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_ListClipper_Step(<em>ImGui_ListClipper</em> clipper) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_ListClipper_Step", <em>ImGui_ListClipper</em> clipper) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_ListClipper_Step(<em>ImGui_ListClipper</em> clipper)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_ListClipper_Step(<em>ImGui_ListClipper</em> clipper)</code></div>
	<p>Call until it returns false. The display_start/display_end fields from<br>
ListClipper_GetDisplayRange will be set and you can process/draw those items.</p>
</div>

<div class="function_definition" id="ImGui_LogFinish">
	<div class="c_func"><code>void ImGui_LogFinish(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_LogFinish(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_LogFinish", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_LogFinish(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_LogFinish(<em>ImGui_Context</em> ctx)</code></div>
	<p>Stop logging (close file, etc.)</p>
</div>

<div class="function_definition" id="ImGui_LogText">
	<div class="c_func"><code>void ImGui_LogText(ImGui_Context* ctx, const char* text)</code></div>
	<div class="e_func"><code>ImGui_LogText(<em>ImGui_Context</em> ctx, "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_LogText", <em>ImGui_Context</em> ctx, "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_LogText(<em>ImGui_Context</em> ctx, <em>string</em> text)</code></div>
	<div class="p_func"><code>ImGui_LogText(<em>ImGui_Context</em> ctx, <em>String</em> text)</code></div>
	<p>Pass text data straight to log (without being displayed)</p>
</div>

<div class="function_definition" id="ImGui_LogToClipboard">
	<div class="c_func"><code>void ImGui_LogToClipboard(ImGui_Context* ctx, int* auto_open_depthInOptional)</code></div>
	<div class="e_func"><code>ImGui_LogToClipboard(<em>ImGui_Context</em> ctx, <em>optional int</em> auto_open_depthIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_LogToClipboard", <em>ImGui_Context</em> ctx, <em>optional int</em> auto_open_depthIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_LogToClipboard(<em>ImGui_Context</em> ctx, <em>optional integer</em> auto_open_depthIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Int</em> auto_open_depthInOptional) = ImGui_LogToClipboard(ctx, auto_open_depthInOptional)</code></div>
	<p>Start logging all text output from the interface to the OS clipboard.<br>
See also SetClipboardText.</p>
</div>

<div class="function_definition" id="ImGui_LogToFile">
	<div class="c_func"><code>void ImGui_LogToFile(ImGui_Context* ctx, int* auto_open_depthInOptional, const char* filenameInOptional)</code></div>
	<div class="e_func"><code>ImGui_LogToFile(<em>ImGui_Context</em> ctx, <em>optional int</em> auto_open_depthIn, <em>optional </em>"filenameIn") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_LogToFile", <em>ImGui_Context</em> ctx, <em>optional int</em> auto_open_depthIn, <em>optional </em>"filenameIn") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_LogToFile(<em>ImGui_Context</em> ctx, <em>optional integer</em> auto_open_depthIn, <em>optional </em><em>string</em> filenameIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Int</em> auto_open_depthInOptional, <em>String</em> filenameInOptional) = ImGui_LogToFile(ctx, auto_open_depthInOptional, filenameInOptional)</code></div>
	<p>Start logging all text output from the interface to a file.<br>
The data is saved to $resource_path/imgui_log.txt if filename is nil.</p>
</div>

<div class="function_definition" id="ImGui_LogToTTY">
	<div class="c_func"><code>void ImGui_LogToTTY(ImGui_Context* ctx, int* auto_open_depthInOptional)</code></div>
	<div class="e_func"><code>ImGui_LogToTTY(<em>ImGui_Context</em> ctx, <em>optional int</em> auto_open_depthIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_LogToTTY", <em>ImGui_Context</em> ctx, <em>optional int</em> auto_open_depthIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_LogToTTY(<em>ImGui_Context</em> ctx, <em>optional integer</em> auto_open_depthIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Int</em> auto_open_depthInOptional) = ImGui_LogToTTY(ctx, auto_open_depthInOptional)</code></div>
	<p>Start logging all text output from the interface to the TTY (stdout).</p>
</div>

<div class="function_definition" id="ImGui_MenuItem">
	<div class="c_func"><code>bool ImGui_MenuItem(ImGui_Context* ctx, const char* label, const char* shortcutInOptional, bool* p_selectedInOutOptional, bool* enabledInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_MenuItem(<em>ImGui_Context</em> ctx, "label", <em>optional </em>"shortcutIn", <em>optional bool &amp;</em>p_selected, <em>optional bool</em> enabledIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_MenuItem", <em>ImGui_Context</em> ctx, "label", <em>optional </em>"shortcutIn", <em>optional bool &amp;</em>p_selected, <em>optional bool</em> enabledIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>optional boolean </em>p_selected = reaper.ImGui_MenuItem(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>optional </em><em>string</em> shortcutIn, <em>optional boolean </em>p_selected, <em>optional boolean</em> enabledIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>String</em> shortcutInOptional, <em>Boolean</em> p_selectedInOutOptional, <em>Boolean</em> enabledInOptional) = ImGui_MenuItem(ctx, label, shortcutInOptional, p_selectedInOutOptional, enabledInOptional)</code></div>
	<p>Return true when activated. Shortcuts are displayed for convenience but not<br>
processed by ImGui at the moment. Toggle state is written to 'selected' when<br>
provided.</p>
</div>

<div class="function_definition" id="ImGui_Mod_Alt">
	<div class="c_func"><code>int ImGui_Mod_Alt()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Mod_Alt() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Mod_Alt") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Mod_Alt()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Mod_Alt()</code></div>
</div>

<div class="function_definition" id="ImGui_Mod_Ctrl">
	<div class="c_func"><code>int ImGui_Mod_Ctrl()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Mod_Ctrl() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Mod_Ctrl") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Mod_Ctrl()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Mod_Ctrl()</code></div>
</div>

<div class="function_definition" id="ImGui_Mod_None">
	<div class="c_func"><code>int ImGui_Mod_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Mod_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Mod_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Mod_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Mod_None()</code></div>
</div>

<div class="function_definition" id="ImGui_Mod_Shift">
	<div class="c_func"><code>int ImGui_Mod_Shift()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Mod_Shift() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Mod_Shift") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Mod_Shift()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Mod_Shift()</code></div>
</div>

<div class="function_definition" id="ImGui_Mod_Shortcut">
	<div class="c_func"><code>int ImGui_Mod_Shortcut()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Mod_Shortcut() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Mod_Shortcut") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Mod_Shortcut()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Mod_Shortcut()</code></div>
	<p>Alias for Mod_Ctrl on Linux and Windows and Mod_Super on macOS (Cmd key).</p>
</div>

<div class="function_definition" id="ImGui_Mod_Super">
	<div class="c_func"><code>int ImGui_Mod_Super()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_Mod_Super() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_Mod_Super") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_Mod_Super()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_Mod_Super()</code></div>
</div>

<div class="function_definition" id="ImGui_MouseButton_Left">
	<div class="c_func"><code>int ImGui_MouseButton_Left()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_MouseButton_Left() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_MouseButton_Left") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_MouseButton_Left()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_MouseButton_Left()</code></div>
</div>

<div class="function_definition" id="ImGui_MouseButton_Middle">
	<div class="c_func"><code>int ImGui_MouseButton_Middle()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_MouseButton_Middle() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_MouseButton_Middle") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_MouseButton_Middle()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_MouseButton_Middle()</code></div>
</div>

<div class="function_definition" id="ImGui_MouseButton_Right">
	<div class="c_func"><code>int ImGui_MouseButton_Right()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_MouseButton_Right() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_MouseButton_Right") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_MouseButton_Right()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_MouseButton_Right()</code></div>
</div>

<div class="function_definition" id="ImGui_MouseCursor_Arrow">
	<div class="c_func"><code>int ImGui_MouseCursor_Arrow()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_MouseCursor_Arrow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_MouseCursor_Arrow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_MouseCursor_Arrow()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_MouseCursor_Arrow()</code></div>
</div>

<div class="function_definition" id="ImGui_MouseCursor_Hand">
	<div class="c_func"><code>int ImGui_MouseCursor_Hand()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_MouseCursor_Hand() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_MouseCursor_Hand") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_MouseCursor_Hand()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_MouseCursor_Hand()</code></div>
	<p>(Unused by Dear ImGui functions. Use for e.g. hyperlinks)</p>
</div>

<div class="function_definition" id="ImGui_MouseCursor_None">
	<div class="c_func"><code>int ImGui_MouseCursor_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_MouseCursor_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_MouseCursor_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_MouseCursor_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_MouseCursor_None()</code></div>
</div>

<div class="function_definition" id="ImGui_MouseCursor_NotAllowed">
	<div class="c_func"><code>int ImGui_MouseCursor_NotAllowed()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_MouseCursor_NotAllowed() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_MouseCursor_NotAllowed") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_MouseCursor_NotAllowed()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_MouseCursor_NotAllowed()</code></div>
	<p>When hovering something with disallowed interaction. Usually a crossed circle.</p>
</div>

<div class="function_definition" id="ImGui_MouseCursor_ResizeAll">
	<div class="c_func"><code>int ImGui_MouseCursor_ResizeAll()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_MouseCursor_ResizeAll() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_MouseCursor_ResizeAll") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_MouseCursor_ResizeAll()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_MouseCursor_ResizeAll()</code></div>
	<p>(Unused by Dear ImGui functions)</p>
</div>

<div class="function_definition" id="ImGui_MouseCursor_ResizeEW">
	<div class="c_func"><code>int ImGui_MouseCursor_ResizeEW()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_MouseCursor_ResizeEW() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_MouseCursor_ResizeEW") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_MouseCursor_ResizeEW()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_MouseCursor_ResizeEW()</code></div>
	<p>When hovering over a vertical border or a column.</p>
</div>

<div class="function_definition" id="ImGui_MouseCursor_ResizeNESW">
	<div class="c_func"><code>int ImGui_MouseCursor_ResizeNESW()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_MouseCursor_ResizeNESW() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_MouseCursor_ResizeNESW") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_MouseCursor_ResizeNESW()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_MouseCursor_ResizeNESW()</code></div>
	<p>When hovering over the bottom-left corner of a window.</p>
</div>

<div class="function_definition" id="ImGui_MouseCursor_ResizeNS">
	<div class="c_func"><code>int ImGui_MouseCursor_ResizeNS()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_MouseCursor_ResizeNS() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_MouseCursor_ResizeNS") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_MouseCursor_ResizeNS()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_MouseCursor_ResizeNS()</code></div>
	<p>When hovering over a horizontal border.</p>
</div>

<div class="function_definition" id="ImGui_MouseCursor_ResizeNWSE">
	<div class="c_func"><code>int ImGui_MouseCursor_ResizeNWSE()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_MouseCursor_ResizeNWSE() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_MouseCursor_ResizeNWSE") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_MouseCursor_ResizeNWSE()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_MouseCursor_ResizeNWSE()</code></div>
	<p>When hovering over the bottom-right corner of a window.</p>
</div>

<div class="function_definition" id="ImGui_MouseCursor_TextInput">
	<div class="c_func"><code>int ImGui_MouseCursor_TextInput()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_MouseCursor_TextInput() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_MouseCursor_TextInput") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_MouseCursor_TextInput()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_MouseCursor_TextInput()</code></div>
	<p>When hovering over InputText, etc.</p>
</div>

<div class="function_definition" id="ImGui_NewLine">
	<div class="c_func"><code>void ImGui_NewLine(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_NewLine(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_NewLine", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_NewLine(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_NewLine(<em>ImGui_Context</em> ctx)</code></div>
	<p>Undo a SameLine() or force a new line when in a horizontal-layout context.</p>
</div>

<div class="function_definition" id="ImGui_NumericLimits_Double">
	<div class="c_func"><code>void ImGui_NumericLimits_Double(double* minOut, double* maxOut)</code></div>
	<div class="e_func"><code>ImGui_NumericLimits_Double(<em>&amp;</em>min, <em>&amp;</em>max) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_NumericLimits_Double", <em>&amp;</em>min, <em>&amp;</em>max) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>min, <em>number </em>max = reaper.ImGui_NumericLimits_Double()</code></div>
	<div class="p_func"><code>(<em>Float</em> minOut, <em>Float</em> maxOut) = ImGui_NumericLimits_Double(minOut, maxOut)</code></div>
	<p>Returns DBL_MIN and DBL_MAX for this system.</p>
</div>

<div class="function_definition" id="ImGui_NumericLimits_Float">
	<div class="c_func"><code>void ImGui_NumericLimits_Float(double* minOut, double* maxOut)</code></div>
	<div class="e_func"><code>ImGui_NumericLimits_Float(<em>&amp;</em>min, <em>&amp;</em>max) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_NumericLimits_Float", <em>&amp;</em>min, <em>&amp;</em>max) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>min, <em>number </em>max = reaper.ImGui_NumericLimits_Float()</code></div>
	<div class="p_func"><code>(<em>Float</em> minOut, <em>Float</em> maxOut) = ImGui_NumericLimits_Float(minOut, maxOut)</code></div>
	<p>Returns FLT_MIN and FLT_MAX for this system.</p>
</div>

<div class="function_definition" id="ImGui_NumericLimits_Int">
	<div class="c_func"><code>void ImGui_NumericLimits_Int(int* minOut, int* maxOut)</code></div>
	<div class="e_func"><code>ImGui_NumericLimits_Int(<em>int &amp;</em>min, <em>int &amp;</em>max) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_NumericLimits_Int", <em>int &amp;</em>min, <em>int &amp;</em>max) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer </em>min, <em>integer </em>max = reaper.ImGui_NumericLimits_Int()</code></div>
	<div class="p_func"><code>(<em>Int</em> minOut, <em>Int</em> maxOut) = ImGui_NumericLimits_Int(minOut, maxOut)</code></div>
	<p>Returns INT_MIN and INT_MAX for this system.</p>
</div>

<div class="function_definition" id="ImGui_OpenPopup">
	<div class="c_func"><code>void ImGui_OpenPopup(ImGui_Context* ctx, const char* str_id, int* popup_flagsInOptional)</code></div>
	<div class="e_func"><code>ImGui_OpenPopup(<em>ImGui_Context</em> ctx, "str_id", <em>optional int</em> popup_flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_OpenPopup", <em>ImGui_Context</em> ctx, "str_id", <em>optional int</em> popup_flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_OpenPopup(<em>ImGui_Context</em> ctx, <em>string</em> str_id, <em>optional integer</em> popup_flagsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>String</em> str_id, <em>Int</em> popup_flagsInOptional) = ImGui_OpenPopup(ctx, str_id, popup_flagsInOptional)</code></div>
	<p>Set popup state to open (don't call every frame!).<br>
ImGuiPopupFlags are available for opening options.<br>
</p><p>
If not modal: they can be closed by clicking anywhere outside them, or by<br>
pressing ESCAPE.<br>
</p><p>
Use PopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's<br>
already one at the same level.</p>
</div>

<div class="function_definition" id="ImGui_OpenPopupOnItemClick">
	<div class="c_func"><code>void ImGui_OpenPopupOnItemClick(ImGui_Context* ctx, const char* str_idInOptional, int* popup_flagsInOptional)</code></div>
	<div class="e_func"><code>ImGui_OpenPopupOnItemClick(<em>ImGui_Context</em> ctx, <em>optional </em>"str_idIn", <em>optional int</em> popup_flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_OpenPopupOnItemClick", <em>ImGui_Context</em> ctx, <em>optional </em>"str_idIn", <em>optional int</em> popup_flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_OpenPopupOnItemClick(<em>ImGui_Context</em> ctx, <em>optional </em><em>string</em> str_idIn, <em>optional integer</em> popup_flagsIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>String</em> str_idInOptional, <em>Int</em> popup_flagsInOptional) = ImGui_OpenPopupOnItemClick(ctx, str_idInOptional, popup_flagsInOptional)</code></div>
	<p>Helper to open popup when clicked on last item. return true when just opened.<br>
(Note: actually triggers on the mouse _released_ event to be consistent with<br>
popup behaviors.)</p>
</div>

<div class="function_definition" id="ImGui_PlotHistogram">
	<div class="c_func"><code>void ImGui_PlotHistogram(ImGui_Context* ctx, const char* label, reaper_array* values, int* values_offsetInOptional, const char* overlay_textInOptional, double* scale_minInOptional, double* scale_maxInOptional, double* graph_size_wInOptional, double* graph_size_hInOptional)</code></div>
	<div class="e_func"><code>ImGui_PlotHistogram(<em>ImGui_Context</em> ctx, "label", <em>reaper_array</em> values, <em>optional int</em> values_offsetIn, <em>optional </em>"overlay_textIn", <em>optional </em>scale_minIn, <em>optional </em>scale_maxIn, <em>optional </em>graph_size_wIn, <em>optional </em>graph_size_hIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PlotHistogram", <em>ImGui_Context</em> ctx, "label", <em>reaper_array</em> values, <em>optional int</em> values_offsetIn, <em>optional </em>"overlay_textIn", <em>optional </em>scale_minIn, <em>optional </em>scale_maxIn, <em>optional </em>graph_size_wIn, <em>optional </em>graph_size_hIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PlotHistogram(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>reaper_array</em> values, <em>optional integer</em> values_offsetIn, <em>optional </em><em>string</em> overlay_textIn, <em>optional number </em>scale_minIn, <em>optional number </em>scale_maxIn, <em>optional number </em>graph_size_wIn, <em>optional number </em>graph_size_hIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>String</em> label, <em>reaper_array</em> values, <em>Int</em> values_offsetInOptional, <em>String</em> overlay_textInOptional, <em>Float</em> scale_minInOptional, <em>Float</em> scale_maxInOptional, <em>Float</em> graph_size_wInOptional, <em>Float</em> graph_size_hInOptional) = ImGui_PlotHistogram(ctx, label, values, values_offsetInOptional, overlay_textInOptional, scale_minInOptional, scale_maxInOptional, graph_size_wInOptional, graph_size_hInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_PlotLines">
	<div class="c_func"><code>void ImGui_PlotLines(ImGui_Context* ctx, const char* label, reaper_array* values, int* values_offsetInOptional, const char* overlay_textInOptional, double* scale_minInOptional, double* scale_maxInOptional, double* graph_size_wInOptional, double* graph_size_hInOptional)</code></div>
	<div class="e_func"><code>ImGui_PlotLines(<em>ImGui_Context</em> ctx, "label", <em>reaper_array</em> values, <em>optional int</em> values_offsetIn, <em>optional </em>"overlay_textIn", <em>optional </em>scale_minIn, <em>optional </em>scale_maxIn, <em>optional </em>graph_size_wIn, <em>optional </em>graph_size_hIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PlotLines", <em>ImGui_Context</em> ctx, "label", <em>reaper_array</em> values, <em>optional int</em> values_offsetIn, <em>optional </em>"overlay_textIn", <em>optional </em>scale_minIn, <em>optional </em>scale_maxIn, <em>optional </em>graph_size_wIn, <em>optional </em>graph_size_hIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PlotLines(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>reaper_array</em> values, <em>optional integer</em> values_offsetIn, <em>optional </em><em>string</em> overlay_textIn, <em>optional number </em>scale_minIn, <em>optional number </em>scale_maxIn, <em>optional number </em>graph_size_wIn, <em>optional number </em>graph_size_hIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>String</em> label, <em>reaper_array</em> values, <em>Int</em> values_offsetInOptional, <em>String</em> overlay_textInOptional, <em>Float</em> scale_minInOptional, <em>Float</em> scale_maxInOptional, <em>Float</em> graph_size_wInOptional, <em>Float</em> graph_size_hInOptional) = ImGui_PlotLines(ctx, label, values, values_offsetInOptional, overlay_textInOptional, scale_minInOptional, scale_maxInOptional, graph_size_wInOptional, graph_size_hInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_PointConvertNative">
	<div class="c_func"><code>void ImGui_PointConvertNative(ImGui_Context* ctx, double* xInOut, double* yInOut, bool* to_nativeInOptional)</code></div>
	<div class="e_func"><code>ImGui_PointConvertNative(<em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y, <em>optional bool</em> to_nativeIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PointConvertNative", <em>ImGui_Context</em> ctx, <em>&amp;</em>x, <em>&amp;</em>y, <em>optional bool</em> to_nativeIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_PointConvertNative(<em>ImGui_Context</em> ctx, <em>number </em>x, <em>number </em>y, <em>optional boolean</em> to_nativeIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> xInOut, <em>Float</em> yInOut, <em>Boolean</em> to_nativeInOptional) = ImGui_PointConvertNative(ctx, xInOut, yInOut, to_nativeInOptional)</code></div>
	<p>Convert a position from the current platform's native coordinate position<br>
system to ReaImGui global coordinates (or vice versa).<br>
</p><p>
This effectively flips the Y coordinate on macOS and applies HiDPI scaling on<br>
Windows and Linux.</p>
</div>

<div class="function_definition" id="ImGui_PopButtonRepeat">
	<div class="c_func"><code>void ImGui_PopButtonRepeat(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_PopButtonRepeat(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PopButtonRepeat", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PopButtonRepeat(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_PopButtonRepeat(<em>ImGui_Context</em> ctx)</code></div>
	<p>See PushButtonRepeat</p>
</div>

<div class="function_definition" id="ImGui_PopClipRect">
	<div class="c_func"><code>void ImGui_PopClipRect(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_PopClipRect(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PopClipRect", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PopClipRect(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_PopClipRect(<em>ImGui_Context</em> ctx)</code></div>
	<p>See PushClipRect</p>
</div>

<div class="function_definition" id="ImGui_PopFont">
	<div class="c_func"><code>void ImGui_PopFont(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_PopFont(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PopFont", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PopFont(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_PopFont(<em>ImGui_Context</em> ctx)</code></div>
	<p>See PushFont.</p>
</div>

<div class="function_definition" id="ImGui_PopID">
	<div class="c_func"><code>void ImGui_PopID(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_PopID(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PopID", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PopID(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_PopID(<em>ImGui_Context</em> ctx)</code></div>
	<p>Pop from the ID stack.</p>
</div>

<div class="function_definition" id="ImGui_PopItemWidth">
	<div class="c_func"><code>void ImGui_PopItemWidth(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_PopItemWidth(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PopItemWidth", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PopItemWidth(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_PopItemWidth(<em>ImGui_Context</em> ctx)</code></div>
	<p>See PushItemWidth</p>
</div>

<div class="function_definition" id="ImGui_PopStyleColor">
	<div class="c_func"><code>void ImGui_PopStyleColor(ImGui_Context* ctx, int* countInOptional)</code></div>
	<div class="e_func"><code>ImGui_PopStyleColor(<em>ImGui_Context</em> ctx, <em>optional int</em> countIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PopStyleColor", <em>ImGui_Context</em> ctx, <em>optional int</em> countIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PopStyleColor(<em>ImGui_Context</em> ctx, <em>optional integer</em> countIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Int</em> countInOptional) = ImGui_PopStyleColor(ctx, countInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_PopStyleVar">
	<div class="c_func"><code>void ImGui_PopStyleVar(ImGui_Context* ctx, int* countInOptional)</code></div>
	<div class="e_func"><code>ImGui_PopStyleVar(<em>ImGui_Context</em> ctx, <em>optional int</em> countIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PopStyleVar", <em>ImGui_Context</em> ctx, <em>optional int</em> countIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PopStyleVar(<em>ImGui_Context</em> ctx, <em>optional integer</em> countIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Int</em> countInOptional) = ImGui_PopStyleVar(ctx, countInOptional)</code></div>
	<p>Reset a style variable.</p>
</div>

<div class="function_definition" id="ImGui_PopTabStop">
	<div class="c_func"><code>void ImGui_PopTabStop(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_PopTabStop(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PopTabStop", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PopTabStop(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_PopTabStop(<em>ImGui_Context</em> ctx)</code></div>
	<p>See PushTabStop</p>
</div>

<div class="function_definition" id="ImGui_PopTextWrapPos">
	<div class="c_func"><code>void ImGui_PopTextWrapPos(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_PopTextWrapPos(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PopTextWrapPos", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PopTextWrapPos(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_PopTextWrapPos(<em>ImGui_Context</em> ctx)</code></div>
</div>

<div class="function_definition" id="ImGui_PopupFlags_AnyPopup">
	<div class="c_func"><code>int ImGui_PopupFlags_AnyPopup()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_PopupFlags_AnyPopup() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_PopupFlags_AnyPopup") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_PopupFlags_AnyPopup()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_PopupFlags_AnyPopup()</code></div>
	<p>PopupFlags_AnyPopupId | PopupFlags_AnyPopupLevel</p>
</div>

<div class="function_definition" id="ImGui_PopupFlags_AnyPopupId">
	<div class="c_func"><code>int ImGui_PopupFlags_AnyPopupId()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_PopupFlags_AnyPopupId() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_PopupFlags_AnyPopupId") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_PopupFlags_AnyPopupId()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_PopupFlags_AnyPopupId()</code></div>
	<p>For IsPopupOpen: ignore the str_id parameter and test for any popup.</p>
</div>

<div class="function_definition" id="ImGui_PopupFlags_AnyPopupLevel">
	<div class="c_func"><code>int ImGui_PopupFlags_AnyPopupLevel()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_PopupFlags_AnyPopupLevel() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_PopupFlags_AnyPopupLevel") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_PopupFlags_AnyPopupLevel()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_PopupFlags_AnyPopupLevel()</code></div>
	<p>For IsPopupOpen: search/test at any level of the popup stack<br>
  (default test in the current level).</p>
</div>

<div class="function_definition" id="ImGui_PopupFlags_MouseButtonLeft">
	<div class="c_func"><code>int ImGui_PopupFlags_MouseButtonLeft()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_PopupFlags_MouseButtonLeft() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_PopupFlags_MouseButtonLeft") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_PopupFlags_MouseButtonLeft()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_PopupFlags_MouseButtonLeft()</code></div>
	<p>For BeginPopupContext*(): open on Left Mouse release.<br>
   Guaranteed to always be == 0 (same as MouseButton_Left).</p>
</div>

<div class="function_definition" id="ImGui_PopupFlags_MouseButtonMiddle">
	<div class="c_func"><code>int ImGui_PopupFlags_MouseButtonMiddle()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_PopupFlags_MouseButtonMiddle() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_PopupFlags_MouseButtonMiddle") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_PopupFlags_MouseButtonMiddle()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_PopupFlags_MouseButtonMiddle()</code></div>
	<p>For BeginPopupContext*(): open on Middle Mouse release.<br>
   Guaranteed to always be == 2 (same as MouseButton_Middle).</p>
</div>

<div class="function_definition" id="ImGui_PopupFlags_MouseButtonRight">
	<div class="c_func"><code>int ImGui_PopupFlags_MouseButtonRight()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_PopupFlags_MouseButtonRight() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_PopupFlags_MouseButtonRight") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_PopupFlags_MouseButtonRight()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_PopupFlags_MouseButtonRight()</code></div>
	<p>For BeginPopupContext*(): open on Right Mouse release.<br>
   Guaranteed to always be == 1 (same as MouseButton_Right).</p>
</div>

<div class="function_definition" id="ImGui_PopupFlags_NoOpenOverExistingPopup">
	<div class="c_func"><code>int ImGui_PopupFlags_NoOpenOverExistingPopup()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_PopupFlags_NoOpenOverExistingPopup() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_PopupFlags_NoOpenOverExistingPopup") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_PopupFlags_NoOpenOverExistingPopup()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_PopupFlags_NoOpenOverExistingPopup()</code></div>
	<p>For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup<br>
   at the same level of the popup stack.</p>
</div>

<div class="function_definition" id="ImGui_PopupFlags_NoOpenOverItems">
	<div class="c_func"><code>int ImGui_PopupFlags_NoOpenOverItems()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_PopupFlags_NoOpenOverItems() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_PopupFlags_NoOpenOverItems") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_PopupFlags_NoOpenOverItems()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_PopupFlags_NoOpenOverItems()</code></div>
	<p>For BeginPopupContextWindow: don't return true when hovering items,<br>
   only when hovering empty space.</p>
</div>

<div class="function_definition" id="ImGui_PopupFlags_None">
	<div class="c_func"><code>int ImGui_PopupFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_PopupFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_PopupFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_PopupFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_PopupFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_ProgressBar">
	<div class="c_func"><code>void ImGui_ProgressBar(ImGui_Context* ctx, double fraction, double* size_arg_wInOptional, double* size_arg_hInOptional, const char* overlayInOptional)</code></div>
	<div class="e_func"><code>ImGui_ProgressBar(<em>ImGui_Context</em> ctx, fraction, <em>optional </em>size_arg_wIn, <em>optional </em>size_arg_hIn, <em>optional </em>"overlayIn") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ProgressBar", <em>ImGui_Context</em> ctx, fraction, <em>optional </em>size_arg_wIn, <em>optional </em>size_arg_hIn, <em>optional </em>"overlayIn") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_ProgressBar(<em>ImGui_Context</em> ctx, <em>number</em> fraction, <em>optional number </em>size_arg_wIn, <em>optional number </em>size_arg_hIn, <em>optional </em><em>string</em> overlayIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> fraction, <em>Float</em> size_arg_wInOptional, <em>Float</em> size_arg_hInOptional, <em>String</em> overlayInOptional) = ImGui_ProgressBar(ctx, fraction, size_arg_wInOptional, size_arg_hInOptional, overlayInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_PushButtonRepeat">
	<div class="c_func"><code>void ImGui_PushButtonRepeat(ImGui_Context* ctx, bool repeat)</code></div>
	<div class="e_func"><code>ImGui_PushButtonRepeat(<em>ImGui_Context</em> ctx, <em>bool </em>repeat) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PushButtonRepeat", <em>ImGui_Context</em> ctx, <em>bool </em>repeat) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PushButtonRepeat(<em>ImGui_Context</em> ctx, <em>boolean</em> repeat)</code></div>
	<div class="p_func"><code>ImGui_PushButtonRepeat(<em>ImGui_Context</em> ctx, <em>Boolean</em> repeat)</code></div>
	<p>In 'repeat' mode, Button*() functions return repeated true in a typematic<br>
manner (using ConfigVar_KeyRepeatDelay/ConfigVar_KeyRepeatRate settings).<br>
</p><p>
Note that you can call IsItemActive after any Button to tell if the button is<br>
held in the current frame.</p>
</div>

<div class="function_definition" id="ImGui_PushClipRect">
	<div class="c_func"><code>void ImGui_PushClipRect(ImGui_Context* ctx, double clip_rect_min_x, double clip_rect_min_y, double clip_rect_max_x, double clip_rect_max_y, bool intersect_with_current_clip_rect)</code></div>
	<div class="e_func"><code>ImGui_PushClipRect(<em>ImGui_Context</em> ctx, clip_rect_min_x, clip_rect_min_y, clip_rect_max_x, clip_rect_max_y, <em>bool </em>intersect_with_current_clip_rect) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PushClipRect", <em>ImGui_Context</em> ctx, clip_rect_min_x, clip_rect_min_y, clip_rect_max_x, clip_rect_max_y, <em>bool </em>intersect_with_current_clip_rect) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PushClipRect(<em>ImGui_Context</em> ctx, <em>number</em> clip_rect_min_x, <em>number</em> clip_rect_min_y, <em>number</em> clip_rect_max_x, <em>number</em> clip_rect_max_y, <em>boolean</em> intersect_with_current_clip_rect)</code></div>
	<div class="p_func"><code>ImGui_PushClipRect(<em>ImGui_Context</em> ctx, <em>Float</em> clip_rect_min_x, <em>Float</em> clip_rect_min_y, <em>Float</em> clip_rect_max_x, <em>Float</em> clip_rect_max_y, <em>Boolean</em> intersect_with_current_clip_rect)</code></div>
</div>

<div class="function_definition" id="ImGui_PushFont">
	<div class="c_func"><code>void ImGui_PushFont(ImGui_Context* ctx, ImGui_Font* font)</code></div>
	<div class="e_func"><code>ImGui_PushFont(<em>ImGui_Context</em> ctx, <em>ImGui_Font</em> font) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PushFont", <em>ImGui_Context</em> ctx, <em>ImGui_Font</em> font) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PushFont(<em>ImGui_Context</em> ctx, <em>ImGui_Font</em> font)</code></div>
	<div class="p_func"><code>ImGui_PushFont(<em>ImGui_Context</em> ctx, <em>ImGui_Font</em> font)</code></div>
	<p>Change the current font. Use nil to push the default font.<br>
The font object must have been registered using Attach. See PopFont.</p>
</div>

<div class="function_definition" id="ImGui_PushID">
	<div class="c_func"><code>void ImGui_PushID(ImGui_Context* ctx, const char* str_id)</code></div>
	<div class="e_func"><code>ImGui_PushID(<em>ImGui_Context</em> ctx, "str_id") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PushID", <em>ImGui_Context</em> ctx, "str_id") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PushID(<em>ImGui_Context</em> ctx, <em>string</em> str_id)</code></div>
	<div class="p_func"><code>ImGui_PushID(<em>ImGui_Context</em> ctx, <em>String</em> str_id)</code></div>
	<p>Push string into the ID stack.</p>
</div>

<div class="function_definition" id="ImGui_PushItemWidth">
	<div class="c_func"><code>void ImGui_PushItemWidth(ImGui_Context* ctx, double item_width)</code></div>
	<div class="e_func"><code>ImGui_PushItemWidth(<em>ImGui_Context</em> ctx, item_width) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PushItemWidth", <em>ImGui_Context</em> ctx, item_width) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PushItemWidth(<em>ImGui_Context</em> ctx, <em>number</em> item_width)</code></div>
	<div class="p_func"><code>ImGui_PushItemWidth(<em>ImGui_Context</em> ctx, <em>Float</em> item_width)</code></div>
	<p>Push width of items for common large "item+label" widgets.<br>
</p><p>
- \&gt;0.0: width in pixels<br>
- &lt;0.0 align xx pixels to the right of window<br>
  (so -FLT_MIN always align width to the right side)<br>
- 0.0 = default to ~2/3 of windows width.</p>
</div>

<div class="function_definition" id="ImGui_PushStyleColor">
	<div class="c_func"><code>void ImGui_PushStyleColor(ImGui_Context* ctx, int idx, int col_rgba)</code></div>
	<div class="e_func"><code>ImGui_PushStyleColor(<em>ImGui_Context</em> ctx, <em>int </em>idx, <em>int </em>col_rgba) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PushStyleColor", <em>ImGui_Context</em> ctx, <em>int </em>idx, <em>int </em>col_rgba) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PushStyleColor(<em>ImGui_Context</em> ctx, <em>integer</em> idx, <em>integer</em> col_rgba)</code></div>
	<div class="p_func"><code>ImGui_PushStyleColor(<em>ImGui_Context</em> ctx, <em>Int</em> idx, <em>Int</em> col_rgba)</code></div>
	<p>Temporarily modify a style color.<br>
Call PopStyleColor to undo after use (before the end of the frame).<br>
See Col_* for available style colors.</p>
</div>

<div class="function_definition" id="ImGui_PushStyleVar">
	<div class="c_func"><code>void ImGui_PushStyleVar(ImGui_Context* ctx, int var_idx, double val1, double* val2InOptional)</code></div>
	<div class="e_func"><code>ImGui_PushStyleVar(<em>ImGui_Context</em> ctx, <em>int </em>var_idx, val1, <em>optional </em>val2In) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PushStyleVar", <em>ImGui_Context</em> ctx, <em>int </em>var_idx, val1, <em>optional </em>val2In) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PushStyleVar(<em>ImGui_Context</em> ctx, <em>integer</em> var_idx, <em>number</em> val1, <em>optional number </em>val2In)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Int</em> var_idx, <em>Float</em> val1, <em>Float</em> val2InOptional) = ImGui_PushStyleVar(ctx, var_idx, val1, val2InOptional)</code></div>
	<p>Temporarily modify a style variable.<br>
Call PopStyleVar to undo after use (before the end of the frame).<br>
See StyleVar_* for possible values of 'var_idx'.</p>
</div>

<div class="function_definition" id="ImGui_PushTabStop">
	<div class="c_func"><code>void ImGui_PushTabStop(ImGui_Context* ctx, bool tab_stop)</code></div>
	<div class="e_func"><code>ImGui_PushTabStop(<em>ImGui_Context</em> ctx, <em>bool </em>tab_stop) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PushTabStop", <em>ImGui_Context</em> ctx, <em>bool </em>tab_stop) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PushTabStop(<em>ImGui_Context</em> ctx, <em>boolean</em> tab_stop)</code></div>
	<div class="p_func"><code>ImGui_PushTabStop(<em>ImGui_Context</em> ctx, <em>Boolean</em> tab_stop)</code></div>
	<p>Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it<br>
for certain widgets</p>
</div>

<div class="function_definition" id="ImGui_PushTextWrapPos">
	<div class="c_func"><code>void ImGui_PushTextWrapPos(ImGui_Context* ctx, double* wrap_local_pos_xInOptional)</code></div>
	<div class="e_func"><code>ImGui_PushTextWrapPos(<em>ImGui_Context</em> ctx, <em>optional </em>wrap_local_pos_xIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_PushTextWrapPos", <em>ImGui_Context</em> ctx, <em>optional </em>wrap_local_pos_xIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_PushTextWrapPos(<em>ImGui_Context</em> ctx, <em>optional number </em>wrap_local_pos_xIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> wrap_local_pos_xInOptional) = ImGui_PushTextWrapPos(ctx, wrap_local_pos_xInOptional)</code></div>
	<p>Push word-wrapping position for Text*() commands.<br>
</p><p>
-  &lt; 0.0: no wrapping<br>
-  = 0.0: wrap to end of window (or column)<br>
- \&gt; 0.0: wrap at 'wrap_pos_x' position in window local space.</p>
</div>

<div class="function_definition" id="ImGui_RadioButton">
	<div class="c_func"><code>bool ImGui_RadioButton(ImGui_Context* ctx, const char* label, bool active)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_RadioButton(<em>ImGui_Context</em> ctx, "label", <em>bool </em>active) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_RadioButton", <em>ImGui_Context</em> ctx, "label", <em>bool </em>active) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_RadioButton(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>boolean</em> active)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_RadioButton(<em>ImGui_Context</em> ctx, <em>String</em> label, <em>Boolean</em> active)</code></div>
	<p>Use with e.g. if (RadioButton("one", my_value==1)) { my_value = 1; }</p>
</div>

<div class="function_definition" id="ImGui_RadioButtonEx">
	<div class="c_func"><code>bool ImGui_RadioButtonEx(ImGui_Context* ctx, const char* label, int* vInOut, int v_button)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_RadioButtonEx(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v, <em>int </em>v_button) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_RadioButtonEx", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v, <em>int </em>v_button) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v = reaper.ImGui_RadioButtonEx(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v, <em>integer</em> v_button)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> vInOut, <em>Int</em> v_button) = ImGui_RadioButtonEx(ctx, label, vInOut, v_button)</code></div>
	<p>Shortcut to handle RadioButton's example pattern when value is an integer</p>
</div>

<div class="function_definition" id="ImGui_ResetMouseDragDelta">
	<div class="c_func"><code>void ImGui_ResetMouseDragDelta(ImGui_Context* ctx, int* buttonInOptional)</code></div>
	<div class="e_func"><code>ImGui_ResetMouseDragDelta(<em>ImGui_Context</em> ctx, <em>optional int</em> buttonIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ResetMouseDragDelta", <em>ImGui_Context</em> ctx, <em>optional int</em> buttonIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_ResetMouseDragDelta(<em>ImGui_Context</em> ctx, <em>optional integer</em> buttonIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Int</em> buttonInOptional) = ImGui_ResetMouseDragDelta(ctx, buttonInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_SameLine">
	<div class="c_func"><code>void ImGui_SameLine(ImGui_Context* ctx, double* offset_from_start_xInOptional, double* spacingInOptional)</code></div>
	<div class="e_func"><code>ImGui_SameLine(<em>ImGui_Context</em> ctx, <em>optional </em>offset_from_start_xIn, <em>optional </em>spacingIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SameLine", <em>ImGui_Context</em> ctx, <em>optional </em>offset_from_start_xIn, <em>optional </em>spacingIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SameLine(<em>ImGui_Context</em> ctx, <em>optional number </em>offset_from_start_xIn, <em>optional number </em>spacingIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> offset_from_start_xInOptional, <em>Float</em> spacingInOptional) = ImGui_SameLine(ctx, offset_from_start_xInOptional, spacingInOptional)</code></div>
	<p>Call between widgets or groups to layout them horizontally.<br>
X position given in window coordinates.</p>
</div>

<div class="function_definition" id="ImGui_Selectable">
	<div class="c_func"><code>bool ImGui_Selectable(ImGui_Context* ctx, const char* label, bool* p_selectedInOut, int* flagsInOptional, double* size_wInOptional, double* size_hInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_Selectable(<em>ImGui_Context</em> ctx, "label", <em>bool &amp;</em>p_selected, <em>optional int</em> flagsIn, <em>optional </em>size_wIn, <em>optional </em>size_hIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_Selectable", <em>ImGui_Context</em> ctx, "label", <em>bool &amp;</em>p_selected, <em>optional int</em> flagsIn, <em>optional </em>size_wIn, <em>optional </em>size_hIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>p_selected = reaper.ImGui_Selectable(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>boolean </em>p_selected, <em>optional integer</em> flagsIn, <em>optional number </em>size_wIn, <em>optional number </em>size_hIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Boolean</em> p_selectedInOut, <em>Int</em> flagsInOptional, <em>Float</em> size_wInOptional, <em>Float</em> size_hInOptional) = ImGui_Selectable(ctx, label, p_selectedInOut, flagsInOptional, size_wInOptional, size_hInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_SelectableFlags_AllowDoubleClick">
	<div class="c_func"><code>int ImGui_SelectableFlags_AllowDoubleClick()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SelectableFlags_AllowDoubleClick() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SelectableFlags_AllowDoubleClick") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SelectableFlags_AllowDoubleClick()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SelectableFlags_AllowDoubleClick()</code></div>
	<p>Generate press events on double clicks too.</p>
</div>

<div class="function_definition" id="ImGui_SelectableFlags_AllowItemOverlap">
	<div class="c_func"><code>int ImGui_SelectableFlags_AllowItemOverlap()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SelectableFlags_AllowItemOverlap() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SelectableFlags_AllowItemOverlap") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SelectableFlags_AllowItemOverlap()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SelectableFlags_AllowItemOverlap()</code></div>
	<p>Hit testing to allow subsequent widgets to overlap this one.</p>
</div>

<div class="function_definition" id="ImGui_SelectableFlags_Disabled">
	<div class="c_func"><code>int ImGui_SelectableFlags_Disabled()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SelectableFlags_Disabled() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SelectableFlags_Disabled") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SelectableFlags_Disabled()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SelectableFlags_Disabled()</code></div>
	<p>Cannot be selected, display grayed out text.</p>
</div>

<div class="function_definition" id="ImGui_SelectableFlags_DontClosePopups">
	<div class="c_func"><code>int ImGui_SelectableFlags_DontClosePopups()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SelectableFlags_DontClosePopups() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SelectableFlags_DontClosePopups") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SelectableFlags_DontClosePopups()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SelectableFlags_DontClosePopups()</code></div>
	<p>Clicking this doesn't close parent popup window.</p>
</div>

<div class="function_definition" id="ImGui_SelectableFlags_None">
	<div class="c_func"><code>int ImGui_SelectableFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SelectableFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SelectableFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SelectableFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SelectableFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_SelectableFlags_SpanAllColumns">
	<div class="c_func"><code>int ImGui_SelectableFlags_SpanAllColumns()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SelectableFlags_SpanAllColumns() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SelectableFlags_SpanAllColumns") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SelectableFlags_SpanAllColumns()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SelectableFlags_SpanAllColumns()</code></div>
	<p>Selectable frame can span all columns (text will still fit in current column).</p>
</div>

<div class="function_definition" id="ImGui_Separator">
	<div class="c_func"><code>void ImGui_Separator(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_Separator(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Separator", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Separator(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_Separator(<em>ImGui_Context</em> ctx)</code></div>
	<p>Separator, generally horizontal. inside a menu bar or in horizontal layout<br>
mode, this becomes a vertical separator.</p>
</div>

<div class="function_definition" id="ImGui_SeparatorText">
	<div class="c_func"><code>void ImGui_SeparatorText(ImGui_Context* ctx, const char* label)</code></div>
	<div class="e_func"><code>ImGui_SeparatorText(<em>ImGui_Context</em> ctx, "label") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SeparatorText", <em>ImGui_Context</em> ctx, "label") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SeparatorText(<em>ImGui_Context</em> ctx, <em>string</em> label)</code></div>
	<div class="p_func"><code>ImGui_SeparatorText(<em>ImGui_Context</em> ctx, <em>String</em> label)</code></div>
	<p>Text formatted with an horizontal line</p>
</div>

<div class="function_definition" id="ImGui_SetClipboardText">
	<div class="c_func"><code>void ImGui_SetClipboardText(ImGui_Context* ctx, const char* text)</code></div>
	<div class="e_func"><code>ImGui_SetClipboardText(<em>ImGui_Context</em> ctx, "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetClipboardText", <em>ImGui_Context</em> ctx, "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetClipboardText(<em>ImGui_Context</em> ctx, <em>string</em> text)</code></div>
	<div class="p_func"><code>ImGui_SetClipboardText(<em>ImGui_Context</em> ctx, <em>String</em> text)</code></div>
	<p>See also the LogToClipboard function to capture GUI into clipboard,<br>
or easily output text data to the clipboard.</p>
</div>

<div class="function_definition" id="ImGui_SetColorEditOptions">
	<div class="c_func"><code>void ImGui_SetColorEditOptions(ImGui_Context* ctx, int flags)</code></div>
	<div class="e_func"><code>ImGui_SetColorEditOptions(<em>ImGui_Context</em> ctx, <em>int </em>flags) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetColorEditOptions", <em>ImGui_Context</em> ctx, <em>int </em>flags) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetColorEditOptions(<em>ImGui_Context</em> ctx, <em>integer</em> flags)</code></div>
	<div class="p_func"><code>ImGui_SetColorEditOptions(<em>ImGui_Context</em> ctx, <em>Int</em> flags)</code></div>
	<p>Picker type, etc. User will be able to change many settings, unless you pass<br>
the _NoOptions flag to your calls.</p>
</div>

<div class="function_definition" id="ImGui_SetConfigVar">
	<div class="c_func"><code>void ImGui_SetConfigVar(ImGui_Context* ctx, int var_idx, double value)</code></div>
	<div class="e_func"><code>ImGui_SetConfigVar(<em>ImGui_Context</em> ctx, <em>int </em>var_idx, value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetConfigVar", <em>ImGui_Context</em> ctx, <em>int </em>var_idx, value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetConfigVar(<em>ImGui_Context</em> ctx, <em>integer</em> var_idx, <em>number</em> value)</code></div>
	<div class="p_func"><code>ImGui_SetConfigVar(<em>ImGui_Context</em> ctx, <em>Int</em> var_idx, <em>Float</em> value)</code></div>
</div>

<div class="function_definition" id="ImGui_SetCursorPos">
	<div class="c_func"><code>void ImGui_SetCursorPos(ImGui_Context* ctx, double local_pos_x, double local_pos_y)</code></div>
	<div class="e_func"><code>ImGui_SetCursorPos(<em>ImGui_Context</em> ctx, local_pos_x, local_pos_y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetCursorPos", <em>ImGui_Context</em> ctx, local_pos_x, local_pos_y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetCursorPos(<em>ImGui_Context</em> ctx, <em>number</em> local_pos_x, <em>number</em> local_pos_y)</code></div>
	<div class="p_func"><code>ImGui_SetCursorPos(<em>ImGui_Context</em> ctx, <em>Float</em> local_pos_x, <em>Float</em> local_pos_y)</code></div>
	<p>Cursor position in window</p>
</div>

<div class="function_definition" id="ImGui_SetCursorPosX">
	<div class="c_func"><code>void ImGui_SetCursorPosX(ImGui_Context* ctx, double local_x)</code></div>
	<div class="e_func"><code>ImGui_SetCursorPosX(<em>ImGui_Context</em> ctx, local_x) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetCursorPosX", <em>ImGui_Context</em> ctx, local_x) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetCursorPosX(<em>ImGui_Context</em> ctx, <em>number</em> local_x)</code></div>
	<div class="p_func"><code>ImGui_SetCursorPosX(<em>ImGui_Context</em> ctx, <em>Float</em> local_x)</code></div>
	<p>Cursor X position in window</p>
</div>

<div class="function_definition" id="ImGui_SetCursorPosY">
	<div class="c_func"><code>void ImGui_SetCursorPosY(ImGui_Context* ctx, double local_y)</code></div>
	<div class="e_func"><code>ImGui_SetCursorPosY(<em>ImGui_Context</em> ctx, local_y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetCursorPosY", <em>ImGui_Context</em> ctx, local_y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetCursorPosY(<em>ImGui_Context</em> ctx, <em>number</em> local_y)</code></div>
	<div class="p_func"><code>ImGui_SetCursorPosY(<em>ImGui_Context</em> ctx, <em>Float</em> local_y)</code></div>
	<p>Cursor Y position in window</p>
</div>

<div class="function_definition" id="ImGui_SetCursorScreenPos">
	<div class="c_func"><code>void ImGui_SetCursorScreenPos(ImGui_Context* ctx, double pos_x, double pos_y)</code></div>
	<div class="e_func"><code>ImGui_SetCursorScreenPos(<em>ImGui_Context</em> ctx, pos_x, pos_y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetCursorScreenPos", <em>ImGui_Context</em> ctx, pos_x, pos_y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetCursorScreenPos(<em>ImGui_Context</em> ctx, <em>number</em> pos_x, <em>number</em> pos_y)</code></div>
	<div class="p_func"><code>ImGui_SetCursorScreenPos(<em>ImGui_Context</em> ctx, <em>Float</em> pos_x, <em>Float</em> pos_y)</code></div>
	<p>Cursor position in absolute screen coordinates.</p>
</div>

<div class="function_definition" id="ImGui_SetDragDropPayload">
	<div class="c_func"><code>bool ImGui_SetDragDropPayload(ImGui_Context* ctx, const char* type, const char* data, int* condInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_SetDragDropPayload(<em>ImGui_Context</em> ctx, "type", "data", <em>optional int</em> condIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_SetDragDropPayload", <em>ImGui_Context</em> ctx, "type", "data", <em>optional int</em> condIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_SetDragDropPayload(<em>ImGui_Context</em> ctx, <em>string</em> type, <em>string</em> data, <em>optional integer</em> condIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> type, <em>String</em> data, <em>Int</em> condInOptional) = ImGui_SetDragDropPayload(ctx, type, data, condInOptional)</code></div>
	<p>The type is a user defined string of maximum 32 characters.<br>
Strings starting with '_' are reserved for dear imgui internal types.<br>
Data is copied and held by imgui.</p>
</div>

<div class="function_definition" id="ImGui_SetItemAllowOverlap">
	<div class="c_func"><code>void ImGui_SetItemAllowOverlap(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_SetItemAllowOverlap(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetItemAllowOverlap", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetItemAllowOverlap(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_SetItemAllowOverlap(<em>ImGui_Context</em> ctx)</code></div>
	<p>Allow last item to be overlapped by a subsequent item. sometimes useful with<br>
invisible buttons, selectables, etc. to catch unused area.</p>
</div>

<div class="function_definition" id="ImGui_SetItemDefaultFocus">
	<div class="c_func"><code>void ImGui_SetItemDefaultFocus(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_SetItemDefaultFocus(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetItemDefaultFocus", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetItemDefaultFocus(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_SetItemDefaultFocus(<em>ImGui_Context</em> ctx)</code></div>
	<p>Make last item the default focused item of a window.</p>
</div>

<div class="function_definition" id="ImGui_SetKeyboardFocusHere">
	<div class="c_func"><code>void ImGui_SetKeyboardFocusHere(ImGui_Context* ctx, int* offsetInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetKeyboardFocusHere(<em>ImGui_Context</em> ctx, <em>optional int</em> offsetIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetKeyboardFocusHere", <em>ImGui_Context</em> ctx, <em>optional int</em> offsetIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetKeyboardFocusHere(<em>ImGui_Context</em> ctx, <em>optional integer</em> offsetIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Int</em> offsetInOptional) = ImGui_SetKeyboardFocusHere(ctx, offsetInOptional)</code></div>
	<p>Focus keyboard on the next widget. Use positive 'offset' to access sub<br>
components of a multiple component widget. Use -1 to access previous widget.</p>
</div>

<div class="function_definition" id="ImGui_SetMouseCursor">
	<div class="c_func"><code>void ImGui_SetMouseCursor(ImGui_Context* ctx, int cursor_type)</code></div>
	<div class="e_func"><code>ImGui_SetMouseCursor(<em>ImGui_Context</em> ctx, <em>int </em>cursor_type) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetMouseCursor", <em>ImGui_Context</em> ctx, <em>int </em>cursor_type) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetMouseCursor(<em>ImGui_Context</em> ctx, <em>integer</em> cursor_type)</code></div>
	<div class="p_func"><code>ImGui_SetMouseCursor(<em>ImGui_Context</em> ctx, <em>Int</em> cursor_type)</code></div>
	<p>Set desired mouse cursor shape. See MouseCursor_* for possible values.</p>
</div>

<div class="function_definition" id="ImGui_SetNextFrameWantCaptureKeyboard">
	<div class="c_func"><code>void ImGui_SetNextFrameWantCaptureKeyboard(ImGui_Context* ctx, bool want_capture_keyboard)</code></div>
	<div class="e_func"><code>ImGui_SetNextFrameWantCaptureKeyboard(<em>ImGui_Context</em> ctx, <em>bool </em>want_capture_keyboard) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetNextFrameWantCaptureKeyboard", <em>ImGui_Context</em> ctx, <em>bool </em>want_capture_keyboard) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetNextFrameWantCaptureKeyboard(<em>ImGui_Context</em> ctx, <em>boolean</em> want_capture_keyboard)</code></div>
	<div class="p_func"><code>ImGui_SetNextFrameWantCaptureKeyboard(<em>ImGui_Context</em> ctx, <em>Boolean</em> want_capture_keyboard)</code></div>
	<p>Request capture of keyboard shortcuts in REAPER's global scope for the next frame.</p>
</div>

<div class="function_definition" id="ImGui_SetNextItemOpen">
	<div class="c_func"><code>void ImGui_SetNextItemOpen(ImGui_Context* ctx, bool is_open, int* condInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetNextItemOpen(<em>ImGui_Context</em> ctx, <em>bool </em>is_open, <em>optional int</em> condIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetNextItemOpen", <em>ImGui_Context</em> ctx, <em>bool </em>is_open, <em>optional int</em> condIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetNextItemOpen(<em>ImGui_Context</em> ctx, <em>boolean</em> is_open, <em>optional integer</em> condIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Boolean</em> is_open, <em>Int</em> condInOptional) = ImGui_SetNextItemOpen(ctx, is_open, condInOptional)</code></div>
	<p>Set next TreeNode/CollapsingHeader open state.<br>
Can also be done with the TreeNodeFlags_DefaultOpen flag.</p>
</div>

<div class="function_definition" id="ImGui_SetNextItemWidth">
	<div class="c_func"><code>void ImGui_SetNextItemWidth(ImGui_Context* ctx, double item_width)</code></div>
	<div class="e_func"><code>ImGui_SetNextItemWidth(<em>ImGui_Context</em> ctx, item_width) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetNextItemWidth", <em>ImGui_Context</em> ctx, item_width) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetNextItemWidth(<em>ImGui_Context</em> ctx, <em>number</em> item_width)</code></div>
	<div class="p_func"><code>ImGui_SetNextItemWidth(<em>ImGui_Context</em> ctx, <em>Float</em> item_width)</code></div>
	<p>Set width of the _next_ common large "item+label" widget.<br>
</p><p>
- \&gt;0.0: width in pixels<br>
- &lt;0.0 align xx pixels to the right of window<br>
  (so -FLT_MIN always align width to the right side)</p>
</div>

<div class="function_definition" id="ImGui_SetNextWindowBgAlpha">
	<div class="c_func"><code>void ImGui_SetNextWindowBgAlpha(ImGui_Context* ctx, double alpha)</code></div>
	<div class="e_func"><code>ImGui_SetNextWindowBgAlpha(<em>ImGui_Context</em> ctx, alpha) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetNextWindowBgAlpha", <em>ImGui_Context</em> ctx, alpha) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetNextWindowBgAlpha(<em>ImGui_Context</em> ctx, <em>number</em> alpha)</code></div>
	<div class="p_func"><code>ImGui_SetNextWindowBgAlpha(<em>ImGui_Context</em> ctx, <em>Float</em> alpha)</code></div>
	<p>Set next window background color alpha. Helper to easily override the Alpha<br>
component of Col_WindowBg/Col_ChildBg/Col_PopupBg.<br>
You may also use WindowFlags_NoBackground for a fully transparent window.</p>
</div>

<div class="function_definition" id="ImGui_SetNextWindowCollapsed">
	<div class="c_func"><code>void ImGui_SetNextWindowCollapsed(ImGui_Context* ctx, bool collapsed, int* condInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetNextWindowCollapsed(<em>ImGui_Context</em> ctx, <em>bool </em>collapsed, <em>optional int</em> condIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetNextWindowCollapsed", <em>ImGui_Context</em> ctx, <em>bool </em>collapsed, <em>optional int</em> condIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetNextWindowCollapsed(<em>ImGui_Context</em> ctx, <em>boolean</em> collapsed, <em>optional integer</em> condIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Boolean</em> collapsed, <em>Int</em> condInOptional) = ImGui_SetNextWindowCollapsed(ctx, collapsed, condInOptional)</code></div>
	<p>Set next window collapsed state.</p>
</div>

<div class="function_definition" id="ImGui_SetNextWindowContentSize">
	<div class="c_func"><code>void ImGui_SetNextWindowContentSize(ImGui_Context* ctx, double size_w, double size_h)</code></div>
	<div class="e_func"><code>ImGui_SetNextWindowContentSize(<em>ImGui_Context</em> ctx, size_w, size_h) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetNextWindowContentSize", <em>ImGui_Context</em> ctx, size_w, size_h) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetNextWindowContentSize(<em>ImGui_Context</em> ctx, <em>number</em> size_w, <em>number</em> size_h)</code></div>
	<div class="p_func"><code>ImGui_SetNextWindowContentSize(<em>ImGui_Context</em> ctx, <em>Float</em> size_w, <em>Float</em> size_h)</code></div>
	<p>Set next window content size (~ scrollable client area, which enforce the<br>
range of scrollbars). Not including window decorations (title bar, menu bar,<br>
etc.) nor StyleVar_WindowPadding. set an axis to 0.0 to leave it automatic.</p>
</div>

<div class="function_definition" id="ImGui_SetNextWindowDockID">
	<div class="c_func"><code>void ImGui_SetNextWindowDockID(ImGui_Context* ctx, int dock_id, int* condInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetNextWindowDockID(<em>ImGui_Context</em> ctx, <em>int </em>dock_id, <em>optional int</em> condIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetNextWindowDockID", <em>ImGui_Context</em> ctx, <em>int </em>dock_id, <em>optional int</em> condIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetNextWindowDockID(<em>ImGui_Context</em> ctx, <em>integer</em> dock_id, <em>optional integer</em> condIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Int</em> dock_id, <em>Int</em> condInOptional) = ImGui_SetNextWindowDockID(ctx, dock_id, condInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_SetNextWindowFocus">
	<div class="c_func"><code>void ImGui_SetNextWindowFocus(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_SetNextWindowFocus(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetNextWindowFocus", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetNextWindowFocus(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_SetNextWindowFocus(<em>ImGui_Context</em> ctx)</code></div>
	<p>Set next window to be focused / top-most.</p>
</div>

<div class="function_definition" id="ImGui_SetNextWindowPos">
	<div class="c_func"><code>void ImGui_SetNextWindowPos(ImGui_Context* ctx, double pos_x, double pos_y, int* condInOptional, double* pivot_xInOptional, double* pivot_yInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetNextWindowPos(<em>ImGui_Context</em> ctx, pos_x, pos_y, <em>optional int</em> condIn, <em>optional </em>pivot_xIn, <em>optional </em>pivot_yIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetNextWindowPos", <em>ImGui_Context</em> ctx, pos_x, pos_y, <em>optional int</em> condIn, <em>optional </em>pivot_xIn, <em>optional </em>pivot_yIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetNextWindowPos(<em>ImGui_Context</em> ctx, <em>number</em> pos_x, <em>number</em> pos_y, <em>optional integer</em> condIn, <em>optional number </em>pivot_xIn, <em>optional number </em>pivot_yIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> pos_x, <em>Float</em> pos_y, <em>Int</em> condInOptional, <em>Float</em> pivot_xInOptional, <em>Float</em> pivot_yInOptional) = ImGui_SetNextWindowPos(ctx, pos_x, pos_y, condInOptional, pivot_xInOptional, pivot_yInOptional)</code></div>
	<p>Set next window position. Use pivot=(0.5,0.5) to center on given point, etc.</p>
</div>

<div class="function_definition" id="ImGui_SetNextWindowScroll">
	<div class="c_func"><code>void ImGui_SetNextWindowScroll(ImGui_Context* ctx, double scroll_x, double scroll_y)</code></div>
	<div class="e_func"><code>ImGui_SetNextWindowScroll(<em>ImGui_Context</em> ctx, scroll_x, scroll_y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetNextWindowScroll", <em>ImGui_Context</em> ctx, scroll_x, scroll_y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetNextWindowScroll(<em>ImGui_Context</em> ctx, <em>number</em> scroll_x, <em>number</em> scroll_y)</code></div>
	<div class="p_func"><code>ImGui_SetNextWindowScroll(<em>ImGui_Context</em> ctx, <em>Float</em> scroll_x, <em>Float</em> scroll_y)</code></div>
	<p>Set next window scrolling value (use &lt; 0.0 to not affect a given axis).</p>
</div>

<div class="function_definition" id="ImGui_SetNextWindowSize">
	<div class="c_func"><code>void ImGui_SetNextWindowSize(ImGui_Context* ctx, double size_w, double size_h, int* condInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetNextWindowSize(<em>ImGui_Context</em> ctx, size_w, size_h, <em>optional int</em> condIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetNextWindowSize", <em>ImGui_Context</em> ctx, size_w, size_h, <em>optional int</em> condIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetNextWindowSize(<em>ImGui_Context</em> ctx, <em>number</em> size_w, <em>number</em> size_h, <em>optional integer</em> condIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> size_w, <em>Float</em> size_h, <em>Int</em> condInOptional) = ImGui_SetNextWindowSize(ctx, size_w, size_h, condInOptional)</code></div>
	<p>Set next window size. set axis to 0.0 to force an auto-fit on this axis.</p>
</div>

<div class="function_definition" id="ImGui_SetNextWindowSizeConstraints">
	<div class="c_func"><code>void ImGui_SetNextWindowSizeConstraints(ImGui_Context* ctx, double size_min_w, double size_min_h, double size_max_w, double size_max_h, ImGui_Function* custom_callbackInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetNextWindowSizeConstraints(<em>ImGui_Context</em> ctx, size_min_w, size_min_h, size_max_w, size_max_h, <em>ImGui_Function</em> custom_callbackIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetNextWindowSizeConstraints", <em>ImGui_Context</em> ctx, size_min_w, size_min_h, size_max_w, size_max_h, <em>ImGui_Function</em> custom_callbackIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetNextWindowSizeConstraints(<em>ImGui_Context</em> ctx, <em>number</em> size_min_w, <em>number</em> size_min_h, <em>number</em> size_max_w, <em>number</em> size_max_h, <em>ImGui_Function</em> custom_callbackIn)</code></div>
	<div class="p_func"><code>ImGui_SetNextWindowSizeConstraints(<em>ImGui_Context</em> ctx, <em>Float</em> size_min_w, <em>Float</em> size_min_h, <em>Float</em> size_max_w, <em>Float</em> size_max_h, <em>ImGui_Function</em> custom_callbackInOptional)</code></div>
	<p>Set next window size limits. Use -1,-1 on either X/Y axis to preserve the<br>
current size. Use FLT_MAX (second return value of NumericLimits_Float) for no<br>
maximum size. Sizes will be rounded down.</p>
</div>

<div class="function_definition" id="ImGui_SetScrollFromPosX">
	<div class="c_func"><code>void ImGui_SetScrollFromPosX(ImGui_Context* ctx, double local_x, double* center_x_ratioInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetScrollFromPosX(<em>ImGui_Context</em> ctx, local_x, <em>optional </em>center_x_ratioIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetScrollFromPosX", <em>ImGui_Context</em> ctx, local_x, <em>optional </em>center_x_ratioIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetScrollFromPosX(<em>ImGui_Context</em> ctx, <em>number</em> local_x, <em>optional number </em>center_x_ratioIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> local_x, <em>Float</em> center_x_ratioInOptional) = ImGui_SetScrollFromPosX(ctx, local_x, center_x_ratioInOptional)</code></div>
	<p>Adjust scrolling amount to make given position visible.<br>
Generally GetCursorStartPos() + offset to compute a valid position.</p>
</div>

<div class="function_definition" id="ImGui_SetScrollFromPosY">
	<div class="c_func"><code>void ImGui_SetScrollFromPosY(ImGui_Context* ctx, double local_y, double* center_y_ratioInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetScrollFromPosY(<em>ImGui_Context</em> ctx, local_y, <em>optional </em>center_y_ratioIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetScrollFromPosY", <em>ImGui_Context</em> ctx, local_y, <em>optional </em>center_y_ratioIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetScrollFromPosY(<em>ImGui_Context</em> ctx, <em>number</em> local_y, <em>optional number </em>center_y_ratioIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> local_y, <em>Float</em> center_y_ratioInOptional) = ImGui_SetScrollFromPosY(ctx, local_y, center_y_ratioInOptional)</code></div>
	<p>Adjust scrolling amount to make given position visible.<br>
Generally GetCursorStartPos() + offset to compute a valid position.</p>
</div>

<div class="function_definition" id="ImGui_SetScrollHereX">
	<div class="c_func"><code>void ImGui_SetScrollHereX(ImGui_Context* ctx, double* center_x_ratioInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetScrollHereX(<em>ImGui_Context</em> ctx, <em>optional </em>center_x_ratioIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetScrollHereX", <em>ImGui_Context</em> ctx, <em>optional </em>center_x_ratioIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetScrollHereX(<em>ImGui_Context</em> ctx, <em>optional number </em>center_x_ratioIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> center_x_ratioInOptional) = ImGui_SetScrollHereX(ctx, center_x_ratioInOptional)</code></div>
	<p>Adjust scrolling amount to make current cursor position visible.<br>
center_x_ratio=0.0: left, 0.5: center, 1.0: right.<br>
When using to make a "default/current item" visible,<br>
consider using SetItemDefaultFocus instead.</p>
</div>

<div class="function_definition" id="ImGui_SetScrollHereY">
	<div class="c_func"><code>void ImGui_SetScrollHereY(ImGui_Context* ctx, double* center_y_ratioInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetScrollHereY(<em>ImGui_Context</em> ctx, <em>optional </em>center_y_ratioIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetScrollHereY", <em>ImGui_Context</em> ctx, <em>optional </em>center_y_ratioIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetScrollHereY(<em>ImGui_Context</em> ctx, <em>optional number </em>center_y_ratioIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> center_y_ratioInOptional) = ImGui_SetScrollHereY(ctx, center_y_ratioInOptional)</code></div>
	<p>Adjust scrolling amount to make current cursor position visible.<br>
center_y_ratio=0.0: top, 0.5: center, 1.0: bottom.<br>
When using to make a "default/current item" visible,<br>
consider using SetItemDefaultFocus instead.</p>
</div>

<div class="function_definition" id="ImGui_SetScrollX">
	<div class="c_func"><code>void ImGui_SetScrollX(ImGui_Context* ctx, double scroll_x)</code></div>
	<div class="e_func"><code>ImGui_SetScrollX(<em>ImGui_Context</em> ctx, scroll_x) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetScrollX", <em>ImGui_Context</em> ctx, scroll_x) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetScrollX(<em>ImGui_Context</em> ctx, <em>number</em> scroll_x)</code></div>
	<div class="p_func"><code>ImGui_SetScrollX(<em>ImGui_Context</em> ctx, <em>Float</em> scroll_x)</code></div>
	<p>Set scrolling amount [0 .. GetScrollMaxX()]</p>
</div>

<div class="function_definition" id="ImGui_SetScrollY">
	<div class="c_func"><code>void ImGui_SetScrollY(ImGui_Context* ctx, double scroll_y)</code></div>
	<div class="e_func"><code>ImGui_SetScrollY(<em>ImGui_Context</em> ctx, scroll_y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetScrollY", <em>ImGui_Context</em> ctx, scroll_y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetScrollY(<em>ImGui_Context</em> ctx, <em>number</em> scroll_y)</code></div>
	<div class="p_func"><code>ImGui_SetScrollY(<em>ImGui_Context</em> ctx, <em>Float</em> scroll_y)</code></div>
	<p>Set scrolling amount [0 .. GetScrollMaxY()]</p>
</div>

<div class="function_definition" id="ImGui_SetTabItemClosed">
	<div class="c_func"><code>void ImGui_SetTabItemClosed(ImGui_Context* ctx, const char* tab_or_docked_window_label)</code></div>
	<div class="e_func"><code>ImGui_SetTabItemClosed(<em>ImGui_Context</em> ctx, "tab_or_docked_window_label") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetTabItemClosed", <em>ImGui_Context</em> ctx, "tab_or_docked_window_label") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetTabItemClosed(<em>ImGui_Context</em> ctx, <em>string</em> tab_or_docked_window_label)</code></div>
	<div class="p_func"><code>ImGui_SetTabItemClosed(<em>ImGui_Context</em> ctx, <em>String</em> tab_or_docked_window_label)</code></div>
	<p>Notify TabBar or Docking system of a closed tab/window ahead<br>
(useful to reduce visual flicker on reorderable tab bars).<br>
For tab-bar: call after BeginTabBar and before Tab submissions.<br>
Otherwise call with a window name.</p>
</div>

<div class="function_definition" id="ImGui_SetTooltip">
	<div class="c_func"><code>void ImGui_SetTooltip(ImGui_Context* ctx, const char* text)</code></div>
	<div class="e_func"><code>ImGui_SetTooltip(<em>ImGui_Context</em> ctx, "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetTooltip", <em>ImGui_Context</em> ctx, "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetTooltip(<em>ImGui_Context</em> ctx, <em>string</em> text)</code></div>
	<div class="p_func"><code>ImGui_SetTooltip(<em>ImGui_Context</em> ctx, <em>String</em> text)</code></div>
	<p>Set a text-only tooltip, typically use with IsItemHovered. override any<br>
previous call to SetTooltip.</p>
</div>

<div class="function_definition" id="ImGui_SetWindowCollapsed">
	<div class="c_func"><code>void ImGui_SetWindowCollapsed(ImGui_Context* ctx, bool collapsed, int* condInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetWindowCollapsed(<em>ImGui_Context</em> ctx, <em>bool </em>collapsed, <em>optional int</em> condIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetWindowCollapsed", <em>ImGui_Context</em> ctx, <em>bool </em>collapsed, <em>optional int</em> condIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetWindowCollapsed(<em>ImGui_Context</em> ctx, <em>boolean</em> collapsed, <em>optional integer</em> condIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Boolean</em> collapsed, <em>Int</em> condInOptional) = ImGui_SetWindowCollapsed(ctx, collapsed, condInOptional)</code></div>
	<p>(Not recommended) Set current window collapsed state.<br>
Prefer using SetNextWindowCollapsed.</p>
</div>

<div class="function_definition" id="ImGui_SetWindowCollapsedEx">
	<div class="c_func"><code>void ImGui_SetWindowCollapsedEx(ImGui_Context* ctx, const char* name, bool collapsed, int* condInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetWindowCollapsedEx(<em>ImGui_Context</em> ctx, "name", <em>bool </em>collapsed, <em>optional int</em> condIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetWindowCollapsedEx", <em>ImGui_Context</em> ctx, "name", <em>bool </em>collapsed, <em>optional int</em> condIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetWindowCollapsedEx(<em>ImGui_Context</em> ctx, <em>string</em> name, <em>boolean</em> collapsed, <em>optional integer</em> condIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>String</em> name, <em>Boolean</em> collapsed, <em>Int</em> condInOptional) = ImGui_SetWindowCollapsedEx(ctx, name, collapsed, condInOptional)</code></div>
	<p>Set named window collapsed state.</p>
</div>

<div class="function_definition" id="ImGui_SetWindowFocus">
	<div class="c_func"><code>void ImGui_SetWindowFocus(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_SetWindowFocus(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetWindowFocus", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetWindowFocus(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_SetWindowFocus(<em>ImGui_Context</em> ctx)</code></div>
	<p>(Not recommended) Set current window to be focused / top-most.<br>
Prefer using SetNextWindowFocus.</p>
</div>

<div class="function_definition" id="ImGui_SetWindowFocusEx">
	<div class="c_func"><code>void ImGui_SetWindowFocusEx(ImGui_Context* ctx, const char* name)</code></div>
	<div class="e_func"><code>ImGui_SetWindowFocusEx(<em>ImGui_Context</em> ctx, "name") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetWindowFocusEx", <em>ImGui_Context</em> ctx, "name") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetWindowFocusEx(<em>ImGui_Context</em> ctx, <em>string</em> name)</code></div>
	<div class="p_func"><code>ImGui_SetWindowFocusEx(<em>ImGui_Context</em> ctx, <em>String</em> name)</code></div>
	<p>Set named window to be focused / top-most. Use an empty name to remove focus.</p>
</div>

<div class="function_definition" id="ImGui_SetWindowPos">
	<div class="c_func"><code>void ImGui_SetWindowPos(ImGui_Context* ctx, double pos_x, double pos_y, int* condInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetWindowPos(<em>ImGui_Context</em> ctx, pos_x, pos_y, <em>optional int</em> condIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetWindowPos", <em>ImGui_Context</em> ctx, pos_x, pos_y, <em>optional int</em> condIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetWindowPos(<em>ImGui_Context</em> ctx, <em>number</em> pos_x, <em>number</em> pos_y, <em>optional integer</em> condIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> pos_x, <em>Float</em> pos_y, <em>Int</em> condInOptional) = ImGui_SetWindowPos(ctx, pos_x, pos_y, condInOptional)</code></div>
	<p>(Not recommended) Set current window position - call within Begin/End.<br>
Prefer using SetNextWindowPos, as this may incur tearing and minor side-effects.</p>
</div>

<div class="function_definition" id="ImGui_SetWindowPosEx">
	<div class="c_func"><code>void ImGui_SetWindowPosEx(ImGui_Context* ctx, const char* name, double pos_x, double pos_y, int* condInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetWindowPosEx(<em>ImGui_Context</em> ctx, "name", pos_x, pos_y, <em>optional int</em> condIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetWindowPosEx", <em>ImGui_Context</em> ctx, "name", pos_x, pos_y, <em>optional int</em> condIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetWindowPosEx(<em>ImGui_Context</em> ctx, <em>string</em> name, <em>number</em> pos_x, <em>number</em> pos_y, <em>optional integer</em> condIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>String</em> name, <em>Float</em> pos_x, <em>Float</em> pos_y, <em>Int</em> condInOptional) = ImGui_SetWindowPosEx(ctx, name, pos_x, pos_y, condInOptional)</code></div>
	<p>Set named window position.</p>
</div>

<div class="function_definition" id="ImGui_SetWindowSize">
	<div class="c_func"><code>void ImGui_SetWindowSize(ImGui_Context* ctx, double size_w, double size_h, int* condInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetWindowSize(<em>ImGui_Context</em> ctx, size_w, size_h, <em>optional int</em> condIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetWindowSize", <em>ImGui_Context</em> ctx, size_w, size_h, <em>optional int</em> condIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetWindowSize(<em>ImGui_Context</em> ctx, <em>number</em> size_w, <em>number</em> size_h, <em>optional integer</em> condIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> size_w, <em>Float</em> size_h, <em>Int</em> condInOptional) = ImGui_SetWindowSize(ctx, size_w, size_h, condInOptional)</code></div>
	<p>(Not recommended) Set current window size - call within Begin/End.<br>
Set size_w and size_h to 0 to force an auto-fit.<br>
Prefer using SetNextWindowSize, as this may incur tearing and minor side-effects.</p>
</div>

<div class="function_definition" id="ImGui_SetWindowSizeEx">
	<div class="c_func"><code>void ImGui_SetWindowSizeEx(ImGui_Context* ctx, const char* name, double size_w, double size_h, int* condInOptional)</code></div>
	<div class="e_func"><code>ImGui_SetWindowSizeEx(<em>ImGui_Context</em> ctx, "name", size_w, size_h, <em>optional int</em> condIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_SetWindowSizeEx", <em>ImGui_Context</em> ctx, "name", size_w, size_h, <em>optional int</em> condIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_SetWindowSizeEx(<em>ImGui_Context</em> ctx, <em>string</em> name, <em>number</em> size_w, <em>number</em> size_h, <em>optional integer</em> condIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>String</em> name, <em>Float</em> size_w, <em>Float</em> size_h, <em>Int</em> condInOptional) = ImGui_SetWindowSizeEx(ctx, name, size_w, size_h, condInOptional)</code></div>
	<p>Set named window size. Set axis to 0.0 to force an auto-fit on this axis.</p>
</div>

<div class="function_definition" id="ImGui_ShowAboutWindow">
	<div class="c_func"><code>void ImGui_ShowAboutWindow(ImGui_Context* ctx, bool* p_openInOutOptional)</code></div>
	<div class="e_func"><code>ImGui_ShowAboutWindow(<em>ImGui_Context</em> ctx, <em>optional bool &amp;</em>p_open) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ShowAboutWindow", <em>ImGui_Context</em> ctx, <em>optional bool &amp;</em>p_open) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>optional boolean </em>p_open = reaper.ImGui_ShowAboutWindow(<em>ImGui_Context</em> ctx, <em>optional boolean </em>p_open)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Boolean</em> p_openInOutOptional) = ImGui_ShowAboutWindow(ctx, p_openInOutOptional)</code></div>
	<p>Create About window.<br>
Display ReaImGui version, Dear ImGui version, credits and build/system information.</p>
</div>

<div class="function_definition" id="ImGui_ShowDebugLogWindow">
	<div class="c_func"><code>void ImGui_ShowDebugLogWindow(ImGui_Context* ctx, bool* p_openInOutOptional)</code></div>
	<div class="e_func"><code>ImGui_ShowDebugLogWindow(<em>ImGui_Context</em> ctx, <em>optional bool &amp;</em>p_open) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ShowDebugLogWindow", <em>ImGui_Context</em> ctx, <em>optional bool &amp;</em>p_open) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>optional boolean </em>p_open = reaper.ImGui_ShowDebugLogWindow(<em>ImGui_Context</em> ctx, <em>optional boolean </em>p_open)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Boolean</em> p_openInOutOptional) = ImGui_ShowDebugLogWindow(ctx, p_openInOutOptional)</code></div>
	<p>Create Debug Log window. display a simplified log of important dear imgui events.</p>
</div>

<div class="function_definition" id="ImGui_ShowMetricsWindow">
	<div class="c_func"><code>void ImGui_ShowMetricsWindow(ImGui_Context* ctx, bool* p_openInOutOptional)</code></div>
	<div class="e_func"><code>ImGui_ShowMetricsWindow(<em>ImGui_Context</em> ctx, <em>optional bool &amp;</em>p_open) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ShowMetricsWindow", <em>ImGui_Context</em> ctx, <em>optional bool &amp;</em>p_open) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>optional boolean </em>p_open = reaper.ImGui_ShowMetricsWindow(<em>ImGui_Context</em> ctx, <em>optional boolean </em>p_open)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Boolean</em> p_openInOutOptional) = ImGui_ShowMetricsWindow(ctx, p_openInOutOptional)</code></div>
	<p>Create Metrics/Debugger window.<br>
Display Dear ImGui internals: windows, draw commands, various internal state, etc.</p>
</div>

<div class="function_definition" id="ImGui_ShowStackToolWindow">
	<div class="c_func"><code>void ImGui_ShowStackToolWindow(ImGui_Context* ctx, bool* p_openInOutOptional)</code></div>
	<div class="e_func"><code>ImGui_ShowStackToolWindow(<em>ImGui_Context</em> ctx, <em>optional bool &amp;</em>p_open) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_ShowStackToolWindow", <em>ImGui_Context</em> ctx, <em>optional bool &amp;</em>p_open) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>optional boolean </em>p_open = reaper.ImGui_ShowStackToolWindow(<em>ImGui_Context</em> ctx, <em>optional boolean </em>p_open)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Boolean</em> p_openInOutOptional) = ImGui_ShowStackToolWindow(ctx, p_openInOutOptional)</code></div>
	<p>Create Stack Tool window. Hover items with mouse to query information about<br>
the source of their unique ID.</p>
</div>

<div class="function_definition" id="ImGui_SliderAngle">
	<div class="c_func"><code>bool ImGui_SliderAngle(ImGui_Context* ctx, const char* label, double* v_radInOut, double* v_degrees_minInOptional, double* v_degrees_maxInOptional, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_SliderAngle(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v_rad, <em>optional </em>v_degrees_minIn, <em>optional </em>v_degrees_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_SliderAngle", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v_rad, <em>optional </em>v_degrees_minIn, <em>optional </em>v_degrees_maxIn, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v_rad = reaper.ImGui_SliderAngle(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v_rad, <em>optional number </em>v_degrees_minIn, <em>optional number </em>v_degrees_maxIn, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> v_radInOut, <em>Float</em> v_degrees_minInOptional, <em>Float</em> v_degrees_maxInOptional, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_SliderAngle(ctx, label, v_radInOut, v_degrees_minInOptional, v_degrees_maxInOptional, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_SliderDouble">
	<div class="c_func"><code>bool ImGui_SliderDouble(ImGui_Context* ctx, const char* label, double* vInOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_SliderDouble(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v, v_min, v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_SliderDouble", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v, v_min, v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v = reaper.ImGui_SliderDouble(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v, <em>number</em> v_min, <em>number</em> v_max, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> vInOut, <em>Float</em> v_min, <em>Float</em> v_max, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_SliderDouble(ctx, label, vInOut, v_min, v_max, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_SliderDouble2">
	<div class="c_func"><code>bool ImGui_SliderDouble2(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_SliderDouble2(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, v_min, v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_SliderDouble2", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, v_min, v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v1, <em>number </em>v2 = reaper.ImGui_SliderDouble2(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v1, <em>number </em>v2, <em>number</em> v_min, <em>number</em> v_max, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> v1InOut, <em>Float</em> v2InOut, <em>Float</em> v_min, <em>Float</em> v_max, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_SliderDouble2(ctx, label, v1InOut, v2InOut, v_min, v_max, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_SliderDouble3">
	<div class="c_func"><code>bool ImGui_SliderDouble3(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_SliderDouble3(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>&amp;</em>v3, v_min, v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_SliderDouble3", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>&amp;</em>v3, v_min, v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v1, <em>number </em>v2, <em>number </em>v3 = reaper.ImGui_SliderDouble3(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v1, <em>number </em>v2, <em>number </em>v3, <em>number</em> v_min, <em>number</em> v_max, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> v1InOut, <em>Float</em> v2InOut, <em>Float</em> v3InOut, <em>Float</em> v_min, <em>Float</em> v_max, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_SliderDouble3(ctx, label, v1InOut, v2InOut, v3InOut, v_min, v_max, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_SliderDouble4">
	<div class="c_func"><code>bool ImGui_SliderDouble4(ImGui_Context* ctx, const char* label, double* v1InOut, double* v2InOut, double* v3InOut, double* v4InOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_SliderDouble4(<em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>&amp;</em>v3, <em>&amp;</em>v4, v_min, v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_SliderDouble4", <em>ImGui_Context</em> ctx, "label", <em>&amp;</em>v1, <em>&amp;</em>v2, <em>&amp;</em>v3, <em>&amp;</em>v4, v_min, v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v1, <em>number </em>v2, <em>number </em>v3, <em>number </em>v4 = reaper.ImGui_SliderDouble4(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number </em>v1, <em>number </em>v2, <em>number </em>v3, <em>number </em>v4, <em>number</em> v_min, <em>number</em> v_max, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> v1InOut, <em>Float</em> v2InOut, <em>Float</em> v3InOut, <em>Float</em> v4InOut, <em>Float</em> v_min, <em>Float</em> v_max, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_SliderDouble4(ctx, label, v1InOut, v2InOut, v3InOut, v4InOut, v_min, v_max, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_SliderDoubleN">
	<div class="c_func"><code>bool ImGui_SliderDoubleN(ImGui_Context* ctx, const char* label, reaper_array* values, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_SliderDoubleN(<em>ImGui_Context</em> ctx, "label", <em>reaper_array</em> values, v_min, v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_SliderDoubleN", <em>ImGui_Context</em> ctx, "label", <em>reaper_array</em> values, v_min, v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_SliderDoubleN(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>reaper_array</em> values, <em>number</em> v_min, <em>number</em> v_max, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>reaper_array</em> values, <em>Float</em> v_min, <em>Float</em> v_max, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_SliderDoubleN(ctx, label, values, v_min, v_max, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_SliderFlags_AlwaysClamp">
	<div class="c_func"><code>int ImGui_SliderFlags_AlwaysClamp()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SliderFlags_AlwaysClamp() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SliderFlags_AlwaysClamp") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SliderFlags_AlwaysClamp()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SliderFlags_AlwaysClamp()</code></div>
	<p>Clamp value to min/max bounds when input manually with CTRL+Click.<br>
   By default CTRL+Click allows going out of bounds.</p>
</div>

<div class="function_definition" id="ImGui_SliderFlags_Logarithmic">
	<div class="c_func"><code>int ImGui_SliderFlags_Logarithmic()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SliderFlags_Logarithmic() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SliderFlags_Logarithmic") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SliderFlags_Logarithmic()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SliderFlags_Logarithmic()</code></div>
	<p>Make the widget logarithmic (linear otherwise).<br>
   Consider using SliderFlags_NoRoundToFormat with this if using a format-string<br>
   with small amount of digits.</p>
</div>

<div class="function_definition" id="ImGui_SliderFlags_NoInput">
	<div class="c_func"><code>int ImGui_SliderFlags_NoInput()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SliderFlags_NoInput() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SliderFlags_NoInput") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SliderFlags_NoInput()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SliderFlags_NoInput()</code></div>
	<p>Disable CTRL+Click or Enter key allowing to input text directly into the widget.</p>
</div>

<div class="function_definition" id="ImGui_SliderFlags_NoRoundToFormat">
	<div class="c_func"><code>int ImGui_SliderFlags_NoRoundToFormat()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SliderFlags_NoRoundToFormat() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SliderFlags_NoRoundToFormat") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SliderFlags_NoRoundToFormat()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SliderFlags_NoRoundToFormat()</code></div>
	<p>Disable rounding underlying value to match precision of the display format<br>
   string (e.g. %.3f values are rounded to those 3 digits).</p>
</div>

<div class="function_definition" id="ImGui_SliderFlags_None">
	<div class="c_func"><code>int ImGui_SliderFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SliderFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SliderFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SliderFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SliderFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_SliderInt">
	<div class="c_func"><code>bool ImGui_SliderInt(ImGui_Context* ctx, const char* label, int* vInOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_SliderInt(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v, <em>int </em>v_min, <em>int </em>v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_SliderInt", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v, <em>int </em>v_min, <em>int </em>v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v = reaper.ImGui_SliderInt(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v, <em>integer</em> v_min, <em>integer</em> v_max, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> vInOut, <em>Int</em> v_min, <em>Int</em> v_max, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_SliderInt(ctx, label, vInOut, v_min, v_max, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_SliderInt2">
	<div class="c_func"><code>bool ImGui_SliderInt2(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_SliderInt2(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int </em>v_min, <em>int </em>v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_SliderInt2", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int </em>v_min, <em>int </em>v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v1, <em>integer </em>v2 = reaper.ImGui_SliderInt2(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v1, <em>integer </em>v2, <em>integer</em> v_min, <em>integer</em> v_max, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> v1InOut, <em>Int</em> v2InOut, <em>Int</em> v_min, <em>Int</em> v_max, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_SliderInt2(ctx, label, v1InOut, v2InOut, v_min, v_max, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_SliderInt3">
	<div class="c_func"><code>bool ImGui_SliderInt3(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_SliderInt3(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int &amp;</em>v3, <em>int </em>v_min, <em>int </em>v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_SliderInt3", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int &amp;</em>v3, <em>int </em>v_min, <em>int </em>v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v1, <em>integer </em>v2, <em>integer </em>v3 = reaper.ImGui_SliderInt3(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v1, <em>integer </em>v2, <em>integer </em>v3, <em>integer</em> v_min, <em>integer</em> v_max, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> v1InOut, <em>Int</em> v2InOut, <em>Int</em> v3InOut, <em>Int</em> v_min, <em>Int</em> v_max, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_SliderInt3(ctx, label, v1InOut, v2InOut, v3InOut, v_min, v_max, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_SliderInt4">
	<div class="c_func"><code>bool ImGui_SliderInt4(ImGui_Context* ctx, const char* label, int* v1InOut, int* v2InOut, int* v3InOut, int* v4InOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_SliderInt4(<em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int &amp;</em>v3, <em>int &amp;</em>v4, <em>int </em>v_min, <em>int </em>v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_SliderInt4", <em>ImGui_Context</em> ctx, "label", <em>int &amp;</em>v1, <em>int &amp;</em>v2, <em>int &amp;</em>v3, <em>int &amp;</em>v4, <em>int </em>v_min, <em>int </em>v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v1, <em>integer </em>v2, <em>integer </em>v3, <em>integer </em>v4 = reaper.ImGui_SliderInt4(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>integer </em>v1, <em>integer </em>v2, <em>integer </em>v3, <em>integer </em>v4, <em>integer</em> v_min, <em>integer</em> v_max, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> v1InOut, <em>Int</em> v2InOut, <em>Int</em> v3InOut, <em>Int</em> v4InOut, <em>Int</em> v_min, <em>Int</em> v_max, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_SliderInt4(ctx, label, v1InOut, v2InOut, v3InOut, v4InOut, v_min, v_max, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_SmallButton">
	<div class="c_func"><code>bool ImGui_SmallButton(ImGui_Context* ctx, const char* label)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_SmallButton(<em>ImGui_Context</em> ctx, "label") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_SmallButton", <em>ImGui_Context</em> ctx, "label") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_SmallButton(<em>ImGui_Context</em> ctx, <em>string</em> label)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_SmallButton(<em>ImGui_Context</em> ctx, <em>String</em> label)</code></div>
	<p>Button with StyleVar_FramePadding=(0,0) to easily embed within text.</p>
</div>

<div class="function_definition" id="ImGui_SortDirection_Ascending">
	<div class="c_func"><code>int ImGui_SortDirection_Ascending()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SortDirection_Ascending() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SortDirection_Ascending") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SortDirection_Ascending()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SortDirection_Ascending()</code></div>
	<p>Ascending = 0-&gt;9, A-&gt;Z etc.</p>
</div>

<div class="function_definition" id="ImGui_SortDirection_Descending">
	<div class="c_func"><code>int ImGui_SortDirection_Descending()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SortDirection_Descending() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SortDirection_Descending") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SortDirection_Descending()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SortDirection_Descending()</code></div>
	<p>Descending = 9-&gt;0, Z-&gt;A etc.</p>
</div>

<div class="function_definition" id="ImGui_SortDirection_None">
	<div class="c_func"><code>int ImGui_SortDirection_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_SortDirection_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_SortDirection_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_SortDirection_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_SortDirection_None()</code></div>
</div>

<div class="function_definition" id="ImGui_Spacing">
	<div class="c_func"><code>void ImGui_Spacing(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_Spacing(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Spacing", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Spacing(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_Spacing(<em>ImGui_Context</em> ctx)</code></div>
	<p>Add vertical spacing.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_Alpha">
	<div class="c_func"><code>int ImGui_StyleVar_Alpha()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_Alpha() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_Alpha") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_Alpha()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_Alpha()</code></div>
	<p>Global alpha applies to everything in Dear ImGui.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_ButtonTextAlign">
	<div class="c_func"><code>int ImGui_StyleVar_ButtonTextAlign()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_ButtonTextAlign() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_ButtonTextAlign") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_ButtonTextAlign()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_ButtonTextAlign()</code></div>
	<p>Alignment of button text when button is larger than text.<br>
   Defaults to (0.5, 0.5) (centered).</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_CellPadding">
	<div class="c_func"><code>int ImGui_StyleVar_CellPadding()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_CellPadding() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_CellPadding") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_CellPadding()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_CellPadding()</code></div>
	<p>Padding within a table cell.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_ChildBorderSize">
	<div class="c_func"><code>int ImGui_StyleVar_ChildBorderSize()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_ChildBorderSize() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_ChildBorderSize") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_ChildBorderSize()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_ChildBorderSize()</code></div>
	<p>Thickness of border around child windows. Generally set to 0.0 or 1.0.<br>
   (Other values are not well tested and more CPU/GPU costly).</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_ChildRounding">
	<div class="c_func"><code>int ImGui_StyleVar_ChildRounding()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_ChildRounding() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_ChildRounding") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_ChildRounding()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_ChildRounding()</code></div>
	<p>Radius of child window corners rounding. Set to 0.0 to have rectangular windows.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_DisabledAlpha">
	<div class="c_func"><code>int ImGui_StyleVar_DisabledAlpha()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_DisabledAlpha() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_DisabledAlpha") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_DisabledAlpha()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_DisabledAlpha()</code></div>
	<p>Additional alpha multiplier applied by BeginDisabled.<br>
  Multiply over current value of Alpha.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_FrameBorderSize">
	<div class="c_func"><code>int ImGui_StyleVar_FrameBorderSize()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_FrameBorderSize() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_FrameBorderSize") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_FrameBorderSize()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_FrameBorderSize()</code></div>
	<p>Thickness of border around frames. Generally set to 0.0 or 1.0.<br>
   (Other values are not well tested and more CPU/GPU costly).</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_FramePadding">
	<div class="c_func"><code>int ImGui_StyleVar_FramePadding()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_FramePadding() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_FramePadding") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_FramePadding()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_FramePadding()</code></div>
	<p>Padding within a framed rectangle (used by most widgets).</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_FrameRounding">
	<div class="c_func"><code>int ImGui_StyleVar_FrameRounding()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_FrameRounding() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_FrameRounding") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_FrameRounding()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_FrameRounding()</code></div>
	<p>Radius of frame corners rounding.<br>
   Set to 0.0 to have rectangular frame (used by most widgets).</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_GrabMinSize">
	<div class="c_func"><code>int ImGui_StyleVar_GrabMinSize()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_GrabMinSize() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_GrabMinSize") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_GrabMinSize()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_GrabMinSize()</code></div>
	<p>Minimum width/height of a grab box for slider/scrollbar.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_GrabRounding">
	<div class="c_func"><code>int ImGui_StyleVar_GrabRounding()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_GrabRounding() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_GrabRounding") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_GrabRounding()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_GrabRounding()</code></div>
	<p>Radius of grabs corners rounding. Set to 0.0 to have rectangular slider grabs.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_IndentSpacing">
	<div class="c_func"><code>int ImGui_StyleVar_IndentSpacing()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_IndentSpacing() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_IndentSpacing") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_IndentSpacing()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_IndentSpacing()</code></div>
	<p>Horizontal indentation when e.g. entering a tree node.<br>
   Generally == (GetFontSize + StyleVar_FramePadding.x*2).</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_ItemInnerSpacing">
	<div class="c_func"><code>int ImGui_StyleVar_ItemInnerSpacing()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_ItemInnerSpacing() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_ItemInnerSpacing") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_ItemInnerSpacing()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_ItemInnerSpacing()</code></div>
	<p>Horizontal and vertical spacing between within elements of a composed widget<br>
   (e.g. a slider and its label).</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_ItemSpacing">
	<div class="c_func"><code>int ImGui_StyleVar_ItemSpacing()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_ItemSpacing() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_ItemSpacing") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_ItemSpacing()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_ItemSpacing()</code></div>
	<p>Horizontal and vertical spacing between widgets/lines.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_PopupBorderSize">
	<div class="c_func"><code>int ImGui_StyleVar_PopupBorderSize()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_PopupBorderSize() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_PopupBorderSize") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_PopupBorderSize()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_PopupBorderSize()</code></div>
	<p>Thickness of border around popup/tooltip windows. Generally set to 0.0 or 1.0.<br>
   (Other values are not well tested and more CPU/GPU costly).</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_PopupRounding">
	<div class="c_func"><code>int ImGui_StyleVar_PopupRounding()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_PopupRounding() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_PopupRounding") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_PopupRounding()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_PopupRounding()</code></div>
	<p>Radius of popup window corners rounding.<br>
   (Note that tooltip windows use StyleVar_WindowRounding.)</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_ScrollbarRounding">
	<div class="c_func"><code>int ImGui_StyleVar_ScrollbarRounding()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_ScrollbarRounding() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_ScrollbarRounding") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_ScrollbarRounding()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_ScrollbarRounding()</code></div>
	<p>Radius of grab corners for scrollbar.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_ScrollbarSize">
	<div class="c_func"><code>int ImGui_StyleVar_ScrollbarSize()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_ScrollbarSize() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_ScrollbarSize") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_ScrollbarSize()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_ScrollbarSize()</code></div>
	<p>Width of the vertical scrollbar, Height of the horizontal scrollbar.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_SelectableTextAlign">
	<div class="c_func"><code>int ImGui_StyleVar_SelectableTextAlign()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_SelectableTextAlign() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_SelectableTextAlign") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_SelectableTextAlign()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_SelectableTextAlign()</code></div>
	<p>Alignment of selectable text. Defaults to (0.0, 0.0) (top-left aligned).<br>
   It's generally important to keep this left-aligned if you want to lay<br>
   multiple items on a same line.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_SeparatorTextAlign">
	<div class="c_func"><code>int ImGui_StyleVar_SeparatorTextAlign()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_SeparatorTextAlign() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_SeparatorTextAlign") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_SeparatorTextAlign()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_SeparatorTextAlign()</code></div>
	<p>Alignment of text within the separator.<br>
Defaults to (0.0, 0.5) (left aligned, center).</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_SeparatorTextBorderSize">
	<div class="c_func"><code>int ImGui_StyleVar_SeparatorTextBorderSize()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_SeparatorTextBorderSize() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_SeparatorTextBorderSize") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_SeparatorTextBorderSize()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_SeparatorTextBorderSize()</code></div>
	<p>Thickness of border in SeparatorText()</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_SeparatorTextPadding">
	<div class="c_func"><code>int ImGui_StyleVar_SeparatorTextPadding()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_SeparatorTextPadding() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_SeparatorTextPadding") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_SeparatorTextPadding()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_SeparatorTextPadding()</code></div>
	<p>Horizontal offset of text from each edge of the separator + spacing on other<br>
axis. Generally small values. .y is recommended to be == StyleVar_FramePadding.y.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_TabRounding">
	<div class="c_func"><code>int ImGui_StyleVar_TabRounding()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_TabRounding() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_TabRounding") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_TabRounding()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_TabRounding()</code></div>
	<p>Radius of upper corners of a tab. Set to 0.0 to have rectangular tabs.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_WindowBorderSize">
	<div class="c_func"><code>int ImGui_StyleVar_WindowBorderSize()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_WindowBorderSize() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_WindowBorderSize") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_WindowBorderSize()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_WindowBorderSize()</code></div>
	<p>Thickness of border around windows. Generally set to 0.0 or 1.0.<br>
  (Other values are not well tested and more CPU/GPU costly).</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_WindowMinSize">
	<div class="c_func"><code>int ImGui_StyleVar_WindowMinSize()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_WindowMinSize() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_WindowMinSize") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_WindowMinSize()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_WindowMinSize()</code></div>
	<p>Minimum window size. This is a global setting.<br>
  If you want to constrain individual windows, use SetNextWindowSizeConstraints.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_WindowPadding">
	<div class="c_func"><code>int ImGui_StyleVar_WindowPadding()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_WindowPadding() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_WindowPadding") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_WindowPadding()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_WindowPadding()</code></div>
	<p>Padding within a window.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_WindowRounding">
	<div class="c_func"><code>int ImGui_StyleVar_WindowRounding()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_WindowRounding() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_WindowRounding") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_WindowRounding()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_WindowRounding()</code></div>
	<p>Radius of window corners rounding. Set to 0.0 to have rectangular windows.<br>
  Large values tend to lead to variety of artifacts and are not recommended.</p>
</div>

<div class="function_definition" id="ImGui_StyleVar_WindowTitleAlign">
	<div class="c_func"><code>int ImGui_StyleVar_WindowTitleAlign()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_StyleVar_WindowTitleAlign() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_StyleVar_WindowTitleAlign") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_StyleVar_WindowTitleAlign()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_StyleVar_WindowTitleAlign()</code></div>
	<p>Alignment for title bar text.<br>
   Defaults to (0.0,0.5) for left-aligned,vertically centered.</p>
</div>

<div class="function_definition" id="ImGui_TabBarFlags_AutoSelectNewTabs">
	<div class="c_func"><code>int ImGui_TabBarFlags_AutoSelectNewTabs()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabBarFlags_AutoSelectNewTabs() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabBarFlags_AutoSelectNewTabs") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabBarFlags_AutoSelectNewTabs()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabBarFlags_AutoSelectNewTabs()</code></div>
	<p>Automatically select new tabs when they appear.</p>
</div>

<div class="function_definition" id="ImGui_TabBarFlags_FittingPolicyResizeDown">
	<div class="c_func"><code>int ImGui_TabBarFlags_FittingPolicyResizeDown()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabBarFlags_FittingPolicyResizeDown() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabBarFlags_FittingPolicyResizeDown") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabBarFlags_FittingPolicyResizeDown()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabBarFlags_FittingPolicyResizeDown()</code></div>
	<p>Resize tabs when they don't fit.</p>
</div>

<div class="function_definition" id="ImGui_TabBarFlags_FittingPolicyScroll">
	<div class="c_func"><code>int ImGui_TabBarFlags_FittingPolicyScroll()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabBarFlags_FittingPolicyScroll() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabBarFlags_FittingPolicyScroll") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabBarFlags_FittingPolicyScroll()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabBarFlags_FittingPolicyScroll()</code></div>
	<p>Add scroll buttons when tabs don't fit.</p>
</div>

<div class="function_definition" id="ImGui_TabBarFlags_NoCloseWithMiddleMouseButton">
	<div class="c_func"><code>int ImGui_TabBarFlags_NoCloseWithMiddleMouseButton()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabBarFlags_NoCloseWithMiddleMouseButton() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabBarFlags_NoCloseWithMiddleMouseButton") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabBarFlags_NoCloseWithMiddleMouseButton()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabBarFlags_NoCloseWithMiddleMouseButton()</code></div>
	<p>Disable behavior of closing tabs (that are submitted with p_open != nil)<br>
   with middle mouse button. You can still repro this behavior on user's side<br>
   with if(IsItemHovered() &amp;&amp; IsMouseClicked(2)) p_open = false.</p>
</div>

<div class="function_definition" id="ImGui_TabBarFlags_NoTabListScrollingButtons">
	<div class="c_func"><code>int ImGui_TabBarFlags_NoTabListScrollingButtons()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabBarFlags_NoTabListScrollingButtons() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabBarFlags_NoTabListScrollingButtons") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabBarFlags_NoTabListScrollingButtons()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabBarFlags_NoTabListScrollingButtons()</code></div>
	<p>Disable scrolling buttons (apply when fitting policy is<br>
   TabBarFlags_FittingPolicyScroll).</p>
</div>

<div class="function_definition" id="ImGui_TabBarFlags_NoTooltip">
	<div class="c_func"><code>int ImGui_TabBarFlags_NoTooltip()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabBarFlags_NoTooltip() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabBarFlags_NoTooltip") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabBarFlags_NoTooltip()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabBarFlags_NoTooltip()</code></div>
	<p>Disable tooltips when hovering a tab.</p>
</div>

<div class="function_definition" id="ImGui_TabBarFlags_None">
	<div class="c_func"><code>int ImGui_TabBarFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabBarFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabBarFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabBarFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabBarFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_TabBarFlags_Reorderable">
	<div class="c_func"><code>int ImGui_TabBarFlags_Reorderable()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabBarFlags_Reorderable() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabBarFlags_Reorderable") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabBarFlags_Reorderable()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabBarFlags_Reorderable()</code></div>
	<p>Allow manually dragging tabs to re-order them + New tabs are appended at<br>
   the end of list.</p>
</div>

<div class="function_definition" id="ImGui_TabBarFlags_TabListPopupButton">
	<div class="c_func"><code>int ImGui_TabBarFlags_TabListPopupButton()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabBarFlags_TabListPopupButton() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabBarFlags_TabListPopupButton") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabBarFlags_TabListPopupButton()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabBarFlags_TabListPopupButton()</code></div>
	<p>Disable buttons to open the tab list popup.</p>
</div>

<div class="function_definition" id="ImGui_TabItemButton">
	<div class="c_func"><code>bool ImGui_TabItemButton(ImGui_Context* ctx, const char* label, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_TabItemButton(<em>ImGui_Context</em> ctx, "label", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_TabItemButton", <em>ImGui_Context</em> ctx, "label", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_TabItemButton(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> flagsInOptional) = ImGui_TabItemButton(ctx, label, flagsInOptional)</code></div>
	<p>Create a Tab behaving like a button. Return true when clicked.<br>
Cannot be selected in the tab bar.</p>
</div>

<div class="function_definition" id="ImGui_TabItemFlags_Leading">
	<div class="c_func"><code>int ImGui_TabItemFlags_Leading()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabItemFlags_Leading() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabItemFlags_Leading") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabItemFlags_Leading()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabItemFlags_Leading()</code></div>
	<p>Enforce the tab position to the left of the tab bar (after the tab list popup button).</p>
</div>

<div class="function_definition" id="ImGui_TabItemFlags_NoCloseWithMiddleMouseButton">
	<div class="c_func"><code>int ImGui_TabItemFlags_NoCloseWithMiddleMouseButton()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabItemFlags_NoCloseWithMiddleMouseButton() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabItemFlags_NoCloseWithMiddleMouseButton") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabItemFlags_NoCloseWithMiddleMouseButton()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabItemFlags_NoCloseWithMiddleMouseButton()</code></div>
	<p>Disable behavior of closing tabs (that are submitted with p_open != nil) with<br>
   middle mouse button. You can still repro this behavior on user's side with<br>
   if(IsItemHovered() &amp;&amp; IsMouseClicked(2)) p_open = false.</p>
</div>

<div class="function_definition" id="ImGui_TabItemFlags_NoPushId">
	<div class="c_func"><code>int ImGui_TabItemFlags_NoPushId()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabItemFlags_NoPushId() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabItemFlags_NoPushId") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabItemFlags_NoPushId()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabItemFlags_NoPushId()</code></div>
	<p>Don't call PushID(tab-&gt;ID)/PopID() on BeginTabItem/EndTabItem.</p>
</div>

<div class="function_definition" id="ImGui_TabItemFlags_NoReorder">
	<div class="c_func"><code>int ImGui_TabItemFlags_NoReorder()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabItemFlags_NoReorder() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabItemFlags_NoReorder") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabItemFlags_NoReorder()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabItemFlags_NoReorder()</code></div>
	<p>Disable reordering this tab or having another tab cross over this tab.</p>
</div>

<div class="function_definition" id="ImGui_TabItemFlags_NoTooltip">
	<div class="c_func"><code>int ImGui_TabItemFlags_NoTooltip()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabItemFlags_NoTooltip() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabItemFlags_NoTooltip") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabItemFlags_NoTooltip()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabItemFlags_NoTooltip()</code></div>
	<p>Disable tooltip for the given tab.</p>
</div>

<div class="function_definition" id="ImGui_TabItemFlags_None">
	<div class="c_func"><code>int ImGui_TabItemFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabItemFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabItemFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabItemFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabItemFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_TabItemFlags_SetSelected">
	<div class="c_func"><code>int ImGui_TabItemFlags_SetSelected()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabItemFlags_SetSelected() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabItemFlags_SetSelected") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabItemFlags_SetSelected()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabItemFlags_SetSelected()</code></div>
	<p>Trigger flag to programmatically make the tab selected when calling BeginTabItem.</p>
</div>

<div class="function_definition" id="ImGui_TabItemFlags_Trailing">
	<div class="c_func"><code>int ImGui_TabItemFlags_Trailing()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabItemFlags_Trailing() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabItemFlags_Trailing") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabItemFlags_Trailing()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabItemFlags_Trailing()</code></div>
	<p>Enforce the tab position to the right of the tab bar (before the scrolling buttons).</p>
</div>

<div class="function_definition" id="ImGui_TabItemFlags_UnsavedDocument">
	<div class="c_func"><code>int ImGui_TabItemFlags_UnsavedDocument()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TabItemFlags_UnsavedDocument() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TabItemFlags_UnsavedDocument") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TabItemFlags_UnsavedDocument()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TabItemFlags_UnsavedDocument()</code></div>
	<p>Append '*' to title without affecting the ID, as a convenience to avoid using<br>
   the ### operator. Also: tab is selected on closure and closure is deferred by<br>
   one frame to allow code to undo it without flicker.</p>
</div>

<div class="function_definition" id="ImGui_TableBgTarget_CellBg">
	<div class="c_func"><code>int ImGui_TableBgTarget_CellBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableBgTarget_CellBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableBgTarget_CellBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableBgTarget_CellBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableBgTarget_CellBg()</code></div>
	<p>Set cell background color (top-most color).</p>
</div>

<div class="function_definition" id="ImGui_TableBgTarget_None">
	<div class="c_func"><code>int ImGui_TableBgTarget_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableBgTarget_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableBgTarget_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableBgTarget_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableBgTarget_None()</code></div>
</div>

<div class="function_definition" id="ImGui_TableBgTarget_RowBg0">
	<div class="c_func"><code>int ImGui_TableBgTarget_RowBg0()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableBgTarget_RowBg0() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableBgTarget_RowBg0") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableBgTarget_RowBg0()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableBgTarget_RowBg0()</code></div>
	<p>Set row background color 0 (generally used for background,<br>
   automatically set when TableFlags_RowBg is used).</p>
</div>

<div class="function_definition" id="ImGui_TableBgTarget_RowBg1">
	<div class="c_func"><code>int ImGui_TableBgTarget_RowBg1()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableBgTarget_RowBg1() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableBgTarget_RowBg1") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableBgTarget_RowBg1()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableBgTarget_RowBg1()</code></div>
	<p>Set row background color 1 (generally used for selection marking).</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_DefaultHide">
	<div class="c_func"><code>int ImGui_TableColumnFlags_DefaultHide()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_DefaultHide() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_DefaultHide") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_DefaultHide()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_DefaultHide()</code></div>
	<p>Default as a hidden/disabled column.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_DefaultSort">
	<div class="c_func"><code>int ImGui_TableColumnFlags_DefaultSort()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_DefaultSort() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_DefaultSort") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_DefaultSort()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_DefaultSort()</code></div>
	<p>Default as a sorting column.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_Disabled">
	<div class="c_func"><code>int ImGui_TableColumnFlags_Disabled()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_Disabled() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_Disabled") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_Disabled()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_Disabled()</code></div>
	<p>Overriding/master disable flag: hide column, won't show in context menu<br>
   (unlike calling TableSetColumnEnabled which manipulates the user accessible state).</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_IndentDisable">
	<div class="c_func"><code>int ImGui_TableColumnFlags_IndentDisable()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_IndentDisable() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_IndentDisable") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_IndentDisable()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_IndentDisable()</code></div>
	<p>Ignore current Indent value when entering cell (default for columns &gt; 0).<br>
   Indentation changes _within_ the cell will still be honored.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_IndentEnable">
	<div class="c_func"><code>int ImGui_TableColumnFlags_IndentEnable()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_IndentEnable() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_IndentEnable") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_IndentEnable()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_IndentEnable()</code></div>
	<p>Use current Indent value when entering cell (default for column 0).</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_IsEnabled">
	<div class="c_func"><code>int ImGui_TableColumnFlags_IsEnabled()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_IsEnabled() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_IsEnabled") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_IsEnabled()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_IsEnabled()</code></div>
	<p>Status: is enabled == not hidden by user/api (referred to as "Hide" in<br>
   _DefaultHide and _NoHide) flags.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_IsHovered">
	<div class="c_func"><code>int ImGui_TableColumnFlags_IsHovered()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_IsHovered() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_IsHovered") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_IsHovered()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_IsHovered()</code></div>
	<p>Status: is hovered by mouse.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_IsSorted">
	<div class="c_func"><code>int ImGui_TableColumnFlags_IsSorted()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_IsSorted() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_IsSorted") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_IsSorted()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_IsSorted()</code></div>
	<p>Status: is currently part of the sort specs.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_IsVisible">
	<div class="c_func"><code>int ImGui_TableColumnFlags_IsVisible()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_IsVisible() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_IsVisible") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_IsVisible()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_IsVisible()</code></div>
	<p>Status: is visible == is enabled AND not clipped by scrolling.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_NoClip">
	<div class="c_func"><code>int ImGui_TableColumnFlags_NoClip()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_NoClip() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_NoClip") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_NoClip()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_NoClip()</code></div>
	<p>Disable clipping for this column<br>
   (all NoClip columns will render in a same draw command).</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_NoHeaderLabel">
	<div class="c_func"><code>int ImGui_TableColumnFlags_NoHeaderLabel()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_NoHeaderLabel() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_NoHeaderLabel") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_NoHeaderLabel()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_NoHeaderLabel()</code></div>
	<p>TableHeadersRow will not submit label for this column.<br>
   Convenient for some small columns. Name will still appear in context menu.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_NoHeaderWidth">
	<div class="c_func"><code>int ImGui_TableColumnFlags_NoHeaderWidth()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_NoHeaderWidth() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_NoHeaderWidth") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_NoHeaderWidth()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_NoHeaderWidth()</code></div>
	<p>Disable header text width contribution to automatic column width.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_NoHide">
	<div class="c_func"><code>int ImGui_TableColumnFlags_NoHide()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_NoHide() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_NoHide") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_NoHide()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_NoHide()</code></div>
	<p>Disable ability to hide/disable this column.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_NoReorder">
	<div class="c_func"><code>int ImGui_TableColumnFlags_NoReorder()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_NoReorder() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_NoReorder") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_NoReorder()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_NoReorder()</code></div>
	<p>Disable manual reordering this column, this will also prevent other columns<br>
   from crossing over this column.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_NoResize">
	<div class="c_func"><code>int ImGui_TableColumnFlags_NoResize()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_NoResize() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_NoResize") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_NoResize()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_NoResize()</code></div>
	<p>Disable manual resizing.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_NoSort">
	<div class="c_func"><code>int ImGui_TableColumnFlags_NoSort()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_NoSort() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_NoSort") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_NoSort()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_NoSort()</code></div>
	<p>Disable ability to sort on this field<br>
   (even if TableFlags_Sortable is set on the table).</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_NoSortAscending">
	<div class="c_func"><code>int ImGui_TableColumnFlags_NoSortAscending()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_NoSortAscending() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_NoSortAscending") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_NoSortAscending()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_NoSortAscending()</code></div>
	<p>Disable ability to sort in the ascending direction.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_NoSortDescending">
	<div class="c_func"><code>int ImGui_TableColumnFlags_NoSortDescending()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_NoSortDescending() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_NoSortDescending") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_NoSortDescending()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_NoSortDescending()</code></div>
	<p>Disable ability to sort in the descending direction.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_None">
	<div class="c_func"><code>int ImGui_TableColumnFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_PreferSortAscending">
	<div class="c_func"><code>int ImGui_TableColumnFlags_PreferSortAscending()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_PreferSortAscending() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_PreferSortAscending") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_PreferSortAscending()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_PreferSortAscending()</code></div>
	<p>Make the initial sort direction Ascending when first sorting on this column (default).</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_PreferSortDescending">
	<div class="c_func"><code>int ImGui_TableColumnFlags_PreferSortDescending()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_PreferSortDescending() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_PreferSortDescending") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_PreferSortDescending()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_PreferSortDescending()</code></div>
	<p>Make the initial sort direction Descending when first sorting on this column.</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_WidthFixed">
	<div class="c_func"><code>int ImGui_TableColumnFlags_WidthFixed()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_WidthFixed() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_WidthFixed") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_WidthFixed()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_WidthFixed()</code></div>
	<p>Column will not stretch. Preferable with horizontal scrolling enabled<br>
   (default if table sizing policy is _SizingFixedFit and table is resizable).</p>
</div>

<div class="function_definition" id="ImGui_TableColumnFlags_WidthStretch">
	<div class="c_func"><code>int ImGui_TableColumnFlags_WidthStretch()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableColumnFlags_WidthStretch() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableColumnFlags_WidthStretch") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableColumnFlags_WidthStretch()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableColumnFlags_WidthStretch()</code></div>
	<p>Column will stretch. Preferable with horizontal scrolling disabled<br>
   (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_Borders">
	<div class="c_func"><code>int ImGui_TableFlags_Borders()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_Borders() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_Borders") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_Borders()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_Borders()</code></div>
	<p>Draw all borders.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_BordersH">
	<div class="c_func"><code>int ImGui_TableFlags_BordersH()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_BordersH() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_BordersH") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_BordersH()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_BordersH()</code></div>
	<p>Draw horizontal borders.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_BordersInner">
	<div class="c_func"><code>int ImGui_TableFlags_BordersInner()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_BordersInner() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_BordersInner") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_BordersInner()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_BordersInner()</code></div>
	<p>Draw inner borders.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_BordersInnerH">
	<div class="c_func"><code>int ImGui_TableFlags_BordersInnerH()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_BordersInnerH() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_BordersInnerH") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_BordersInnerH()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_BordersInnerH()</code></div>
	<p>Draw horizontal borders between rows.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_BordersInnerV">
	<div class="c_func"><code>int ImGui_TableFlags_BordersInnerV()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_BordersInnerV() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_BordersInnerV") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_BordersInnerV()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_BordersInnerV()</code></div>
	<p>Draw vertical borders between columns.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_BordersOuter">
	<div class="c_func"><code>int ImGui_TableFlags_BordersOuter()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_BordersOuter() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_BordersOuter") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_BordersOuter()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_BordersOuter()</code></div>
	<p>Draw outer borders.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_BordersOuterH">
	<div class="c_func"><code>int ImGui_TableFlags_BordersOuterH()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_BordersOuterH() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_BordersOuterH") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_BordersOuterH()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_BordersOuterH()</code></div>
	<p>Draw horizontal borders at the top and bottom.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_BordersOuterV">
	<div class="c_func"><code>int ImGui_TableFlags_BordersOuterV()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_BordersOuterV() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_BordersOuterV") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_BordersOuterV()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_BordersOuterV()</code></div>
	<p>Draw vertical borders on the left and right sides.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_BordersV">
	<div class="c_func"><code>int ImGui_TableFlags_BordersV()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_BordersV() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_BordersV") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_BordersV()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_BordersV()</code></div>
	<p>Draw vertical borders.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_ContextMenuInBody">
	<div class="c_func"><code>int ImGui_TableFlags_ContextMenuInBody()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_ContextMenuInBody() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_ContextMenuInBody") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_ContextMenuInBody()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_ContextMenuInBody()</code></div>
	<p>Right-click on columns body/contents will display table context menu.<br>
   By default it is available in TableHeadersRow.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_Hideable">
	<div class="c_func"><code>int ImGui_TableFlags_Hideable()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_Hideable() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_Hideable") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_Hideable()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_Hideable()</code></div>
	<p>Enable hiding/disabling columns in context menu.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_NoClip">
	<div class="c_func"><code>int ImGui_TableFlags_NoClip()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_NoClip() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_NoClip") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_NoClip()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_NoClip()</code></div>
	<p>Disable clipping rectangle for every individual columns<br>
   (reduce draw command count, items will be able to overflow into other columns).<br>
   Generally incompatible with TableSetupScrollFreeze.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_NoHostExtendX">
	<div class="c_func"><code>int ImGui_TableFlags_NoHostExtendX()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_NoHostExtendX() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_NoHostExtendX") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_NoHostExtendX()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_NoHostExtendX()</code></div>
	<p>Make outer width auto-fit to columns, overriding outer_size.x value. Only<br>
   available when ScrollX/ScrollY are disabled and Stretch columns are not used.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_NoHostExtendY">
	<div class="c_func"><code>int ImGui_TableFlags_NoHostExtendY()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_NoHostExtendY() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_NoHostExtendY") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_NoHostExtendY()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_NoHostExtendY()</code></div>
	<p>Make outer height stop exactly at outer_size.y (prevent auto-extending table<br>
   past the limit). Only available when ScrollX/ScrollY are disabled.<br>
   Data below the limit will be clipped and not visible.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_NoKeepColumnsVisible">
	<div class="c_func"><code>int ImGui_TableFlags_NoKeepColumnsVisible()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_NoKeepColumnsVisible() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_NoKeepColumnsVisible") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_NoKeepColumnsVisible()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_NoKeepColumnsVisible()</code></div>
	<p>Disable keeping column always minimally visible when ScrollX is off and table<br>
   gets too small. Not recommended if columns are resizable.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_NoPadInnerX">
	<div class="c_func"><code>int ImGui_TableFlags_NoPadInnerX()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_NoPadInnerX() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_NoPadInnerX") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_NoPadInnerX()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_NoPadInnerX()</code></div>
	<p>Disable inner padding between columns (double inner padding if<br>
   TableFlags_BordersOuterV is on, single inner padding if BordersOuterV is off).</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_NoPadOuterX">
	<div class="c_func"><code>int ImGui_TableFlags_NoPadOuterX()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_NoPadOuterX() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_NoPadOuterX") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_NoPadOuterX()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_NoPadOuterX()</code></div>
	<p>Default if TableFlags_BordersOuterV is off. Disable outermost padding.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_NoSavedSettings">
	<div class="c_func"><code>int ImGui_TableFlags_NoSavedSettings()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_NoSavedSettings() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_NoSavedSettings") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_NoSavedSettings()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_NoSavedSettings()</code></div>
	<p>Disable persisting columns order, width and sort settings in the .ini file.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_None">
	<div class="c_func"><code>int ImGui_TableFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_TableFlags_PadOuterX">
	<div class="c_func"><code>int ImGui_TableFlags_PadOuterX()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_PadOuterX() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_PadOuterX") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_PadOuterX()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_PadOuterX()</code></div>
	<p>Default if TableFlags_BordersOuterV is on. Enable outermost padding.<br>
   Generally desirable if you have headers.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_PreciseWidths">
	<div class="c_func"><code>int ImGui_TableFlags_PreciseWidths()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_PreciseWidths() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_PreciseWidths") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_PreciseWidths()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_PreciseWidths()</code></div>
	<p>Disable distributing remainder width to stretched columns (width allocation<br>
   on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this<br>
   flag: 33,33,33).<br>
   With larger number of columns, resizing will appear to be less smooth.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_Reorderable">
	<div class="c_func"><code>int ImGui_TableFlags_Reorderable()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_Reorderable() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_Reorderable") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_Reorderable()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_Reorderable()</code></div>
	<p>Enable reordering columns in header row<br>
   (need calling TableSetupColumn + TableHeadersRow to display headers).</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_Resizable">
	<div class="c_func"><code>int ImGui_TableFlags_Resizable()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_Resizable() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_Resizable") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_Resizable()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_Resizable()</code></div>
	<p>Enable resizing columns.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_RowBg">
	<div class="c_func"><code>int ImGui_TableFlags_RowBg()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_RowBg() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_RowBg") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_RowBg()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_RowBg()</code></div>
	<p>Set each RowBg color with Col_TableRowBg or Col_TableRowBgAlt (equivalent of<br>
   calling TableSetBgColor with TableBgTarget_RowBg0 on each row manually).</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_ScrollX">
	<div class="c_func"><code>int ImGui_TableFlags_ScrollX()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_ScrollX() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_ScrollX") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_ScrollX()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_ScrollX()</code></div>
	<p>Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable to<br>
   specify the container size. Changes default sizing policy.<br>
   Because this creates a child window, ScrollY is currently generally<br>
   recommended when using ScrollX.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_ScrollY">
	<div class="c_func"><code>int ImGui_TableFlags_ScrollY()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_ScrollY() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_ScrollY") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_ScrollY()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_ScrollY()</code></div>
	<p>Enable vertical scrolling.<br>
   Require 'outer_size' parameter of BeginTable to specify the container size.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_SizingFixedFit">
	<div class="c_func"><code>int ImGui_TableFlags_SizingFixedFit()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_SizingFixedFit() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_SizingFixedFit") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_SizingFixedFit()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_SizingFixedFit()</code></div>
	<p>Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),<br>
   matching contents width.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_SizingFixedSame">
	<div class="c_func"><code>int ImGui_TableFlags_SizingFixedSame()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_SizingFixedSame() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_SizingFixedSame") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_SizingFixedSame()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_SizingFixedSame()</code></div>
	<p>Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),<br>
   matching the maximum contents width of all columns.<br>
   Implicitly enable TableFlags_NoKeepColumnsVisible.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_SizingStretchProp">
	<div class="c_func"><code>int ImGui_TableFlags_SizingStretchProp()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_SizingStretchProp() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_SizingStretchProp") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_SizingStretchProp()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_SizingStretchProp()</code></div>
	<p>Columns default to _WidthStretch with default weights proportional to each<br>
   columns contents widths.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_SizingStretchSame">
	<div class="c_func"><code>int ImGui_TableFlags_SizingStretchSame()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_SizingStretchSame() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_SizingStretchSame") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_SizingStretchSame()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_SizingStretchSame()</code></div>
	<p>Columns default to _WidthStretch with default weights all equal,<br>
   unless overriden by TableSetupColumn.</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_SortMulti">
	<div class="c_func"><code>int ImGui_TableFlags_SortMulti()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_SortMulti() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_SortMulti") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_SortMulti()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_SortMulti()</code></div>
	<p>Hold shift when clicking headers to sort on multiple column.<br>
   TableGetGetSortSpecs may return specs where (SpecsCount &gt; 1).</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_SortTristate">
	<div class="c_func"><code>int ImGui_TableFlags_SortTristate()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_SortTristate() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_SortTristate") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_SortTristate()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_SortTristate()</code></div>
	<p>Allow no sorting, disable default sorting.<br>
   TableGetColumnSortSpecs may return specs where (SpecsCount == 0).</p>
</div>

<div class="function_definition" id="ImGui_TableFlags_Sortable">
	<div class="c_func"><code>int ImGui_TableFlags_Sortable()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableFlags_Sortable() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableFlags_Sortable") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableFlags_Sortable()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableFlags_Sortable()</code></div>
	<p>Enable sorting. Call TableNeedSort/TableGetColumnSortSpecs to obtain sort specs.<br>
   Also see TableFlags_SortMulti and TableFlags_SortTristate.</p>
</div>

<div class="function_definition" id="ImGui_TableGetColumnCount">
	<div class="c_func"><code>int ImGui_TableGetColumnCount(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableGetColumnCount(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableGetColumnCount", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableGetColumnCount(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableGetColumnCount(<em>ImGui_Context</em> ctx)</code></div>
	<p>Return number of columns (value passed to BeginTable).</p>
</div>

<div class="function_definition" id="ImGui_TableGetColumnFlags">
	<div class="c_func"><code>int ImGui_TableGetColumnFlags(ImGui_Context* ctx, int* column_nInOptional)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableGetColumnFlags(<em>ImGui_Context</em> ctx, <em>optional int</em> column_nIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableGetColumnFlags", <em>ImGui_Context</em> ctx, <em>optional int</em> column_nIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableGetColumnFlags(<em>ImGui_Context</em> ctx, <em>optional integer</em> column_nIn)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> column_nInOptional) = ImGui_TableGetColumnFlags(ctx, column_nInOptional)</code></div>
	<p>Return column flags so you can query their Enabled/Visible/Sorted/Hovered<br>
status flags. Pass -1 to use current column.</p>
</div>

<div class="function_definition" id="ImGui_TableGetColumnIndex">
	<div class="c_func"><code>int ImGui_TableGetColumnIndex(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableGetColumnIndex(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableGetColumnIndex", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableGetColumnIndex(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableGetColumnIndex(<em>ImGui_Context</em> ctx)</code></div>
	<p>Return current column index.</p>
</div>

<div class="function_definition" id="ImGui_TableGetColumnName">
	<div class="c_func"><code>const char* ImGui_TableGetColumnName(ImGui_Context* ctx, int* column_nInOptional)</code></div>
	<div class="e_func"><code>bool  ImGui_TableGetColumnName(#retval, <em>ImGui_Context</em> ctx, <em>optional int</em> column_nIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>bool  extension_api("ImGui_TableGetColumnName", #retval, <em>ImGui_Context</em> ctx, <em>optional int</em> column_nIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string</em> reaper.ImGui_TableGetColumnName(<em>ImGui_Context</em> ctx, <em>optional integer</em> column_nIn)</code></div>
	<div class="p_func"><code>(<em>String</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> column_nInOptional) = ImGui_TableGetColumnName(ctx, column_nInOptional)</code></div>
	<p>Return "" if column didn't have a name declared by TableSetupColumn.<br>
Pass -1 to use current column.</p>
</div>

<div class="function_definition" id="ImGui_TableGetColumnSortSpecs">
	<div class="c_func"><code>bool ImGui_TableGetColumnSortSpecs(ImGui_Context* ctx, int id, int* column_user_idOut, int* column_indexOut, int* sort_orderOut, int* sort_directionOut)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_TableGetColumnSortSpecs(<em>ImGui_Context</em> ctx, <em>int </em>id, <em>int &amp;</em>column_user_id, <em>int &amp;</em>column_index, <em>int &amp;</em>sort_order, <em>int &amp;</em>sort_direction) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_TableGetColumnSortSpecs", <em>ImGui_Context</em> ctx, <em>int </em>id, <em>int &amp;</em>column_user_id, <em>int &amp;</em>column_index, <em>int &amp;</em>sort_order, <em>int &amp;</em>sort_direction) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>column_user_id, <em>integer </em>column_index, <em>integer </em>sort_order, <em>integer </em>sort_direction = reaper.ImGui_TableGetColumnSortSpecs(<em>ImGui_Context</em> ctx, <em>integer</em> id)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Int</em> id, <em>Int</em> column_user_idOut, <em>Int</em> column_indexOut, <em>Int</em> sort_orderOut, <em>Int</em> sort_directionOut) = ImGui_TableGetColumnSortSpecs(ctx, id, column_user_idOut, column_indexOut, sort_orderOut, sort_directionOut)</code></div>
	<p>Sorting specification for one column of a table.<br>
Call while incrementing 'id' from 0 until false is returned.<br>
</p><p>
- ColumnUserID:  User id of the column (if specified by a TableSetupColumn call)<br>
- ColumnIndex:   Index of the column<br>
- SortOrder:     Index within parent SortSpecs (always stored in order starting<br>
  from 0, tables sorted on a single criteria will always have a 0 here)<br>
- SortDirection: SortDirection_Ascending or SortDirection_Descending<br>
  (you can use this or SortSign, whichever is more convenient for your sort<br>
  function)<br>
</p><p>
See TableNeedSort.</p>
</div>

<div class="function_definition" id="ImGui_TableGetRowIndex">
	<div class="c_func"><code>int ImGui_TableGetRowIndex(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableGetRowIndex(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableGetRowIndex", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableGetRowIndex(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableGetRowIndex(<em>ImGui_Context</em> ctx)</code></div>
	<p>Return current row index.</p>
</div>

<div class="function_definition" id="ImGui_TableHeader">
	<div class="c_func"><code>void ImGui_TableHeader(ImGui_Context* ctx, const char* label)</code></div>
	<div class="e_func"><code>ImGui_TableHeader(<em>ImGui_Context</em> ctx, "label") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TableHeader", <em>ImGui_Context</em> ctx, "label") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TableHeader(<em>ImGui_Context</em> ctx, <em>string</em> label)</code></div>
	<div class="p_func"><code>ImGui_TableHeader(<em>ImGui_Context</em> ctx, <em>String</em> label)</code></div>
	<p>Submit one header cell manually (rarely used). See TableSetupColumn.</p>
</div>

<div class="function_definition" id="ImGui_TableHeadersRow">
	<div class="c_func"><code>void ImGui_TableHeadersRow(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_TableHeadersRow(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TableHeadersRow", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TableHeadersRow(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_TableHeadersRow(<em>ImGui_Context</em> ctx)</code></div>
	<p>Submit all headers cells based on data provided to TableSetupColumn +<br>
submit context menu.</p>
</div>

<div class="function_definition" id="ImGui_TableNeedSort">
	<div class="c_func"><code>bool ImGui_TableNeedSort(ImGui_Context* ctx, bool* has_specsOut)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_TableNeedSort(<em>ImGui_Context</em> ctx, <em>bool &amp;</em>has_specs) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_TableNeedSort", <em>ImGui_Context</em> ctx, <em>bool &amp;</em>has_specs) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>has_specs = reaper.ImGui_TableNeedSort(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>Boolean</em> has_specsOut) = ImGui_TableNeedSort(ctx, has_specsOut)</code></div>
	<p>Return true once when sorting specs have changed since last call,<br>
or the first time. 'has_specs' is false when not sorting.<br>
</p><p>
See TableGetColumnSortSpecs.</p>
</div>

<div class="function_definition" id="ImGui_TableNextColumn">
	<div class="c_func"><code>bool ImGui_TableNextColumn(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_TableNextColumn(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_TableNextColumn", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_TableNextColumn(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_TableNextColumn(<em>ImGui_Context</em> ctx)</code></div>
	<p>Append into the next column (or first column of next row if currently in<br>
last column). Return true when column is visible.</p>
</div>

<div class="function_definition" id="ImGui_TableNextRow">
	<div class="c_func"><code>void ImGui_TableNextRow(ImGui_Context* ctx, int* row_flagsInOptional, double* min_row_heightInOptional)</code></div>
	<div class="e_func"><code>ImGui_TableNextRow(<em>ImGui_Context</em> ctx, <em>optional int</em> row_flagsIn, <em>optional </em>min_row_heightIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TableNextRow", <em>ImGui_Context</em> ctx, <em>optional int</em> row_flagsIn, <em>optional </em>min_row_heightIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TableNextRow(<em>ImGui_Context</em> ctx, <em>optional integer</em> row_flagsIn, <em>optional number </em>min_row_heightIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Int</em> row_flagsInOptional, <em>Float</em> min_row_heightInOptional) = ImGui_TableNextRow(ctx, row_flagsInOptional, min_row_heightInOptional)</code></div>
	<p>Append into the first cell of a new row.</p>
</div>

<div class="function_definition" id="ImGui_TableRowFlags_Headers">
	<div class="c_func"><code>int ImGui_TableRowFlags_Headers()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableRowFlags_Headers() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableRowFlags_Headers") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableRowFlags_Headers()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableRowFlags_Headers()</code></div>
	<p>Identify header row (set default background color + width of its contents<br>
   accounted different for auto column width).</p>
</div>

<div class="function_definition" id="ImGui_TableRowFlags_None">
	<div class="c_func"><code>int ImGui_TableRowFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TableRowFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TableRowFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TableRowFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TableRowFlags_None()</code></div>
	<p>For TableNextRow.</p>
</div>

<div class="function_definition" id="ImGui_TableSetBgColor">
	<div class="c_func"><code>void ImGui_TableSetBgColor(ImGui_Context* ctx, int target, int color_rgba, int* column_nInOptional)</code></div>
	<div class="e_func"><code>ImGui_TableSetBgColor(<em>ImGui_Context</em> ctx, <em>int </em>target, <em>int </em>color_rgba, <em>optional int</em> column_nIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TableSetBgColor", <em>ImGui_Context</em> ctx, <em>int </em>target, <em>int </em>color_rgba, <em>optional int</em> column_nIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TableSetBgColor(<em>ImGui_Context</em> ctx, <em>integer</em> target, <em>integer</em> color_rgba, <em>optional integer</em> column_nIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Int</em> target, <em>Int</em> color_rgba, <em>Int</em> column_nInOptional) = ImGui_TableSetBgColor(ctx, target, color_rgba, column_nInOptional)</code></div>
	<p>Change the color of a cell, row, or column.<br>
See TableBgTarget_* flags for details.</p>
</div>

<div class="function_definition" id="ImGui_TableSetColumnEnabled">
	<div class="c_func"><code>void ImGui_TableSetColumnEnabled(ImGui_Context* ctx, int column_n, bool v)</code></div>
	<div class="e_func"><code>ImGui_TableSetColumnEnabled(<em>ImGui_Context</em> ctx, <em>int </em>column_n, <em>bool </em>v) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TableSetColumnEnabled", <em>ImGui_Context</em> ctx, <em>int </em>column_n, <em>bool </em>v) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TableSetColumnEnabled(<em>ImGui_Context</em> ctx, <em>integer</em> column_n, <em>boolean</em> v)</code></div>
	<div class="p_func"><code>ImGui_TableSetColumnEnabled(<em>ImGui_Context</em> ctx, <em>Int</em> column_n, <em>Boolean</em> v)</code></div>
	<p>Change user-accessible enabled/disabled state of a column, set to false to<br>
hide the column. Note that end-user can use the context menu to change this<br>
themselves (right-click in headers, or right-click in columns body with<br>
TableFlags_ContextMenuInBody).<br>
</p><p>
- Require table to have the TableFlags_Hideable flag because we are manipulating<br>
  user accessible state.<br>
- Request will be applied during next layout, which happens on the first call to<br>
  TableNextRow after Begin_Table.<br>
- For the getter you can test<br>
  (TableGetColumnFlags() &amp; TableColumnFlags_IsEnabled) != 0.</p>
</div>

<div class="function_definition" id="ImGui_TableSetColumnIndex">
	<div class="c_func"><code>bool ImGui_TableSetColumnIndex(ImGui_Context* ctx, int column_n)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_TableSetColumnIndex(<em>ImGui_Context</em> ctx, <em>int </em>column_n) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_TableSetColumnIndex", <em>ImGui_Context</em> ctx, <em>int </em>column_n) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_TableSetColumnIndex(<em>ImGui_Context</em> ctx, <em>integer</em> column_n)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_TableSetColumnIndex(<em>ImGui_Context</em> ctx, <em>Int</em> column_n)</code></div>
	<p>Append into the specified column. Return true when column is visible.</p>
</div>

<div class="function_definition" id="ImGui_TableSetupColumn">
	<div class="c_func"><code>void ImGui_TableSetupColumn(ImGui_Context* ctx, const char* label, int* flagsInOptional, double* init_width_or_weightInOptional, int* user_idInOptional)</code></div>
	<div class="e_func"><code>ImGui_TableSetupColumn(<em>ImGui_Context</em> ctx, "label", <em>optional int</em> flagsIn, <em>optional </em>init_width_or_weightIn, <em>optional int</em> user_idIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TableSetupColumn", <em>ImGui_Context</em> ctx, "label", <em>optional int</em> flagsIn, <em>optional </em>init_width_or_weightIn, <em>optional int</em> user_idIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TableSetupColumn(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>optional integer</em> flagsIn, <em>optional number </em>init_width_or_weightIn, <em>optional integer</em> user_idIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> flagsInOptional, <em>Float</em> init_width_or_weightInOptional, <em>Int</em> user_idInOptional) = ImGui_TableSetupColumn(ctx, label, flagsInOptional, init_width_or_weightInOptional, user_idInOptional)</code></div>
	<p>Use to specify label, resizing policy, default width/weight, id,<br>
various other flags etc.</p>
</div>

<div class="function_definition" id="ImGui_TableSetupScrollFreeze">
	<div class="c_func"><code>void ImGui_TableSetupScrollFreeze(ImGui_Context* ctx, int cols, int rows)</code></div>
	<div class="e_func"><code>ImGui_TableSetupScrollFreeze(<em>ImGui_Context</em> ctx, <em>int </em>cols, <em>int </em>rows) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TableSetupScrollFreeze", <em>ImGui_Context</em> ctx, <em>int </em>cols, <em>int </em>rows) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TableSetupScrollFreeze(<em>ImGui_Context</em> ctx, <em>integer</em> cols, <em>integer</em> rows)</code></div>
	<div class="p_func"><code>ImGui_TableSetupScrollFreeze(<em>ImGui_Context</em> ctx, <em>Int</em> cols, <em>Int</em> rows)</code></div>
	<p>Lock columns/rows so they stay visible when scrolled.</p>
</div>

<div class="function_definition" id="ImGui_Text">
	<div class="c_func"><code>void ImGui_Text(ImGui_Context* ctx, const char* text)</code></div>
	<div class="e_func"><code>ImGui_Text(<em>ImGui_Context</em> ctx, "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Text", <em>ImGui_Context</em> ctx, "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Text(<em>ImGui_Context</em> ctx, <em>string</em> text)</code></div>
	<div class="p_func"><code>ImGui_Text(<em>ImGui_Context</em> ctx, <em>String</em> text)</code></div>
</div>

<div class="function_definition" id="ImGui_TextColored">
	<div class="c_func"><code>void ImGui_TextColored(ImGui_Context* ctx, int col_rgba, const char* text)</code></div>
	<div class="e_func"><code>ImGui_TextColored(<em>ImGui_Context</em> ctx, <em>int </em>col_rgba, "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TextColored", <em>ImGui_Context</em> ctx, <em>int </em>col_rgba, "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TextColored(<em>ImGui_Context</em> ctx, <em>integer</em> col_rgba, <em>string</em> text)</code></div>
	<div class="p_func"><code>ImGui_TextColored(<em>ImGui_Context</em> ctx, <em>Int</em> col_rgba, <em>String</em> text)</code></div>
	<p>Shortcut for PushStyleColor(Col_Text, color); Text(text); PopStyleColor();</p>
</div>

<div class="function_definition" id="ImGui_TextDisabled">
	<div class="c_func"><code>void ImGui_TextDisabled(ImGui_Context* ctx, const char* text)</code></div>
	<div class="e_func"><code>ImGui_TextDisabled(<em>ImGui_Context</em> ctx, "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TextDisabled", <em>ImGui_Context</em> ctx, "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TextDisabled(<em>ImGui_Context</em> ctx, <em>string</em> text)</code></div>
	<div class="p_func"><code>ImGui_TextDisabled(<em>ImGui_Context</em> ctx, <em>String</em> text)</code></div>
</div>

<div class="function_definition" id="ImGui_TextFilter_Clear">
	<div class="c_func"><code>void ImGui_TextFilter_Clear(ImGui_TextFilter* filter)</code></div>
	<div class="e_func"><code>ImGui_TextFilter_Clear(<em>ImGui_TextFilter</em> filter) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TextFilter_Clear", <em>ImGui_TextFilter</em> filter) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TextFilter_Clear(<em>ImGui_TextFilter</em> filter)</code></div>
	<div class="p_func"><code>ImGui_TextFilter_Clear(<em>ImGui_TextFilter</em> filter)</code></div>
</div>

<div class="function_definition" id="ImGui_TextFilter_Draw">
	<div class="c_func"><code>bool ImGui_TextFilter_Draw(ImGui_TextFilter* filter, ImGui_Context* ctx, const char* labelInOptional, double* widthInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_TextFilter_Draw(<em>ImGui_TextFilter</em> filter, <em>ImGui_Context</em> ctx, <em>optional </em>"labelIn", <em>optional </em>widthIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_TextFilter_Draw", <em>ImGui_TextFilter</em> filter, <em>ImGui_Context</em> ctx, <em>optional </em>"labelIn", <em>optional </em>widthIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_TextFilter_Draw(<em>ImGui_TextFilter</em> filter, <em>ImGui_Context</em> ctx, <em>optional </em><em>string</em> labelIn, <em>optional number </em>widthIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_TextFilter</em> filter, <em>ImGui_Context</em> ctx, <em>String</em> labelInOptional, <em>Float</em> widthInOptional) = ImGui_TextFilter_Draw(filter, ctx, labelInOptional, widthInOptional)</code></div>
	<p>Helper calling InputText+TextFilter_Set</p>
</div>

<div class="function_definition" id="ImGui_TextFilter_Get">
	<div class="c_func"><code>const char* ImGui_TextFilter_Get(ImGui_TextFilter* filter)</code></div>
	<div class="e_func"><code>bool  ImGui_TextFilter_Get(#retval, <em>ImGui_TextFilter</em> filter) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>bool  extension_api("ImGui_TextFilter_Get", #retval, <em>ImGui_TextFilter</em> filter) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string</em> reaper.ImGui_TextFilter_Get(<em>ImGui_TextFilter</em> filter)</code></div>
	<div class="p_func"><code><em>String</em>  ImGui_TextFilter_Get(<em>ImGui_TextFilter</em> filter)</code></div>
</div>

<div class="function_definition" id="ImGui_TextFilter_IsActive">
	<div class="c_func"><code>bool ImGui_TextFilter_IsActive(ImGui_TextFilter* filter)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_TextFilter_IsActive(<em>ImGui_TextFilter</em> filter) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_TextFilter_IsActive", <em>ImGui_TextFilter</em> filter) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_TextFilter_IsActive(<em>ImGui_TextFilter</em> filter)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_TextFilter_IsActive(<em>ImGui_TextFilter</em> filter)</code></div>
</div>

<div class="function_definition" id="ImGui_TextFilter_PassFilter">
	<div class="c_func"><code>bool ImGui_TextFilter_PassFilter(ImGui_TextFilter* filter, const char* text)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_TextFilter_PassFilter(<em>ImGui_TextFilter</em> filter, "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_TextFilter_PassFilter", <em>ImGui_TextFilter</em> filter, "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_TextFilter_PassFilter(<em>ImGui_TextFilter</em> filter, <em>string</em> text)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_TextFilter_PassFilter(<em>ImGui_TextFilter</em> filter, <em>String</em> text)</code></div>
</div>

<div class="function_definition" id="ImGui_TextFilter_Set">
	<div class="c_func"><code>void ImGui_TextFilter_Set(ImGui_TextFilter* filter, const char* filter_text)</code></div>
	<div class="e_func"><code>ImGui_TextFilter_Set(<em>ImGui_TextFilter</em> filter, "filter_text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TextFilter_Set", <em>ImGui_TextFilter</em> filter, "filter_text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TextFilter_Set(<em>ImGui_TextFilter</em> filter, <em>string</em> filter_text)</code></div>
	<div class="p_func"><code>ImGui_TextFilter_Set(<em>ImGui_TextFilter</em> filter, <em>String</em> filter_text)</code></div>
</div>

<div class="function_definition" id="ImGui_TextWrapped">
	<div class="c_func"><code>void ImGui_TextWrapped(ImGui_Context* ctx, const char* text)</code></div>
	<div class="e_func"><code>ImGui_TextWrapped(<em>ImGui_Context</em> ctx, "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TextWrapped", <em>ImGui_Context</em> ctx, "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TextWrapped(<em>ImGui_Context</em> ctx, <em>string</em> text)</code></div>
	<div class="p_func"><code>ImGui_TextWrapped(<em>ImGui_Context</em> ctx, <em>String</em> text)</code></div>
	<p>Shortcut for PushTextWrapPos(0.0); Text(text); PopTextWrapPos();.<br>
Note that this won't work on an auto-resizing window if there's no other<br>
widgets to extend the window width, yoy may need to set a size using<br>
SetNextWindowSize.</p>
</div>

<div class="function_definition" id="ImGui_TreeNode">
	<div class="c_func"><code>bool ImGui_TreeNode(ImGui_Context* ctx, const char* label, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_TreeNode(<em>ImGui_Context</em> ctx, "label", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_TreeNode", <em>ImGui_Context</em> ctx, "label", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_TreeNode(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Int</em> flagsInOptional) = ImGui_TreeNode(ctx, label, flagsInOptional)</code></div>
	<p>TreeNode functions return true when the node is open, in which case you need<br>
to also call TreePop when you are finished displaying the tree node contents.</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeEx">
	<div class="c_func"><code>bool ImGui_TreeNodeEx(ImGui_Context* ctx, const char* str_id, const char* label, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_TreeNodeEx(<em>ImGui_Context</em> ctx, "str_id", "label", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_TreeNodeEx", <em>ImGui_Context</em> ctx, "str_id", "label", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_TreeNodeEx(<em>ImGui_Context</em> ctx, <em>string</em> str_id, <em>string</em> label, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> str_id, <em>String</em> label, <em>Int</em> flagsInOptional) = ImGui_TreeNodeEx(ctx, str_id, label, flagsInOptional)</code></div>
	<p>Helper variation to easily decorelate the id from the displayed string.<br>
Read the [FAQ](https://dearimgui.com/faq) about why and how to use ID.<br>
To align arbitrary text at the same level as a TreeNode you can use Bullet.</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_AllowItemOverlap">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_AllowItemOverlap()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_AllowItemOverlap() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_AllowItemOverlap") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_AllowItemOverlap()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_AllowItemOverlap()</code></div>
	<p>Hit testing to allow subsequent widgets to overlap this one.</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_Bullet">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_Bullet()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_Bullet() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_Bullet") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_Bullet()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_Bullet()</code></div>
	<p>Display a bullet instead of arrow.</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_CollapsingHeader">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_CollapsingHeader()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_CollapsingHeader() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_CollapsingHeader") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_CollapsingHeader()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_CollapsingHeader()</code></div>
	<p>TreeNodeFlags_Framed | TreeNodeFlags_NoTreePushOnOpen | TreeNodeFlags_NoAutoOpenOnLog</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_DefaultOpen">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_DefaultOpen()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_DefaultOpen() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_DefaultOpen") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_DefaultOpen()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_DefaultOpen()</code></div>
	<p>Default node to be open.</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_FramePadding">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_FramePadding()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_FramePadding() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_FramePadding") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_FramePadding()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_FramePadding()</code></div>
	<p>Use FramePadding (even for an unframed text node) to vertically align text<br>
   baseline to regular widget height.<br>
   Equivalent to calling AlignTextToFramePadding.</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_Framed">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_Framed()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_Framed() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_Framed") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_Framed()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_Framed()</code></div>
	<p>Draw frame with background (e.g. for CollapsingHeader).</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_Leaf">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_Leaf()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_Leaf() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_Leaf") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_Leaf()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_Leaf()</code></div>
	<p>No collapsing, no arrow (use as a convenience for leaf nodes).</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_NoAutoOpenOnLog">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_NoAutoOpenOnLog()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_NoAutoOpenOnLog() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_NoAutoOpenOnLog") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_NoAutoOpenOnLog()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_NoAutoOpenOnLog()</code></div>
	<p>Don't automatically and temporarily open node when Logging is active<br>
   (by default logging will automatically open tree nodes).</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_NoTreePushOnOpen">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_NoTreePushOnOpen()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_NoTreePushOnOpen() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_NoTreePushOnOpen") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_NoTreePushOnOpen()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_NoTreePushOnOpen()</code></div>
	<p>Don't do a TreePush when open (e.g. for CollapsingHeader)<br>
   = no extra indent nor pushing on ID stack.</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_None">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_None()</code></div>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_OpenOnArrow">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_OpenOnArrow()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_OpenOnArrow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_OpenOnArrow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_OpenOnArrow()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_OpenOnArrow()</code></div>
	<p>Only open when clicking on the arrow part.<br>
   If TreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or<br>
   double-click all box to open.</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_OpenOnDoubleClick">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_OpenOnDoubleClick()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_OpenOnDoubleClick() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_OpenOnDoubleClick") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_OpenOnDoubleClick()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_OpenOnDoubleClick()</code></div>
	<p>Need double-click to open node.</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_Selected">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_Selected()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_Selected() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_Selected") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_Selected()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_Selected()</code></div>
	<p>Draw as selected.</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_SpanAvailWidth">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_SpanAvailWidth()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_SpanAvailWidth() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_SpanAvailWidth") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_SpanAvailWidth()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_SpanAvailWidth()</code></div>
	<p>Extend hit box to the right-most edge, even if not framed.<br>
   This is not the default in order to allow adding other items on the same line.<br>
   In the future we may refactor the hit system to be front-to-back,<br>
   allowing natural overlaps and then this can become the default.</p>
</div>

<div class="function_definition" id="ImGui_TreeNodeFlags_SpanFullWidth">
	<div class="c_func"><code>int ImGui_TreeNodeFlags_SpanFullWidth()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_TreeNodeFlags_SpanFullWidth() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_TreeNodeFlags_SpanFullWidth") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_TreeNodeFlags_SpanFullWidth()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_TreeNodeFlags_SpanFullWidth()</code></div>
	<p>Extend hit box to the left-most and right-most edges (bypass the indented area).</p>
</div>

<div class="function_definition" id="ImGui_TreePop">
	<div class="c_func"><code>void ImGui_TreePop(ImGui_Context* ctx)</code></div>
	<div class="e_func"><code>ImGui_TreePop(<em>ImGui_Context</em> ctx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TreePop", <em>ImGui_Context</em> ctx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TreePop(<em>ImGui_Context</em> ctx)</code></div>
	<div class="p_func"><code>ImGui_TreePop(<em>ImGui_Context</em> ctx)</code></div>
	<p>Unindent()+PopID()</p>
</div>

<div class="function_definition" id="ImGui_TreePush">
	<div class="c_func"><code>void ImGui_TreePush(ImGui_Context* ctx, const char* str_id)</code></div>
	<div class="e_func"><code>ImGui_TreePush(<em>ImGui_Context</em> ctx, "str_id") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_TreePush", <em>ImGui_Context</em> ctx, "str_id") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_TreePush(<em>ImGui_Context</em> ctx, <em>string</em> str_id)</code></div>
	<div class="p_func"><code>ImGui_TreePush(<em>ImGui_Context</em> ctx, <em>String</em> str_id)</code></div>
	<p>Indent()+PushID(). Already called by TreeNode when returning true,<br>
but you can call TreePush/TreePop yourself if desired.</p>
</div>

<div class="function_definition" id="ImGui_Unindent">
	<div class="c_func"><code>void ImGui_Unindent(ImGui_Context* ctx, double* indent_wInOptional)</code></div>
	<div class="e_func"><code>ImGui_Unindent(<em>ImGui_Context</em> ctx, <em>optional </em>indent_wIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Unindent", <em>ImGui_Context</em> ctx, <em>optional </em>indent_wIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ImGui_Unindent(<em>ImGui_Context</em> ctx, <em>optional number </em>indent_wIn)</code></div>
	<div class="p_func"><code>(<em>ImGui_Context</em> ctx, <em>Float</em> indent_wInOptional) = ImGui_Unindent(ctx, indent_wInOptional)</code></div>
	<p>Move content position back to the left, by 'indent_w', or<br>
StyleVar_IndentSpacing if 'indent_w' &lt;= 0</p>
</div>

<div class="function_definition" id="ImGui_VSliderDouble">
	<div class="c_func"><code>bool ImGui_VSliderDouble(ImGui_Context* ctx, const char* label, double size_w, double size_h, double* vInOut, double v_min, double v_max, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_VSliderDouble(<em>ImGui_Context</em> ctx, "label", size_w, size_h, <em>&amp;</em>v, v_min, v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_VSliderDouble", <em>ImGui_Context</em> ctx, "label", size_w, size_h, <em>&amp;</em>v, v_min, v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>v = reaper.ImGui_VSliderDouble(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number</em> size_w, <em>number</em> size_h, <em>number </em>v, <em>number</em> v_min, <em>number</em> v_max, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> size_w, <em>Float</em> size_h, <em>Float</em> vInOut, <em>Float</em> v_min, <em>Float</em> v_max, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_VSliderDouble(ctx, label, size_w, size_h, vInOut, v_min, v_max, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_VSliderInt">
	<div class="c_func"><code>bool ImGui_VSliderInt(ImGui_Context* ctx, const char* label, double size_w, double size_h, int* vInOut, int v_min, int v_max, const char* formatInOptional, int* flagsInOptional)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_VSliderInt(<em>ImGui_Context</em> ctx, "label", size_w, size_h, <em>int &amp;</em>v, <em>int </em>v_min, <em>int </em>v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_VSliderInt", <em>ImGui_Context</em> ctx, "label", size_w, size_h, <em>int &amp;</em>v, <em>int </em>v_min, <em>int </em>v_max, <em>optional </em>"formatIn", <em>optional int</em> flagsIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>v = reaper.ImGui_VSliderInt(<em>ImGui_Context</em> ctx, <em>string</em> label, <em>number</em> size_w, <em>number</em> size_h, <em>integer </em>v, <em>integer</em> v_min, <em>integer</em> v_max, <em>optional </em><em>string</em> formatIn, <em>optional integer</em> flagsIn)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>ImGui_Context</em> ctx, <em>String</em> label, <em>Float</em> size_w, <em>Float</em> size_h, <em>Int</em> vInOut, <em>Int</em> v_min, <em>Int</em> v_max, <em>String</em> formatInOptional, <em>Int</em> flagsInOptional) = ImGui_VSliderInt(ctx, label, size_w, size_h, vInOut, v_min, v_max, formatInOptional, flagsInOptional)</code></div>
</div>

<div class="function_definition" id="ImGui_ValidatePtr">
	<div class="c_func"><code>bool ImGui_ValidatePtr(void* pointer, const char* type)</code></div>
	<div class="e_func"><code><em>bool </em> ImGui_ValidatePtr(<em>void*</em> pointer, "type") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ImGui_ValidatePtr", <em>void*</em> pointer, "type") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ImGui_ValidatePtr(<em>identifier</em> pointer, <em>string</em> type)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ImGui_ValidatePtr(<em>void</em> pointer, <em>String</em> type)</code></div>
	<p>Return whether the pointer of the specified type is valid.<br>
</p><p>
Supported types are:<br>
</p><p>
- ImGui_Context*<br>
- ImGui_DrawList*<br>
- ImGui_DrawListSplitter*<br>
- ImGui_Font*<br>
- ImGui_Function*<br>
- ImGui_Image*<br>
- ImGui_ImageSet*<br>
- ImGui_ListClipper*<br>
- ImGui_TextFilter*<br>
- ImGui_Viewport*</p>
</div>

<div class="function_definition" id="ImGui_Viewport_GetCenter">
	<div class="c_func"><code>void ImGui_Viewport_GetCenter(ImGui_Viewport* viewport, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_Viewport_GetCenter(<em>ImGui_Viewport</em> viewport, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Viewport_GetCenter", <em>ImGui_Viewport</em> viewport, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_Viewport_GetCenter(<em>ImGui_Viewport</em> viewport)</code></div>
	<div class="p_func"><code>(<em>ImGui_Viewport</em> viewport, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_Viewport_GetCenter(viewport, xOut, yOut)</code></div>
	<p>Center of the viewport.</p>
</div>

<div class="function_definition" id="ImGui_Viewport_GetPos">
	<div class="c_func"><code>void ImGui_Viewport_GetPos(ImGui_Viewport* viewport, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_Viewport_GetPos(<em>ImGui_Viewport</em> viewport, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Viewport_GetPos", <em>ImGui_Viewport</em> viewport, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_Viewport_GetPos(<em>ImGui_Viewport</em> viewport)</code></div>
	<div class="p_func"><code>(<em>ImGui_Viewport</em> viewport, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_Viewport_GetPos(viewport, xOut, yOut)</code></div>
	<p>Main Area: Position of the viewport</p>
</div>

<div class="function_definition" id="ImGui_Viewport_GetSize">
	<div class="c_func"><code>void ImGui_Viewport_GetSize(ImGui_Viewport* viewport, double* wOut, double* hOut)</code></div>
	<div class="e_func"><code>ImGui_Viewport_GetSize(<em>ImGui_Viewport</em> viewport, <em>&amp;</em>w, <em>&amp;</em>h) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Viewport_GetSize", <em>ImGui_Viewport</em> viewport, <em>&amp;</em>w, <em>&amp;</em>h) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>w, <em>number </em>h = reaper.ImGui_Viewport_GetSize(<em>ImGui_Viewport</em> viewport)</code></div>
	<div class="p_func"><code>(<em>ImGui_Viewport</em> viewport, <em>Float</em> wOut, <em>Float</em> hOut) = ImGui_Viewport_GetSize(viewport, wOut, hOut)</code></div>
	<p>Main Area: Size of the viewport.</p>
</div>

<div class="function_definition" id="ImGui_Viewport_GetWorkCenter">
	<div class="c_func"><code>void ImGui_Viewport_GetWorkCenter(ImGui_Viewport* viewport, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_Viewport_GetWorkCenter(<em>ImGui_Viewport</em> viewport, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Viewport_GetWorkCenter", <em>ImGui_Viewport</em> viewport, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_Viewport_GetWorkCenter(<em>ImGui_Viewport</em> viewport)</code></div>
	<div class="p_func"><code>(<em>ImGui_Viewport</em> viewport, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_Viewport_GetWorkCenter(viewport, xOut, yOut)</code></div>
	<p>Center of the viewport's work area.</p>
</div>

<div class="function_definition" id="ImGui_Viewport_GetWorkPos">
	<div class="c_func"><code>void ImGui_Viewport_GetWorkPos(ImGui_Viewport* viewport, double* xOut, double* yOut)</code></div>
	<div class="e_func"><code>ImGui_Viewport_GetWorkPos(<em>ImGui_Viewport</em> viewport, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Viewport_GetWorkPos", <em>ImGui_Viewport</em> viewport, <em>&amp;</em>x, <em>&amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>x, <em>number </em>y = reaper.ImGui_Viewport_GetWorkPos(<em>ImGui_Viewport</em> viewport)</code></div>
	<div class="p_func"><code>(<em>ImGui_Viewport</em> viewport, <em>Float</em> xOut, <em>Float</em> yOut) = ImGui_Viewport_GetWorkPos(viewport, xOut, yOut)</code></div>
	<p>&gt;= Viewport_GetPos</p>
</div>

<div class="function_definition" id="ImGui_Viewport_GetWorkSize">
	<div class="c_func"><code>void ImGui_Viewport_GetWorkSize(ImGui_Viewport* viewport, double* wOut, double* hOut)</code></div>
	<div class="e_func"><code>ImGui_Viewport_GetWorkSize(<em>ImGui_Viewport</em> viewport, <em>&amp;</em>w, <em>&amp;</em>h) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ImGui_Viewport_GetWorkSize", <em>ImGui_Viewport</em> viewport, <em>&amp;</em>w, <em>&amp;</em>h) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>w, <em>number </em>h = reaper.ImGui_Viewport_GetWorkSize(<em>ImGui_Viewport</em> viewport)</code></div>
	<div class="p_func"><code>(<em>ImGui_Viewport</em> viewport, <em>Float</em> wOut, <em>Float</em> hOut) = ImGui_Viewport_GetWorkSize(viewport, wOut, hOut)</code></div>
	<p>&lt;= Viewport_GetSize</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_AlwaysAutoResize">
	<div class="c_func"><code>int ImGui_WindowFlags_AlwaysAutoResize()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_AlwaysAutoResize() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_AlwaysAutoResize") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_AlwaysAutoResize()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_AlwaysAutoResize()</code></div>
	<p>Resize every window to its content every frame.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_AlwaysHorizontalScrollbar">
	<div class="c_func"><code>int ImGui_WindowFlags_AlwaysHorizontalScrollbar()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_AlwaysHorizontalScrollbar() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_AlwaysHorizontalScrollbar") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_AlwaysHorizontalScrollbar()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_AlwaysHorizontalScrollbar()</code></div>
	<p>Always show horizontal scrollbar (even if ContentSize.x &lt; Size.x).</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_AlwaysUseWindowPadding">
	<div class="c_func"><code>int ImGui_WindowFlags_AlwaysUseWindowPadding()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_AlwaysUseWindowPadding() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_AlwaysUseWindowPadding") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_AlwaysUseWindowPadding()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_AlwaysUseWindowPadding()</code></div>
	<p>Ensure child windows without border uses StyleVar_WindowPadding<br>
   (ignored by default for non-bordered child windows, because more convenient).</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_AlwaysVerticalScrollbar">
	<div class="c_func"><code>int ImGui_WindowFlags_AlwaysVerticalScrollbar()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_AlwaysVerticalScrollbar() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_AlwaysVerticalScrollbar") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_AlwaysVerticalScrollbar()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_AlwaysVerticalScrollbar()</code></div>
	<p>Always show vertical scrollbar (even if ContentSize.y &lt; Size.y).</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_HorizontalScrollbar">
	<div class="c_func"><code>int ImGui_WindowFlags_HorizontalScrollbar()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_HorizontalScrollbar() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_HorizontalScrollbar") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_HorizontalScrollbar()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_HorizontalScrollbar()</code></div>
	<p>Allow horizontal scrollbar to appear (off by default).<br>
   You may use SetNextWindowContentSize(width, 0.0) prior to calling Begin() to<br>
   specify width. Read code in the demo's "Horizontal Scrolling" section.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_MenuBar">
	<div class="c_func"><code>int ImGui_WindowFlags_MenuBar()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_MenuBar() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_MenuBar") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_MenuBar()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_MenuBar()</code></div>
	<p>Has a menu-bar.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoBackground">
	<div class="c_func"><code>int ImGui_WindowFlags_NoBackground()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoBackground() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoBackground") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoBackground()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoBackground()</code></div>
	<p>Disable drawing background color (WindowBg, etc.) and outside border.<br>
   Similar as using SetNextWindowBgAlpha(0.0).</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoCollapse">
	<div class="c_func"><code>int ImGui_WindowFlags_NoCollapse()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoCollapse() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoCollapse") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoCollapse()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoCollapse()</code></div>
	<p>Disable user collapsing window by double-clicking on it.<br>
   Also referred to as Window Menu Button (e.g. within a docking node).</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoDecoration">
	<div class="c_func"><code>int ImGui_WindowFlags_NoDecoration()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoDecoration() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoDecoration") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoDecoration()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoDecoration()</code></div>
	<p>WindowFlags_NoTitleBar | WindowFlags_NoResize | WindowFlags_NoScrollbar |<br>
   WindowFlags_NoCollapse</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoDocking">
	<div class="c_func"><code>int ImGui_WindowFlags_NoDocking()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoDocking() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoDocking") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoDocking()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoDocking()</code></div>
	<p>Disable docking of this window.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoFocusOnAppearing">
	<div class="c_func"><code>int ImGui_WindowFlags_NoFocusOnAppearing()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoFocusOnAppearing() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoFocusOnAppearing") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoFocusOnAppearing()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoFocusOnAppearing()</code></div>
	<p>Disable taking focus when transitioning from hidden to visible state.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoInputs">
	<div class="c_func"><code>int ImGui_WindowFlags_NoInputs()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoInputs() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoInputs") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoInputs()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoInputs()</code></div>
	<p>WindowFlags_NoMouseInputs | WindowFlags_NoNavInputs | WindowFlags_NoNavFocus</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoMouseInputs">
	<div class="c_func"><code>int ImGui_WindowFlags_NoMouseInputs()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoMouseInputs() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoMouseInputs") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoMouseInputs()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoMouseInputs()</code></div>
	<p>Disable catching mouse, hovering test with pass through.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoMove">
	<div class="c_func"><code>int ImGui_WindowFlags_NoMove()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoMove() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoMove") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoMove()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoMove()</code></div>
	<p>Disable user moving the window.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoNav">
	<div class="c_func"><code>int ImGui_WindowFlags_NoNav()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoNav() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoNav") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoNav()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoNav()</code></div>
	<p>WindowFlags_NoNavInputs | WindowFlags_NoNavFocus</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoNavFocus">
	<div class="c_func"><code>int ImGui_WindowFlags_NoNavFocus()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoNavFocus() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoNavFocus") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoNavFocus()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoNavFocus()</code></div>
	<p>No focusing toward this window with gamepad/keyboard navigation<br>
   (e.g. skipped by CTRL+TAB).</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoNavInputs">
	<div class="c_func"><code>int ImGui_WindowFlags_NoNavInputs()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoNavInputs() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoNavInputs") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoNavInputs()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoNavInputs()</code></div>
	<p>No gamepad/keyboard navigation within the window.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoResize">
	<div class="c_func"><code>int ImGui_WindowFlags_NoResize()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoResize() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoResize") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoResize()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoResize()</code></div>
	<p>Disable user resizing with the lower-right grip.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoSavedSettings">
	<div class="c_func"><code>int ImGui_WindowFlags_NoSavedSettings()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoSavedSettings() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoSavedSettings") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoSavedSettings()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoSavedSettings()</code></div>
	<p>Never load/save settings in .ini file.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoScrollWithMouse">
	<div class="c_func"><code>int ImGui_WindowFlags_NoScrollWithMouse()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoScrollWithMouse() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoScrollWithMouse") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoScrollWithMouse()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoScrollWithMouse()</code></div>
	<p>Disable user vertically scrolling with mouse wheel.<br>
   On child window, mouse wheel will be forwarded to the parent unless<br>
   NoScrollbar is also set.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoScrollbar">
	<div class="c_func"><code>int ImGui_WindowFlags_NoScrollbar()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoScrollbar() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoScrollbar") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoScrollbar()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoScrollbar()</code></div>
	<p>Disable scrollbars (window can still scroll with mouse or programmatically).</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_NoTitleBar">
	<div class="c_func"><code>int ImGui_WindowFlags_NoTitleBar()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_NoTitleBar() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_NoTitleBar") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_NoTitleBar()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_NoTitleBar()</code></div>
	<p>Disable title-bar.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_None">
	<div class="c_func"><code>int ImGui_WindowFlags_None()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_None() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_None") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_None()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_None()</code></div>
	<p>Default flag.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_TopMost">
	<div class="c_func"><code>int ImGui_WindowFlags_TopMost()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_TopMost() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_TopMost") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_TopMost()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_TopMost()</code></div>
	<p>Show the window above all non-topmost windows.</p>
</div>

<div class="function_definition" id="ImGui_WindowFlags_UnsavedDocument">
	<div class="c_func"><code>int ImGui_WindowFlags_UnsavedDocument()</code></div>
	<div class="e_func"><code><em>int </em> ImGui_WindowFlags_UnsavedDocument() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ImGui_WindowFlags_UnsavedDocument") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.ImGui_WindowFlags_UnsavedDocument()</code></div>
	<div class="p_func"><code><em>Int</em>  ImGui_WindowFlags_UnsavedDocument()</code></div>
	<p>Display a dot next to the title. When used in a tab/docking context,<br>
   tab is selected when clicking the X + closure is not assumed<br>
   (will wait for user to stop submitting the tab).<br>
   Otherwise closure is assumed when pressing the X,<br>
   so if you keep submitting the tab may reappear at end of tab bar.</p>
</div>

<div class="function_definition" id="JS_Actions_CountShortcuts">
	<div class="c_func"><code>int JS_Actions_CountShortcuts(int section, int cmdID)</code></div>
	<div class="e_func"><code><em>int </em> JS_Actions_CountShortcuts(<em>int </em>section, <em>int </em>cmdID) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Actions_CountShortcuts", <em>int </em>section, <em>int </em>cmdID) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Actions_CountShortcuts(<em>integer</em> section, <em>integer</em> cmdID)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Actions_CountShortcuts(<em>Int</em> section, <em>Int</em> cmdID)</code></div>
	<p>Section:<br>
0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.</p>
</div>

<div class="function_definition" id="JS_Actions_DeleteShortcut">
	<div class="c_func"><code>bool JS_Actions_DeleteShortcut(int section, int cmdID, int shortcutidx)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Actions_DeleteShortcut(<em>int </em>section, <em>int </em>cmdID, <em>int </em>shortcutidx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Actions_DeleteShortcut", <em>int </em>section, <em>int </em>cmdID, <em>int </em>shortcutidx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Actions_DeleteShortcut(<em>integer</em> section, <em>integer</em> cmdID, <em>integer</em> shortcutidx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Actions_DeleteShortcut(<em>Int</em> section, <em>Int</em> cmdID, <em>Int</em> shortcutidx)</code></div>
	<p>Section:<br>
0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.</p>
</div>

<div class="function_definition" id="JS_Actions_DoShortcutDialog">
	<div class="c_func"><code>bool JS_Actions_DoShortcutDialog(int section, int cmdID, int shortcutidx)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Actions_DoShortcutDialog(<em>int </em>section, <em>int </em>cmdID, <em>int </em>shortcutidx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Actions_DoShortcutDialog", <em>int </em>section, <em>int </em>cmdID, <em>int </em>shortcutidx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Actions_DoShortcutDialog(<em>integer</em> section, <em>integer</em> cmdID, <em>integer</em> shortcutidx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Actions_DoShortcutDialog(<em>Int</em> section, <em>Int</em> cmdID, <em>Int</em> shortcutidx)</code></div>
	<p>Section:<br>
0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.<br>
</p><p>
If the shortcut index is higher than the current number of shortcuts, it will add a new shortcut.</p>
</div>

<div class="function_definition" id="JS_Actions_GetShortcutDesc">
	<div class="c_func"><code>bool JS_Actions_GetShortcutDesc(int section, int cmdID, int shortcutidx, char* descOut, int descOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Actions_GetShortcutDesc(<em>int </em>section, <em>int </em>cmdID, <em>int </em>shortcutidx, #desc) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Actions_GetShortcutDesc", <em>int </em>section, <em>int </em>cmdID, <em>int </em>shortcutidx, #desc) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>desc = reaper.JS_Actions_GetShortcutDesc(<em>integer</em> section, <em>integer</em> cmdID, <em>integer</em> shortcutidx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>Int</em> section, <em>Int</em> cmdID, <em>Int</em> shortcutidx, <em>String</em> descOut, <em>Int</em> descOut_sz) = JS_Actions_GetShortcutDesc(section, cmdID, shortcutidx, descOut, descOut_sz)</code></div>
	<p>Section:<br>
0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.</p>
</div>

<div class="function_definition" id="JS_Byte">
	<div class="c_func"><code>void JS_Byte(void* pointer, int offset, int* byteOut)</code></div>
	<div class="e_func"><code>JS_Byte(<em>void*</em> pointer, <em>int </em>offset, <em>int &amp;</em>byte) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Byte", <em>void*</em> pointer, <em>int </em>offset, <em>int &amp;</em>byte) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer </em>byte = reaper.JS_Byte(<em>identifier</em> pointer, <em>integer</em> offset)</code></div>
	<div class="p_func"><code>(<em>void</em> pointer, <em>Int</em> offset, <em>Int</em> byteOut) = JS_Byte(pointer, offset, byteOut)</code></div>
	<p>Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.</p>
</div>

<div class="function_definition" id="JS_Composite">
	<div class="c_func"><code>int JS_Composite(void* windowHWND, int dstx, int dsty, int dstw, int dsth, void* sysBitmap, int srcx, int srcy, int srcw, int srch, bool* autoUpdateOptional)</code></div>
	<div class="e_func"><code><em>int </em> JS_Composite(<em>void*</em> windowHWND, <em>int </em>dstx, <em>int </em>dsty, <em>int </em>dstw, <em>int </em>dsth, <em>void*</em> sysBitmap, <em>int </em>srcx, <em>int </em>srcy, <em>int </em>srcw, <em>int </em>srch, <strong>unsupported</strong> autoUpdateOptional) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Composite", <em>void*</em> windowHWND, <em>int </em>dstx, <em>int </em>dsty, <em>int </em>dstw, <em>int </em>dsth, <em>void*</em> sysBitmap, <em>int </em>srcx, <em>int </em>srcy, <em>int </em>srcw, <em>int </em>srch, <strong>unsupported</strong> autoUpdateOptional) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Composite(<em>identifier</em> windowHWND, <em>integer</em> dstx, <em>integer</em> dsty, <em>integer</em> dstw, <em>integer</em> dsth, <em>identifier</em> sysBitmap, <em>integer</em> srcx, <em>integer</em> srcy, <em>integer</em> srcw, <em>integer</em> srch, <strong>unsupported</strong> autoUpdate)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>void</em> windowHWND, <em>Int</em> dstx, <em>Int</em> dsty, <em>Int</em> dstw, <em>Int</em> dsth, <em>void</em> sysBitmap, <em>Int</em> srcx, <em>Int</em> srcy, <em>Int</em> srcw, <em>Int</em> srch, <em>Boolean</em> autoUpdateOptional) = JS_Composite(windowHWND, dstx, dsty, dstw, dsth, sysBitmap, srcx, srcy, srcw, srch, autoUpdateOptional)</code></div>
	<p>Composites a LICE bitmap with a REAPER window.  Each time that the window is re-drawn, the bitmap will be blitted over the window's client area (with per-pixel alpha blending).<br>
</p><p>
 * If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.<br>
</p><p>
 * autoUpdate is an optional parameter that is false by default. If true, JS_Composite will automatically invalidate and re-draw the part of the window that covers the current position of the bitmap, and if the bitmap is being moved, also the previous position. (If only one or a handful of bitmaps are being moved across the screen, autoUpdate should result in smoother animation on WindowsOS; if numerous bitmaps are spread over the entire window, it may be faster to disable autoUpdate and instead call JS_Window_InvalidateRect explicitly once all bitmaps have been moved.)<br>
</p><p>
 * InvalidateRect should also be called whenever the contents of the bitmap contents have been changed, but not the position, to trigger a window update.<br>
</p><p>
 * On WindowsOS, the key to reducing flickering is to slow down the frequency at which the window is re-drawn. InvalidateRect should only be called when absolutely necessary, preferably not more than 20 times per second.  (Also refer to the JS_Composite_Delay function.)<br>
</p><p>
 * On WindowsOS, flickering can further be reduced by keeping the invalidated area as small as possible, covering only the bitmaps that have been edited or moved.  However, if numerous bitmaps are spread over the entire window, it may be faster to simply invalidate the entire client area. <br>
</p><p>
 * This function should not be applied directly to top-level windows, but rather to child windows.<br>
</p><p>
 * Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.<br>
</p><p>
 * On WindowsOS, GDI blitting does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.<br>
</p><p>
Returns:<br>
1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could not obtain the original window process, -4 = sysBitmap is not a LICE bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the window HDC, -7 = Error when subclassing to new window process.</p>
</div>

<div class="function_definition" id="JS_Composite_Delay">
	<div class="c_func"><code>int JS_Composite_Delay(void* windowHWND, double minTime, double maxTime, int numBitmapsWhenMax, double* prevMinTimeOut, double* prevMaxTimeOut, int* prevBitmapsOut)</code></div>
	<div class="e_func"><code><em>int </em> JS_Composite_Delay(<em>void*</em> windowHWND, minTime, maxTime, <em>int </em>numBitmapsWhenMax, <em>&amp;</em>prevMinTime, <em>&amp;</em>prevMaxTime, <em>int &amp;</em>prevBitmaps) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Composite_Delay", <em>void*</em> windowHWND, minTime, maxTime, <em>int </em>numBitmapsWhenMax, <em>&amp;</em>prevMinTime, <em>&amp;</em>prevMaxTime, <em>int &amp;</em>prevBitmaps) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>number </em>prevMinTime, <em>number </em>prevMaxTime, <em>integer </em>prevBitmaps = reaper.JS_Composite_Delay(<em>identifier</em> windowHWND, <em>number</em> minTime, <em>number</em> maxTime, <em>integer</em> numBitmapsWhenMax)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>void</em> windowHWND, <em>Float</em> minTime, <em>Float</em> maxTime, <em>Int</em> numBitmapsWhenMax, <em>Float</em> prevMinTimeOut, <em>Float</em> prevMaxTimeOut, <em>Int</em> prevBitmapsOut) = JS_Composite_Delay(windowHWND, minTime, maxTime, numBitmapsWhenMax, prevMinTimeOut, prevMaxTimeOut, prevBitmapsOut)</code></div>
	<p>On WindowsOS, flickering of composited images can be improved considerably by slowing the refresh rate of the window.  The optimal refresh rate may depend on the number of composited bitmaps.<br>
</p><p>
minTime is the minimum refresh delay, in seconds, when only one bitmap is composited onto the window.  The delay time will increase linearly with the number of bitmaps, up to a maximum of maxTime when numBitmapsWhenMax is reached.<br>
</p><p>
If both minTime and maxTime are 0, all delay settings for the window are cleared.<br>
</p><p>
Returns:<br>
 * retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime &lt; minTime, or maxBitmaps &lt; 1).<br>
 * If delay times have not previously been set for this window, prev time values are 0.</p>
</div>

<div class="function_definition" id="JS_Composite_ListBitmaps">
	<div class="c_func"><code>int JS_Composite_ListBitmaps(void* windowHWND, char* listOutNeedBig, int listOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> JS_Composite_ListBitmaps(<em>void*</em> windowHWND, #list) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Composite_ListBitmaps", <em>void*</em> windowHWND, #list) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>list = reaper.JS_Composite_ListBitmaps(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>void</em> windowHWND, <em>String</em> listOutNeedBig, <em>Int</em> listOutNeedBig_sz) = JS_Composite_ListBitmaps(windowHWND, listOutNeedBig, listOutNeedBig_sz)</code></div>
	<p>Returns all bitmaps composited to the given window.<br>
</p><p>
The list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap* pointer.<br>
</p><p>
retval is the number of linked bitmaps found, or negative if an error occured.</p>
</div>

<div class="function_definition" id="JS_Composite_Unlink">
	<div class="c_func"><code>void JS_Composite_Unlink(void* windowHWND, void* bitmapOptional, bool* autoUpdateOptional)</code></div>
	<div class="e_func"><code>JS_Composite_Unlink(<em>void*</em> windowHWND, <em>void*</em> bitmap, <strong>unsupported</strong> autoUpdateOptional) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Composite_Unlink", <em>void*</em> windowHWND, <em>void*</em> bitmap, <strong>unsupported</strong> autoUpdateOptional) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_Composite_Unlink(<em>identifier</em> windowHWND, <em>identifier</em> bitmap, <strong>unsupported</strong> autoUpdate)</code></div>
	<div class="p_func"><code>(<em>void</em> windowHWND, <em>void</em> bitmapOptional, <em>Boolean</em> autoUpdateOptional) = JS_Composite_Unlink(windowHWND, bitmapOptional, autoUpdateOptional)</code></div>
	<p>Unlinks the window and bitmap.<br>
</p><p>
 * autoUpdate is an optional parameter. If unlinking a single bitmap and autoUpdate is true, the function will automatically re-draw the window to remove the blitted image.<br>
</p><p>
If no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts.</p>
</div>

<div class="function_definition" id="JS_Dialog_BrowseForFolder">
	<div class="c_func"><code>int JS_Dialog_BrowseForFolder(const char* caption, const char* initialFolder, char* folderOutNeedBig, int folderOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> JS_Dialog_BrowseForFolder("caption", "initialFolder", #folder) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Dialog_BrowseForFolder", "caption", "initialFolder", #folder) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>folder = reaper.JS_Dialog_BrowseForFolder(<em>string</em> caption, <em>string</em> initialFolder)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>String</em> caption, <em>String</em> initialFolder, <em>String</em> folderOutNeedBig, <em>Int</em> folderOutNeedBig_sz) = JS_Dialog_BrowseForFolder(caption, initialFolder, folderOutNeedBig, folderOutNeedBig_sz)</code></div>
	<p>retval is 1 if a file was selected, 0 if the user cancelled the dialog, and -1 if an error occurred.</p>
</div>

<div class="function_definition" id="JS_Dialog_BrowseForOpenFiles">
	<div class="c_func"><code>int JS_Dialog_BrowseForOpenFiles(const char* windowTitle, const char* initialFolder, const char* initialFile, const char* extensionList, bool allowMultiple, char* fileNamesOutNeedBig, int fileNamesOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> JS_Dialog_BrowseForOpenFiles("windowTitle", "initialFolder", "initialFile", "extensionList", <em>bool </em>allowMultiple, #fileNames) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Dialog_BrowseForOpenFiles", "windowTitle", "initialFolder", "initialFile", "extensionList", <em>bool </em>allowMultiple, #fileNames) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>fileNames = reaper.JS_Dialog_BrowseForOpenFiles(<em>string</em> windowTitle, <em>string</em> initialFolder, <em>string</em> initialFile, <em>string</em> extensionList, <em>boolean</em> allowMultiple)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>String</em> windowTitle, <em>String</em> initialFolder, <em>String</em> initialFile, <em>String</em> extensionList, <em>Boolean</em> allowMultiple, <em>String</em> fileNamesOutNeedBig, <em>Int</em> fileNamesOutNeedBig_sz) = JS_Dialog_BrowseForOpenFiles(windowTitle, initialFolder, initialFile, extensionList, allowMultiple, fileNamesOutNeedBig, fileNamesOutNeedBig_sz)</code></div>
	<p>If allowMultiple is true, multiple files may be selected. The returned string is \0-separated, with the first substring containing the folder path and subsequent substrings containing the file names.<br>
 * On macOS, the first substring may be empty, and each file name will then contain its entire path.<br>
 * This function only allows selection of existing files, and does not allow creation of new files.<br>
</p><p>
extensionList is a string containing pairs of \0-terminated substrings. The last substring must be terminated by two \0 characters. Each pair defines one filter pattern:<br>
 * The first substring in each pair describes the filter in user-readable form (for example, "Lua script files (*.lua)") and will be displayed in the dialog box.<br>
 * The second substring specifies the filter that the operating system must use to search for the files (for example, "*.txt"; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, "*.lua;*.eel").<br>
</p><p>
An example of an extensionList string:<br>
"ReaScript files\0*.lua;*.eel\0Lua files (.lua)\0*.lua\0EEL files (.eel)\0*.eel\0\0".<br>
</p><p>
On macOS, file dialogs do not accept empty extensionLists, nor wildcard extensions (such as "All files\0*.*\0\0"), so each acceptable extension must be listed explicitly. On Linux and Windows, wildcard extensions are acceptable, and if the extensionList string is empty, the dialog will display a default "All files (*.*)" filter.<br>
</p><p>
retval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.<br>
</p><p>
Displaying \0-separated strings:<br>
 * REAPER's IDE and ShowConsoleMsg only display strings up to the first \0 byte. If multiple files were selected, only the first substring containing the path will be displayed. This is not a problem for Lua or EEL, which can access the full string beyond the first \0 byte as usual.</p>
</div>

<div class="function_definition" id="JS_Dialog_BrowseForSaveFile">
	<div class="c_func"><code>int JS_Dialog_BrowseForSaveFile(const char* windowTitle, const char* initialFolder, const char* initialFile, const char* extensionList, char* fileNameOutNeedBig, int fileNameOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> JS_Dialog_BrowseForSaveFile("windowTitle", "initialFolder", "initialFile", "extensionList", #fileName) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Dialog_BrowseForSaveFile", "windowTitle", "initialFolder", "initialFile", "extensionList", #fileName) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>fileName = reaper.JS_Dialog_BrowseForSaveFile(<em>string</em> windowTitle, <em>string</em> initialFolder, <em>string</em> initialFile, <em>string</em> extensionList)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>String</em> windowTitle, <em>String</em> initialFolder, <em>String</em> initialFile, <em>String</em> extensionList, <em>String</em> fileNameOutNeedBig, <em>Int</em> fileNameOutNeedBig_sz) = JS_Dialog_BrowseForSaveFile(windowTitle, initialFolder, initialFile, extensionList, fileNameOutNeedBig, fileNameOutNeedBig_sz)</code></div>
	<p>retval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.<br>
</p><p>
extensionList is as described for JS_Dialog_BrowseForOpenFiles.</p>
</div>

<div class="function_definition" id="JS_Double">
	<div class="c_func"><code>void JS_Double(void* pointer, int offset, double* doubleOut)</code></div>
	<div class="e_func"><code>JS_Double(<em>void*</em> pointer, <em>int </em>offset, <em>&amp;</em>double) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Double", <em>void*</em> pointer, <em>int </em>offset, <em>&amp;</em>double) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>double = reaper.JS_Double(<em>identifier</em> pointer, <em>integer</em> offset)</code></div>
	<div class="p_func"><code>(<em>void</em> pointer, <em>Int</em> offset, <em>Float</em> doubleOut) = JS_Double(pointer, offset, doubleOut)</code></div>
	<p>Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.</p>
</div>

<div class="function_definition" id="JS_File_Stat">
	<div class="c_func"><code>int JS_File_Stat(const char* filePath, double* sizeOut, char* accessedTimeOut, char* modifiedTimeOut, char* cTimeOut, int* deviceIDOut, int* deviceSpecialIDOut, int* inodeOut, int* modeOut, int* numLinksOut, int* ownerUserIDOut, int* ownerGroupIDOut)</code></div>
	<div class="e_func"><code><em>int </em> JS_File_Stat("filePath", <em>&amp;</em>size, #accessedTime, #modifiedTime, #cTime, <em>int &amp;</em>deviceID, <em>int &amp;</em>deviceSpecialID, <em>int &amp;</em>inode, <em>int &amp;</em>mode, <em>int &amp;</em>numLinks, <em>int &amp;</em>ownerUserID, <em>int &amp;</em>ownerGroupID) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_File_Stat", "filePath", <em>&amp;</em>size, #accessedTime, #modifiedTime, #cTime, <em>int &amp;</em>deviceID, <em>int &amp;</em>deviceSpecialID, <em>int &amp;</em>inode, <em>int &amp;</em>mode, <em>int &amp;</em>numLinks, <em>int &amp;</em>ownerUserID, <em>int &amp;</em>ownerGroupID) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>number </em>size, <em>string </em>accessedTime, <em>string </em>modifiedTime, <em>string </em>cTime, <em>integer </em>deviceID, <em>integer </em>deviceSpecialID, <em>integer </em>inode, <em>integer </em>mode, <em>integer </em>numLinks, <em>integer </em>ownerUserID, <em>integer </em>ownerGroupID = reaper.JS_File_Stat(<em>string</em> filePath)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>String</em> filePath, <em>Float</em> sizeOut, <em>String</em> accessedTimeOut, <em>String</em> modifiedTimeOut, <em>String</em> cTimeOut, <em>Int</em> deviceIDOut, <em>Int</em> deviceSpecialIDOut, <em>Int</em> inodeOut, <em>Int</em> modeOut, <em>Int</em> numLinksOut, <em>Int</em> ownerUserIDOut, <em>Int</em> ownerGroupIDOut) = JS_File_Stat(filePath, sizeOut, accessedTimeOut, modifiedTimeOut, cTimeOut, deviceIDOut, deviceSpecialIDOut, inodeOut, modeOut, numLinksOut, ownerUserIDOut, ownerGroupIDOut)</code></div>
	<p>Returns information about a file.<br>
</p><p>
cTime is not implemented on all systems. If it does return a time, the value may differ depending on the OS: on WindowsOS, it may refer to the time that the file was either created or copied, whereas on Linux and macOS, it may refer to the time of last status change.<br>
</p><p>
retval is 0 if successful, negative if not.</p>
</div>

<div class="function_definition" id="JS_GDI_Blit">
	<div class="c_func"><code>void JS_GDI_Blit(void* destHDC, int dstx, int dsty, void* sourceHDC, int srcx, int srxy, int width, int height, const char* modeOptional)</code></div>
	<div class="e_func"><code>JS_GDI_Blit(<em>void*</em> destHDC, <em>int </em>dstx, <em>int </em>dsty, <em>void*</em> sourceHDC, <em>int </em>srcx, <em>int </em>srxy, <em>int </em>width, <em>int </em>height, <em>optional </em>"mode") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_GDI_Blit", <em>void*</em> destHDC, <em>int </em>dstx, <em>int </em>dsty, <em>void*</em> sourceHDC, <em>int </em>srcx, <em>int </em>srxy, <em>int </em>width, <em>int </em>height, <em>optional </em>"mode") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_GDI_Blit(<em>identifier</em> destHDC, <em>integer</em> dstx, <em>integer</em> dsty, <em>identifier</em> sourceHDC, <em>integer</em> srcx, <em>integer</em> srxy, <em>integer</em> width, <em>integer</em> height, <em>optional </em><em>string</em> mode)</code></div>
	<div class="p_func"><code>JS_GDI_Blit(<em>void</em> destHDC, <em>Int</em> dstx, <em>Int</em> dsty, <em>void</em> sourceHDC, <em>Int</em> srcx, <em>Int</em> srxy, <em>Int</em> width, <em>Int</em> height, <em>String</em> modeOptional)</code></div>
	<p>Blits between two device contexts, which may include LICE "system bitmaps".<br>
</p><p>
mode: Optional parameter. "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.<br>
</p><p>
WARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.</p>
</div>

<div class="function_definition" id="JS_GDI_CreateFillBrush">
	<div class="c_func"><code>void* JS_GDI_CreateFillBrush(int color)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_GDI_CreateFillBrush(<em>int </em>color) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_GDI_CreateFillBrush", <em>int </em>color) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_GDI_CreateFillBrush(<em>integer</em> color)</code></div>
	<div class="p_func"><code><em>void</em>  JS_GDI_CreateFillBrush(<em>Int</em> color)</code></div>
</div>

<div class="function_definition" id="JS_GDI_CreateFont">
	<div class="c_func"><code>void* JS_GDI_CreateFont(int height, int weight, int angle, bool italic, bool underline, bool strikeOut, const char* fontName)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_GDI_CreateFont(<em>int </em>height, <em>int </em>weight, <em>int </em>angle, <em>bool </em>italic, <em>bool </em>underline, <em>bool </em>strike, "fontName") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_GDI_CreateFont", <em>int </em>height, <em>int </em>weight, <em>int </em>angle, <em>bool </em>italic, <em>bool </em>underline, <em>bool </em>strike, "fontName") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_GDI_CreateFont(<em>integer</em> height, <em>integer</em> weight, <em>integer</em> angle, <em>boolean</em> italic, <em>boolean</em> underline, <em>boolean</em> strike, <em>string</em> fontName)</code></div>
	<div class="p_func"><code><em>void</em>  JS_GDI_CreateFont(<em>Int</em> height, <em>Int</em> weight, <em>Int</em> angle, <em>Boolean</em> italic, <em>Boolean</em> underline, <em>Boolean</em> strikeOut, <em>String</em> fontName)</code></div>
	<p>Parameters:<br>
 * weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.<br>
 * angle: the angle, in tenths of degrees, between the text and the x-axis of the device.<br>
 * fontName: If empty string "", uses first font that matches the other specified attributes.<br>
</p><p>
Note: Text color must be set separately.</p>
</div>

<div class="function_definition" id="JS_GDI_CreatePen">
	<div class="c_func"><code>void* JS_GDI_CreatePen(int width, int color)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_GDI_CreatePen(<em>int </em>width, <em>int </em>color) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_GDI_CreatePen", <em>int </em>width, <em>int </em>color) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_GDI_CreatePen(<em>integer</em> width, <em>integer</em> color)</code></div>
	<div class="p_func"><code><em>void</em>  JS_GDI_CreatePen(<em>Int</em> width, <em>Int</em> color)</code></div>
</div>

<div class="function_definition" id="JS_GDI_DeleteObject">
	<div class="c_func"><code>void JS_GDI_DeleteObject(void* GDIObject)</code></div>
	<div class="e_func"><code>JS_GDI_DeleteObject(<em>void*</em> GDIObject) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_GDI_DeleteObject", <em>void*</em> GDIObject) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_GDI_DeleteObject(<em>identifier</em> GDIObject)</code></div>
	<div class="p_func"><code>JS_GDI_DeleteObject(<em>void</em> GDIObject)</code></div>
</div>

<div class="function_definition" id="JS_GDI_DrawText">
	<div class="c_func"><code>int JS_GDI_DrawText(void* deviceHDC, const char* text, int len, int left, int top, int right, int bottom, const char* align))</code></div>
	<div class="e_func"><code><em>int </em> JS_GDI_DrawText(<em>void*</em> deviceHDC, "text", <em>int </em>len, <em>int </em>left, <em>int </em>top, <em>int </em>right, <em>int </em>bottom, "align)") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_GDI_DrawText", <em>void*</em> deviceHDC, "text", <em>int </em>len, <em>int </em>left, <em>int </em>top, <em>int </em>right, <em>int </em>bottom, "align)") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_GDI_DrawText(<em>identifier</em> deviceHDC, <em>string</em> text, <em>integer</em> len, <em>integer</em> left, <em>integer</em> top, <em>integer</em> right, <em>integer</em> bottom, <em>string</em> align))</code></div>
	<div class="p_func"><code><em>Int</em>  JS_GDI_DrawText(<em>void</em> deviceHDC, <em>String</em> text, <em>Int</em> len, <em>Int</em> left, <em>Int</em> top, <em>Int</em> right, <em>Int</em> bottom, <em>String</em> align))</code></div>
	<p>Parameters:<br>
 * align: Combination of: "TOP", "VCENTER", "LEFT", "HCENTER", "RIGHT", "BOTTOM", "WORDBREAK", "SINGLELINE", "NOCLIP", "CALCRECT", "NOPREFIX" or "ELLIPSIS"</p>
</div>

<div class="function_definition" id="JS_GDI_FillEllipse">
	<div class="c_func"><code>void JS_GDI_FillEllipse(void* deviceHDC, int left, int top, int right, int bottom)</code></div>
	<div class="e_func"><code>JS_GDI_FillEllipse(<em>void*</em> deviceHDC, <em>int </em>left, <em>int </em>top, <em>int </em>right, <em>int </em>bottom) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_GDI_FillEllipse", <em>void*</em> deviceHDC, <em>int </em>left, <em>int </em>top, <em>int </em>right, <em>int </em>bottom) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_GDI_FillEllipse(<em>identifier</em> deviceHDC, <em>integer</em> left, <em>integer</em> top, <em>integer</em> right, <em>integer</em> bottom)</code></div>
	<div class="p_func"><code>JS_GDI_FillEllipse(<em>void</em> deviceHDC, <em>Int</em> left, <em>Int</em> top, <em>Int</em> right, <em>Int</em> bottom)</code></div>
</div>

<div class="function_definition" id="JS_GDI_FillPolygon">
	<div class="c_func"><code>void JS_GDI_FillPolygon(void* deviceHDC, const char* packedX, const char* packedY, int numPoints)</code></div>
	<div class="e_func"><code>JS_GDI_FillPolygon(<em>void*</em> deviceHDC, "packedX", "packedY", <em>int </em>numPoints) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_GDI_FillPolygon", <em>void*</em> deviceHDC, "packedX", "packedY", <em>int </em>numPoints) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_GDI_FillPolygon(<em>identifier</em> deviceHDC, <em>string</em> packedX, <em>string</em> packedY, <em>integer</em> numPoints)</code></div>
	<div class="p_func"><code>JS_GDI_FillPolygon(<em>void</em> deviceHDC, <em>String</em> packedX, <em>String</em> packedY, <em>Int</em> numPoints)</code></div>
	<p>packedX and packedY are strings of points, each packed as "&lt;i4".</p>
</div>

<div class="function_definition" id="JS_GDI_FillRect">
	<div class="c_func"><code>void JS_GDI_FillRect(void* deviceHDC, int left, int top, int right, int bottom)</code></div>
	<div class="e_func"><code>JS_GDI_FillRect(<em>void*</em> deviceHDC, <em>int </em>left, <em>int </em>top, <em>int </em>right, <em>int </em>bottom) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_GDI_FillRect", <em>void*</em> deviceHDC, <em>int </em>left, <em>int </em>top, <em>int </em>right, <em>int </em>bottom) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_GDI_FillRect(<em>identifier</em> deviceHDC, <em>integer</em> left, <em>integer</em> top, <em>integer</em> right, <em>integer</em> bottom)</code></div>
	<div class="p_func"><code>JS_GDI_FillRect(<em>void</em> deviceHDC, <em>Int</em> left, <em>Int</em> top, <em>Int</em> right, <em>Int</em> bottom)</code></div>
</div>

<div class="function_definition" id="JS_GDI_FillRoundRect">
	<div class="c_func"><code>void JS_GDI_FillRoundRect(void* deviceHDC, int left, int top, int right, int bottom, int xrnd, int yrnd)</code></div>
	<div class="e_func"><code>JS_GDI_FillRoundRect(<em>void*</em> deviceHDC, <em>int </em>left, <em>int </em>top, <em>int </em>right, <em>int </em>bottom, <em>int </em>xrnd, <em>int </em>yrnd) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_GDI_FillRoundRect", <em>void*</em> deviceHDC, <em>int </em>left, <em>int </em>top, <em>int </em>right, <em>int </em>bottom, <em>int </em>xrnd, <em>int </em>yrnd) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_GDI_FillRoundRect(<em>identifier</em> deviceHDC, <em>integer</em> left, <em>integer</em> top, <em>integer</em> right, <em>integer</em> bottom, <em>integer</em> xrnd, <em>integer</em> yrnd)</code></div>
	<div class="p_func"><code>JS_GDI_FillRoundRect(<em>void</em> deviceHDC, <em>Int</em> left, <em>Int</em> top, <em>Int</em> right, <em>Int</em> bottom, <em>Int</em> xrnd, <em>Int</em> yrnd)</code></div>
</div>

<div class="function_definition" id="JS_GDI_GetClientDC">
	<div class="c_func"><code>void* JS_GDI_GetClientDC(void* windowHWND)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_GDI_GetClientDC(<em>void*</em> windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_GDI_GetClientDC", <em>void*</em> windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_GDI_GetClientDC(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code><em>void</em>  JS_GDI_GetClientDC(<em>void</em> windowHWND)</code></div>
	<p>Returns the device context for the client area of the specified window.</p>
</div>

<div class="function_definition" id="JS_GDI_GetScreenDC">
	<div class="c_func"><code>void* JS_GDI_GetScreenDC()</code></div>
	<div class="e_func"><code><em>void*</em>  JS_GDI_GetScreenDC() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_GDI_GetScreenDC") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_GDI_GetScreenDC()</code></div>
	<div class="p_func"><code><em>void</em>  JS_GDI_GetScreenDC()</code></div>
	<p>Returns a device context for the entire screen.<br>
</p><p>
WARNING: Only available on Windows, not Linux or macOS.</p>
</div>

<div class="function_definition" id="JS_GDI_GetSysColor">
	<div class="c_func"><code>int JS_GDI_GetSysColor(const char* GUIElement)</code></div>
	<div class="e_func"><code><em>int </em> JS_GDI_GetSysColor("GUIElement") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_GDI_GetSysColor", "GUIElement") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_GDI_GetSysColor(<em>string</em> GUIElement)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_GDI_GetSysColor(<em>String</em> GUIElement)</code></div>
</div>

<div class="function_definition" id="JS_GDI_GetTextColor">
	<div class="c_func"><code>int JS_GDI_GetTextColor(void* deviceHDC)</code></div>
	<div class="e_func"><code><em>int </em> JS_GDI_GetTextColor(<em>void*</em> deviceHDC) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_GDI_GetTextColor", <em>void*</em> deviceHDC) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_GDI_GetTextColor(<em>identifier</em> deviceHDC)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_GDI_GetTextColor(<em>void</em> deviceHDC)</code></div>
</div>

<div class="function_definition" id="JS_GDI_GetWindowDC">
	<div class="c_func"><code>void* JS_GDI_GetWindowDC(void* windowHWND)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_GDI_GetWindowDC(<em>void*</em> windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_GDI_GetWindowDC", <em>void*</em> windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_GDI_GetWindowDC(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code><em>void</em>  JS_GDI_GetWindowDC(<em>void</em> windowHWND)</code></div>
	<p>Returns the device context for the entire window, including title bar and frame.</p>
</div>

<div class="function_definition" id="JS_GDI_Line">
	<div class="c_func"><code>void JS_GDI_Line(void* deviceHDC, int x1, int y1, int x2, int y2)</code></div>
	<div class="e_func"><code>JS_GDI_Line(<em>void*</em> deviceHDC, <em>int </em>x1, <em>int </em>y1, <em>int </em>x2, <em>int </em>y2) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_GDI_Line", <em>void*</em> deviceHDC, <em>int </em>x1, <em>int </em>y1, <em>int </em>x2, <em>int </em>y2) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_GDI_Line(<em>identifier</em> deviceHDC, <em>integer</em> x1, <em>integer</em> y1, <em>integer</em> x2, <em>integer</em> y2)</code></div>
	<div class="p_func"><code>JS_GDI_Line(<em>void</em> deviceHDC, <em>Int</em> x1, <em>Int</em> y1, <em>Int</em> x2, <em>Int</em> y2)</code></div>
</div>

<div class="function_definition" id="JS_GDI_Polyline">
	<div class="c_func"><code>void JS_GDI_Polyline(void* deviceHDC, const char* packedX, const char* packedY, int numPoints)</code></div>
	<div class="e_func"><code>JS_GDI_Polyline(<em>void*</em> deviceHDC, "packedX", "packedY", <em>int </em>numPoints) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_GDI_Polyline", <em>void*</em> deviceHDC, "packedX", "packedY", <em>int </em>numPoints) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_GDI_Polyline(<em>identifier</em> deviceHDC, <em>string</em> packedX, <em>string</em> packedY, <em>integer</em> numPoints)</code></div>
	<div class="p_func"><code>JS_GDI_Polyline(<em>void</em> deviceHDC, <em>String</em> packedX, <em>String</em> packedY, <em>Int</em> numPoints)</code></div>
	<p>packedX and packedY are strings of points, each packed as "&lt;i4".</p>
</div>

<div class="function_definition" id="JS_GDI_ReleaseDC">
	<div class="c_func"><code>int JS_GDI_ReleaseDC(void* deviceHDC, void*  windowHWNDOptional)</code></div>
	<div class="e_func"><code><em>int </em> JS_GDI_ReleaseDC(<em>void*</em> deviceHDC, <em>void*</em>  windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_GDI_ReleaseDC", <em>void*</em> deviceHDC, <em>void*</em>  windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_GDI_ReleaseDC(<em>identifier</em> deviceHDC, <em>identifier</em>  windowHWND)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_GDI_ReleaseDC(<em>void</em> deviceHDC, <em>void</em>  windowHWNDOptional)</code></div>
	<p>To release a window HDC, both arguments must be supplied: the HWND as well as the HDC.  To release a screen DC, only the HDC needs to be supplied.  <br>
</p><p>
For compatibility with previous versions, the HWND and HDC can be supplied in any order.<br>
</p><p>
NOTE: Any GDI HDC should be released immediately after drawing, and deferred scripts should get and release new DCs in each cycle.</p>
</div>

<div class="function_definition" id="JS_GDI_SelectObject">
	<div class="c_func"><code>void* JS_GDI_SelectObject(void* deviceHDC, void* GDIObject)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_GDI_SelectObject(<em>void*</em> deviceHDC, <em>void*</em> GDIObject) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_GDI_SelectObject", <em>void*</em> deviceHDC, <em>void*</em> GDIObject) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_GDI_SelectObject(<em>identifier</em> deviceHDC, <em>identifier</em> GDIObject)</code></div>
	<div class="p_func"><code><em>void</em>  JS_GDI_SelectObject(<em>void</em> deviceHDC, <em>void</em> GDIObject)</code></div>
	<p>Activates a font, pen, or fill brush for subsequent drawing in the specified device context.</p>
</div>

<div class="function_definition" id="JS_GDI_SetPixel">
	<div class="c_func"><code>void JS_GDI_SetPixel(void* deviceHDC, int x, int y, int color)</code></div>
	<div class="e_func"><code>JS_GDI_SetPixel(<em>void*</em> deviceHDC, <em>int </em>x, <em>int </em>y, <em>int </em>color) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_GDI_SetPixel", <em>void*</em> deviceHDC, <em>int </em>x, <em>int </em>y, <em>int </em>color) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_GDI_SetPixel(<em>identifier</em> deviceHDC, <em>integer</em> x, <em>integer</em> y, <em>integer</em> color)</code></div>
	<div class="p_func"><code>JS_GDI_SetPixel(<em>void</em> deviceHDC, <em>Int</em> x, <em>Int</em> y, <em>Int</em> color)</code></div>
</div>

<div class="function_definition" id="JS_GDI_SetTextBkColor">
	<div class="c_func"><code>void JS_GDI_SetTextBkColor(void* deviceHDC, int color)</code></div>
	<div class="e_func"><code>JS_GDI_SetTextBkColor(<em>void*</em> deviceHDC, <em>int </em>color) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_GDI_SetTextBkColor", <em>void*</em> deviceHDC, <em>int </em>color) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_GDI_SetTextBkColor(<em>identifier</em> deviceHDC, <em>integer</em> color)</code></div>
	<div class="p_func"><code>JS_GDI_SetTextBkColor(<em>void</em> deviceHDC, <em>Int</em> color)</code></div>
</div>

<div class="function_definition" id="JS_GDI_SetTextBkMode">
	<div class="c_func"><code>void JS_GDI_SetTextBkMode(void* deviceHDC, int mode)</code></div>
	<div class="e_func"><code>JS_GDI_SetTextBkMode(<em>void*</em> deviceHDC, <em>int </em>mode) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_GDI_SetTextBkMode", <em>void*</em> deviceHDC, <em>int </em>mode) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_GDI_SetTextBkMode(<em>identifier</em> deviceHDC, <em>integer</em> mode)</code></div>
	<div class="p_func"><code>JS_GDI_SetTextBkMode(<em>void</em> deviceHDC, <em>Int</em> mode)</code></div>
</div>

<div class="function_definition" id="JS_GDI_SetTextColor">
	<div class="c_func"><code>void JS_GDI_SetTextColor(void* deviceHDC, int color)</code></div>
	<div class="e_func"><code>JS_GDI_SetTextColor(<em>void*</em> deviceHDC, <em>int </em>color) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_GDI_SetTextColor", <em>void*</em> deviceHDC, <em>int </em>color) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_GDI_SetTextColor(<em>identifier</em> deviceHDC, <em>integer</em> color)</code></div>
	<div class="p_func"><code>JS_GDI_SetTextColor(<em>void</em> deviceHDC, <em>Int</em> color)</code></div>
</div>

<div class="function_definition" id="JS_GDI_StretchBlit">
	<div class="c_func"><code>void JS_GDI_StretchBlit(void* destHDC, int dstx, int dsty, int dstw, int dsth, void* sourceHDC, int srcx, int srxy, int srcw, int srch, const char* modeOptional)</code></div>
	<div class="e_func"><code>JS_GDI_StretchBlit(<em>void*</em> destHDC, <em>int </em>dstx, <em>int </em>dsty, <em>int </em>dstw, <em>int </em>dsth, <em>void*</em> sourceHDC, <em>int </em>srcx, <em>int </em>srxy, <em>int </em>srcw, <em>int </em>srch, <em>optional </em>"mode") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_GDI_StretchBlit", <em>void*</em> destHDC, <em>int </em>dstx, <em>int </em>dsty, <em>int </em>dstw, <em>int </em>dsth, <em>void*</em> sourceHDC, <em>int </em>srcx, <em>int </em>srxy, <em>int </em>srcw, <em>int </em>srch, <em>optional </em>"mode") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_GDI_StretchBlit(<em>identifier</em> destHDC, <em>integer</em> dstx, <em>integer</em> dsty, <em>integer</em> dstw, <em>integer</em> dsth, <em>identifier</em> sourceHDC, <em>integer</em> srcx, <em>integer</em> srxy, <em>integer</em> srcw, <em>integer</em> srch, <em>optional </em><em>string</em> mode)</code></div>
	<div class="p_func"><code>JS_GDI_StretchBlit(<em>void</em> destHDC, <em>Int</em> dstx, <em>Int</em> dsty, <em>Int</em> dstw, <em>Int</em> dsth, <em>void</em> sourceHDC, <em>Int</em> srcx, <em>Int</em> srxy, <em>Int</em> srcw, <em>Int</em> srch, <em>String</em> modeOptional)</code></div>
	<p>Blits between two device contexts, which may include LICE "system bitmaps".<br>
</p><p>
modeOptional: "SRCCOPY" by default, or specify "ALPHA" to enable per-pixel alpha blending.<br>
</p><p>
WARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.</p>
</div>

<div class="function_definition" id="JS_Header_GetItemCount">
	<div class="c_func"><code>int JS_Header_GetItemCount(void* headerHWND)</code></div>
	<div class="e_func"><code><em>int </em> JS_Header_GetItemCount(<em>void*</em> headerHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Header_GetItemCount", <em>void*</em> headerHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Header_GetItemCount(<em>identifier</em> headerHWND)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Header_GetItemCount(<em>void</em> headerHWND)</code></div>
</div>

<div class="function_definition" id="JS_Int">
	<div class="c_func"><code>void JS_Int(void* pointer, int offset, int* intOut)</code></div>
	<div class="e_func"><code>JS_Int(<em>void*</em> pointer, <em>int </em>offset, <em>int &amp;</em>int) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Int", <em>void*</em> pointer, <em>int </em>offset, <em>int &amp;</em>int) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer </em>int = reaper.JS_Int(<em>identifier</em> pointer, <em>integer</em> offset)</code></div>
	<div class="p_func"><code>(<em>void</em> pointer, <em>Int</em> offset, <em>Int</em> intOut) = JS_Int(pointer, offset, intOut)</code></div>
	<p>Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.</p>
</div>

<div class="function_definition" id="JS_LICE_AlterBitmapHSV">
	<div class="c_func"><code>void JS_LICE_AlterBitmapHSV(void* bitmap, double hue, double saturation, double value)</code></div>
	<div class="e_func"><code>JS_LICE_AlterBitmapHSV(<em>void*</em> bitmap, hue, saturation, value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_AlterBitmapHSV", <em>void*</em> bitmap, hue, saturation, value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_AlterBitmapHSV(<em>identifier</em> bitmap, <em>number</em> hue, <em>number</em> saturation, <em>number</em> value)</code></div>
	<div class="p_func"><code>JS_LICE_AlterBitmapHSV(<em>void</em> bitmap, <em>Float</em> hue, <em>Float</em> saturation, <em>Float</em> value)</code></div>
	<p>Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)</p>
</div>

<div class="function_definition" id="JS_LICE_AlterRectHSV">
	<div class="c_func"><code>void JS_LICE_AlterRectHSV(void* bitmap, int x, int y, int w, int h, double hue, double saturation, double value)</code></div>
	<div class="e_func"><code>JS_LICE_AlterRectHSV(<em>void*</em> bitmap, <em>int </em>x, <em>int </em>y, <em>int </em>w, <em>int </em>h, hue, saturation, value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_AlterRectHSV", <em>void*</em> bitmap, <em>int </em>x, <em>int </em>y, <em>int </em>w, <em>int </em>h, hue, saturation, value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_AlterRectHSV(<em>identifier</em> bitmap, <em>integer</em> x, <em>integer</em> y, <em>integer</em> w, <em>integer</em> h, <em>number</em> hue, <em>number</em> saturation, <em>number</em> value)</code></div>
	<div class="p_func"><code>JS_LICE_AlterRectHSV(<em>void</em> bitmap, <em>Int</em> x, <em>Int</em> y, <em>Int</em> w, <em>Int</em> h, <em>Float</em> hue, <em>Float</em> saturation, <em>Float</em> value)</code></div>
	<p>Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)</p>
</div>

<div class="function_definition" id="JS_LICE_Arc">
	<div class="c_func"><code>void JS_LICE_Arc(void* bitmap, double cx, double cy, double r, double minAngle, double maxAngle, int color, double alpha, const char* mode, bool antialias)</code></div>
	<div class="e_func"><code>JS_LICE_Arc(<em>void*</em> bitmap, cx, cy, r, minAngle, maxAngle, <em>int </em>color, alpha, "mode", <em>bool </em>antialias) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_Arc", <em>void*</em> bitmap, cx, cy, r, minAngle, maxAngle, <em>int </em>color, alpha, "mode", <em>bool </em>antialias) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_Arc(<em>identifier</em> bitmap, <em>number</em> cx, <em>number</em> cy, <em>number</em> r, <em>number</em> minAngle, <em>number</em> maxAngle, <em>integer</em> color, <em>number</em> alpha, <em>string</em> mode, <em>boolean</em> antialias)</code></div>
	<div class="p_func"><code>JS_LICE_Arc(<em>void</em> bitmap, <em>Float</em> cx, <em>Float</em> cy, <em>Float</em> r, <em>Float</em> minAngle, <em>Float</em> maxAngle, <em>Int</em> color, <em>Float</em> alpha, <em>String</em> mode, <em>Boolean</em> antialias)</code></div>
	<p>LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".<br>
</p><p>
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</p>
</div>

<div class="function_definition" id="JS_LICE_ArrayAllBitmaps">
	<div class="c_func"><code>int JS_LICE_ArrayAllBitmaps(void* reaperarray)</code></div>
	<div class="e_func"><code><em>int </em> JS_LICE_ArrayAllBitmaps(<em>void*</em> reaperarray) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_LICE_ArrayAllBitmaps", <em>void*</em> reaperarray) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_LICE_ArrayAllBitmaps(<em>identifier</em> reaperarray)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_LICE_ArrayAllBitmaps(<em>void</em> reaperarray)</code></div>
</div>

<div class="function_definition" id="JS_LICE_Bezier">
	<div class="c_func"><code>void JS_LICE_Bezier(void* bitmap, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, double tol, int color, double alpha, const char* mode, bool antialias)</code></div>
	<div class="e_func"><code>JS_LICE_Bezier(<em>void*</em> bitmap, xstart, ystart, xctl1, yctl1, xctl2, yctl2, xend, yend, tol, <em>int </em>color, alpha, "mode", <em>bool </em>antialias) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_Bezier", <em>void*</em> bitmap, xstart, ystart, xctl1, yctl1, xctl2, yctl2, xend, yend, tol, <em>int </em>color, alpha, "mode", <em>bool </em>antialias) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_Bezier(<em>identifier</em> bitmap, <em>number</em> xstart, <em>number</em> ystart, <em>number</em> xctl1, <em>number</em> yctl1, <em>number</em> xctl2, <em>number</em> yctl2, <em>number</em> xend, <em>number</em> yend, <em>number</em> tol, <em>integer</em> color, <em>number</em> alpha, <em>string</em> mode, <em>boolean</em> antialias)</code></div>
	<div class="p_func"><code>JS_LICE_Bezier(<em>void</em> bitmap, <em>Float</em> xstart, <em>Float</em> ystart, <em>Float</em> xctl1, <em>Float</em> yctl1, <em>Float</em> xctl2, <em>Float</em> yctl2, <em>Float</em> xend, <em>Float</em> yend, <em>Float</em> tol, <em>Int</em> color, <em>Float</em> alpha, <em>String</em> mode, <em>Boolean</em> antialias)</code></div>
	<p>LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.<br>
</p><p>
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</p>
</div>

<div class="function_definition" id="JS_LICE_Blit">
	<div class="c_func"><code>void JS_LICE_Blit(void* destBitmap, int dstx, int dsty, void* sourceBitmap, int srcx, int srcy, int width, int height, double alpha, const char* mode)</code></div>
	<div class="e_func"><code>JS_LICE_Blit(<em>void*</em> destBitmap, <em>int </em>dstx, <em>int </em>dsty, <em>void*</em> sourceBitmap, <em>int </em>srcx, <em>int </em>srcy, <em>int </em>width, <em>int </em>height, alpha, "mode") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_Blit", <em>void*</em> destBitmap, <em>int </em>dstx, <em>int </em>dsty, <em>void*</em> sourceBitmap, <em>int </em>srcx, <em>int </em>srcy, <em>int </em>width, <em>int </em>height, alpha, "mode") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_Blit(<em>identifier</em> destBitmap, <em>integer</em> dstx, <em>integer</em> dsty, <em>identifier</em> sourceBitmap, <em>integer</em> srcx, <em>integer</em> srcy, <em>integer</em> width, <em>integer</em> height, <em>number</em> alpha, <em>string</em> mode)</code></div>
	<div class="p_func"><code>JS_LICE_Blit(<em>void</em> destBitmap, <em>Int</em> dstx, <em>Int</em> dsty, <em>void</em> sourceBitmap, <em>Int</em> srcx, <em>Int</em> srcy, <em>Int</em> width, <em>Int</em> height, <em>Float</em> alpha, <em>String</em> mode)</code></div>
	<p>Standard LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.<br>
</p><p>
In addition to the standard LICE modes, LICE_Blit also offers:<br>
 * "CHANCOPY_XTOY", with X and Y any of the four channels, A, R, G or B. (CHANCOPY_ATOA is similar to MASK mode.)<br>
 * "BLUR"<br>
 * "ALPHAMUL", which overwrites the destination with a per-pixel alpha-multiplied copy of the source. (Similar to first clearing the destination with 0x00000000 and then blitting with "COPY,ALPHA".)</p>
</div>

<div class="function_definition" id="JS_LICE_Circle">
	<div class="c_func"><code>void JS_LICE_Circle(void* bitmap, double cx, double cy, double r, int color, double alpha, const char* mode, bool antialias)</code></div>
	<div class="e_func"><code>JS_LICE_Circle(<em>void*</em> bitmap, cx, cy, r, <em>int </em>color, alpha, "mode", <em>bool </em>antialias) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_Circle", <em>void*</em> bitmap, cx, cy, r, <em>int </em>color, alpha, "mode", <em>bool </em>antialias) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_Circle(<em>identifier</em> bitmap, <em>number</em> cx, <em>number</em> cy, <em>number</em> r, <em>integer</em> color, <em>number</em> alpha, <em>string</em> mode, <em>boolean</em> antialias)</code></div>
	<div class="p_func"><code>JS_LICE_Circle(<em>void</em> bitmap, <em>Float</em> cx, <em>Float</em> cy, <em>Float</em> r, <em>Int</em> color, <em>Float</em> alpha, <em>String</em> mode, <em>Boolean</em> antialias)</code></div>
	<p>LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".<br>
</p><p>
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</p>
</div>

<div class="function_definition" id="JS_LICE_Clear">
	<div class="c_func"><code>void JS_LICE_Clear(void* bitmap, int color)</code></div>
	<div class="e_func"><code>JS_LICE_Clear(<em>void*</em> bitmap, <em>int </em>color) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_Clear", <em>void*</em> bitmap, <em>int </em>color) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_Clear(<em>identifier</em> bitmap, <em>integer</em> color)</code></div>
	<div class="p_func"><code>JS_LICE_Clear(<em>void</em> bitmap, <em>Int</em> color)</code></div>
</div>

<div class="function_definition" id="JS_LICE_CreateBitmap">
	<div class="c_func"><code>void* JS_LICE_CreateBitmap(bool isSysBitmap, int width, int height)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_LICE_CreateBitmap(<em>bool </em>isSysBitmap, <em>int </em>width, <em>int </em>height) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_LICE_CreateBitmap", <em>bool </em>isSysBitmap, <em>int </em>width, <em>int </em>height) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_LICE_CreateBitmap(<em>boolean</em> isSysBitmap, <em>integer</em> width, <em>integer</em> height)</code></div>
	<div class="p_func"><code><em>void</em>  JS_LICE_CreateBitmap(<em>Boolean</em> isSysBitmap, <em>Int</em> width, <em>Int</em> height)</code></div>
</div>

<div class="function_definition" id="JS_LICE_CreateFont">
	<div class="c_func"><code>void* JS_LICE_CreateFont()</code></div>
	<div class="e_func"><code><em>void*</em>  JS_LICE_CreateFont() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_LICE_CreateFont") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_LICE_CreateFont()</code></div>
	<div class="p_func"><code><em>void</em>  JS_LICE_CreateFont()</code></div>
</div>

<div class="function_definition" id="JS_LICE_DestroyBitmap">
	<div class="c_func"><code>void JS_LICE_DestroyBitmap(void* bitmap)</code></div>
	<div class="e_func"><code>JS_LICE_DestroyBitmap(<em>void*</em> bitmap) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_DestroyBitmap", <em>void*</em> bitmap) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_DestroyBitmap(<em>identifier</em> bitmap)</code></div>
	<div class="p_func"><code>JS_LICE_DestroyBitmap(<em>void</em> bitmap)</code></div>
	<p>Deletes the bitmap, and also unlinks bitmap from any composited window.</p>
</div>

<div class="function_definition" id="JS_LICE_DestroyFont">
	<div class="c_func"><code>void JS_LICE_DestroyFont(void* LICEFont)</code></div>
	<div class="e_func"><code>JS_LICE_DestroyFont(<em>void*</em> LICEFont) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_DestroyFont", <em>void*</em> LICEFont) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_DestroyFont(<em>identifier</em> LICEFont)</code></div>
	<div class="p_func"><code>JS_LICE_DestroyFont(<em>void</em> LICEFont)</code></div>
</div>

<div class="function_definition" id="JS_LICE_DrawChar">
	<div class="c_func"><code>void JS_LICE_DrawChar(void* bitmap, int x, int y, char c, int color, double alpha, int mode))</code></div>
	<div class="e_func"><code>JS_LICE_DrawChar(<em>void*</em> bitmap, <em>int </em>x, <em>int </em>y, <em>char </em>c, <em>int </em>color, alpha, <em>int </em>mode)) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_DrawChar", <em>void*</em> bitmap, <em>int </em>x, <em>int </em>y, <em>char </em>c, <em>int </em>color, alpha, <em>int </em>mode)) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_DrawChar(<em>identifier</em> bitmap, <em>integer</em> x, <em>integer</em> y, <em>integer</em> c, <em>integer</em> color, <em>number</em> alpha, <em>integer</em> mode))</code></div>
	<div class="p_func"><code>JS_LICE_DrawChar(<em>void</em> bitmap, <em>Int</em> x, <em>Int</em> y, <em>Int</em> c, <em>Int</em> color, <em>Float</em> alpha, <em>Int</em> mode))</code></div>
</div>

<div class="function_definition" id="JS_LICE_DrawText">
	<div class="c_func"><code>int JS_LICE_DrawText(void* bitmap, void* LICEFont, const char* text, int textLen, int x1, int y1, int x2, int y2)</code></div>
	<div class="e_func"><code><em>int </em> JS_LICE_DrawText(<em>void*</em> bitmap, <em>void*</em> LICEFont, "text", <em>int </em>textLen, <em>int </em>x1, <em>int </em>y1, <em>int </em>x2, <em>int </em>y2) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_LICE_DrawText", <em>void*</em> bitmap, <em>void*</em> LICEFont, "text", <em>int </em>textLen, <em>int </em>x1, <em>int </em>y1, <em>int </em>x2, <em>int </em>y2) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_LICE_DrawText(<em>identifier</em> bitmap, <em>identifier</em> LICEFont, <em>string</em> text, <em>integer</em> textLen, <em>integer</em> x1, <em>integer</em> y1, <em>integer</em> x2, <em>integer</em> y2)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_LICE_DrawText(<em>void</em> bitmap, <em>void</em> LICEFont, <em>String</em> text, <em>Int</em> textLen, <em>Int</em> x1, <em>Int</em> y1, <em>Int</em> x2, <em>Int</em> y2)</code></div>
</div>

<div class="function_definition" id="JS_LICE_FillCircle">
	<div class="c_func"><code>void JS_LICE_FillCircle(void* bitmap, double cx, double cy, double r, int color, double alpha, const char* mode, bool antialias)</code></div>
	<div class="e_func"><code>JS_LICE_FillCircle(<em>void*</em> bitmap, cx, cy, r, <em>int </em>color, alpha, "mode", <em>bool </em>antialias) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_FillCircle", <em>void*</em> bitmap, cx, cy, r, <em>int </em>color, alpha, "mode", <em>bool </em>antialias) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_FillCircle(<em>identifier</em> bitmap, <em>number</em> cx, <em>number</em> cy, <em>number</em> r, <em>integer</em> color, <em>number</em> alpha, <em>string</em> mode, <em>boolean</em> antialias)</code></div>
	<div class="p_func"><code>JS_LICE_FillCircle(<em>void</em> bitmap, <em>Float</em> cx, <em>Float</em> cy, <em>Float</em> r, <em>Int</em> color, <em>Float</em> alpha, <em>String</em> mode, <em>Boolean</em> antialias)</code></div>
	<p>LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".<br>
</p><p>
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</p>
</div>

<div class="function_definition" id="JS_LICE_FillPolygon">
	<div class="c_func"><code>void JS_LICE_FillPolygon(void* bitmap, const char* packedX, const char* packedY, int numPoints, int color, double alpha, const char* mode)</code></div>
	<div class="e_func"><code>JS_LICE_FillPolygon(<em>void*</em> bitmap, "packedX", "packedY", <em>int </em>numPoints, <em>int </em>color, alpha, "mode") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_FillPolygon", <em>void*</em> bitmap, "packedX", "packedY", <em>int </em>numPoints, <em>int </em>color, alpha, "mode") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_FillPolygon(<em>identifier</em> bitmap, <em>string</em> packedX, <em>string</em> packedY, <em>integer</em> numPoints, <em>integer</em> color, <em>number</em> alpha, <em>string</em> mode)</code></div>
	<div class="p_func"><code>JS_LICE_FillPolygon(<em>void</em> bitmap, <em>String</em> packedX, <em>String</em> packedY, <em>Int</em> numPoints, <em>Int</em> color, <em>Float</em> alpha, <em>String</em> mode)</code></div>
	<p>packedX and packedY are two strings of coordinates, each packed as "&lt;i4".<br>
</p><p>
LICE modes : "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.<br>
</p><p>
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</p>
</div>

<div class="function_definition" id="JS_LICE_FillRect">
	<div class="c_func"><code>void JS_LICE_FillRect(void* bitmap, int x, int y, int w, int h, int color, double alpha, const char* mode)</code></div>
	<div class="e_func"><code>JS_LICE_FillRect(<em>void*</em> bitmap, <em>int </em>x, <em>int </em>y, <em>int </em>w, <em>int </em>h, <em>int </em>color, alpha, "mode") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_FillRect", <em>void*</em> bitmap, <em>int </em>x, <em>int </em>y, <em>int </em>w, <em>int </em>h, <em>int </em>color, alpha, "mode") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_FillRect(<em>identifier</em> bitmap, <em>integer</em> x, <em>integer</em> y, <em>integer</em> w, <em>integer</em> h, <em>integer</em> color, <em>number</em> alpha, <em>string</em> mode)</code></div>
	<div class="p_func"><code>JS_LICE_FillRect(<em>void</em> bitmap, <em>Int</em> x, <em>Int</em> y, <em>Int</em> w, <em>Int</em> h, <em>Int</em> color, <em>Float</em> alpha, <em>String</em> mode)</code></div>
	<p>LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".<br>
</p><p>
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</p>
</div>

<div class="function_definition" id="JS_LICE_FillTriangle">
	<div class="c_func"><code>void JS_LICE_FillTriangle(void* bitmap, int x1, int y1, int x2, int y2, int x3, int y3, int color, double alpha, const char* mode)</code></div>
	<div class="e_func"><code>JS_LICE_FillTriangle(<em>void*</em> bitmap, <em>int </em>x1, <em>int </em>y1, <em>int </em>x2, <em>int </em>y2, <em>int </em>x3, <em>int </em>y3, <em>int </em>color, alpha, "mode") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_FillTriangle", <em>void*</em> bitmap, <em>int </em>x1, <em>int </em>y1, <em>int </em>x2, <em>int </em>y2, <em>int </em>x3, <em>int </em>y3, <em>int </em>color, alpha, "mode") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_FillTriangle(<em>identifier</em> bitmap, <em>integer</em> x1, <em>integer</em> y1, <em>integer</em> x2, <em>integer</em> y2, <em>integer</em> x3, <em>integer</em> y3, <em>integer</em> color, <em>number</em> alpha, <em>string</em> mode)</code></div>
	<div class="p_func"><code>JS_LICE_FillTriangle(<em>void</em> bitmap, <em>Int</em> x1, <em>Int</em> y1, <em>Int</em> x2, <em>Int</em> y2, <em>Int</em> x3, <em>Int</em> y3, <em>Int</em> color, <em>Float</em> alpha, <em>String</em> mode)</code></div>
	<p>LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".<br>
</p><p>
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</p>
</div>

<div class="function_definition" id="JS_LICE_GetDC">
	<div class="c_func"><code>void* JS_LICE_GetDC(void* bitmap)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_LICE_GetDC(<em>void*</em> bitmap) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_LICE_GetDC", <em>void*</em> bitmap) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_LICE_GetDC(<em>identifier</em> bitmap)</code></div>
	<div class="p_func"><code><em>void</em>  JS_LICE_GetDC(<em>void</em> bitmap)</code></div>
</div>

<div class="function_definition" id="JS_LICE_GetHeight">
	<div class="c_func"><code>int JS_LICE_GetHeight(void* bitmap)</code></div>
	<div class="e_func"><code><em>int </em> JS_LICE_GetHeight(<em>void*</em> bitmap) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_LICE_GetHeight", <em>void*</em> bitmap) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_LICE_GetHeight(<em>identifier</em> bitmap)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_LICE_GetHeight(<em>void</em> bitmap)</code></div>
</div>

<div class="function_definition" id="JS_LICE_GetPixel">
	<div class="c_func"><code>void JS_LICE_GetPixel(void* bitmap, int x, int y, double* colorOut)</code></div>
	<div class="e_func"><code>JS_LICE_GetPixel(<em>void*</em> bitmap, <em>int </em>x, <em>int </em>y, <em>&amp;</em>color) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_GetPixel", <em>void*</em> bitmap, <em>int </em>x, <em>int </em>y, <em>&amp;</em>color) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>color = reaper.JS_LICE_GetPixel(<em>identifier</em> bitmap, <em>integer</em> x, <em>integer</em> y)</code></div>
	<div class="p_func"><code>(<em>void</em> bitmap, <em>Int</em> x, <em>Int</em> y, <em>Float</em> colorOut) = JS_LICE_GetPixel(bitmap, x, y, colorOut)</code></div>
	<p>Returns the color of the specified pixel.</p>
</div>

<div class="function_definition" id="JS_LICE_GetWidth">
	<div class="c_func"><code>int JS_LICE_GetWidth(void* bitmap)</code></div>
	<div class="e_func"><code><em>int </em> JS_LICE_GetWidth(<em>void*</em> bitmap) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_LICE_GetWidth", <em>void*</em> bitmap) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_LICE_GetWidth(<em>identifier</em> bitmap)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_LICE_GetWidth(<em>void</em> bitmap)</code></div>
</div>

<div class="function_definition" id="JS_LICE_GradRect">
	<div class="c_func"><code>void JS_LICE_GradRect(void* bitmap, int dstx, int dsty, int dstw, int dsth, double ir, double ig, double ib, double ia, double drdx, double dgdx, double dbdx, double dadx, double drdy, double dgdy, double dbdy, double dady, const char* mode)</code></div>
	<div class="e_func"><code>JS_LICE_GradRect(<em>void*</em> bitmap, <em>int </em>dstx, <em>int </em>dsty, <em>int </em>dstw, <em>int </em>dsth, ir, ig, ib, ia, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady, "mode") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_GradRect", <em>void*</em> bitmap, <em>int </em>dstx, <em>int </em>dsty, <em>int </em>dstw, <em>int </em>dsth, ir, ig, ib, ia, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady, "mode") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_GradRect(<em>identifier</em> bitmap, <em>integer</em> dstx, <em>integer</em> dsty, <em>integer</em> dstw, <em>integer</em> dsth, <em>number</em> ir, <em>number</em> ig, <em>number</em> ib, <em>number</em> ia, <em>number</em> drdx, <em>number</em> dgdx, <em>number</em> dbdx, <em>number</em> dadx, <em>number</em> drdy, <em>number</em> dgdy, <em>number</em> dbdy, <em>number</em> dady, <em>string</em> mode)</code></div>
	<div class="p_func"><code>JS_LICE_GradRect(<em>void</em> bitmap, <em>Int</em> dstx, <em>Int</em> dsty, <em>Int</em> dstw, <em>Int</em> dsth, <em>Float</em> ir, <em>Float</em> ig, <em>Float</em> ib, <em>Float</em> ia, <em>Float</em> drdx, <em>Float</em> dgdx, <em>Float</em> dbdx, <em>Float</em> dadx, <em>Float</em> drdy, <em>Float</em> dgdy, <em>Float</em> dbdy, <em>Float</em> dady, <em>String</em> mode)</code></div>
</div>

<div class="function_definition" id="JS_LICE_IsFlipped">
	<div class="c_func"><code>bool JS_LICE_IsFlipped(void* bitmap)</code></div>
	<div class="e_func"><code><em>bool </em> JS_LICE_IsFlipped(<em>void*</em> bitmap) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_LICE_IsFlipped", <em>void*</em> bitmap) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_LICE_IsFlipped(<em>identifier</em> bitmap)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_LICE_IsFlipped(<em>void</em> bitmap)</code></div>
</div>

<div class="function_definition" id="JS_LICE_Line">
	<div class="c_func"><code>void JS_LICE_Line(void* bitmap, double x1, double y1, double x2, double y2, int color, double alpha, const char* mode, bool antialias)</code></div>
	<div class="e_func"><code>JS_LICE_Line(<em>void*</em> bitmap, x1, y1, x2, y2, <em>int </em>color, alpha, "mode", <em>bool </em>antialias) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_Line", <em>void*</em> bitmap, x1, y1, x2, y2, <em>int </em>color, alpha, "mode", <em>bool </em>antialias) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_Line(<em>identifier</em> bitmap, <em>number</em> x1, <em>number</em> y1, <em>number</em> x2, <em>number</em> y2, <em>integer</em> color, <em>number</em> alpha, <em>string</em> mode, <em>boolean</em> antialias)</code></div>
	<div class="p_func"><code>JS_LICE_Line(<em>void</em> bitmap, <em>Float</em> x1, <em>Float</em> y1, <em>Float</em> x2, <em>Float</em> y2, <em>Int</em> color, <em>Float</em> alpha, <em>String</em> mode, <em>Boolean</em> antialias)</code></div>
	<p>LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".<br>
</p><p>
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</p>
</div>

<div class="function_definition" id="JS_LICE_ListAllBitmaps">
	<div class="c_func"><code>int JS_LICE_ListAllBitmaps(char* listOutNeedBig, int listOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> JS_LICE_ListAllBitmaps(#list) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_LICE_ListAllBitmaps", #list) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>list = reaper.JS_LICE_ListAllBitmaps()</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>String</em> listOutNeedBig, <em>Int</em> listOutNeedBig_sz) = JS_LICE_ListAllBitmaps(listOutNeedBig, listOutNeedBig_sz)</code></div>
</div>

<div class="function_definition" id="JS_LICE_LoadJPG">
	<div class="c_func"><code>void* JS_LICE_LoadJPG(const char* filename)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_LICE_LoadJPG("filename") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_LICE_LoadJPG", "filename") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_LICE_LoadJPG(<em>string</em> filename)</code></div>
	<div class="p_func"><code><em>void</em>  JS_LICE_LoadJPG(<em>String</em> filename)</code></div>
	<p>Returns a system LICE bitmap containing the JPEG.</p>
</div>

<div class="function_definition" id="JS_LICE_LoadJPGFromMemory">
	<div class="c_func"><code>void* JS_LICE_LoadJPGFromMemory(const char* buffer, int bufsize)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_LICE_LoadJPGFromMemory("buffer", <em>int </em>bufsize) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_LICE_LoadJPGFromMemory", "buffer", <em>int </em>bufsize) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_LICE_LoadJPGFromMemory(<em>string</em> buffer, <em>integer</em> bufsize)</code></div>
	<div class="p_func"><code><em>void</em>  JS_LICE_LoadJPGFromMemory(<em>String</em> buffer, <em>Int</em> bufsize)</code></div>
	<p>Returns a system LICE bitmap containing the JPEG.</p>
</div>

<div class="function_definition" id="JS_LICE_LoadPNG">
	<div class="c_func"><code>void* JS_LICE_LoadPNG(const char* filename)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_LICE_LoadPNG("filename") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_LICE_LoadPNG", "filename") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_LICE_LoadPNG(<em>string</em> filename)</code></div>
	<div class="p_func"><code><em>void</em>  JS_LICE_LoadPNG(<em>String</em> filename)</code></div>
	<p>Returns a system LICE bitmap containing the PNG.</p>
</div>

<div class="function_definition" id="JS_LICE_LoadPNGFromMemory">
	<div class="c_func"><code>void* JS_LICE_LoadPNGFromMemory(const char* buffer, int bufsize)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_LICE_LoadPNGFromMemory("buffer", <em>int </em>bufsize) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_LICE_LoadPNGFromMemory", "buffer", <em>int </em>bufsize) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_LICE_LoadPNGFromMemory(<em>string</em> buffer, <em>integer</em> bufsize)</code></div>
	<div class="p_func"><code><em>void</em>  JS_LICE_LoadPNGFromMemory(<em>String</em> buffer, <em>Int</em> bufsize)</code></div>
	<p>Returns a system LICE bitmap containing the PNG.</p>
</div>

<div class="function_definition" id="JS_LICE_MeasureText">
	<div class="c_func"><code>void JS_LICE_MeasureText(const char* text, int* widthOut, int* HeightOut)</code></div>
	<div class="e_func"><code>JS_LICE_MeasureText("text", <em>int &amp;</em>width, <em>int &amp;</em>Height) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_MeasureText", "text", <em>int &amp;</em>width, <em>int &amp;</em>Height) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer </em>width, <em>integer </em>Height = reaper.JS_LICE_MeasureText(<em>string</em> text)</code></div>
	<div class="p_func"><code>(<em>String</em> text, <em>Int</em> widthOut, <em>Int</em> HeightOut) = JS_LICE_MeasureText(text, widthOut, HeightOut)</code></div>
</div>

<div class="function_definition" id="JS_LICE_ProcessRect">
	<div class="c_func"><code>bool JS_LICE_ProcessRect(void* bitmap, int x, int y, int w, int h, const char* mode, double operand)</code></div>
	<div class="e_func"><code><em>bool </em> JS_LICE_ProcessRect(<em>void*</em> bitmap, <em>int </em>x, <em>int </em>y, <em>int </em>w, <em>int </em>h, "mode", operand) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_LICE_ProcessRect", <em>void*</em> bitmap, <em>int </em>x, <em>int </em>y, <em>int </em>w, <em>int </em>h, "mode", operand) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_LICE_ProcessRect(<em>identifier</em> bitmap, <em>integer</em> x, <em>integer</em> y, <em>integer</em> w, <em>integer</em> h, <em>string</em> mode, <em>number</em> operand)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_LICE_ProcessRect(<em>void</em> bitmap, <em>Int</em> x, <em>Int</em> y, <em>Int</em> w, <em>Int</em> h, <em>String</em> mode, <em>Float</em> operand)</code></div>
	<p>Applies bitwise operations to each pixel in the target rectangle.<br>
</p><p>
operand: a color in 0xAARRGGBB format.<br>
</p><p>
modes:<br>
 * "XOR", "OR" or "AND".<br>
 * "SET_XYZ", with XYZ any combination of A, R, G, and B: copies the specified channels from operand to the bitmap. (Useful for setting the alpha values of a bitmap.)<br>
 * "ALPHAMUL": Performs alpha pre-multiplication on each pixel in the rect. operand is ignored in this mode. (On WindowsOS, GDI_Blit does not perform alpha multiplication on the fly, and a separate alpha pre-multiplication step is therefore required.)<br>
</p><p>
NOTE:<br>
LICE_Blit and LICE_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:<br>
reaper.JS_LICE_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, "ADD").</p>
</div>

<div class="function_definition" id="JS_LICE_PutPixel">
	<div class="c_func"><code>void JS_LICE_PutPixel(void* bitmap, int x, int y, double color, double alpha, const char* mode)</code></div>
	<div class="e_func"><code>JS_LICE_PutPixel(<em>void*</em> bitmap, <em>int </em>x, <em>int </em>y, color, alpha, "mode") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_PutPixel", <em>void*</em> bitmap, <em>int </em>x, <em>int </em>y, color, alpha, "mode") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_PutPixel(<em>identifier</em> bitmap, <em>integer</em> x, <em>integer</em> y, <em>number</em> color, <em>number</em> alpha, <em>string</em> mode)</code></div>
	<div class="p_func"><code>JS_LICE_PutPixel(<em>void</em> bitmap, <em>Int</em> x, <em>Int</em> y, <em>Float</em> color, <em>Float</em> alpha, <em>String</em> mode)</code></div>
	<p>LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".<br>
</p><p>
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</p>
</div>

<div class="function_definition" id="JS_LICE_Resize">
	<div class="c_func"><code>void JS_LICE_Resize(void* bitmap, int width, int height)</code></div>
	<div class="e_func"><code>JS_LICE_Resize(<em>void*</em> bitmap, <em>int </em>width, <em>int </em>height) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_Resize", <em>void*</em> bitmap, <em>int </em>width, <em>int </em>height) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_Resize(<em>identifier</em> bitmap, <em>integer</em> width, <em>integer</em> height)</code></div>
	<div class="p_func"><code>JS_LICE_Resize(<em>void</em> bitmap, <em>Int</em> width, <em>Int</em> height)</code></div>
</div>

<div class="function_definition" id="JS_LICE_RotatedBlit">
	<div class="c_func"><code>void JS_LICE_RotatedBlit(void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* sourceBitmap, double srcx, double srcy, double srcw, double srch, double angle, double rotxcent, double rotycent, bool cliptosourcerect, double alpha, const char* mode)</code></div>
	<div class="e_func"><code>JS_LICE_RotatedBlit(<em>void*</em> destBitmap, <em>int </em>dstx, <em>int </em>dsty, <em>int </em>dstw, <em>int </em>dsth, <em>void*</em> sourceBitmap, srcx, srcy, srcw, srch, angle, rotxcent, rotycent, <em>bool </em>cliptosourcerect, alpha, "mode") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_RotatedBlit", <em>void*</em> destBitmap, <em>int </em>dstx, <em>int </em>dsty, <em>int </em>dstw, <em>int </em>dsth, <em>void*</em> sourceBitmap, srcx, srcy, srcw, srch, angle, rotxcent, rotycent, <em>bool </em>cliptosourcerect, alpha, "mode") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_RotatedBlit(<em>identifier</em> destBitmap, <em>integer</em> dstx, <em>integer</em> dsty, <em>integer</em> dstw, <em>integer</em> dsth, <em>identifier</em> sourceBitmap, <em>number</em> srcx, <em>number</em> srcy, <em>number</em> srcw, <em>number</em> srch, <em>number</em> angle, <em>number</em> rotxcent, <em>number</em> rotycent, <em>boolean</em> cliptosourcerect, <em>number</em> alpha, <em>string</em> mode)</code></div>
	<div class="p_func"><code>JS_LICE_RotatedBlit(<em>void</em> destBitmap, <em>Int</em> dstx, <em>Int</em> dsty, <em>Int</em> dstw, <em>Int</em> dsth, <em>void</em> sourceBitmap, <em>Float</em> srcx, <em>Float</em> srcy, <em>Float</em> srcw, <em>Float</em> srch, <em>Float</em> angle, <em>Float</em> rotxcent, <em>Float</em> rotycent, <em>Boolean</em> cliptosourcerect, <em>Float</em> alpha, <em>String</em> mode)</code></div>
	<p>LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.</p>
</div>

<div class="function_definition" id="JS_LICE_RoundRect">
	<div class="c_func"><code>void JS_LICE_RoundRect(void* bitmap, double x, double y, double w, double h, int cornerradius, int color, double alpha, const char* mode, bool antialias)</code></div>
	<div class="e_func"><code>JS_LICE_RoundRect(<em>void*</em> bitmap, x, y, w, h, <em>int </em>cornerradius, <em>int </em>color, alpha, "mode", <em>bool </em>antialias) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_RoundRect", <em>void*</em> bitmap, x, y, w, h, <em>int </em>cornerradius, <em>int </em>color, alpha, "mode", <em>bool </em>antialias) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_RoundRect(<em>identifier</em> bitmap, <em>number</em> x, <em>number</em> y, <em>number</em> w, <em>number</em> h, <em>integer</em> cornerradius, <em>integer</em> color, <em>number</em> alpha, <em>string</em> mode, <em>boolean</em> antialias)</code></div>
	<div class="p_func"><code>JS_LICE_RoundRect(<em>void</em> bitmap, <em>Float</em> x, <em>Float</em> y, <em>Float</em> w, <em>Float</em> h, <em>Int</em> cornerradius, <em>Int</em> color, <em>Float</em> alpha, <em>String</em> mode, <em>Boolean</em> antialias)</code></div>
	<p>LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA".<br>
</p><p>
LICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).</p>
</div>

<div class="function_definition" id="JS_LICE_ScaledBlit">
	<div class="c_func"><code>void JS_LICE_ScaledBlit(void* destBitmap, int dstx, int dsty, int dstw, int dsth, void* srcBitmap, double srcx, double srcy, double srcw, double srch, double alpha, const char* mode)</code></div>
	<div class="e_func"><code>JS_LICE_ScaledBlit(<em>void*</em> destBitmap, <em>int </em>dstx, <em>int </em>dsty, <em>int </em>dstw, <em>int </em>dsth, <em>void*</em> srcBitmap, srcx, srcy, srcw, srch, alpha, "mode") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_ScaledBlit", <em>void*</em> destBitmap, <em>int </em>dstx, <em>int </em>dsty, <em>int </em>dstw, <em>int </em>dsth, <em>void*</em> srcBitmap, srcx, srcy, srcw, srch, alpha, "mode") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_ScaledBlit(<em>identifier</em> destBitmap, <em>integer</em> dstx, <em>integer</em> dsty, <em>integer</em> dstw, <em>integer</em> dsth, <em>identifier</em> srcBitmap, <em>number</em> srcx, <em>number</em> srcy, <em>number</em> srcw, <em>number</em> srch, <em>number</em> alpha, <em>string</em> mode)</code></div>
	<div class="p_func"><code>JS_LICE_ScaledBlit(<em>void</em> destBitmap, <em>Int</em> dstx, <em>Int</em> dsty, <em>Int</em> dstw, <em>Int</em> dsth, <em>void</em> srcBitmap, <em>Float</em> srcx, <em>Float</em> srcy, <em>Float</em> srcw, <em>Float</em> srch, <em>Float</em> alpha, <em>String</em> mode)</code></div>
	<p>LICE modes: "COPY" (default if empty string), "MASK", "ADD", "DODGE", "MUL", "OVERLAY" or "HSVADJ", any of which may be combined with "ALPHA" to enable per-pixel alpha blending.</p>
</div>

<div class="function_definition" id="JS_LICE_SetAlphaFromColorMask">
	<div class="c_func"><code>void JS_LICE_SetAlphaFromColorMask(void* bitmap, int colorRGB)</code></div>
	<div class="e_func"><code>JS_LICE_SetAlphaFromColorMask(<em>void*</em> bitmap, <em>int </em>colorRGB) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_SetAlphaFromColorMask", <em>void*</em> bitmap, <em>int </em>colorRGB) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_SetAlphaFromColorMask(<em>identifier</em> bitmap, <em>integer</em> colorRGB)</code></div>
	<div class="p_func"><code>JS_LICE_SetAlphaFromColorMask(<em>void</em> bitmap, <em>Int</em> colorRGB)</code></div>
	<p>Sets all pixels that match the given color's RGB values to fully transparent, and all other pixels to fully opaque.  (All pixels' RGB values remain unchanged.)</p>
</div>

<div class="function_definition" id="JS_LICE_SetFontBkColor">
	<div class="c_func"><code>void JS_LICE_SetFontBkColor(void* LICEFont, int color)</code></div>
	<div class="e_func"><code>JS_LICE_SetFontBkColor(<em>void*</em> LICEFont, <em>int </em>color) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_SetFontBkColor", <em>void*</em> LICEFont, <em>int </em>color) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_SetFontBkColor(<em>identifier</em> LICEFont, <em>integer</em> color)</code></div>
	<div class="p_func"><code>JS_LICE_SetFontBkColor(<em>void</em> LICEFont, <em>Int</em> color)</code></div>
	<p>Sets the color of the font background.</p>
</div>

<div class="function_definition" id="JS_LICE_SetFontColor">
	<div class="c_func"><code>void JS_LICE_SetFontColor(void* LICEFont, int color)</code></div>
	<div class="e_func"><code>JS_LICE_SetFontColor(<em>void*</em> LICEFont, <em>int </em>color) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_SetFontColor", <em>void*</em> LICEFont, <em>int </em>color) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_SetFontColor(<em>identifier</em> LICEFont, <em>integer</em> color)</code></div>
	<div class="p_func"><code>JS_LICE_SetFontColor(<em>void</em> LICEFont, <em>Int</em> color)</code></div>
</div>

<div class="function_definition" id="JS_LICE_SetFontFXColor">
	<div class="c_func"><code>void JS_LICE_SetFontFXColor(void* LICEFont, int color)</code></div>
	<div class="e_func"><code>JS_LICE_SetFontFXColor(<em>void*</em> LICEFont, <em>int </em>color) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_SetFontFXColor", <em>void*</em> LICEFont, <em>int </em>color) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_SetFontFXColor(<em>identifier</em> LICEFont, <em>integer</em> color)</code></div>
	<div class="p_func"><code>JS_LICE_SetFontFXColor(<em>void</em> LICEFont, <em>Int</em> color)</code></div>
	<p>Sets the color of font FX such as shadow.</p>
</div>

<div class="function_definition" id="JS_LICE_SetFontFromGDI">
	<div class="c_func"><code>void JS_LICE_SetFontFromGDI(void* LICEFont, void* GDIFont, const char* moreFormats)</code></div>
	<div class="e_func"><code>JS_LICE_SetFontFromGDI(<em>void*</em> LICEFont, <em>void*</em> GDIFont, "moreFormats") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_LICE_SetFontFromGDI", <em>void*</em> LICEFont, <em>void*</em> GDIFont, "moreFormats") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_LICE_SetFontFromGDI(<em>identifier</em> LICEFont, <em>identifier</em> GDIFont, <em>string</em> moreFormats)</code></div>
	<div class="p_func"><code>JS_LICE_SetFontFromGDI(<em>void</em> LICEFont, <em>void</em> GDIFont, <em>String</em> moreFormats)</code></div>
	<p>Converts a GDI font into a LICE font.<br>
</p><p>
The font can be modified by the following flags, in a comma-separated list:<br>
"VERTICAL", "BOTTOMUP", "NATIVE", "BLUR", "INVERT", "MONO", "SHADOW" or "OUTLINE".</p>
</div>

<div class="function_definition" id="JS_LICE_WriteJPG">
	<div class="c_func"><code>bool JS_LICE_WriteJPG(const char* filename, void* bitmap, int quality, bool* forceBaselineOptional)</code></div>
	<div class="e_func"><code><em>bool </em> JS_LICE_WriteJPG("filename", <em>void*</em> bitmap, <em>int </em>quality, <strong>unsupported</strong> forceBaselineOptional) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_LICE_WriteJPG", "filename", <em>void*</em> bitmap, <em>int </em>quality, <strong>unsupported</strong> forceBaselineOptional) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_LICE_WriteJPG(<em>string</em> filename, <em>identifier</em> bitmap, <em>integer</em> quality, <strong>unsupported</strong> forceBaseline)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> filename, <em>void</em> bitmap, <em>Int</em> quality, <em>Boolean</em> forceBaselineOptional) = JS_LICE_WriteJPG(filename, bitmap, quality, forceBaselineOptional)</code></div>
	<p>Parameters:<br>
</p><p>
 * quality is an integer in the range 1..100.<br>
 * forceBaseline is an optional boolean parameter that ensures compatibility with all JPEG viewers by preventing too low quality, "cubist" settings.</p>
</div>

<div class="function_definition" id="JS_LICE_WritePNG">
	<div class="c_func"><code>bool JS_LICE_WritePNG(const char* filename, void* bitmap, bool wantAlpha)</code></div>
	<div class="e_func"><code><em>bool </em> JS_LICE_WritePNG("filename", <em>void*</em> bitmap, <em>bool </em>wantAlpha) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_LICE_WritePNG", "filename", <em>void*</em> bitmap, <em>bool </em>wantAlpha) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_LICE_WritePNG(<em>string</em> filename, <em>identifier</em> bitmap, <em>boolean</em> wantAlpha)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_LICE_WritePNG(<em>String</em> filename, <em>void</em> bitmap, <em>Boolean</em> wantAlpha)</code></div>
</div>

<div class="function_definition" id="JS_ListView_EnsureVisible">
	<div class="c_func"><code>void JS_ListView_EnsureVisible(void* listviewHWND, int index, bool partialOK)</code></div>
	<div class="e_func"><code>JS_ListView_EnsureVisible(<em>void*</em> listviewHWND, <em>int </em>index, <em>bool </em>partialOK) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_ListView_EnsureVisible", <em>void*</em> listviewHWND, <em>int </em>index, <em>bool </em>partialOK) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_ListView_EnsureVisible(<em>identifier</em> listviewHWND, <em>integer</em> index, <em>boolean</em> partialOK)</code></div>
	<div class="p_func"><code>JS_ListView_EnsureVisible(<em>void</em> listviewHWND, <em>Int</em> index, <em>Boolean</em> partialOK)</code></div>
</div>

<div class="function_definition" id="JS_ListView_EnumSelItems">
	<div class="c_func"><code>int JS_ListView_EnumSelItems(void* listviewHWND, int index)</code></div>
	<div class="e_func"><code><em>int </em> JS_ListView_EnumSelItems(<em>void*</em> listviewHWND, <em>int </em>index) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_ListView_EnumSelItems", <em>void*</em> listviewHWND, <em>int </em>index) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_ListView_EnumSelItems(<em>identifier</em> listviewHWND, <em>integer</em> index)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_ListView_EnumSelItems(<em>void</em> listviewHWND, <em>Int</em> index)</code></div>
	<p>Returns the index of the next selected list item with index greater that the specified number. Returns -1 if no selected items left.</p>
</div>

<div class="function_definition" id="JS_ListView_GetFocusedItem">
	<div class="c_func"><code>int JS_ListView_GetFocusedItem(void* listviewHWND, char* textOut, int textOut_sz)</code></div>
	<div class="e_func"><code><em>int </em> JS_ListView_GetFocusedItem(<em>void*</em> listviewHWND, #text) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_ListView_GetFocusedItem", <em>void*</em> listviewHWND, #text) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>text = reaper.JS_ListView_GetFocusedItem(<em>identifier</em> listviewHWND)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>void</em> listviewHWND, <em>String</em> textOut, <em>Int</em> textOut_sz) = JS_ListView_GetFocusedItem(listviewHWND, textOut, textOut_sz)</code></div>
	<p>Returns the index and text of the focused item, if any.</p>
</div>

<div class="function_definition" id="JS_ListView_GetHeader">
	<div class="c_func"><code>void* JS_ListView_GetHeader(void* listviewHWND)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_ListView_GetHeader(<em>void*</em> listviewHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_ListView_GetHeader", <em>void*</em> listviewHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_ListView_GetHeader(<em>identifier</em> listviewHWND)</code></div>
	<div class="p_func"><code><em>void</em>  JS_ListView_GetHeader(<em>void</em> listviewHWND)</code></div>
</div>

<div class="function_definition" id="JS_ListView_GetItem">
	<div class="c_func"><code>void JS_ListView_GetItem(void* listviewHWND, int index, int subItem, char* textOut, int textOut_sz, int* stateOut)</code></div>
	<div class="e_func"><code>JS_ListView_GetItem(<em>void*</em> listviewHWND, <em>int </em>index, <em>int </em>subItem, #text, <em>int &amp;</em>state) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_ListView_GetItem", <em>void*</em> listviewHWND, <em>int </em>index, <em>int </em>subItem, #text, <em>int &amp;</em>state) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>text, <em>integer </em>state = reaper.JS_ListView_GetItem(<em>identifier</em> listviewHWND, <em>integer</em> index, <em>integer</em> subItem)</code></div>
	<div class="p_func"><code>(<em>void</em> listviewHWND, <em>Int</em> index, <em>Int</em> subItem, <em>String</em> textOut, <em>Int</em> textOut_sz, <em>Int</em> stateOut) = JS_ListView_GetItem(listviewHWND, index, subItem, textOut, textOut_sz, stateOut)</code></div>
	<p>Returns the text and state of specified item.</p>
</div>

<div class="function_definition" id="JS_ListView_GetItemCount">
	<div class="c_func"><code>int JS_ListView_GetItemCount(void* listviewHWND)</code></div>
	<div class="e_func"><code><em>int </em> JS_ListView_GetItemCount(<em>void*</em> listviewHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_ListView_GetItemCount", <em>void*</em> listviewHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_ListView_GetItemCount(<em>identifier</em> listviewHWND)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_ListView_GetItemCount(<em>void</em> listviewHWND)</code></div>
</div>

<div class="function_definition" id="JS_ListView_GetItemRect">
	<div class="c_func"><code>bool JS_ListView_GetItemRect(void* listviewHWND, int index, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</code></div>
	<div class="e_func"><code><em>bool </em> JS_ListView_GetItemRect(<em>void*</em> listviewHWND, <em>int </em>index, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_ListView_GetItemRect", <em>void*</em> listviewHWND, <em>int </em>index, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>left, <em>integer </em>top, <em>integer </em>right, <em>integer </em>bottom = reaper.JS_ListView_GetItemRect(<em>identifier</em> listviewHWND, <em>integer</em> index)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>void</em> listviewHWND, <em>Int</em> index, <em>Int</em> leftOut, <em>Int</em> topOut, <em>Int</em> rightOut, <em>Int</em> bottomOut) = JS_ListView_GetItemRect(listviewHWND, index, leftOut, topOut, rightOut, bottomOut)</code></div>
	<p>Returns client coordinates of the item.</p>
</div>

<div class="function_definition" id="JS_ListView_GetItemState">
	<div class="c_func"><code>int JS_ListView_GetItemState(void* listviewHWND, int index)</code></div>
	<div class="e_func"><code><em>int </em> JS_ListView_GetItemState(<em>void*</em> listviewHWND, <em>int </em>index) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_ListView_GetItemState", <em>void*</em> listviewHWND, <em>int </em>index) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_ListView_GetItemState(<em>identifier</em> listviewHWND, <em>integer</em> index)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_ListView_GetItemState(<em>void</em> listviewHWND, <em>Int</em> index)</code></div>
	<p>State is a bitmask:<br>
1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.<br>
</p><p>
Warning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.</p>
</div>

<div class="function_definition" id="JS_ListView_GetItemText">
	<div class="c_func"><code>void JS_ListView_GetItemText(void* listviewHWND, int index, int subItem, char* textOut, int textOut_sz)</code></div>
	<div class="e_func"><code>JS_ListView_GetItemText(<em>void*</em> listviewHWND, <em>int </em>index, <em>int </em>subItem, #text) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_ListView_GetItemText", <em>void*</em> listviewHWND, <em>int </em>index, <em>int </em>subItem, #text) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>text = reaper.JS_ListView_GetItemText(<em>identifier</em> listviewHWND, <em>integer</em> index, <em>integer</em> subItem)</code></div>
	<div class="p_func"><code>(<em>void</em> listviewHWND, <em>Int</em> index, <em>Int</em> subItem, <em>String</em> textOut, <em>Int</em> textOut_sz) = JS_ListView_GetItemText(listviewHWND, index, subItem, textOut, textOut_sz)</code></div>
</div>

<div class="function_definition" id="JS_ListView_GetSelectedCount">
	<div class="c_func"><code>int JS_ListView_GetSelectedCount(void* listviewHWND)</code></div>
	<div class="e_func"><code><em>int </em> JS_ListView_GetSelectedCount(<em>void*</em> listviewHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_ListView_GetSelectedCount", <em>void*</em> listviewHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_ListView_GetSelectedCount(<em>identifier</em> listviewHWND)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_ListView_GetSelectedCount(<em>void</em> listviewHWND)</code></div>
</div>

<div class="function_definition" id="JS_ListView_GetTopIndex">
	<div class="c_func"><code>int JS_ListView_GetTopIndex(void* listviewHWND)</code></div>
	<div class="e_func"><code><em>int </em> JS_ListView_GetTopIndex(<em>void*</em> listviewHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_ListView_GetTopIndex", <em>void*</em> listviewHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_ListView_GetTopIndex(<em>identifier</em> listviewHWND)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_ListView_GetTopIndex(<em>void</em> listviewHWND)</code></div>
</div>

<div class="function_definition" id="JS_ListView_HitTest">
	<div class="c_func"><code>void JS_ListView_HitTest(void* listviewHWND, int clientX, int clientY, int* indexOut, int* subItemOut, int* flagsOut)</code></div>
	<div class="e_func"><code>JS_ListView_HitTest(<em>void*</em> listviewHWND, <em>int </em>clientX, <em>int </em>clientY, <em>int &amp;</em>index, <em>int &amp;</em>subItem, <em>int &amp;</em>flags) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_ListView_HitTest", <em>void*</em> listviewHWND, <em>int </em>clientX, <em>int </em>clientY, <em>int &amp;</em>index, <em>int &amp;</em>subItem, <em>int &amp;</em>flags) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer </em>index, <em>integer </em>subItem, <em>integer </em>flags = reaper.JS_ListView_HitTest(<em>identifier</em> listviewHWND, <em>integer</em> clientX, <em>integer</em> clientY)</code></div>
	<div class="p_func"><code>(<em>void</em> listviewHWND, <em>Int</em> clientX, <em>Int</em> clientY, <em>Int</em> indexOut, <em>Int</em> subItemOut, <em>Int</em> flagsOut) = JS_ListView_HitTest(listviewHWND, clientX, clientY, indexOut, subItemOut, flagsOut)</code></div>
</div>

<div class="function_definition" id="JS_ListView_ListAllSelItems">
	<div class="c_func"><code>int JS_ListView_ListAllSelItems(void* listviewHWND, char* itemsOutNeedBig, int itemsOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> JS_ListView_ListAllSelItems(<em>void*</em> listviewHWND, #items) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_ListView_ListAllSelItems", <em>void*</em> listviewHWND, #items) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>items = reaper.JS_ListView_ListAllSelItems(<em>identifier</em> listviewHWND)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>void</em> listviewHWND, <em>String</em> itemsOutNeedBig, <em>Int</em> itemsOutNeedBig_sz) = JS_ListView_ListAllSelItems(listviewHWND, itemsOutNeedBig, itemsOutNeedBig_sz)</code></div>
	<p>Returns the indices of all selected items as a comma-separated list.<br>
</p><p>
 * retval: Number of selected items found; negative or zero if an error occured.</p>
</div>

<div class="function_definition" id="JS_ListView_SetItemState">
	<div class="c_func"><code>void JS_ListView_SetItemState(void* listviewHWND, int index, int state, int mask)</code></div>
	<div class="e_func"><code>JS_ListView_SetItemState(<em>void*</em> listviewHWND, <em>int </em>index, <em>int </em>state, <em>int </em>mask) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_ListView_SetItemState", <em>void*</em> listviewHWND, <em>int </em>index, <em>int </em>state, <em>int </em>mask) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_ListView_SetItemState(<em>identifier</em> listviewHWND, <em>integer</em> index, <em>integer</em> state, <em>integer</em> mask)</code></div>
	<div class="p_func"><code>JS_ListView_SetItemState(<em>void</em> listviewHWND, <em>Int</em> index, <em>Int</em> state, <em>Int</em> mask)</code></div>
	<p>The mask parameter specifies the state bits that must be set, and the state parameter specifies the new values for those bits.<br>
</p><p>
1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.<br>
</p><p>
Warning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.</p>
</div>

<div class="function_definition" id="JS_ListView_SetItemText">
	<div class="c_func"><code>void JS_ListView_SetItemText(void* listviewHWND, int index, int subItem, const char* text)</code></div>
	<div class="e_func"><code>JS_ListView_SetItemText(<em>void*</em> listviewHWND, <em>int </em>index, <em>int </em>subItem, "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_ListView_SetItemText", <em>void*</em> listviewHWND, <em>int </em>index, <em>int </em>subItem, "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_ListView_SetItemText(<em>identifier</em> listviewHWND, <em>integer</em> index, <em>integer</em> subItem, <em>string</em> text)</code></div>
	<div class="p_func"><code>JS_ListView_SetItemText(<em>void</em> listviewHWND, <em>Int</em> index, <em>Int</em> subItem, <em>String</em> text)</code></div>
	<p>Currently, this fuction only accepts ASCII text.</p>
</div>

<div class="function_definition" id="JS_Localize">
	<div class="c_func"><code>void JS_Localize(const char* USEnglish, const char* LangPackSection, char* translationOut, int translationOut_sz)</code></div>
	<div class="e_func"><code>JS_Localize("USEnglish", "LangPackSection", #translation) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Localize", "USEnglish", "LangPackSection", #translation) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>translation = reaper.JS_Localize(<em>string</em> USEnglish, <em>string</em> LangPackSection)</code></div>
	<div class="p_func"><code>(<em>String</em> USEnglish, <em>String</em> LangPackSection, <em>String</em> translationOut, <em>Int</em> translationOut_sz) = JS_Localize(USEnglish, LangPackSection, translationOut, translationOut_sz)</code></div>
	<p>Returns the translation of the given US English text, according to the currently loaded Language Pack.<br>
</p><p>
Parameters:<br>
 * LangPackSection: Language Packs are divided into sections such as "common" or "DLG_102".<br>
 * In Lua, by default, text of up to 1024 chars can be returned. To increase (or reduce) the default buffer size, a string and size can be included as optional 3rd and 4th arguments.<br>
</p><p>
Example: reaper.JS_Localize("Actions", "common", "", 20)</p>
</div>

<div class="function_definition" id="JS_MIDIEditor_ArrayAll">
	<div class="c_func"><code>int JS_MIDIEditor_ArrayAll(void* reaperarray)</code></div>
	<div class="e_func"><code><em>int </em> JS_MIDIEditor_ArrayAll(<em>void*</em> reaperarray) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_MIDIEditor_ArrayAll", <em>void*</em> reaperarray) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_MIDIEditor_ArrayAll(<em>identifier</em> reaperarray)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_MIDIEditor_ArrayAll(<em>void</em> reaperarray)</code></div>
	<p>Finds all open MIDI windows (whether docked or not).<br>
</p><p>
 * retval: The number of MIDI editor windows found; negative if an error occurred.<br>
</p><p>
 * The address of each MIDI editor window is stored in the provided reaper.array. Each address can be converted to a REAPER object (HWND) by the function JS_Window_HandleFromAddress.</p>
</div>

<div class="function_definition" id="JS_MIDIEditor_ListAll">
	<div class="c_func"><code>int JS_MIDIEditor_ListAll(char* listOutNeedBig, int listOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> JS_MIDIEditor_ListAll(#list) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_MIDIEditor_ListAll", #list) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>list = reaper.JS_MIDIEditor_ListAll()</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>String</em> listOutNeedBig, <em>Int</em> listOutNeedBig_sz) = JS_MIDIEditor_ListAll(listOutNeedBig, listOutNeedBig_sz)</code></div>
	<p>Finds all open MIDI windows (whether docked or not).<br>
</p><p>
 * retval: The number of MIDI editor windows found; negative if an error occurred.<br>
</p><p>
 * list: Comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.</p>
</div>

<div class="function_definition" id="JS_Mem_Alloc">
	<div class="c_func"><code>void* JS_Mem_Alloc(int sizeBytes)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Mem_Alloc(<em>int </em>sizeBytes) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Mem_Alloc", <em>int </em>sizeBytes) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Mem_Alloc(<em>integer</em> sizeBytes)</code></div>
	<div class="p_func"><code><em>void</em>  JS_Mem_Alloc(<em>Int</em> sizeBytes)</code></div>
	<p>Allocates memory for general use by functions that require memory buffers.</p>
</div>

<div class="function_definition" id="JS_Mem_Free">
	<div class="c_func"><code>bool JS_Mem_Free(void* mallocPointer)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Mem_Free(<em>void*</em> mallocPointer) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Mem_Free", <em>void*</em> mallocPointer) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Mem_Free(<em>identifier</em> mallocPointer)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Mem_Free(<em>void</em> mallocPointer)</code></div>
	<p>Frees memory that was previously allocated by JS_Mem_Alloc.</p>
</div>

<div class="function_definition" id="JS_Mem_FromString">
	<div class="c_func"><code>bool JS_Mem_FromString(void* mallocPointer, int offset, const char* packedString, int stringLength)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Mem_FromString(<em>void*</em> mallocPointer, <em>int </em>offset, "packedString", <em>int </em>stringLength) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Mem_FromString", <em>void*</em> mallocPointer, <em>int </em>offset, "packedString", <em>int </em>stringLength) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Mem_FromString(<em>identifier</em> mallocPointer, <em>integer</em> offset, <em>string</em> packedString, <em>integer</em> stringLength)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Mem_FromString(<em>void</em> mallocPointer, <em>Int</em> offset, <em>String</em> packedString, <em>Int</em> stringLength)</code></div>
	<p>Copies a packed string into a memory buffer.</p>
</div>

<div class="function_definition" id="JS_Mouse_GetCursor">
	<div class="c_func"><code>void* JS_Mouse_GetCursor()</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Mouse_GetCursor() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Mouse_GetCursor") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Mouse_GetCursor()</code></div>
	<div class="p_func"><code><em>void</em>  JS_Mouse_GetCursor()</code></div>
	<p>On Windows, retrieves a handle to the current mouse cursor.<br>
On Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL.</p>
</div>

<div class="function_definition" id="JS_Mouse_GetState">
	<div class="c_func"><code>int JS_Mouse_GetState(int flags)</code></div>
	<div class="e_func"><code><em>int </em> JS_Mouse_GetState(<em>int </em>flags) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Mouse_GetState", <em>int </em>flags) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Mouse_GetState(<em>integer</em> flags)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Mouse_GetState(<em>Int</em> flags)</code></div>
	<p>Retrieves the states of mouse buttons and modifiers keys.<br>
</p><p>
Parameters:<br>
 * flags, state: The parameter and the return value both use the same format as gfx.mouse_cap. For example, to get the states of the left mouse button and the ctrl key, use flags = 0b00000101.</p>
</div>

<div class="function_definition" id="JS_Mouse_LoadCursor">
	<div class="c_func"><code>void* JS_Mouse_LoadCursor(int cursorNumber)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Mouse_LoadCursor(<em>int </em>cursorNumber) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Mouse_LoadCursor", <em>int </em>cursorNumber) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Mouse_LoadCursor(<em>integer</em> cursorNumber)</code></div>
	<div class="p_func"><code><em>void</em>  JS_Mouse_LoadCursor(<em>Int</em> cursorNumber)</code></div>
	<p>Loads a cursor by number.<br>
</p><p>
cursorNumber: Same as used for gfx.setcursor, and includes some of Windows' predefined cursors (with numbers &gt; 32000; refer to documentation for the Win32 C++ function LoadCursor), and REAPER's own cursors (with numbers &lt; 2000).<br>
</p><p>
If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.</p>
</div>

<div class="function_definition" id="JS_Mouse_LoadCursorFromFile">
	<div class="c_func"><code>void* JS_Mouse_LoadCursorFromFile(const char* pathAndFileName, bool* forceNewLoadOptional)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Mouse_LoadCursorFromFile("pathAndFileName", <strong>unsupported</strong> forceNewLoadOptional) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Mouse_LoadCursorFromFile", "pathAndFileName", <strong>unsupported</strong> forceNewLoadOptional) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Mouse_LoadCursorFromFile(<em>string</em> pathAndFileName, <strong>unsupported</strong> forceNewLoad)</code></div>
	<div class="p_func"><code>(<em>void</em> retval, <em>String</em> pathAndFileName, <em>Boolean</em> forceNewLoadOptional) = JS_Mouse_LoadCursorFromFile(pathAndFileName, forceNewLoadOptional)</code></div>
	<p>Loads a cursor from a .cur file.<br>
</p><p>
forceNewLoad is an optional boolean parameter:<br>
 * If omitted or false, and if the cursor file has already been loaded previously during the REAPER session by any script, the file will not be re-loaded, and the existing handle will be returned.<br>
 * If true, the file will be re-loaded and a new handle will be returned.<br>
 * WARNING: Each time that a cursor file is re-loaded, the number of GDI objects increases for the entire duration of the REAPER session.<br>
</p><p>
If successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.</p>
</div>

<div class="function_definition" id="JS_Mouse_SetCursor">
	<div class="c_func"><code>void JS_Mouse_SetCursor(void* cursorHandle)</code></div>
	<div class="e_func"><code>JS_Mouse_SetCursor(<em>void*</em> cursorHandle) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Mouse_SetCursor", <em>void*</em> cursorHandle) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_Mouse_SetCursor(<em>identifier</em> cursorHandle)</code></div>
	<div class="p_func"><code>JS_Mouse_SetCursor(<em>void</em> cursorHandle)</code></div>
	<p>Sets the mouse cursor.  (Only lasts while script is running, and for a single "defer" cycle.)</p>
</div>

<div class="function_definition" id="JS_Mouse_SetPosition">
	<div class="c_func"><code>bool JS_Mouse_SetPosition(int x, int y)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Mouse_SetPosition(<em>int </em>x, <em>int </em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Mouse_SetPosition", <em>int </em>x, <em>int </em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Mouse_SetPosition(<em>integer</em> x, <em>integer</em> y)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Mouse_SetPosition(<em>Int</em> x, <em>Int</em> y)</code></div>
	<p>Moves the mouse cursor to the specified screen coordinates.<br>
</p><p>
NOTES:<br>
 * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.<br>
 * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.</p>
</div>

<div class="function_definition" id="JS_ReaScriptAPI_Version">
	<div class="c_func"><code>void JS_ReaScriptAPI_Version(double* versionOut)</code></div>
	<div class="e_func"><code>JS_ReaScriptAPI_Version(<em>&amp;</em>version) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_ReaScriptAPI_Version", <em>&amp;</em>version) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>version = reaper.JS_ReaScriptAPI_Version()</code></div>
	<div class="p_func"><code>(<em>Float</em> versionOut) JS_ReaScriptAPI_Version(versionOut)</code></div>
	<p>Returns the version of the js_ReaScriptAPI extension.</p>
</div>

<div class="function_definition" id="JS_String">
	<div class="c_func"><code>bool JS_String(void* pointer, int offset, int lengthChars, char* bufOutNeedBig, int bufOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>bool </em> JS_String(<em>void*</em> pointer, <em>int </em>offset, <em>int </em>lengthChars, #buf) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_String", <em>void*</em> pointer, <em>int </em>offset, <em>int </em>lengthChars, #buf) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.JS_String(<em>identifier</em> pointer, <em>integer</em> offset, <em>integer</em> lengthChars)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>void</em> pointer, <em>Int</em> offset, <em>Int</em> lengthChars, <em>String</em> bufOutNeedBig, <em>Int</em> bufOutNeedBig_sz) = JS_String(pointer, offset, lengthChars, bufOutNeedBig, bufOutNeedBig_sz)</code></div>
	<p>Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each.</p>
</div>

<div class="function_definition" id="JS_VKeys_GetDown">
	<div class="c_func"><code>void JS_VKeys_GetDown(double cutoffTime, char* stateOutNeedBig, int* stateOutNeedBig_sz)</code></div>
	<div class="e_func"><code>JS_VKeys_GetDown(cutoffTime, #state) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_VKeys_GetDown", cutoffTime, #state) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>state = reaper.JS_VKeys_GetDown(<em>number</em> cutoffTime)</code></div>
	<div class="p_func"><code>(<em>Float</em> cutoffTime, <em>String</em> stateOutNeedBig, <em>Int</em> stateOutNeedBig_sz) = JS_VKeys_GetDown(cutoffTime, stateOutNeedBig, stateOutNeedBig_sz)</code></div>
	<p>Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.<br>
</p><p>
Notes:<br>
 * Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.<br>
 * Auto-repeated KEYDOWN messages are ignored.</p>
</div>

<div class="function_definition" id="JS_VKeys_GetState">
	<div class="c_func"><code>void JS_VKeys_GetState(double cutoffTime, char* stateOutNeedBig, int* stateOutNeedBig_sz)</code></div>
	<div class="e_func"><code>JS_VKeys_GetState(cutoffTime, #state) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_VKeys_GetState", cutoffTime, #state) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>state = reaper.JS_VKeys_GetState(<em>number</em> cutoffTime)</code></div>
	<div class="p_func"><code>(<em>Float</em> cutoffTime, <em>String</em> stateOutNeedBig, <em>Int</em> stateOutNeedBig_sz) = JS_VKeys_GetState(cutoffTime, stateOutNeedBig, stateOutNeedBig_sz)</code></div>
	<p>Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.<br>
</p><p>
cutoffTime: A key is only regarded as down if it sent a KEYDOWN message after the cut-off time, not followed by KEYUP. (This is useful for excluding old KEYDOWN messages that weren't properly followed by KEYUP.) <br>
If cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().<br>
If cutoffTime is negative, it is relative to the current time.<br>
</p><p>
Notes:<br>
 * Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.<br>
 * Auto-repeated KEYDOWN messages are ignored.</p>
</div>

<div class="function_definition" id="JS_VKeys_GetUp">
	<div class="c_func"><code>void JS_VKeys_GetUp(double cutoffTime, char* stateOutNeedBig, int* stateOutNeedBig_sz)</code></div>
	<div class="e_func"><code>JS_VKeys_GetUp(cutoffTime, #state) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_VKeys_GetUp", cutoffTime, #state) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>state = reaper.JS_VKeys_GetUp(<em>number</em> cutoffTime)</code></div>
	<div class="p_func"><code>(<em>Float</em> cutoffTime, <em>String</em> stateOutNeedBig, <em>Int</em> stateOutNeedBig_sz) = JS_VKeys_GetUp(cutoffTime, stateOutNeedBig, stateOutNeedBig_sz)</code></div>
	<p>Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.<br>
</p><p>
Note: Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.</p>
</div>

<div class="function_definition" id="JS_VKeys_Intercept">
	<div class="c_func"><code>int JS_VKeys_Intercept(int keyCode, int intercept)</code></div>
	<div class="e_func"><code><em>int </em> JS_VKeys_Intercept(<em>int </em>keyCode, <em>int </em>intercept) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_VKeys_Intercept", <em>int </em>keyCode, <em>int </em>intercept) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_VKeys_Intercept(<em>integer</em> keyCode, <em>integer</em> intercept)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_VKeys_Intercept(<em>Int</em> keyCode, <em>Int</em> intercept)</code></div>
	<p>Intercepting (blocking) virtual keys work similar to the native function PreventUIRefresh:  Each key has a (non-negative) intercept state, and the key is passed through as usual if the state equals 0, or blocked if the state is greater than 0.<br>
</p><p>
keyCode: The virtual key code of the key, or -1 to change the state of all keys.<br>
</p><p>
intercept: A script can increase the intercept state by passing +1, or lower the state by passing -1.  Multiple scripts can block the same key, and the intercept state may reach up to 255. If zero is passed, the intercept state is not changed, but the current state is returned.<br>
</p><p>
Returns: If keyCode refers to a single key, the intercept state of that key is returned.  If keyCode = -1, the state of the key that is most strongly blocked (highest intercept state) is returned.</p>
</div>

<div class="function_definition" id="JS_WindowMessage_Intercept">
	<div class="c_func"><code>int JS_WindowMessage_Intercept(void* windowHWND, const char* message, bool passThrough)</code></div>
	<div class="e_func"><code><em>int </em> JS_WindowMessage_Intercept(<em>void*</em> windowHWND, "message", <em>bool </em>passThrough) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_WindowMessage_Intercept", <em>void*</em> windowHWND, "message", <em>bool </em>passThrough) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_WindowMessage_Intercept(<em>identifier</em> windowHWND, <em>string</em> message, <em>boolean</em> passThrough)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_WindowMessage_Intercept(<em>void</em> windowHWND, <em>String</em> message, <em>Boolean</em> passThrough)</code></div>
	<p>Begins intercepting a window message type to specified window.<br>
</p><p>
Parameters:<br>
 * message: a single message type to be intercepted, either in WM_ or hexadecimal format. For example "WM_SETCURSOR" or "0x0020".<br>
 * passThrough: Whether message should be blocked (false) or passed through (true) to the window.<br>
    For more information on message codes, refer to the Win32 C++ API documentation.<br>
    All WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.<br>
</p><p>
Returns:<br>
 * 1: Success.<br>
 * 0: The message type is already being intercepted by another script.<br>
 * -2: message string could not be parsed.<br>
 * -3: Failure getting original window process / window not valid.<br>
 * -6: Could not obtain the window client HDC.<br>
</p><p>
Notes:<br>
 * Intercepted messages can be polled using JS_WindowMessage_Peek.<br>
 * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.<br>
 * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.<br>
 * Mouse events are typically received by the child window under the mouse, not the parent window.<br>
Keyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions.</p>
</div>

<div class="function_definition" id="JS_WindowMessage_InterceptList">
	<div class="c_func"><code>int JS_WindowMessage_InterceptList(void* windowHWND, const char* messages)</code></div>
	<div class="e_func"><code><em>int </em> JS_WindowMessage_InterceptList(<em>void*</em> windowHWND, "messages") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_WindowMessage_InterceptList", <em>void*</em> windowHWND, "messages") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_WindowMessage_InterceptList(<em>identifier</em> windowHWND, <em>string</em> messages)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_WindowMessage_InterceptList(<em>void</em> windowHWND, <em>String</em> messages)</code></div>
	<p>Begins intercepting window messages to specified window.<br>
</p><p>
Parameters:<br>
 * messages: comma-separated string of message types to be intercepted (either in WM_ or hexadecimal format), each with a "block" or "passthrough" modifier to specify whether the message should be blocked or passed through to the window. For example "WM_SETCURSOR:block, 0x0201:passthrough".<br>
    For more information on message codes, refer to the Win32 C++ API documentation.<br>
    All WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.<br>
</p><p>
Returns:<br>
 * 1: Success.<br>
 * 0: The message type is already being intercepted by another script.<br>
 * -1: windowHWND is not a valid window.<br>
 * -2: message string could not be parsed.<br>
 * -3: Failure getting original window process.<br>
 * -6: COuld not obtain the window client HDC.<br>
</p><p>
Notes:<br>
 * Intercepted messages can be polled using JS_WindowMessage_Peek.<br>
 * Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.<br>
 * To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.</p>
</div>

<div class="function_definition" id="JS_WindowMessage_ListIntercepts">
	<div class="c_func"><code>bool JS_WindowMessage_ListIntercepts(void* windowHWND, char* listOutNeedBig, int listOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>bool </em> JS_WindowMessage_ListIntercepts(<em>void*</em> windowHWND, #list) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_WindowMessage_ListIntercepts", <em>void*</em> windowHWND, #list) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>list = reaper.JS_WindowMessage_ListIntercepts(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>void</em> windowHWND, <em>String</em> listOutNeedBig, <em>Int</em> listOutNeedBig_sz) = JS_WindowMessage_ListIntercepts(windowHWND, listOutNeedBig, listOutNeedBig_sz)</code></div>
	<p>Returns a string with a list of all message types currently being intercepted for the specified window.</p>
</div>

<div class="function_definition" id="JS_WindowMessage_PassThrough">
	<div class="c_func"><code>int JS_WindowMessage_PassThrough(void* windowHWND, const char* message, bool passThrough)</code></div>
	<div class="e_func"><code><em>int </em> JS_WindowMessage_PassThrough(<em>void*</em> windowHWND, "message", <em>bool </em>passThrough) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_WindowMessage_PassThrough", <em>void*</em> windowHWND, "message", <em>bool </em>passThrough) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_WindowMessage_PassThrough(<em>identifier</em> windowHWND, <em>string</em> message, <em>boolean</em> passThrough)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_WindowMessage_PassThrough(<em>void</em> windowHWND, <em>String</em> message, <em>Boolean</em> passThrough)</code></div>
	<p>Changes the passthrough setting of a message type that is already being intercepted.<br>
</p><p>
Returns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed.</p>
</div>

<div class="function_definition" id="JS_WindowMessage_Peek">
	<div class="c_func"><code>bool JS_WindowMessage_Peek(void* windowHWND, const char* message, bool* passedThroughOut, double* timeOut, int* wParamLowOut, int* wParamHighOut, int* lParamLowOut, int* lParamHighOut)</code></div>
	<div class="e_func"><code><em>bool </em> JS_WindowMessage_Peek(<em>void*</em> windowHWND, "message", <em>bool &amp;</em>passedThrough, <em>&amp;</em>time, <em>int &amp;</em>wParamLow, <em>int &amp;</em>wParamHigh, <em>int &amp;</em>lParamLow, <em>int &amp;</em>lParamHigh) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_WindowMessage_Peek", <em>void*</em> windowHWND, "message", <em>bool &amp;</em>passedThrough, <em>&amp;</em>time, <em>int &amp;</em>wParamLow, <em>int &amp;</em>wParamHigh, <em>int &amp;</em>lParamLow, <em>int &amp;</em>lParamHigh) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>boolean </em>passedThrough, <em>number </em>time, <em>integer </em>wParamLow, <em>integer </em>wParamHigh, <em>integer </em>lParamLow, <em>integer </em>lParamHigh = reaper.JS_WindowMessage_Peek(<em>identifier</em> windowHWND, <em>string</em> message)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>void</em> windowHWND, <em>String</em> message, <em>Boolean</em> passedThroughOut, <em>Float</em> timeOut, <em>Int</em> wParamLowOut, <em>Int</em> wParamHighOut, <em>Int</em> lParamLowOut, <em>Int</em> lParamHighOut) = JS_WindowMessage_Peek(windowHWND, message, passedThroughOut, timeOut, wParamLowOut, wParamHighOut, lParamLowOut, lParamHighOut)</code></div>
	<p>Polls the state of an intercepted message.<br>
</p><p>
Parameters:<br>
 * message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".<br>
 (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)<br>
</p><p>
Returns:<br>
 * A retval of false indicates that the message type is not being intercepted in the specified window.<br>
 * All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.<br>
 * For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.<br>
 * For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.<br>
 * wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.</p>
</div>

<div class="function_definition" id="JS_WindowMessage_Post">
	<div class="c_func"><code>bool JS_WindowMessage_Post(void* windowHWND, const char* message, double wParam, int wParamHighWord, double lParam, int lParamHighWord)</code></div>
	<div class="e_func"><code><em>bool </em> JS_WindowMessage_Post(<em>void*</em> windowHWND, "message", wParam, <em>int </em>wParamHighWord, lParam, <em>int </em>lParamHighWord) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_WindowMessage_Post", <em>void*</em> windowHWND, "message", wParam, <em>int </em>wParamHighWord, lParam, <em>int </em>lParamHighWord) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_WindowMessage_Post(<em>identifier</em> windowHWND, <em>string</em> message, <em>number</em> wParam, <em>integer</em> wParamHighWord, <em>number</em> lParam, <em>integer</em> lParamHighWord)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_WindowMessage_Post(<em>void</em> windowHWND, <em>String</em> message, <em>Float</em> wParam, <em>Int</em> wParamHighWord, <em>Float</em> lParam, <em>Int</em> lParamHighWord)</code></div>
	<p>If the specified window and message type are not currently being intercepted by a script, this function will post the message in the message queue of the specified window, and return without waiting.<br>
</p><p>
If the window and message type are currently being intercepted, the message will be sent directly to the original window process, similar to WindowMessage_Send, thereby skipping any intercepts.<br>
</p><p>
Parameters:<br>
 * message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".<br>
 (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)<br>
 * wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.<br>
(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)<br>
</p><p>
Notes:<br>
 * For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.<br>
 * Messages should only be sent to windows that were created from the main thread.<br>
 * Useful for simulating mouse clicks and calling mouse modifier actions from scripts.</p>
</div>

<div class="function_definition" id="JS_WindowMessage_Release">
	<div class="c_func"><code>int JS_WindowMessage_Release(void* windowHWND, const char* messages)</code></div>
	<div class="e_func"><code><em>int </em> JS_WindowMessage_Release(<em>void*</em> windowHWND, "messages") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_WindowMessage_Release", <em>void*</em> windowHWND, "messages") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_WindowMessage_Release(<em>identifier</em> windowHWND, <em>string</em> messages)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_WindowMessage_Release(<em>void</em> windowHWND, <em>String</em> messages)</code></div>
	<p>Release intercepts of specified message types.<br>
</p><p>
Parameters:<br>
 * messages: "WM_SETCURSOR,WM_MOUSEHWHEEL" or "0x0020,0x020E", for example.</p>
</div>

<div class="function_definition" id="JS_WindowMessage_ReleaseAll">
	<div class="c_func"><code>void JS_WindowMessage_ReleaseAll()</code></div>
	<div class="e_func"><code>JS_WindowMessage_ReleaseAll() </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_WindowMessage_ReleaseAll") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_WindowMessage_ReleaseAll()</code></div>
	<div class="p_func"><code>JS_WindowMessage_ReleaseAll()</code></div>
	<p>Release script intercepts of window messages for all windows.</p>
</div>

<div class="function_definition" id="JS_WindowMessage_ReleaseWindow">
	<div class="c_func"><code>void JS_WindowMessage_ReleaseWindow(void* windowHWND)</code></div>
	<div class="e_func"><code>JS_WindowMessage_ReleaseWindow(<em>void*</em> windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_WindowMessage_ReleaseWindow", <em>void*</em> windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_WindowMessage_ReleaseWindow(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>JS_WindowMessage_ReleaseWindow(<em>void</em> windowHWND)</code></div>
	<p>Release script intercepts of window messages for specified window.</p>
</div>

<div class="function_definition" id="JS_WindowMessage_Send">
	<div class="c_func"><code>int JS_WindowMessage_Send(void* windowHWND, const char* message, double wParam, int wParamHighWord, double lParam, int lParamHighWord)</code></div>
	<div class="e_func"><code><em>int </em> JS_WindowMessage_Send(<em>void*</em> windowHWND, "message", wParam, <em>int </em>wParamHighWord, lParam, <em>int </em>lParamHighWord) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_WindowMessage_Send", <em>void*</em> windowHWND, "message", wParam, <em>int </em>wParamHighWord, lParam, <em>int </em>lParamHighWord) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_WindowMessage_Send(<em>identifier</em> windowHWND, <em>string</em> message, <em>number</em> wParam, <em>integer</em> wParamHighWord, <em>number</em> lParam, <em>integer</em> lParamHighWord)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_WindowMessage_Send(<em>void</em> windowHWND, <em>String</em> message, <em>Float</em> wParam, <em>Int</em> wParamHighWord, <em>Float</em> lParam, <em>Int</em> lParamHighWord)</code></div>
	<p>Sends a message to the specified window by calling the window process directly, and only returns after the message has been processed. Any intercepts of the message by scripts will be skipped, and the message can therefore not be blocked.<br>
</p><p>
Parameters:<br>
 * message: String containing a single message name, such as "WM_SETCURSOR", or in hexadecimal format, "0x0020".<br>
 (For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)<br>
 * wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.<br>
(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)<br>
</p><p>
Notes:<br>
 * For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.<br>
 * Messages should only be sent to windows that were created from the main thread.<br>
 * Useful for simulating mouse clicks and calling mouse modifier actions from scripts.</p>
</div>

<div class="function_definition" id="JS_Window_AddressFromHandle">
	<div class="c_func"><code>void JS_Window_AddressFromHandle(void* handle, double* addressOut)</code></div>
	<div class="e_func"><code>JS_Window_AddressFromHandle(<em>void*</em> handle, <em>&amp;</em>address) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_AddressFromHandle", <em>void*</em> handle, <em>&amp;</em>address) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>address = reaper.JS_Window_AddressFromHandle(<em>identifier</em> handle)</code></div>
	<div class="p_func"><code>(<em>void</em> handle, <em>Float</em> addressOut) = JS_Window_AddressFromHandle(handle, addressOut)</code></div>
</div>

<div class="function_definition" id="JS_Window_ArrayAllChild">
	<div class="c_func"><code>int JS_Window_ArrayAllChild(void* parentHWND, void* reaperarray)</code></div>
	<div class="e_func"><code><em>int </em> JS_Window_ArrayAllChild(<em>void*</em> parentHWND, <em>void*</em> reaperarray) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Window_ArrayAllChild", <em>void*</em> parentHWND, <em>void*</em> reaperarray) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Window_ArrayAllChild(<em>identifier</em> parentHWND, <em>identifier</em> reaperarray)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Window_ArrayAllChild(<em>void</em> parentHWND, <em>void</em> reaperarray)</code></div>
	<p>Finds all child windows of the specified parent.<br>
</p><p>
Returns:<br>
 * retval: The number of windows found; negative if an error occurred.<br>
 * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.</p>
</div>

<div class="function_definition" id="JS_Window_ArrayAllTop">
	<div class="c_func"><code>int JS_Window_ArrayAllTop(void* reaperarray)</code></div>
	<div class="e_func"><code><em>int </em> JS_Window_ArrayAllTop(<em>void*</em> reaperarray) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Window_ArrayAllTop", <em>void*</em> reaperarray) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Window_ArrayAllTop(<em>identifier</em> reaperarray)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Window_ArrayAllTop(<em>void</em> reaperarray)</code></div>
	<p>Finds all top-level windows.<br>
</p><p>
Returns:<br>
 * retval: The number of windows found; negative if an error occurred.<br>
 * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.</p>
</div>

<div class="function_definition" id="JS_Window_ArrayFind">
	<div class="c_func"><code>int JS_Window_ArrayFind(const char* title, bool exact, void* reaperarray)</code></div>
	<div class="e_func"><code><em>int </em> JS_Window_ArrayFind("title", <em>bool </em>exact, <em>void*</em> reaperarray) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Window_ArrayFind", "title", <em>bool </em>exact, <em>void*</em> reaperarray) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Window_ArrayFind(<em>string</em> title, <em>boolean</em> exact, <em>identifier</em> reaperarray)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Window_ArrayFind(<em>String</em> title, <em>Boolean</em> exact, <em>void</em> reaperarray)</code></div>
	<p>Finds all windows, whether top-level or child, whose titles match the specified string.<br>
</p><p>
Returns:<br>
 * retval: The number of windows found; negative if an error occurred.<br>
 * The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.<br>
</p><p>
Parameters:<br>
 * exact: Match entire title exactly, or match substring of title.</p>
</div>

<div class="function_definition" id="JS_Window_AttachResizeGrip">
	<div class="c_func"><code>void JS_Window_AttachResizeGrip(void* windowHWND)</code></div>
	<div class="e_func"><code>JS_Window_AttachResizeGrip(<em>void*</em> windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_AttachResizeGrip", <em>void*</em> windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_Window_AttachResizeGrip(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>JS_Window_AttachResizeGrip(<em>void</em> windowHWND)</code></div>
</div>

<div class="function_definition" id="JS_Window_AttachTopmostPin">
	<div class="c_func"><code>void JS_Window_AttachTopmostPin(void* windowHWND)</code></div>
	<div class="e_func"><code>JS_Window_AttachTopmostPin(<em>void*</em> windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_AttachTopmostPin", <em>void*</em> windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_Window_AttachTopmostPin(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>JS_Window_AttachTopmostPin(<em>void</em> windowHWND)</code></div>
	<p>Attaches a "pin on top" button to the window frame. The button should remember its state when closing and re-opening the window.<br>
</p><p>
WARNING: This function does not yet work on Linux.</p>
</div>

<div class="function_definition" id="JS_Window_ClientToScreen">
	<div class="c_func"><code>void JS_Window_ClientToScreen(void* windowHWND, int x, int y, int* xOut, int* yOut)</code></div>
	<div class="e_func"><code>JS_Window_ClientToScreen(<em>void*</em> windowHWND, <em>int </em>x, <em>int </em>y, <em>int &amp;</em>x, <em>int &amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_ClientToScreen", <em>void*</em> windowHWND, <em>int </em>x, <em>int </em>y, <em>int &amp;</em>x, <em>int &amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer </em>x, <em>integer </em>y = reaper.JS_Window_ClientToScreen(<em>identifier</em> windowHWND, <em>integer</em> x, <em>integer</em> y)</code></div>
	<div class="p_func"><code>(<em>void</em> windowHWND, <em>Int</em> x, <em>Int</em> y, <em>Int</em> xOut, <em>Int</em> yOut) = JS_Window_ClientToScreen(windowHWND, x, y, xOut, yOut)</code></div>
	<p>Converts the client-area coordinates of a specified point to screen coordinates.<br>
</p><p>
NOTES:<br>
 * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.<br>
 * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.<br>
 * On all platforms, client coordinates are relative to the upper left corner of the client area.</p>
</div>

<div class="function_definition" id="JS_Window_Create">
	<div class="c_func"><code>void* JS_Window_Create(const char* title, const char* className, int x, int y, int w, int h, char* styleOptional, void* ownerHWNDOptional)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_Create("title", "className", <em>int </em>x, <em>int </em>y, <em>int </em>w, <em>int </em>h, <em>optional </em>#style, <em>void*</em> ownerHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_Create", "title", "className", <em>int </em>x, <em>int </em>y, <em>int </em>w, <em>int </em>h, <em>optional </em>#style, <em>void*</em> ownerHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> retval, <em>optional </em><em>string </em>style = reaper.JS_Window_Create(<em>string</em> title, <em>string</em> className, <em>integer</em> x, <em>integer</em> y, <em>integer</em> w, <em>integer</em> h, <em>optional </em><em>string </em>style, <em>identifier</em> ownerHWND)</code></div>
	<div class="p_func"><code>(<em>void</em> retval, <em>String</em> title, <em>String</em> className, <em>Int</em> x, <em>Int</em> y, <em>Int</em> w, <em>Int</em> h, <em>String</em> styleOptional, <em>void</em> ownerHWNDOptional) = JS_Window_Create(title, className, x, y, w, h, styleOptional, ownerHWNDOptional)</code></div>
	<p>Creates a modeless window with WS_OVERLAPPEDWINDOW style and only rudimentary features. Scripts can paint into the window using GDI or LICE/Composite functions (and JS_Window_InvalidateRect to trigger re-painting).<br>
</p><p>
style: An optional parameter that overrides the default style. The string may include any combination of standard window styles, such as "POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a standard framed window.<br>
</p><p>
On Linux and macOS, "MAXIMIZE" has not yet been implemented, and the remaining styles may appear slightly different from their WindowsOS counterparts.<br>
</p><p>
className: On Windows, only standard ANSI characters are supported.<br>
</p><p>
ownerHWND: Optional parameter, only available on WindowsOS.  Usually either the REAPER main window or another script window, and useful for ensuring that the created window automatically closes when the owner is closed.<br>
</p><p>
NOTE: On Linux and macOS, the window contents are only updated *between* defer cycles, so the window cannot be animated by for/while loops within a single defer cycle.</p>
</div>

<div class="function_definition" id="JS_Window_Destroy">
	<div class="c_func"><code>void JS_Window_Destroy(void* windowHWND)</code></div>
	<div class="e_func"><code>JS_Window_Destroy(<em>void*</em> windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_Destroy", <em>void*</em> windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_Window_Destroy(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>JS_Window_Destroy(<em>void</em> windowHWND)</code></div>
	<p>Destroys the specified window.</p>
</div>

<div class="function_definition" id="JS_Window_Enable">
	<div class="c_func"><code>void JS_Window_Enable(void* windowHWND, bool enable)</code></div>
	<div class="e_func"><code>JS_Window_Enable(<em>void*</em> windowHWND, <em>bool </em>enable) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_Enable", <em>void*</em> windowHWND, <em>bool </em>enable) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_Window_Enable(<em>identifier</em> windowHWND, <em>boolean</em> enable)</code></div>
	<div class="p_func"><code>JS_Window_Enable(<em>void</em> windowHWND, <em>Boolean</em> enable)</code></div>
	<p>Enables or disables mouse and keyboard input to the specified window or control.</p>
</div>

<div class="function_definition" id="JS_Window_EnableMetal">
	<div class="c_func"><code>int JS_Window_EnableMetal(void* windowHWND)</code></div>
	<div class="e_func"><code><em>int </em> JS_Window_EnableMetal(<em>void*</em> windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Window_EnableMetal", <em>void*</em> windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Window_EnableMetal(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Window_EnableMetal(<em>void</em> windowHWND)</code></div>
	<p>On macOS, returns the Metal graphics setting:<br>
2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).<br>
1 = Metal enabled.<br>
0 = N/A (Windows and Linux).<br>
-1 = non-metal async layered mode.<br>
-2 = non-metal non-async layered mode.<br>
</p><p>
WARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the source bitmap persist. If it is resized after Blit it could cause crashes.</p>
</div>

<div class="function_definition" id="JS_Window_Find">
	<div class="c_func"><code>void* JS_Window_Find(const char* title, bool exact)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_Find("title", <em>bool </em>exact) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_Find", "title", <em>bool </em>exact) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Window_Find(<em>string</em> title, <em>boolean</em> exact)</code></div>
	<div class="p_func"><code><em>void</em>  JS_Window_Find(<em>String</em> title, <em>Boolean</em> exact)</code></div>
	<p>Returns a HWND to a window whose title matches the specified string.<br>
 * Unlike the Win32 function FindWindow, this function searches top-level as well as child windows, so that the target window can be found irrespective of docked state.<br>
 * In addition, the function can optionally match substrings of the title.<br>
 * Matching is not case sensitive.<br>
</p><p>
Parameters:<br>
 * exact: Match entire title, or match substring of title.</p>
</div>

<div class="function_definition" id="JS_Window_FindChild">
	<div class="c_func"><code>void* JS_Window_FindChild(void* parentHWND, const char* title, bool exact)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_FindChild(<em>void*</em> parentHWND, "title", <em>bool </em>exact) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_FindChild", <em>void*</em> parentHWND, "title", <em>bool </em>exact) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Window_FindChild(<em>identifier</em> parentHWND, <em>string</em> title, <em>boolean</em> exact)</code></div>
	<div class="p_func"><code><em>void</em>  JS_Window_FindChild(<em>void</em> parentHWND, <em>String</em> title, <em>Boolean</em> exact)</code></div>
	<p>Returns a HWND to a child window whose title matches the specified string.<br>
</p><p>
Parameters:<br>
 * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.</p>
</div>

<div class="function_definition" id="JS_Window_FindChildByID">
	<div class="c_func"><code>void* JS_Window_FindChildByID(void* parentHWND, int ID)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_FindChildByID(<em>void*</em> parentHWND, <em>int </em>ID) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_FindChildByID", <em>void*</em> parentHWND, <em>int </em>ID) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Window_FindChildByID(<em>identifier</em> parentHWND, <em>integer</em> ID)</code></div>
	<div class="p_func"><code><em>void</em>  JS_Window_FindChildByID(<em>void</em> parentHWND, <em>Int</em> ID)</code></div>
	<p>Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.<br>
</p><p>
(The ID of a window may be retrieved by JS_Window_GetLongPtr.)</p>
</div>

<div class="function_definition" id="JS_Window_FindEx">
	<div class="c_func"><code>void* JS_Window_FindEx(void* parentHWND, void* childHWND, const char* className, const char* title)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_FindEx(<em>void*</em> parentHWND, <em>void*</em> childHWND, "className", "title") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_FindEx", <em>void*</em> parentHWND, <em>void*</em> childHWND, "className", "title") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Window_FindEx(<em>identifier</em> parentHWND, <em>identifier</em> childHWND, <em>string</em> className, <em>string</em> title)</code></div>
	<div class="p_func"><code><em>void</em>  JS_Window_FindEx(<em>void</em> parentHWND, <em>void</em> childHWND, <em>String</em> className, <em>String</em> title)</code></div>
	<p>Returns a handle to a child window whose class and title match the specified strings.<br>
</p><p>
Parameters: * childWindow: The function searches child windows, beginning with the window *after* the specified child window. If childHWND is equal to parentHWND, the search begins with the first child window of parentHWND.<br>
 * title: An empty string, "", will match all windows. (Search is not case sensitive.)</p>
</div>

<div class="function_definition" id="JS_Window_FindTop">
	<div class="c_func"><code>void* JS_Window_FindTop(const char* title, bool exact)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_FindTop("title", <em>bool </em>exact) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_FindTop", "title", <em>bool </em>exact) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Window_FindTop(<em>string</em> title, <em>boolean</em> exact)</code></div>
	<div class="p_func"><code><em>void</em>  JS_Window_FindTop(<em>String</em> title, <em>Boolean</em> exact)</code></div>
	<p>Returns a HWND to a top-level window whose title matches the specified string.<br>
</p><p>
Parameters:<br>
 * exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.</p>
</div>

<div class="function_definition" id="JS_Window_FromPoint">
	<div class="c_func"><code>void* JS_Window_FromPoint(int x, int y)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_FromPoint(<em>int </em>x, <em>int </em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_FromPoint", <em>int </em>x, <em>int </em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Window_FromPoint(<em>integer</em> x, <em>integer</em> y)</code></div>
	<div class="p_func"><code><em>void</em>  JS_Window_FromPoint(<em>Int</em> x, <em>Int</em> y)</code></div>
	<p>Retrieves a HWND to the window that contains the specified point.<br>
</p><p>
NOTES:<br>
 * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.<br>
 * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.</p>
</div>

<div class="function_definition" id="JS_Window_GetClassName">
	<div class="c_func"><code>void JS_Window_GetClassName(void* windowHWND, char* classOut, int classOut_sz)</code></div>
	<div class="e_func"><code>JS_Window_GetClassName(<em>void*</em> windowHWND, #class) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_GetClassName", <em>void*</em> windowHWND, #class) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>class = reaper.JS_Window_GetClassName(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>(<em>void</em> windowHWND, <em>String</em> classOut, <em>Int</em> classOut_sz) = JS_Window_GetClassName(windowHWND, classOut, classOut_sz)</code></div>
	<p>WARNING: May not be fully implemented on macOS and Linux.</p>
</div>

<div class="function_definition" id="JS_Window_GetClientRect">
	<div class="c_func"><code>bool JS_Window_GetClientRect(void* windowHWND, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_GetClientRect(<em>void*</em> windowHWND, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_GetClientRect", <em>void*</em> windowHWND, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>left, <em>integer </em>top, <em>integer </em>right, <em>integer </em>bottom = reaper.JS_Window_GetClientRect(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>void</em> windowHWND, <em>Int</em> leftOut, <em>Int</em> topOut, <em>Int</em> rightOut, <em>Int</em> bottomOut) = JS_Window_GetClientRect(windowHWND, leftOut, topOut, rightOut, bottomOut)</code></div>
	<p>Retrieves the screen coordinates of the client area rectangle of the specified window.<br>
</p><p>
NOTES:<br>
 * Unlike the C++ function GetClientRect, this function returns the screen coordinates, not the width and height. To get the client size, use GetClientSize.<br>
 * The pixel at (right, bottom) lies immediately outside the rectangle.<br>
 * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.<br>
 * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.</p>
</div>

<div class="function_definition" id="JS_Window_GetClientSize">
	<div class="c_func"><code>bool JS_Window_GetClientSize(void* windowHWND, int* widthOut, int* heightOut)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_GetClientSize(<em>void*</em> windowHWND, <em>int &amp;</em>width, <em>int &amp;</em>height) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_GetClientSize", <em>void*</em> windowHWND, <em>int &amp;</em>width, <em>int &amp;</em>height) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>width, <em>integer </em>height = reaper.JS_Window_GetClientSize(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>void</em> windowHWND, <em>Int</em> widthOut, <em>Int</em> heightOut) = JS_Window_GetClientSize(windowHWND, widthOut, heightOut)</code></div>
</div>

<div class="function_definition" id="JS_Window_GetFocus">
	<div class="c_func"><code>void* JS_Window_GetFocus()</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_GetFocus() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_GetFocus") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Window_GetFocus()</code></div>
	<div class="p_func"><code><em>void</em>  JS_Window_GetFocus()</code></div>
	<p>Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.</p>
</div>

<div class="function_definition" id="JS_Window_GetForeground">
	<div class="c_func"><code>void* JS_Window_GetForeground()</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_GetForeground() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_GetForeground") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Window_GetForeground()</code></div>
	<div class="p_func"><code><em>void</em>  JS_Window_GetForeground()</code></div>
	<p>Retrieves a HWND to the top-level foreground window (the window with which the user is currently working).</p>
</div>

<div class="function_definition" id="JS_Window_GetLong">
	<div class="c_func"><code>void JS_Window_GetLong(void* windowHWND, const char* info, double* retvalOut)</code></div>
	<div class="e_func"><code>JS_Window_GetLong(<em>void*</em> windowHWND, "info", <em>&amp;</em>retval) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_GetLong", <em>void*</em> windowHWND, "info", <em>&amp;</em>retval) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>retval = reaper.JS_Window_GetLong(<em>identifier</em> windowHWND, <em>string</em> info)</code></div>
	<div class="p_func"><code>(<em>void</em> windowHWND, <em>String</em> info, <em>Float</em> retvalOut) = JS_Window_GetLong(windowHWND, info, retvalOut)</code></div>
	<p>Similar to JS_Window_GetLongPtr, but returns the information as a number instead of a pointer. <br>
</p><p>
In the case of "DLGPROC" and "WNDPROC", the return values can be converted to pointers by JS_Window_HandleFromAddress.<br>
</p><p>
If the function fails, the return value is 0.</p>
</div>

<div class="function_definition" id="JS_Window_GetLongPtr">
	<div class="c_func"><code>void* JS_Window_GetLongPtr(void* windowHWND, const char* info)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_GetLongPtr(<em>void*</em> windowHWND, "info") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_GetLongPtr", <em>void*</em> windowHWND, "info") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Window_GetLongPtr(<em>identifier</em> windowHWND, <em>string</em> info)</code></div>
	<div class="p_func"><code><em>void</em>  JS_Window_GetLongPtr(<em>void</em> windowHWND, <em>String</em> info)</code></div>
	<p>Returns information about the specified window.<br>
</p><p>
info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE".<br>
</p><p>
For documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.<br>
</p><p>
The values returned by "DLGPROC" and "WNDPROC" are typically used as-is, as pointers, whereas the others should first be converted to integers.<br>
</p><p>
If the function fails, a null pointer is returned.</p>
</div>

<div class="function_definition" id="JS_Window_GetParent">
	<div class="c_func"><code>void* JS_Window_GetParent(void* windowHWND)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_GetParent(<em>void*</em> windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_GetParent", <em>void*</em> windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Window_GetParent(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code><em>void</em>  JS_Window_GetParent(<em>void</em> windowHWND)</code></div>
	<p>Retrieves a HWND to the specified window's parent or owner.<br>
Returns NULL if the window is unowned or if the function otherwise fails.</p>
</div>

<div class="function_definition" id="JS_Window_GetRect">
	<div class="c_func"><code>bool JS_Window_GetRect(void* windowHWND, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_GetRect(<em>void*</em> windowHWND, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_GetRect", <em>void*</em> windowHWND, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>left, <em>integer </em>top, <em>integer </em>right, <em>integer </em>bottom = reaper.JS_Window_GetRect(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>void</em> windowHWND, <em>Int</em> leftOut, <em>Int</em> topOut, <em>Int</em> rightOut, <em>Int</em> bottomOut) = JS_Window_GetRect(windowHWND, leftOut, topOut, rightOut, bottomOut)</code></div>
	<p>Retrieves the screen coordinates of the bounding rectangle of the specified window.<br>
</p><p>
NOTES:<br>
 * On Windows and Linux, coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.<br>
 * On macOS, coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.<br>
 * The pixel at (right, bottom) lies immediately outside the rectangle.</p>
</div>

<div class="function_definition" id="JS_Window_GetRelated">
	<div class="c_func"><code>void* JS_Window_GetRelated(void* windowHWND, const char* relation)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_GetRelated(<em>void*</em> windowHWND, "relation") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_GetRelated", <em>void*</em> windowHWND, "relation") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Window_GetRelated(<em>identifier</em> windowHWND, <em>string</em> relation)</code></div>
	<div class="p_func"><code><em>void</em>  JS_Window_GetRelated(<em>void</em> windowHWND, <em>String</em> relation)</code></div>
	<p>Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.<br>
relation: "LAST", "NEXT", "PREV", "OWNER" or "CHILD".<br>
(Refer to documentation for Win32 C++ function GetWindow.)</p>
</div>

<div class="function_definition" id="JS_Window_GetScrollInfo">
	<div class="c_func"><code>bool JS_Window_GetScrollInfo(void* windowHWND, const char* scrollbar, int* positionOut, int* pageSizeOut, int* minOut, int* maxOut, int* trackPosOut)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_GetScrollInfo(<em>void*</em> windowHWND, "scrollbar", <em>int &amp;</em>position, <em>int &amp;</em>pageSize, <em>int &amp;</em>min, <em>int &amp;</em>max, <em>int &amp;</em>trackPos) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_GetScrollInfo", <em>void*</em> windowHWND, "scrollbar", <em>int &amp;</em>position, <em>int &amp;</em>pageSize, <em>int &amp;</em>min, <em>int &amp;</em>max, <em>int &amp;</em>trackPos) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>position, <em>integer </em>pageSize, <em>integer </em>min, <em>integer </em>max, <em>integer </em>trackPos = reaper.JS_Window_GetScrollInfo(<em>identifier</em> windowHWND, <em>string</em> scrollbar)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>void</em> windowHWND, <em>String</em> scrollbar, <em>Int</em> positionOut, <em>Int</em> pageSizeOut, <em>Int</em> minOut, <em>Int</em> maxOut, <em>Int</em> trackPosOut) = JS_Window_GetScrollInfo(windowHWND, scrollbar, positionOut, pageSizeOut, minOut, maxOut, trackPosOut)</code></div>
	<p>Retrieves the scroll information of a window.<br>
</p><p>
Parameters:<br>
 * windowHWND: The window that contains the scrollbar. This is usually a child window, not a top-level, framed window.<br>
 * scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.<br>
</p><p>
Returns:<br>
 * Leftmost or topmost visible pixel position, as well as the visible page size, the range minimum and maximum, and scroll box tracking position.</p>
</div>

<div class="function_definition" id="JS_Window_GetTitle">
	<div class="c_func"><code>void JS_Window_GetTitle(void* windowHWND, char* titleOutNeedBig, int titleOutNeedBig_sz)</code></div>
	<div class="e_func"><code>JS_Window_GetTitle(<em>void*</em> windowHWND, #title) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_GetTitle", <em>void*</em> windowHWND, #title) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>title = reaper.JS_Window_GetTitle(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>(<em>void</em> windowHWND, <em>String</em> titleOutNeedBig, <em>Int</em> titleOutNeedBig_sz) = JS_Window_GetTitle(windowHWND, titleOutNeedBig, titleOutNeedBig_sz)</code></div>
	<p>Returns the title (if any) of the specified window.</p>
</div>

<div class="function_definition" id="JS_Window_GetViewportFromRect">
	<div class="c_func"><code>void JS_Window_GetViewportFromRect(int x1, int y1, int x2, int y2, bool wantWork, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</code></div>
	<div class="e_func"><code>JS_Window_GetViewportFromRect(<em>int </em>x1, <em>int </em>y1, <em>int </em>x2, <em>int </em>y2, <em>bool </em>wantWork, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_GetViewportFromRect", <em>int </em>x1, <em>int </em>y1, <em>int </em>x2, <em>int </em>y2, <em>bool </em>wantWork, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer </em>left, <em>integer </em>top, <em>integer </em>right, <em>integer </em>bottom = reaper.JS_Window_GetViewportFromRect(<em>integer</em> x1, <em>integer</em> y1, <em>integer</em> x2, <em>integer</em> y2, <em>boolean</em> wantWork)</code></div>
	<div class="p_func"><code>(<em>Int</em> x1, <em>Int</em> y1, <em>Int</em> x2, <em>Int</em> y2, <em>Boolean</em> wantWork, <em>Int</em> leftOut, <em>Int</em> topOut, <em>Int</em> rightOut, <em>Int</em> bottomOut) = JS_Window_GetViewportFromRect(x1, y1, x2, y2, wantWork, leftOut, topOut, rightOut, bottomOut)</code></div>
	<p>Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.<br>
</p><p>
If the monitor is not the primary display, some of the rectangle's coordinates may be negative.<br>
</p><p>
wantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars.</p>
</div>

<div class="function_definition" id="JS_Window_HandleFromAddress">
	<div class="c_func"><code>void* JS_Window_HandleFromAddress(double address)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_HandleFromAddress(address) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_HandleFromAddress", address) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Window_HandleFromAddress(<em>number</em> address)</code></div>
	<div class="p_func"><code><em>void</em>  JS_Window_HandleFromAddress(<em>Float</em> address)</code></div>
	<p>Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.</p>
</div>

<div class="function_definition" id="JS_Window_InvalidateRect">
	<div class="c_func"><code>bool JS_Window_InvalidateRect(void* windowHWND, int left, int top, int right, int bottom, bool eraseBackground)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_InvalidateRect(<em>void*</em> windowHWND, <em>int </em>left, <em>int </em>top, <em>int </em>right, <em>int </em>bottom, <em>bool </em>eraseBackground) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_InvalidateRect", <em>void*</em> windowHWND, <em>int </em>left, <em>int </em>top, <em>int </em>right, <em>int </em>bottom, <em>bool </em>eraseBackground) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Window_InvalidateRect(<em>identifier</em> windowHWND, <em>integer</em> left, <em>integer</em> top, <em>integer</em> right, <em>integer</em> bottom, <em>boolean</em> eraseBackground)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Window_InvalidateRect(<em>void</em> windowHWND, <em>Int</em> left, <em>Int</em> top, <em>Int</em> right, <em>Int</em> bottom, <em>Boolean</em> eraseBackground)</code></div>
	<p>Similar to the Win32 function InvalidateRect.</p>
</div>

<div class="function_definition" id="JS_Window_IsChild">
	<div class="c_func"><code>bool JS_Window_IsChild(void* parentHWND, void* childHWND)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_IsChild(<em>void*</em> parentHWND, <em>void*</em> childHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_IsChild", <em>void*</em> parentHWND, <em>void*</em> childHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Window_IsChild(<em>identifier</em> parentHWND, <em>identifier</em> childHWND)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Window_IsChild(<em>void</em> parentHWND, <em>void</em> childHWND)</code></div>
	<p>Determines whether a window is a child window or descendant window of a specified parent window.</p>
</div>

<div class="function_definition" id="JS_Window_IsVisible">
	<div class="c_func"><code>bool JS_Window_IsVisible(void* windowHWND)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_IsVisible(<em>void*</em> windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_IsVisible", <em>void*</em> windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Window_IsVisible(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Window_IsVisible(<em>void</em> windowHWND)</code></div>
	<p>Determines the visibility state of the window.</p>
</div>

<div class="function_definition" id="JS_Window_IsWindow">
	<div class="c_func"><code>bool JS_Window_IsWindow(void* windowHWND)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_IsWindow(<em>void*</em> windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_IsWindow", <em>void*</em> windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Window_IsWindow(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Window_IsWindow(<em>void</em> windowHWND)</code></div>
	<p>Determines whether the specified window handle identifies an existing window.<br>
</p><p>
On macOS and Linux, only windows that were created by WDL/swell will be identified (and only such windows should be acted on by scripts).<br>
</p><p>
NOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, "HWND").</p>
</div>

<div class="function_definition" id="JS_Window_ListAllChild">
	<div class="c_func"><code>int JS_Window_ListAllChild(void* parentHWND, char* listOutNeedBig, int listOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> JS_Window_ListAllChild(<em>void*</em> parentHWND, #list) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Window_ListAllChild", <em>void*</em> parentHWND, #list) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>list = reaper.JS_Window_ListAllChild(<em>identifier</em> parentHWND)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>void</em> parentHWND, <em>String</em> listOutNeedBig, <em>Int</em> listOutNeedBig_sz) = JS_Window_ListAllChild(parentHWND, listOutNeedBig, listOutNeedBig_sz)</code></div>
	<p>Finds all child windows of the specified parent.<br>
</p><p>
Returns:<br>
 * retval: The number of windows found; negative if an error occurred.<br>
 * list: A comma-separated string of hexadecimal values.<br>
Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.</p>
</div>

<div class="function_definition" id="JS_Window_ListAllTop">
	<div class="c_func"><code>int JS_Window_ListAllTop(char* listOutNeedBig, int listOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> JS_Window_ListAllTop(#list) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Window_ListAllTop", #list) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>list = reaper.JS_Window_ListAllTop()</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>String</em> listOutNeedBig, <em>Int</em> listOutNeedBig_sz) = JS_Window_ListAllTop(listOutNeedBig, listOutNeedBig_sz)</code></div>
	<p>Finds all top-level windows.<br>
</p><p>
Returns:<br>
 * retval: The number of windows found; negative if an error occurred.<br>
 * list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.</p>
</div>

<div class="function_definition" id="JS_Window_ListFind">
	<div class="c_func"><code>int JS_Window_ListFind(const char* title, bool exact, char* listOutNeedBig, int listOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> JS_Window_ListFind("title", <em>bool </em>exact, #list) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Window_ListFind", "title", <em>bool </em>exact, #list) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>list = reaper.JS_Window_ListFind(<em>string</em> title, <em>boolean</em> exact)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>String</em> title, <em>Boolean</em> exact, <em>String</em> listOutNeedBig, <em>Int</em> listOutNeedBig_sz) = JS_Window_ListFind(title, exact, listOutNeedBig, listOutNeedBig_sz)</code></div>
	<p>Finds all windows (whether top-level or child) whose titles match the specified string.<br>
</p><p>
Returns:<br>
 * retval: The number of windows found; negative if an error occurred.<br>
 * list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.<br>
</p><p>
Parameters:<br>
 * exact: Match entire title exactly, or match substring of title.</p>
</div>

<div class="function_definition" id="JS_Window_MonitorFromRect">
	<div class="c_func"><code>void JS_Window_MonitorFromRect(int x1, int y1, int x2, int y2, bool wantWork, int* leftOut, int* topOut, int* rightOut, int* bottomOut)</code></div>
	<div class="e_func"><code>JS_Window_MonitorFromRect(<em>int </em>x1, <em>int </em>y1, <em>int </em>x2, <em>int </em>y2, <em>bool </em>wantWork, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_MonitorFromRect", <em>int </em>x1, <em>int </em>y1, <em>int </em>x2, <em>int </em>y2, <em>bool </em>wantWork, <em>int &amp;</em>left, <em>int &amp;</em>top, <em>int &amp;</em>right, <em>int &amp;</em>bottom) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer </em>left, <em>integer </em>top, <em>integer </em>right, <em>integer </em>bottom = reaper.JS_Window_MonitorFromRect(<em>integer</em> x1, <em>integer</em> y1, <em>integer</em> x2, <em>integer</em> y2, <em>boolean</em> wantWork)</code></div>
	<div class="p_func"><code>(<em>Int</em> x1, <em>Int</em> y1, <em>Int</em> x2, <em>Int</em> y2, <em>Boolean</em> wantWork, <em>Int</em> leftOut, <em>Int</em> topOut, <em>Int</em> rightOut, <em>Int</em> bottomOut) = JS_Window_MonitorFromRect(x1, y1, x2, y2, wantWork, leftOut, topOut, rightOut, bottomOut)</code></div>
	<p>Deprecated - use GetViewportFromRect instead.</p>
</div>

<div class="function_definition" id="JS_Window_Move">
	<div class="c_func"><code>void JS_Window_Move(void* windowHWND, int left, int top)</code></div>
	<div class="e_func"><code>JS_Window_Move(<em>void*</em> windowHWND, <em>int </em>left, <em>int </em>top) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_Move", <em>void*</em> windowHWND, <em>int </em>left, <em>int </em>top) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_Window_Move(<em>identifier</em> windowHWND, <em>integer</em> left, <em>integer</em> top)</code></div>
	<div class="p_func"><code>JS_Window_Move(<em>void</em> windowHWND, <em>Int</em> left, <em>Int</em> top)</code></div>
	<p>Changes the position of the specified window, keeping its size constant.<br>
</p><p>
NOTES:<br>
 * For top-level windows, position is relative to the primary display.<br>
 * On Windows and Linux, position is calculated as the coordinates of the upper left corner of the window, relative to upper left corner of the primary display, and the positive Y-axis points downward.<br>
 * On macOS, position is calculated as the coordinates of the bottom left corner of the window, relative to bottom left corner of the display, and the positive Y-axis points upward.<br>
 * For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.<br>
 * Equivalent to calling JS_Window_SetPosition with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.</p>
</div>

<div class="function_definition" id="JS_Window_OnCommand">
	<div class="c_func"><code>bool JS_Window_OnCommand(void* windowHWND, int commandID)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_OnCommand(<em>void*</em> windowHWND, <em>int </em>commandID) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_OnCommand", <em>void*</em> windowHWND, <em>int </em>commandID) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Window_OnCommand(<em>identifier</em> windowHWND, <em>integer</em> commandID)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Window_OnCommand(<em>void</em> windowHWND, <em>Int</em> commandID)</code></div>
	<p>Sends a "WM_COMMAND" message to the specified window, which simulates a user selecting a command in the window menu.<br>
</p><p>
This function is similar to Main_OnCommand and MIDIEditor_OnCommand, but can send commands to any window that has a menu.<br>
</p><p>
In the case of windows that are listed among the Action list's contexts (such as the Media Explorer), the commandIDs of the actions in the Actions list may be used.</p>
</div>

<div class="function_definition" id="JS_Window_Resize">
	<div class="c_func"><code>void JS_Window_Resize(void* windowHWND, int width, int height)</code></div>
	<div class="e_func"><code>JS_Window_Resize(<em>void*</em> windowHWND, <em>int </em>width, <em>int </em>height) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_Resize", <em>void*</em> windowHWND, <em>int </em>width, <em>int </em>height) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_Window_Resize(<em>identifier</em> windowHWND, <em>integer</em> width, <em>integer</em> height)</code></div>
	<div class="p_func"><code>JS_Window_Resize(<em>void</em> windowHWND, <em>Int</em> width, <em>Int</em> height)</code></div>
	<p>Changes the dimensions of the specified window, keeping the top left corner position constant.<br>
 * If resizing script GUIs, call gfx.update() after resizing.<br>
* Equivalent to calling JS_Window_SetPosition with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.</p>
</div>

<div class="function_definition" id="JS_Window_ScreenToClient">
	<div class="c_func"><code>void JS_Window_ScreenToClient(void* windowHWND, int x, int y, int* xOut, int* yOut)</code></div>
	<div class="e_func"><code>JS_Window_ScreenToClient(<em>void*</em> windowHWND, <em>int </em>x, <em>int </em>y, <em>int &amp;</em>x, <em>int &amp;</em>y) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_ScreenToClient", <em>void*</em> windowHWND, <em>int </em>x, <em>int </em>y, <em>int &amp;</em>x, <em>int &amp;</em>y) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer </em>x, <em>integer </em>y = reaper.JS_Window_ScreenToClient(<em>identifier</em> windowHWND, <em>integer</em> x, <em>integer</em> y)</code></div>
	<div class="p_func"><code>(<em>void</em> windowHWND, <em>Int</em> x, <em>Int</em> y, <em>Int</em> xOut, <em>Int</em> yOut) = JS_Window_ScreenToClient(windowHWND, x, y, xOut, yOut)</code></div>
	<p>Converts the screen coordinates of a specified point on the screen to client-area coordinates.<br>
</p><p>
NOTES:<br>
 * On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.<br>
 * On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.<br>
 * On all platforms, client coordinates are relative to the upper left corner of the client area.</p>
</div>

<div class="function_definition" id="JS_Window_SetFocus">
	<div class="c_func"><code>void JS_Window_SetFocus(void* windowHWND)</code></div>
	<div class="e_func"><code>JS_Window_SetFocus(<em>void*</em> windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_SetFocus", <em>void*</em> windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_Window_SetFocus(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>JS_Window_SetFocus(<em>void</em> windowHWND)</code></div>
	<p>Sets the keyboard focus to the specified window.</p>
</div>

<div class="function_definition" id="JS_Window_SetForeground">
	<div class="c_func"><code>void JS_Window_SetForeground(void* windowHWND)</code></div>
	<div class="e_func"><code>JS_Window_SetForeground(<em>void*</em> windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_SetForeground", <em>void*</em> windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_Window_SetForeground(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>JS_Window_SetForeground(<em>void</em> windowHWND)</code></div>
	<p>Brings the specified window into the foreground, activates the window, and directs keyboard input to it.</p>
</div>

<div class="function_definition" id="JS_Window_SetLong">
	<div class="c_func"><code>void JS_Window_SetLong(void* windowHWND, const char* info, double value, double* retvalOut)</code></div>
	<div class="e_func"><code>JS_Window_SetLong(<em>void*</em> windowHWND, "info", value, <em>&amp;</em>retval) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_SetLong", <em>void*</em> windowHWND, "info", value, <em>&amp;</em>retval) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>retval = reaper.JS_Window_SetLong(<em>identifier</em> windowHWND, <em>string</em> info, <em>number</em> value)</code></div>
	<div class="p_func"><code>(<em>void</em> windowHWND, <em>String</em> info, <em>Float</em> value, <em>Float</em> retvalOut) = JS_Window_SetLong(windowHWND, info, value, retvalOut)</code></div>
	<p>Similar to the Win32 function SetWindowLongPtr. <br>
</p><p>
info: "USERDATA", "WNDPROC", "DLGPROC", "ID", "EXSTYLE" or "STYLE", and only on WindowOS, "INSTANCE" and "PARENT".</p>
</div>

<div class="function_definition" id="JS_Window_SetOpacity">
	<div class="c_func"><code>bool JS_Window_SetOpacity(void* windowHWND, const char* mode, double value)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_SetOpacity(<em>void*</em> windowHWND, "mode", value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_SetOpacity", <em>void*</em> windowHWND, "mode", value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Window_SetOpacity(<em>identifier</em> windowHWND, <em>string</em> mode, <em>number</em> value)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Window_SetOpacity(<em>void</em> windowHWND, <em>String</em> mode, <em>Float</em> value)</code></div>
	<p>Sets the window opacity.<br>
</p><p>
Parameters:<br>
mode: either "ALPHA" or "COLOR". <br>
value: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included. <br>
If COLOR, value specifies a 0xRRGGBB color, and all pixels of this color will be made transparent. (All mouse clicks over transparent pixels will pass through, too).  WARNING:<br>
COLOR mode is only available in Windows, not Linux or macOS.<br>
</p><p>
Transparency can only be applied to top-level windows. If windowHWND refers to a child window, the entire top-level window that contains windowHWND will be made transparent.</p>
</div>

<div class="function_definition" id="JS_Window_SetParent">
	<div class="c_func"><code>void* JS_Window_SetParent(void* childHWND, void* parentHWNDOptional)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Window_SetParent(<em>void*</em> childHWND, <em>void*</em> parentHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Window_SetParent", <em>void*</em> childHWND, <em>void*</em> parentHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> reaper.JS_Window_SetParent(<em>identifier</em> childHWND, <em>identifier</em> parentHWND)</code></div>
	<div class="p_func"><code><em>void</em>  JS_Window_SetParent(<em>void</em> childHWND, <em>void</em> parentHWNDOptional)</code></div>
	<p>If successful, returns a handle to the previous parent window.<br>
</p><p>
Only on WindowsOS: If parentHWND is not specified, the desktop window becomes the new parent window.</p>
</div>

<div class="function_definition" id="JS_Window_SetPosition">
	<div class="c_func"><code>bool JS_Window_SetPosition(void* windowHWND, int left, int top, int width, int height, char* ZOrderOptional, char* flagsOptional)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_SetPosition(<em>void*</em> windowHWND, <em>int </em>left, <em>int </em>top, <em>int </em>width, <em>int </em>height, <em>optional </em>#ZOrder, <em>optional </em>#flags) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_SetPosition", <em>void*</em> windowHWND, <em>int </em>left, <em>int </em>top, <em>int </em>width, <em>int </em>height, <em>optional </em>#ZOrder, <em>optional </em>#flags) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>optional </em><em>string </em>ZOrder, <em>optional </em><em>string </em>flags = reaper.JS_Window_SetPosition(<em>identifier</em> windowHWND, <em>integer</em> left, <em>integer</em> top, <em>integer</em> width, <em>integer</em> height, <em>optional </em><em>string </em>ZOrder, <em>optional </em><em>string </em>flags)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>void</em> windowHWND, <em>Int</em> left, <em>Int</em> top, <em>Int</em> width, <em>Int</em> height, <em>String</em> ZOrderOptional, <em>String</em> flagsOptional) = JS_Window_SetPosition(windowHWND, left, top, width, height, ZOrderOptional, flagsOptional)</code></div>
	<p>Interface to the Win32/swell function SetWindowPos, with which window position, size, Z-order and visibility can be set, and new frame styles can be applied.<br>
</p><p>
ZOrder and flags are optional parameters. If no arguments are supplied, the window will simply be moved and resized, as if the NOACTIVATE, NOZORDER, NOOWNERZORDER flags were set.<br>
 * ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP" or a window HWND converted to a string, for example by the Lua function tostring.<br>
 * flags: Any combination of the standard flags, of which "NOMOVE", "NOSIZE", "NOZORDER", "NOACTIVATE", "SHOWWINDOW", "FRAMECHANGED" and "NOCOPYBITS" should be valid cross-platform.</p>
</div>

<div class="function_definition" id="JS_Window_SetScrollPos">
	<div class="c_func"><code>bool JS_Window_SetScrollPos(void* windowHWND, const char* scrollbar, int position)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_SetScrollPos(<em>void*</em> windowHWND, "scrollbar", <em>int </em>position) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_SetScrollPos", <em>void*</em> windowHWND, "scrollbar", <em>int </em>position) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Window_SetScrollPos(<em>identifier</em> windowHWND, <em>string</em> scrollbar, <em>integer</em> position)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Window_SetScrollPos(<em>void</em> windowHWND, <em>String</em> scrollbar, <em>Int</em> position)</code></div>
	<p>Parameters:<br>
 * scrollbar: "v" (or "SB_VERT", or "VERT") for vertical scroll, "h" (or "SB_HORZ" or "HORZ") for horizontal.<br>
</p><p>
NOTE: API functions can scroll REAPER's windows, but cannot zoom them.  Instead, use actions such as "View: Zoom to one loop iteration".</p>
</div>

<div class="function_definition" id="JS_Window_SetStyle">
	<div class="c_func"><code>bool JS_Window_SetStyle(void* windowHWND, char* style)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_SetStyle(<em>void*</em> windowHWND, #style) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_SetStyle", <em>void*</em> windowHWND, #style) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>style = reaper.JS_Window_SetStyle(<em>identifier</em> windowHWND, <em>string </em>style)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>void</em> windowHWND, <em>String</em> style) = JS_Window_SetStyle(windowHWND, style)</code></div>
	<p>Sets and applies a window style.<br>
</p><p>
style may include any combination of standard window styles, such as "POPUP" for a frameless window, or "CAPTION,SIZEBOX,SYSMENU" for a standard framed window.<br>
</p><p>
On Linux and macOS, "MAXIMIZE" has not yet been implmented, and the remaining styles may appear slightly different from their WindowsOS counterparts.</p>
</div>

<div class="function_definition" id="JS_Window_SetTitle">
	<div class="c_func"><code>bool JS_Window_SetTitle(void* windowHWND, const char* title)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_SetTitle(<em>void*</em> windowHWND, "title") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_SetTitle", <em>void*</em> windowHWND, "title") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Window_SetTitle(<em>identifier</em> windowHWND, <em>string</em> title)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Window_SetTitle(<em>void</em> windowHWND, <em>String</em> title)</code></div>
	<p>Changes the title of the specified window. Returns true if successful.</p>
</div>

<div class="function_definition" id="JS_Window_SetZOrder">
	<div class="c_func"><code>bool JS_Window_SetZOrder(void* windowHWND, const char* ZOrder, void* insertAfterHWNDOptional)</code></div>
	<div class="e_func"><code><em>bool </em> JS_Window_SetZOrder(<em>void*</em> windowHWND, "ZOrder", <em>void*</em> insertAfterHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("JS_Window_SetZOrder", <em>void*</em> windowHWND, "ZOrder", <em>void*</em> insertAfterHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.JS_Window_SetZOrder(<em>identifier</em> windowHWND, <em>string</em> ZOrder, <em>identifier</em> insertAfterHWND)</code></div>
	<div class="p_func"><code><em>Boolean</em>  JS_Window_SetZOrder(<em>void</em> windowHWND, <em>String</em> ZOrder, <em>void</em> insertAfterHWNDOptional)</code></div>
	<p>Sets the window Z order.<br>
 * Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.<br>
 * Not all the Z orders have been implemented in Linux yet.<br>
</p><p>
Parameters:<br>
 * ZOrder: "BOTTOM", "TOPMOST", "NOTOPMOST", "TOP", or a window HWND converted to a string, for example by the Lua function tostring.<br>
</p><p>
* InsertAfterHWND: For compatibility with older versions, this parameter is still available, and is optional. If ZOrder is "INSERTAFTER", insertAfterHWND must be a handle to the window behind which windowHWND will be placed in the Z order, equivalent to setting ZOrder to this HWND; otherwise, insertAfterHWND is ignored and can be left out (or it can simply be set to the same value as windowHWND).</p>
</div>

<div class="function_definition" id="JS_Window_Show">
	<div class="c_func"><code>void JS_Window_Show(void* windowHWND, const char* state)</code></div>
	<div class="e_func"><code>JS_Window_Show(<em>void*</em> windowHWND, "state") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_Show", <em>void*</em> windowHWND, "state") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_Window_Show(<em>identifier</em> windowHWND, <em>string</em> state)</code></div>
	<div class="p_func"><code>JS_Window_Show(<em>void</em> windowHWND, <em>String</em> state)</code></div>
	<p>Sets the specified window's show state.<br>
</p><p>
Parameters:<br>
 * state: One of the following options: "SHOW", "SHOWNA" (or "SHOWNOACTIVATE"), "SHOWMINIMIZED", "HIDE", "NORMAL", "SHOWNORMAL", "SHOWMAXIMIZED", "SHOWDEFAULT" or "RESTORE". On Linux and macOS, only the first four options are fully implemented.</p>
</div>

<div class="function_definition" id="JS_Window_Update">
	<div class="c_func"><code>void JS_Window_Update(void* windowHWND)</code></div>
	<div class="e_func"><code>JS_Window_Update(<em>void*</em> windowHWND) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Window_Update", <em>void*</em> windowHWND) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.JS_Window_Update(<em>identifier</em> windowHWND)</code></div>
	<div class="p_func"><code>JS_Window_Update(<em>void</em> windowHWND)</code></div>
	<p>Similar to the Win32 function UpdateWindow.</p>
</div>

<div class="function_definition" id="JS_Zip_Close">
	<div class="c_func"><code>int JS_Zip_Close(const char* zipFile, void* zipHandleOptional)</code></div>
	<div class="e_func"><code><em>int </em> JS_Zip_Close("zipFile", <em>void*</em> zipHandle) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Zip_Close", "zipFile", <em>void*</em> zipHandle) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Zip_Close(<em>string</em> zipFile, <em>identifier</em> zipHandle)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Zip_Close(<em>String</em> zipFile, <em>void</em> zipHandleOptional)</code></div>
	<p>Closes the zip archive, using either the file name or the zip handle. Finalizes entries and releases resources.</p>
</div>

<div class="function_definition" id="JS_Zip_CountEntries">
	<div class="c_func"><code>int JS_Zip_CountEntries(void* zipHandle)</code></div>
	<div class="e_func"><code><em>int </em> JS_Zip_CountEntries(<em>void*</em> zipHandle) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Zip_CountEntries", <em>void*</em> zipHandle) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Zip_CountEntries(<em>identifier</em> zipHandle)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Zip_CountEntries(<em>void</em> zipHandle)</code></div>
</div>

<div class="function_definition" id="JS_Zip_DeleteEntries">
	<div class="c_func"><code>int JS_Zip_DeleteEntries(void* zipHandle, const char* entryNames, int entryNamesStrLen)</code></div>
	<div class="e_func"><code><em>int </em> JS_Zip_DeleteEntries(<em>void*</em> zipHandle, "entryNames", <em>int </em>entryNamesStrLen) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Zip_DeleteEntries", <em>void*</em> zipHandle, "entryNames", <em>int </em>entryNamesStrLen) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Zip_DeleteEntries(<em>identifier</em> zipHandle, <em>string</em> entryNames, <em>integer</em> entryNamesStrLen)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Zip_DeleteEntries(<em>void</em> zipHandle, <em>String</em> entryNames, <em>Int</em> entryNamesStrLen)</code></div>
	<p>Deletes the specified entries from an existing Zip file.<br>
</p><p>
entryNames is zero-separated and double-zero-terminated.<br>
</p><p>
Returns the number of deleted entries on success, negative number (&lt; 0) on error.</p>
</div>

<div class="function_definition" id="JS_Zip_Entry_Close">
	<div class="c_func"><code>int JS_Zip_Entry_Close(void* zipHandle)</code></div>
	<div class="e_func"><code><em>int </em> JS_Zip_Entry_Close(<em>void*</em> zipHandle) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Zip_Entry_Close", <em>void*</em> zipHandle) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Zip_Entry_Close(<em>identifier</em> zipHandle)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Zip_Entry_Close(<em>void</em> zipHandle)</code></div>
	<p>Closes a zip entry, flushes buffer and releases resources. In WRITE mode, entries must be closed in order to apply and save changes.<br>
</p><p>
Returns 0 on success, negative number (&lt; 0) on error.</p>
</div>

<div class="function_definition" id="JS_Zip_Entry_CompressFile">
	<div class="c_func"><code>int JS_Zip_Entry_CompressFile(void* zipHandle, const char* inputFile)</code></div>
	<div class="e_func"><code><em>int </em> JS_Zip_Entry_CompressFile(<em>void*</em> zipHandle, "inputFile") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Zip_Entry_CompressFile", <em>void*</em> zipHandle, "inputFile") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Zip_Entry_CompressFile(<em>identifier</em> zipHandle, <em>string</em> inputFile)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Zip_Entry_CompressFile(<em>void</em> zipHandle, <em>String</em> inputFile)</code></div>
	<p>Compresses the specified file into the zip archive's open entry.<br>
</p><p>
Returns 0 on success, negative number (&lt; 0) on error.</p>
</div>

<div class="function_definition" id="JS_Zip_Entry_CompressMemory">
	<div class="c_func"><code>int JS_Zip_Entry_CompressMemory(void* zipHandle, const char* buf, int buf_size)</code></div>
	<div class="e_func"><code><em>int </em> JS_Zip_Entry_CompressMemory(<em>void*</em> zipHandle, "buf", <em>int </em>buf_size) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Zip_Entry_CompressMemory", <em>void*</em> zipHandle, "buf", <em>int </em>buf_size) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Zip_Entry_CompressMemory(<em>identifier</em> zipHandle, <em>string</em> buf, <em>integer</em> buf_size)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Zip_Entry_CompressMemory(<em>void</em> zipHandle, <em>String</em> buf, <em>Int</em> buf_size)</code></div>
	<p>Compresses the specified memory buffer into the zip archive's open entry.<br>
</p><p>
Returns 0 on success, negative number (&lt; 0) on error.</p>
</div>

<div class="function_definition" id="JS_Zip_Entry_ExtractToFile">
	<div class="c_func"><code>int JS_Zip_Entry_ExtractToFile(void* zipHandle, const char* outputFile)</code></div>
	<div class="e_func"><code><em>int </em> JS_Zip_Entry_ExtractToFile(<em>void*</em> zipHandle, "outputFile") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Zip_Entry_ExtractToFile", <em>void*</em> zipHandle, "outputFile") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Zip_Entry_ExtractToFile(<em>identifier</em> zipHandle, <em>string</em> outputFile)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Zip_Entry_ExtractToFile(<em>void</em> zipHandle, <em>String</em> outputFile)</code></div>
	<p>Extracts the zip archive's open entry.<br>
</p><p>
Returns 0 on success, negative number (&lt; 0) on error.</p>
</div>

<div class="function_definition" id="JS_Zip_Entry_ExtractToMemory">
	<div class="c_func"><code>int JS_Zip_Entry_ExtractToMemory(void* zipHandle, char* contentsOutNeedBig, int contentsOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> JS_Zip_Entry_ExtractToMemory(<em>void*</em> zipHandle, #contents) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Zip_Entry_ExtractToMemory", <em>void*</em> zipHandle, #contents) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>contents = reaper.JS_Zip_Entry_ExtractToMemory(<em>identifier</em> zipHandle)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>void</em> zipHandle, <em>String</em> contentsOutNeedBig, <em>Int</em> contentsOutNeedBig_sz) = JS_Zip_Entry_ExtractToMemory(zipHandle, contentsOutNeedBig, contentsOutNeedBig_sz)</code></div>
	<p>Extracts and returns the zip archive's open entry.<br>
</p><p>
Returns the number of bytes extracted on success, negative number (&lt; 0) on error.</p>
</div>

<div class="function_definition" id="JS_Zip_Entry_Info">
	<div class="c_func"><code>int JS_Zip_Entry_Info(void* zipHandle, char* nameOutNeedBig, int nameOutNeedBig_sz, int* indexOut, int* isFolderOut, double* sizeOut, double* crc32Out)</code></div>
	<div class="e_func"><code><em>int </em> JS_Zip_Entry_Info(<em>void*</em> zipHandle, #name, <em>int &amp;</em>index, <em>int &amp;</em>isFolder, <em>&amp;</em>size, <em>&amp;</em>crc32) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Zip_Entry_Info", <em>void*</em> zipHandle, #name, <em>int &amp;</em>index, <em>int &amp;</em>isFolder, <em>&amp;</em>size, <em>&amp;</em>crc32) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>name, <em>integer </em>index, <em>integer </em>isFolder, <em>number </em>size, <em>number </em>crc32 = reaper.JS_Zip_Entry_Info(<em>identifier</em> zipHandle)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>void</em> zipHandle, <em>String</em> nameOutNeedBig, <em>Int</em> nameOutNeedBig_sz, <em>Int</em> indexOut, <em>Int</em> isFolderOut, <em>Float</em> sizeOut, <em>Float</em> crc32Out) = JS_Zip_Entry_Info(zipHandle, nameOutNeedBig, nameOutNeedBig_sz, indexOut, isFolderOut, sizeOut, crc32Out)</code></div>
	<p>Returns information about the zip archive's open entry.</p>
</div>

<div class="function_definition" id="JS_Zip_Entry_OpenByIndex">
	<div class="c_func"><code>int JS_Zip_Entry_OpenByIndex(void* zipHandle, int index)</code></div>
	<div class="e_func"><code><em>int </em> JS_Zip_Entry_OpenByIndex(<em>void*</em> zipHandle, <em>int </em>index) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Zip_Entry_OpenByIndex", <em>void*</em> zipHandle, <em>int </em>index) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Zip_Entry_OpenByIndex(<em>identifier</em> zipHandle, <em>integer</em> index)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Zip_Entry_OpenByIndex(<em>void</em> zipHandle, <em>Int</em> index)</code></div>
	<p>Opens a new entry by index in the zip archive.<br>
</p><p>
This function is only valid if zip archive was opened in 'r' (readonly) mode.<br>
</p><p>
Returns 0 on success, negative number on error.</p>
</div>

<div class="function_definition" id="JS_Zip_Entry_OpenByName">
	<div class="c_func"><code>int JS_Zip_Entry_OpenByName(void* zipHandle, const char* entryName)</code></div>
	<div class="e_func"><code><em>int </em> JS_Zip_Entry_OpenByName(<em>void*</em> zipHandle, "entryName") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Zip_Entry_OpenByName", <em>void*</em> zipHandle, "entryName") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Zip_Entry_OpenByName(<em>identifier</em> zipHandle, <em>string</em> entryName)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Zip_Entry_OpenByName(<em>void</em> zipHandle, <em>String</em> entryName)</code></div>
	<p>Opens an entry by name in the zip archive.<br>
</p><p>
For zip archive opened in 'w' or 'a' mode the function will append a new entry. In readonly mode the function tries to locate an existing entry.<br>
</p><p>
Returns 0 on success, negative number (&lt; 0) on error.</p>
</div>

<div class="function_definition" id="JS_Zip_ErrorString">
	<div class="c_func"><code>void JS_Zip_ErrorString(int errorNum, char* errorStrOut, int errorStrOut_sz)</code></div>
	<div class="e_func"><code>JS_Zip_ErrorString(<em>int </em>errorNum, #errorStr) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("JS_Zip_ErrorString", <em>int </em>errorNum, #errorStr) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>errorStr = reaper.JS_Zip_ErrorString(<em>integer</em> errorNum)</code></div>
	<div class="p_func"><code>(<em>Int</em> errorNum, <em>String</em> errorStrOut, <em>Int</em> errorStrOut_sz) = JS_Zip_ErrorString(errorNum, errorStrOut, errorStrOut_sz)</code></div>
	<p>Returns a descriptive string for the given error code.</p>
</div>

<div class="function_definition" id="JS_Zip_Extract">
	<div class="c_func"><code>int JS_Zip_Extract(const char* zipFile, const char* outputFolder)</code></div>
	<div class="e_func"><code><em>int </em> JS_Zip_Extract("zipFile", "outputFolder") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Zip_Extract", "zipFile", "outputFolder") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.JS_Zip_Extract(<em>string</em> zipFile, <em>string</em> outputFolder)</code></div>
	<div class="p_func"><code><em>Int</em>  JS_Zip_Extract(<em>String</em> zipFile, <em>String</em> outputFolder)</code></div>
	<p>Extracts an existing Zip file to the specified folder.<br>
</p><p>
Returns the number of extracted files on success, negative number (&lt; 0) on error.</p>
</div>

<div class="function_definition" id="JS_Zip_ListAllEntries">
	<div class="c_func"><code>int JS_Zip_ListAllEntries(void* zipHandle, char* listOutNeedBig, int listOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>int </em> JS_Zip_ListAllEntries(<em>void*</em> zipHandle, #list) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("JS_Zip_ListAllEntries", <em>void*</em> zipHandle, #list) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>list = reaper.JS_Zip_ListAllEntries(<em>identifier</em> zipHandle)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>void</em> zipHandle, <em>String</em> listOutNeedBig, <em>Int</em> listOutNeedBig_sz) = JS_Zip_ListAllEntries(zipHandle, listOutNeedBig, listOutNeedBig_sz)</code></div>
	<p>Returns the number of entries and a zero-separated and double-zero-terminated string of entry names.<br>
</p><p>
On error, returns a negative number (&lt; 0).</p>
</div>

<div class="function_definition" id="JS_Zip_Open">
	<div class="c_func"><code>void* JS_Zip_Open(const char* zipFile, const char* mode, int compressionLevel, int* retvalOut)</code></div>
	<div class="e_func"><code><em>void*</em>  JS_Zip_Open("zipFile", "mode", <em>int </em>compressionLevel, <em>int &amp;</em>retval) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>void*</em>  extension_api("JS_Zip_Open", "zipFile", "mode", <em>int </em>compressionLevel, <em>int &amp;</em>retval) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>identifier</em> retval, <em>integer </em>retval = reaper.JS_Zip_Open(<em>string</em> zipFile, <em>string</em> mode, <em>integer</em> compressionLevel)</code></div>
	<div class="p_func"><code>(<em>void</em> retval, <em>String</em> zipFile, <em>String</em> mode, <em>Int</em> compressionLevel, <em>Int</em> retvalOut) = JS_Zip_Open(zipFile, mode, compressionLevel, retvalOut)</code></div>
	<p>Opens a zip archive using the given mode, which can be either "READ" or "WRITE" (or simply 'r' or 'w').<br>
</p><p>
 * READ: Opens an existing archive for reading/extracting.<br>
 * WRITE: Opens an archive for writing/deleting. If the file doesn't exist, an empty archive will created.<br>
</p><p>
compressionLevel is only relevant for WRITE mode, and ranges from 0 (fastest, no compression) to 9 (slowest, best compression), with a default of 6.<br>
</p><p>
If successful, returns 0 and a handle to the Zip archive. If failed, returns a negative error code. If the file is already open -- in the given mode -- the existing handle will be returned.<br>
</p><p>
NOTES:<br>
 * The Zip API functions support Unicode file names and entry names.<br>
 * The original zip specification did not support Unicode. Some applications still use this outdated specification by default, or try to use the local code page. This may lead to incompatibility and incorrect retrieval of file or entry names.</p>
</div>

<div class="function_definition" id="Llm_Do">
	<div class="c_func"><code>void Llm_Do(int* paramInOptional)</code></div>
	<div class="e_func"><code>Llm_Do(<em>optional int</em> paramIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Llm_Do", <em>optional int</em> paramIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Llm_Do(<em>optional integer</em> paramIn)</code></div>
	<div class="p_func"><code>(<em>Int</em> paramInOptional) Llm_Do(paramInOptional)</code></div>
	<p>Called with parameter value 1 executes one ReaLlm cycle. E.g. for running ReaLlm on custom timer, or deferred. 0 or nothing performs shutdown. Disarming/disabling all monitored inputs and calling with parameter value 1 equals to shutdown.</p>
</div>

<div class="function_definition" id="Llm_Get">
	<div class="c_func"><code>void Llm_Get(const char* parmname, char* bufOutNeedBig, int bufOutNeedBig_sz, MediaTrack* trInOptional)</code></div>
	<div class="e_func"><code>Llm_Get("parmname", #buf, <em>MediaTrack</em> trIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Llm_Get", "parmname", #buf, <em>MediaTrack</em> trIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>buf = reaper.Llm_Get(<em>string</em> parmname, <em>string </em>buf, <em>MediaTrack</em> trIn)</code></div>
	<div class="p_func"><code>(<em>String</em> parmname, <em>String</em> bufOutNeedBig, <em>Int</em> bufOutNeedBig_sz, <em>MediaTrack</em> trInOptional) = Llm_Get(parmname, bufOutNeedBig, bufOutNeedBig_sz, trInOptional)</code></div>
	<p>Get ReaLlm information string. Zero-based indices. Master track index -1. Optional MediaTrack* tr gets results relative to tr. Each line (newline '\n' separated) represents entry. Tracks are separated with ';'. FX are listed after ':' separated with ','. <br>
GRAPH : Mixer routings as network graph in format "node;neighborhood\n" where node is track, and neighborhood is group of tracks in format "track;tr#1;tr#2...\n". Or as "parent;children\n" where first field is parent and rest are children. Or as multiply linked list where first field is node and rest are links. E.g. "7;1;-1;\n" would mean "8th track is connected to 2nd track and Master track."<br>
PDCLATENCY : Latency in samples.<br>
PDCLIMIT : Limit in samples.<br>
REALLM or STATE : Current state of ReaLlm as approach vektors with disabled FX in format: "begin:disabled fx,...;next:fx,...;end:fx,...;\n." E.g. "3:1,2;0;-1:0\n" would be: 4th track, fx#2 and #3 disabled =&gt; 1st track, nofx disabled =&gt; Master track, fx#1 disabled.<br>
SAFE : 'Safed' plugins as "track#:fx#\n" pairs.<br>
VECTOR : Same as REALLM without FX information. Faster.</p>
</div>

<div class="function_definition" id="Llm_Set">
	<div class="c_func"><code>void Llm_Set(const char* parmname, const char* bufIn)</code></div>
	<div class="e_func"><code>Llm_Set("parmname", "bufIn") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Llm_Set", "parmname", "bufIn") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Llm_Set(<em>string</em> parmname, <em>string</em> bufIn)</code></div>
	<div class="p_func"><code>Llm_Set(<em>String</em> parmname, <em>String</em> bufIn)</code></div>
	<p>Set ReaLlm parameters.<br>
PDCLIMIT : PDC latency limit in audio blocks/buffers, e.g. "1.5".<br>
MONITORINGFX : Use any non-empty string to include Monitoring FX. E.g. "true".<br>
PARAMCHANGE : Instead of bypassing, changes FX parameter between val1 (low latency) and val2 (original). Use bufIn string format 'fx_name;param_index;val1;val2'.<br>
KEEPPDC : Maintains PDC. Enable with any non-empty string. Disable (default) with empty string.<br>
SAFE : Call with "clear" to clear all safed FX plugins.<br>
</p>
</div>

<div class="function_definition" id="MRP_CalculateEnvelopeHash">
	<div class="c_func"><code>int MRP_CalculateEnvelopeHash(TrackEnvelope* env)</code></div>
	<div class="e_func"><code><em>int </em> MRP_CalculateEnvelopeHash(<em>TrackEnvelope</em> env) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("MRP_CalculateEnvelopeHash", <em>TrackEnvelope</em> env) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.MRP_CalculateEnvelopeHash(<em>TrackEnvelope</em> env)</code></div>
	<div class="p_func"><code><em>Int</em>  MRP_CalculateEnvelopeHash(<em>TrackEnvelope</em> env)</code></div>
	<p>This <em>function</em> isn't really <strong>correct...</strong> it calculates a 64 bit hash but returns it as a 32 bit int. Should reimplement this. Or rather, even more confusingly : The hash will be 32 bit when building for 32 bit architecture and 64 bit when building for 64 bit architecture! It comes down to how size_t is of different size between the 32 and 64 bit architectures.</p>
</div>

<div class="function_definition" id="MRP_CastDoubleToInt">
	<div class="c_func"><code>int MRP_CastDoubleToInt(double n1, double n2)</code></div>
	<div class="e_func"><code><em>int </em> MRP_CastDoubleToInt(n1, n2) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("MRP_CastDoubleToInt", n1, n2) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.MRP_CastDoubleToInt(<em>number</em> n1, <em>number</em> n2)</code></div>
	<div class="p_func"><code><em>Int</em>  MRP_CastDoubleToInt(<em>Float</em> n1, <em>Float</em> n2)</code></div>
	<p>add two numbers</p>
</div>

<div class="function_definition" id="MRP_CreateArray">
	<div class="c_func"><code>MRP_Array* MRP_CreateArray(int size)</code></div>
	<div class="e_func"><code><em>MRP_Array</em>  MRP_CreateArray(<em>int </em>size) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MRP_Array</em>  extension_api("MRP_CreateArray", <em>int </em>size) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MRP_Array</em> reaper.MRP_CreateArray(<em>integer</em> size)</code></div>
	<div class="p_func"><code><em>MRP_Array</em>  MRP_CreateArray(<em>Int</em> size)</code></div>
	<p>Create an array of 64 bit floating point numbers. Note that these will leak memory if they are not later destroyed with MRP_DestroyArray!</p>
</div>

<div class="function_definition" id="MRP_CreateWindow">
	<div class="c_func"><code>MRP_Window* MRP_CreateWindow(const char* title)</code></div>
	<div class="e_func"><code><em>MRP_Window</em>  MRP_CreateWindow("title") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MRP_Window</em>  extension_api("MRP_CreateWindow", "title") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MRP_Window</em> reaper.MRP_CreateWindow(<em>string</em> title)</code></div>
	<div class="p_func"><code><em>MRP_Window</em>  MRP_CreateWindow(<em>String</em> title)</code></div>
	<p>Create window</p>
</div>

<div class="function_definition" id="MRP_DestroyArray">
	<div class="c_func"><code>void MRP_DestroyArray(MRP_Array* array)</code></div>
	<div class="e_func"><code>MRP_DestroyArray(<em>MRP_Array</em> array) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_DestroyArray", <em>MRP_Array</em> array) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_DestroyArray(<em>MRP_Array</em> array)</code></div>
	<div class="p_func"><code>MRP_DestroyArray(<em>MRP_Array</em> array)</code></div>
	<p>Destroy a previously created MRP_Array</p>
</div>

<div class="function_definition" id="MRP_DestroyWindow">
	<div class="c_func"><code>void MRP_DestroyWindow(MRP_Window* window)</code></div>
	<div class="e_func"><code>MRP_DestroyWindow(<em>MRP_Window</em> window) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_DestroyWindow", <em>MRP_Window</em> window) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_DestroyWindow(<em>MRP_Window</em> window)</code></div>
	<div class="p_func"><code>MRP_DestroyWindow(<em>MRP_Window</em> window)</code></div>
	<p>Destroy window</p>
</div>

<div class="function_definition" id="MRP_DoNothing">
	<div class="c_func"><code>void MRP_DoNothing()</code></div>
	<div class="e_func"><code>MRP_DoNothing() </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_DoNothing") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_DoNothing()</code></div>
	<div class="p_func"><code>MRP_DoNothing()</code></div>
	<p>do nothing, return null</p>
</div>

<div class="function_definition" id="MRP_DoublePointer">
	<div class="c_func"><code>double MRP_DoublePointer(double n1, double n2)</code></div>
	<div class="e_func"><code><em>double </em> MRP_DoublePointer(n1, n2) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("MRP_DoublePointer", n1, n2) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.MRP_DoublePointer(<em>number</em> n1, <em>number</em> n2)</code></div>
	<div class="p_func"><code><em>Float</em>  MRP_DoublePointer(<em>Float</em> n1, <em>Float</em> n2)</code></div>
	<p>add two numbers</p>
</div>

<div class="function_definition" id="MRP_DoublePointerAsInt">
	<div class="c_func"><code>int MRP_DoublePointerAsInt(double n1, double n2)</code></div>
	<div class="e_func"><code><em>int </em> MRP_DoublePointerAsInt(n1, n2) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("MRP_DoublePointerAsInt", n1, n2) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.MRP_DoublePointerAsInt(<em>number</em> n1, <em>number</em> n2)</code></div>
	<div class="p_func"><code><em>Int</em>  MRP_DoublePointerAsInt(<em>Float</em> n1, <em>Float</em> n2)</code></div>
	<p>add two numbers</p>
</div>

<div class="function_definition" id="MRP_GenerateSine">
	<div class="c_func"><code>void MRP_GenerateSine(MRP_Array* array, double samplerate, double frequency)</code></div>
	<div class="e_func"><code>MRP_GenerateSine(<em>MRP_Array</em> array, samplerate, frequency) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_GenerateSine", <em>MRP_Array</em> array, samplerate, frequency) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_GenerateSine(<em>MRP_Array</em> array, <em>number</em> samplerate, <em>number</em> frequency)</code></div>
	<div class="p_func"><code>MRP_GenerateSine(<em>MRP_Array</em> array, <em>Float</em> samplerate, <em>Float</em> frequency)</code></div>
	<p>Generate a sine wave into a MRP_Array</p>
</div>

<div class="function_definition" id="MRP_GetArrayValue">
	<div class="c_func"><code>double MRP_GetArrayValue(MRP_Array* array, int  index)</code></div>
	<div class="e_func"><code><em>double </em> MRP_GetArrayValue(<em>MRP_Array</em> array, <em>int </em> index) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("MRP_GetArrayValue", <em>MRP_Array</em> array, <em>int </em> index) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.MRP_GetArrayValue(<em>MRP_Array</em> array, <em>integer</em>  index)</code></div>
	<div class="p_func"><code><em>Float</em>  MRP_GetArrayValue(<em>MRP_Array</em> array, <em>Int</em>  index)</code></div>
	<p>Get MRP_Array element value. No safety checks done for array or index validity, so use at your own peril!</p>
</div>

<div class="function_definition" id="MRP_GetControlFloatNumber">
	<div class="c_func"><code>double MRP_GetControlFloatNumber(MRP_Window* window, const char* controlname, int which)</code></div>
	<div class="e_func"><code><em>double </em> MRP_GetControlFloatNumber(<em>MRP_Window</em> window, "controlname", <em>int </em>which) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("MRP_GetControlFloatNumber", <em>MRP_Window</em> window, "controlname", <em>int </em>which) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.MRP_GetControlFloatNumber(<em>MRP_Window</em> window, <em>string</em> controlname, <em>integer</em> which)</code></div>
	<div class="p_func"><code><em>Float</em>  MRP_GetControlFloatNumber(<em>MRP_Window</em> window, <em>String</em> controlname, <em>Int</em> which)</code></div>
	<p>Get a floating point number associated with control. Meaning of 'which' depends on the control targeted.</p>
</div>

<div class="function_definition" id="MRP_GetControlIntNumber">
	<div class="c_func"><code>int MRP_GetControlIntNumber(MRP_Window* window, const char* controlname, int which)</code></div>
	<div class="e_func"><code><em>int </em> MRP_GetControlIntNumber(<em>MRP_Window</em> window, "controlname", <em>int </em>which) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("MRP_GetControlIntNumber", <em>MRP_Window</em> window, "controlname", <em>int </em>which) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.MRP_GetControlIntNumber(<em>MRP_Window</em> window, <em>string</em> controlname, <em>integer</em> which)</code></div>
	<div class="p_func"><code><em>Int</em>  MRP_GetControlIntNumber(<em>MRP_Window</em> window, <em>String</em> controlname, <em>Int</em> which)</code></div>
	<p>Get an integer point number associated with control. Meaning of 'which' depends on the control targeted.</p>
</div>

<div class="function_definition" id="MRP_GetWindowDirty">
	<div class="c_func"><code>bool MRP_GetWindowDirty(MRP_Window* window, int whichdirty)</code></div>
	<div class="e_func"><code><em>bool </em> MRP_GetWindowDirty(<em>MRP_Window</em> window, <em>int </em>whichdirty) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("MRP_GetWindowDirty", <em>MRP_Window</em> window, <em>int </em>whichdirty) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.MRP_GetWindowDirty(<em>MRP_Window</em> window, <em>integer</em> whichdirty)</code></div>
	<div class="p_func"><code><em>Boolean</em>  MRP_GetWindowDirty(<em>MRP_Window</em> window, <em>Int</em> whichdirty)</code></div>
	<p>Get window dirty state (ie, if something was changed in the window). which : 0 window size</p>
</div>

<div class="function_definition" id="MRP_GetWindowPosSizeValue">
	<div class="c_func"><code>int MRP_GetWindowPosSizeValue(MRP_Window* window, int which)</code></div>
	<div class="e_func"><code><em>int </em> MRP_GetWindowPosSizeValue(<em>MRP_Window</em> window, <em>int </em>which) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("MRP_GetWindowPosSizeValue", <em>MRP_Window</em> window, <em>int </em>which) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.MRP_GetWindowPosSizeValue(<em>MRP_Window</em> window, <em>integer</em> which)</code></div>
	<div class="p_func"><code><em>Int</em>  MRP_GetWindowPosSizeValue(<em>MRP_Window</em> window, <em>Int</em> which)</code></div>
	<p>Get window geometry values. which : 0 x, 1 y, 2 w, 3 h</p>
</div>

<div class="function_definition" id="MRP_IntPointer">
	<div class="c_func"><code>int MRP_IntPointer(int n1, int n2)</code></div>
	<div class="e_func"><code><em>int </em> MRP_IntPointer(<em>int </em>n1, <em>int </em>n2) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("MRP_IntPointer", <em>int </em>n1, <em>int </em>n2) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.MRP_IntPointer(<em>integer</em> n1, <em>integer</em> n2)</code></div>
	<div class="p_func"><code><em>Int</em>  MRP_IntPointer(<em>Int</em> n1, <em>Int</em> n2)</code></div>
	<p>add two numbers</p>
</div>

<div class="function_definition" id="MRP_MultiplyArrays">
	<div class="c_func"><code>void MRP_MultiplyArrays(MRP_Array* array1, MRP_Array*  array2, MRP_Array*  array3)</code></div>
	<div class="e_func"><code>MRP_MultiplyArrays(<em>MRP_Array</em> array1, <em>MRP_Array</em>  array2, <em>MRP_Array</em>  array3) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_MultiplyArrays", <em>MRP_Array</em> array1, <em>MRP_Array</em>  array2, <em>MRP_Array</em>  array3) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_MultiplyArrays(<em>MRP_Array</em> array1, <em>MRP_Array</em>  array2, <em>MRP_Array</em>  array3)</code></div>
	<div class="p_func"><code>MRP_MultiplyArrays(<em>MRP_Array</em> array1, <em>MRP_Array</em>  array2, <em>MRP_Array</em>  array3)</code></div>
	<p>Multiply 2 MRP_Arrays of same length. Result is written to 3rd array.</p>
</div>

<div class="function_definition" id="MRP_MultiplyArraysMT">
	<div class="c_func"><code>void MRP_MultiplyArraysMT(MRP_Array* array1, MRP_Array*  array2, MRP_Array* array3)</code></div>
	<div class="e_func"><code>MRP_MultiplyArraysMT(<em>MRP_Array</em> array1, <em>MRP_Array</em>  array2, <em>MRP_Array</em> array3) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_MultiplyArraysMT", <em>MRP_Array</em> array1, <em>MRP_Array</em>  array2, <em>MRP_Array</em> array3) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_MultiplyArraysMT(<em>MRP_Array</em> array1, <em>MRP_Array</em>  array2, <em>MRP_Array</em> array3)</code></div>
	<div class="p_func"><code>MRP_MultiplyArraysMT(<em>MRP_Array</em> array1, <em>MRP_Array</em>  array2, <em>MRP_Array</em> array3)</code></div>
	<p>Multiply 2 MRP_Arrays of same length. Result is written to 3rd array. Uses multiple threads.</p>
</div>

<div class="function_definition" id="MRP_ReturnMediaItem">
	<div class="c_func"><code>MediaItem* MRP_ReturnMediaItem()</code></div>
	<div class="e_func"><code><em>MediaItem</em>  MRP_ReturnMediaItem() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MediaItem</em>  extension_api("MRP_ReturnMediaItem") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MediaItem</em> reaper.MRP_ReturnMediaItem()</code></div>
	<div class="p_func"><code><em>MediaItem</em>  MRP_ReturnMediaItem()</code></div>
	<p>return media item</p>
</div>

<div class="function_definition" id="MRP_SendCommandString">
	<div class="c_func"><code>void MRP_SendCommandString(MRP_Window* window, const char* controlname, const char* commandtext)</code></div>
	<div class="e_func"><code>MRP_SendCommandString(<em>MRP_Window</em> window, "controlname", "commandtext") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_SendCommandString", <em>MRP_Window</em> window, "controlname", "commandtext") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_SendCommandString(<em>MRP_Window</em> window, <em>string</em> controlname, <em>string</em> commandtext)</code></div>
	<div class="p_func"><code>MRP_SendCommandString(<em>MRP_Window</em> window, <em>String</em> controlname, <em>String</em> commandtext)</code></div>
	<p>Send a command message to control. Currently only the envelope control understands some messages.</p>
</div>

<div class="function_definition" id="MRP_SetArrayValue">
	<div class="c_func"><code>void MRP_SetArrayValue(MRP_Array* array, int  index, double  value)</code></div>
	<div class="e_func"><code>MRP_SetArrayValue(<em>MRP_Array</em> array, <em>int </em> index,  value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_SetArrayValue", <em>MRP_Array</em> array, <em>int </em> index,  value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_SetArrayValue(<em>MRP_Array</em> array, <em>integer</em>  index, <em>number</em>  value)</code></div>
	<div class="p_func"><code>MRP_SetArrayValue(<em>MRP_Array</em> array, <em>Int</em>  index, <em>Float</em>  value)</code></div>
	<p>Set MRP_Array element value. No safety checks done for array or index validity, so use at your own peril!</p>
</div>

<div class="function_definition" id="MRP_SetControlBounds">
	<div class="c_func"><code>void MRP_SetControlBounds(MRP_Window* window, const char* name, double x, double y, double w, double h)</code></div>
	<div class="e_func"><code>MRP_SetControlBounds(<em>MRP_Window</em> window, "name", x, y, w, h) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_SetControlBounds", <em>MRP_Window</em> window, "name", x, y, w, h) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_SetControlBounds(<em>MRP_Window</em> window, <em>string</em> name, <em>number</em> x, <em>number</em> y, <em>number</em> w, <em>number</em> h)</code></div>
	<div class="p_func"><code>MRP_SetControlBounds(<em>MRP_Window</em> window, <em>String</em> name, <em>Float</em> x, <em>Float</em> y, <em>Float</em> w, <em>Float</em> h)</code></div>
	<p>Set MRP control position and size</p>
</div>

<div class="function_definition" id="MRP_SetControlFloatNumber">
	<div class="c_func"><code>void MRP_SetControlFloatNumber(MRP_Window* window, const char* controlname, int which, double value)</code></div>
	<div class="e_func"><code>MRP_SetControlFloatNumber(<em>MRP_Window</em> window, "controlname", <em>int </em>which, value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_SetControlFloatNumber", <em>MRP_Window</em> window, "controlname", <em>int </em>which, value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_SetControlFloatNumber(<em>MRP_Window</em> window, <em>string</em> controlname, <em>integer</em> which, <em>number</em> value)</code></div>
	<div class="p_func"><code>MRP_SetControlFloatNumber(<em>MRP_Window</em> window, <em>String</em> controlname, <em>Int</em> which, <em>Float</em> value)</code></div>
	<p>Set a floating point number associated with control. Meaning of 'which' depends on the control targeted.</p>
</div>

<div class="function_definition" id="MRP_SetControlIntNumber">
	<div class="c_func"><code>void MRP_SetControlIntNumber(MRP_Window* window, const char* controlname, int which, int value)</code></div>
	<div class="e_func"><code>MRP_SetControlIntNumber(<em>MRP_Window</em> window, "controlname", <em>int </em>which, <em>int </em>value) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_SetControlIntNumber", <em>MRP_Window</em> window, "controlname", <em>int </em>which, <em>int </em>value) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_SetControlIntNumber(<em>MRP_Window</em> window, <em>string</em> controlname, <em>integer</em> which, <em>integer</em> value)</code></div>
	<div class="p_func"><code>MRP_SetControlIntNumber(<em>MRP_Window</em> window, <em>String</em> controlname, <em>Int</em> which, <em>Int</em> value)</code></div>
	<p>Set an integer point number associated with control. Meaning of 'which' depends on the control targeted.</p>
</div>

<div class="function_definition" id="MRP_SetControlString">
	<div class="c_func"><code>void MRP_SetControlString(MRP_Window* window, const char* controlname, int which, const char* text)</code></div>
	<div class="e_func"><code>MRP_SetControlString(<em>MRP_Window</em> window, "controlname", <em>int </em>which, "text") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_SetControlString", <em>MRP_Window</em> window, "controlname", <em>int </em>which, "text") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_SetControlString(<em>MRP_Window</em> window, <em>string</em> controlname, <em>integer</em> which, <em>string</em> text)</code></div>
	<div class="p_func"><code>MRP_SetControlString(<em>MRP_Window</em> window, <em>String</em> controlname, <em>Int</em> which, <em>String</em> text)</code></div>
	<p>Set a text property associated with control. Meaning of 'which' depends on the control targeted.</p>
</div>

<div class="function_definition" id="MRP_SetWindowDirty">
	<div class="c_func"><code>void MRP_SetWindowDirty(MRP_Window* window, int which, bool state)</code></div>
	<div class="e_func"><code>MRP_SetWindowDirty(<em>MRP_Window</em> window, <em>int </em>which, <em>bool </em>state) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_SetWindowDirty", <em>MRP_Window</em> window, <em>int </em>which, <em>bool </em>state) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_SetWindowDirty(<em>MRP_Window</em> window, <em>integer</em> which, <em>boolean</em> state)</code></div>
	<div class="p_func"><code>MRP_SetWindowDirty(<em>MRP_Window</em> window, <em>Int</em> which, <em>Boolean</em> state)</code></div>
	<p>Set window dirty state (ie, if something was changed in the controls)</p>
</div>

<div class="function_definition" id="MRP_WindowAddControl">
	<div class="c_func"><code>void MRP_WindowAddControl(MRP_Window* window, const char* controltypename, const char* objectname)</code></div>
	<div class="e_func"><code>MRP_WindowAddControl(<em>MRP_Window</em> window, "controltypename", "objectname") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_WindowAddControl", <em>MRP_Window</em> window, "controltypename", "objectname") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_WindowAddControl(<em>MRP_Window</em> window, <em>string</em> controltypename, <em>string</em> objectname)</code></div>
	<div class="p_func"><code>MRP_WindowAddControl(<em>MRP_Window</em> window, <em>String</em> controltypename, <em>String</em> objectname)</code></div>
	<p>Add a control to window. Controltypename is the type of control to create. Objectname must be a unique id</p>
</div>

<div class="function_definition" id="MRP_WindowClearDirtyControls">
	<div class="c_func"><code>void MRP_WindowClearDirtyControls(MRP_Window* window)</code></div>
	<div class="e_func"><code>MRP_WindowClearDirtyControls(<em>MRP_Window</em> window) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_WindowClearDirtyControls", <em>MRP_Window</em> window) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_WindowClearDirtyControls(<em>MRP_Window</em> window)</code></div>
	<div class="p_func"><code>MRP_WindowClearDirtyControls(<em>MRP_Window</em> window)</code></div>
	<p>Clears the dirty states of the controls in a window.</p>
</div>

<div class="function_definition" id="MRP_WindowIsClosed">
	<div class="c_func"><code>bool MRP_WindowIsClosed(MRP_Window* window)</code></div>
	<div class="e_func"><code><em>bool </em> MRP_WindowIsClosed(<em>MRP_Window</em> window) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("MRP_WindowIsClosed", <em>MRP_Window</em> window) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.MRP_WindowIsClosed(<em>MRP_Window</em> window)</code></div>
	<div class="p_func"><code><em>Boolean</em>  MRP_WindowIsClosed(<em>MRP_Window</em> window)</code></div>
	<p>Returns if the window has been closed and the ReaScript defer loop should likely be exited</p>
</div>

<div class="function_definition" id="MRP_WindowIsDirtyControl">
	<div class="c_func"><code>bool MRP_WindowIsDirtyControl(MRP_Window* window, const char* controlname)</code></div>
	<div class="e_func"><code><em>bool </em> MRP_WindowIsDirtyControl(<em>MRP_Window</em> window, "controlname") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("MRP_WindowIsDirtyControl", <em>MRP_Window</em> window, "controlname") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.MRP_WindowIsDirtyControl(<em>MRP_Window</em> window, <em>string</em> controlname)</code></div>
	<div class="p_func"><code><em>Boolean</em>  MRP_WindowIsDirtyControl(<em>MRP_Window</em> window, <em>String</em> controlname)</code></div>
	<p>Returns true if control was manipulated</p>
</div>

<div class="function_definition" id="MRP_WindowSetTitle">
	<div class="c_func"><code>void MRP_WindowSetTitle(MRP_Window* window, const char* title)</code></div>
	<div class="e_func"><code>MRP_WindowSetTitle(<em>MRP_Window</em> window, "title") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_WindowSetTitle", <em>MRP_Window</em> window, "title") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_WindowSetTitle(<em>MRP_Window</em> window, <em>string</em> title)</code></div>
	<div class="p_func"><code>MRP_WindowSetTitle(<em>MRP_Window</em> window, <em>String</em> title)</code></div>
	<p>Set window title</p>
</div>

<div class="function_definition" id="MRP_WriteArrayToFile">
	<div class="c_func"><code>void MRP_WriteArrayToFile(MRP_Array* array, const char* filename, double samplerate)</code></div>
	<div class="e_func"><code>MRP_WriteArrayToFile(<em>MRP_Array</em> array, "filename", samplerate) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("MRP_WriteArrayToFile", <em>MRP_Array</em> array, "filename", samplerate) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.MRP_WriteArrayToFile(<em>MRP_Array</em> array, <em>string</em> filename, <em>number</em> samplerate)</code></div>
	<div class="p_func"><code>MRP_WriteArrayToFile(<em>MRP_Array</em> array, <em>String</em> filename, <em>Float</em> samplerate)</code></div>
	<p>Write MRP_Array to disk as a 32 bit floating point mono wav file</p>
</div>

<div class="function_definition" id="NF_AnalyzeMediaItemPeakAndRMS">
	<div class="c_func"><code>bool NF_AnalyzeMediaItemPeakAndRMS(MediaItem* item, double windowSize, void* reaper.array_peaks, void* reaper.array_peakpositions, void* reaper.array_RMSs, void* reaper.array_RMSpositions)</code></div>
	<div class="e_func"><code><em>bool </em> NF_AnalyzeMediaItemPeakAndRMS(<em>MediaItem</em> item, windowSize, <em>void*</em> reaper.array_peaks, <em>void*</em> reaper.array_peakpositions, <em>void*</em> reaper.array_RMSs, <em>void*</em> reaper.array_RMSpositions) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_AnalyzeMediaItemPeakAndRMS", <em>MediaItem</em> item, windowSize, <em>void*</em> reaper.array_peaks, <em>void*</em> reaper.array_peakpositions, <em>void*</em> reaper.array_RMSs, <em>void*</em> reaper.array_RMSpositions) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.NF_AnalyzeMediaItemPeakAndRMS(<em>MediaItem</em> item, <em>number</em> windowSize, <em>identifier</em> reaper.array_peaks, <em>identifier</em> reaper.array_peakpositions, <em>identifier</em> reaper.array_RMSs, <em>identifier</em> reaper.array_RMSpositions)</code></div>
	<div class="p_func"><code><em>Boolean</em>  NF_AnalyzeMediaItemPeakAndRMS(<em>MediaItem</em> item, <em>Float</em> windowSize, <em>void</em> reaper.array_peaks, <em>void</em> reaper.array_peakpositions, <em>void</em> reaper.array_RMSs, <em>void</em> reaper.array_RMSpositions)</code></div>
	<p>This function combines all other NF_Peak/RMS functions in a single one and additionally returns peak RMS positions. Lua example code <a href="https://forum.cockos.com/showpost.php?p=2050961&postcount=6">here</a>. Note: It's recommended to use this function with ReaScript/Lua as it provides reaper.array objects. If using this function with other scripting languages, you must provide arrays in the <a href="https://forum.cockos.com/showpost.php?p=2039829&postcount=2">reaper.array</a> format.</p>
</div>

<div class="function_definition" id="NF_AnalyzeTakeLoudness">
	<div class="c_func"><code>bool NF_AnalyzeTakeLoudness(MediaItem_Take* take, bool analyzeTruePeak, double* lufsIntegratedOut, double* rangeOut, double*  truePeakOut, double* truePeakPosOut, double* shortTermMaxOut, double* momentaryMaxOut)</code></div>
	<div class="e_func"><code><em>bool </em> NF_AnalyzeTakeLoudness(<em>MediaItem_Take</em> take, <em>bool </em>analyzeTruePeak, <em>&amp;</em>lufsIntegrated, <em>&amp;</em>range, <em>&amp;</em> truePeak, <em>&amp;</em>truePeakPos, <em>&amp;</em>shortTermMax, <em>&amp;</em>momentaryMax) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_AnalyzeTakeLoudness", <em>MediaItem_Take</em> take, <em>bool </em>analyzeTruePeak, <em>&amp;</em>lufsIntegrated, <em>&amp;</em>range, <em>&amp;</em> truePeak, <em>&amp;</em>truePeakPos, <em>&amp;</em>shortTermMax, <em>&amp;</em>momentaryMax) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>lufsIntegrated, <em>number </em>range, <em>number </em> truePeak, <em>number </em>truePeakPos, <em>number </em>shortTermMax, <em>number </em>momentaryMax = reaper.NF_AnalyzeTakeLoudness(<em>MediaItem_Take</em> take, <em>boolean</em> analyzeTruePeak)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Boolean</em> analyzeTruePeak, <em>Float</em> lufsIntegratedOut, <em>Float</em> rangeOut, <em>Float</em>  truePeakOut, <em>Float</em> truePeakPosOut, <em>Float</em> shortTermMaxOut, <em>Float</em> momentaryMaxOut) = NF_AnalyzeTakeLoudness(take, analyzeTruePeak, lufsIntegratedOut, rangeOut,  truePeakOut, truePeakPosOut, shortTermMaxOut, momentaryMaxOut)</code></div>
	<p>Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value in dBTP and true peak position (relative to item position). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated correctly. Momentary uses a time window of 0.4 sec. </p>
</div>

<div class="function_definition" id="NF_AnalyzeTakeLoudness2">
	<div class="c_func"><code>bool NF_AnalyzeTakeLoudness2(MediaItem_Take* take, bool analyzeTruePeak, double* lufsIntegratedOut, double* rangeOut, double*  truePeakOut, double* truePeakPosOut, double* shortTermMaxOut, double* momentaryMaxOut, double* shortTermMaxPosOut, double* momentaryMaxPosOut)</code></div>
	<div class="e_func"><code><em>bool </em> NF_AnalyzeTakeLoudness2(<em>MediaItem_Take</em> take, <em>bool </em>analyzeTruePeak, <em>&amp;</em>lufsIntegrated, <em>&amp;</em>range, <em>&amp;</em> truePeak, <em>&amp;</em>truePeakPos, <em>&amp;</em>shortTermMax, <em>&amp;</em>momentaryMax, <em>&amp;</em>shortTermMaxPos, <em>&amp;</em>momentaryMaxPos) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_AnalyzeTakeLoudness2", <em>MediaItem_Take</em> take, <em>bool </em>analyzeTruePeak, <em>&amp;</em>lufsIntegrated, <em>&amp;</em>range, <em>&amp;</em> truePeak, <em>&amp;</em>truePeakPos, <em>&amp;</em>shortTermMax, <em>&amp;</em>momentaryMax, <em>&amp;</em>shortTermMaxPos, <em>&amp;</em>momentaryMaxPos) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>lufsIntegrated, <em>number </em>range, <em>number </em> truePeak, <em>number </em>truePeakPos, <em>number </em>shortTermMax, <em>number </em>momentaryMax, <em>number </em>shortTermMaxPos, <em>number </em>momentaryMaxPos = reaper.NF_AnalyzeTakeLoudness2(<em>MediaItem_Take</em> take, <em>boolean</em> analyzeTruePeak)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Boolean</em> analyzeTruePeak, <em>Float</em> lufsIntegratedOut, <em>Float</em> rangeOut, <em>Float</em>  truePeakOut, <em>Float</em> truePeakPosOut, <em>Float</em> shortTermMaxOut, <em>Float</em> momentaryMaxOut, <em>Float</em> shortTermMaxPosOut, <em>Float</em> momentaryMaxPosOut) = NF_AnalyzeTakeLoudness2(take, analyzeTruePeak, lufsIntegratedOut, rangeOut,  truePeakOut, truePeakPosOut, shortTermMaxOut, momentaryMaxOut, shortTermMaxPosOut, momentaryMaxPosOut)</code></div>
	<p>Same as <a href="#NF_AnalyzeTakeLoudness">NF_AnalyzeTakeLoudness</a> but additionally returns shortTermMaxPos and momentaryMaxPos (in absolute project time). Note: shortTermMaxPos and momentaryMaxPos indicate the beginning of time <em>intervalls</em>, (3 sec. and 0.4 sec. resp.). </p>
</div>

<div class="function_definition" id="NF_AnalyzeTakeLoudness_IntegratedOnly">
	<div class="c_func"><code>bool NF_AnalyzeTakeLoudness_IntegratedOnly(MediaItem_Take* take, double* lufsIntegratedOut)</code></div>
	<div class="e_func"><code><em>bool </em> NF_AnalyzeTakeLoudness_IntegratedOnly(<em>MediaItem_Take</em> take, <em>&amp;</em>lufsIntegrated) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_AnalyzeTakeLoudness_IntegratedOnly", <em>MediaItem_Take</em> take, <em>&amp;</em>lufsIntegrated) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>number </em>lufsIntegrated = reaper.NF_AnalyzeTakeLoudness_IntegratedOnly(<em>MediaItem_Take</em> take)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem_Take</em> take, <em>Float</em> lufsIntegratedOut) = NF_AnalyzeTakeLoudness_IntegratedOnly(take, lufsIntegratedOut)</code></div>
	<p>Does LUFS integrated analysis only. Faster than full loudness analysis (<a href="#NF_AnalyzeTakeLoudness">NF_AnalyzeTakeLoudness</a>) . Use this if only LUFS integrated is required. Take vol. env. is taken into account. See: <a href="http://wiki.cockos.com/wiki/index.php/Measure_and_normalize_loudness_with_SWS">Signal flow</a></p>
</div>

<div class="function_definition" id="NF_Base64_Decode">
	<div class="c_func"><code>bool NF_Base64_Decode(const char* base64Str, char* decodedStrOutNeedBig, int decodedStrOutNeedBig_sz)</code></div>
	<div class="e_func"><code><em>bool </em> NF_Base64_Decode("base64Str", #decodedStr) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_Base64_Decode", "base64Str", #decodedStr) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>decodedStr = reaper.NF_Base64_Decode(<em>string</em> base64Str)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> base64Str, <em>String</em> decodedStrOutNeedBig, <em>Int</em> decodedStrOutNeedBig_sz) = NF_Base64_Decode(base64Str, decodedStrOutNeedBig, decodedStrOutNeedBig_sz)</code></div>
	<p>Returns true on success.</p>
</div>

<div class="function_definition" id="NF_Base64_Encode">
	<div class="c_func"><code>void NF_Base64_Encode(const char* str, int str_sz, bool usePadding, char* encodedStrOutNeedBig, int encodedStrOutNeedBig_sz)</code></div>
	<div class="e_func"><code>NF_Base64_Encode("str", <em>bool </em>usePadding, #encodedStr) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("NF_Base64_Encode", "str", <em>bool </em>usePadding, #encodedStr) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string </em>encodedStr = reaper.NF_Base64_Encode(<em>string</em> str, <em>boolean</em> usePadding)</code></div>
	<div class="p_func"><code>(<em>String</em> str, <em>Int</em> str_sz, <em>Boolean</em> usePadding, <em>String</em> encodedStrOutNeedBig, <em>Int</em> encodedStrOutNeedBig_sz) = NF_Base64_Encode(str, str_sz, usePadding, encodedStrOutNeedBig, encodedStrOutNeedBig_sz)</code></div>
	<p>Input string may contain null bytes in REAPER 6.44 or newer. Note: Doesn't allow padding in the middle (e.g. concatenated encoded strings), doesn't allow newlines.</p>
</div>

<div class="function_definition" id="NF_ClearGlobalStartupAction">
	<div class="c_func"><code>bool NF_ClearGlobalStartupAction()</code></div>
	<div class="e_func"><code><em>bool </em> NF_ClearGlobalStartupAction() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_ClearGlobalStartupAction") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.NF_ClearGlobalStartupAction()</code></div>
	<div class="p_func"><code><em>Boolean</em>  NF_ClearGlobalStartupAction()</code></div>
	<p>Returns true if global startup action was cleared successfully.</p>
</div>

<div class="function_definition" id="NF_ClearProjectStartupAction">
	<div class="c_func"><code>bool NF_ClearProjectStartupAction()</code></div>
	<div class="e_func"><code><em>bool </em> NF_ClearProjectStartupAction() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_ClearProjectStartupAction") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.NF_ClearProjectStartupAction()</code></div>
	<div class="p_func"><code><em>Boolean</em>  NF_ClearProjectStartupAction()</code></div>
	<p>Returns true if project startup action was cleared successfully.</p>
</div>

<div class="function_definition" id="NF_ClearProjectTrackSelectionAction">
	<div class="c_func"><code>bool NF_ClearProjectTrackSelectionAction()</code></div>
	<div class="e_func"><code><em>bool </em> NF_ClearProjectTrackSelectionAction() </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_ClearProjectTrackSelectionAction") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.NF_ClearProjectTrackSelectionAction()</code></div>
	<div class="p_func"><code><em>Boolean</em>  NF_ClearProjectTrackSelectionAction()</code></div>
	<p>Returns true if project track selection action was cleared successfully.</p>
</div>

<div class="function_definition" id="NF_DeleteTakeFromItem">
	<div class="c_func"><code>bool NF_DeleteTakeFromItem(MediaItem* item, int takeIdx)</code></div>
	<div class="e_func"><code><em>bool </em> NF_DeleteTakeFromItem(<em>MediaItem</em> item, <em>int </em>takeIdx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_DeleteTakeFromItem", <em>MediaItem</em> item, <em>int </em>takeIdx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.NF_DeleteTakeFromItem(<em>MediaItem</em> item, <em>integer</em> takeIdx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  NF_DeleteTakeFromItem(<em>MediaItem</em> item, <em>Int</em> takeIdx)</code></div>
	<p>Deletes a take from an item. takeIdx is zero-based. Returns true on success.</p>
</div>

<div class="function_definition" id="NF_GetGlobalStartupAction">
	<div class="c_func"><code>bool NF_GetGlobalStartupAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> NF_GetGlobalStartupAction(#desc, #cmdId) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_GetGlobalStartupAction", #desc, #cmdId) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>desc, <em>string </em>cmdId = reaper.NF_GetGlobalStartupAction()</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> descOut, <em>Int</em> descOut_sz, <em>String</em> cmdIdOut, <em>Int</em> cmdIdOut_sz) = NF_GetGlobalStartupAction(descOut, descOut_sz, cmdIdOut, cmdIdOut_sz)</code></div>
	<p>Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if global startup action is set, otherwise empty string. Returns false on failure.</p>
</div>

<div class="function_definition" id="NF_GetMediaItemAverageRMS">
	<div class="c_func"><code>double NF_GetMediaItemAverageRMS(MediaItem* item)</code></div>
	<div class="e_func"><code><em>double </em> NF_GetMediaItemAverageRMS(<em>MediaItem</em> item) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("NF_GetMediaItemAverageRMS", <em>MediaItem</em> item) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.NF_GetMediaItemAverageRMS(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>Float</em>  NF_GetMediaItemAverageRMS(<em>MediaItem</em> item)</code></div>
	<p>Returns the average overall (non-windowed) dB RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. <br>
 Returns -150.0 if MIDI take or empty item.</p>
</div>

<div class="function_definition" id="NF_GetMediaItemMaxPeak">
	<div class="c_func"><code>double NF_GetMediaItemMaxPeak(MediaItem* item)</code></div>
	<div class="e_func"><code><em>double </em> NF_GetMediaItemMaxPeak(<em>MediaItem</em> item) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("NF_GetMediaItemMaxPeak", <em>MediaItem</em> item) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.NF_GetMediaItemMaxPeak(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>Float</em>  NF_GetMediaItemMaxPeak(<em>MediaItem</em> item)</code></div>
	<p>Returns the greatest max. peak value in dBFS of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. <br>
 Returns -150.0 if MIDI take or empty item.</p>
</div>

<div class="function_definition" id="NF_GetMediaItemMaxPeakAndMaxPeakPos">
	<div class="c_func"><code>double NF_GetMediaItemMaxPeakAndMaxPeakPos(MediaItem* item, double* maxPeakPosOut)</code></div>
	<div class="e_func"><code><em>double </em> NF_GetMediaItemMaxPeakAndMaxPeakPos(<em>MediaItem</em> item, <em>&amp;</em>maxPeakPos) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("NF_GetMediaItemMaxPeakAndMaxPeakPos", <em>MediaItem</em> item, <em>&amp;</em>maxPeakPos) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> retval, <em>number </em>maxPeakPos = reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code>(<em>Float</em> retval, <em>MediaItem</em> item, <em>Float</em> maxPeakPosOut) = NF_GetMediaItemMaxPeakAndMaxPeakPos(item, maxPeakPosOut)</code></div>
	<p>See <a href="#NF_GetMediaItemMaxPeak">NF_GetMediaItemMaxPeak</a>, additionally returns maxPeakPos (relative to item position).</p>
</div>

<div class="function_definition" id="NF_GetMediaItemPeakRMS_NonWindowed">
	<div class="c_func"><code>double NF_GetMediaItemPeakRMS_NonWindowed(MediaItem* item)</code></div>
	<div class="e_func"><code><em>double </em> NF_GetMediaItemPeakRMS_NonWindowed(<em>MediaItem</em> item) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("NF_GetMediaItemPeakRMS_NonWindowed", <em>MediaItem</em> item) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.NF_GetMediaItemPeakRMS_NonWindowed(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>Float</em>  NF_GetMediaItemPeakRMS_NonWindowed(<em>MediaItem</em> item)</code></div>
	<p>Returns the greatest overall (non-windowed) dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. <br>
 Returns -150.0 if MIDI take or empty item.</p>
</div>

<div class="function_definition" id="NF_GetMediaItemPeakRMS_Windowed">
	<div class="c_func"><code>double NF_GetMediaItemPeakRMS_Windowed(MediaItem* item)</code></div>
	<div class="e_func"><code><em>double </em> NF_GetMediaItemPeakRMS_Windowed(<em>MediaItem</em> item) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("NF_GetMediaItemPeakRMS_Windowed", <em>MediaItem</em> item) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.NF_GetMediaItemPeakRMS_Windowed(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>Float</em>  NF_GetMediaItemPeakRMS_Windowed(<em>MediaItem</em> item)</code></div>
	<p>Returns the average dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. <br>
 Obeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item.</p>
</div>

<div class="function_definition" id="NF_GetProjectStartupAction">
	<div class="c_func"><code>bool NF_GetProjectStartupAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> NF_GetProjectStartupAction(#desc, #cmdId) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_GetProjectStartupAction", #desc, #cmdId) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>desc, <em>string </em>cmdId = reaper.NF_GetProjectStartupAction()</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> descOut, <em>Int</em> descOut_sz, <em>String</em> cmdIdOut, <em>Int</em> cmdIdOut_sz) = NF_GetProjectStartupAction(descOut, descOut_sz, cmdIdOut, cmdIdOut_sz)</code></div>
	<p>Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project startup action is set, otherwise empty string. Returns false on failure.</p>
</div>

<div class="function_definition" id="NF_GetProjectTrackSelectionAction">
	<div class="c_func"><code>bool NF_GetProjectTrackSelectionAction(char* descOut, int descOut_sz, char* cmdIdOut, int cmdIdOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> NF_GetProjectTrackSelectionAction(#desc, #cmdId) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_GetProjectTrackSelectionAction", #desc, #cmdId) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>desc, <em>string </em>cmdId = reaper.NF_GetProjectTrackSelectionAction()</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> descOut, <em>Int</em> descOut_sz, <em>String</em> cmdIdOut, <em>Int</em> cmdIdOut_sz) = NF_GetProjectTrackSelectionAction(descOut, descOut_sz, cmdIdOut, cmdIdOut_sz)</code></div>
	<p>Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project track selection action is set, otherwise empty string. Returns false on failure.</p>
</div>

<div class="function_definition" id="NF_GetSWSMarkerRegionSub">
	<div class="c_func"><code>const char* NF_GetSWSMarkerRegionSub(int markerRegionIdx)</code></div>
	<div class="e_func"><code>bool  NF_GetSWSMarkerRegionSub(#retval, <em>int </em>markerRegionIdx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>bool  extension_api("NF_GetSWSMarkerRegionSub", #retval, <em>int </em>markerRegionIdx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string</em> reaper.NF_GetSWSMarkerRegionSub(<em>integer</em> markerRegionIdx)</code></div>
	<div class="p_func"><code><em>String</em>  NF_GetSWSMarkerRegionSub(<em>Int</em> markerRegionIdx)</code></div>
	<p>Returns SWS/S&amp;M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to <a href="#EnumProjectMarkers">EnumProjectMarkers</a> (not displayed marker/region index). Returns empty string if marker/region with specified index not found or marker/region subtitle not set. Lua code example <a href="https://github.com/ReaTeam/ReaScripts-Templates/blob/master/Markers%20and%20Regions/NF_Get%20SWS%20markers%20and%20regions%20notes.lua">here</a>.</p>
</div>

<div class="function_definition" id="NF_GetSWSTrackNotes">
	<div class="c_func"><code>const char* NF_GetSWSTrackNotes(MediaTrack* track)</code></div>
	<div class="e_func"><code>bool  NF_GetSWSTrackNotes(#retval, <em>MediaTrack</em> track) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>bool  extension_api("NF_GetSWSTrackNotes", #retval, <em>MediaTrack</em> track) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string</em> reaper.NF_GetSWSTrackNotes(<em>MediaTrack</em> track)</code></div>
	<div class="p_func"><code><em>String</em>  NF_GetSWSTrackNotes(<em>MediaTrack</em> track)</code></div>
</div>

<div class="function_definition" id="NF_GetSWS_RMSoptions">
	<div class="c_func"><code>void NF_GetSWS_RMSoptions(double* targetOut, double* windowSizeOut)</code></div>
	<div class="e_func"><code>NF_GetSWS_RMSoptions(<em>&amp;</em>target, <em>&amp;</em>windowSize) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("NF_GetSWS_RMSoptions", <em>&amp;</em>target, <em>&amp;</em>windowSize) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number </em>target, <em>number </em>windowSize = reaper.NF_GetSWS_RMSoptions()</code></div>
	<div class="p_func"><code>(<em>Float</em> targetOut, <em>Float</em> windowSizeOut) = NF_GetSWS_RMSoptions(targetOut, windowSizeOut)</code></div>
	<p>Get SWS analysis/normalize options. See <a href="#NF_SetSWS_RMSoptions">NF_SetSWS_RMSoptions</a>.</p>
</div>

<div class="function_definition" id="NF_ReadAudioFileBitrate">
	<div class="c_func"><code>int NF_ReadAudioFileBitrate(const char* fn)</code></div>
	<div class="e_func"><code><em>int </em> NF_ReadAudioFileBitrate("fn") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("NF_ReadAudioFileBitrate", "fn") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.NF_ReadAudioFileBitrate(<em>string</em> fn)</code></div>
	<div class="p_func"><code><em>Int</em>  NF_ReadAudioFileBitrate(<em>String</em> fn)</code></div>
	<p>Returns the bitrate of an audio file in kb/s if available (0 otherwise). For supported filetypes see <a href="https://taglib.org/api/classTagLib_1_1AudioProperties.html#ae5b7650b50f8c8f8cc022f25cfee48c5">TagLib::AudioProperties::bitrate</a>.</p>
</div>

<div class="function_definition" id="NF_ScrollHorizontallyByPercentage">
	<div class="c_func"><code>void NF_ScrollHorizontallyByPercentage(int amount)</code></div>
	<div class="e_func"><code>NF_ScrollHorizontallyByPercentage(<em>int </em>amount) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("NF_ScrollHorizontallyByPercentage", <em>int </em>amount) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.NF_ScrollHorizontallyByPercentage(<em>integer</em> amount)</code></div>
	<div class="p_func"><code>NF_ScrollHorizontallyByPercentage(<em>Int</em> amount)</code></div>
	<p>100 means scroll one page. Negative values scroll left.</p>
</div>

<div class="function_definition" id="NF_SetGlobalStartupAction">
	<div class="c_func"><code>bool NF_SetGlobalStartupAction(const char* str)</code></div>
	<div class="e_func"><code><em>bool </em> NF_SetGlobalStartupAction("str") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_SetGlobalStartupAction", "str") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.NF_SetGlobalStartupAction(<em>string</em> str)</code></div>
	<div class="p_func"><code><em>Boolean</em>  NF_SetGlobalStartupAction(<em>String</em> str)</code></div>
	<p>Returns true if global startup action was set successfully (i.e. valid action ID). Note: For SWS / S&amp;M actions and macros / scripts, you must use identifier strings (e.g. "_SWS_ABOUT", "_f506bc780a0ab34b8fdedb67ed5d3649"), not command IDs (e.g. "47145").<br>
Tip: to copy such identifiers, right-click the action in the Actions window &gt; Copy selected action cmdID / identifier string.<br>
NOnly works for actions / scripts from Main action section.</p>
</div>

<div class="function_definition" id="NF_SetProjectStartupAction">
	<div class="c_func"><code>bool NF_SetProjectStartupAction(const char* str)</code></div>
	<div class="e_func"><code><em>bool </em> NF_SetProjectStartupAction("str") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_SetProjectStartupAction", "str") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.NF_SetProjectStartupAction(<em>string</em> str)</code></div>
	<div class="p_func"><code><em>Boolean</em>  NF_SetProjectStartupAction(<em>String</em> str)</code></div>
	<p>Returns true if project startup action was set successfully (i.e. valid action ID). Note: For SWS / S&amp;M actions and macros / scripts, you must use identifier strings (e.g. "_SWS_ABOUT", "_f506bc780a0ab34b8fdedb67ed5d3649"), not command IDs (e.g. "47145").<br>
Tip: to copy such identifiers, right-click the action in the Actions window &gt; Copy selected action cmdID / identifier string.<br>
Only works for actions / scripts from Main action section. Project must be saved after setting project startup action to be persistent.</p>
</div>

<div class="function_definition" id="NF_SetProjectTrackSelectionAction">
	<div class="c_func"><code>bool NF_SetProjectTrackSelectionAction(const char* str)</code></div>
	<div class="e_func"><code><em>bool </em> NF_SetProjectTrackSelectionAction("str") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_SetProjectTrackSelectionAction", "str") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.NF_SetProjectTrackSelectionAction(<em>string</em> str)</code></div>
	<div class="p_func"><code><em>Boolean</em>  NF_SetProjectTrackSelectionAction(<em>String</em> str)</code></div>
	<p>Returns true if project track selection action was set successfully (i.e. valid action ID). Note: For SWS / S&amp;M actions and macros / scripts, you must use identifier strings (e.g. "_SWS_ABOUT", "_f506bc780a0ab34b8fdedb67ed5d3649"), not command IDs (e.g. "47145").<br>
Tip: to copy such identifiers, right-click the action in the Actions window &gt; Copy selected action cmdID / identifier string.<br>
Only works for actions / scripts from Main action section. Project must be saved after setting project track selection action to be persistent.</p>
</div>

<div class="function_definition" id="NF_SetSWSMarkerRegionSub">
	<div class="c_func"><code>bool NF_SetSWSMarkerRegionSub(const char* markerRegionSub, int markerRegionIdx)</code></div>
	<div class="e_func"><code><em>bool </em> NF_SetSWSMarkerRegionSub("markerRegionSub", <em>int </em>markerRegionIdx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_SetSWSMarkerRegionSub", "markerRegionSub", <em>int </em>markerRegionIdx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.NF_SetSWSMarkerRegionSub(<em>string</em> markerRegionSub, <em>integer</em> markerRegionIdx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  NF_SetSWSMarkerRegionSub(<em>String</em> markerRegionSub, <em>Int</em> markerRegionIdx)</code></div>
	<p>Set SWS/S&amp;M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to <a href="#EnumProjectMarkers">EnumProjectMarkers</a> (not displayed marker/region index). Returns true if subtitle is set successfully (i.e. marker/region with specified index is present in project). Lua code example <a href="https://github.com/ReaTeam/ReaScripts-Templates/blob/master/Markers%20and%20Regions/NF_Get%20SWS%20markers%20and%20regions%20notes.lua">here</a>.</p>
</div>

<div class="function_definition" id="NF_SetSWSTrackNotes">
	<div class="c_func"><code>void NF_SetSWSTrackNotes(MediaTrack* track, const char* str)</code></div>
	<div class="e_func"><code>NF_SetSWSTrackNotes(<em>MediaTrack</em> track, "str") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("NF_SetSWSTrackNotes", <em>MediaTrack</em> track, "str") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.NF_SetSWSTrackNotes(<em>MediaTrack</em> track, <em>string</em> str)</code></div>
	<div class="p_func"><code>NF_SetSWSTrackNotes(<em>MediaTrack</em> track, <em>String</em> str)</code></div>
</div>

<div class="function_definition" id="NF_SetSWS_RMSoptions">
	<div class="c_func"><code>bool NF_SetSWS_RMSoptions(double targetLevel, double windowSize)</code></div>
	<div class="e_func"><code><em>bool </em> NF_SetSWS_RMSoptions(targetLevel, windowSize) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_SetSWS_RMSoptions", targetLevel, windowSize) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.NF_SetSWS_RMSoptions(<em>number</em> targetLevel, <em>number</em> windowSize)</code></div>
	<div class="p_func"><code><em>Boolean</em>  NF_SetSWS_RMSoptions(<em>Float</em> targetLevel, <em>Float</em> windowSize)</code></div>
	<p>Set SWS analysis/normalize options (same as running action 'SWS: Set RMS analysis/normalize options'). targetLevel: target RMS normalize level (dB), windowSize: window size for peak RMS (sec.)</p>
</div>

<div class="function_definition" id="NF_TakeFX_GetFXModuleName">
	<div class="c_func"><code>bool NF_TakeFX_GetFXModuleName(MediaItem* item, int fx, char* nameOut, int nameOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> NF_TakeFX_GetFXModuleName(<em>MediaItem</em> item, <em>int </em>fx, #name) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("NF_TakeFX_GetFXModuleName", <em>MediaItem</em> item, <em>int </em>fx, #name) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>name = reaper.NF_TakeFX_GetFXModuleName(<em>MediaItem</em> item, <em>integer</em> fx)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>MediaItem</em> item, <em>Int</em> fx, <em>String</em> nameOut, <em>Int</em> nameOut_sz) = NF_TakeFX_GetFXModuleName(item, fx, nameOut, nameOut_sz)</code></div>
	<p>Deprecated, see <a href="#TakeFX_GetNamedConfigParm">TakeFX_GetNamedConfigParm</a>/'fx_ident' (v6.37+). See <a href="#BR_TrackFX_GetFXModuleName">BR_TrackFX_GetFXModuleName</a>. fx: counted consecutively across all takes (zero-based).</p>
</div>

<div class="function_definition" id="NF_UpdateSWSMarkerRegionSubWindow">
	<div class="c_func"><code>void NF_UpdateSWSMarkerRegionSubWindow()</code></div>
	<div class="e_func"><code>NF_UpdateSWSMarkerRegionSubWindow() </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("NF_UpdateSWSMarkerRegionSubWindow") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.NF_UpdateSWSMarkerRegionSubWindow()</code></div>
	<div class="p_func"><code>NF_UpdateSWSMarkerRegionSubWindow()</code></div>
	<p>Redraw the Notes window (call if you've changed a subtitle via <a href="#NF_SetSWSMarkerRegionSub">NF_SetSWSMarkerRegionSub</a> which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)</p>
</div>

<div class="function_definition" id="NF_Win32_GetSystemMetrics">
	<div class="c_func"><code>int NF_Win32_GetSystemMetrics(int nIndex)</code></div>
	<div class="e_func"><code><em>int </em> NF_Win32_GetSystemMetrics(<em>int </em>nIndex) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("NF_Win32_GetSystemMetrics", <em>int </em>nIndex) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.NF_Win32_GetSystemMetrics(<em>integer</em> nIndex)</code></div>
	<div class="p_func"><code><em>Int</em>  NF_Win32_GetSystemMetrics(<em>Int</em> nIndex)</code></div>
	<p>Equivalent to win32 API GetSystemMetrics(). Note: Only SM_C[XY]SCREEN, SM_C[XY][HV]SCROLL and SM_CYMENU are currently supported on macOS and Linux as of REAPER 6.68. Check the <a href="https://github.com/justinfrankel/WDL/blob/main/WDL/swell">SWELL source code</a> for up-to-date support information (swell-wnd.mm, swell-wnd-generic.cpp).</p>
</div>

<div class="function_definition" id="RDNA_GetMediaSourceMetadata">
	<div class="c_func"><code>bool RDNA_GetMediaSourceMetadata(PCM_source* src, const char* metaType, const char* key, char* bufOut, int bufSize)</code></div>
	<div class="e_func"><code><em>bool </em> RDNA_GetMediaSourceMetadata(<em>PCM_source</em> src, "metaType", "key", #buf, <em>int </em>bufSize) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("RDNA_GetMediaSourceMetadata", <em>PCM_source</em> src, "metaType", "key", #buf, <em>int </em>bufSize) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>buf = reaper.RDNA_GetMediaSourceMetadata(<em>PCM_source</em> src, <em>string</em> metaType, <em>string</em> key, <em>string </em>buf, <em>integer</em> bufSize)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>PCM_source</em> src, <em>String</em> metaType, <em>String</em> key, <em>String</em> bufOut, <em>Int</em> bufSize) = RDNA_GetMediaSourceMetadata(src, metaType, key, bufOut, bufSize)</code></div>
	<p>Get the value of metadata from media source(.wav only). metaType=BWF,IXML,INFO,CART, key=MetadataID(eg.INAM,IART,... of INFO)</p>
</div>

<div class="function_definition" id="ReaPack_AboutInstalledPackage">
	<div class="c_func"><code>bool ReaPack_AboutInstalledPackage(PackageEntry* entry)</code></div>
	<div class="e_func"><code><em>bool </em> ReaPack_AboutInstalledPackage(<em>PackageEntry</em> entry) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ReaPack_AboutInstalledPackage", <em>PackageEntry</em> entry) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ReaPack_AboutInstalledPackage(<em>PackageEntry</em> entry)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ReaPack_AboutInstalledPackage(<em>PackageEntry</em> entry)</code></div>
	<p>Show the about dialog of the given package entry.<br>
The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.</p>
</div>

<div class="function_definition" id="ReaPack_AboutRepository">
	<div class="c_func"><code>bool ReaPack_AboutRepository(const char* repoName)</code></div>
	<div class="e_func"><code><em>bool </em> ReaPack_AboutRepository("repoName") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ReaPack_AboutRepository", "repoName") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ReaPack_AboutRepository(<em>string</em> repoName)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ReaPack_AboutRepository(<em>String</em> repoName)</code></div>
	<p>Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.<br>
The repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.</p>
</div>

<div class="function_definition" id="ReaPack_AddSetRepository">
	<div class="c_func"><code>bool ReaPack_AddSetRepository(const char* name, const char* url, bool enable, int autoInstall, char* errorOut, int errorOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> ReaPack_AddSetRepository("name", "url", <em>bool </em>enable, <em>int </em>autoInstall, #error) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ReaPack_AddSetRepository", "name", "url", <em>bool </em>enable, <em>int </em>autoInstall, #error) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>error = reaper.ReaPack_AddSetRepository(<em>string</em> name, <em>string</em> url, <em>boolean</em> enable, <em>integer</em> autoInstall)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> name, <em>String</em> url, <em>Boolean</em> enable, <em>Int</em> autoInstall, <em>String</em> errorOut, <em>Int</em> errorOut_sz) = ReaPack_AddSetRepository(name, url, enable, autoInstall, errorOut, errorOut_sz)</code></div>
	<p>Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call <a href="#ReaPack_ProcessQueue">ReaPack_ProcessQueue(true)</a> when done to process the new list and update the GUI.<br>
</p><p>
autoInstall: usually set to 2 (obey user setting).</p>
</div>

<div class="function_definition" id="ReaPack_BrowsePackages">
	<div class="c_func"><code>void ReaPack_BrowsePackages(const char* filter)</code></div>
	<div class="e_func"><code>ReaPack_BrowsePackages("filter") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ReaPack_BrowsePackages", "filter") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ReaPack_BrowsePackages(<em>string</em> filter)</code></div>
	<div class="p_func"><code>ReaPack_BrowsePackages(<em>String</em> filter)</code></div>
	<p>Opens the package browser with the given filter string.</p>
</div>

<div class="function_definition" id="ReaPack_CompareVersions">
	<div class="c_func"><code>int ReaPack_CompareVersions(const char* ver1, const char* ver2, char* errorOut, int errorOut_sz)</code></div>
	<div class="e_func"><code><em>int </em> ReaPack_CompareVersions("ver1", "ver2", #error) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("ReaPack_CompareVersions", "ver1", "ver2", #error) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> retval, <em>string </em>error = reaper.ReaPack_CompareVersions(<em>string</em> ver1, <em>string</em> ver2)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>String</em> ver1, <em>String</em> ver2, <em>String</em> errorOut, <em>Int</em> errorOut_sz) = ReaPack_CompareVersions(ver1, ver2, errorOut, errorOut_sz)</code></div>
	<p>Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.</p>
</div>

<div class="function_definition" id="ReaPack_EnumOwnedFiles">
	<div class="c_func"><code>bool ReaPack_EnumOwnedFiles(PackageEntry* entry, int index, char* pathOut, int pathOut_sz, int* sectionsOut, int* typeOut)</code></div>
	<div class="e_func"><code><em>bool </em> ReaPack_EnumOwnedFiles(<em>PackageEntry</em> entry, <em>int </em>index, #path, <em>int &amp;</em>sections, <em>int &amp;</em>type) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ReaPack_EnumOwnedFiles", <em>PackageEntry</em> entry, <em>int </em>index, #path, <em>int &amp;</em>sections, <em>int &amp;</em>type) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>path, <em>integer </em>sections, <em>integer </em>type = reaper.ReaPack_EnumOwnedFiles(<em>PackageEntry</em> entry, <em>integer</em> index)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>PackageEntry</em> entry, <em>Int</em> index, <em>String</em> pathOut, <em>Int</em> pathOut_sz, <em>Int</em> sectionsOut, <em>Int</em> typeOut) = ReaPack_EnumOwnedFiles(entry, index, pathOut, pathOut_sz, sectionsOut, typeOut)</code></div>
	<p>Enumerate the files owned by the given package. Returns false when there is no more data.<br>
</p><p>
sections: 0=not in action list, &amp;1=main, &amp;2=midi editor, &amp;4=midi inline editor<br>
type: see <a href="#ReaPack_GetEntryInfo">ReaPack_GetEntryInfo</a>.</p>
</div>

<div class="function_definition" id="ReaPack_FreeEntry">
	<div class="c_func"><code>bool ReaPack_FreeEntry(PackageEntry* entry)</code></div>
	<div class="e_func"><code><em>bool </em> ReaPack_FreeEntry(<em>PackageEntry</em> entry) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ReaPack_FreeEntry", <em>PackageEntry</em> entry) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.ReaPack_FreeEntry(<em>PackageEntry</em> entry)</code></div>
	<div class="p_func"><code><em>Boolean</em>  ReaPack_FreeEntry(<em>PackageEntry</em> entry)</code></div>
	<p>Free resources allocated for the given package entry.</p>
</div>

<div class="function_definition" id="ReaPack_GetEntryInfo">
	<div class="c_func"><code>bool ReaPack_GetEntryInfo(PackageEntry* entry, char* repoOut, int repoOut_sz, char* catOut, int catOut_sz, char* pkgOut, int pkgOut_sz, char* descOut, int descOut_sz, int* typeOut, char* verOut, int verOut_sz, char* authorOut, int authorOut_sz, int* flagsOut, int* fileCountOut)</code></div>
	<div class="e_func"><code><em>bool </em> ReaPack_GetEntryInfo(<em>PackageEntry</em> entry, #repo, #cat, #pkg, #desc, <em>int &amp;</em>type, #ver, #author, <em>int &amp;</em>flags, <em>int &amp;</em>fileCount) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ReaPack_GetEntryInfo", <em>PackageEntry</em> entry, #repo, #cat, #pkg, #desc, <em>int &amp;</em>type, #ver, #author, <em>int &amp;</em>flags, <em>int &amp;</em>fileCount) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>repo, <em>string </em>cat, <em>string </em>pkg, <em>string </em>desc, <em>integer </em>type, <em>string </em>ver, <em>string </em>author, <em>integer </em>flags, <em>integer </em>fileCount = reaper.ReaPack_GetEntryInfo(<em>PackageEntry</em> entry)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>PackageEntry</em> entry, <em>String</em> repoOut, <em>Int</em> repoOut_sz, <em>String</em> catOut, <em>Int</em> catOut_sz, <em>String</em> pkgOut, <em>Int</em> pkgOut_sz, <em>String</em> descOut, <em>Int</em> descOut_sz, <em>Int</em> typeOut, <em>String</em> verOut, <em>Int</em> verOut_sz, <em>String</em> authorOut, <em>Int</em> authorOut_sz, <em>Int</em> flagsOut, <em>Int</em> fileCountOut) = ReaPack_GetEntryInfo(entry, repoOut, repoOut_sz, catOut, catOut_sz, pkgOut, pkgOut_sz, descOut, descOut_sz, typeOut, verOut, verOut_sz, authorOut, authorOut_sz, flagsOut, fileCountOut)</code></div>
	<p>Get the repository name, category, package name, package description, package type, the currently installed version, author name, flags (&amp;1=Pinned, &amp;2=BleedingEdge) and how many files are owned by the given package entry.<br>
</p><p>
type: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface</p>
</div>

<div class="function_definition" id="ReaPack_GetOwner">
	<div class="c_func"><code>PackageEntry* ReaPack_GetOwner(const char* fn, char* errorOut, int errorOut_sz)</code></div>
	<div class="e_func"><code><em>PackageEntry</em>  ReaPack_GetOwner("fn", #error) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>PackageEntry</em>  extension_api("ReaPack_GetOwner", "fn", #error) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>PackageEntry</em> retval, <em>string </em>error = reaper.ReaPack_GetOwner(<em>string</em> fn)</code></div>
	<div class="p_func"><code>(<em>PackageEntry</em> retval, <em>String</em> fn, <em>String</em> errorOut, <em>Int</em> errorOut_sz) = ReaPack_GetOwner(fn, errorOut, errorOut_sz)</code></div>
	<p>Returns the package entry owning the given file.<br>
Delete the returned object from memory after use with <a href="#ReaPack_FreeEntry">ReaPack_FreeEntry</a>.</p>
</div>

<div class="function_definition" id="ReaPack_GetRepositoryInfo">
	<div class="c_func"><code>bool ReaPack_GetRepositoryInfo(const char* name, char* urlOut, int urlOut_sz, bool* enabledOut, int* autoInstallOut)</code></div>
	<div class="e_func"><code><em>bool </em> ReaPack_GetRepositoryInfo("name", #url, <em>bool &amp;</em>enabled, <em>int &amp;</em>autoInstall) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("ReaPack_GetRepositoryInfo", "name", #url, <em>bool &amp;</em>enabled, <em>int &amp;</em>autoInstall) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>url, <em>boolean </em>enabled, <em>integer </em>autoInstall = reaper.ReaPack_GetRepositoryInfo(<em>string</em> name)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> name, <em>String</em> urlOut, <em>Int</em> urlOut_sz, <em>Boolean</em> enabledOut, <em>Int</em> autoInstallOut) = ReaPack_GetRepositoryInfo(name, urlOut, urlOut_sz, enabledOut, autoInstallOut)</code></div>
	<p>Get the infos of the given repository.<br>
</p><p>
autoInstall: 0=manual, 1=when sychronizing, 2=obey user setting</p>
</div>

<div class="function_definition" id="ReaPack_ProcessQueue">
	<div class="c_func"><code>void ReaPack_ProcessQueue(bool refreshUI)</code></div>
	<div class="e_func"><code>ReaPack_ProcessQueue(<em>bool </em>refreshUI) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ReaPack_ProcessQueue", <em>bool </em>refreshUI) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ReaPack_ProcessQueue(<em>boolean</em> refreshUI)</code></div>
	<div class="p_func"><code>ReaPack_ProcessQueue(<em>Boolean</em> refreshUI)</code></div>
	<p>Run pending operations and save the configuration file. If refreshUI is true the browser and manager windows are guaranteed to be refreshed (otherwise it depends on which operations are in the queue).</p>
</div>

<div class="function_definition" id="SNM_AddReceive">
	<div class="c_func"><code>bool SNM_AddReceive(MediaTrack* src, MediaTrack* dest, int type)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_AddReceive(<em>MediaTrack</em> src, <em>MediaTrack</em> dest, <em>int </em>type) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_AddReceive", <em>MediaTrack</em> src, <em>MediaTrack</em> dest, <em>int </em>type) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_AddReceive(<em>MediaTrack</em> src, <em>MediaTrack</em> dest, <em>integer</em> type)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_AddReceive(<em>MediaTrack</em> src, <em>MediaTrack</em> dest, <em>Int</em> type)</code></div>
	<p>[S&amp;M] Deprecated, see <a href="#CreateTrackSend">CreateTrackSend</a> (v5.15pre1+). Adds a receive. Returns false if nothing updated.<br>
type -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).<br>
Note: obeys default sends preferences, supports frozen tracks, etc..</p>
</div>

<div class="function_definition" id="SNM_AddTCPFXParm">
	<div class="c_func"><code>bool SNM_AddTCPFXParm(MediaTrack* tr, int fxId, int prmId)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_AddTCPFXParm(<em>MediaTrack</em> tr, <em>int </em>fxId, <em>int </em>prmId) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_AddTCPFXParm", <em>MediaTrack</em> tr, <em>int </em>fxId, <em>int </em>prmId) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_AddTCPFXParm(<em>MediaTrack</em> tr, <em>integer</em> fxId, <em>integer</em> prmId)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_AddTCPFXParm(<em>MediaTrack</em> tr, <em>Int</em> fxId, <em>Int</em> prmId)</code></div>
	<p>[S&amp;M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)</p>
</div>

<div class="function_definition" id="SNM_CreateFastString">
	<div class="c_func"><code>WDL_FastString* SNM_CreateFastString(const char* str)</code></div>
	<div class="e_func"><code><em>WDL_FastString</em>  SNM_CreateFastString("str") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>WDL_FastString</em>  extension_api("SNM_CreateFastString", "str") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>WDL_FastString</em> reaper.SNM_CreateFastString(<em>string</em> str)</code></div>
	<div class="p_func"><code><em>WDL_FastString</em>  SNM_CreateFastString(<em>String</em> str)</code></div>
	<p>[S&amp;M] Instantiates a new "fast string". You must delete this string, see <a href="#SNM_DeleteFastString">SNM_DeleteFastString</a>.</p>
</div>

<div class="function_definition" id="SNM_DeleteFastString">
	<div class="c_func"><code>void SNM_DeleteFastString(WDL_FastString* str)</code></div>
	<div class="e_func"><code>SNM_DeleteFastString(<em>WDL_FastString</em> str) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("SNM_DeleteFastString", <em>WDL_FastString</em> str) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.SNM_DeleteFastString(<em>WDL_FastString</em> str)</code></div>
	<div class="p_func"><code>SNM_DeleteFastString(<em>WDL_FastString</em> str)</code></div>
	<p>[S&amp;M] Deletes a "fast string" instance.</p>
</div>

<div class="function_definition" id="SNM_GetDoubleConfigVar">
	<div class="c_func"><code>double SNM_GetDoubleConfigVar(const char* varname, double errvalue)</code></div>
	<div class="e_func"><code><em>double </em> SNM_GetDoubleConfigVar("varname", errvalue) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>double </em> extension_api("SNM_GetDoubleConfigVar", "varname", errvalue) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>number</em> reaper.SNM_GetDoubleConfigVar(<em>string</em> varname, <em>number</em> errvalue)</code></div>
	<div class="p_func"><code><em>Float</em>  SNM_GetDoubleConfigVar(<em>String</em> varname, <em>Float</em> errvalue)</code></div>
	<p>[S&amp;M] Returns a floating-point preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).</p>
</div>

<div class="function_definition" id="SNM_GetFastString">
	<div class="c_func"><code>const char* SNM_GetFastString(WDL_FastString* str)</code></div>
	<div class="e_func"><code>bool  SNM_GetFastString(#retval, <em>WDL_FastString</em> str) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>bool  extension_api("SNM_GetFastString", #retval, <em>WDL_FastString</em> str) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string</em> reaper.SNM_GetFastString(<em>WDL_FastString</em> str)</code></div>
	<div class="p_func"><code><em>String</em>  SNM_GetFastString(<em>WDL_FastString</em> str)</code></div>
	<p>[S&amp;M] Gets the "fast string" content.</p>
</div>

<div class="function_definition" id="SNM_GetFastStringLength">
	<div class="c_func"><code>int SNM_GetFastStringLength(WDL_FastString* str)</code></div>
	<div class="e_func"><code><em>int </em> SNM_GetFastStringLength(<em>WDL_FastString</em> str) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("SNM_GetFastStringLength", <em>WDL_FastString</em> str) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.SNM_GetFastStringLength(<em>WDL_FastString</em> str)</code></div>
	<div class="p_func"><code><em>Int</em>  SNM_GetFastStringLength(<em>WDL_FastString</em> str)</code></div>
	<p>[S&amp;M] Gets the "fast string" length.</p>
</div>

<div class="function_definition" id="SNM_GetIntConfigVar">
	<div class="c_func"><code>int SNM_GetIntConfigVar(const char* varname, int errvalue)</code></div>
	<div class="e_func"><code><em>int </em> SNM_GetIntConfigVar("varname", <em>int </em>errvalue) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("SNM_GetIntConfigVar", "varname", <em>int </em>errvalue) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.SNM_GetIntConfigVar(<em>string</em> varname, <em>integer</em> errvalue)</code></div>
	<div class="p_func"><code><em>Int</em>  SNM_GetIntConfigVar(<em>String</em> varname, <em>Int</em> errvalue)</code></div>
	<p>[S&amp;M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).</p>
</div>

<div class="function_definition" id="SNM_GetLongConfigVar">
	<div class="c_func"><code>bool SNM_GetLongConfigVar(const char* varname, int* highOut, int* lowOut)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_GetLongConfigVar("varname", <em>int &amp;</em>high, <em>int &amp;</em>low) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_GetLongConfigVar", "varname", <em>int &amp;</em>high, <em>int &amp;</em>low) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>integer </em>high, <em>integer </em>low = reaper.SNM_GetLongConfigVar(<em>string</em> varname)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> varname, <em>Int</em> highOut, <em>Int</em> lowOut) = SNM_GetLongConfigVar(varname, highOut, lowOut)</code></div>
	<p>[S&amp;M] Reads a 64-bit integer preference split in two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).</p>
</div>

<div class="function_definition" id="SNM_GetMediaItemTakeByGUID">
	<div class="c_func"><code>MediaItem_Take* SNM_GetMediaItemTakeByGUID(ReaProject* project, const char* guid)</code></div>
	<div class="e_func"><code><em>MediaItem_Take</em>  SNM_GetMediaItemTakeByGUID(<em>ReaProject</em> project, "guid") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>MediaItem_Take</em>  extension_api("SNM_GetMediaItemTakeByGUID", <em>ReaProject</em> project, "guid") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>MediaItem_Take</em> reaper.SNM_GetMediaItemTakeByGUID(<em>ReaProject</em> project, <em>string</em> guid)</code></div>
	<div class="p_func"><code><em>MediaItem_Take</em>  SNM_GetMediaItemTakeByGUID(<em>ReaProject</em> project, <em>String</em> guid)</code></div>
	<p>[S&amp;M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see <a href="#BR_GetMediaItemTakeGUID">BR_GetMediaItemTakeGUID</a></p>
</div>

<div class="function_definition" id="SNM_GetProjectMarkerName">
	<div class="c_func"><code>bool SNM_GetProjectMarkerName(ReaProject* proj, int num, bool isrgn, WDL_FastString* name)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_GetProjectMarkerName(<em>ReaProject</em> proj, <em>int </em>num, <em>bool </em>isrgn, <em>WDL_FastString</em> name) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_GetProjectMarkerName", <em>ReaProject</em> proj, <em>int </em>num, <em>bool </em>isrgn, <em>WDL_FastString</em> name) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_GetProjectMarkerName(<em>ReaProject</em> proj, <em>integer</em> num, <em>boolean</em> isrgn, <em>WDL_FastString</em> name)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_GetProjectMarkerName(<em>ReaProject</em> proj, <em>Int</em> num, <em>Boolean</em> isrgn, <em>WDL_FastString</em> name)</code></div>
	<p>[S&amp;M] Gets a marker/region name. Returns true if marker/region found.</p>
</div>

<div class="function_definition" id="SNM_GetSetObjectState">
	<div class="c_func"><code>bool SNM_GetSetObjectState(void* obj, WDL_FastString* state, bool setnewvalue, bool wantminimalstate)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_GetSetObjectState(<em>void*</em> obj, <em>WDL_FastString</em> state, <em>bool </em>setnewvalue, <em>bool </em>wantminimalstate) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_GetSetObjectState", <em>void*</em> obj, <em>WDL_FastString</em> state, <em>bool </em>setnewvalue, <em>bool </em>wantminimalstate) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_GetSetObjectState(<em>identifier</em> obj, <em>WDL_FastString</em> state, <em>boolean</em> setnewvalue, <em>boolean</em> wantminimalstate)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_GetSetObjectState(<em>void</em> obj, <em>WDL_FastString</em> state, <em>Boolean</em> setnewvalue, <em>Boolean</em> wantminimalstate)</code></div>
	<p>[S&amp;M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.<br>
When getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!<br>
Note: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.</p>
</div>

<div class="function_definition" id="SNM_GetSetSourceState">
	<div class="c_func"><code>bool SNM_GetSetSourceState(MediaItem* item, int takeidx, WDL_FastString* state, bool setnewvalue)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_GetSetSourceState(<em>MediaItem</em> item, <em>int </em>takeidx, <em>WDL_FastString</em> state, <em>bool </em>setnewvalue) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_GetSetSourceState", <em>MediaItem</em> item, <em>int </em>takeidx, <em>WDL_FastString</em> state, <em>bool </em>setnewvalue) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_GetSetSourceState(<em>MediaItem</em> item, <em>integer</em> takeidx, <em>WDL_FastString</em> state, <em>boolean</em> setnewvalue)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_GetSetSourceState(<em>MediaItem</em> item, <em>Int</em> takeidx, <em>WDL_FastString</em> state, <em>Boolean</em> setnewvalue)</code></div>
	<p>[S&amp;M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.<br>
Note: this function does not use a MediaItem_Take* param in order to manage empty takes (i.e. takes with MediaItem_Take*==NULL), see <a href="#SNM_GetSetSourceState2">SNM_GetSetSourceState2</a>.</p>
</div>

<div class="function_definition" id="SNM_GetSetSourceState2">
	<div class="c_func"><code>bool SNM_GetSetSourceState2(MediaItem_Take* take, WDL_FastString* state, bool setnewvalue)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_GetSetSourceState2(<em>MediaItem_Take</em> take, <em>WDL_FastString</em> state, <em>bool </em>setnewvalue) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_GetSetSourceState2", <em>MediaItem_Take</em> take, <em>WDL_FastString</em> state, <em>bool </em>setnewvalue) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_GetSetSourceState2(<em>MediaItem_Take</em> take, <em>WDL_FastString</em> state, <em>boolean</em> setnewvalue)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_GetSetSourceState2(<em>MediaItem_Take</em> take, <em>WDL_FastString</em> state, <em>Boolean</em> setnewvalue)</code></div>
	<p>[S&amp;M] Gets or sets a take source state. Returns false if failed.<br>
Note: this function cannot deal with empty takes, see <a href="#SNM_GetSetSourceState">SNM_GetSetSourceState</a>.</p>
</div>

<div class="function_definition" id="SNM_GetSourceType">
	<div class="c_func"><code>bool SNM_GetSourceType(MediaItem_Take* take, WDL_FastString* type)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_GetSourceType(<em>MediaItem_Take</em> take, <em>WDL_FastString</em> type) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_GetSourceType", <em>MediaItem_Take</em> take, <em>WDL_FastString</em> type) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_GetSourceType(<em>MediaItem_Take</em> take, <em>WDL_FastString</em> type)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_GetSourceType(<em>MediaItem_Take</em> take, <em>WDL_FastString</em> type)</code></div>
	<p>[S&amp;M] Deprecated, see <a href="#GetMediaSourceType">GetMediaSourceType</a>. Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)</p>
</div>

<div class="function_definition" id="SNM_MoveOrRemoveTrackFX">
	<div class="c_func"><code>bool SNM_MoveOrRemoveTrackFX(MediaTrack* tr, int fxId, int what)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_MoveOrRemoveTrackFX(<em>MediaTrack</em> tr, <em>int </em>fxId, <em>int </em>what) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_MoveOrRemoveTrackFX", <em>MediaTrack</em> tr, <em>int </em>fxId, <em>int </em>what) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_MoveOrRemoveTrackFX(<em>MediaTrack</em> tr, <em>integer</em> fxId, <em>integer</em> what)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_MoveOrRemoveTrackFX(<em>MediaTrack</em> tr, <em>Int</em> fxId, <em>Int</em> what)</code></div>
	<p>[S&amp;M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take, TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns true if tr has been updated.<br>
fxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.</p>
</div>

<div class="function_definition" id="SNM_ReadMediaFileTag">
	<div class="c_func"><code>bool SNM_ReadMediaFileTag(const char* fn, const char* tag, char* tagvalOut, int tagvalOut_sz)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_ReadMediaFileTag("fn", "tag", #tagval) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_ReadMediaFileTag", "fn", "tag", #tagval) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> retval, <em>string </em>tagval = reaper.SNM_ReadMediaFileTag(<em>string</em> fn, <em>string</em> tag)</code></div>
	<div class="p_func"><code>(<em>Boolean</em> retval, <em>String</em> fn, <em>String</em> tag, <em>String</em> tagvalOut, <em>Int</em> tagvalOut_sz) = SNM_ReadMediaFileTag(fn, tag, tagvalOut, tagvalOut_sz)</code></div>
	<p>[S&amp;M] Reads a media file tag. Supported tags: "artist", "album", "genre", "comment", "title", "track" (track number) or "year". Returns false if tag was not found. See <a href="#SNM_TagMediaFile">SNM_TagMediaFile</a>.</p>
</div>

<div class="function_definition" id="SNM_RemoveReceive">
	<div class="c_func"><code>bool SNM_RemoveReceive(MediaTrack* tr, int rcvidx)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_RemoveReceive(<em>MediaTrack</em> tr, <em>int </em>rcvidx) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_RemoveReceive", <em>MediaTrack</em> tr, <em>int </em>rcvidx) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_RemoveReceive(<em>MediaTrack</em> tr, <em>integer</em> rcvidx)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_RemoveReceive(<em>MediaTrack</em> tr, <em>Int</em> rcvidx)</code></div>
	<p>[S&amp;M] Deprecated, see <a href="#RemoveTrackSend">RemoveTrackSend</a> (v5.15pre1+). Removes a receive. Returns false if nothing updated.</p>
</div>

<div class="function_definition" id="SNM_RemoveReceivesFrom">
	<div class="c_func"><code>bool SNM_RemoveReceivesFrom(MediaTrack* tr, MediaTrack* srctr)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_RemoveReceivesFrom(<em>MediaTrack</em> tr, <em>MediaTrack</em> srctr) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_RemoveReceivesFrom", <em>MediaTrack</em> tr, <em>MediaTrack</em> srctr) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_RemoveReceivesFrom(<em>MediaTrack</em> tr, <em>MediaTrack</em> srctr)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_RemoveReceivesFrom(<em>MediaTrack</em> tr, <em>MediaTrack</em> srctr)</code></div>
	<p>[S&amp;M] Removes all receives from srctr. Returns false if nothing updated.</p>
</div>

<div class="function_definition" id="SNM_SelectResourceBookmark">
	<div class="c_func"><code>int SNM_SelectResourceBookmark(const char* name)</code></div>
	<div class="e_func"><code><em>int </em> SNM_SelectResourceBookmark("name") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("SNM_SelectResourceBookmark", "name") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.SNM_SelectResourceBookmark(<em>string</em> name)</code></div>
	<div class="p_func"><code><em>Int</em>  SNM_SelectResourceBookmark(<em>String</em> name)</code></div>
	<p>[S&amp;M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).</p>
</div>

<div class="function_definition" id="SNM_SetDoubleConfigVar">
	<div class="c_func"><code>bool SNM_SetDoubleConfigVar(const char* varname, double newvalue)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_SetDoubleConfigVar("varname", newvalue) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_SetDoubleConfigVar", "varname", newvalue) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_SetDoubleConfigVar(<em>string</em> varname, <em>number</em> newvalue)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_SetDoubleConfigVar(<em>String</em> varname, <em>Float</em> newvalue)</code></div>
	<p>[S&amp;M] Sets a floating-point preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range).</p>
</div>

<div class="function_definition" id="SNM_SetFastString">
	<div class="c_func"><code>WDL_FastString* SNM_SetFastString(WDL_FastString* str, const char* newstr)</code></div>
	<div class="e_func"><code><em>WDL_FastString</em>  SNM_SetFastString(<em>WDL_FastString</em> str, "newstr") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>WDL_FastString</em>  extension_api("SNM_SetFastString", <em>WDL_FastString</em> str, "newstr") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>WDL_FastString</em> reaper.SNM_SetFastString(<em>WDL_FastString</em> str, <em>string</em> newstr)</code></div>
	<div class="p_func"><code><em>WDL_FastString</em>  SNM_SetFastString(<em>WDL_FastString</em> str, <em>String</em> newstr)</code></div>
	<p>[S&amp;M] Sets the "fast string" content. Returns str for facility.</p>
</div>

<div class="function_definition" id="SNM_SetIntConfigVar">
	<div class="c_func"><code>bool SNM_SetIntConfigVar(const char* varname, int newvalue)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_SetIntConfigVar("varname", <em>int </em>newvalue) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_SetIntConfigVar", "varname", <em>int </em>newvalue) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_SetIntConfigVar(<em>string</em> varname, <em>integer</em> newvalue)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_SetIntConfigVar(<em>String</em> varname, <em>Int</em> newvalue)</code></div>
	<p>[S&amp;M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range).</p>
</div>

<div class="function_definition" id="SNM_SetLongConfigVar">
	<div class="c_func"><code>bool SNM_SetLongConfigVar(const char* varname, int newHighValue, int newLowValue)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_SetLongConfigVar("varname", <em>int </em>newHighValue, <em>int </em>newLowValue) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_SetLongConfigVar", "varname", <em>int </em>newHighValue, <em>int </em>newLowValue) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_SetLongConfigVar(<em>string</em> varname, <em>integer</em> newHighValue, <em>integer</em> newLowValue)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_SetLongConfigVar(<em>String</em> varname, <em>Int</em> newHighValue, <em>Int</em> newLowValue)</code></div>
	<p>[S&amp;M] Sets a 64-bit integer preference from two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).</p>
</div>

<div class="function_definition" id="SNM_SetProjectMarker">
	<div class="c_func"><code>bool SNM_SetProjectMarker(ReaProject* proj, int num, bool isrgn, double pos, double rgnend, const char* name, int color)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_SetProjectMarker(<em>ReaProject</em> proj, <em>int </em>num, <em>bool </em>isrgn, pos, rgnend, "name", <em>int </em>color) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_SetProjectMarker", <em>ReaProject</em> proj, <em>int </em>num, <em>bool </em>isrgn, pos, rgnend, "name", <em>int </em>color) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_SetProjectMarker(<em>ReaProject</em> proj, <em>integer</em> num, <em>boolean</em> isrgn, <em>number</em> pos, <em>number</em> rgnend, <em>string</em> name, <em>integer</em> color)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_SetProjectMarker(<em>ReaProject</em> proj, <em>Int</em> num, <em>Boolean</em> isrgn, <em>Float</em> pos, <em>Float</em> rgnend, <em>String</em> name, <em>Int</em> color)</code></div>
	<p>[S&amp;M] Deprecated, see <a href="#SetProjectMarker4">SetProjectMarker4</a> -- Same function as SetProjectMarker3() except it can set empty names "".</p>
</div>

<div class="function_definition" id="SNM_SetStringConfigVar">
	<div class="c_func"><code>bool SNM_SetStringConfigVar(const char* varname, const char* newvalue)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_SetStringConfigVar("varname", "newvalue") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_SetStringConfigVar", "varname", "newvalue") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_SetStringConfigVar(<em>string</em> varname, <em>string</em> newvalue)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_SetStringConfigVar(<em>String</em> varname, <em>String</em> newvalue)</code></div>
	<p>[S&amp;M] Sets a string preference (general prefs only). Returns false if failed (e.g. varname not found or value too long). See <a href="#get_config_var_string">get_config_var_string</a>.</p>
</div>

<div class="function_definition" id="SNM_TagMediaFile">
	<div class="c_func"><code>bool SNM_TagMediaFile(const char* fn, const char* tag, const char* tagval)</code></div>
	<div class="e_func"><code><em>bool </em> SNM_TagMediaFile("fn", "tag", "tagval") </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>bool </em> extension_api("SNM_TagMediaFile", "fn", "tag", "tagval") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>boolean</em> reaper.SNM_TagMediaFile(<em>string</em> fn, <em>string</em> tag, <em>string</em> tagval)</code></div>
	<div class="p_func"><code><em>Boolean</em>  SNM_TagMediaFile(<em>String</em> fn, <em>String</em> tag, <em>String</em> tagval)</code></div>
	<p>[S&amp;M] Tags a media file thanks to <a href="https://taglib.github.io">TagLib</a>. Supported tags: "artist", "album", "genre", "comment", "title", "track" (track number) or "year". Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See <a href="#SNM_ReadMediaFileTag">SNM_ReadMediaFileTag</a>.</p>
</div>

<div class="function_definition" id="SNM_TieResourceSlotActions">
	<div class="c_func"><code>void SNM_TieResourceSlotActions(int bookmarkId)</code></div>
	<div class="e_func"><code>SNM_TieResourceSlotActions(<em>int </em>bookmarkId) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("SNM_TieResourceSlotActions", <em>int </em>bookmarkId) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.SNM_TieResourceSlotActions(<em>integer</em> bookmarkId)</code></div>
	<div class="p_func"><code>SNM_TieResourceSlotActions(<em>Int</em> bookmarkId)</code></div>
	<p>[S&amp;M] Attach Resources slot actions to a given bookmark.</p>
</div>

<div class="function_definition" id="SN_FocusMIDIEditor">
	<div class="c_func"><code>void SN_FocusMIDIEditor()</code></div>
	<div class="e_func"><code>SN_FocusMIDIEditor() </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("SN_FocusMIDIEditor") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.SN_FocusMIDIEditor()</code></div>
	<div class="p_func"><code>SN_FocusMIDIEditor()</code></div>
	<p>Focuses the active/open MIDI editor.</p>
</div>

<div class="function_definition" id="ULT_GetMediaItemNote">
	<div class="c_func"><code>const char* ULT_GetMediaItemNote(MediaItem* item)</code></div>
	<div class="e_func"><code>bool  ULT_GetMediaItemNote(#retval, <em>MediaItem</em> item) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>bool  extension_api("ULT_GetMediaItemNote", #retval, <em>MediaItem</em> item) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>string</em> reaper.ULT_GetMediaItemNote(<em>MediaItem</em> item)</code></div>
	<div class="p_func"><code><em>String</em>  ULT_GetMediaItemNote(<em>MediaItem</em> item)</code></div>
	<p>[ULT] Deprecated, see <a href="#GetSetMediaItemInfo_String">GetSetMediaItemInfo_String</a> (v5.95+). Get item notes.</p>
</div>

<div class="function_definition" id="ULT_SetMediaItemNote">
	<div class="c_func"><code>void ULT_SetMediaItemNote(MediaItem* item, const char* note)</code></div>
	<div class="e_func"><code>ULT_SetMediaItemNote(<em>MediaItem</em> item, "note") </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("ULT_SetMediaItemNote", <em>MediaItem</em> item, "note") </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.ULT_SetMediaItemNote(<em>MediaItem</em> item, <em>string</em> note)</code></div>
	<div class="p_func"><code>ULT_SetMediaItemNote(<em>MediaItem</em> item, <em>String</em> note)</code></div>
	<p>[ULT] Deprecated, see <a href="#GetSetMediaItemInfo_String">GetSetMediaItemInfo_String</a> (v5.95+). Set item notes.</p>
</div>

<div class="function_definition" id="Xen_AudioWriter_Create">
	<div class="c_func"><code>AudioWriter* Xen_AudioWriter_Create(const char* filename, int numchans, int samplerate)</code></div>
	<div class="e_func"><code><em>AudioWriter</em>  Xen_AudioWriter_Create("filename", <em>int </em>numchans, <em>int </em>samplerate) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>AudioWriter</em>  extension_api("Xen_AudioWriter_Create", "filename", <em>int </em>numchans, <em>int </em>samplerate) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>AudioWriter</em> reaper.Xen_AudioWriter_Create(<em>string</em> filename, <em>integer</em> numchans, <em>integer</em> samplerate)</code></div>
	<div class="p_func"><code><em>AudioWriter</em>  Xen_AudioWriter_Create(<em>String</em> filename, <em>Int</em> numchans, <em>Int</em> samplerate)</code></div>
	<p>Creates writer for 32 bit floating point WAV</p>
</div>

<div class="function_definition" id="Xen_AudioWriter_Destroy">
	<div class="c_func"><code>void Xen_AudioWriter_Destroy(AudioWriter* writer)</code></div>
	<div class="e_func"><code>Xen_AudioWriter_Destroy(<em>AudioWriter</em> writer) </code><span>(requires REAPER 6.24 or later)</span><br>
<code>extension_api("Xen_AudioWriter_Destroy", <em>AudioWriter</em> writer) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code>reaper.Xen_AudioWriter_Destroy(<em>AudioWriter</em> writer)</code></div>
	<div class="p_func"><code>Xen_AudioWriter_Destroy(<em>AudioWriter</em> writer)</code></div>
	<p>Destroys writer</p>
</div>

<div class="function_definition" id="Xen_AudioWriter_Write">
	<div class="c_func"><code>int Xen_AudioWriter_Write(AudioWriter* writer, int numframes, void* data, int offset)</code></div>
	<div class="e_func"><code><em>int </em> Xen_AudioWriter_Write(<em>AudioWriter</em> writer, <em>int </em>numframes, <em>void*</em> data, <em>int </em>offset) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("Xen_AudioWriter_Write", <em>AudioWriter</em> writer, <em>int </em>numframes, <em>void*</em> data, <em>int </em>offset) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.Xen_AudioWriter_Write(<em>AudioWriter</em> writer, <em>integer</em> numframes, <em>identifier</em> data, <em>integer</em> offset)</code></div>
	<div class="p_func"><code><em>Int</em>  Xen_AudioWriter_Write(<em>AudioWriter</em> writer, <em>Int</em> numframes, <em>void</em> data, <em>Int</em> offset)</code></div>
	<p>Write interleaved audio data to disk</p>
</div>

<div class="function_definition" id="Xen_GetMediaSourceSamples">
	<div class="c_func"><code>int Xen_GetMediaSourceSamples(PCM_source* src, void* destbuf, int destbufoffset, int numframes, int numchans, double samplerate, double sourceposition)</code></div>
	<div class="e_func"><code><em>int </em> Xen_GetMediaSourceSamples(<em>PCM_source</em> src, <em>void*</em> destbuf, <em>int </em>destbufoffset, <em>int </em>numframes, <em>int </em>numchans, samplerate, sourceposition) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("Xen_GetMediaSourceSamples", <em>PCM_source</em> src, <em>void*</em> destbuf, <em>int </em>destbufoffset, <em>int </em>numframes, <em>int </em>numchans, samplerate, sourceposition) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.Xen_GetMediaSourceSamples(<em>PCM_source</em> src, <em>identifier</em> destbuf, <em>integer</em> destbufoffset, <em>integer</em> numframes, <em>integer</em> numchans, <em>number</em> samplerate, <em>number</em> sourceposition)</code></div>
	<div class="p_func"><code><em>Int</em>  Xen_GetMediaSourceSamples(<em>PCM_source</em> src, <em>void</em> destbuf, <em>Int</em> destbufoffset, <em>Int</em> numframes, <em>Int</em> numchans, <em>Float</em> samplerate, <em>Float</em> sourceposition)</code></div>
	<p>Get interleaved audio data from media source</p>
</div>

<div class="function_definition" id="Xen_StartSourcePreview">
	<div class="c_func"><code>int Xen_StartSourcePreview(PCM_source* source, double gain, bool loop, int* outputchanindexInOptional)</code></div>
	<div class="e_func"><code><em>int </em> Xen_StartSourcePreview(<em>PCM_source</em> source, gain, <em>bool </em>loop, <em>optional int</em> outputchanindexIn) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("Xen_StartSourcePreview", <em>PCM_source</em> source, gain, <em>bool </em>loop, <em>optional int</em> outputchanindexIn) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.Xen_StartSourcePreview(<em>PCM_source</em> source, <em>number</em> gain, <em>boolean</em> loop, <em>optional integer</em> outputchanindexIn)</code></div>
	<div class="p_func"><code>(<em>Int</em> retval, <em>PCM_source</em> source, <em>Float</em> gain, <em>Boolean</em> loop, <em>Int</em> outputchanindexInOptional) = Xen_StartSourcePreview(source, gain, loop, outputchanindexInOptional)</code></div>
	<p>Start audio preview of a PCM_source. Returns id of a preview handle that can be provided to Xen_StopSourcePreview.<br>
If the given PCM_source does not belong to an existing MediaItem/Take, it will be deleted by the preview system when the preview is stopped.</p>
</div>

<div class="function_definition" id="Xen_StopSourcePreview">
	<div class="c_func"><code>int Xen_StopSourcePreview(int preview_id)</code></div>
	<div class="e_func"><code><em>int </em> Xen_StopSourcePreview(<em>int </em>preview_id) </code><span>(requires REAPER 6.24 or later)</span><br>
<code><em>int </em> extension_api("Xen_StopSourcePreview", <em>int </em>preview_id) </code><span>(legacy syntax, also useful for allowing script to run when third-party extension is not installed)</span><br></div>
	<div class="l_func"><code><em>integer</em> reaper.Xen_StopSourcePreview(<em>integer</em> preview_id)</code></div>
	<div class="p_func"><code><em>Int</em>  Xen_StopSourcePreview(<em>Int</em> preview_id)</code></div>
	<p>Stop audio preview. id -1 stops all.</p>
</div>
    </section><!-- end of #all_funcs"-->

    <section class="eel" id="e_funcs">
      <h2>ReaScript/EEL Built-in Function List</h2>

<div class="function_definition" id="eel_abs">
	<div class="e_func"><code>abs(value)</code></div>
	<p>Returns the absolute value of the parameter.</p>
</div>

<div class="function_definition" id="eel_acos">
	<div class="e_func"><code>acos(value)</code></div>
	<p>Returns the arc cosine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.</p>
</div>

<div class="function_definition" id="eel_asin">
	<div class="e_func"><code>asin(value)</code></div>
	<p>Returns the arc sine of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.</p>
</div>

<div class="function_definition" id="eel_atan">
	<div class="e_func"><code>atan(value)</code></div>
	<p>Returns the arc tangent of the value specified (return value is in radians). If the parameter is not between -1.0 and 1.0 inclusive, the return value is undefined.</p>
</div>

<div class="function_definition" id="eel_atan2">
	<div class="e_func"><code>atan2(numerator,denominator)</code></div>
	<p>Returns the arc tangent of the numerator divided by the denominator, allowing the denominator to be 0, and using their signs to produce a more meaningful result.</p>
</div>

<div class="function_definition" id="eel_atexit">
	<div class="e_func"><code>atexit("code")</code></div>
	<p>Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.</p>
</div>

<div class="function_definition" id="eel_ceil">
	<div class="e_func"><code>ceil(value)</code></div>
	<p>Returns the value rounded to the next highest integer (ceil(3.1)==4, ceil(-3.9)==-3).</p>
</div>

<div class="function_definition" id="eel_convolve_c">
	<div class="e_func"><code>convolve_c(dest,src,size)</code></div>
	<p>Multiplies each of size complex pairs in dest by the complex pairs in src. Often used for convolution.</p>
</div>

<div class="function_definition" id="eel_cos">
	<div class="e_func"><code>cos(angle)</code></div>
	<p>Returns the cosine of the angle specified (specified in radians).</p>
</div>

<div class="function_definition" id="eel_defer">
	<div class="e_func"><code>defer("code")</code></div>
	<p>Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().<br>Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.</p>
</div>

<div class="function_definition" id="eel_eval">
	<div class="e_func"><code>eval("code")</code></div>
	<p>Executes code passed in. Code can use functions, but functions created in code can't be used elsewhere.</p>
</div>

<div class="function_definition" id="eel_exp">
	<div class="e_func"><code>exp(exponent)</code></div>
	<p>Returns the number e ($e, approximately 2.718) raised to the parameter-th power. This function is significantly faster than pow() or the ^ operator.</p>
</div>

<div class="function_definition" id="eel_extension_api">
	<div class="e_func"><code>extension_api("function_name"[,...])</code></div>
	<p>Used to call functions exported by extension plugins. The first parameter must be the exported function name, then its own parameters (as if the function was called directly).</p>
</div>

<div class="function_definition" id="eel_fclose">
	<div class="e_func"><code>fclose(fp)</code></div>
	<p>Closes a file previously opened with fopen().</p>
</div>

<div class="function_definition" id="eel_feof">
	<div class="e_func"><code>feof(fp)</code></div>
	<p>Returns nonzero if the file fp is at the end of file.</p>
</div>

<div class="function_definition" id="eel_fflush">
	<div class="e_func"><code>fflush(fp)</code></div>
	<p>If file fp is open for writing, flushes out any buffered data to disk.</p>
</div>

<div class="function_definition" id="eel_fft">
	<div class="e_func"><code>fft(buffer,size)</code></div>
	<p>Performs a FFT on the data in the local memory buffer at the offset specified by the first parameter. The size of the FFT is specified by the second parameter, which must be 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, or 32768. The outputs are permuted, so if you plan to use them in-order, call fft_permute(buffer, size) before and fft_ipermute(buffer,size) after your in-order use. Your inputs or outputs will need to be scaled down by 1/size, if used.<br>Note that fft()/ifft() require real / imaginary input pairs, so a 256 point FFT actually works with 512 items.<br>Note that fft()/ifft() must NOT cross a 65,536 item boundary, so be sure to specify the offset accordingly.</p>
</div>

<div class="function_definition" id="eel_fft_ipermute">
	<div class="e_func"><code>fft_ipermute(buffer,size)</code></div>
	<p>Permute the input for ifft(), taking bands from in-order to the order ifft() requires. See <a href="#fft">fft</a>() for more information.</p>
</div>

<div class="function_definition" id="eel_fft_permute">
	<div class="e_func"><code>fft_permute(buffer,size)</code></div>
	<p>Permute the output of fft() to have bands in-order. See <a href="#fft">fft</a>() for more information.</p>
</div>

<div class="function_definition" id="eel_fft_real">
	<div class="e_func"><code>fft_real(buffer,size)</code></div>
	<p>Performs an FFT, but takes size input samples and produces size/2 complex output pairs. Usually used along with fft_permute(size/2). Inputs/outputs will need to be scaled by 0.5/size.</p>
</div>

<div class="function_definition" id="eel_fgetc">
	<div class="e_func"><code>fgetc(fp)</code></div>
	<p>Reads a character from file fp, returns -1 if EOF.</p>
</div>

<div class="function_definition" id="eel_fgets">
	<div class="e_func"><code>fgets(fp,#str)</code></div>
	<p>Reads a line from file fp into #str. Returns length of #str read.</p>
</div>

<div class="function_definition" id="eel_floor">
	<div class="e_func"><code>floor(value)</code></div>
	<p>Returns the value rounded to the next lowest integer (floor(3.9)==3, floor(-3.1)==-4).</p>
</div>

<div class="function_definition" id="eel_fopen">
	<div class="e_func"><code>fopen("fn","mode")</code></div>
	<p>Opens a file "fn" with mode "mode". For read, use "r" or "rb", write "w" or "wb". Returns a positive integer on success.</p>
</div>

<div class="function_definition" id="eel_fprintf">
	<div class="e_func"><code>fprintf(fp,"format"[,...])</code></div>
	<p>Formats a string and writes it to file fp. For more information on format specifiers, see <a href="#sprintf">sprintf</a>(). Returns bytes written to file.</p>
</div>

<div class="function_definition" id="eel_fread">
	<div class="e_func"><code>fread(fp,#str,length)</code></div>
	<p>Reads from file fp into #str, up to length bytes. Returns actual length read, or negative if error.</p>
</div>

<div class="function_definition" id="eel_freembuf">
	<div class="e_func"><code>freembuf(address)</code></div>
	<p>Hints the runtime that memory above the address specified may no longer be used. The runtime may, at its leisure, choose to lose the contents of memory above the address specified.</p>
</div>

<div class="function_definition" id="eel_fseek">
	<div class="e_func"><code>fseek(fp,offset,whence)</code></div>
	<p>Seeks file fp, offset bytes from whence reference. Whence negative specifies start of file, positive whence specifies end of file, and zero whence specifies current file position.</p>
</div>

<div class="function_definition" id="eel_ftell">
	<div class="e_func"><code>ftell(fp)</code></div>
	<p>Retunrs the current file position.</p>
</div>

<div class="function_definition" id="eel_fwrite">
	<div class="e_func"><code>fwrite(fp,#str,len)</code></div>
	<p>Writes up to len characters of #str to file fp. If len is less than 1, the full contents of #str will be written. Returns the number of bytes written to file.</p>
</div>

<div class="function_definition" id="eel_get_action_context">
	<div class="e_func"><code>get_action_context(#filename,sectionID,cmdID,mode,resolution,val,contextstr)</code></div>
	<p>Queries contextual information about the script, typically MIDI/OSC input values.<br>Returns true if a new value has been updated.<br>val will be set to a relative or absolute value depending on mode (=0: absolute mode, &gt;0: relative modes).<br>resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.<br>sectionID, and cmdID will be set to -1 if the script is not part of the action list.<br>mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.<br>contextstr may be empty or one of:
	<ul>  
		<li>midi:XX[:YY] (one or two bytes hex)</li>
		<li>[wheel|hwheel|mtvert|mthorz|mtzoom|mtrot|mediakbd]:flags</li>
		<li>key:flags:keycode</li>
		<li>osc:/msg[:f=FloatValue|:s=StringValue]</li>
		<li>KBD_OnMainActionEx
	</ul>
<p>(flags may include V=virtkey, S=shift, A=alt/option, C=control/command, W=win/control)</p>


</div>

<div class="function_definition" id="eel_gfx_variables">
	<div class="e_func"><code>gfx VARIABLES</code></div>
	<p>The following global variables are special and will be used by the graphics system:</p>
	<ul>
		<li>gfx_r - current red component (0..1) used by drawing operations.</li>
		<li>gfx_g - current green component (0..1) used by drawing operations.</li>
		<li>gfx_b - current blue component (0..1) used by drawing operations.</li>
		<li>gfx_a2 - current alpha component (0..1) used by drawing operations when writing solid colors (normally ignored but useful when creating transparent images).</li>
		<li>gfx_a - alpha for drawing (1=normal).</li>
		<li>gfx_mode - blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx_a to negative and use gfx_mode as additive). Add 2.0 to disable source alpha for gfx_blit(). Add 4.0 to disable filtering for gfx_blit(). </li>
		<li>gfx_w - width of the UI framebuffer. </li>
		<li>gfx_h - height of the UI framebuffer. </li>
		<li>gfx_x - current graphics position X. Some drawing functions use as start position and update. </li>
		<li>gfx_y - current graphics position Y. Some drawing functions use as start position and update. </li>
		<li>gfx_clear - if greater than -1.0, framebuffer will be cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). </li>
		<li>gfx_dest - destination for drawing operations, -1 is main framebuffer, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).</li>
		<li>gfx_texth - the (READ-ONLY) height of a line of text in the current font. Do not modify this variable.</li>
		<li>gfx_ext_retina - to support hidpi/retina, callers should set to 1.0 on initialization, this value will be updated to value greater than 1.0 (such as 2.0) if retina/hidpi. On macOS gfx_w/gfx_h/etc will be doubled, but on other systems gfx_w/gfx_h will remain the same and gfx_ext_retina is a scaling hint for drawing.</li>
		<li>mouse_x - current X coordinate of the mouse relative to the graphics window.</li>
		<li>mouse_y - current Y coordinate of the mouse relative to the graphics window.</li>
		<li>mouse_wheel - wheel position, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.</li>
		<li>mouse_hwheel - horizontal wheel positions, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.</li>
		<li>mouse_cap - a bitfield of mouse and keyboard modifier state. Note that a script must call gfx_getchar() at least once in order to get modifier state when the mouse is not captured by the window. Bitfield bits:
	<ul>
		<li>1: left mouse button</li>
		<li>2: right mouse button</li>
		<li>4: Control key</li>
		<li>8: Shift key</li>
		<li>16: Alt key</li>
		<li>32: Windows key</li>
		<li>64: middle mouse button</li>
	</ul></li>
	</ul>

</div>

<div class="function_definition" id="eel_gfx_arc">
	<div class="e_func"><code>gfx_arc(x,y,r,ang1,ang2[,antialias])</code></div>
	<p>Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.</p>
</div>

<div class="function_definition" id="eel_gfx_blit">
	<div class="e_func"><code>gfx_blit(source[, scale, rotation, srcx, srcy, srcw, srch, destx, desty, destw, desth, rotxoffs, rotyoffs])</code></div>
	<p>Copies from source (-1 = main framebuffer, or an image from gfx_loadimg() etc), using current opacity and copy mode (set with gfx_a, gfx_mode).<br>If destx/desty are not specified, gfx_x/gfx_y will be used as the destination position.<br>scale (1.0 is unscaled) will be used only if destw/desth are not specified.<br>rotation is an angle in radians<br>srcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size)<br>destx/desty/destw/desth specify destination rectangle (if not specified destw/desth default to srcw/srch * scale).</p>
</div>

<div class="function_definition" id="eel_gfx_blitext">
	<div class="e_func"><code>gfx_blitext(source,coordinatelist,rotation)</code></div>
	<p>Deprecated, use gfx_blit instead.</p>
</div>

<div class="function_definition" id="eel_gfx_blurto">
	<div class="e_func"><code>gfx_blurto(x,y)</code></div>
	<p>Blurs the region of the screen between gfx_x,gfx_y and x,y, and updates gfx_x,gfx_y to x,y.</p>
</div>

<div class="function_definition" id="eel_gfx_circle">
	<div class="e_func"><code>gfx_circle(x,y,r[,fill,antialias])</code></div>
	<p>Draws a circle, optionally filling/antialiasing.</p>
</div>

<div class="function_definition" id="eel_gfx_clienttoscreen">
	<div class="e_func"><code>gfx_clienttoscreen(x,y)</code></div>
	<p>Converts client coordinates x,y to screen coordinates.</p>
</div>

<div class="function_definition" id="eel_gfx_deltablit">
	<div class="e_func"><code>gfx_deltablit(srcimg,srcs,srct,srcw,srch,destx,desty,destw,desth,dsdx,dtdx,dsdy,dtdy,dsdxdy,dtdxdy[,usecliprect=1])</code></div>
	<p>Blits from srcimg(srcx,srcy,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.</p>
</div>

<div class="function_definition" id="eel_gfx_dock">
	<div class="e_func"><code>gfx_dock(v[,wx,wy,ww,wh])</code></div>
	<p>Call with v=-1 to query docked state, otherwise v&gt;=0 to set docked state. State is &amp;1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh are specified, they will be filled with the undocked window position/size</p>
</div>

<div class="function_definition" id="eel_gfx_drawchar">
	<div class="e_func"><code>gfx_drawchar(char)</code></div>
	<p>Draws the character (can be a numeric ASCII code as well), to gfx_x, gfx_y, and moves gfx_x over by the size of the character.</p>
</div>

<div class="function_definition" id="eel_gfx_drawnumber">
	<div class="e_func"><code>gfx_drawnumber(n,ndigits)</code></div>
	<p>Draws the number n with ndigits of precision to gfx_x, gfx_y, and updates gfx_x to the right side of the drawing. The text height is gfx_texth.</p>
</div>

<div class="function_definition" id="eel_gfx_drawstr">
	<div class="e_func"><code>gfx_drawstr("str"[,flags,right,bottom])</code></div>
	<p>Draws a string at gfx_x, gfx_y, and updates gfx_x/gfx_y so that subsequent draws will occur in a similar place.</p><p>If flags, right ,bottom passed in:</p><ul>
		<li>flags&amp;1: center horizontally</li>
		<li>flags&amp;2: right justify</li>
		<li>flags&amp;4: center vertically</li>
		<li>flags&amp;8: bottom justify</li>
		<li>flags&amp;256: ignore right/bottom, otherwise text is clipped to (gfx_x, gfx_y, right, bottom\)</li>
	</ul>

</div>

<div class="function_definition" id="eel_gfx_getchar">
	<div class="e_func"><code>gfx_getchar([char, unichar])</code></div>
	<p>If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed. Note that calling gfx_getchar() at least once causes mouse_cap to reflect keyboard modifiers even when the mouse is not captured.Common values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'. Modified and special keys can also be returned, including:</p>
	<ul>
		<li>Ctrl/Cmd+A..Ctrl+Z as 1..26</li>
		<li>Ctrl/Cmd+Alt+A..Z as 257..282</li>
		<li>Alt+A..Z as 'A'+256..'Z'+256</li>
		<li>27 for ESC</li>
		<li>13 for Enter</li>
		<li>' ' for space</li>
		<li>65536 for query of special flags, returns: &amp;1 (supported), &amp;2=window has focus, &amp;4=window is visible</li>
		<li>If unichar is specified, it will be set to the unicode value of the key if available (and the return value may be the unicode value or a raw key value as described above, depending). If unichar is not specified, unicode codepoints greater than 255 will be returned as 'u'&lt;&lt;24 + value</li>
	</ul>

</div>

<div class="function_definition" id="eel_gfx_getdropfile">
	<div class="e_func"><code>gfx_getdropfile(idx[,#str])</code></div>
	<p>Enumerates any drag/dropped files. call gfx_dropfile(-1) to clear the list when finished. Returns 1 if idx is valid, 0 if idx is out of range.</p>
</div>

<div class="function_definition" id="eel_gfx_getfont">
	<div class="e_func"><code>gfx_getfont([#str])</code></div>
	<p>Returns current font index. If a string is passed, it will receive the actual font face used by this font, if available.</p>
</div>

<div class="function_definition" id="eel_gfx_getimgdim">
	<div class="e_func"><code>gfx_getimgdim(image,w,h)</code></div>
	<p>Retreives the dimensions of image (representing a filename: index number) into w and h. Sets these values to 0 if an image failed loading (or if the filename index is invalid).</p>
</div>

<div class="function_definition" id="eel_gfx_getpixel">
	<div class="e_func"><code>gfx_getpixel(r,g,b)</code></div>
	<p>Gets the value of the pixel at gfx_x,gfx_y into r,g,b.</p>
</div>

<div class="function_definition" id="eel_gfx_gradrect">
	<div class="e_func"><code>gfx_gradrect(x,y,w,h, r,g,b,a[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady])</code></div>
	<p>Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.</p>
</div>

<div class="function_definition" id="eel_gfx_init">
	<div class="e_func"><code>gfx_init("name"[,width,height,dockstate,xpos,ypos])</code></div>
	<p>Initializes the graphics window with title name. Suggested width and height can be specified. If window is already open, a non-empty name will re-title window, or an empty title will resize window.</p><p>Once the graphics window is open, gfx_update() should be called periodically.</p>
</div>

<div class="function_definition" id="eel_gfx_line">
	<div class="e_func"><code>gfx_line(x,y,x2,y2[,aa])</code></div>
	<p>Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased.</p>
</div>

<div class="function_definition" id="eel_gfx_lineto">
	<div class="e_func"><code>gfx_lineto(x,y[,aa])</code></div>
	<p>Draws a line from gfx_x,gfx_y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx_x and gfx_y to x,y.</p>
</div>

<div class="function_definition" id="eel_gfx_loadimg">
	<div class="e_func"><code>gfx_loadimg(image,"filename")</code></div>
	<p>Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file.</p>
</div>

<div class="function_definition" id="eel_gfx_measurechar">
	<div class="e_func"><code>gfx_measurechar(character,&amp;w,&amp;h)</code></div>
	<p>Measures the drawing dimensions of a character with the current font (as set by gfx_setfont).</p>
</div>

<div class="function_definition" id="eel_gfx_measurestr">
	<div class="e_func"><code>gfx_measurestr("str",&amp;w,&amp;h)</code></div>
	<p>Measures the drawing dimensions of a string with the current font (as set by gfx_setfont).</p>
</div>

<div class="function_definition" id="eel_gfx_muladdrect">
	<div class="e_func"><code>gfx_muladdrect(x,y,w,h,mul_r,mul_g,mul_b[,mul_a,add_r,add_g,add_b,add_a])</code></div>
	<p>Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.</p>
</div>

<div class="function_definition" id="eel_gfx_printf">
	<div class="e_func"><code>gfx_printf("format"[, ...])</code></div>
	<p>Formats and draws a string at gfx_x, gfx_y, and updates gfx_x/gfx_y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see <a href="#sprintf">sprintf</a>()</p>
</div>

<div class="function_definition" id="eel_gfx_quit">
	<div class="e_func"><code>gfx_quit()</code></div>
	<p>Closes the graphics window.</p>
</div>

<div class="function_definition" id="eel_gfx_rect">
	<div class="e_func"><code>gfx_rect(x,y,w,h[,filled])</code></div>
	<p>Fills a rectangle at x,y, w,h pixels in dimension, filled by default.</p>
</div>

<div class="function_definition" id="eel_gfx_rectto">
	<div class="e_func"><code>gfx_rectto(x,y)</code></div>
	<p>Fills a rectangle from gfx_x,gfx_y to x,y. Updates gfx_x,gfx_y to x,y.</p>
</div>

<div class="function_definition" id="eel_gfx_roundrect">
	<div class="e_func"><code>gfx_roundrect(x,y,w,h,radius[,antialias])</code></div>
	<p>Draws a rectangle with rounded corners.</p>
</div>

<div class="function_definition" id="eel_gfx_screentoclient">
	<div class="e_func"><code>gfx_screentoclient(x,y)</code></div>
	<p>Converts screen coordinates x,y to client coordinates.</p>
</div>

<div class="function_definition" id="eel_gfx_set">
	<div class="e_func"><code>gfx_set(r[,g,b,a,mode,dest,a2])</code></div>
	<p>Sets gfx_r/gfx_g/gfx_b/gfx_a/gfx_mode/gfx_a2, sets gfx_dest if final parameter specified</p>
</div>

<div class="function_definition" id="eel_gfx_setcursor">
	<div class="e_func"><code>gfx_setcursor(resource_id,custom_cursor_name)</code></div>
	<p>Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like "arrow" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.</p>
</div>

<div class="function_definition" id="eel_gfx_setfont">
	<div class="e_func"><code>gfx_setfont(idx[,"fontface", sz, flags])</code></div>
	<p>Can select a font and optionally configure it. idx=0 for default bitmapped font, no configuration is possible for this font. idx=1..16 for a configurable font, specify fontface such as "Arial", sz of 8-100, and optionally specify flags, which is a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. These flags may or may not be supported depending on the font and OS. After calling gfx_setfont(), gfx_texth may be updated to reflect the new average line height.</p>
</div>

<div class="function_definition" id="eel_gfx_setimgdim">
	<div class="e_func"><code>gfx_setimgdim(image,w,h)</code></div>
	<p>Resize image referenced by index 0..1024-1, width and height must be 0-8192. The contents of the image will be undefined after the resize.</p>
</div>

<div class="function_definition" id="eel_gfx_setpixel">
	<div class="e_func"><code>gfx_setpixel(r,g,b)</code></div>
	<p>Writes a pixel of r,g,b to gfx_x,gfx_y.</p>
</div>

<div class="function_definition" id="eel_gfx_showmenu">
	<div class="e_func"><code>gfx_showmenu("str")</code></div>
	<p>Shows a popup menu at gfx_x,gfx_y. str is a list of fields separated by | characters. Each field represents a menu item.<br>Fields can start with special characters:</p><p># : grayed out<br>! : checked<br>&gt; : this menu item shows a submenu<br>&lt; : last item in the current submenu</p><p>An empty field will appear as a separator in the menu. gfx_showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.<br>Example:</p><p>gfx_showmenu("first item, followed by separator||!second item, checked|&gt;third item which spawns a submenu|#first item in submenu, grayed out|&lt;second and last item in submenu|fourth item in top menu")</p>
</div>

<div class="function_definition" id="eel_gfx_transformblit">
	<div class="e_func"><code>gfx_transformblit(srcimg,destx,desty,destw,desth,div_w,div_h,table)</code></div>
	<p>Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (this table must not cross a 65536 item boundary). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.</p>
</div>

<div class="function_definition" id="eel_gfx_triangle">
	<div class="e_func"><code>gfx_triangle(x1,y1,x2,y2,x3,y3[x4,y4...])</code></div>
	<p>Draws a filled triangle, or any convex polygon.</p>
</div>

<div class="function_definition" id="eel_gfx_update">
	<div class="e_func"><code>gfx_update()</code></div>
	<p>Updates the graphics display, if opened</p>
</div>

<div class="function_definition" id="eel_ifft">
	<div class="e_func"><code>ifft(buffer,size)</code></div>
	<p>Perform an inverse FFT. For more information see <a href="#fft">fft</a>().</p>
</div>

<div class="function_definition" id="eel_ifft_real">
	<div class="e_func"><code>ifft_real(buffer,size)</code></div>
	<p>Performs an inverse FFT, but takes size/2 complex input pairs and produces size real output values. Usually used along with fft_ipermute(size/2).</p>
</div>

<div class="function_definition" id="eel_invsqrt">
	<div class="e_func"><code>invsqrt(value)</code></div>
	<p>Returns a fast inverse square root (1/sqrt(x)) approximation of the parameter.</p>
</div>

<div class="function_definition" id="eel_log">
	<div class="e_func"><code>log(value)</code></div>
	<p>Returns the natural logarithm (base e) of the parameter. If the value is not greater than 0, the return value is undefined.</p>
</div>

<div class="function_definition" id="eel_log10">
	<div class="e_func"><code>log10(value)</code></div>
	<p>Returns the base-10 logarithm of the parameter. If the value is not greater than 0, the return value is undefined.</p>
</div>

<div class="function_definition" id="eel_loop">
	<div class="e_func"><code>loop(count,expression)</code></div>
	<p>Evaluates count once, and then executes expression count, but not more than 1048576, times.</p>
</div>

<div class="function_definition" id="eel_match">
	<div class="e_func"><code>match("needle","haystack"[, ...])</code></div>
	<p>Searches for the first parameter in the second parameter, using a simplified regular expression syntax.</p>
	<ul>
		<li>* = match 0 or more characters</li>
		<li>*? = match 0 or more characters, lazy</li>
		<li>+ = match 1 or more characters</li>
		<li>+? = match 1 or more characters, lazy</li>
		<li>? = match one character
	</ul>
	<p>You can also use format specifiers to match certain types of data, and optionally put that into a variable:</p>
	<ul>
		<li>%s means 1 or more chars</li>
		<li>%0s means 0 or more chars</li>
		<li>%5s means exactly 5 chars</li>
		<li>%5-s means 5 or more chars</li>
		<li>%-10s means 1-10 chars</li>
		<li>%3-5s means 3-5 chars</li>
		<li>%0-5s means 0-5 chars</li>
		<li>%x, %d, %u, and %f are available for use similarly</li>
		<li>%c can be used, but can't take any length modifiers</li>
		<li>Use uppercase (%S, %D, etc) for lazy matching
	</ul>
	<p>See also sprintf() for other notes, including specifying direct variable references via {}.</p>
</div>

<div class="function_definition" id="eel_matchi">
	<div class="e_func"><code>matchi("needle","haystack"[, ...])</code></div>
	<p>Case-insensitive version of match().</p>
</div>

<div class="function_definition" id="eel_max">
	<div class="e_func"><code>max(&amp;value,&amp;value)</code></div>
	<p>Returns (by reference) the maximum value of the two parameters. Since max() returns by reference, expressions such as max(x,y) = 5 are possible.</p>
</div>

<div class="function_definition" id="eel_mem_get_values">
	<div class="e_func"><code>mem_get_values(offset, ...)</code></div>
	<p>Reads values from memory starting at offset into variables specified. Slower than regular memory reads for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.</p>
</div>

<div class="function_definition" id="eel_mem_insert_shuffle">
	<div class="e_func"><code>mem_insert_shuffle(buf,len,value)</code></div>
	<p>Shuffles contents of buf right by 1, inserts value at buf[0], returns previous buf[len-1].</p>
</div>

<div class="function_definition" id="eel_mem_multiply_sum">
	<div class="e_func"><code>mem_multiply_sum(src1,src2,length)</code></div>
	<p>Calculates the sum of the products of values pointed to by src1 and src2. If src2 is -1, then calculates the sum of squares of src1, if -2, the sum of the absolute values of src, if -3, calculates the sum of the values of src1. Other negative values are undefined.</p>
</div>

<div class="function_definition" id="eel_mem_set_values">
	<div class="e_func"><code>mem_set_values(offset, ...)</code></div>
	<p>Writes values to memory starting at offset from variables specified. Slower than regular memory writes for less than a few variables, faster for more than a few. Undefined behavior if used with more than 32767 variables.</p>
</div>

<div class="function_definition" id="eel_memcpy">
	<div class="e_func"><code>memcpy(dest,src,length)</code></div>
	<p>Copies length items of memory from src to dest. Regions are permitted to overlap.</p>
</div>

<div class="function_definition" id="eel_memset">
	<div class="e_func"><code>memset(offset,value,length)</code></div>
	<p>Sets length items of memory at offset to value.</p>
</div>

<div class="function_definition" id="eel_min">
	<div class="e_func"><code>min(&amp;value,&amp;value)</code></div>
	<p>Returns (by reference) the minimum value of the two parameters. Since min() returns by reference, expressions such as min(x,y) = 5 are possible.</p>
</div>

<div class="function_definition" id="eel_printf">
	<div class="e_func"><code>printf("format"[, ...])</code></div>
	<p>Output formatted string to system-specific destination, see <a href="#sprintf">sprintf</a>() for more information</p>
</div>

<div class="function_definition" id="eel_rand">
	<div class="e_func"><code>rand([max])</code></div>
	<p>Returns a pseudorandom real number between 0 and the parameter, inclusive. If the parameter is omitted or less than 1.0, 1.0 is used as a maximum instead.</p>
</div>

<div class="function_definition" id="eel_runloop">
	<div class="e_func"><code>runloop("code")</code></div>
	<p>Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().<br>Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.</p>
</div>

<div class="function_definition" id="eel_sign">
	<div class="e_func"><code>sign(value)</code></div>
	<p>Returns 1.0 if the parameter is greater than 0, -1.0 if the parameter is less than 0, or 0 if the parameter is 0.</p>
</div>

<div class="function_definition" id="eel_sin">
	<div class="e_func"><code>sin(angle)</code></div>
	<p>Returns the sine of the angle specified (specified in radians -- to convert from degrees to radians, multiply by $pi/180, or 0.017453).</p>
</div>

<div class="function_definition" id="eel_sleep">
	<div class="e_func"><code>sleep(ms)</code></div>
	<p>Yields the CPU for the millisecond count specified, calling Sleep() on Windows or usleep() on other platforms.</p>
</div>

<div class="function_definition" id="eel_sprintf">
	<div class="e_func"><code>sprintf(#dest,"format"[, ...])</code></div>
	<p>Formats a string and stores it in #dest. Format specifiers begin with %, and may include:</p>
	<ul>
		<li> %% = %</li>
		<li> %s = string from parameter</li>
		<li> %d = parameter as integer</li>
		<li> %i = parameter as integer</li>
		<li> %u = parameter as unsigned integer</li>
		<li> %x = parameter as hex (lowercase) integer</li>
		<li> %X = parameter as hex (uppercase) integer</li>
		<li> %c = parameter as character</li>
		<li> %f = parameter as floating point</li>
		<li> %e = parameter as floating point (scientific notation, lowercase)</li>
		<li> %E = parameter as floating point (scientific notation, uppercase)</li>
		<li> %g = parameter as floating point (shortest representation, lowercase)</li>
		<li> %G = parameter as floating point (shortest representation, uppercase)
	</ul>
	<p>Many standard C printf() modifiers can be used, including:</p>
	<ul>
		<li> %.10s = string, but only print up to 10 characters</li>
		<li> %-10s = string, left justified to 10 characters</li>
		<li> %10s = string, right justified to 10 characters</li>
		<li> %+f = floating point, always show sign</li>
		<li> %.4f = floating point, minimum of 4 digits after decimal point</li>
		<li> %10d = integer, minimum of 10 digits (space padded)</li>
		<li> %010f = integer, minimum of 10 digits (zero padded)
	</ul>
	<p>Values for format specifiers can be specified as additional parameters to sprintf, or within {} in the format specifier (such as %{varname}d, in that case a global variable is always used).</p>
</div>

<div class="function_definition" id="eel_sqr">
	<div class="e_func"><code>sqr(value)</code></div>
	<p>Returns the square of the parameter (similar to value*value, but only evaluating value once).</p>
</div>

<div class="function_definition" id="eel_sqrt">
	<div class="e_func"><code>sqrt(value)</code></div>
	<p>Returns the square root of the parameter. If the parameter is negative, the return value is undefined.</p>
</div>

<div class="function_definition" id="eel_stack_exch">
	<div class="e_func"><code>stack_exch(&amp;value)</code></div>
	<p>Exchanges a value with the top of the stack, and returns a reference to the parameter (with the new value).</p>
</div>

<div class="function_definition" id="eel_stack_peek">
	<div class="e_func"><code>stack_peek(index)</code></div>
	<p>Returns a reference to the item on the top of the stack (if index is 0), or to the Nth item on the stack if index is greater than 0.</p>
</div>

<div class="function_definition" id="eel_stack_pop">
	<div class="e_func"><code>stack_pop(&amp;value)</code></div>
	<p>Pops a value from the user stack into value, or into a temporary buffer if value is not specified, and returns a reference to where the stack was popped. Note that no checking is done to determine if the stack is empty, and as such stack_pop() will never fail.</p>
</div>

<div class="function_definition" id="eel_stack_push">
	<div class="e_func"><code>stack_push(&amp;value)</code></div>
	<p>Pushes value onto the user stack, returns a reference to the parameter.</p>
</div>

<div class="function_definition" id="eel_str_delsub">
	<div class="e_func"><code>str_delsub(#str,pos,len)</code></div>
	<p>Deletes len characters at offset pos from #str, and returns #str.</p>
</div>

<div class="function_definition" id="eel_str_getchar">
	<div class="e_func"><code>str_getchar("str",offset[,type])</code></div>
	<p>Returns the data at byte-offset offset of str. If offset is negative, position is relative to end of string.type defaults to signed char, but can be specified to read raw binary data in other formats (note the single quotes, these are single/multi-byte characters):</p>
	<ul>
		<li>'c' - signed char</li>
		<li>'cu' - unsigned char</li>
		<li>'s' - signed short</li>
		<li>'S' - signed short, big endian</li>
		<li>'su' - unsigned short</li>
		<li>'Su' - unsigned short, big endian</li>
		<li>'i' - signed int</li>
		<li>'I' - signed int, big endian</li>
		<li>'iu' - unsigned int</li>
		<li>'Iu' - unsigned int, big endian</li>
		<li>'f' - float</li>
		<li>'F' - float, big endian</li>
		<li>'d' - double</li>
		<li>'D' - double, big endian</li>
	</ul>

</div>

<div class="function_definition" id="eel_str_insert">
	<div class="e_func"><code>str_insert(#str,"srcstr",pos)</code></div>
	<p>Inserts srcstr into #str at offset pos. Returns #str</p>
</div>

<div class="function_definition" id="eel_str_setchar">
	<div class="e_func"><code>str_setchar(#str,offset,val[,type]))</code></div>
	<p>Sets value at offset offset, type optional. offset may be negative to refer to offset relative to end of string, or between 0 and length, inclusive, and if set to length it will lengthen string. See <a href="#str_getchar">str_getchar</a>() for more information on types.</p>
</div>

<div class="function_definition" id="eel_str_setlen">
	<div class="e_func"><code>str_setlen(#str,len)</code></div>
	<p>Sets length of #str (if increasing, will be space-padded), and returns #str.</p>
</div>

<div class="function_definition" id="eel_strcat">
	<div class="e_func"><code>strcat(#str,"srcstr")</code></div>
	<p>Appends srcstr to #str, and returns #str</p>
</div>

<div class="function_definition" id="eel_strcmp">
	<div class="e_func"><code>strcmp("str","str2")</code></div>
	<p>Compares strings, returning 0 if equal</p>
</div>

<div class="function_definition" id="eel_strcpy">
	<div class="e_func"><code>strcpy(#str,"srcstr")</code></div>
	<p>Copies the contents of srcstr to #str, and returns #str</p>
</div>

<div class="function_definition" id="eel_strcpy_from">
	<div class="e_func"><code>strcpy_from(#str,"srcstr",offset)</code></div>
	<p>Copies srcstr to #str, but starts reading srcstr at offset offset</p>
</div>

<div class="function_definition" id="eel_strcpy_substr">
	<div class="e_func"><code>strcpy_substr(#str,"srcstr",offs,ml))</code></div>
	<p>PHP-style (start at offs, offs&lt;0 means from end, ml for maxlen, ml&lt;0 = reduce length by this amt)</p>
</div>

<div class="function_definition" id="eel_stricmp">
	<div class="e_func"><code>stricmp("str","str2")</code></div>
	<p>Compares strings ignoring case, returning 0 if equal</p>
</div>

<div class="function_definition" id="eel_strlen">
	<div class="e_func"><code>strlen("str")</code></div>
	<p>Returns the length of the string passed as a parameter</p>
</div>

<div class="function_definition" id="eel_strncat">
	<div class="e_func"><code>strncat(#str,"srcstr",maxlen)</code></div>
	<p>Appends srcstr to #str, stopping after maxlen characters of srcstr. Returns #str.</p>
</div>

<div class="function_definition" id="eel_strncmp">
	<div class="e_func"><code>strncmp("str","str2",maxlen)</code></div>
	<p>Compares strings giving up after maxlen characters, returning 0 if equal</p>
</div>

<div class="function_definition" id="eel_strncpy">
	<div class="e_func"><code>strncpy(#str,"srcstr",maxlen)</code></div>
	<p>Copies srcstr to #str, stopping after maxlen characters. Returns #str.</p>
</div>

<div class="function_definition" id="eel_strnicmp">
	<div class="e_func"><code>strnicmp("str","str2",maxlen)</code></div>
	<p>Compares strings giving up after maxlen characters, ignoring case, returning 0 if equal</p>
</div>

<div class="function_definition" id="eel_tan">
	<div class="e_func"><code>tan(angle)</code></div>
	<p>Returns the tangent of the angle specified (specified in radians).</p>
</div>

<div class="function_definition" id="eel_tcp_close">
	<div class="e_func"><code>tcp_close(connection)</code></div>
	<p>Closes a TCP connection created by tcp_listen() or tcp_connect().</p>
</div>

<div class="function_definition" id="eel_tcp_connect">
	<div class="e_func"><code>tcp_connect("address",port[,block])</code></div>
	<p>Create a new TCP connection to address:port. If block is specified and 0, connection will be made nonblocking. Returns TCP connection ID greater than 0 on success.</p>
</div>

<div class="function_definition" id="eel_tcp_listen">
	<div class="e_func"><code>tcp_listen(port[,"interface",#ip_out])</code></div>
	<p>Listens on port specified. Returns less than 0 if could not listen, 0 if no new connection available, or greater than 0 (as a TCP connection ID) if a new connection was made. If a connection made and #ip_out specified, it will be set to the remote IP. interface can be empty for all interfaces, otherwise an interface IP as a string.</p>
</div>

<div class="function_definition" id="eel_tcp_listen_end">
	<div class="e_func"><code>tcp_listen_end(port)</code></div>
	<p>Ends listening on port specified.</p>
</div>

<div class="function_definition" id="eel_tcp_recv">
	<div class="e_func"><code>tcp_recv(connection,#str[,maxlen])</code></div>
	<p>Receives data from a connection to #str. If maxlen is specified, no more than maxlen bytes will be received. If non-blocking, 0 will be returned if would block. Returns less than 0 if error.</p>
</div>

<div class="function_definition" id="eel_tcp_send">
	<div class="e_func"><code>tcp_send(connection,"str"[,len])</code></div>
	<p>Sends a string to connection. Returns -1 on error, 0 if connection is non-blocking and would block, otherwise returns length sent. If len is specified and not less than 1, only the first len bytes of the string parameter will be sent.</p>
</div>

<div class="function_definition" id="eel_tcp_set_block">
	<div class="e_func"><code>tcp_set_block(connection,block)</code></div>
	<p>Sets whether a connection blocks.</p>
</div>

<div class="function_definition" id="eel_time">
	<div class="e_func"><code>time([&amp;val])</code></div>
	<p>Sets the parameter (or a temporary buffer if omitted) to the number of seconds since January 1, 1970, and returns a reference to that value. The granularity of the value returned is 1 second.</p>
</div>

<div class="function_definition" id="eel_time_precise">
	<div class="e_func"><code>time_precise([&amp;val])</code></div>
	<p>Sets the parameter (or a temporary buffer if omitted) to a system-local timestamp in seconds, and returns a reference to that value. The granularity of the value returned is system defined (but generally significantly smaller than one second).</p>
</div>

<div class="function_definition" id="eel_while">
	<div class="e_func"><code>while(expression)</code></div>
	<p>Executes expression until expression evaluates to zero, or until 1048576iterations occur. An alternate and more useful syntax is while (expression) ( statements ), which evaluates statements after every non-zero evaluation of expression.
</div>
    </section><!-- end of #e_funcs"-->

    <section class="lua" id="l_funcs">
      <h2>ReaScript/Lua Built-In Function List</h2>

<div class="function_definition" id="lua_atexit">
	<div class="l_func"><code>reaper.atexit(function)</code></div>
	<p>Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.</p>
</div>

<div class="function_definition" id="lua_defer">
	<div class="l_func"><code>reaper.defer(function)</code></div>
	<p>Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().<br>Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.</p>
</div>

<div class="function_definition" id="lua_get_action_context">
	<div class="l_func"><code>reaper.get_action_context()</code></div>
	<p>is_new_value,filename,sectionID,cmdID,mode,resolution,val,contextstr = reaper.get_action_context()<br>Returns contextual information about the script, typically MIDI/OSC input values.<br>val will be set to a relative or absolute value depending on mode (=0: absolute mode, &gt;0: relative modes).<br>resolution=127 for 7-bit resolution, =16383 for 14-bit resolution.<br>sectionID, and cmdID will be set to -1 if the script is not part of the action list.<br>mode, resolution and val will be set to -1 if the script was not triggered via MIDI/OSC.<br>contextstr may be empty or one of:
	<ul>  
		<li>midi:XX[:YY] (one or two bytes hex)</li>  
		<li>[wheel|hwheel|mtvert|mthorz|mtzoom|mtrot|mediakbd]:flags</li>  
		<li>key:flags:keycode</li>  
		<li>osc:/msg[:f=FloatValue|:s=StringValue]</li>  
		<li>KBD_OnMainActionEx
	</ul>
<p>(flags may include V=virtkey, S=shift, A=alt/option, C=control/command, W=win/control)</p>

</div>

<div class="function_definition" id="lua_gfx_variables">
	<div class="l_func"><code>gfx VARIABLES</code></div>
	<p>The following global variables are special and will be used by the graphics system:</p>
	<ul>
		<li>gfx.r - current red component (0..1) used by drawing operations.</li>
		<li>gfx.g - current green component (0..1) used by drawing operations.</li>
		<li>gfx.b - current blue component (0..1) used by drawing operations.</li>
		<li>gfx.a2 - current alpha component (0..1) used by drawing operations when writing solid colors (normally ignored but useful when creating transparent images).</li>
		<li>gfx.a - alpha for drawing (1=normal).</li>
		<li>gfx.mode - blend mode for drawing. Set mode to 0 for default options. Add 1.0 for additive blend mode (if you wish to do subtractive, set gfx.a to negative and use gfx.mode as additive). Add 2.0 to disable source alpha for gfx.blit(). Add 4.0 to disable filtering for gfx.blit(). </li>
		<li>gfx.w - width of the UI framebuffer. </li>
		<li>gfx.h - height of the UI framebuffer. </li>
		<li>gfx.x - current graphics position X. Some drawing functions use as start position and update. </li>
		<li>gfx.y - current graphics position Y. Some drawing functions use as start position and update. </li>
		<li>gfx.clear - if greater than -1.0, framebuffer will be cleared to that color. the color for this one is packed RGB (0..255), i.e. red+green*256+blue*65536. The default is 0 (black). </li>
		<li>gfx.dest - destination for drawing operations, -1 is main framebuffer, set to 0..1024-1 to have drawing operations go to an offscreen buffer (or loaded image).</li>
		<li>gfx.texth - the (READ-ONLY) height of a line of text in the current font. Do not modify this variable.</li>
		<li>gfx.ext_retina - to support hidpi/retina, callers should set to 1.0 on initialization, this value will be updated to value greater than 1.0 (such as 2.0) if retina/hidpi. On macOS gfx.w/gfx.h/etc will be doubled, but on other systems gfx.w/gfx.h will remain the same and gfx.ext_retina is a scaling hint for drawing.</li>
		<li>gfx.mouse_x - current X coordinate of the mouse relative to the graphics window.</li>
		<li>gfx.mouse_y - current Y coordinate of the mouse relative to the graphics window.</li>
		<li>gfx.mouse_wheel - wheel position, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.</li>
		<li>gfx.mouse_hwheel - horizontal wheel positions, will change typically by 120 or a multiple thereof, the caller should clear the state to 0 after reading it.</li>
		<li>gfx.mouse_cap - a bitfield of mouse and keyboard modifier state. Note that a script must call gfx.getchar() at least once in order to get modifier state when the mouse is not captured by the window. Bitfield bits:
	<ul>
		<li>1: left mouse button</li>
		<li>2: right mouse button</li>
		<li>4: Control key</li>
		<li>8: Shift key</li>
		<li>16: Alt key</li>
		<li>32: Windows key</li>
		<li>64: middle mouse button</li>
	</ul></li>
	</ul>

</div>

<div class="function_definition" id="lua_gfx.arc">
	<div class="l_func"><code>gfx.arc(x,y,r,ang1,ang2[,antialias])</code></div>
	<p>Draws an arc of the circle centered at x,y, with ang1/ang2 being specified in radians.</p>
</div>

<div class="function_definition" id="lua_gfx.blit">
	<div class="l_func"><code>gfx.blit(source[, scale, rotation, srcx, srcy, srcw, srch, destx, desty, destw, desth, rotxoffs, rotyoffs])</code></div>
	<p>Copies from source (-1 = main framebuffer, or an image from gfx.loadimg() etc), using current opacity and copy mode (set with gfx.a, gfx.mode).<br>If destx/desty are not specified, gfx.x/gfx.y will be used as the destination position.<br>scale (1.0 is unscaled) will be used only if destw/desth are not specified.<br>rotation is an angle in radians<br>srcx/srcy/srcw/srch specify the source rectangle (if omitted srcw/srch default to image size)<br>destx/desty/destw/desth specify destination rectangle (if not specified destw/desth default to srcw/srch * scale).</p>
</div>

<div class="function_definition" id="lua_gfx.blitext">
	<div class="l_func"><code>gfx.blitext(source,coordinatelist,rotation)</code></div>
	<p>Deprecated, use gfx.blit instead.</p>
</div>

<div class="function_definition" id="lua_gfx.blurto">
	<div class="l_func"><code>gfx.blurto(x,y)</code></div>
	<p>Blurs the region of the screen between gfx.x,gfx.y and x,y, and updates gfx.x,gfx.y to x,y.</p>
</div>

<div class="function_definition" id="lua_gfx.circle">
	<div class="l_func"><code>gfx.circle(x,y,r[,fill,antialias])</code></div>
	<p>Draws a circle, optionally filling/antialiasing.</p>
</div>

<div class="function_definition" id="lua_gfx.clienttoscreen">
	<div class="l_func"><code>gfx.clienttoscreen(x,y)</code></div>
	<p>Converts the coordinates x,y to screen coordinates, returns those values.</p>
</div>

<div class="function_definition" id="lua_gfx.deltablit">
	<div class="l_func"><code>gfx.deltablit(srcimg,srcs,srct,srcw,srch,destx,desty,destw,desth,dsdx,dtdx,dsdy,dtdy,dsdxdy,dtdxdy[,usecliprect=1])</code></div>
	<p>Blits from srcimg(srcx,srcy,srcw,srch) to destination (destx,desty,destw,desth). Source texture coordinates are s/t, dsdx represents the change in s coordinate for each x pixel, dtdy represents the change in t coordinate for each y pixel, etc. dsdxdy represents the change in dsdx for each line. If usecliprect is specified and 0, then srcw/srch are ignored.</p>
</div>

<div class="function_definition" id="lua_gfx.dock">
	<div class="l_func"><code>gfx.dock(v[,wx,wy,ww,wh])</code></div>
	<p>Call with v=-1 to query docked state, otherwise v&gt;=0 to set docked state. State is &amp;1 if docked, second byte is docker index (or last docker index if undocked). If wx-wh specified, additional values will be returned with the undocked window position/size</p>
</div>

<div class="function_definition" id="lua_gfx.drawchar">
	<div class="l_func"><code>gfx.drawchar(char)</code></div>
	<p>Draws the character (can be a numeric ASCII code as well), to gfx.x, gfx.y, and moves gfx.x over by the size of the character.</p>
</div>

<div class="function_definition" id="lua_gfx.drawnumber">
	<div class="l_func"><code>gfx.drawnumber(n,ndigits)</code></div>
	<p>Draws the number n with ndigits of precision to gfx.x, gfx.y, and updates gfx.x to the right side of the drawing. The text height is gfx.texth.</p>
</div>

<div class="function_definition" id="lua_gfx.drawstr">
	<div class="l_func"><code>gfx.drawstr("str"[,flags,right,bottom])</code></div>
	<p>Draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y so that subsequent draws will occur in a similar place.</p><p>If flags, right ,bottom passed in:</p><ul>
		<li>flags&amp;1: center horizontally</li>
		<li>flags&amp;2: right justify</li>
		<li>flags&amp;4: center vertically</li>
		<li>flags&amp;8: bottom justify</li>
		<li>flags&amp;256: ignore right/bottom, otherwise text is clipped to (gfx.x, gfx.y, right, bottom)</li>
	</ul>

</div>

<div class="function_definition" id="lua_gfx.getchar">
	<div class="l_func"><code>gfx.getchar([char, unichar])</code></div>
	<p>If char is 0 or omitted, returns a character from the keyboard queue, or 0 if no character is available, or -1 if the graphics window is not open. If char is specified and nonzero, that character's status will be checked, and the function will return greater than 0 if it is pressed. Note that calling gfx.getchar() at least once causes gfx.mouse_cap to reflect keyboard modifiers even when the mouse is not captured.</p><p>Common values are standard ASCII, such as 'a', 'A', '=' and '1', but for many keys multi-byte values are used, including 'home', 'up', 'down', 'left', 'rght', 'f1'.. 'f12', 'pgup', 'pgdn', 'ins', and 'del'.</p><p>Modified and special keys can also be returned, including:
	<ul>
		<li>Ctrl/Cmd+A..Ctrl+Z as 1..26</li>
		<li>Ctrl/Cmd+Alt+A..Z as 257..282</li>
		<li>Alt+A..Z as 'A'+256..'Z'+256</li>
		<li>27 for ESC</li>
		<li>13 for Enter</li>
		<li>' ' for space</li>
		<li>65536 for query of special flags, returns: &amp;1 (supported), &amp;2=window has focus, &amp;4=window is visible</li>
		<li>If unichar is specified, it will be set to the unicode value of the key if available (and the return value may be the unicode value or a raw key value as described above, depending). If unichar is not specified, unicode codepoints greater than 255 will be returned as 'u'&lt;&lt;24 + value</li>
	</ul>

</div>

<div class="function_definition" id="lua_gfx.getdropfile">
	<div class="l_func"><code>gfx.getdropfile(idx)</code></div>
	<p>Returns success,string for dropped file index idx. call gfx.dropfile(-1) to clear the list when finished.</p>
</div>

<div class="function_definition" id="lua_gfx.getfont">
	<div class="l_func"><code>gfx.getfont()</code></div>
	<p>Returns current font index, and the actual font face used by this font (if available).</p>
</div>

<div class="function_definition" id="lua_gfx.getimgdim">
	<div class="l_func"><code>gfx.getimgdim(handle)</code></div>
	<p>Retreives the dimensions of an image specified by handle, returns w, h pair.</p>
</div>

<div class="function_definition" id="lua_gfx.getpixel">
	<div class="l_func"><code>gfx.getpixel()</code></div>
	<p>Returns r,g,b values [0..1] of the pixel at (gfx.x,gfx.y)</p>
</div>

<div class="function_definition" id="lua_gfx.gradrect">
	<div class="l_func"><code>gfx.gradrect(x,y,w,h, r,g,b,a[, drdx, dgdx, dbdx, dadx, drdy, dgdy, dbdy, dady])</code></div>
	<p>Fills a gradient rectangle with the color and alpha specified. drdx-dadx reflect the adjustment (per-pixel) applied for each pixel moved to the right, drdy-dady are the adjustment applied for each pixel moved toward the bottom. Normally drdx=adjustamount/w, drdy=adjustamount/h, etc.</p>
</div>

<div class="function_definition" id="lua_gfx.init">
	<div class="l_func"><code>gfx.init("name"[,width,height,dockstate,xpos,ypos])</code></div>
	<p>Initializes the graphics window with title name. Suggested width and height can be specified. If window is already open, a non-empty name will re-title window, or an empty title will resize window.</p><p>Once the graphics window is open, gfx.update() should be called periodically.</p>
</div>

<div class="function_definition" id="lua_gfx.line">
	<div class="l_func"><code>gfx.line(x,y,x2,y2[,aa])</code></div>
	<p>Draws a line from x,y to x2,y2, and if aa is not specified or 0.5 or greater, it will be antialiased.</p>
</div>

<div class="function_definition" id="lua_gfx.lineto">
	<div class="l_func"><code>gfx.lineto(x,y[,aa])</code></div>
	<p>Draws a line from gfx.x,gfx.y to x,y. If aa is 0.5 or greater, then antialiasing is used. Updates gfx.x and gfx.y to x,y.</p>
</div>

<div class="function_definition" id="lua_gfx.loadimg">
	<div class="l_func"><code>gfx.loadimg(image,"filename")</code></div>
	<p>Load image from filename into slot 0..1024-1 specified by image. Returns the image index if success, otherwise -1 if failure. The image will be resized to the dimensions of the image file.</p>
</div>

<div class="function_definition" id="lua_gfx.measurechar">
	<div class="l_func"><code>gfx.measurechar(char)</code></div>
	<p>Measures the drawing dimensions of a character with the current font (as set by gfx.setfont). Returns width and height of character.</p>
</div>

<div class="function_definition" id="lua_gfx.measurestr">
	<div class="l_func"><code>gfx.measurestr("str")</code></div>
	<p>Measures the drawing dimensions of a string with the current font (as set by gfx.setfont). Returns width and height of string.</p>
</div>

<div class="function_definition" id="lua_gfx.muladdrect">
	<div class="l_func"><code>gfx.muladdrect(x,y,w,h,mul_r,mul_g,mul_b[,mul_a,add_r,add_g,add_b,add_a])</code></div>
	<p>Multiplies each pixel by mul_* and adds add_*, and updates in-place. Useful for changing brightness/contrast, or other effects.</p>
</div>

<div class="function_definition" id="lua_gfx.printf">
	<div class="l_func"><code>gfx.printf("format"[, ...])</code></div>
	<p>Formats and draws a string at gfx.x, gfx.y, and updates gfx.x/gfx.y accordingly (the latter only if the formatted string contains newline). For more information on format strings, see sprintf()</p>
</div>

<div class="function_definition" id="lua_gfx.quit">
	<div class="l_func"><code>gfx.quit()</code></div>
	<p>Closes the graphics window.</p>
</div>

<div class="function_definition" id="lua_gfx.rect">
	<div class="l_func"><code>gfx.rect(x,y,w,h[,filled])</code></div>
	<p>Fills a rectangle at x,y, w,h pixels in dimension, filled by default.</p>
</div>

<div class="function_definition" id="lua_gfx.rectto">
	<div class="l_func"><code>gfx.rectto(x,y)</code></div>
	<p>Fills a rectangle from gfx.x,gfx.y to x,y. Updates gfx.x,gfx.y to x,y.</p>
</div>

<div class="function_definition" id="lua_gfx.roundrect">
	<div class="l_func"><code>gfx.roundrect(x,y,w,h,radius[,antialias])</code></div>
	<p>Draws a rectangle with rounded corners.</p>
</div>

<div class="function_definition" id="lua_gfx.screentoclient">
	<div class="l_func"><code>gfx.screentoclient(x,y)</code></div>
	<p>Converts the screen coordinates x,y to client coordinates, returns those values.</p>
</div>

<div class="function_definition" id="lua_gfx.set">
	<div class="l_func"><code>gfx.set(r[,g,b,a,mode,dest,a2])</code></div>
	<p>Sets gfx.r/gfx.g/gfx.b/gfx.a/gfx.mode/gfx.a2, sets gfx.dest if final parameter specified</p>
</div>

<div class="function_definition" id="lua_gfx.setcursor">
	<div class="l_func"><code>gfx.setcursor(resource_id,custom_cursor_name)</code></div>
	<p>Sets the mouse cursor. resource_id is a value like 32512 (for an arrow cursor), custom_cursor_name is a string like "arrow" (for the REAPER custom arrow cursor). resource_id must be nonzero, but custom_cursor_name is optional.</p>
</div>

<div class="function_definition" id="lua_gfx.setfont">
	<div class="l_func"><code>gfx.setfont(idx[,"fontface", sz, flags])</code></div>
	<p>Can select a font and optionally configure it. idx=0 for default bitmapped font, no configuration is possible for this font. idx=1..16 for a configurable font, specify fontface such as "Arial", sz of 8-100, and optionally specify flags, which is a multibyte character, which can include 'i' for italics, 'u' for underline, or 'b' for bold. These flags may or may not be supported depending on the font and OS. After calling gfx.setfont(), gfx.texth may be updated to reflect the new average line height.</p>
</div>

<div class="function_definition" id="lua_gfx.setimgdim">
	<div class="l_func"><code>gfx.setimgdim(image,w,h)</code></div>
	<p>Resize image referenced by index 0..1024-1, width and height must be 0-8192. The contents of the image will be undefined after the resize.</p>
</div>

<div class="function_definition" id="lua_gfx.setpixel">
	<div class="l_func"><code>gfx.setpixel(r,g,b)</code></div>
	<p>Writes a pixel of r,g,b to gfx.x,gfx.y.</p>
</div>

<div class="function_definition" id="lua_gfx.showmenu">
	<div class="l_func"><code>gfx.showmenu("str")</code></div>
	<p>Shows a popup menu at gfx.x,gfx.y. str is a list of fields separated by | characters. Each field represents a menu item.<br>Fields can start with special characters:</p><p># : grayed out<br>! : checked<br>&gt; : this menu item shows a submenu<br>&lt; : last item in the current submenu</p><p>An empty field will appear as a separator in the menu. gfx.showmenu returns 0 if the user selected nothing from the menu, 1 if the first field is selected, etc.<br>Example:</p><p>gfx.showmenu("first item, followed by separator||!second item, checked|&gt;third item which spawns a submenu|#first item in submenu, grayed out|&lt;second and last item in submenu|fourth item in top menu")</p>
</div>

<div class="function_definition" id="lua_gfx.transformblit">
	<div class="l_func"><code>gfx.transformblit(srcimg,destx,desty,destw,desth,div_w,div_h,table)</code></div>
	<p>Blits to destination at (destx,desty), size (destw,desth). div_w and div_h should be 2..64, and table should point to a table of 2*div_w*div_h values (table can be a regular table or (for less overhead) a reaper.array). Each pair in the table represents a S,T coordinate in the source image, and the table is treated as a left-right, top-bottom list of texture coordinates, which will then be rendered to the destination.</p>
</div>

<div class="function_definition" id="lua_gfx.triangle">
	<div class="l_func"><code>gfx.triangle(x1,y1,x2,y2,x3,y3[x4,y4...])</code></div>
	<p>Draws a filled triangle, or any convex polygon.</p>
</div>

<div class="function_definition" id="lua_gfx.update">
	<div class="l_func"><code>gfx.update()</code></div>
	<p>Updates the graphics display, if opened</p>
</div>

<div class="function_definition" id="lua_gmem_attach">
	<div class="l_func"><code>reaper.gmem_attach(sharedMemoryName)</code></div>
	<p>Causes gmem_read()/gmem_write() to read EEL2/JSFX/Video shared memory segment named by parameter. Set to empty string to detach. 6.20+: returns previous shared memory segment name.</p>
</div>

<div class="function_definition" id="lua_gmem_read">
	<div class="l_func"><code>reaper.gmem_read(index)</code></div>
	<p>Read (number) value from shared memory attached-to by gmem_attach(). index can be [0..1&lt;&lt;25).</p>
</div>

<div class="function_definition" id="lua_gmem_write">
	<div class="l_func"><code>reaper.gmem_write(index,value)</code></div>
	<p>Write (number) value to shared memory attached-to by gmem_attach(). index can be [0..1&lt;&lt;25).</p>
</div>

<div class="function_definition" id="lua_new_array">
	<div class="l_func"><code>reaper.new_array([table|array][size])</code></div>
	<p>Creates a new reaper.array object of maximum and initial size size, if specified, or from the size/values of a table/array. Both size and table/array can be specified, the size parameter will override the table/array size.</p>
</div>

<div class="function_definition" id="lua_runloop">
	<div class="l_func"><code>reaper.runloop(function)</code></div>
	<p>Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().<br>Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.</p>
</div>

<div class="function_definition" id="lua_{reaper.array}.clear">
	<div class="l_func"><code>{reaper.array}.clear([value, offset, size])</code></div>
	<p>Sets the value of zero or more items in the array. If value not specified, 0.0 is used. offset is 1-based, if size omitted then the maximum amount available will be set.</p>
</div>

<div class="function_definition" id="lua_{reaper.array}.convolve">
	<div class="l_func"><code>{reaper.array}.convolve([src, srcoffs, size, destoffs])</code></div>
	<p>Convolves complex value pairs from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs. size is in normal items (so it must be even)</p>
</div>

<div class="function_definition" id="lua_{reaper.array}.copy">
	<div class="l_func"><code>{reaper.array}.copy([src, srcoffs, size, destoffs])</code></div>
	<p>Copies values from reaper.array or table, starting at 1-based srcoffs, writing to 1-based destoffs.</p>
</div>

<div class="function_definition" id="lua_{reaper.array}.fft">
	<div class="l_func"><code>{reaper.array}.fft(size[, permute, offset])</code></div>
	<p>Performs a forward FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.</p>
</div>

<div class="function_definition" id="lua_{reaper.array}.fft_real">
	<div class="l_func"><code>{reaper.array}.fft_real(size[, permute, offset])</code></div>
	<p>Performs a forward real-&gt;complex FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled following the FFT to be in normal order.</p>
</div>

<div class="function_definition" id="lua_{reaper.array}.get_alloc">
	<div class="l_func"><code>{reaper.array}.get_alloc()</code></div>
	<p>Returns the maximum (allocated) size of the array.</p>
</div>

<div class="function_definition" id="lua_{reaper.array}.ifft">
	<div class="l_func"><code>{reaper.array}.ifft(size[, permute, offset])</code></div>
	<p>Performs a backwards FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.</p>
</div>

<div class="function_definition" id="lua_{reaper.array}.ifft_real">
	<div class="l_func"><code>{reaper.array}.ifft_real(size[, permute, offset])</code></div>
	<p>Performs a backwards complex-&gt;real FFT of size. size must be a power of two between 4 and 32768 inclusive. If permute is specified and true, the values will be shuffled before the IFFT to be in fft-order.</p>
</div>

<div class="function_definition" id="lua_{reaper.array}.multiply">
	<div class="l_func"><code>{reaper.array}.multiply([src, srcoffs, size, destoffs])</code></div>
	<p>Multiplies values from reaper.array, starting at 1-based srcoffs, reading/writing to 1-based destoffs.</p>
</div>

<div class="function_definition" id="lua_{reaper.array}.resize">
	<div class="l_func"><code>{reaper.array}.resize(size)</code></div>
	<p>Resizes an array object to size. size must be [0..max_size].</p>
</div>

<div class="function_definition" id="lua_{reaper.array}.table">
	<div class="l_func"><code>{reaper.array}.table([offset, size])</code></div>
	<p>Returns a new table with values from items in the array. Offset is 1-based and if size is omitted all available values are used.</p>
</div>

    </section><!-- end of #l_funcs"-->

    <section class="pyth" id="p_funcs">
      <h2>ReaScript/Python Built-In Function List</h2>

<div class="function_definition" id="python_atexit">
	<div class="p_func"><code>RPR_atexit(String)</code></div>
	<p>Adds code to be executed when the script finishes or is ended by the user. Typically used to clean up after the user terminates defer() or runloop() code.</p>
</div>

<div class="function_definition" id="python_defer">
	<div class="p_func"><code>RPR_defer(String code)</code></div>
	<p>Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to runloop().<br>Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.</p>
</div>

<div class="function_definition" id="python_runloop">
	<div class="p_func"><code>RPR_runloop(String code)</code></div>
	<p>Adds code to be called back by REAPER. Used to create persistent ReaScripts that continue to run and respond to input, while the user does other tasks. Identical to defer().<br>Note that no undo point will be automatically created when the script finishes, unless you create it explicitly.</p>
</div>
    </section><!-- end of #p_funcs"-->

  </div><!-- id="page-content-wrapper" -->

  <!-- External Script -->
  <script src="js/scripts.js"></script>

</body>
</html>